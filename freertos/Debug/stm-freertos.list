
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080104c4  080104c4  000114c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010680  08010680  00012328  2**0
                  CONTENTS
  4 .ARM          00000008  08010680  08010680  00011680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010688  08010688  00012328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010688  08010688  00011688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801068c  0801068c  0001168c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000328  20000000  08010690  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051e8  20000328  080109b8  00012328  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005510  080109b8  00012510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e2d  00000000  00000000  00012358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000653c  00000000  00000000  00038185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  0003e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001656  00000000  00000000  00040438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029473  00000000  00000000  00041a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000283bb  00000000  00000000  0006af01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee2c0  00000000  00000000  000932bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018157c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f1c  00000000  00000000  001815c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001894dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000328 	.word	0x20000328
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080104ac 	.word	0x080104ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000032c 	.word	0x2000032c
 800020c:	080104ac 	.word	0x080104ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e2e:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e30:	4a22      	ldr	r2, [pc, #136]	@ (8000ebc <MX_ADC1_Init+0xa0>)
 8000e32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e5e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7e:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e80:	f001 fe86 	bl	8002b90 <HAL_ADC_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000e8a:	f001 f97f 	bl	800218c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e96:	2307      	movs	r3, #7
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000ea0:	f001 ffde 	bl	8002e60 <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eaa:	f001 f96f 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000344 	.word	0x20000344
 8000ebc:	40012000 	.word	0x40012000

08000ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a2f      	ldr	r2, [pc, #188]	@ (8000f9c <HAL_ADC_MspInit+0xdc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d158      	bne.n	8000f94 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a26      	ldr	r2, [pc, #152]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481d      	ldr	r0, [pc, #116]	@ (8000fa4 <HAL_ADC_MspInit+0xe4>)
 8000f2e:	f003 fd73 	bl	8004a18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_ADC_MspInit+0xec>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f78:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f7a:	f003 f9dd 	bl	8004338 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000f84:	f001 f902 	bl	800218c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f8e:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	2000038c 	.word	0x2000038c
 8000fac:	40026410 	.word	0x40026410

08000fb0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fb8:	4a22      	ldr	r2, [pc, #136]	@ (8001044 <MX_CAN1_Init+0x94>)
 8000fba:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fd0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000fd4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fd8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fdc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001002:	480f      	ldr	r0, [pc, #60]	@ (8001040 <MX_CAN1_Init+0x90>)
 8001004:	f002 f9dc 	bl	80033c0 <HAL_CAN_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800100e:	f001 f8bd 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;                      // Use Filter Bank 0
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode (allows flexible ID matching)
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use 32-bit filtering
 800101a:	2301      	movs	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = (0x000 << 5);         // Base ID (ignored due to mask)
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = (0x000 << 5);     // Mask 0x000 means accept all messages
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign messages to FIFO 1
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	623b      	str	r3, [r7, #32]
//  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;     // Route accepted messages to FIFO1
//  filterConfig.FilterActivation     = ENABLE;
//  filterConfig.SlaveStartFilterBank = 14;               // For CAN1 if CAN2 is used (safe default)


  HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <MX_CAN1_Init+0x90>)
 8001034:	f002 fac0 	bl	80035b8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200003ec 	.word	0x200003ec
 8001044:	40006400 	.word	0x40006400

08001048 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2a      	ldr	r2, [pc, #168]	@ (8001110 <HAL_CAN_MspInit+0xc8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d14d      	bne.n	8001106 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001074:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010b4:	2309      	movs	r3, #9
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4816      	ldr	r0, [pc, #88]	@ (8001118 <HAL_CAN_MspInit+0xd0>)
 80010c0:	f003 fcaa 	bl	8004a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010d6:	2309      	movs	r3, #9
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <HAL_CAN_MspInit+0xd0>)
 80010e2:	f003 fc99 	bl	8004a18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2105      	movs	r1, #5
 80010ea:	2014      	movs	r0, #20
 80010ec:	f003 f8fa 	bl	80042e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010f0:	2014      	movs	r0, #20
 80010f2:	f003 f913 	bl	800431c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	2015      	movs	r0, #21
 80010fc:	f003 f8f2 	bl	80042e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001100:	2015      	movs	r0, #21
 8001102:	f003 f90b 	bl	800431c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40006400 	.word	0x40006400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_DMA_Init+0x3c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <MX_DMA_Init+0x3c>)
 800112c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_DMA_Init+0x3c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2105      	movs	r1, #5
 8001142:	2038      	movs	r0, #56	@ 0x38
 8001144:	f003 f8ce 	bl	80042e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001148:	2038      	movs	r0, #56	@ 0x38
 800114a:	f003 f8e7 	bl	800431c <HAL_NVIC_EnableIRQ>

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <vApplicationGetIdleTaskMemory+0x2c>)
 800116c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	4a06      	ldr	r2, [pc, #24]	@ (800118c <vApplicationGetIdleTaskMemory+0x30>)
 8001172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200004a8 	.word	0x200004a8
 800118c:	20000548 	.word	0x20000548

08001190 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b09a      	sub	sp, #104	@ 0x68
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	telemetry_data.tRpm = 0;
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 800119c:	4b43      	ldr	r3, [pc, #268]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 80011a2:	4b42      	ldr	r3, [pc, #264]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80011a8:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80011ae:	4b3f      	ldr	r3, [pc, #252]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80011b4:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80011ba:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
	gFfbSignal = 0;
 80011c6:	4b3a      	ldr	r3, [pc, #232]	@ (80012b0 <MX_FREERTOS_Init+0x120>)
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]

	HIDReport.steering = 0;        // Steering data (0-255)
 80011ce:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = 0;        // Throttle data (0-255)
 80011d4:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = 0;           // Brake data (0-255)
 80011da:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011dc:	2200      	movs	r2, #0
 80011de:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 80011e0:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 80011e6:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 80011ec:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	725a      	strb	r2, [r3, #9]
	memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 80011f8:	2228      	movs	r2, #40	@ 0x28
 80011fa:	2100      	movs	r1, #0
 80011fc:	482b      	ldr	r0, [pc, #172]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011fe:	f00e fd5b 	bl	800fcb8 <memset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 8001202:	2300      	movs	r3, #0
 8001204:	663b      	str	r3, [r7, #96]	@ 0x60
 8001206:	2300      	movs	r3, #0
 8001208:	667b      	str	r3, [r7, #100]	@ 0x64
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 800120a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800120e:	2101      	movs	r1, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f00c f8dc 	bl	800d3ce <osSemaphoreCreate>
 8001216:	4603      	mov	r3, r0
 8001218:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <MX_FREERTOS_Init+0x128>)
 800121a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartMutex */
  osSemaphoreDef(uartMutex);
 800121c:	2300      	movs	r3, #0
 800121e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uartMutexHandle = osSemaphoreCreate(osSemaphore(uartMutex), 1);
 8001224:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001228:	2101      	movs	r1, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f00c f8cf 	bl	800d3ce <osSemaphoreCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a22      	ldr	r2, [pc, #136]	@ (80012bc <MX_FREERTOS_Init+0x12c>)
 8001234:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001236:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <MX_FREERTOS_Init+0x130>)
 8001238:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800123c:	461d      	mov	r5, r3
 800123e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001242:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800124a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00c f85c 	bl	800d30e <osThreadCreate>
 8001256:	4603      	mov	r3, r0
 8001258:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <MX_FREERTOS_Init+0x134>)
 800125a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlLoopTask */
  osThreadDef(ControlLoopTask, StartControlLoop, osPriorityHigh, 0, 512);
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <MX_FREERTOS_Init+0x138>)
 800125e:	f107 0420 	add.w	r4, r7, #32
 8001262:	461d      	mov	r5, r3
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLoopTaskHandle = osThreadCreate(osThread(ControlLoopTask), NULL);
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f00c f849 	bl	800d30e <osThreadCreate>
 800127c:	4603      	mov	r3, r0
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_FREERTOS_Init+0x13c>)
 8001280:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommLoopTask */
  osThreadDef(CommLoopTask, StartCommLoopTask, osPriorityNormal, 0, 512);
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_FREERTOS_Init+0x140>)
 8001284:	1d3c      	adds	r4, r7, #4
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommLoopTaskHandle = osThreadCreate(osThread(CommLoopTask), NULL);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00c f838 	bl	800d30e <osThreadCreate>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <MX_FREERTOS_Init+0x144>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012a4:	bf00      	nop
 80012a6:	3768      	adds	r7, #104	@ 0x68
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bdb0      	pop	{r4, r5, r7, pc}
 80012ac:	20000414 	.word	0x20000414
 80012b0:	2000048c 	.word	0x2000048c
 80012b4:	2000043c 	.word	0x2000043c
 80012b8:	200004a0 	.word	0x200004a0
 80012bc:	200004a4 	.word	0x200004a4
 80012c0:	080104d0 	.word	0x080104d0
 80012c4:	20000494 	.word	0x20000494
 80012c8:	080104fc 	.word	0x080104fc
 80012cc:	20000498 	.word	0x20000498
 80012d0:	08010528 	.word	0x08010528
 80012d4:	2000049c 	.word	0x2000049c

080012d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <StartDefaultTask+0x8>

080012e4 <StartControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	@ 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlLoop */
  /* Infinite loop */
	Start_ADC_DMA();
 80012ec:	f000 fd1e 	bl	8001d2c <Start_ADC_DMA>
  for(;;)
  {
	  float total_force = 0.0;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
	  const float Kp = 1.0f;
 80012f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012fa:	633b      	str	r3, [r7, #48]	@ 0x30

	  for (;;) {
		  // Step 1: Retrieve current force feedback signal (e.g., from game data).
		  float force_feedback_signal = gFfbSignal;
 80012fc:	4b55      	ldr	r3, [pc, #340]	@ (8001454 <StartControlLoop+0x170>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  read_hall_sensor();
 8001302:	f000 fcf5 	bl	8001cf0 <read_hall_sensor>
		  // Step 2: Calculate individual forces based on physics:
		  float inertia_force = calculate_inertia(force_feedback_signal, angular_velocity);
 8001306:	4b54      	ldr	r3, [pc, #336]	@ (8001458 <StartControlLoop+0x174>)
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	eef0 0a67 	vmov.f32	s1, s15
 8001310:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001314:	f000 fa22 	bl	800175c <calculate_inertia>
 8001318:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		  float damping_force = calculate_damping(angular_velocity);
 800131c:	4b4e      	ldr	r3, [pc, #312]	@ (8001458 <StartControlLoop+0x174>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f000 fa49 	bl	80017bc <calculate_damping>
 800132a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		  float friction_force = calculate_friction(angular_velocity);
 800132e:	4b4a      	ldr	r3, [pc, #296]	@ (8001458 <StartControlLoop+0x174>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	f000 fa58 	bl	80017ec <calculate_friction>
 800133c:	ed87 0a08 	vstr	s0, [r7, #32]
		  float lock_force = calculate_lock(wheel_angle);
 8001340:	4b46      	ldr	r3, [pc, #280]	@ (800145c <StartControlLoop+0x178>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	f000 fa79 	bl	8001840 <calculate_lock>
 800134e:	ed87 0a07 	vstr	s0, [r7, #28]

		  // Step 3: Sum all forces and scale to PWM range:
		  total_force = force_feedback_signal + inertia_force + damping_force + friction_force + lock_force;
 8001352:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001356:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001366:	edd7 7a08 	vldr	s15, [r7, #32]
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001376:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  // Strength gain
		  total_force *= gStrength;
 800137a:	4b39      	ldr	r3, [pc, #228]	@ (8001460 <StartControlLoop+0x17c>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001388:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  total_force = constrain(total_force, -1.0, 1.0);
 800138c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001390:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8001394:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001398:	f000 f9b6 	bl	8001708 <constrain>
 800139c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		  // Deadband
		  const float FORCE_DEADBAND_THRESHOLD = 0.05f; // Adjust as needed
 80013a0:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <StartControlLoop+0x180>)
 80013a2:	61bb      	str	r3, [r7, #24]
		  const float ANGLE_DEADBAND_THRESHOLD = 50.0f; // Adjust as needed
 80013a4:	4b30      	ldr	r3, [pc, #192]	@ (8001468 <StartControlLoop+0x184>)
 80013a6:	617b      	str	r3, [r7, #20]
		  float error = wheel_angle;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <StartControlLoop+0x178>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
		  if (fabsf(error) < ANGLE_DEADBAND_THRESHOLD)  {
 80013ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b2:	eef0 7ae7 	vabs.f32	s15, s15
 80013b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dd03      	ble.n	80013cc <StartControlLoop+0xe8>
			  total_force = 0.0f;
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80013ca:	e017      	b.n	80013fc <StartControlLoop+0x118>
		  } else { // TEST CODE: gives increasing feedback farther away from center
			  total_force = -Kp * (error / WHEEL_MAX_ANGLE);
 80013cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013d0:	eeb1 7a67 	vneg.f32	s14, s15
 80013d4:	edd7 6a04 	vldr	s13, [r7, #16]
 80013d8:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800146c <StartControlLoop+0x188>
 80013dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			  total_force = constrain(total_force, -1.0f, 1.0f);
 80013e8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80013ec:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80013f0:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80013f4:	f000 f988 	bl	8001708 <constrain>
 80013f8:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		  }

		  // Step 4: Map total_force to PWM and determine direction
		  float pwm_output = scale_to_pwm(total_force);
 80013fc:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001400:	f000 fa64 	bl	80018cc <scale_to_pwm>
 8001404:	ed87 0a03 	vstr	s0, [r7, #12]
		  // 0 is negative direction; 1 is positive direction
		  uint8_t motor_direction = (total_force >= 0) ? 1 : 0;
 8001408:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800140c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	bfac      	ite	ge
 8001416:	2301      	movge	r3, #1
 8001418:	2300      	movlt	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	72fb      	strb	r3, [r7, #11]

		  // Debug
		  gDir = motor_direction;
 800141e:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <StartControlLoop+0x18c>)
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	7013      	strb	r3, [r2, #0]
		  gTotalforce = total_force;
 8001424:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <StartControlLoop+0x190>)
 8001426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001428:	6013      	str	r3, [r2, #0]
		  gPWMConst = pwm_output;
 800142a:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <StartControlLoop+0x194>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6013      	str	r3, [r2, #0]

		  // Step 5: Send PWM signal to H-bridge for motor control:
		  //set_motor_direction(motor_direction);
//		  set_motor_pwm(pwm_output, motor_direction);
		  set_motor_pwm(gPWMConstDebug, gDirDebug); //DEBUG MOTOR
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <StartControlLoop+0x198>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <StartControlLoop+0x19c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	eeb0 0a67 	vmov.f32	s0, s15
 8001440:	f000 fbd6 	bl	8001bf0 <set_motor_pwm>

		  // Step 6: Update wheel position and velocity for next loop:
		  update_wheel_position_and_velocity(&wheel_angle, &angular_velocity);
 8001444:	4904      	ldr	r1, [pc, #16]	@ (8001458 <StartControlLoop+0x174>)
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <StartControlLoop+0x178>)
 8001448:	f000 fb4a 	bl	8001ae0 <update_wheel_position_and_velocity>

		  // Run this task periodically (every 10ms):
		  osDelay(5);
 800144c:	2005      	movs	r0, #5
 800144e:	f00b ffaa 	bl	800d3a6 <osDelay>
	  for (;;) {
 8001452:	e753      	b.n	80012fc <StartControlLoop+0x18>
 8001454:	2000048c 	.word	0x2000048c
 8001458:	20000470 	.word	0x20000470
 800145c:	2000046c 	.word	0x2000046c
 8001460:	20000004 	.word	0x20000004
 8001464:	3d4ccccd 	.word	0x3d4ccccd
 8001468:	42480000 	.word	0x42480000
 800146c:	43e10000 	.word	0x43e10000
 8001470:	2000046a 	.word	0x2000046a
 8001474:	20000464 	.word	0x20000464
 8001478:	2000045c 	.word	0x2000045c
 800147c:	20000460 	.word	0x20000460
 8001480:	20000000 	.word	0x20000000

08001484 <StartCommLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommLoopTask */
void StartCommLoopTask(void const * argument)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommLoopTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <StartCommLoopTask+0x2c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	210a      	movs	r1, #10
 8001492:	4618      	mov	r0, r3
 8001494:	f00b ffce 	bl	800d434 <osSemaphoreWait>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <StartCommLoopTask+0x1e>
		  runCAN();
 800149e:	f000 f877 	bl	8001590 <runCAN>
	  }

	  runReport();
 80014a2:	f000 f827 	bl	80014f4 <runReport>
    osDelay(10);
 80014a6:	200a      	movs	r0, #10
 80014a8:	f00b ff7d 	bl	800d3a6 <osDelay>
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 80014ac:	e7ee      	b.n	800148c <StartCommLoopTask+0x8>
 80014ae:	bf00      	nop
 80014b0:	200004a0 	.word	0x200004a0

080014b4 <DWT_Init>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Initialize DWT for cycle counting
void DWT_Init(void) {
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <DWT_Init+0x38>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <DWT_Init+0x38>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <DWT_Init+0x38>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ce:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <DWT_Init+0x3c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <DWT_Init+0x3c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <DWT_Init+0x3c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000edf0 	.word	0xe000edf0
 80014f0:	e0001000 	.word	0xe0001000

080014f4 <runReport>:
    while ((DWT->CYCCNT - startTick) < delayTicks) {
        // Wait until the required delay has passed
    }
}

void runReport() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	memset(&HIDReport, 0, sizeof(HIDReport_t));
 80014fa:	220a      	movs	r2, #10
 80014fc:	2100      	movs	r1, #0
 80014fe:	4820      	ldr	r0, [pc, #128]	@ (8001580 <runReport+0x8c>)
 8001500:	f00e fbda 	bl	800fcb8 <memset>

	uint16_t max_clutch = pedal_data.encoder_3;
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <runReport+0x90>)
 8001506:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800150a:	81fb      	strh	r3, [r7, #14]

	if (user_input_data.hall_analog_1 > max_clutch) {
 800150c:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <runReport+0x94>)
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	461a      	mov	r2, r3
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	4293      	cmp	r3, r2
 8001516:	d202      	bcs.n	800151e <runReport+0x2a>
		max_clutch = user_input_data.hall_analog_1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <runReport+0x94>)
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	81fb      	strh	r3, [r7, #14]
	}
	if (user_input_data.hall_analog_1 > max_clutch) {
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <runReport+0x94>)
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	461a      	mov	r2, r3
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	4293      	cmp	r3, r2
 8001528:	d202      	bcs.n	8001530 <runReport+0x3c>
		max_clutch = user_input_data.hall_analog_1;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <runReport+0x94>)
 800152c:	791b      	ldrb	r3, [r3, #4]
 800152e:	81fb      	strh	r3, [r7, #14]
	}

	HIDReport.steering = gSteering;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <runReport+0x98>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153a:	edc7 7a01 	vstr	s15, [r7, #4]
 800153e:	793b      	ldrb	r3, [r7, #4]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <runReport+0x8c>)
 8001544:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = pedal_data.encoder_1;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <runReport+0x90>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <runReport+0x8c>)
 8001550:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = pedal_data.encoder_2;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <runReport+0x90>)
 8001554:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <runReport+0x8c>)
 800155c:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = max_clutch;
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <runReport+0x8c>)
 8001564:	70da      	strb	r2, [r3, #3]

	HIDReport.buttons = user_input_data.buttons;
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <runReport+0x94>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <runReport+0x8c>)
 800156c:	6053      	str	r3, [r2, #4]

//	HIDReport.rz = (uint8_t) (user_input_data.encoder_1 & 0xFF);
//	HIDReport.slider = (uint8_t) (user_input_data.encoder_2 & 0xFF);

	USBD_CUSTOM_HID_SendCustomReport((uint8_t *)&HIDReport, sizeof(HIDReport));
 800156e:	210a      	movs	r1, #10
 8001570:	4803      	ldr	r0, [pc, #12]	@ (8001580 <runReport+0x8c>)
 8001572:	f008 ff4d 	bl	800a410 <USBD_CUSTOM_HID_SendCustomReport>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000043c 	.word	0x2000043c
 8001584:	20000450 	.word	0x20000450
 8001588:	20000448 	.word	0x20000448
 800158c:	20000474 	.word	0x20000474

08001590 <runCAN>:

void runCAN() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
    static uint8_t messageIndex = 0;
    uint32_t currentTime = HAL_GetTick();
 8001596:	f001 facb 	bl	8002b30 <HAL_GetTick>
 800159a:	6078      	str	r0, [r7, #4]

    if (currentTime - lastSendTime >= 2) {  // Reduce cycle time to avoid backlog
 800159c:	4b3e      	ldr	r3, [pc, #248]	@ (8001698 <runCAN+0x108>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d96d      	bls.n	8001684 <runCAN+0xf4>
        switch (messageIndex) {
 80015a8:	4b3c      	ldr	r3, [pc, #240]	@ (800169c <runCAN+0x10c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d859      	bhi.n	8001664 <runCAN+0xd4>
 80015b0:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <runCAN+0x28>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015f5 	.word	0x080015f5
 80015c0:	08001621 	.word	0x08001621
 80015c4:	0800164d 	.word	0x0800164d
            case 0:
                sendCANMessage(0x100, telemetry_data.tRpm);
 80015c8:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <runCAN+0x110>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015d2:	f000 f869 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x101, telemetry_data.tGear);
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <runCAN+0x110>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4619      	mov	r1, r3
 80015dc:	f240 1001 	movw	r0, #257	@ 0x101
 80015e0:	f000 f862 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x102, telemetry_data.tSpeedKmh);
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <runCAN+0x110>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 7081 	mov.w	r0, #258	@ 0x102
 80015ee:	f000 f85b 	bl	80016a8 <sendCANMessage>
                break;
 80015f2:	e037      	b.n	8001664 <runCAN+0xd4>
            case 1:
                sendCANMessage(0x103, telemetry_data.tHasDRS);
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <runCAN+0x110>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f240 1003 	movw	r0, #259	@ 0x103
 80015fe:	f000 f853 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x104, telemetry_data.tDrs);
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <runCAN+0x110>)
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4619      	mov	r1, r3
 8001608:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800160c:	f000 f84c 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x105, telemetry_data.tPitLim);
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <runCAN+0x110>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4619      	mov	r1, r3
 8001616:	f240 1005 	movw	r0, #261	@ 0x105
 800161a:	f000 f845 	bl	80016a8 <sendCANMessage>
                break;
 800161e:	e021      	b.n	8001664 <runCAN+0xd4>
            case 2:
                sendCANMessage(0x106, telemetry_data.tFuel);
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <runCAN+0x110>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 7083 	mov.w	r0, #262	@ 0x106
 800162a:	f000 f83d 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x107, telemetry_data.tBrakeBias);
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <runCAN+0x110>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4619      	mov	r1, r3
 8001634:	f240 1007 	movw	r0, #263	@ 0x107
 8001638:	f000 f836 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x108, telemetry_data.tMaxRpm);
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <runCAN+0x110>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8001646:	f000 f82f 	bl	80016a8 <sendCANMessage>
                break;
 800164a:	e00b      	b.n	8001664 <runCAN+0xd4>
            case 3:
                sendCANMessage(0x109, telemetry_data.tForceFB);
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <runCAN+0x110>)
 800164e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001656:	ee17 1a90 	vmov	r1, s15
 800165a:	f240 1009 	movw	r0, #265	@ 0x109
 800165e:	f000 f823 	bl	80016a8 <sendCANMessage>
                break;
 8001662:	bf00      	nop
        }

        messageIndex = (messageIndex + 1) % 4;  // Cycle through cases
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <runCAN+0x10c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	425a      	negs	r2, r3
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	bf58      	it	pl
 8001676:	4253      	negpl	r3, r2
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <runCAN+0x10c>)
 800167c:	701a      	strb	r2, [r3, #0]
        lastSendTime = currentTime;  // Update time
 800167e:	4a06      	ldr	r2, [pc, #24]	@ (8001698 <runCAN+0x108>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
    }

    osSemaphoreRelease(spiSendMutexHandle);
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <runCAN+0x114>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f00b ff21 	bl	800d4d0 <osSemaphoreRelease>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000484 	.word	0x20000484
 800169c:	20000748 	.word	0x20000748
 80016a0:	20000414 	.word	0x20000414
 80016a4:	200004a0 	.word	0x200004a0

080016a8 <sendCANMessage>:

void sendCANMessage(uint16_t canID, int32_t value) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[4];  // 4-byte buffer
    uint32_t TxMailbox;

    // Configure the CAN header
    TxHeader.StdId = canID;  // Set the ID
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;  // Standard 11-bit ID
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;  // Data frame, not remote request
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = sizeof(value);  // Data Length = 4 bytes
 80016c0:	2304      	movs	r3, #4
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy integer value into TxData buffer (ensure correct byte order)
    memcpy(TxData, &value, sizeof(value));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	613b      	str	r3, [r7, #16]

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	f107 0210 	add.w	r2, r7, #16
 80016d0:	f107 0114 	add.w	r1, r7, #20
 80016d4:	480b      	ldr	r0, [pc, #44]	@ (8001704 <sendCANMessage+0x5c>)
 80016d6:	f002 f8dc 	bl	8003892 <HAL_CAN_AddTxMessage>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00d      	beq.n	80016fc <sendCANMessage+0x54>
    	 // Optionally log the state of CAN error counters
		uint32_t error = HAL_CAN_GetError(&hcan1);
 80016e0:	4808      	ldr	r0, [pc, #32]	@ (8001704 <sendCANMessage+0x5c>)
 80016e2:	f002 fd3b 	bl	800415c <HAL_CAN_GetError>
 80016e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_Stop(&hcan1);  // Stop CAN
 80016e8:	4806      	ldr	r0, [pc, #24]	@ (8001704 <sendCANMessage+0x5c>)
 80016ea:	f002 f889 	bl	8003800 <HAL_CAN_Stop>
		HAL_CAN_Start(&hcan1); // Restart CAN
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <sendCANMessage+0x5c>)
 80016f0:	f002 f842 	bl	8003778 <HAL_CAN_Start>

		// Optional: Clear error flags
		__HAL_CAN_CLEAR_FLAG(&hcan1, CAN_FLAG_ERRI);
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <sendCANMessage+0x5c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2204      	movs	r2, #4
 80016fa:	605a      	str	r2, [r3, #4]
    }
}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	@ 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200003ec 	.word	0x200003ec

08001708 <constrain>:

    // Calculate the oscillation value using a sine wave
    return sin((2 * M_PI * elapsed_time) / period);
}

float constrain(float x, float lower, float upper) {
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001712:	edc7 0a02 	vstr	s1, [r7, #8]
 8001716:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < lower) return lower;
 800171a:	ed97 7a03 	vldr	s14, [r7, #12]
 800171e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	d501      	bpl.n	8001730 <constrain+0x28>
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	e00b      	b.n	8001748 <constrain+0x40>
    if (x > upper) return upper;
 8001730:	ed97 7a03 	vldr	s14, [r7, #12]
 8001734:	edd7 7a01 	vldr	s15, [r7, #4]
 8001738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	dd01      	ble.n	8001746 <constrain+0x3e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	e000      	b.n	8001748 <constrain+0x40>
    return x;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <calculate_inertia>:

float calculate_inertia(float force_feedback, float angular_velocity) {
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	ed87 0a01 	vstr	s0, [r7, #4]
 8001766:	edc7 0a00 	vstr	s1, [r7]
    static float previous_output = 0;
    float inertia_coefficient = 0.1; // Fine-tune for feel
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <calculate_inertia+0x58>)
 800176c:	60fb      	str	r3, [r7, #12]
    float inertia_force = inertia_coefficient * previous_output + (1 - inertia_coefficient) * force_feedback;
 800176e:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <calculate_inertia+0x5c>)
 8001770:	ed93 7a00 	vldr	s14, [r3]
 8001774:	edd7 7a03 	vldr	s15, [r7, #12]
 8001778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001780:	edd7 7a03 	vldr	s15, [r7, #12]
 8001784:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001788:	edd7 7a01 	vldr	s15, [r7, #4]
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_output = inertia_force;
 8001798:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <calculate_inertia+0x5c>)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	6013      	str	r3, [r2, #0]
    return inertia_force;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	ee07 3a90 	vmov	s15, r3
}
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	3dcccccd 	.word	0x3dcccccd
 80017b8:	2000074c 	.word	0x2000074c

080017bc <calculate_damping>:

float calculate_damping(float angular_velocity) {
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	ed87 0a01 	vstr	s0, [r7, #4]
    float damping_coefficient = 0.05;
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <calculate_damping+0x2c>)
 80017c8:	60fb      	str	r3, [r7, #12]
    return -damping_coefficient * angular_velocity;
 80017ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ce:	eeb1 7a67 	vneg.f32	s14, s15
 80017d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	3d4ccccd 	.word	0x3d4ccccd

080017ec <calculate_friction>:

float calculate_friction(float angular_velocity) {
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	ed87 0a01 	vstr	s0, [r7, #4]
    float friction_coefficient = 0.02;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <calculate_friction+0x4c>)
 80017f8:	60fb      	str	r3, [r7, #12]
    if (angular_velocity > 0) {
 80017fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	dd04      	ble.n	8001812 <calculate_friction+0x26>
        return -friction_coefficient;
 8001808:	edd7 7a03 	vldr	s15, [r7, #12]
 800180c:	eef1 7a67 	vneg.f32	s15, s15
 8001810:	e00b      	b.n	800182a <calculate_friction+0x3e>
    } else if (angular_velocity < 0) {
 8001812:	edd7 7a01 	vldr	s15, [r7, #4]
 8001816:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	d502      	bpl.n	8001826 <calculate_friction+0x3a>
        return friction_coefficient;
 8001820:	edd7 7a03 	vldr	s15, [r7, #12]
 8001824:	e001      	b.n	800182a <calculate_friction+0x3e>
    } else {
        return 0;
 8001826:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800183c <calculate_friction+0x50>
    }
}
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	3ca3d70a 	.word	0x3ca3d70a
 800183c:	00000000 	.word	0x00000000

08001840 <calculate_lock>:

float calculate_lock(float angle) {
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	ed87 0a01 	vstr	s0, [r7, #4]
    float lock_coefficient = 1.0;
 800184a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800184e:	60fb      	str	r3, [r7, #12]
    float max_angle = 450.0;
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <calculate_lock+0x84>)
 8001852:	60bb      	str	r3, [r7, #8]
    if (angle > max_angle) {
 8001854:	ed97 7a01 	vldr	s14, [r7, #4]
 8001858:	edd7 7a02 	vldr	s15, [r7, #8]
 800185c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dd0c      	ble.n	8001880 <calculate_lock+0x40>
        return -lock_coefficient * (angle - max_angle);
 8001866:	edd7 7a03 	vldr	s15, [r7, #12]
 800186a:	eeb1 7a67 	vneg.f32	s14, s15
 800186e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001872:	edd7 7a02 	vldr	s15, [r7, #8]
 8001876:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800187a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187e:	e019      	b.n	80018b4 <calculate_lock+0x74>
    } else if (angle < -max_angle) {
 8001880:	edd7 7a02 	vldr	s15, [r7, #8]
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	ed97 7a01 	vldr	s14, [r7, #4]
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d50c      	bpl.n	80018b0 <calculate_lock+0x70>
        return -lock_coefficient * (angle + max_angle);
 8001896:	edd7 7a03 	vldr	s15, [r7, #12]
 800189a:	eeb1 7a67 	vneg.f32	s14, s15
 800189e:	edd7 6a01 	vldr	s13, [r7, #4]
 80018a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ae:	e001      	b.n	80018b4 <calculate_lock+0x74>
    }
    return 0;
 80018b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80018c8 <calculate_lock+0x88>
}
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	43e10000 	.word	0x43e10000
 80018c8:	00000000 	.word	0x00000000

080018cc <scale_to_pwm>:

float scale_to_pwm(float total_force) {
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	ed87 0a01 	vstr	s0, [r7, #4]
    const float MIN_PWM = 50.0f;    // Minimum PWM value for the motor to start moving
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <scale_to_pwm+0xb8>)
 80018d8:	617b      	str	r3, [r7, #20]
    const float MAX_PWM = 255.0f;   // Maximum PWM value
 80018da:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <scale_to_pwm+0xbc>)
 80018dc:	613b      	str	r3, [r7, #16]

    // If total_force is zero, return zero PWM output
    if (total_force == 0.0f) {
 80018de:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d106      	bne.n	80018fa <scale_to_pwm+0x2e>
        gPWM = 0.0f;
 80018ec:	4b27      	ldr	r3, [pc, #156]	@ (800198c <scale_to_pwm+0xc0>)
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
        return 0.0f;
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e03c      	b.n	8001974 <scale_to_pwm+0xa8>
    }

    // Calculate PWM output
    float pwm_output = fabs(total_force) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 80018fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001902:	ee17 0a90 	vmov	r0, s15
 8001906:	f7fe fe37 	bl	8000578 <__aeabi_f2d>
 800190a:	4604      	mov	r4, r0
 800190c:	460d      	mov	r5, r1
 800190e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001912:	edd7 7a05 	vldr	s15, [r7, #20]
 8001916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191a:	ee17 0a90 	vmov	r0, s15
 800191e:	f7fe fe2b 	bl	8000578 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fe7d 	bl	8000628 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	461d      	mov	r5, r3
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7fe fe1e 	bl	8000578 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fcba 	bl	80002bc <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f89c 	bl	8000a8c <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

    // Constrain PWM output to valid range
    pwm_output = constrain(pwm_output, MIN_PWM, MAX_PWM);
 8001958:	ed97 1a04 	vldr	s2, [r7, #16]
 800195c:	edd7 0a05 	vldr	s1, [r7, #20]
 8001960:	ed97 0a03 	vldr	s0, [r7, #12]
 8001964:	f7ff fed0 	bl	8001708 <constrain>
 8001968:	ed87 0a03 	vstr	s0, [r7, #12]

    // Update debug variable
    gPWM = pwm_output;
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <scale_to_pwm+0xc0>)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6013      	str	r3, [r2, #0]

    return pwm_output;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bdb0      	pop	{r4, r5, r7, pc}
 8001982:	bf00      	nop
 8001984:	42480000 	.word	0x42480000
 8001988:	437f0000 	.word	0x437f0000
 800198c:	20000458 	.word	0x20000458

08001990 <map_wheel_position_to_axis>:

uint8_t map_wheel_position_to_axis(int32_t position) {
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    int32_t min_position = -450;
 8001998:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <map_wheel_position_to_axis+0x60>)
 800199a:	60fb      	str	r3, [r7, #12]
    int32_t max_position = 450;
 800199c:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80019a0:	60bb      	str	r3, [r7, #8]

    // Clamp the position to the valid range
	if (position < min_position) {
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	da02      	bge.n	80019b0 <map_wheel_position_to_axis+0x20>
		position = min_position;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e005      	b.n	80019bc <map_wheel_position_to_axis+0x2c>
	} else if (position > max_position) {
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dd01      	ble.n	80019bc <map_wheel_position_to_axis+0x2c>
		position = max_position;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	607b      	str	r3, [r7, #4]
	}

	// Reverse the mapping
	return (uint8_t)((((max_position - position) * 255) + (max_position - min_position) / 2) / (max_position - min_position));
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	1ad2      	subs	r2, r2, r3
 80019c2:	4613      	mov	r3, r2
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	1a9a      	subs	r2, r3, r2
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1acb      	subs	r3, r1, r3
 80019ce:	0fd9      	lsrs	r1, r3, #31
 80019d0:	440b      	add	r3, r1
 80019d2:	105b      	asrs	r3, r3, #1
 80019d4:	441a      	add	r2, r3
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1acb      	subs	r3, r1, r3
 80019dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80019e0:	b2db      	uxtb	r3, r3
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	fffffe3e 	.word	0xfffffe3e

080019f4 <init_encoder>:

extern void init_encoder() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80019f8:	213c      	movs	r1, #60	@ 0x3c
 80019fa:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <init_encoder+0x14>)
 80019fc:	f006 f8d2 	bl	8007ba4 <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 8001a00:	f000 f812 	bl	8001a28 <reset_encoder_position>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200007a0 	.word	0x200007a0

08001a0c <read_encoder_position>:

int16_t read_encoder_position() {
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <read_encoder_position+0x18>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	b21b      	sxth	r3, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200007a0 	.word	0x200007a0

08001a28 <reset_encoder_position>:

void reset_encoder_position() {
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <reset_encoder_position+0x18>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200007a0 	.word	0x200007a0

08001a44 <get_angle_degrees>:

float get_angle_degrees() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
	if(gHall <= 1110 && gHall <= 1130)
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <get_angle_degrees+0x84>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001acc <get_angle_degrees+0x88>
 8001a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	d80b      	bhi.n	8001a76 <get_angle_degrees+0x32>
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <get_angle_degrees+0x84>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001ad0 <get_angle_degrees+0x8c>
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	d801      	bhi.n	8001a76 <get_angle_degrees+0x32>
	{
		reset_encoder_position();
 8001a72:	f7ff ffd9 	bl	8001a28 <reset_encoder_position>
	}
	int16_t position = read_encoder_position();
 8001a76:	f7ff ffc9 	bl	8001a0c <read_encoder_position>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
    gPosition = position;
 8001a7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ad4 <get_angle_degrees+0x90>)
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	8013      	strh	r3, [r2, #0]
    return (position * 360.0) / ENCODER_RESOLUTION;
 8001a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd63 	bl	8000554 <__aeabi_i2d>
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <get_angle_degrees+0x94>)
 8001a94:	f7fe fdc8 	bl	8000628 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <get_angle_degrees+0x98>)
 8001aa6:	f7fe fee9 	bl	800087c <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7fe ffeb 	bl	8000a8c <__aeabi_d2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	ee07 3a90 	vmov	s15, r3
}
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000478 	.word	0x20000478
 8001acc:	448ac000 	.word	0x448ac000
 8001ad0:	448d4000 	.word	0x448d4000
 8001ad4:	20000468 	.word	0x20000468
 8001ad8:	40768000 	.word	0x40768000
 8001adc:	40a2c000 	.word	0x40a2c000

08001ae0 <update_wheel_position_and_velocity>:
//    last_update_time = current_time;
//
//    gSteering = map_wheel_position_to_axis(*wheel_angle);
//}

void update_wheel_position_and_velocity(float *wheel_angle, float *angular_velocity) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
    // Get the absolute current encoder angle
    float current_angle = get_angle_degrees();
 8001aea:	f7ff ffab 	bl	8001a44 <get_angle_degrees>
 8001aee:	ed87 0a05 	vstr	s0, [r7, #20]

    // Clamp the wheel angle between -WHEEL_MAX_ANGLE and +WHEEL_MAX_ANGLE
    if (current_angle > WHEEL_MAX_ANGLE) current_angle = WHEEL_MAX_ANGLE;
 8001af2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001bcc <update_wheel_position_and_velocity+0xec>
 8001afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	dd01      	ble.n	8001b08 <update_wheel_position_and_velocity+0x28>
 8001b04:	4b32      	ldr	r3, [pc, #200]	@ (8001bd0 <update_wheel_position_and_velocity+0xf0>)
 8001b06:	617b      	str	r3, [r7, #20]
    if (current_angle < -WHEEL_MAX_ANGLE) current_angle = -WHEEL_MAX_ANGLE;
 8001b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001bd4 <update_wheel_position_and_velocity+0xf4>
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d501      	bpl.n	8001b1e <update_wheel_position_and_velocity+0x3e>
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd8 <update_wheel_position_and_velocity+0xf8>)
 8001b1c:	617b      	str	r3, [r7, #20]

    // Directly set the wheel angle
    *wheel_angle = current_angle;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]

    // Calculate time difference
    uint32_t current_time = HAL_GetTick();  // In milliseconds
 8001b24:	f001 f804 	bl	8002b30 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]
    float dt = (current_time - last_update_time) / 1000.0f;  // ms to seconds
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b34:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <update_wheel_position_and_velocity+0xfc>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b3e:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001be0 <update_wheel_position_and_velocity+0x100>
 8001b42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b46:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate angular velocity
    static float last_angle = 0.0f;
    float delta_angle = current_angle - last_angle;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <update_wheel_position_and_velocity+0x104>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b58:	edc7 7a02 	vstr	s15, [r7, #8]

    if (dt > 0.0001f) {  // Avoid division by zero
 8001b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b60:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001be8 <update_wheel_position_and_velocity+0x108>
 8001b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	dd09      	ble.n	8001b82 <update_wheel_position_and_velocity+0xa2>
        *angular_velocity = delta_angle / dt;
 8001b6e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b72:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
 8001b80:	e003      	b.n	8001b8a <update_wheel_position_and_velocity+0xaa>
    } else {
        *angular_velocity = 0.0f;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
    }

    // Update for next loop
    last_angle = current_angle;
 8001b8a:	4a16      	ldr	r2, [pc, #88]	@ (8001be4 <update_wheel_position_and_velocity+0x104>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	6013      	str	r3, [r2, #0]
    last_update_time = current_time;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <update_wheel_position_and_velocity+0xfc>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]

    // Map to steering value
    gSteering = map_wheel_position_to_axis(*wheel_angle);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001baa:	ee17 0a90 	vmov	r0, s15
 8001bae:	f7ff feef 	bl	8001990 <map_wheel_position_to_axis>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <update_wheel_position_and_velocity+0x10c>)
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	43e10000 	.word	0x43e10000
 8001bd0:	43e10000 	.word	0x43e10000
 8001bd4:	c3e10000 	.word	0xc3e10000
 8001bd8:	c3e10000 	.word	0xc3e10000
 8001bdc:	20000490 	.word	0x20000490
 8001be0:	447a0000 	.word	0x447a0000
 8001be4:	20000750 	.word	0x20000750
 8001be8:	38d1b717 	.word	0x38d1b717
 8001bec:	20000474 	.word	0x20000474

08001bf0 <set_motor_pwm>:


void set_motor_pwm(float pwm_value, uint8_t direction) {
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	70fb      	strb	r3, [r7, #3]
    // Assuming pwm_value ranges from 0 to 255
    uint32_t pulse = (uint32_t)((pwm_value / 255.0) * htim3.Init.Period);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fcba 	bl	8000578 <__aeabi_f2d>
 8001c04:	a321      	add	r3, pc, #132	@ (adr r3, 8001c8c <set_motor_pwm+0x9c>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe fe37 	bl	800087c <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4614      	mov	r4, r2
 8001c14:	461d      	mov	r5, r3
 8001c16:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <set_motor_pwm+0x98>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fc8a 	bl	8000534 <__aeabi_ui2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4620      	mov	r0, r4
 8001c26:	4629      	mov	r1, r5
 8001c28:	f7fe fcfe 	bl	8000628 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ff0a 	bl	8000a4c <__aeabi_d2uiz>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60fb      	str	r3, [r7, #12]

    if (direction == 1) { // Forward
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d108      	bne.n	8001c54 <set_motor_pwm+0x64>
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <set_motor_pwm+0x98>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <set_motor_pwm+0x98>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
	} else { // Stop
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
 8001c52:	e013      	b.n	8001c7c <set_motor_pwm+0x8c>
	} else if (direction == 0) { // Reverse
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <set_motor_pwm+0x7c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <set_motor_pwm+0x98>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <set_motor_pwm+0x98>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c6a:	e007      	b.n	8001c7c <set_motor_pwm+0x8c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <set_motor_pwm+0x98>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2200      	movs	r2, #0
 8001c72:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <set_motor_pwm+0x98>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	f3af 8000 	nop.w
 8001c88:	200007e8 	.word	0x200007e8
 8001c8c:	00000000 	.word	0x00000000
 8001c90:	406fe000 	.word	0x406fe000

08001c94 <signalTelemetryTask>:
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
//    }
//}

extern void signalTelemetryTask(uint8_t *Buf, uint32_t Len) {
 8001c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
	if (Len == sizeof(telemetry_packet))  // Verify the data size matches the struct size
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b28      	cmp	r3, #40	@ 0x28
 8001ca2:	d11b      	bne.n	8001cdc <signalTelemetryTask+0x48>
	{
		// Process the received data (rx_buffer)
		memcpy(&telemetry_data, Buf, sizeof(telemetry_data));
 8001ca4:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <signalTelemetryTask+0x54>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	461c      	mov	r4, r3
 8001caa:	4616      	mov	r6, r2
 8001cac:	f104 0c20 	add.w	ip, r4, #32
 8001cb0:	4635      	mov	r5, r6
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbe:	3410      	adds	r4, #16
 8001cc0:	3610      	adds	r6, #16
 8001cc2:	4564      	cmp	r4, ip
 8001cc4:	d1f4      	bne.n	8001cb0 <signalTelemetryTask+0x1c>
 8001cc6:	4633      	mov	r3, r6
 8001cc8:	4622      	mov	r2, r4
 8001cca:	6810      	ldr	r0, [r2, #0]
 8001ccc:	6851      	ldr	r1, [r2, #4]
 8001cce:	c303      	stmia	r3!, {r0, r1}
		osSemaphoreRelease(uartMutexHandle);
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <signalTelemetryTask+0x58>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00b fbfb 	bl	800d4d0 <osSemaphoreRelease>
	}
	else
	{
		int wkglwkgw = 1;
	}
}
 8001cda:	e001      	b.n	8001ce0 <signalTelemetryTask+0x4c>
		int wkglwkgw = 1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce8:	20000414 	.word	0x20000414
 8001cec:	200004a4 	.word	0x200004a4

08001cf0 <read_hall_sensor>:

    // Stop Motor
    set_motor_pwm(0, 0);
}

void read_hall_sensor() {
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
	if (adc_data_ready) {
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <read_hall_sensor+0x30>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <read_hall_sensor+0x26>
	    adc_data_ready = 0;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <read_hall_sensor+0x30>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]

	    gHall = adc_buffer[0];
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <read_hall_sensor+0x34>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <read_hall_sensor+0x38>)
 8001d12:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	2000048a 	.word	0x2000048a
 8001d24:	20000488 	.word	0x20000488
 8001d28:	20000478 	.word	0x20000478

08001d2c <Start_ADC_DMA>:

void Start_ADC_DMA() {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim8);  // starts the timer
 8001d30:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <Start_ADC_DMA+0x18>)
 8001d32:	f005 fc53 	bl	80075dc <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 1);
 8001d36:	2201      	movs	r2, #1
 8001d38:	4903      	ldr	r1, [pc, #12]	@ (8001d48 <Start_ADC_DMA+0x1c>)
 8001d3a:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <Start_ADC_DMA+0x20>)
 8001d3c:	f000 ff6c 	bl	8002c18 <HAL_ADC_Start_DMA>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000830 	.word	0x20000830
 8001d48:	20000488 	.word	0x20000488
 8001d4c:	20000344 	.word	0x20000344

08001d50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <HAL_ADC_ConvCpltCallback+0x24>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d102      	bne.n	8001d68 <HAL_ADC_ConvCpltCallback+0x18>
        adc_data_ready = 1;
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_ADC_ConvCpltCallback+0x28>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
    }
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40012000 	.word	0x40012000
 8001d78:	2000048a 	.word	0x2000048a

08001d7c <processCAN>:

    // Stop Motor
    set_motor_pwm(0, 0);
}

void processCAN() {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af00      	add	r7, sp, #0
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001d82:	e08d      	b.n	8001ea0 <processCAN+0x124>
    	 if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8001d84:	463b      	mov	r3, r7
 8001d86:	f107 0208 	add.w	r2, r7, #8
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	484b      	ldr	r0, [pc, #300]	@ (8001ebc <processCAN+0x140>)
 8001d8e:	f001 fe50 	bl	8003a32 <HAL_CAN_GetRxMessage>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f040 8083 	bne.w	8001ea0 <processCAN+0x124>
            int32_t value = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24

            // If the received message is for pedals, only use 2 bytes (int16_t)
            if (RxHeader.StdId >= 0x300 && RxHeader.StdId <= 0x302) {
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001da4:	d30d      	bcc.n	8001dc2 <processCAN+0x46>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f240 3202 	movw	r2, #770	@ 0x302
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d808      	bhi.n	8001dc2 <processCAN+0x46>
                value = (int16_t)(
                    ((uint16_t)RxData[0]) |
 8001db0:	783b      	ldrb	r3, [r7, #0]
 8001db2:	b21a      	sxth	r2, r3
                    ((uint16_t)RxData[1] << 8)  // Combine 2 bytes into int16_t
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	021b      	lsls	r3, r3, #8
                value = (int16_t)(
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc0:	e00b      	b.n	8001dda <processCAN+0x5e>
                );
            } else {
                // Steering Wheel Messages (4-byte int32_t)
                value = (int32_t)(
                    ((uint32_t)RxData[0]) |
 8001dc2:	783b      	ldrb	r3, [r7, #0]
 8001dc4:	461a      	mov	r2, r3
                    ((uint32_t)RxData[1] << 8) |
 8001dc6:	787b      	ldrb	r3, [r7, #1]
 8001dc8:	021b      	lsls	r3, r3, #8
                    ((uint32_t)RxData[0]) |
 8001dca:	431a      	orrs	r2, r3
                    ((uint32_t)RxData[2] << 16) |
 8001dcc:	78bb      	ldrb	r3, [r7, #2]
 8001dce:	041b      	lsls	r3, r3, #16
                    ((uint32_t)RxData[1] << 8) |
 8001dd0:	431a      	orrs	r2, r3
                    ((uint32_t)RxData[3] << 24)
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	061b      	lsls	r3, r3, #24
                    ((uint32_t)RxData[2] << 16) |
 8001dd6:	4313      	orrs	r3, r2
                value = (int32_t)(
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
                );
            }

			switch (RxHeader.StdId) {
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f240 3202 	movw	r2, #770	@ 0x302
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d052      	beq.n	8001e8a <processCAN+0x10e>
 8001de4:	f240 3202 	movw	r2, #770	@ 0x302
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d858      	bhi.n	8001e9e <processCAN+0x122>
 8001dec:	f240 3201 	movw	r2, #769	@ 0x301
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d040      	beq.n	8001e76 <processCAN+0xfa>
 8001df4:	f240 3201 	movw	r2, #769	@ 0x301
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d850      	bhi.n	8001e9e <processCAN+0x122>
 8001dfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e00:	d02f      	beq.n	8001e62 <processCAN+0xe6>
 8001e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e06:	d84a      	bhi.n	8001e9e <processCAN+0x122>
 8001e08:	f240 2202 	movw	r2, #514	@ 0x202
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d01e      	beq.n	8001e4e <processCAN+0xd2>
 8001e10:	f240 2202 	movw	r2, #514	@ 0x202
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d842      	bhi.n	8001e9e <processCAN+0x122>
 8001e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e1c:	d004      	beq.n	8001e28 <processCAN+0xac>
 8001e1e:	f240 2201 	movw	r2, #513	@ 0x201
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d009      	beq.n	8001e3a <processCAN+0xbe>

				// Pedals
				case 0x300: pedal_data.encoder_1 = (int16_t)value; gDebugCounter2++; break;
				case 0x301: pedal_data.encoder_2 = (int16_t)value; gDebugCounter2++;  break;
				case 0x302: pedal_data.encoder_3 = (int16_t)value; gDebugCounter2++; break;
				default: break;
 8001e26:	e03a      	b.n	8001e9e <processCAN+0x122>
				case 0x200: user_input_data.buttons = (uint32_t)value; gDebugCounter1++; break;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	4a25      	ldr	r2, [pc, #148]	@ (8001ec0 <processCAN+0x144>)
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <processCAN+0x148>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <processCAN+0x148>)
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e032      	b.n	8001ea0 <processCAN+0x124>
				case 0x201: user_input_data.hall_analog_1 = (uint8_t)value; gDebugCounter1++; break;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <processCAN+0x144>)
 8001e40:	711a      	strb	r2, [r3, #4]
 8001e42:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <processCAN+0x148>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec4 <processCAN+0x148>)
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e028      	b.n	8001ea0 <processCAN+0x124>
				case 0x202: user_input_data.hall_analog_2 = (uint8_t)value; gDebugCounter1++; break;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <processCAN+0x144>)
 8001e54:	715a      	strb	r2, [r3, #5]
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <processCAN+0x148>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ec4 <processCAN+0x148>)
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e01e      	b.n	8001ea0 <processCAN+0x124>
				case 0x300: pedal_data.encoder_1 = (int16_t)value; gDebugCounter2++; break;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	b21a      	sxth	r2, r3
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <processCAN+0x14c>)
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ecc <processCAN+0x150>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a16      	ldr	r2, [pc, #88]	@ (8001ecc <processCAN+0x150>)
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e014      	b.n	8001ea0 <processCAN+0x124>
				case 0x301: pedal_data.encoder_2 = (int16_t)value; gDebugCounter2++;  break;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <processCAN+0x14c>)
 8001e7c:	805a      	strh	r2, [r3, #2]
 8001e7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <processCAN+0x150>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a11      	ldr	r2, [pc, #68]	@ (8001ecc <processCAN+0x150>)
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e00a      	b.n	8001ea0 <processCAN+0x124>
				case 0x302: pedal_data.encoder_3 = (int16_t)value; gDebugCounter2++; break;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	b21a      	sxth	r2, r3
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <processCAN+0x14c>)
 8001e90:	809a      	strh	r2, [r3, #4]
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <processCAN+0x150>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <processCAN+0x150>)
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e000      	b.n	8001ea0 <processCAN+0x124>
				default: break;
 8001e9e:	bf00      	nop
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <processCAN+0x140>)
 8001ea4:	f001 fee7 	bl	8003c76 <HAL_CAN_GetRxFifoFillLevel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f af6a 	bne.w	8001d84 <processCAN+0x8>
			}
		}
	}
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200003ec 	.word	0x200003ec
 8001ec0:	20000448 	.word	0x20000448
 8001ec4:	2000047c 	.word	0x2000047c
 8001ec8:	20000450 	.word	0x20000450
 8001ecc:	20000480 	.word	0x20000480

08001ed0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	@ 0x28
 8001ed4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a36      	ldr	r2, [pc, #216]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b34      	ldr	r3, [pc, #208]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b30      	ldr	r3, [pc, #192]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	4b29      	ldr	r3, [pc, #164]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a28      	ldr	r2, [pc, #160]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a21      	ldr	r2, [pc, #132]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc8 <MX_GPIO_Init+0xf8>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2130      	movs	r1, #48	@ 0x30
 8001f5a:	481c      	ldr	r0, [pc, #112]	@ (8001fcc <MX_GPIO_Init+0xfc>)
 8001f5c:	f002 fef0 	bl	8004d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2106      	movs	r1, #6
 8001f64:	481a      	ldr	r0, [pc, #104]	@ (8001fd0 <MX_GPIO_Init+0x100>)
 8001f66:	f002 feeb 	bl	8004d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f70:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4814      	ldr	r0, [pc, #80]	@ (8001fd4 <MX_GPIO_Init+0x104>)
 8001f82:	f002 fd49 	bl	8004a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001f86:	2330      	movs	r3, #48	@ 0x30
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480b      	ldr	r0, [pc, #44]	@ (8001fcc <MX_GPIO_Init+0xfc>)
 8001f9e:	f002 fd3b 	bl	8004a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_GPIO_Init+0x100>)
 8001fba:	f002 fd2d 	bl	8004a18 <HAL_GPIO_Init>

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	@ 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	40020800 	.word	0x40020800

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fdc:	f000 fd72 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe0:	f000 f832 	bl	8002048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe4:	f7ff ff74 	bl	8001ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fe8:	f7ff f898 	bl	800111c <MX_DMA_Init>
  MX_TIM2_Init();
 8001fec:	f000 fa8a 	bl	8002504 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ff0:	f000 fadc 	bl	80025ac <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ff4:	f000 fca4 	bl	8002940 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001ff8:	f7fe ff10 	bl	8000e1c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001ffc:	f7fe ffd8 	bl	8000fb0 <MX_CAN1_Init>
  MX_TIM8_Init();
 8002000:	f000 fb3a 	bl	8002678 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */



  init_encoder();
 8002004:	f7ff fcf6 	bl	80019f4 <init_encoder>
  DWT_Init();
 8002008:	f7ff fa54 	bl	80014b4 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800200c:	2100      	movs	r1, #0
 800200e:	480c      	ldr	r0, [pc, #48]	@ (8002040 <main+0x68>)
 8002010:	f005 fc5a 	bl	80078c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002014:	2104      	movs	r1, #4
 8002016:	480a      	ldr	r0, [pc, #40]	@ (8002040 <main+0x68>)
 8002018:	f005 fc56 	bl	80078c8 <HAL_TIM_PWM_Start>

  MX_USB_DEVICE_Init();
 800201c:	f007 ff2c 	bl	8009e78 <MX_USB_DEVICE_Init>

  HAL_CAN_Start(&hcan1);
 8002020:	4808      	ldr	r0, [pc, #32]	@ (8002044 <main+0x6c>)
 8002022:	f001 fba9 	bl	8003778 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8002026:	2110      	movs	r1, #16
 8002028:	4806      	ldr	r0, [pc, #24]	@ (8002044 <main+0x6c>)
 800202a:	f001 fe4c 	bl	8003cc6 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800202e:	f7ff f8af 	bl	8001190 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002032:	f00b f965 	bl	800d300 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 8002036:	f00c faa9 	bl	800e58c <vTaskStartScheduler>

  while (1)
 800203a:	bf00      	nop
 800203c:	e7fd      	b.n	800203a <main+0x62>
 800203e:	bf00      	nop
 8002040:	200007e8 	.word	0x200007e8
 8002044:	200003ec 	.word	0x200003ec

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b094      	sub	sp, #80	@ 0x50
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	2234      	movs	r2, #52	@ 0x34
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f00d fe2e 	bl	800fcb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <SystemClock_Config+0xd0>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4a28      	ldr	r2, [pc, #160]	@ (8002118 <SystemClock_Config+0xd0>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207a:	6413      	str	r3, [r2, #64]	@ 0x40
 800207c:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <SystemClock_Config+0xd0>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002088:	2300      	movs	r3, #0
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	4b23      	ldr	r3, [pc, #140]	@ (800211c <SystemClock_Config+0xd4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002094:	4a21      	ldr	r2, [pc, #132]	@ (800211c <SystemClock_Config+0xd4>)
 8002096:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <SystemClock_Config+0xd4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a8:	2301      	movs	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b2:	2302      	movs	r3, #2
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020bc:	2304      	movs	r3, #4
 80020be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80020c0:	2348      	movs	r3, #72	@ 0x48
 80020c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80020c8:	2303      	movs	r3, #3
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020cc:	2302      	movs	r3, #2
 80020ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 ff89 	bl	8006fec <HAL_RCC_OscConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80020e0:	f000 f854 	bl	800218c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e4:	230f      	movs	r3, #15
 80020e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e8:	2302      	movs	r3, #2
 80020ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	2102      	movs	r1, #2
 8002100:	4618      	mov	r0, r3
 8002102:	f004 f8e1 	bl	80062c8 <HAL_RCC_ClockConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800210c:	f000 f83e 	bl	800218c <Error_Handler>
  }
}
 8002110:	bf00      	nop
 8002112:	3750      	adds	r7, #80	@ 0x50
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	40007000 	.word	0x40007000

08002120 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
	{
		processCAN();
 8002132:	f7ff fe23 	bl	8001d7c <processCAN>
	}
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40006400 	.word	0x40006400

08002144 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
	{
		processCAN();
 8002156:	f7ff fe11 	bl	8001d7c <processCAN>
	}
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40006400 	.word	0x40006400

08002168 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800217a:	f000 fcc5 	bl	8002b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40001000 	.word	0x40001000

0800218c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002190:	b672      	cpsid	i
}
 8002192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <Error_Handler+0x8>

08002198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_MspInit+0x54>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	4a11      	ldr	r2, [pc, #68]	@ (80021ec <HAL_MspInit+0x54>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_MspInit+0x54>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_MspInit+0x54>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_MspInit+0x54>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ca:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_MspInit+0x54>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	210f      	movs	r1, #15
 80021da:	f06f 0001 	mvn.w	r0, #1
 80021de:	f002 f881 	bl	80042e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	@ 0x38
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_InitTick+0xe4>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	4a32      	ldr	r2, [pc, #200]	@ (80022d4 <HAL_InitTick+0xe4>)
 800220a:	f043 0310 	orr.w	r3, r3, #16
 800220e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002210:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <HAL_InitTick+0xe4>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800221c:	f107 0210 	add.w	r2, r7, #16
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f004 f954 	bl	80064d4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002236:	f004 f939 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 800223a:	6378      	str	r0, [r7, #52]	@ 0x34
 800223c:	e004      	b.n	8002248 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800223e:	f004 f935 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8002242:	4603      	mov	r3, r0
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224a:	4a23      	ldr	r2, [pc, #140]	@ (80022d8 <HAL_InitTick+0xe8>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	3b01      	subs	r3, #1
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <HAL_InitTick+0xec>)
 8002258:	4a21      	ldr	r2, [pc, #132]	@ (80022e0 <HAL_InitTick+0xf0>)
 800225a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800225c:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <HAL_InitTick+0xec>)
 800225e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002262:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002264:	4a1d      	ldr	r2, [pc, #116]	@ (80022dc <HAL_InitTick+0xec>)
 8002266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002268:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <HAL_InitTick+0xec>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <HAL_InitTick+0xec>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002276:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_InitTick+0xec>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800227c:	4817      	ldr	r0, [pc, #92]	@ (80022dc <HAL_InitTick+0xec>)
 800227e:	f005 f953 	bl	8007528 <HAL_TIM_Base_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002288:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11b      	bne.n	80022c8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002290:	4812      	ldr	r0, [pc, #72]	@ (80022dc <HAL_InitTick+0xec>)
 8002292:	f005 fa0b 	bl	80076ac <HAL_TIM_Base_Start_IT>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800229c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d111      	bne.n	80022c8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022a4:	2036      	movs	r0, #54	@ 0x36
 80022a6:	f002 f839 	bl	800431c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d808      	bhi.n	80022c2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	2036      	movs	r0, #54	@ 0x36
 80022b6:	f002 f815 	bl	80042e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_InitTick+0xf4>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e002      	b.n	80022c8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3738      	adds	r7, #56	@ 0x38
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	20000754 	.word	0x20000754
 80022e0:	40001000 	.word	0x40001000
 80022e4:	2000000c 	.word	0x2000000c

080022e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80022ec:	f3bf 8f4f 	dsb	sy
}
 80022f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <__NVIC_SystemReset+0x24>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022fa:	4904      	ldr	r1, [pc, #16]	@ (800230c <__NVIC_SystemReset+0x24>)
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_SystemReset+0x28>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002302:	f3bf 8f4f 	dsb	sy
}
 8002306:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <__NVIC_SystemReset+0x20>
 800230c:	e000ed00 	.word	0xe000ed00
 8002310:	05fa0004 	.word	0x05fa0004

08002314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <NMI_Handler+0x4>

0800231c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0d6      	sub	sp, #344	@ 0x158
 8002320:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 8002322:	f01e 0f04 	tst.w	lr, #4
 8002326:	bf0c      	ite	eq
 8002328:	f3ef 8308 	mrseq	r3, MSP
 800232c:	f3ef 8309 	mrsne	r3, PSP
 8002330:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 8002334:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 800233e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8002348:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 8002352:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 800235c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 8002366:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 8002370:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 800237a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 8002384:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <HardFault_Handler+0xc4>)
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 800238c:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HardFault_Handler+0xc4>)
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 8002394:	1d38      	adds	r0, r7, #4
 8002396:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800239a:	9308      	str	r3, [sp, #32]
 800239c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023a0:	9307      	str	r3, [sp, #28]
 80023a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023a6:	9306      	str	r3, [sp, #24]
 80023a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023ac:	9305      	str	r3, [sp, #20]
 80023ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023b2:	9304      	str	r3, [sp, #16]
 80023b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023b8:	9303      	str	r3, [sp, #12]
 80023ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023d0:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HardFault_Handler+0xc8>)
 80023d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023d6:	f00d fc3b 	bl	800fc50 <sniprintf>
	);

	// Log the message
//	log_message(log_buffer);

	NVIC_SystemReset();
 80023da:	f7ff ff85 	bl	80022e8 <__NVIC_SystemReset>
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00
 80023e4:	08010544 	.word	0x08010544

080023e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <MemManage_Handler+0x4>

080023f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <UsageFault_Handler+0x4>

08002400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002414:	4802      	ldr	r0, [pc, #8]	@ (8002420 <CAN1_RX0_IRQHandler+0x10>)
 8002416:	f001 fc7c 	bl	8003d12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200003ec 	.word	0x200003ec

08002424 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002428:	4802      	ldr	r0, [pc, #8]	@ (8002434 <CAN1_RX1_IRQHandler+0x10>)
 800242a:	f001 fc72 	bl	8003d12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200003ec 	.word	0x200003ec

08002438 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800243c:	4802      	ldr	r0, [pc, #8]	@ (8002448 <TIM6_DAC_IRQHandler+0x10>)
 800243e:	f005 fc3f 	bl	8007cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000754 	.word	0x20000754

0800244c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002450:	4802      	ldr	r0, [pc, #8]	@ (800245c <DMA2_Stream0_IRQHandler+0x10>)
 8002452:	f002 f877 	bl	8004544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000038c 	.word	0x2000038c

08002460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <OTG_FS_IRQHandler+0x10>)
 8002466:	f002 fdcf 	bl	8005008 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000878 	.word	0x20000878

08002474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <_sbrk+0x5c>)
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <_sbrk+0x60>)
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002488:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <_sbrk+0x64>)
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <_sbrk+0x68>)
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d207      	bcs.n	80024b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a4:	f00d fc76 	bl	800fd94 <__errno>
 80024a8:	4603      	mov	r3, r0
 80024aa:	220c      	movs	r2, #12
 80024ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e009      	b.n	80024c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b4:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ba:	4b07      	ldr	r3, [pc, #28]	@ (80024d8 <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <_sbrk+0x64>)
 80024c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20020000 	.word	0x20020000
 80024d4:	00000400 	.word	0x00000400
 80024d8:	2000079c 	.word	0x2000079c
 80024dc:	20005510 	.word	0x20005510

080024e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <SystemInit+0x20>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <SystemInit+0x20>)
 80024ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	@ 0x30
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	2224      	movs	r2, #36	@ 0x24
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f00d fbd0 	bl	800fcb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002520:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 800252a:	2200      	movs	r2, #0
 800252c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252e:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002534:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002536:	f04f 32ff 	mov.w	r2, #4294967295
 800253a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002548:	2303      	movs	r3, #3
 800254a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002550:	2301      	movs	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002560:	2301      	movs	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4619      	mov	r1, r3
 8002572:	480d      	ldr	r0, [pc, #52]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002574:	f005 fa70 	bl	8007a58 <HAL_TIM_Encoder_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800257e:	f7ff fe05 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	4619      	mov	r1, r3
 800258e:	4806      	ldr	r0, [pc, #24]	@ (80025a8 <MX_TIM2_Init+0xa4>)
 8002590:	f006 f84e 	bl	8008630 <HAL_TIMEx_MasterConfigSynchronization>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800259a:	f7ff fdf7 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	3730      	adds	r7, #48	@ 0x30
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200007a0 	.word	0x200007a0

080025ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	@ 0x28
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b2:	f107 0320 	add.w	r3, r7, #32
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	611a      	str	r2, [r3, #16]
 80025ca:	615a      	str	r2, [r3, #20]
 80025cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ce:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <MX_TIM3_Init+0xc4>)
 80025d0:	4a28      	ldr	r2, [pc, #160]	@ (8002674 <MX_TIM3_Init+0xc8>)
 80025d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 -1;
 80025d4:	4b26      	ldr	r3, [pc, #152]	@ (8002670 <MX_TIM3_Init+0xc4>)
 80025d6:	2253      	movs	r2, #83	@ 0x53
 80025d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025da:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <MX_TIM3_Init+0xc4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 80025e0:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <MX_TIM3_Init+0xc4>)
 80025e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e8:	4b21      	ldr	r3, [pc, #132]	@ (8002670 <MX_TIM3_Init+0xc4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <MX_TIM3_Init+0xc4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025f4:	481e      	ldr	r0, [pc, #120]	@ (8002670 <MX_TIM3_Init+0xc4>)
 80025f6:	f005 f918 	bl	800782a <HAL_TIM_PWM_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002600:	f7ff fdc4 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800260c:	f107 0320 	add.w	r3, r7, #32
 8002610:	4619      	mov	r1, r3
 8002612:	4817      	ldr	r0, [pc, #92]	@ (8002670 <MX_TIM3_Init+0xc4>)
 8002614:	f006 f80c 	bl	8008630 <HAL_TIMEx_MasterConfigSynchronization>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800261e:	f7ff fdb5 	bl	800218c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002622:	2360      	movs	r3, #96	@ 0x60
 8002624:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002626:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800262a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	4619      	mov	r1, r3
 800263a:	480d      	ldr	r0, [pc, #52]	@ (8002670 <MX_TIM3_Init+0xc4>)
 800263c:	f005 fc8c 	bl	8007f58 <HAL_TIM_PWM_ConfigChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002646:	f7ff fda1 	bl	800218c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2204      	movs	r2, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4807      	ldr	r0, [pc, #28]	@ (8002670 <MX_TIM3_Init+0xc4>)
 8002652:	f005 fc81 	bl	8007f58 <HAL_TIM_PWM_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800265c:	f7ff fd96 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002660:	4803      	ldr	r0, [pc, #12]	@ (8002670 <MX_TIM3_Init+0xc4>)
 8002662:	f000 f913 	bl	800288c <HAL_TIM_MspPostInit>

}
 8002666:	bf00      	nop
 8002668:	3728      	adds	r7, #40	@ 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200007e8 	.word	0x200007e8
 8002674:	40000400 	.word	0x40000400

08002678 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b092      	sub	sp, #72	@ 0x48
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
 8002698:	615a      	str	r2, [r3, #20]
 800269a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2220      	movs	r2, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f00d fb08 	bl	800fcb8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026a8:	4b31      	ldr	r3, [pc, #196]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026aa:	4a32      	ldr	r2, [pc, #200]	@ (8002774 <MX_TIM8_Init+0xfc>)
 80026ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80026ae:	4b30      	ldr	r3, [pc, #192]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026b0:	2253      	movs	r2, #83	@ 0x53
 80026b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 80026ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026bc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80026c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026c8:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ce:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80026d4:	4826      	ldr	r0, [pc, #152]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026d6:	f005 f859 	bl	800778c <HAL_TIM_OC_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80026e0:	f7ff fd54 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026e4:	2320      	movs	r3, #32
 80026e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026f0:	4619      	mov	r1, r3
 80026f2:	481f      	ldr	r0, [pc, #124]	@ (8002770 <MX_TIM8_Init+0xf8>)
 80026f4:	f005 ff9c 	bl	8008630 <HAL_TIMEx_MasterConfigSynchronization>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80026fe:	f7ff fd45 	bl	800218c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800270e:	2300      	movs	r3, #0
 8002710:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800271e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002722:	2200      	movs	r2, #0
 8002724:	4619      	mov	r1, r3
 8002726:	4812      	ldr	r0, [pc, #72]	@ (8002770 <MX_TIM8_Init+0xf8>)
 8002728:	f005 fbba 	bl	8007ea0 <HAL_TIM_OC_ConfigChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002732:	f7ff fd2b 	bl	800218c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800274a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800274e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4805      	ldr	r0, [pc, #20]	@ (8002770 <MX_TIM8_Init+0xf8>)
 800275a:	f005 ffe5 	bl	8008728 <HAL_TIMEx_ConfigBreakDeadTime>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002764:	f7ff fd12 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	3748      	adds	r7, #72	@ 0x48
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000830 	.word	0x20000830
 8002774:	40010400 	.word	0x40010400

08002778 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002798:	d12b      	bne.n	80027f2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b17      	ldr	r3, [pc, #92]	@ (80027fc <HAL_TIM_Encoder_MspInit+0x84>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <HAL_TIM_Encoder_MspInit+0x84>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027aa:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <HAL_TIM_Encoder_MspInit+0x84>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <HAL_TIM_Encoder_MspInit+0x84>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a0f      	ldr	r2, [pc, #60]	@ (80027fc <HAL_TIM_Encoder_MspInit+0x84>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <HAL_TIM_Encoder_MspInit+0x84>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027d2:	2303      	movs	r3, #3
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027e2:	2301      	movs	r3, #1
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4804      	ldr	r0, [pc, #16]	@ (8002800 <HAL_TIM_Encoder_MspInit+0x88>)
 80027ee:	f002 f913 	bl	8004a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	@ 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020000 	.word	0x40020000

08002804 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0b      	ldr	r2, [pc, #44]	@ (8002840 <HAL_TIM_PWM_MspInit+0x3c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10d      	bne.n	8002832 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <HAL_TIM_PWM_MspInit+0x40>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <HAL_TIM_PWM_MspInit+0x40>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6413      	str	r3, [r2, #64]	@ 0x40
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <HAL_TIM_PWM_MspInit+0x40>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40000400 	.word	0x40000400
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM8)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0b      	ldr	r2, [pc, #44]	@ (8002884 <HAL_TIM_OC_MspInit+0x3c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10d      	bne.n	8002876 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <HAL_TIM_OC_MspInit+0x40>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <HAL_TIM_OC_MspInit+0x40>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	6453      	str	r3, [r2, #68]	@ 0x44
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <HAL_TIM_OC_MspInit+0x40>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40010400 	.word	0x40010400
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	@ 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_TIM_MspPostInit+0xa4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d13b      	bne.n	8002926 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_TIM_MspPostInit+0xa8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <HAL_TIM_MspPostInit+0xa8>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <HAL_TIM_MspPostInit+0xa8>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_TIM_MspPostInit+0xa8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_TIM_MspPostInit+0xa8>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_TIM_MspPostInit+0xa8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028e6:	2340      	movs	r3, #64	@ 0x40
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028f6:	2302      	movs	r3, #2
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	480d      	ldr	r0, [pc, #52]	@ (8002938 <HAL_TIM_MspPostInit+0xac>)
 8002902:	f002 f889 	bl	8004a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002916:	2302      	movs	r3, #2
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4806      	ldr	r0, [pc, #24]	@ (800293c <HAL_TIM_MspPostInit+0xb0>)
 8002922:	f002 f879 	bl	8004a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	@ 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40000400 	.word	0x40000400
 8002934:	40023800 	.word	0x40023800
 8002938:	40020000 	.word	0x40020000
 800293c:	40020800 	.word	0x40020800

08002940 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002944:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002946:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800294a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800294c:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800294e:	2206      	movs	r2, #6
 8002950:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002952:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002954:	2202      	movs	r2, #2
 8002956:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800295a:	2200      	movs	r2, #0
 800295c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002960:	2202      	movs	r2, #2
 8002962:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800296a:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800296c:	2200      	movs	r2, #0
 800296e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002972:	2200      	movs	r2, #0
 8002974:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002976:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002978:	2200      	movs	r2, #0
 800297a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800297e:	2200      	movs	r2, #0
 8002980:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002982:	4805      	ldr	r0, [pc, #20]	@ (8002998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002984:	f002 f9f5 	bl	8004d72 <HAL_PCD_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800298e:	f7ff fbfd 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000878 	.word	0x20000878

0800299c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b0a0      	sub	sp, #128	@ 0x80
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	225c      	movs	r2, #92	@ 0x5c
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f00d f97b 	bl	800fcb8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ca:	d149      	bne.n	8002a60 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80029cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80029d2:	2300      	movs	r3, #0
 80029d4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d6:	f107 0310 	add.w	r3, r7, #16
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fdac 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80029e6:	f7ff fbd1 	bl	800218c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <HAL_PCD_MspInit+0xcc>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a68 <HAL_PCD_MspInit+0xcc>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_PCD_MspInit+0xcc>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a06:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a18:	230a      	movs	r3, #10
 8002a1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a20:	4619      	mov	r1, r3
 8002a22:	4812      	ldr	r0, [pc, #72]	@ (8002a6c <HAL_PCD_MspInit+0xd0>)
 8002a24:	f001 fff8 	bl	8004a18 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a28:	4b0f      	ldr	r3, [pc, #60]	@ (8002a68 <HAL_PCD_MspInit+0xcc>)
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a68 <HAL_PCD_MspInit+0xcc>)
 8002a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a32:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_PCD_MspInit+0xcc>)
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <HAL_PCD_MspInit+0xcc>)
 8002a3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a42:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <HAL_PCD_MspInit+0xcc>)
 8002a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2106      	movs	r1, #6
 8002a54:	2043      	movs	r0, #67	@ 0x43
 8002a56:	f001 fc45 	bl	80042e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002a5a:	2043      	movs	r0, #67	@ 0x43
 8002a5c:	f001 fc5e 	bl	800431c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a60:	bf00      	nop
 8002a62:	3780      	adds	r7, #128	@ 0x80
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020000 	.word	0x40020000

08002a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a74:	f7ff fd34 	bl	80024e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a78:	480c      	ldr	r0, [pc, #48]	@ (8002aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a7a:	490d      	ldr	r1, [pc, #52]	@ (8002ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a80:	e002      	b.n	8002a88 <LoopCopyDataInit>

08002a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a86:	3304      	adds	r3, #4

08002a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a8c:	d3f9      	bcc.n	8002a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a90:	4c0a      	ldr	r4, [pc, #40]	@ (8002abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a94:	e001      	b.n	8002a9a <LoopFillZerobss>

08002a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a98:	3204      	adds	r2, #4

08002a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a9c:	d3fb      	bcc.n	8002a96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a9e:	f00d f97f 	bl	800fda0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa2:	f7ff fa99 	bl	8001fd8 <main>
  bx  lr    
 8002aa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8002ab4:	08010690 	.word	0x08010690
  ldr r2, =_sbss
 8002ab8:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002abc:	20005510 	.word	0x20005510

08002ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b04 <HAL_Init+0x40>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <HAL_Init+0x40>)
 8002ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <HAL_Init+0x40>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f001 fbee 	bl	80042ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af2:	200f      	movs	r0, #15
 8002af4:	f7ff fb7c 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af8:	f7ff fb4e 	bl	8002198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000010 	.word	0x20000010
 8002b2c:	20000d5c 	.word	0x20000d5c

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000d5c 	.word	0x20000d5c

08002b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff ffee 	bl	8002b30 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d005      	beq.n	8002b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <HAL_Delay+0x44>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b6e:	bf00      	nop
 8002b70:	f7ff ffde 	bl	8002b30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d8f7      	bhi.n	8002b70 <HAL_Delay+0x28>
  {
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000010 	.word	0x20000010

08002b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e033      	b.n	8002c0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe f986 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d118      	bne.n	8002c00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bd6:	f023 0302 	bic.w	r3, r3, #2
 8002bda:	f043 0202 	orr.w	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa6e 	bl	80030c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bfe:	e001      	b.n	8002c04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_ADC_Start_DMA+0x1e>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e0e9      	b.n	8002e0a <HAL_ADC_Start_DMA+0x1f2>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d018      	beq.n	8002c7e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5c:	4b6d      	ldr	r3, [pc, #436]	@ (8002e14 <HAL_ADC_Start_DMA+0x1fc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6d      	ldr	r2, [pc, #436]	@ (8002e18 <HAL_ADC_Start_DMA+0x200>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0c9a      	lsrs	r2, r3, #18
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c8c:	d107      	bne.n	8002c9e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c9c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	f040 80a1 	bne.w	8002df0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cd8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cec:	d106      	bne.n	8002cfc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	f023 0206 	bic.w	r2, r3, #6
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cfa:	e002      	b.n	8002d02 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d0a:	4b44      	ldr	r3, [pc, #272]	@ (8002e1c <HAL_ADC_Start_DMA+0x204>)
 8002d0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	4a43      	ldr	r2, [pc, #268]	@ (8002e20 <HAL_ADC_Start_DMA+0x208>)
 8002d14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	4a42      	ldr	r2, [pc, #264]	@ (8002e24 <HAL_ADC_Start_DMA+0x20c>)
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	4a41      	ldr	r2, [pc, #260]	@ (8002e28 <HAL_ADC_Start_DMA+0x210>)
 8002d24:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d3e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d4e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	334c      	adds	r3, #76	@ 0x4c
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f001 fb98 	bl	8004494 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d12a      	bne.n	8002dc6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2d      	ldr	r2, [pc, #180]	@ (8002e2c <HAL_ADC_Start_DMA+0x214>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d015      	beq.n	8002da6 <HAL_ADC_Start_DMA+0x18e>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e30 <HAL_ADC_Start_DMA+0x218>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d105      	bne.n	8002d90 <HAL_ADC_Start_DMA+0x178>
 8002d84:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <HAL_ADC_Start_DMA+0x204>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a27      	ldr	r2, [pc, #156]	@ (8002e34 <HAL_ADC_Start_DMA+0x21c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d136      	bne.n	8002e08 <HAL_ADC_Start_DMA+0x1f0>
 8002d9a:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <HAL_ADC_Start_DMA+0x204>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d130      	bne.n	8002e08 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d129      	bne.n	8002e08 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	e020      	b.n	8002e08 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a18      	ldr	r2, [pc, #96]	@ (8002e2c <HAL_ADC_Start_DMA+0x214>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d11b      	bne.n	8002e08 <HAL_ADC_Start_DMA+0x1f0>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d114      	bne.n	8002e08 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	e00b      	b.n	8002e08 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f043 0210 	orr.w	r2, r3, #16
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000008 	.word	0x20000008
 8002e18:	431bde83 	.word	0x431bde83
 8002e1c:	40012300 	.word	0x40012300
 8002e20:	080032bd 	.word	0x080032bd
 8002e24:	08003377 	.word	0x08003377
 8002e28:	08003393 	.word	0x08003393
 8002e2c:	40012000 	.word	0x40012000
 8002e30:	40012100 	.word	0x40012100
 8002e34:	40012200 	.word	0x40012200

08002e38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x1c>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e113      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x244>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	d925      	bls.n	8002ed8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68d9      	ldr	r1, [r3, #12]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b1e      	subs	r3, #30
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	400a      	ands	r2, r1
 8002eb0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68d9      	ldr	r1, [r3, #12]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4403      	add	r3, r0
 8002eca:	3b1e      	subs	r3, #30
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	e022      	b.n	8002f1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6919      	ldr	r1, [r3, #16]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	2207      	movs	r2, #7
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	400a      	ands	r2, r1
 8002efa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	4603      	mov	r3, r0
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4403      	add	r3, r0
 8002f14:	409a      	lsls	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d824      	bhi.n	8002f70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	3b05      	subs	r3, #5
 8002f38:	221f      	movs	r2, #31
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	400a      	ands	r2, r1
 8002f46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	4618      	mov	r0, r3
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	3b05      	subs	r3, #5
 8002f62:	fa00 f203 	lsl.w	r2, r0, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f6e:	e04c      	b.n	800300a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b0c      	cmp	r3, #12
 8002f76:	d824      	bhi.n	8002fc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	3b23      	subs	r3, #35	@ 0x23
 8002f8a:	221f      	movs	r2, #31
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43da      	mvns	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	400a      	ands	r2, r1
 8002f98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b23      	subs	r3, #35	@ 0x23
 8002fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fc0:	e023      	b.n	800300a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3b41      	subs	r3, #65	@ 0x41
 8002fd4:	221f      	movs	r2, #31
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b41      	subs	r3, #65	@ 0x41
 8002ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800300a:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <HAL_ADC_ConfigChannel+0x250>)
 800300c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <HAL_ADC_ConfigChannel+0x254>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d10f      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x1d8>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b12      	cmp	r3, #18
 800301e:	d10b      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1d      	ldr	r2, [pc, #116]	@ (80030b4 <HAL_ADC_ConfigChannel+0x254>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d12b      	bne.n	800309a <HAL_ADC_ConfigChannel+0x23a>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <HAL_ADC_ConfigChannel+0x258>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <HAL_ADC_ConfigChannel+0x1f4>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b11      	cmp	r3, #17
 8003052:	d122      	bne.n	800309a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a11      	ldr	r2, [pc, #68]	@ (80030b8 <HAL_ADC_ConfigChannel+0x258>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d111      	bne.n	800309a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003076:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <HAL_ADC_ConfigChannel+0x25c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <HAL_ADC_ConfigChannel+0x260>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	0c9a      	lsrs	r2, r3, #18
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800308c:	e002      	b.n	8003094 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3b01      	subs	r3, #1
 8003092:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f9      	bne.n	800308e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40012300 	.word	0x40012300
 80030b4:	40012000 	.word	0x40012000
 80030b8:	10000012 	.word	0x10000012
 80030bc:	20000008 	.word	0x20000008
 80030c0:	431bde83 	.word	0x431bde83

080030c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030cc:	4b79      	ldr	r3, [pc, #484]	@ (80032b4 <ADC_Init+0x1f0>)
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	021a      	lsls	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800311c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800313e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6899      	ldr	r1, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	4a58      	ldr	r2, [pc, #352]	@ (80032b8 <ADC_Init+0x1f4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d022      	beq.n	80031a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800316a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6899      	ldr	r1, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800318c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6899      	ldr	r1, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	e00f      	b.n	80031c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0202 	bic.w	r2, r2, #2
 80031d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6899      	ldr	r1, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7e1b      	ldrb	r3, [r3, #24]
 80031dc:	005a      	lsls	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01b      	beq.n	8003228 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800320e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	3b01      	subs	r3, #1
 800321c:	035a      	lsls	r2, r3, #13
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e007      	b.n	8003238 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003246:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	3b01      	subs	r3, #1
 8003254:	051a      	lsls	r2, r3, #20
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800326c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6899      	ldr	r1, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800327a:	025a      	lsls	r2, r3, #9
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003292:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	029a      	lsls	r2, r3, #10
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40012300 	.word	0x40012300
 80032b8:	0f000001 	.word	0x0f000001

080032bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d13c      	bne.n	8003350 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d12b      	bne.n	8003348 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d127      	bne.n	8003348 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003310:	2b00      	cmp	r3, #0
 8003312:	d119      	bne.n	8003348 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0220 	bic.w	r2, r2, #32
 8003322:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7fe fd01 	bl	8001d50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800334e:	e00e      	b.n	800336e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff fd75 	bl	8002e4c <HAL_ADC_ErrorCallback>
}
 8003362:	e004      	b.n	800336e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fd57 	bl	8002e38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2240      	movs	r2, #64	@ 0x40
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f043 0204 	orr.w	r2, r3, #4
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff fd4a 	bl	8002e4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0ed      	b.n	80035ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd fe32 	bl	8001048 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f4:	f7ff fb9c 	bl	8002b30 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033fa:	e012      	b.n	8003422 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033fc:	f7ff fb98 	bl	8002b30 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b0a      	cmp	r3, #10
 8003408:	d90b      	bls.n	8003422 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2205      	movs	r2, #5
 800341a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0c5      	b.n	80035ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0e5      	beq.n	80033fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0202 	bic.w	r2, r2, #2
 800343e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003440:	f7ff fb76 	bl	8002b30 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003446:	e012      	b.n	800346e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003448:	f7ff fb72 	bl	8002b30 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b0a      	cmp	r3, #10
 8003454:	d90b      	bls.n	800346e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2205      	movs	r2, #5
 8003466:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e09f      	b.n	80035ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e5      	bne.n	8003448 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7e1b      	ldrb	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d108      	bne.n	8003496 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e007      	b.n	80034a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7e5b      	ldrb	r3, [r3, #25]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d108      	bne.n	80034c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e007      	b.n	80034d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7e9b      	ldrb	r3, [r3, #26]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d108      	bne.n	80034ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0220 	orr.w	r2, r2, #32
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e007      	b.n	80034fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0220 	bic.w	r2, r2, #32
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7edb      	ldrb	r3, [r3, #27]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d108      	bne.n	8003514 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0210 	bic.w	r2, r2, #16
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e007      	b.n	8003524 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0210 	orr.w	r2, r2, #16
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	7f1b      	ldrb	r3, [r3, #28]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0208 	orr.w	r2, r2, #8
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e007      	b.n	800354e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0208 	bic.w	r2, r2, #8
 800354c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7f5b      	ldrb	r3, [r3, #29]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d108      	bne.n	8003568 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0204 	orr.w	r2, r2, #4
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e007      	b.n	8003578 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	ea42 0103 	orr.w	r1, r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	1e5a      	subs	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d003      	beq.n	80035de <HAL_CAN_ConfigFilter+0x26>
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	f040 80be 	bne.w	800375a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035de:	4b65      	ldr	r3, [pc, #404]	@ (8003774 <HAL_CAN_ConfigFilter+0x1bc>)
 80035e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035e8:	f043 0201 	orr.w	r2, r3, #1
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035f8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	431a      	orrs	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2201      	movs	r2, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	43db      	mvns	r3, r3
 8003630:	401a      	ands	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d123      	bne.n	8003688 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43db      	mvns	r3, r3
 800364a:	401a      	ands	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003662:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3248      	adds	r2, #72	@ 0x48
 8003668:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800367c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800367e:	6979      	ldr	r1, [r7, #20]
 8003680:	3348      	adds	r3, #72	@ 0x48
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d122      	bne.n	80036d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	431a      	orrs	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3248      	adds	r2, #72	@ 0x48
 80036b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036cc:	6979      	ldr	r1, [r7, #20]
 80036ce:	3348      	adds	r3, #72	@ 0x48
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	401a      	ands	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80036f0:	e007      	b.n	8003702 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43db      	mvns	r3, r3
 8003714:	401a      	ands	r2, r3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800371c:	e007      	b.n	800372e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	431a      	orrs	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	431a      	orrs	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800374c:	f023 0201 	bic.w	r2, r3, #1
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e006      	b.n	8003768 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40006400 	.word	0x40006400

08003778 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d12e      	bne.n	80037ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037a4:	f7ff f9c4 	bl	8002b30 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037aa:	e012      	b.n	80037d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037ac:	f7ff f9c0 	bl	8002b30 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b0a      	cmp	r3, #10
 80037b8:	d90b      	bls.n	80037d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2205      	movs	r2, #5
 80037ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e012      	b.n	80037f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e006      	b.n	80037f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d133      	bne.n	800387c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003824:	f7ff f984 	bl	8002b30 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800382a:	e012      	b.n	8003852 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800382c:	f7ff f980 	bl	8002b30 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b0a      	cmp	r3, #10
 8003838:	d90b      	bls.n	8003852 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2205      	movs	r2, #5
 800384a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e01b      	b.n	800388a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0e5      	beq.n	800382c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0202 	bic.w	r2, r2, #2
 800386e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e006      	b.n	800388a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003892:	b480      	push	{r7}
 8003894:	b089      	sub	sp, #36	@ 0x24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038b0:	7ffb      	ldrb	r3, [r7, #31]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d003      	beq.n	80038be <HAL_CAN_AddTxMessage+0x2c>
 80038b6:	7ffb      	ldrb	r3, [r7, #31]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f040 80ad 	bne.w	8003a18 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8095 	beq.w	8003a08 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80038e8:	2201      	movs	r2, #1
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	409a      	lsls	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	6809      	ldr	r1, [r1, #0]
 8003908:	431a      	orrs	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3318      	adds	r3, #24
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	440b      	add	r3, r1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e00f      	b.n	8003936 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003920:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800392a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3318      	adds	r3, #24
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	440b      	add	r3, r1
 8003934:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3318      	adds	r3, #24
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	440b      	add	r3, r1
 8003946:	3304      	adds	r3, #4
 8003948:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	7d1b      	ldrb	r3, [r3, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d111      	bne.n	8003976 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3318      	adds	r3, #24
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4413      	add	r3, r2
 800395e:	3304      	adds	r3, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3318      	adds	r3, #24
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	440b      	add	r3, r1
 8003972:	3304      	adds	r3, #4
 8003974:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3307      	adds	r3, #7
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	061a      	lsls	r2, r3, #24
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3306      	adds	r3, #6
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	041b      	lsls	r3, r3, #16
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3305      	adds	r3, #5
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	4313      	orrs	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	3204      	adds	r2, #4
 8003996:	7812      	ldrb	r2, [r2, #0]
 8003998:	4610      	mov	r0, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	6811      	ldr	r1, [r2, #0]
 800399e:	ea43 0200 	orr.w	r2, r3, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	440b      	add	r3, r1
 80039a8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80039ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3303      	adds	r3, #3
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	061a      	lsls	r2, r3, #24
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3302      	adds	r3, #2
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3301      	adds	r3, #1
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4313      	orrs	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	4610      	mov	r0, r2
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6811      	ldr	r1, [r2, #0]
 80039d4:	ea43 0200 	orr.w	r2, r3, r0
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	440b      	add	r3, r1
 80039de:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80039e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	3318      	adds	r3, #24
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	4413      	add	r3, r2
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6811      	ldr	r1, [r2, #0]
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3318      	adds	r3, #24
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	440b      	add	r3, r1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e00e      	b.n	8003a26 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e006      	b.n	8003a26 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3724      	adds	r7, #36	@ 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a32:	b480      	push	{r7}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a46:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d003      	beq.n	8003a56 <HAL_CAN_GetRxMessage+0x24>
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	f040 8103 	bne.w	8003c5c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10e      	bne.n	8003a7a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d116      	bne.n	8003a98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e0f7      	b.n	8003c6a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0e8      	b.n	8003c6a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	331b      	adds	r3, #27
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	4413      	add	r3, r2
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0204 	and.w	r2, r3, #4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	331b      	adds	r3, #27
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	4413      	add	r3, r2
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	0d5b      	lsrs	r3, r3, #21
 8003ac6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e00b      	b.n	8003ae8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	331b      	adds	r3, #27
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	4413      	add	r3, r2
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	08db      	lsrs	r3, r3, #3
 8003ae0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	331b      	adds	r3, #27
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	4413      	add	r3, r2
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0202 	and.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	331b      	adds	r3, #27
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	611a      	str	r2, [r3, #16]
 8003b1c:	e00b      	b.n	8003b36 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	331b      	adds	r3, #27
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	4413      	add	r3, r2
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	331b      	adds	r3, #27
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	331b      	adds	r3, #27
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0a1a      	lsrs	r2, r3, #8
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	0c1a      	lsrs	r2, r3, #16
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	3302      	adds	r3, #2
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e1a      	lsrs	r2, r3, #24
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	3303      	adds	r3, #3
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	0a1a      	lsrs	r2, r3, #8
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	3305      	adds	r3, #5
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0c1a      	lsrs	r2, r3, #16
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	3306      	adds	r3, #6
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0e1a      	lsrs	r2, r3, #24
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	3307      	adds	r3, #7
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0220 	orr.w	r2, r2, #32
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	e007      	b.n	8003c58 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0220 	orr.w	r2, r2, #32
 8003c56:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e006      	b.n	8003c6a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c8a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d002      	beq.n	8003c98 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003c92:	7afb      	ldrb	r3, [r7, #11]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d10f      	bne.n	8003cb8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e005      	b.n	8003cb8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d002      	beq.n	8003ce4 <HAL_CAN_ActivateNotification+0x1e>
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d109      	bne.n	8003cf8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6959      	ldr	r1, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e006      	b.n	8003d06 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b08a      	sub	sp, #40	@ 0x28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d07c      	beq.n	8003e52 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d023      	beq.n	8003daa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2201      	movs	r2, #1
 8003d68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f983 	bl	8004080 <HAL_CAN_TxMailbox0CompleteCallback>
 8003d7a:	e016      	b.n	8003daa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8e:	e00c      	b.n	8003daa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da2:	e002      	b.n	8003daa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f989 	bl	80040bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d024      	beq.n	8003dfe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dbc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f963 	bl	8004094 <HAL_CAN_TxMailbox1CompleteCallback>
 8003dce:	e016      	b.n	8003dfe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de2:	e00c      	b.n	8003dfe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df6:	e002      	b.n	8003dfe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f969 	bl	80040d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d024      	beq.n	8003e52 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f943 	bl	80040a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e22:	e016      	b.n	8003e52 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e36:	e00c      	b.n	8003e52 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4a:	e002      	b.n	8003e52 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f949 	bl	80040e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2210      	movs	r2, #16
 8003e74:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2208      	movs	r2, #8
 8003e90:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f930 	bl	80040f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7fe f947 	bl	8002144 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00c      	beq.n	8003eda <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00b      	beq.n	8003efc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f908 	bl	800410c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fe f903 	bl	8002120 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00b      	beq.n	8003f3c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d006      	beq.n	8003f3c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2210      	movs	r2, #16
 8003f34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8f2 	bl	8004120 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2208      	movs	r2, #8
 8003f56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f8eb 	bl	8004134 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d07b      	beq.n	8004060 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d072      	beq.n	8004058 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d043      	beq.n	8004058 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d03e      	beq.n	8004058 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fe0:	2b60      	cmp	r3, #96	@ 0x60
 8003fe2:	d02b      	beq.n	800403c <HAL_CAN_IRQHandler+0x32a>
 8003fe4:	2b60      	cmp	r3, #96	@ 0x60
 8003fe6:	d82e      	bhi.n	8004046 <HAL_CAN_IRQHandler+0x334>
 8003fe8:	2b50      	cmp	r3, #80	@ 0x50
 8003fea:	d022      	beq.n	8004032 <HAL_CAN_IRQHandler+0x320>
 8003fec:	2b50      	cmp	r3, #80	@ 0x50
 8003fee:	d82a      	bhi.n	8004046 <HAL_CAN_IRQHandler+0x334>
 8003ff0:	2b40      	cmp	r3, #64	@ 0x40
 8003ff2:	d019      	beq.n	8004028 <HAL_CAN_IRQHandler+0x316>
 8003ff4:	2b40      	cmp	r3, #64	@ 0x40
 8003ff6:	d826      	bhi.n	8004046 <HAL_CAN_IRQHandler+0x334>
 8003ff8:	2b30      	cmp	r3, #48	@ 0x30
 8003ffa:	d010      	beq.n	800401e <HAL_CAN_IRQHandler+0x30c>
 8003ffc:	2b30      	cmp	r3, #48	@ 0x30
 8003ffe:	d822      	bhi.n	8004046 <HAL_CAN_IRQHandler+0x334>
 8004000:	2b10      	cmp	r3, #16
 8004002:	d002      	beq.n	800400a <HAL_CAN_IRQHandler+0x2f8>
 8004004:	2b20      	cmp	r3, #32
 8004006:	d005      	beq.n	8004014 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004008:	e01d      	b.n	8004046 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	f043 0308 	orr.w	r3, r3, #8
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004012:	e019      	b.n	8004048 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	f043 0310 	orr.w	r3, r3, #16
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800401c:	e014      	b.n	8004048 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	f043 0320 	orr.w	r3, r3, #32
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004026:	e00f      	b.n	8004048 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004030:	e00a      	b.n	8004048 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800403a:	e005      	b.n	8004048 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004044:	e000      	b.n	8004048 <HAL_CAN_IRQHandler+0x336>
            break;
 8004046:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004056:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2204      	movs	r2, #4
 800405e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f868 	bl	8004148 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004078:	bf00      	nop
 800407a:	3728      	adds	r7, #40	@ 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <__NVIC_SetPriorityGrouping>:
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004184:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004190:	4013      	ands	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800419c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041a6:	4a04      	ldr	r2, [pc, #16]	@ (80041b8 <__NVIC_SetPriorityGrouping+0x44>)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	60d3      	str	r3, [r2, #12]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <__NVIC_GetPriorityGrouping>:
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c0:	4b04      	ldr	r3, [pc, #16]	@ (80041d4 <__NVIC_GetPriorityGrouping+0x18>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	f003 0307 	and.w	r3, r3, #7
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <__NVIC_EnableIRQ>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	db0b      	blt.n	8004202 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	f003 021f 	and.w	r2, r3, #31
 80041f0:	4907      	ldr	r1, [pc, #28]	@ (8004210 <__NVIC_EnableIRQ+0x38>)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2001      	movs	r0, #1
 80041fa:	fa00 f202 	lsl.w	r2, r0, r2
 80041fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000e100 	.word	0xe000e100

08004214 <__NVIC_SetPriority>:
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004224:	2b00      	cmp	r3, #0
 8004226:	db0a      	blt.n	800423e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	490c      	ldr	r1, [pc, #48]	@ (8004260 <__NVIC_SetPriority+0x4c>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	0112      	lsls	r2, r2, #4
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	440b      	add	r3, r1
 8004238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800423c:	e00a      	b.n	8004254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4908      	ldr	r1, [pc, #32]	@ (8004264 <__NVIC_SetPriority+0x50>)
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	3b04      	subs	r3, #4
 800424c:	0112      	lsls	r2, r2, #4
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	440b      	add	r3, r1
 8004252:	761a      	strb	r2, [r3, #24]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <NVIC_EncodePriority>:
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	@ 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f1c3 0307 	rsb	r3, r3, #7
 8004282:	2b04      	cmp	r3, #4
 8004284:	bf28      	it	cs
 8004286:	2304      	movcs	r3, #4
 8004288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3304      	adds	r3, #4
 800428e:	2b06      	cmp	r3, #6
 8004290:	d902      	bls.n	8004298 <NVIC_EncodePriority+0x30>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3b03      	subs	r3, #3
 8004296:	e000      	b.n	800429a <NVIC_EncodePriority+0x32>
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	401a      	ands	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b0:	f04f 31ff 	mov.w	r1, #4294967295
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	43d9      	mvns	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c0:	4313      	orrs	r3, r2
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3724      	adds	r7, #36	@ 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ff4c 	bl	8004174 <__NVIC_SetPriorityGrouping>
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f6:	f7ff ff61 	bl	80041bc <__NVIC_GetPriorityGrouping>
 80042fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f7ff ffb1 	bl	8004268 <NVIC_EncodePriority>
 8004306:	4602      	mov	r2, r0
 8004308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff ff80 	bl	8004214 <__NVIC_SetPriority>
}
 8004314:	bf00      	nop
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff ff54 	bl	80041d8 <__NVIC_EnableIRQ>
}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004344:	f7fe fbf4 	bl	8002b30 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e099      	b.n	8004488 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004374:	e00f      	b.n	8004396 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004376:	f7fe fbdb 	bl	8002b30 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b05      	cmp	r3, #5
 8004382:	d908      	bls.n	8004396 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2203      	movs	r2, #3
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e078      	b.n	8004488 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e8      	bne.n	8004376 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4b38      	ldr	r3, [pc, #224]	@ (8004490 <HAL_DMA_Init+0x158>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d107      	bne.n	8004400 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	4313      	orrs	r3, r2
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	2b04      	cmp	r3, #4
 8004428:	d117      	bne.n	800445a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00e      	beq.n	800445a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa6f 	bl	8004920 <DMA_CheckFifoParam>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2240      	movs	r2, #64	@ 0x40
 800444c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004456:	2301      	movs	r3, #1
 8004458:	e016      	b.n	8004488 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa26 	bl	80048b4 <DMA_CalcBaseAndBitshift>
 8004468:	4603      	mov	r3, r0
 800446a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004470:	223f      	movs	r2, #63	@ 0x3f
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	f010803f 	.word	0xf010803f

08004494 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_DMA_Start_IT+0x26>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e040      	b.n	800453c <HAL_DMA_Start_IT+0xa8>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d12f      	bne.n	800452e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f9b8 	bl	8004858 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ec:	223f      	movs	r2, #63	@ 0x3f
 80044ee:	409a      	lsls	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0216 	orr.w	r2, r2, #22
 8004502:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0208 	orr.w	r2, r2, #8
 800451a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e005      	b.n	800453a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004536:	2302      	movs	r3, #2
 8004538:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800453a:	7dfb      	ldrb	r3, [r7, #23]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004550:	4b8e      	ldr	r3, [pc, #568]	@ (800478c <HAL_DMA_IRQHandler+0x248>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a8e      	ldr	r2, [pc, #568]	@ (8004790 <HAL_DMA_IRQHandler+0x24c>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	0a9b      	lsrs	r3, r3, #10
 800455c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456e:	2208      	movs	r2, #8
 8004570:	409a      	lsls	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01a      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	2208      	movs	r2, #8
 800459e:	409a      	lsls	r2, r3
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d012      	beq.n	80045e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d2:	2201      	movs	r2, #1
 80045d4:	409a      	lsls	r2, r3
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045de:	f043 0202 	orr.w	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ea:	2204      	movs	r2, #4
 80045ec:	409a      	lsls	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d012      	beq.n	800461c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004608:	2204      	movs	r2, #4
 800460a:	409a      	lsls	r2, r3
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004614:	f043 0204 	orr.w	r2, r3, #4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004620:	2210      	movs	r2, #16
 8004622:	409a      	lsls	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d043      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d03c      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463e:	2210      	movs	r2, #16
 8004640:	409a      	lsls	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d018      	beq.n	8004686 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d108      	bne.n	8004674 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d024      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
 8004672:	e01f      	b.n	80046b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
 8004684:	e016      	b.n	80046b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0208 	bic.w	r2, r2, #8
 80046a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b8:	2220      	movs	r2, #32
 80046ba:	409a      	lsls	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 808f 	beq.w	80047e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8087 	beq.w	80047e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046da:	2220      	movs	r2, #32
 80046dc:	409a      	lsls	r2, r3
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	d136      	bne.n	800475c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0216 	bic.w	r2, r2, #22
 80046fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800470c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_DMA_IRQHandler+0x1da>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0208 	bic.w	r2, r2, #8
 800472c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004732:	223f      	movs	r2, #63	@ 0x3f
 8004734:	409a      	lsls	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474e:	2b00      	cmp	r3, #0
 8004750:	d07e      	beq.n	8004850 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
        }
        return;
 800475a:	e079      	b.n	8004850 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01d      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10d      	bne.n	8004794 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477c:	2b00      	cmp	r3, #0
 800477e:	d031      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
 8004788:	e02c      	b.n	80047e4 <HAL_DMA_IRQHandler+0x2a0>
 800478a:	bf00      	nop
 800478c:	20000008 	.word	0x20000008
 8004790:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d023      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
 80047a4:	e01e      	b.n	80047e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10f      	bne.n	80047d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0210 	bic.w	r2, r2, #16
 80047c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d032      	beq.n	8004852 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d022      	beq.n	800483e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2205      	movs	r2, #5
 80047fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3301      	adds	r3, #1
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	d307      	bcc.n	800482c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f2      	bne.n	8004810 <HAL_DMA_IRQHandler+0x2cc>
 800482a:	e000      	b.n	800482e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800482c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
 800484e:	e000      	b.n	8004852 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004850:	bf00      	nop
    }
  }
}
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004874:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b40      	cmp	r3, #64	@ 0x40
 8004884:	d108      	bne.n	8004898 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004896:	e007      	b.n	80048a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	60da      	str	r2, [r3, #12]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	3b10      	subs	r3, #16
 80048c4:	4a14      	ldr	r2, [pc, #80]	@ (8004918 <DMA_CalcBaseAndBitshift+0x64>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048ce:	4a13      	ldr	r2, [pc, #76]	@ (800491c <DMA_CalcBaseAndBitshift+0x68>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d909      	bls.n	80048f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80048f4:	e007      	b.n	8004906 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	aaaaaaab 	.word	0xaaaaaaab
 800491c:	08010644 	.word	0x08010644

08004920 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11f      	bne.n	800497a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d856      	bhi.n	80049ee <DMA_CheckFifoParam+0xce>
 8004940:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <DMA_CheckFifoParam+0x28>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	08004959 	.word	0x08004959
 800494c:	0800496b 	.word	0x0800496b
 8004950:	08004959 	.word	0x08004959
 8004954:	080049ef 	.word	0x080049ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d046      	beq.n	80049f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004968:	e043      	b.n	80049f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004972:	d140      	bne.n	80049f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004978:	e03d      	b.n	80049f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004982:	d121      	bne.n	80049c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d837      	bhi.n	80049fa <DMA_CheckFifoParam+0xda>
 800498a:	a201      	add	r2, pc, #4	@ (adr r2, 8004990 <DMA_CheckFifoParam+0x70>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049a1 	.word	0x080049a1
 8004994:	080049a7 	.word	0x080049a7
 8004998:	080049a1 	.word	0x080049a1
 800499c:	080049b9 	.word	0x080049b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      break;
 80049a4:	e030      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d025      	beq.n	80049fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b6:	e022      	b.n	80049fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049c0:	d11f      	bne.n	8004a02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049c6:	e01c      	b.n	8004a02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d903      	bls.n	80049d6 <DMA_CheckFifoParam+0xb6>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d003      	beq.n	80049dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049d4:	e018      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
      break;
 80049da:	e015      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00e      	beq.n	8004a06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      break;
 80049ec:	e00b      	b.n	8004a06 <DMA_CheckFifoParam+0xe6>
      break;
 80049ee:	bf00      	nop
 80049f0:	e00a      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
      break;
 80049f2:	bf00      	nop
 80049f4:	e008      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
      break;
 80049f6:	bf00      	nop
 80049f8:	e006      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
      break;
 80049fa:	bf00      	nop
 80049fc:	e004      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
      break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <DMA_CheckFifoParam+0xe8>
      break;
 8004a06:	bf00      	nop
    }
  } 
  
  return status; 
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop

08004a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	@ 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	e165      	b.n	8004d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a34:	2201      	movs	r2, #1
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4013      	ands	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	f040 8154 	bne.w	8004cfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d005      	beq.n	8004a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d130      	bne.n	8004acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	2203      	movs	r2, #3
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 0201 	and.w	r2, r3, #1
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d017      	beq.n	8004b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d123      	bne.n	8004b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	08da      	lsrs	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3208      	adds	r2, #8
 8004b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	220f      	movs	r2, #15
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	08da      	lsrs	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3208      	adds	r2, #8
 8004b56:	69b9      	ldr	r1, [r7, #24]
 8004b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	2203      	movs	r2, #3
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 0203 	and.w	r2, r3, #3
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80ae 	beq.w	8004cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8004d18 <HAL_GPIO_Init+0x300>)
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8004d18 <HAL_GPIO_Init+0x300>)
 8004ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bae:	4b5a      	ldr	r3, [pc, #360]	@ (8004d18 <HAL_GPIO_Init+0x300>)
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bba:	4a58      	ldr	r2, [pc, #352]	@ (8004d1c <HAL_GPIO_Init+0x304>)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a4f      	ldr	r2, [pc, #316]	@ (8004d20 <HAL_GPIO_Init+0x308>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d025      	beq.n	8004c32 <HAL_GPIO_Init+0x21a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a4e      	ldr	r2, [pc, #312]	@ (8004d24 <HAL_GPIO_Init+0x30c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01f      	beq.n	8004c2e <HAL_GPIO_Init+0x216>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8004d28 <HAL_GPIO_Init+0x310>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d019      	beq.n	8004c2a <HAL_GPIO_Init+0x212>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8004d2c <HAL_GPIO_Init+0x314>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_GPIO_Init+0x20e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a4b      	ldr	r2, [pc, #300]	@ (8004d30 <HAL_GPIO_Init+0x318>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00d      	beq.n	8004c22 <HAL_GPIO_Init+0x20a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a4a      	ldr	r2, [pc, #296]	@ (8004d34 <HAL_GPIO_Init+0x31c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d007      	beq.n	8004c1e <HAL_GPIO_Init+0x206>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a49      	ldr	r2, [pc, #292]	@ (8004d38 <HAL_GPIO_Init+0x320>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_GPIO_Init+0x202>
 8004c16:	2306      	movs	r3, #6
 8004c18:	e00c      	b.n	8004c34 <HAL_GPIO_Init+0x21c>
 8004c1a:	2307      	movs	r3, #7
 8004c1c:	e00a      	b.n	8004c34 <HAL_GPIO_Init+0x21c>
 8004c1e:	2305      	movs	r3, #5
 8004c20:	e008      	b.n	8004c34 <HAL_GPIO_Init+0x21c>
 8004c22:	2304      	movs	r3, #4
 8004c24:	e006      	b.n	8004c34 <HAL_GPIO_Init+0x21c>
 8004c26:	2303      	movs	r3, #3
 8004c28:	e004      	b.n	8004c34 <HAL_GPIO_Init+0x21c>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e002      	b.n	8004c34 <HAL_GPIO_Init+0x21c>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_GPIO_Init+0x21c>
 8004c32:	2300      	movs	r3, #0
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	f002 0203 	and.w	r2, r2, #3
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	4093      	lsls	r3, r2
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c44:	4935      	ldr	r1, [pc, #212]	@ (8004d1c <HAL_GPIO_Init+0x304>)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c52:	4b3a      	ldr	r3, [pc, #232]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c76:	4a31      	ldr	r2, [pc, #196]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ca0:	4a26      	ldr	r2, [pc, #152]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ca6:	4b25      	ldr	r3, [pc, #148]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cca:	4a1c      	ldr	r2, [pc, #112]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cf4:	4a11      	ldr	r2, [pc, #68]	@ (8004d3c <HAL_GPIO_Init+0x324>)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b0f      	cmp	r3, #15
 8004d04:	f67f ae96 	bls.w	8004a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	3724      	adds	r7, #36	@ 0x24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	40020000 	.word	0x40020000
 8004d24:	40020400 	.word	0x40020400
 8004d28:	40020800 	.word	0x40020800
 8004d2c:	40020c00 	.word	0x40020c00
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40021400 	.word	0x40021400
 8004d38:	40021800 	.word	0x40021800
 8004d3c:	40013c00 	.word	0x40013c00

08004d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	807b      	strh	r3, [r7, #2]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d50:	787b      	ldrb	r3, [r7, #1]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d56:	887a      	ldrh	r2, [r7, #2]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d5c:	e003      	b.n	8004d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	041a      	lsls	r2, r3, #16
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	619a      	str	r2, [r3, #24]
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b086      	sub	sp, #24
 8004d76:	af02      	add	r7, sp, #8
 8004d78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e108      	b.n	8004f96 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd fdfc 	bl	800299c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2203      	movs	r2, #3
 8004da8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004db2:	d102      	bne.n	8004dba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f003 fe2f 	bl	8008a22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7c1a      	ldrb	r2, [r3, #16]
 8004dcc:	f88d 2000 	strb.w	r2, [sp]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dd4:	f003 fd0e 	bl	80087f4 <USB_CoreInit>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0d5      	b.n	8004f96 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f003 fe27 	bl	8008a44 <USB_SetCurrentMode>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0c6      	b.n	8004f96 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	e04a      	b.n	8004ea4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3315      	adds	r3, #21
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	3314      	adds	r3, #20
 8004e32:	7bfa      	ldrb	r2, [r7, #15]
 8004e34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	b298      	uxth	r0, r3
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	332e      	adds	r3, #46	@ 0x2e
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e4e:	7bfa      	ldrb	r2, [r7, #15]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3318      	adds	r3, #24
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	331c      	adds	r3, #28
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3320      	adds	r3, #32
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e8a:	7bfa      	ldrb	r2, [r7, #15]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	3324      	adds	r3, #36	@ 0x24
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	791b      	ldrb	r3, [r3, #4]
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d3af      	bcc.n	8004e0e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73fb      	strb	r3, [r7, #15]
 8004eb2:	e044      	b.n	8004f3e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ee0:	7bfa      	ldrb	r2, [r7, #15]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f0c:	7bfa      	ldrb	r2, [r7, #15]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	791b      	ldrb	r3, [r3, #4]
 8004f42:	7bfa      	ldrb	r2, [r7, #15]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d3b5      	bcc.n	8004eb4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7c1a      	ldrb	r2, [r3, #16]
 8004f50:	f88d 2000 	strb.w	r2, [sp]
 8004f54:	3304      	adds	r3, #4
 8004f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f58:	f003 fdc0 	bl	8008adc <USB_DevInit>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e013      	b.n	8004f96 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7b1b      	ldrb	r3, [r3, #12]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d102      	bne.n	8004f8a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 f96f 	bl	8006268 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f004 fdfd 	bl	8009b8e <USB_DevDisconnect>

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_PCD_Start+0x1c>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e022      	b.n	8005000 <HAL_PCD_Start+0x62>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d105      	bne.n	8004fe2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f003 fd0a 	bl	8008a00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f004 fdab 	bl	8009b4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b08d      	sub	sp, #52	@ 0x34
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f004 fe69 	bl	8009cf6 <USB_GetMode>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	f040 84b9 	bne.w	800599e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f004 fdcd 	bl	8009bd0 <USB_ReadInterrupts>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 84af 	beq.w	800599c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f004 fdba 	bl	8009bd0 <USB_ReadInterrupts>
 800505c:	4603      	mov	r3, r0
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b02      	cmp	r3, #2
 8005064:	d107      	bne.n	8005076 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f002 0202 	and.w	r2, r2, #2
 8005074:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f004 fda8 	bl	8009bd0 <USB_ReadInterrupts>
 8005080:	4603      	mov	r3, r0
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b10      	cmp	r3, #16
 8005088:	d161      	bne.n	800514e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0210 	bic.w	r2, r2, #16
 8005098:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 020f 	and.w	r2, r3, #15
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4413      	add	r3, r2
 80050b6:	3304      	adds	r3, #4
 80050b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	0c5b      	lsrs	r3, r3, #17
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d124      	bne.n	8005110 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d035      	beq.n	800513e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	091b      	lsrs	r3, r3, #4
 80050da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	6a38      	ldr	r0, [r7, #32]
 80050e6:	f004 fbdf 	bl	80098a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050f6:	441a      	add	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005108:	441a      	add	r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	615a      	str	r2, [r3, #20]
 800510e:	e016      	b.n	800513e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	0c5b      	lsrs	r3, r3, #17
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	2b06      	cmp	r3, #6
 800511a:	d110      	bne.n	800513e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005122:	2208      	movs	r2, #8
 8005124:	4619      	mov	r1, r3
 8005126:	6a38      	ldr	r0, [r7, #32]
 8005128:	f004 fbbe 	bl	80098a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005138:	441a      	add	r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0210 	orr.w	r2, r2, #16
 800514c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f004 fd3c 	bl	8009bd0 <USB_ReadInterrupts>
 8005158:	4603      	mov	r3, r0
 800515a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800515e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005162:	f040 80a7 	bne.w	80052b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f004 fd41 	bl	8009bf6 <USB_ReadDevAllOutEpInterrupt>
 8005174:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005176:	e099      	b.n	80052ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 808e 	beq.w	80052a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f004 fd65 	bl	8009c5e <USB_ReadDevOutEPInterrupt>
 8005194:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00c      	beq.n	80051ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ac:	461a      	mov	r2, r3
 80051ae:	2301      	movs	r3, #1
 80051b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fed1 	bl	8005f5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00c      	beq.n	80051de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d0:	461a      	mov	r2, r3
 80051d2:	2308      	movs	r3, #8
 80051d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 ffa7 	bl	800612c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f4:	461a      	mov	r2, r3
 80051f6:	2310      	movs	r3, #16
 80051f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d030      	beq.n	8005266 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520c:	2b80      	cmp	r3, #128	@ 0x80
 800520e:	d109      	bne.n	8005224 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800521e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005222:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4413      	add	r3, r2
 8005236:	3304      	adds	r3, #4
 8005238:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	78db      	ldrb	r3, [r3, #3]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d108      	bne.n	8005254 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	b2db      	uxtb	r3, r3
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f007 fe24 	bl	800ce9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	2302      	movs	r3, #2
 8005264:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527c:	461a      	mov	r2, r3
 800527e:	2320      	movs	r3, #32
 8005280:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005298:	461a      	mov	r2, r3
 800529a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800529e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	3301      	adds	r3, #1
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f47f af62 	bne.w	8005178 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f004 fc89 	bl	8009bd0 <USB_ReadInterrupts>
 80052be:	4603      	mov	r3, r0
 80052c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052c8:	f040 80db 	bne.w	8005482 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f004 fcaa 	bl	8009c2a <USB_ReadDevAllInEpInterrupt>
 80052d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80052dc:	e0cd      	b.n	800547a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80c2 	beq.w	800546e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f004 fcd0 	bl	8009c9a <USB_ReadDevInEPInterrupt>
 80052fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d057      	beq.n	80053b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	2201      	movs	r2, #1
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	43db      	mvns	r3, r3
 8005320:	69f9      	ldr	r1, [r7, #28]
 8005322:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005326:	4013      	ands	r3, r2
 8005328:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005336:	461a      	mov	r2, r3
 8005338:	2301      	movs	r3, #1
 800533a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	799b      	ldrb	r3, [r3, #6]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d132      	bne.n	80053aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005348:	4613      	mov	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	3320      	adds	r3, #32
 8005354:	6819      	ldr	r1, [r3, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535a:	4613      	mov	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4403      	add	r3, r0
 8005364:	331c      	adds	r3, #28
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4419      	add	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536e:	4613      	mov	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4403      	add	r3, r0
 8005378:	3320      	adds	r3, #32
 800537a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d113      	bne.n	80053aa <HAL_PCD_IRQHandler+0x3a2>
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	3324      	adds	r3, #36	@ 0x24
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053a2:	461a      	mov	r2, r3
 80053a4:	2101      	movs	r1, #1
 80053a6:	f004 fcd7 	bl	8009d58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f007 fcee 	bl	800cd92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053cc:	461a      	mov	r2, r3
 80053ce:	2308      	movs	r3, #8
 80053d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e8:	461a      	mov	r2, r3
 80053ea:	2310      	movs	r3, #16
 80053ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005404:	461a      	mov	r2, r3
 8005406:	2340      	movs	r3, #64	@ 0x40
 8005408:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d023      	beq.n	800545c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005416:	6a38      	ldr	r0, [r7, #32]
 8005418:	f003 fcbe 	bl	8008d98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800541c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541e:	4613      	mov	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	3310      	adds	r3, #16
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	4413      	add	r3, r2
 800542c:	3304      	adds	r3, #4
 800542e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	78db      	ldrb	r3, [r3, #3]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d108      	bne.n	800544a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f007 fd3b 	bl	800cec0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005456:	461a      	mov	r2, r3
 8005458:	2302      	movs	r3, #2
 800545a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fcea 	bl	8005e42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	3301      	adds	r3, #1
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	2b00      	cmp	r3, #0
 800547e:	f47f af2e 	bne.w	80052de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f004 fba2 	bl	8009bd0 <USB_ReadInterrupts>
 800548c:	4603      	mov	r3, r0
 800548e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005492:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005496:	d122      	bne.n	80054de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d108      	bne.n	80054c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054be:	2100      	movs	r1, #0
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fef5 	bl	80062b0 <HAL_PCDEx_LPM_Callback>
 80054c6:	e002      	b.n	80054ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f007 fcd9 	bl	800ce80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80054dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f004 fb74 	bl	8009bd0 <USB_ReadInterrupts>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f2:	d112      	bne.n	800551a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d102      	bne.n	800550a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f007 fc95 	bl	800ce34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005518:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f004 fb56 	bl	8009bd0 <USB_ReadInterrupts>
 8005524:	4603      	mov	r3, r0
 8005526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800552a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800552e:	d121      	bne.n	8005574 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800553e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005546:	2b00      	cmp	r3, #0
 8005548:	d111      	bne.n	800556e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	f003 020f 	and.w	r2, r3, #15
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005564:	2101      	movs	r1, #1
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fea2 	bl	80062b0 <HAL_PCDEx_LPM_Callback>
 800556c:	e002      	b.n	8005574 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f007 fc60 	bl	800ce34 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f004 fb29 	bl	8009bd0 <USB_ReadInterrupts>
 800557e:	4603      	mov	r3, r0
 8005580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005588:	f040 80b7 	bne.w	80056fa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2110      	movs	r1, #16
 80055a6:	4618      	mov	r0, r3
 80055a8:	f003 fbf6 	bl	8008d98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b0:	e046      	b.n	8005640 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055be:	461a      	mov	r2, r3
 80055c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f2:	461a      	mov	r2, r3
 80055f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005614:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005618:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800561a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005634:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005638:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563c:	3301      	adds	r3, #1
 800563e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	791b      	ldrb	r3, [r3, #4]
 8005644:	461a      	mov	r2, r3
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	4293      	cmp	r3, r2
 800564a:	d3b2      	bcc.n	80055b2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800565a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800565e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7bdb      	ldrb	r3, [r3, #15]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d016      	beq.n	8005696 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800566e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005678:	f043 030b 	orr.w	r3, r3, #11
 800567c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800568e:	f043 030b 	orr.w	r3, r3, #11
 8005692:	6453      	str	r3, [r2, #68]	@ 0x44
 8005694:	e015      	b.n	80056c2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80056a8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80056ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056bc:	f043 030b 	orr.w	r3, r3, #11
 80056c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056d0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80056d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056e4:	461a      	mov	r2, r3
 80056e6:	f004 fb37 	bl	8009d58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80056f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f004 fa66 	bl	8009bd0 <USB_ReadInterrupts>
 8005704:	4603      	mov	r3, r0
 8005706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570e:	d123      	bne.n	8005758 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f004 fafc 	bl	8009d12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f003 fbb3 	bl	8008e8a <USB_GetDevSpeed>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681c      	ldr	r4, [r3, #0]
 8005730:	f000 feb0 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 8005734:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800573a:	461a      	mov	r2, r3
 800573c:	4620      	mov	r0, r4
 800573e:	f003 f8bd 	bl	80088bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f007 fb4d 	bl	800cde2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005756:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f004 fa37 	bl	8009bd0 <USB_ReadInterrupts>
 8005762:	4603      	mov	r3, r0
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b08      	cmp	r3, #8
 800576a:	d10a      	bne.n	8005782 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f007 fb2a 	bl	800cdc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f002 0208 	and.w	r2, r2, #8
 8005780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f004 fa22 	bl	8009bd0 <USB_ReadInterrupts>
 800578c:	4603      	mov	r3, r0
 800578e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005792:	2b80      	cmp	r3, #128	@ 0x80
 8005794:	d123      	bne.n	80057de <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057a2:	2301      	movs	r3, #1
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a6:	e014      	b.n	80057d2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d105      	bne.n	80057cc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fb0a 	bl	8005de0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	3301      	adds	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	791b      	ldrb	r3, [r3, #4]
 80057d6:	461a      	mov	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	4293      	cmp	r3, r2
 80057dc:	d3e4      	bcc.n	80057a8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f004 f9f4 	bl	8009bd0 <USB_ReadInterrupts>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f2:	d13c      	bne.n	800586e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f4:	2301      	movs	r3, #1
 80057f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f8:	e02b      	b.n	8005852 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3318      	adds	r3, #24
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d115      	bne.n	800584c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005820:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005822:	2b00      	cmp	r3, #0
 8005824:	da12      	bge.n	800584c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582a:	4613      	mov	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	3317      	adds	r3, #23
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005842:	b2db      	uxtb	r3, r3
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 faca 	bl	8005de0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	3301      	adds	r3, #1
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	791b      	ldrb	r3, [r3, #4]
 8005856:	461a      	mov	r2, r3
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	4293      	cmp	r3, r2
 800585c:	d3cd      	bcc.n	80057fa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800586c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f004 f9ac 	bl	8009bd0 <USB_ReadInterrupts>
 8005878:	4603      	mov	r3, r0
 800587a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800587e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005882:	d156      	bne.n	8005932 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005884:	2301      	movs	r3, #1
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
 8005888:	e045      	b.n	8005916 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589e:	4613      	mov	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d12e      	bne.n	8005910 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	da2b      	bge.n	8005910 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80058c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d121      	bne.n	8005910 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d0:	4613      	mov	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	4413      	add	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005908:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800590c:	6053      	str	r3, [r2, #4]
            break;
 800590e:	e008      	b.n	8005922 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	3301      	adds	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	791b      	ldrb	r3, [r3, #4]
 800591a:	461a      	mov	r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	4293      	cmp	r3, r2
 8005920:	d3b3      	bcc.n	800588a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f004 f94a 	bl	8009bd0 <USB_ReadInterrupts>
 800593c:	4603      	mov	r3, r0
 800593e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005946:	d10a      	bne.n	800595e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f007 facb 	bl	800cee4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695a      	ldr	r2, [r3, #20]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800595c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f004 f934 	bl	8009bd0 <USB_ReadInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b04      	cmp	r3, #4
 8005970:	d115      	bne.n	800599e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f007 fabb 	bl	800cf00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6859      	ldr	r1, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	e000      	b.n	800599e <HAL_PCD_IRQHandler+0x996>
      return;
 800599c:	bf00      	nop
    }
  }
}
 800599e:	3734      	adds	r7, #52	@ 0x34
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd90      	pop	{r4, r7, pc}

080059a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_PCD_SetAddress+0x1a>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e012      	b.n	80059e4 <HAL_PCD_SetAddress+0x40>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	78fa      	ldrb	r2, [r7, #3]
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f004 f893 	bl	8009b00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	70fb      	strb	r3, [r7, #3]
 80059fe:	460b      	mov	r3, r1
 8005a00:	803b      	strh	r3, [r7, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da0f      	bge.n	8005a32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	3310      	adds	r3, #16
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	3304      	adds	r3, #4
 8005a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	705a      	strb	r2, [r3, #1]
 8005a30:	e00f      	b.n	8005a52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	f003 020f 	and.w	r2, r3, #15
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4413      	add	r3, r2
 8005a48:	3304      	adds	r3, #4
 8005a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005a5e:	883b      	ldrh	r3, [r7, #0]
 8005a60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	78ba      	ldrb	r2, [r7, #2]
 8005a6c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d004      	beq.n	8005a80 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a80:	78bb      	ldrb	r3, [r7, #2]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d102      	bne.n	8005a8c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_PCD_EP_Open+0xae>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e00e      	b.n	8005ab8 <HAL_PCD_EP_Open+0xcc>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68f9      	ldr	r1, [r7, #12]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f003 fa13 	bl	8008ed4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da0f      	bge.n	8005af4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 020f 	and.w	r2, r3, #15
 8005ada:	4613      	mov	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	3310      	adds	r3, #16
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3304      	adds	r3, #4
 8005aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	705a      	strb	r2, [r3, #1]
 8005af2:	e00f      	b.n	8005b14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	f003 020f 	and.w	r2, r3, #15
 8005afa:	4613      	mov	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4413      	add	r3, r2
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_PCD_EP_Close+0x6e>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e00e      	b.n	8005b4c <HAL_PCD_EP_Close+0x8c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f003 fa51 	bl	8008fe4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	460b      	mov	r3, r1
 8005b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	f003 020f 	and.w	r2, r3, #15
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2200      	movs	r2, #0
 8005b94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	799b      	ldrb	r3, [r3, #6]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d102      	bne.n	8005bb0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	799b      	ldrb	r3, [r3, #6]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6979      	ldr	r1, [r7, #20]
 8005bbc:	f003 faee 	bl	800919c <USB_EPStartXfer>

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005bec:	681b      	ldr	r3, [r3, #0]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
 8005c06:	460b      	mov	r3, r1
 8005c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	f003 020f 	and.w	r2, r3, #15
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	3310      	adds	r3, #16
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3304      	adds	r3, #4
 8005c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2201      	movs	r2, #1
 8005c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	799b      	ldrb	r3, [r3, #6]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d102      	bne.n	8005c54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	799b      	ldrb	r3, [r3, #6]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	f003 fa9c 	bl	800919c <USB_EPStartXfer>

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	7912      	ldrb	r2, [r2, #4]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e04f      	b.n	8005d2c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	da0f      	bge.n	8005cb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	f003 020f 	and.w	r2, r3, #15
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	3310      	adds	r3, #16
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3304      	adds	r3, #4
 8005caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	705a      	strb	r2, [r3, #1]
 8005cb2:	e00d      	b.n	8005cd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_PCD_EP_SetStall+0x82>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e01d      	b.n	8005d2c <HAL_PCD_EP_SetStall+0xbe>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f003 fe2a 	bl	8009958 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7999      	ldrb	r1, [r3, #6]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f004 f81b 	bl	8009d58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	7912      	ldrb	r2, [r2, #4]
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e042      	b.n	8005dd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da0f      	bge.n	8005d7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	f003 020f 	and.w	r2, r3, #15
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	3310      	adds	r3, #16
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3304      	adds	r3, #4
 8005d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	705a      	strb	r2, [r3, #1]
 8005d78:	e00f      	b.n	8005d9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	f003 020f 	and.w	r2, r3, #15
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	3304      	adds	r3, #4
 8005d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_PCD_EP_ClrStall+0x86>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e00e      	b.n	8005dd8 <HAL_PCD_EP_ClrStall+0xa4>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68f9      	ldr	r1, [r7, #12]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f003 fe33 	bl	8009a34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	da0c      	bge.n	8005e0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	f003 020f 	and.w	r2, r3, #15
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	3310      	adds	r3, #16
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	3304      	adds	r3, #4
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e00c      	b.n	8005e28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	4413      	add	r3, r2
 8005e24:	3304      	adds	r3, #4
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68f9      	ldr	r1, [r7, #12]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f003 fc52 	bl	80096d8 <USB_EPStopXfer>
 8005e34:	4603      	mov	r3, r0
 8005e36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e38:	7afb      	ldrb	r3, [r7, #11]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b08a      	sub	sp, #40	@ 0x28
 8005e46:	af02      	add	r7, sp, #8
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	3310      	adds	r3, #16
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	3304      	adds	r3, #4
 8005e68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d901      	bls.n	8005e7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e06b      	b.n	8005f52 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d902      	bls.n	8005e96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3303      	adds	r3, #3
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e9e:	e02a      	b.n	8005ef6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d902      	bls.n	8005ebc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	3303      	adds	r3, #3
 8005ec0:	089b      	lsrs	r3, r3, #2
 8005ec2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68d9      	ldr	r1, [r3, #12]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	6978      	ldr	r0, [r7, #20]
 8005eda:	f003 fca7 	bl	800982c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	441a      	add	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d809      	bhi.n	8005f20 <PCD_WriteEmptyTxFifo+0xde>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	695a      	ldr	r2, [r3, #20]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d203      	bcs.n	8005f20 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1bf      	bne.n	8005ea0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d811      	bhi.n	8005f50 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	2201      	movs	r2, #1
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	43db      	mvns	r3, r3
 8005f46:	6939      	ldr	r1, [r7, #16]
 8005f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	333c      	adds	r3, #60	@ 0x3c
 8005f74:	3304      	adds	r3, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	799b      	ldrb	r3, [r3, #6]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d17b      	bne.n	800608a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d015      	beq.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4a61      	ldr	r2, [pc, #388]	@ (8006124 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	f240 80b9 	bls.w	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80b3 	beq.w	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fc4:	6093      	str	r3, [r2, #8]
 8005fc6:	e0a7      	b.n	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	6093      	str	r3, [r2, #8]
 8005fe4:	e098      	b.n	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 8093 	bne.w	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8006124 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d90f      	bls.n	800601a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006010:	461a      	mov	r2, r3
 8006012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006016:	6093      	str	r3, [r2, #8]
 8006018:	e07e      	b.n	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	3304      	adds	r3, #4
 800602e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	0159      	lsls	r1, r3, #5
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	440b      	add	r3, r1
 800603c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006046:	1ad2      	subs	r2, r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d114      	bne.n	800607c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006064:	461a      	mov	r2, r3
 8006066:	2101      	movs	r1, #1
 8006068:	f003 fe76 	bl	8009d58 <USB_EP0_OutStart>
 800606c:	e006      	b.n	800607c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	441a      	add	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f006 fe6a 	bl	800cd5c <HAL_PCD_DataOutStageCallback>
 8006088:	e046      	b.n	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4a26      	ldr	r2, [pc, #152]	@ (8006128 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d124      	bne.n	80060dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a8:	461a      	mov	r2, r3
 80060aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ae:	6093      	str	r3, [r2, #8]
 80060b0:	e032      	b.n	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c8:	461a      	mov	r2, r3
 80060ca:	2320      	movs	r3, #32
 80060cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f006 fe41 	bl	800cd5c <HAL_PCD_DataOutStageCallback>
 80060da:	e01d      	b.n	8006118 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d114      	bne.n	800610c <PCD_EP_OutXfrComplete_int+0x1b0>
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d108      	bne.n	800610c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006104:	461a      	mov	r2, r3
 8006106:	2100      	movs	r1, #0
 8006108:	f003 fe26 	bl	8009d58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f006 fe22 	bl	800cd5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	4f54300a 	.word	0x4f54300a
 8006128:	4f54310a 	.word	0x4f54310a

0800612c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	333c      	adds	r3, #60	@ 0x3c
 8006144:	3304      	adds	r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a15      	ldr	r2, [pc, #84]	@ (80061b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d90e      	bls.n	8006180 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006178:	461a      	mov	r2, r3
 800617a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800617e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f006 fdd9 	bl	800cd38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4a0a      	ldr	r2, [pc, #40]	@ (80061b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d90c      	bls.n	80061a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	799b      	ldrb	r3, [r3, #6]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d108      	bne.n	80061a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061a0:	461a      	mov	r2, r3
 80061a2:	2101      	movs	r1, #1
 80061a4:	f003 fdd8 	bl	8009d58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	4f54300a 	.word	0x4f54300a

080061b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
 80061c4:	4613      	mov	r3, r2
 80061c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d107      	bne.n	80061e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061d6:	883b      	ldrh	r3, [r7, #0]
 80061d8:	0419      	lsls	r1, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80061e4:	e028      	b.n	8006238 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4413      	add	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]
 80061f8:	e00d      	b.n	8006216 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	3340      	adds	r3, #64	@ 0x40
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4413      	add	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	3301      	adds	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
 8006216:	7bfa      	ldrb	r2, [r7, #15]
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	3b01      	subs	r3, #1
 800621c:	429a      	cmp	r2, r3
 800621e:	d3ec      	bcc.n	80061fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006220:	883b      	ldrh	r3, [r7, #0]
 8006222:	0418      	lsls	r0, r3, #16
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6819      	ldr	r1, [r3, #0]
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	3b01      	subs	r3, #1
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	4302      	orrs	r2, r0
 8006230:	3340      	adds	r3, #64	@ 0x40
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	887a      	ldrh	r2, [r7, #2]
 8006258:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800629a:	f043 0303 	orr.w	r3, r3, #3
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0cc      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062dc:	4b68      	ldr	r3, [pc, #416]	@ (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d90c      	bls.n	8006304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ea:	4b65      	ldr	r3, [pc, #404]	@ (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f2:	4b63      	ldr	r3, [pc, #396]	@ (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0b8      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d020      	beq.n	8006352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800631c:	4b59      	ldr	r3, [pc, #356]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	4a58      	ldr	r2, [pc, #352]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006326:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006334:	4b53      	ldr	r3, [pc, #332]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a52      	ldr	r2, [pc, #328]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800633e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006340:	4b50      	ldr	r3, [pc, #320]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	494d      	ldr	r1, [pc, #308]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	4313      	orrs	r3, r2
 8006350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d044      	beq.n	80063e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d107      	bne.n	8006376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006366:	4b47      	ldr	r3, [pc, #284]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d119      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e07f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d003      	beq.n	8006386 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006382:	2b03      	cmp	r3, #3
 8006384:	d107      	bne.n	8006396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006386:	4b3f      	ldr	r3, [pc, #252]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e06f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006396:	4b3b      	ldr	r3, [pc, #236]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e067      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063a6:	4b37      	ldr	r3, [pc, #220]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 0203 	bic.w	r2, r3, #3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4934      	ldr	r1, [pc, #208]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b8:	f7fc fbba 	bl	8002b30 <HAL_GetTick>
 80063bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063be:	e00a      	b.n	80063d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c0:	f7fc fbb6 	bl	8002b30 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e04f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 020c 	and.w	r2, r3, #12
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d1eb      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063e8:	4b25      	ldr	r3, [pc, #148]	@ (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d20c      	bcs.n	8006410 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f6:	4b22      	ldr	r3, [pc, #136]	@ (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b20      	ldr	r3, [pc, #128]	@ (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e032      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800641c:	4b19      	ldr	r3, [pc, #100]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4916      	ldr	r1, [pc, #88]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800643a:	4b12      	ldr	r3, [pc, #72]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	490e      	ldr	r1, [pc, #56]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800644e:	f000 fb9d 	bl	8006b8c <HAL_RCC_GetSysClockFreq>
 8006452:	4602      	mov	r2, r0
 8006454:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	490a      	ldr	r1, [pc, #40]	@ (8006488 <HAL_RCC_ClockConfig+0x1c0>)
 8006460:	5ccb      	ldrb	r3, [r1, r3]
 8006462:	fa22 f303 	lsr.w	r3, r2, r3
 8006466:	4a09      	ldr	r2, [pc, #36]	@ (800648c <HAL_RCC_ClockConfig+0x1c4>)
 8006468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800646a:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <HAL_RCC_ClockConfig+0x1c8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7fb febe 	bl	80021f0 <HAL_InitTick>

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40023c00 	.word	0x40023c00
 8006484:	40023800 	.word	0x40023800
 8006488:	0801062c 	.word	0x0801062c
 800648c:	20000008 	.word	0x20000008
 8006490:	2000000c 	.word	0x2000000c

08006494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006498:	4b03      	ldr	r3, [pc, #12]	@ (80064a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800649a:	681b      	ldr	r3, [r3, #0]
}
 800649c:	4618      	mov	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000008 	.word	0x20000008

080064ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064b0:	f7ff fff0 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 80064b4:	4602      	mov	r2, r0
 80064b6:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	0a9b      	lsrs	r3, r3, #10
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4903      	ldr	r1, [pc, #12]	@ (80064d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064c2:	5ccb      	ldrb	r3, [r1, r3]
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40023800 	.word	0x40023800
 80064d0:	0801063c 	.word	0x0801063c

080064d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	220f      	movs	r2, #15
 80064e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064e4:	4b12      	ldr	r3, [pc, #72]	@ (8006530 <HAL_RCC_GetClockConfig+0x5c>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 0203 	and.w	r2, r3, #3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <HAL_RCC_GetClockConfig+0x5c>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <HAL_RCC_GetClockConfig+0x5c>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006508:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <HAL_RCC_GetClockConfig+0x5c>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	08db      	lsrs	r3, r3, #3
 800650e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006516:	4b07      	ldr	r3, [pc, #28]	@ (8006534 <HAL_RCC_GetClockConfig+0x60>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 020f 	and.w	r2, r3, #15
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	601a      	str	r2, [r3, #0]
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40023800 	.word	0x40023800
 8006534:	40023c00 	.word	0x40023c00

08006538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	@ 0x30
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d010      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006570:	4b6f      	ldr	r3, [pc, #444]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006576:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	496c      	ldr	r1, [pc, #432]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800658e:	2301      	movs	r3, #1
 8006590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d010      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800659e:	4b64      	ldr	r3, [pc, #400]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ac:	4960      	ldr	r1, [pc, #384]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80065bc:	2301      	movs	r3, #1
 80065be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065cc:	4b58      	ldr	r3, [pc, #352]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065da:	4955      	ldr	r1, [pc, #340]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ea:	d101      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80065ec:	2301      	movs	r3, #1
 80065ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80065f8:	2301      	movs	r3, #1
 80065fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d017      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006608:	4b49      	ldr	r3, [pc, #292]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800660a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800660e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006616:	4946      	ldr	r1, [pc, #280]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006626:	d101      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006628:	2301      	movs	r3, #1
 800662a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006634:	2301      	movs	r3, #1
 8006636:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 808a 	beq.w	800675a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	4b39      	ldr	r3, [pc, #228]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	4a38      	ldr	r2, [pc, #224]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006654:	6413      	str	r3, [r2, #64]	@ 0x40
 8006656:	4b36      	ldr	r3, [pc, #216]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006662:	4b34      	ldr	r3, [pc, #208]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a33      	ldr	r2, [pc, #204]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800666c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800666e:	f7fc fa5f 	bl	8002b30 <HAL_GetTick>
 8006672:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006674:	e008      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006676:	f7fc fa5b 	bl	8002b30 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e278      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006688:	4b2a      	ldr	r3, [pc, #168]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006694:	4b26      	ldr	r3, [pc, #152]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800669c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d02f      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d028      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80066c8:	4a19      	ldr	r2, [pc, #100]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066ce:	4b18      	ldr	r3, [pc, #96]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d114      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80066da:	f7fc fa29 	bl	8002b30 <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f7fc fa25 	bl	8002b30 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e240      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0ee      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006710:	d114      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006712:	4b07      	ldr	r3, [pc, #28]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006726:	4902      	ldr	r1, [pc, #8]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006728:	4313      	orrs	r3, r2
 800672a:	608b      	str	r3, [r1, #8]
 800672c:	e00c      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800672e:	bf00      	nop
 8006730:	40023800 	.word	0x40023800
 8006734:	40007000 	.word	0x40007000
 8006738:	42470e40 	.word	0x42470e40
 800673c:	4b4a      	ldr	r3, [pc, #296]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4a49      	ldr	r2, [pc, #292]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006742:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006746:	6093      	str	r3, [r2, #8]
 8006748:	4b47      	ldr	r3, [pc, #284]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800674a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006754:	4944      	ldr	r1, [pc, #272]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006756:	4313      	orrs	r3, r2
 8006758:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	d004      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800676c:	4b3f      	ldr	r3, [pc, #252]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800676e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800677c:	4b3a      	ldr	r3, [pc, #232]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800677e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006782:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800678a:	4937      	ldr	r1, [pc, #220]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800679e:	4b32      	ldr	r3, [pc, #200]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ac:	492e      	ldr	r1, [pc, #184]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d011      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067c0:	4b29      	ldr	r3, [pc, #164]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	4926      	ldr	r1, [pc, #152]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067de:	d101      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80067e0:	2301      	movs	r3, #1
 80067e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80067f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	491a      	ldr	r1, [pc, #104]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800680e:	2b00      	cmp	r3, #0
 8006810:	d011      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006812:	4b15      	ldr	r3, [pc, #84]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006818:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006820:	4911      	ldr	r1, [pc, #68]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006830:	d101      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006832:	2301      	movs	r3, #1
 8006834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d005      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006844:	f040 80ff 	bne.w	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006848:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800684e:	f7fc f96f 	bl	8002b30 <HAL_GetTick>
 8006852:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006854:	e00e      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006856:	f7fc f96b 	bl	8002b30 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d907      	bls.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e188      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006868:	40023800 	.word	0x40023800
 800686c:	424711e0 	.word	0x424711e0
 8006870:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006874:	4b7e      	ldr	r3, [pc, #504]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1ea      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800689c:	2b00      	cmp	r3, #0
 800689e:	d028      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d124      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80068a8:	4b71      	ldr	r3, [pc, #452]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ae:	0c1b      	lsrs	r3, r3, #16
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	3301      	adds	r3, #1
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c0:	0e1b      	lsrs	r3, r3, #24
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	019b      	lsls	r3, r3, #6
 80068d2:	431a      	orrs	r2, r3
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	3b01      	subs	r3, #1
 80068da:	041b      	lsls	r3, r3, #16
 80068dc:	431a      	orrs	r2, r3
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	061b      	lsls	r3, r3, #24
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	071b      	lsls	r3, r3, #28
 80068ea:	4961      	ldr	r1, [pc, #388]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006906:	d00a      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006910:	2b00      	cmp	r3, #0
 8006912:	d035      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800691c:	d130      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800691e:	4b54      	ldr	r3, [pc, #336]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	3301      	adds	r3, #1
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006930:	4b4f      	ldr	r3, [pc, #316]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006936:	0f1b      	lsrs	r3, r3, #28
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	019b      	lsls	r3, r3, #6
 8006948:	431a      	orrs	r2, r3
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	3b01      	subs	r3, #1
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	061b      	lsls	r3, r3, #24
 800695a:	431a      	orrs	r2, r3
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	071b      	lsls	r3, r3, #28
 8006960:	4943      	ldr	r1, [pc, #268]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006968:	4b41      	ldr	r3, [pc, #260]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800696a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800696e:	f023 021f 	bic.w	r2, r3, #31
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006976:	3b01      	subs	r3, #1
 8006978:	493d      	ldr	r1, [pc, #244]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006988:	2b00      	cmp	r3, #0
 800698a:	d029      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006994:	d124      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006996:	4b36      	ldr	r3, [pc, #216]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	3301      	adds	r3, #1
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069a8:	4b31      	ldr	r3, [pc, #196]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ae:	0f1b      	lsrs	r3, r3, #28
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	019b      	lsls	r3, r3, #6
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	3b01      	subs	r3, #1
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	431a      	orrs	r2, r3
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	071b      	lsls	r3, r3, #28
 80069d8:	4925      	ldr	r1, [pc, #148]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d016      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	019b      	lsls	r3, r3, #6
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	3b01      	subs	r3, #1
 8006a00:	041b      	lsls	r3, r3, #16
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	061b      	lsls	r3, r3, #24
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	071b      	lsls	r3, r3, #28
 8006a12:	4917      	ldr	r1, [pc, #92]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a1a:	4b16      	ldr	r3, [pc, #88]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a20:	f7fc f886 	bl	8002b30 <HAL_GetTick>
 8006a24:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a28:	f7fc f882 	bl	8002b30 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e09f      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f0      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8006a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	f040 8095 	bne.w	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a54:	f7fc f86c 	bl	8002b30 <HAL_GetTick>
 8006a58:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a5a:	e00f      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a5c:	f7fc f868 	bl	8002b30 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d908      	bls.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e085      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a6e:	bf00      	nop
 8006a70:	40023800 	.word	0x40023800
 8006a74:	42470068 	.word	0x42470068
 8006a78:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a7c:	4b41      	ldr	r3, [pc, #260]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a88:	d0e8      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d02b      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d127      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006ab2:	4b34      	ldr	r3, [pc, #208]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	3301      	adds	r3, #1
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	019b      	lsls	r3, r3, #6
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	4928      	ldr	r1, [pc, #160]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ae8:	4b26      	ldr	r3, [pc, #152]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	3b01      	subs	r3, #1
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	4922      	ldr	r1, [pc, #136]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01d      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b16:	d118      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b18:	4b1a      	ldr	r3, [pc, #104]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	0e1b      	lsrs	r3, r3, #24
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	019b      	lsls	r3, r3, #6
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	4910      	ldr	r1, [pc, #64]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b50:	f7fb ffee 	bl	8002b30 <HAL_GetTick>
 8006b54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b58:	f7fb ffea 	bl	8002b30 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e007      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b6a:	4b06      	ldr	r3, [pc, #24]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b76:	d1ef      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3730      	adds	r7, #48	@ 0x30
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40023800 	.word	0x40023800
 8006b88:	42470070 	.word	0x42470070

08006b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b90:	b0ae      	sub	sp, #184	@ 0xb8
 8006b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bb2:	4bcb      	ldr	r3, [pc, #812]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
 8006bba:	2b0c      	cmp	r3, #12
 8006bbc:	f200 8206 	bhi.w	8006fcc <HAL_RCC_GetSysClockFreq+0x440>
 8006bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006bfd 	.word	0x08006bfd
 8006bcc:	08006fcd 	.word	0x08006fcd
 8006bd0:	08006fcd 	.word	0x08006fcd
 8006bd4:	08006fcd 	.word	0x08006fcd
 8006bd8:	08006c05 	.word	0x08006c05
 8006bdc:	08006fcd 	.word	0x08006fcd
 8006be0:	08006fcd 	.word	0x08006fcd
 8006be4:	08006fcd 	.word	0x08006fcd
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006fcd 	.word	0x08006fcd
 8006bf0:	08006fcd 	.word	0x08006fcd
 8006bf4:	08006fcd 	.word	0x08006fcd
 8006bf8:	08006dfd 	.word	0x08006dfd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bfc:	4bb9      	ldr	r3, [pc, #740]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c02:	e1e7      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c04:	4bb8      	ldr	r3, [pc, #736]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c0a:	e1e3      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c0c:	4bb4      	ldr	r3, [pc, #720]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c18:	4bb1      	ldr	r3, [pc, #708]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d071      	beq.n	8006d08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c24:	4bae      	ldr	r3, [pc, #696]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	099b      	lsrs	r3, r3, #6
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c30:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	f04f 0000 	mov.w	r0, #0
 8006c52:	f04f 0100 	mov.w	r1, #0
 8006c56:	0159      	lsls	r1, r3, #5
 8006c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c5c:	0150      	lsls	r0, r2, #5
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4621      	mov	r1, r4
 8006c64:	1a51      	subs	r1, r2, r1
 8006c66:	6439      	str	r1, [r7, #64]	@ 0x40
 8006c68:	4629      	mov	r1, r5
 8006c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	018b      	lsls	r3, r1, #6
 8006c80:	4641      	mov	r1, r8
 8006c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c86:	4641      	mov	r1, r8
 8006c88:	018a      	lsls	r2, r1, #6
 8006c8a:	4641      	mov	r1, r8
 8006c8c:	1a51      	subs	r1, r2, r1
 8006c8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c90:	4649      	mov	r1, r9
 8006c92:	eb63 0301 	sbc.w	r3, r3, r1
 8006c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	00cb      	lsls	r3, r1, #3
 8006ca8:	4641      	mov	r1, r8
 8006caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cae:	4641      	mov	r1, r8
 8006cb0:	00ca      	lsls	r2, r1, #3
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4622      	mov	r2, r4
 8006cba:	189b      	adds	r3, r3, r2
 8006cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	460a      	mov	r2, r1
 8006cc2:	eb42 0303 	adc.w	r3, r2, r3
 8006cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	024b      	lsls	r3, r1, #9
 8006cd8:	4621      	mov	r1, r4
 8006cda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006cde:	4621      	mov	r1, r4
 8006ce0:	024a      	lsls	r2, r1, #9
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006cf4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006cf8:	f7f9 ff18 	bl	8000b2c <__aeabi_uldivmod>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4613      	mov	r3, r2
 8006d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d06:	e067      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d08:	4b75      	ldr	r3, [pc, #468]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	099b      	lsrs	r3, r3, #6
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d14:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d22:	2300      	movs	r3, #0
 8006d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	f04f 0000 	mov.w	r0, #0
 8006d32:	f04f 0100 	mov.w	r1, #0
 8006d36:	0159      	lsls	r1, r3, #5
 8006d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d3c:	0150      	lsls	r0, r2, #5
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4621      	mov	r1, r4
 8006d44:	1a51      	subs	r1, r2, r1
 8006d46:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d48:	4629      	mov	r1, r5
 8006d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8006d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	018b      	lsls	r3, r1, #6
 8006d60:	4641      	mov	r1, r8
 8006d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d66:	4641      	mov	r1, r8
 8006d68:	018a      	lsls	r2, r1, #6
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d70:	4649      	mov	r1, r9
 8006d72:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d8a:	4692      	mov	sl, r2
 8006d8c:	469b      	mov	fp, r3
 8006d8e:	4623      	mov	r3, r4
 8006d90:	eb1a 0303 	adds.w	r3, sl, r3
 8006d94:	623b      	str	r3, [r7, #32]
 8006d96:	462b      	mov	r3, r5
 8006d98:	eb4b 0303 	adc.w	r3, fp, r3
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006daa:	4629      	mov	r1, r5
 8006dac:	028b      	lsls	r3, r1, #10
 8006dae:	4621      	mov	r1, r4
 8006db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006db4:	4621      	mov	r1, r4
 8006db6:	028a      	lsls	r2, r1, #10
 8006db8:	4610      	mov	r0, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dc4:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006dca:	f7f9 feaf 	bl	8000b2c <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006dd8:	4b41      	ldr	r3, [pc, #260]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	0c1b      	lsrs	r3, r3, #16
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	3301      	adds	r3, #1
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006dfa:	e0eb      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dfc:	4b38      	ldr	r3, [pc, #224]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e08:	4b35      	ldr	r3, [pc, #212]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d06b      	beq.n	8006eec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e14:	4b32      	ldr	r3, [pc, #200]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	099b      	lsrs	r3, r3, #6
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e26:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e28:	2300      	movs	r3, #0
 8006e2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006e30:	4622      	mov	r2, r4
 8006e32:	462b      	mov	r3, r5
 8006e34:	f04f 0000 	mov.w	r0, #0
 8006e38:	f04f 0100 	mov.w	r1, #0
 8006e3c:	0159      	lsls	r1, r3, #5
 8006e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e42:	0150      	lsls	r0, r2, #5
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4621      	mov	r1, r4
 8006e4a:	1a51      	subs	r1, r2, r1
 8006e4c:	61b9      	str	r1, [r7, #24]
 8006e4e:	4629      	mov	r1, r5
 8006e50:	eb63 0301 	sbc.w	r3, r3, r1
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006e62:	4659      	mov	r1, fp
 8006e64:	018b      	lsls	r3, r1, #6
 8006e66:	4651      	mov	r1, sl
 8006e68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e6c:	4651      	mov	r1, sl
 8006e6e:	018a      	lsls	r2, r1, #6
 8006e70:	4651      	mov	r1, sl
 8006e72:	ebb2 0801 	subs.w	r8, r2, r1
 8006e76:	4659      	mov	r1, fp
 8006e78:	eb63 0901 	sbc.w	r9, r3, r1
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e90:	4690      	mov	r8, r2
 8006e92:	4699      	mov	r9, r3
 8006e94:	4623      	mov	r3, r4
 8006e96:	eb18 0303 	adds.w	r3, r8, r3
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	eb49 0303 	adc.w	r3, r9, r3
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	024b      	lsls	r3, r1, #9
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006eba:	4621      	mov	r1, r4
 8006ebc:	024a      	lsls	r2, r1, #9
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006ecc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ed0:	f7f9 fe2c 	bl	8000b2c <__aeabi_uldivmod>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4613      	mov	r3, r2
 8006eda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ede:	e065      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x420>
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	00f42400 	.word	0x00f42400
 8006ee8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eec:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	099b      	lsrs	r3, r3, #6
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006efe:	2300      	movs	r3, #0
 8006f00:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006f06:	4642      	mov	r2, r8
 8006f08:	464b      	mov	r3, r9
 8006f0a:	f04f 0000 	mov.w	r0, #0
 8006f0e:	f04f 0100 	mov.w	r1, #0
 8006f12:	0159      	lsls	r1, r3, #5
 8006f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f18:	0150      	lsls	r0, r2, #5
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4641      	mov	r1, r8
 8006f20:	1a51      	subs	r1, r2, r1
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	4649      	mov	r1, r9
 8006f26:	eb63 0301 	sbc.w	r3, r3, r1
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006f38:	4659      	mov	r1, fp
 8006f3a:	018b      	lsls	r3, r1, #6
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f42:	4651      	mov	r1, sl
 8006f44:	018a      	lsls	r2, r1, #6
 8006f46:	4651      	mov	r1, sl
 8006f48:	1a54      	subs	r4, r2, r1
 8006f4a:	4659      	mov	r1, fp
 8006f4c:	eb63 0501 	sbc.w	r5, r3, r1
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	00eb      	lsls	r3, r5, #3
 8006f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f5e:	00e2      	lsls	r2, r4, #3
 8006f60:	4614      	mov	r4, r2
 8006f62:	461d      	mov	r5, r3
 8006f64:	4643      	mov	r3, r8
 8006f66:	18e3      	adds	r3, r4, r3
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	eb45 0303 	adc.w	r3, r5, r3
 8006f70:	607b      	str	r3, [r7, #4]
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f7e:	4629      	mov	r1, r5
 8006f80:	028b      	lsls	r3, r1, #10
 8006f82:	4621      	mov	r1, r4
 8006f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f88:	4621      	mov	r1, r4
 8006f8a:	028a      	lsls	r2, r1, #10
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f94:	2200      	movs	r2, #0
 8006f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f98:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f9e:	f7f9 fdc5 	bl	8000b2c <__aeabi_uldivmod>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006fac:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	0f1b      	lsrs	r3, r3, #28
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006fca:	e003      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fcc:	4b06      	ldr	r3, [pc, #24]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006fd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	37b8      	adds	r7, #184	@ 0xb8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	00f42400 	.word	0x00f42400

08006fec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e28d      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 8083 	beq.w	8007112 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800700c:	4b94      	ldr	r3, [pc, #592]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 030c 	and.w	r3, r3, #12
 8007014:	2b04      	cmp	r3, #4
 8007016:	d019      	beq.n	800704c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007018:	4b91      	ldr	r3, [pc, #580]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 030c 	and.w	r3, r3, #12
        || \
 8007020:	2b08      	cmp	r3, #8
 8007022:	d106      	bne.n	8007032 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007024:	4b8e      	ldr	r3, [pc, #568]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800702c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007030:	d00c      	beq.n	800704c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007032:	4b8b      	ldr	r3, [pc, #556]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800703a:	2b0c      	cmp	r3, #12
 800703c:	d112      	bne.n	8007064 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800703e:	4b88      	ldr	r3, [pc, #544]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800704a:	d10b      	bne.n	8007064 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800704c:	4b84      	ldr	r3, [pc, #528]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d05b      	beq.n	8007110 <HAL_RCC_OscConfig+0x124>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d157      	bne.n	8007110 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e25a      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706c:	d106      	bne.n	800707c <HAL_RCC_OscConfig+0x90>
 800706e:	4b7c      	ldr	r3, [pc, #496]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a7b      	ldr	r2, [pc, #492]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e01d      	b.n	80070b8 <HAL_RCC_OscConfig+0xcc>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007084:	d10c      	bne.n	80070a0 <HAL_RCC_OscConfig+0xb4>
 8007086:	4b76      	ldr	r3, [pc, #472]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a75      	ldr	r2, [pc, #468]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 800708c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	4b73      	ldr	r3, [pc, #460]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a72      	ldr	r2, [pc, #456]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	e00b      	b.n	80070b8 <HAL_RCC_OscConfig+0xcc>
 80070a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80070a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	4b6c      	ldr	r3, [pc, #432]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a6b      	ldr	r2, [pc, #428]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80070b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d013      	beq.n	80070e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fb fd36 	bl	8002b30 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c8:	f7fb fd32 	bl	8002b30 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b64      	cmp	r3, #100	@ 0x64
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e21f      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070da:	4b61      	ldr	r3, [pc, #388]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0f0      	beq.n	80070c8 <HAL_RCC_OscConfig+0xdc>
 80070e6:	e014      	b.n	8007112 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fb fd22 	bl	8002b30 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f0:	f7fb fd1e 	bl	8002b30 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b64      	cmp	r3, #100	@ 0x64
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e20b      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007102:	4b57      	ldr	r3, [pc, #348]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f0      	bne.n	80070f0 <HAL_RCC_OscConfig+0x104>
 800710e:	e000      	b.n	8007112 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d06f      	beq.n	80071fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800711e:	4b50      	ldr	r3, [pc, #320]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 030c 	and.w	r3, r3, #12
 8007126:	2b00      	cmp	r3, #0
 8007128:	d017      	beq.n	800715a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800712a:	4b4d      	ldr	r3, [pc, #308]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007132:	2b08      	cmp	r3, #8
 8007134:	d105      	bne.n	8007142 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007136:	4b4a      	ldr	r3, [pc, #296]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007142:	4b47      	ldr	r3, [pc, #284]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800714a:	2b0c      	cmp	r3, #12
 800714c:	d11c      	bne.n	8007188 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800714e:	4b44      	ldr	r3, [pc, #272]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d116      	bne.n	8007188 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800715a:	4b41      	ldr	r3, [pc, #260]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_RCC_OscConfig+0x186>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d001      	beq.n	8007172 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e1d3      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007172:	4b3b      	ldr	r3, [pc, #236]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	4937      	ldr	r1, [pc, #220]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007182:	4313      	orrs	r3, r2
 8007184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007186:	e03a      	b.n	80071fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d020      	beq.n	80071d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007190:	4b34      	ldr	r3, [pc, #208]	@ (8007264 <HAL_RCC_OscConfig+0x278>)
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007196:	f7fb fccb 	bl	8002b30 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800719e:	f7fb fcc7 	bl	8002b30 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e1b4      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071bc:	4b28      	ldr	r3, [pc, #160]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	4925      	ldr	r1, [pc, #148]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	600b      	str	r3, [r1, #0]
 80071d0:	e015      	b.n	80071fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071d2:	4b24      	ldr	r3, [pc, #144]	@ (8007264 <HAL_RCC_OscConfig+0x278>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fb fcaa 	bl	8002b30 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e0:	f7fb fca6 	bl	8002b30 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e193      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f0      	bne.n	80071e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d036      	beq.n	8007278 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d016      	beq.n	8007240 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007212:	4b15      	ldr	r3, [pc, #84]	@ (8007268 <HAL_RCC_OscConfig+0x27c>)
 8007214:	2201      	movs	r2, #1
 8007216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007218:	f7fb fc8a 	bl	8002b30 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007220:	f7fb fc86 	bl	8002b30 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e173      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007232:	4b0b      	ldr	r3, [pc, #44]	@ (8007260 <HAL_RCC_OscConfig+0x274>)
 8007234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <HAL_RCC_OscConfig+0x234>
 800723e:	e01b      	b.n	8007278 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007240:	4b09      	ldr	r3, [pc, #36]	@ (8007268 <HAL_RCC_OscConfig+0x27c>)
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007246:	f7fb fc73 	bl	8002b30 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800724c:	e00e      	b.n	800726c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800724e:	f7fb fc6f 	bl	8002b30 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d907      	bls.n	800726c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e15c      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
 8007260:	40023800 	.word	0x40023800
 8007264:	42470000 	.word	0x42470000
 8007268:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800726c:	4b8a      	ldr	r3, [pc, #552]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 800726e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1ea      	bne.n	800724e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8097 	beq.w	80073b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800728a:	4b83      	ldr	r3, [pc, #524]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10f      	bne.n	80072b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007296:	2300      	movs	r3, #0
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	4b7f      	ldr	r3, [pc, #508]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	4a7e      	ldr	r2, [pc, #504]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 80072a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80072a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ae:	60bb      	str	r3, [r7, #8]
 80072b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b6:	4b79      	ldr	r3, [pc, #484]	@ (800749c <HAL_RCC_OscConfig+0x4b0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d118      	bne.n	80072f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072c2:	4b76      	ldr	r3, [pc, #472]	@ (800749c <HAL_RCC_OscConfig+0x4b0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a75      	ldr	r2, [pc, #468]	@ (800749c <HAL_RCC_OscConfig+0x4b0>)
 80072c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ce:	f7fb fc2f 	bl	8002b30 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d6:	f7fb fc2b 	bl	8002b30 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e118      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e8:	4b6c      	ldr	r3, [pc, #432]	@ (800749c <HAL_RCC_OscConfig+0x4b0>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d106      	bne.n	800730a <HAL_RCC_OscConfig+0x31e>
 80072fc:	4b66      	ldr	r3, [pc, #408]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 80072fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007300:	4a65      	ldr	r2, [pc, #404]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	6713      	str	r3, [r2, #112]	@ 0x70
 8007308:	e01c      	b.n	8007344 <HAL_RCC_OscConfig+0x358>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2b05      	cmp	r3, #5
 8007310:	d10c      	bne.n	800732c <HAL_RCC_OscConfig+0x340>
 8007312:	4b61      	ldr	r3, [pc, #388]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007316:	4a60      	ldr	r2, [pc, #384]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007318:	f043 0304 	orr.w	r3, r3, #4
 800731c:	6713      	str	r3, [r2, #112]	@ 0x70
 800731e:	4b5e      	ldr	r3, [pc, #376]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007322:	4a5d      	ldr	r2, [pc, #372]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007324:	f043 0301 	orr.w	r3, r3, #1
 8007328:	6713      	str	r3, [r2, #112]	@ 0x70
 800732a:	e00b      	b.n	8007344 <HAL_RCC_OscConfig+0x358>
 800732c:	4b5a      	ldr	r3, [pc, #360]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 800732e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007330:	4a59      	ldr	r2, [pc, #356]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007332:	f023 0301 	bic.w	r3, r3, #1
 8007336:	6713      	str	r3, [r2, #112]	@ 0x70
 8007338:	4b57      	ldr	r3, [pc, #348]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 800733a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800733c:	4a56      	ldr	r2, [pc, #344]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 800733e:	f023 0304 	bic.w	r3, r3, #4
 8007342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d015      	beq.n	8007378 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734c:	f7fb fbf0 	bl	8002b30 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007352:	e00a      	b.n	800736a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007354:	f7fb fbec 	bl	8002b30 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e0d7      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800736a:	4b4b      	ldr	r3, [pc, #300]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0ee      	beq.n	8007354 <HAL_RCC_OscConfig+0x368>
 8007376:	e014      	b.n	80073a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007378:	f7fb fbda 	bl	8002b30 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800737e:	e00a      	b.n	8007396 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007380:	f7fb fbd6 	bl	8002b30 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800738e:	4293      	cmp	r3, r2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e0c1      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007396:	4b40      	ldr	r3, [pc, #256]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1ee      	bne.n	8007380 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d105      	bne.n	80073b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 80073aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ac:	4a3a      	ldr	r2, [pc, #232]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 80073ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80ad 	beq.w	8007518 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073be:	4b36      	ldr	r3, [pc, #216]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d060      	beq.n	800748c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d145      	bne.n	800745e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d2:	4b33      	ldr	r3, [pc, #204]	@ (80074a0 <HAL_RCC_OscConfig+0x4b4>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d8:	f7fb fbaa 	bl	8002b30 <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e0:	f7fb fba6 	bl	8002b30 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e093      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073f2:	4b29      	ldr	r3, [pc, #164]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f0      	bne.n	80073e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69da      	ldr	r2, [r3, #28]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	019b      	lsls	r3, r3, #6
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	3b01      	subs	r3, #1
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	061b      	lsls	r3, r3, #24
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007428:	071b      	lsls	r3, r3, #28
 800742a:	491b      	ldr	r1, [pc, #108]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 800742c:	4313      	orrs	r3, r2
 800742e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007430:	4b1b      	ldr	r3, [pc, #108]	@ (80074a0 <HAL_RCC_OscConfig+0x4b4>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007436:	f7fb fb7b 	bl	8002b30 <HAL_GetTick>
 800743a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800743c:	e008      	b.n	8007450 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800743e:	f7fb fb77 	bl	8002b30 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	d901      	bls.n	8007450 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e064      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007450:	4b11      	ldr	r3, [pc, #68]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0f0      	beq.n	800743e <HAL_RCC_OscConfig+0x452>
 800745c:	e05c      	b.n	8007518 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800745e:	4b10      	ldr	r3, [pc, #64]	@ (80074a0 <HAL_RCC_OscConfig+0x4b4>)
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fb fb64 	bl	8002b30 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800746c:	f7fb fb60 	bl	8002b30 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e04d      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747e:	4b06      	ldr	r3, [pc, #24]	@ (8007498 <HAL_RCC_OscConfig+0x4ac>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x480>
 800748a:	e045      	b.n	8007518 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d107      	bne.n	80074a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e040      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
 8007498:	40023800 	.word	0x40023800
 800749c:	40007000 	.word	0x40007000
 80074a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074a4:	4b1f      	ldr	r3, [pc, #124]	@ (8007524 <HAL_RCC_OscConfig+0x538>)
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d030      	beq.n	8007514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074bc:	429a      	cmp	r2, r3
 80074be:	d129      	bne.n	8007514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d122      	bne.n	8007514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80074d4:	4013      	ands	r3, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074dc:	4293      	cmp	r3, r2
 80074de:	d119      	bne.n	8007514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	3b01      	subs	r3, #1
 80074ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d10f      	bne.n	8007514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007500:	429a      	cmp	r2, r3
 8007502:	d107      	bne.n	8007514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007510:	429a      	cmp	r2, r3
 8007512:	d001      	beq.n	8007518 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40023800 	.word	0x40023800

08007528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e041      	b.n	80075be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f839 	bl	80075c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f000 fde0 	bl	800812c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
	...

080075dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d001      	beq.n	80075f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e046      	b.n	8007682 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a23      	ldr	r2, [pc, #140]	@ (8007690 <HAL_TIM_Base_Start+0xb4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d022      	beq.n	800764c <HAL_TIM_Base_Start+0x70>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760e:	d01d      	beq.n	800764c <HAL_TIM_Base_Start+0x70>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1f      	ldr	r2, [pc, #124]	@ (8007694 <HAL_TIM_Base_Start+0xb8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d018      	beq.n	800764c <HAL_TIM_Base_Start+0x70>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1e      	ldr	r2, [pc, #120]	@ (8007698 <HAL_TIM_Base_Start+0xbc>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d013      	beq.n	800764c <HAL_TIM_Base_Start+0x70>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1c      	ldr	r2, [pc, #112]	@ (800769c <HAL_TIM_Base_Start+0xc0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00e      	beq.n	800764c <HAL_TIM_Base_Start+0x70>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1b      	ldr	r2, [pc, #108]	@ (80076a0 <HAL_TIM_Base_Start+0xc4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d009      	beq.n	800764c <HAL_TIM_Base_Start+0x70>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a19      	ldr	r2, [pc, #100]	@ (80076a4 <HAL_TIM_Base_Start+0xc8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d004      	beq.n	800764c <HAL_TIM_Base_Start+0x70>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a18      	ldr	r2, [pc, #96]	@ (80076a8 <HAL_TIM_Base_Start+0xcc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d111      	bne.n	8007670 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b06      	cmp	r3, #6
 800765c:	d010      	beq.n	8007680 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f042 0201 	orr.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766e:	e007      	b.n	8007680 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40010000 	.word	0x40010000
 8007694:	40000400 	.word	0x40000400
 8007698:	40000800 	.word	0x40000800
 800769c:	40000c00 	.word	0x40000c00
 80076a0:	40010400 	.word	0x40010400
 80076a4:	40014000 	.word	0x40014000
 80076a8:	40001800 	.word	0x40001800

080076ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d001      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e04e      	b.n	8007762 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a23      	ldr	r2, [pc, #140]	@ (8007770 <HAL_TIM_Base_Start_IT+0xc4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d022      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x80>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ee:	d01d      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x80>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007774 <HAL_TIM_Base_Start_IT+0xc8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d018      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x80>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007778 <HAL_TIM_Base_Start_IT+0xcc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x80>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1c      	ldr	r2, [pc, #112]	@ (800777c <HAL_TIM_Base_Start_IT+0xd0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00e      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x80>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1b      	ldr	r2, [pc, #108]	@ (8007780 <HAL_TIM_Base_Start_IT+0xd4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d009      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x80>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a19      	ldr	r2, [pc, #100]	@ (8007784 <HAL_TIM_Base_Start_IT+0xd8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x80>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a18      	ldr	r2, [pc, #96]	@ (8007788 <HAL_TIM_Base_Start_IT+0xdc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d111      	bne.n	8007750 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b06      	cmp	r3, #6
 800773c:	d010      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0201 	orr.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774e:	e007      	b.n	8007760 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	40010000 	.word	0x40010000
 8007774:	40000400 	.word	0x40000400
 8007778:	40000800 	.word	0x40000800
 800777c:	40000c00 	.word	0x40000c00
 8007780:	40010400 	.word	0x40010400
 8007784:	40014000 	.word	0x40014000
 8007788:	40001800 	.word	0x40001800

0800778c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e041      	b.n	8007822 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fb f848 	bl	8002848 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f000 fcae 	bl	800812c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e041      	b.n	80078c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d106      	bne.n	8007856 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7fa ffd7 	bl	8002804 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2202      	movs	r2, #2
 800785a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3304      	adds	r3, #4
 8007866:	4619      	mov	r1, r3
 8007868:	4610      	mov	r0, r2
 800786a:	f000 fc5f 	bl	800812c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <HAL_TIM_PWM_Start+0x24>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	bf14      	ite	ne
 80078e4:	2301      	movne	r3, #1
 80078e6:	2300      	moveq	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	e022      	b.n	8007932 <HAL_TIM_PWM_Start+0x6a>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d109      	bne.n	8007906 <HAL_TIM_PWM_Start+0x3e>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	bf14      	ite	ne
 80078fe:	2301      	movne	r3, #1
 8007900:	2300      	moveq	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	e015      	b.n	8007932 <HAL_TIM_PWM_Start+0x6a>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d109      	bne.n	8007920 <HAL_TIM_PWM_Start+0x58>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	bf14      	ite	ne
 8007918:	2301      	movne	r3, #1
 800791a:	2300      	moveq	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	e008      	b.n	8007932 <HAL_TIM_PWM_Start+0x6a>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	bf14      	ite	ne
 800792c:	2301      	movne	r3, #1
 800792e:	2300      	moveq	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e07c      	b.n	8007a34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <HAL_TIM_PWM_Start+0x82>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007948:	e013      	b.n	8007972 <HAL_TIM_PWM_Start+0xaa>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b04      	cmp	r3, #4
 800794e:	d104      	bne.n	800795a <HAL_TIM_PWM_Start+0x92>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007958:	e00b      	b.n	8007972 <HAL_TIM_PWM_Start+0xaa>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d104      	bne.n	800796a <HAL_TIM_PWM_Start+0xa2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007968:	e003      	b.n	8007972 <HAL_TIM_PWM_Start+0xaa>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2201      	movs	r2, #1
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fe32 	bl	80085e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a2d      	ldr	r2, [pc, #180]	@ (8007a3c <HAL_TIM_PWM_Start+0x174>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <HAL_TIM_PWM_Start+0xcc>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a40 <HAL_TIM_PWM_Start+0x178>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d101      	bne.n	8007998 <HAL_TIM_PWM_Start+0xd0>
 8007994:	2301      	movs	r3, #1
 8007996:	e000      	b.n	800799a <HAL_TIM_PWM_Start+0xd2>
 8007998:	2300      	movs	r3, #0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d007      	beq.n	80079ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a22      	ldr	r2, [pc, #136]	@ (8007a3c <HAL_TIM_PWM_Start+0x174>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d022      	beq.n	80079fe <HAL_TIM_PWM_Start+0x136>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c0:	d01d      	beq.n	80079fe <HAL_TIM_PWM_Start+0x136>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a44 <HAL_TIM_PWM_Start+0x17c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d018      	beq.n	80079fe <HAL_TIM_PWM_Start+0x136>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a48 <HAL_TIM_PWM_Start+0x180>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d013      	beq.n	80079fe <HAL_TIM_PWM_Start+0x136>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1c      	ldr	r2, [pc, #112]	@ (8007a4c <HAL_TIM_PWM_Start+0x184>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00e      	beq.n	80079fe <HAL_TIM_PWM_Start+0x136>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a16      	ldr	r2, [pc, #88]	@ (8007a40 <HAL_TIM_PWM_Start+0x178>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d009      	beq.n	80079fe <HAL_TIM_PWM_Start+0x136>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a18      	ldr	r2, [pc, #96]	@ (8007a50 <HAL_TIM_PWM_Start+0x188>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d004      	beq.n	80079fe <HAL_TIM_PWM_Start+0x136>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a16      	ldr	r2, [pc, #88]	@ (8007a54 <HAL_TIM_PWM_Start+0x18c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d111      	bne.n	8007a22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b06      	cmp	r3, #6
 8007a0e:	d010      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0201 	orr.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a20:	e007      	b.n	8007a32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0201 	orr.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40010400 	.word	0x40010400
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40014000 	.word	0x40014000
 8007a54:	40001800 	.word	0x40001800

08007a58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e097      	b.n	8007b9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7fa fe79 	bl	8002778 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a9c:	f023 0307 	bic.w	r3, r3, #7
 8007aa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f000 fb3d 	bl	800812c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ada:	f023 0303 	bic.w	r3, r3, #3
 8007ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	4313      	orrs	r3, r2
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007af8:	f023 030c 	bic.w	r3, r3, #12
 8007afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	4313      	orrs	r3, r2
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	011a      	lsls	r2, r3, #4
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	031b      	lsls	r3, r3, #12
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007b36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007b3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d110      	bne.n	8007bf6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d102      	bne.n	8007be0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bda:	7b7b      	ldrb	r3, [r7, #13]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d001      	beq.n	8007be4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e069      	b.n	8007cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf4:	e031      	b.n	8007c5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d110      	bne.n	8007c1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d102      	bne.n	8007c08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c02:	7b3b      	ldrb	r3, [r7, #12]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d001      	beq.n	8007c0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e055      	b.n	8007cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c1c:	e01d      	b.n	8007c5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d108      	bne.n	8007c36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d105      	bne.n	8007c36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c2a:	7b7b      	ldrb	r3, [r7, #13]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d102      	bne.n	8007c36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c30:	7b3b      	ldrb	r3, [r7, #12]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d001      	beq.n	8007c3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e03e      	b.n	8007cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_TIM_Encoder_Start+0xc4>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d008      	beq.n	8007c78 <HAL_TIM_Encoder_Start+0xd4>
 8007c66:	e00f      	b.n	8007c88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fcb7 	bl	80085e4 <TIM_CCxChannelCmd>
      break;
 8007c76:	e016      	b.n	8007ca6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	2104      	movs	r1, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fcaf 	bl	80085e4 <TIM_CCxChannelCmd>
      break;
 8007c86:	e00e      	b.n	8007ca6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	2100      	movs	r1, #0
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fca7 	bl	80085e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	2104      	movs	r1, #4
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fca0 	bl	80085e4 <TIM_CCxChannelCmd>
      break;
 8007ca4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0201 	orr.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d020      	beq.n	8007d24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01b      	beq.n	8007d24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f06f 0202 	mvn.w	r2, #2
 8007cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f9f0 	bl	80080f0 <HAL_TIM_IC_CaptureCallback>
 8007d10:	e005      	b.n	8007d1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9e2 	bl	80080dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f9f3 	bl	8008104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d020      	beq.n	8007d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01b      	beq.n	8007d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0204 	mvn.w	r2, #4
 8007d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f9ca 	bl	80080f0 <HAL_TIM_IC_CaptureCallback>
 8007d5c:	e005      	b.n	8007d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f9bc 	bl	80080dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f9cd 	bl	8008104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d020      	beq.n	8007dbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01b      	beq.n	8007dbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0208 	mvn.w	r2, #8
 8007d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2204      	movs	r2, #4
 8007d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f003 0303 	and.w	r3, r3, #3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9a4 	bl	80080f0 <HAL_TIM_IC_CaptureCallback>
 8007da8:	e005      	b.n	8007db6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f996 	bl	80080dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f9a7 	bl	8008104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f003 0310 	and.w	r3, r3, #16
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d020      	beq.n	8007e08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f003 0310 	and.w	r3, r3, #16
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01b      	beq.n	8007e08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0210 	mvn.w	r2, #16
 8007dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2208      	movs	r2, #8
 8007dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f97e 	bl	80080f0 <HAL_TIM_IC_CaptureCallback>
 8007df4:	e005      	b.n	8007e02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f970 	bl	80080dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f981 	bl	8008104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00c      	beq.n	8007e2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0201 	mvn.w	r2, #1
 8007e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7fa f99e 	bl	8002168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00c      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fcc8 	bl	80087e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00c      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f952 	bl	8008118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00c      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 0320 	and.w	r3, r3, #32
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0220 	mvn.w	r2, #32
 8007e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fc9a 	bl	80087cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <HAL_TIM_OC_ConfigChannel+0x1e>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e048      	b.n	8007f50 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b0c      	cmp	r3, #12
 8007eca:	d839      	bhi.n	8007f40 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	08007f09 	.word	0x08007f09
 8007ed8:	08007f41 	.word	0x08007f41
 8007edc:	08007f41 	.word	0x08007f41
 8007ee0:	08007f41 	.word	0x08007f41
 8007ee4:	08007f17 	.word	0x08007f17
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f41 	.word	0x08007f41
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007f25 	.word	0x08007f25
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f41 	.word	0x08007f41
 8007f00:	08007f41 	.word	0x08007f41
 8007f04:	08007f33 	.word	0x08007f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f9b8 	bl	8008284 <TIM_OC1_SetConfig>
      break;
 8007f14:	e017      	b.n	8007f46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fa21 	bl	8008364 <TIM_OC2_SetConfig>
      break;
 8007f22:	e010      	b.n	8007f46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fa90 	bl	8008450 <TIM_OC3_SetConfig>
      break;
 8007f30:	e009      	b.n	8007f46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fafd 	bl	8008538 <TIM_OC4_SetConfig>
      break;
 8007f3e:	e002      	b.n	8007f46 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	75fb      	strb	r3, [r7, #23]
      break;
 8007f44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d101      	bne.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f72:	2302      	movs	r3, #2
 8007f74:	e0ae      	b.n	80080d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	f200 809f 	bhi.w	80080c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f86:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	080080c5 	.word	0x080080c5
 8007f94:	080080c5 	.word	0x080080c5
 8007f98:	080080c5 	.word	0x080080c5
 8007f9c:	08008001 	.word	0x08008001
 8007fa0:	080080c5 	.word	0x080080c5
 8007fa4:	080080c5 	.word	0x080080c5
 8007fa8:	080080c5 	.word	0x080080c5
 8007fac:	08008043 	.word	0x08008043
 8007fb0:	080080c5 	.word	0x080080c5
 8007fb4:	080080c5 	.word	0x080080c5
 8007fb8:	080080c5 	.word	0x080080c5
 8007fbc:	08008083 	.word	0x08008083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68b9      	ldr	r1, [r7, #8]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f95c 	bl	8008284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0208 	orr.w	r2, r2, #8
 8007fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699a      	ldr	r2, [r3, #24]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0204 	bic.w	r2, r2, #4
 8007fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6999      	ldr	r1, [r3, #24]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	691a      	ldr	r2, [r3, #16]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	619a      	str	r2, [r3, #24]
      break;
 8007ffe:	e064      	b.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f9ac 	bl	8008364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699a      	ldr	r2, [r3, #24]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800801a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800802a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6999      	ldr	r1, [r3, #24]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	021a      	lsls	r2, r3, #8
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	619a      	str	r2, [r3, #24]
      break;
 8008040:	e043      	b.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	4618      	mov	r0, r3
 800804a:	f000 fa01 	bl	8008450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0208 	orr.w	r2, r2, #8
 800805c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0204 	bic.w	r2, r2, #4
 800806c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69d9      	ldr	r1, [r3, #28]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	61da      	str	r2, [r3, #28]
      break;
 8008080:	e023      	b.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fa55 	bl	8008538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800809c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	69da      	ldr	r2, [r3, #28]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69d9      	ldr	r1, [r3, #28]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	021a      	lsls	r2, r3, #8
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	61da      	str	r2, [r3, #28]
      break;
 80080c2:	e002      	b.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
      break;
 80080c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a46      	ldr	r2, [pc, #280]	@ (8008258 <TIM_Base_SetConfig+0x12c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d013      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800814a:	d00f      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a43      	ldr	r2, [pc, #268]	@ (800825c <TIM_Base_SetConfig+0x130>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00b      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a42      	ldr	r2, [pc, #264]	@ (8008260 <TIM_Base_SetConfig+0x134>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d007      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a41      	ldr	r2, [pc, #260]	@ (8008264 <TIM_Base_SetConfig+0x138>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d003      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a40      	ldr	r2, [pc, #256]	@ (8008268 <TIM_Base_SetConfig+0x13c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d108      	bne.n	800817e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a35      	ldr	r2, [pc, #212]	@ (8008258 <TIM_Base_SetConfig+0x12c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d02b      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818c:	d027      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a32      	ldr	r2, [pc, #200]	@ (800825c <TIM_Base_SetConfig+0x130>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d023      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a31      	ldr	r2, [pc, #196]	@ (8008260 <TIM_Base_SetConfig+0x134>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d01f      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a30      	ldr	r2, [pc, #192]	@ (8008264 <TIM_Base_SetConfig+0x138>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d01b      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008268 <TIM_Base_SetConfig+0x13c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d017      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a2e      	ldr	r2, [pc, #184]	@ (800826c <TIM_Base_SetConfig+0x140>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d013      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008270 <TIM_Base_SetConfig+0x144>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00f      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008274 <TIM_Base_SetConfig+0x148>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00b      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008278 <TIM_Base_SetConfig+0x14c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d007      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a2a      	ldr	r2, [pc, #168]	@ (800827c <TIM_Base_SetConfig+0x150>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d003      	beq.n	80081de <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a29      	ldr	r2, [pc, #164]	@ (8008280 <TIM_Base_SetConfig+0x154>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d108      	bne.n	80081f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a10      	ldr	r2, [pc, #64]	@ (8008258 <TIM_Base_SetConfig+0x12c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_Base_SetConfig+0xf8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a12      	ldr	r2, [pc, #72]	@ (8008268 <TIM_Base_SetConfig+0x13c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d103      	bne.n	800822c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b01      	cmp	r3, #1
 800823c:	d105      	bne.n	800824a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f023 0201 	bic.w	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	611a      	str	r2, [r3, #16]
  }
}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40010000 	.word	0x40010000
 800825c:	40000400 	.word	0x40000400
 8008260:	40000800 	.word	0x40000800
 8008264:	40000c00 	.word	0x40000c00
 8008268:	40010400 	.word	0x40010400
 800826c:	40014000 	.word	0x40014000
 8008270:	40014400 	.word	0x40014400
 8008274:	40014800 	.word	0x40014800
 8008278:	40001800 	.word	0x40001800
 800827c:	40001c00 	.word	0x40001c00
 8008280:	40002000 	.word	0x40002000

08008284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	f023 0201 	bic.w	r2, r3, #1
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f023 0302 	bic.w	r3, r3, #2
 80082cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a20      	ldr	r2, [pc, #128]	@ (800835c <TIM_OC1_SetConfig+0xd8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_OC1_SetConfig+0x64>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008360 <TIM_OC1_SetConfig+0xdc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10c      	bne.n	8008302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0308 	bic.w	r3, r3, #8
 80082ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f023 0304 	bic.w	r3, r3, #4
 8008300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a15      	ldr	r2, [pc, #84]	@ (800835c <TIM_OC1_SetConfig+0xd8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d003      	beq.n	8008312 <TIM_OC1_SetConfig+0x8e>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a14      	ldr	r2, [pc, #80]	@ (8008360 <TIM_OC1_SetConfig+0xdc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d111      	bne.n	8008336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	4313      	orrs	r3, r2
 800832a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	621a      	str	r2, [r3, #32]
}
 8008350:	bf00      	nop
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	40010000 	.word	0x40010000
 8008360:	40010400 	.word	0x40010400

08008364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	f023 0210 	bic.w	r2, r3, #16
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800839a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f023 0320 	bic.w	r3, r3, #32
 80083ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a22      	ldr	r2, [pc, #136]	@ (8008448 <TIM_OC2_SetConfig+0xe4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_OC2_SetConfig+0x68>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a21      	ldr	r2, [pc, #132]	@ (800844c <TIM_OC2_SetConfig+0xe8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d10d      	bne.n	80083e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a17      	ldr	r2, [pc, #92]	@ (8008448 <TIM_OC2_SetConfig+0xe4>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d003      	beq.n	80083f8 <TIM_OC2_SetConfig+0x94>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a16      	ldr	r2, [pc, #88]	@ (800844c <TIM_OC2_SetConfig+0xe8>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d113      	bne.n	8008420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	4313      	orrs	r3, r2
 8008412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	4313      	orrs	r3, r2
 800841e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	621a      	str	r2, [r3, #32]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	40010000 	.word	0x40010000
 800844c:	40010400 	.word	0x40010400

08008450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a21      	ldr	r2, [pc, #132]	@ (8008530 <TIM_OC3_SetConfig+0xe0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d003      	beq.n	80084b6 <TIM_OC3_SetConfig+0x66>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a20      	ldr	r2, [pc, #128]	@ (8008534 <TIM_OC3_SetConfig+0xe4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d10d      	bne.n	80084d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a16      	ldr	r2, [pc, #88]	@ (8008530 <TIM_OC3_SetConfig+0xe0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d003      	beq.n	80084e2 <TIM_OC3_SetConfig+0x92>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a15      	ldr	r2, [pc, #84]	@ (8008534 <TIM_OC3_SetConfig+0xe4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d113      	bne.n	800850a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	621a      	str	r2, [r3, #32]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	40010000 	.word	0x40010000
 8008534:	40010400 	.word	0x40010400

08008538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	031b      	lsls	r3, r3, #12
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a12      	ldr	r2, [pc, #72]	@ (80085dc <TIM_OC4_SetConfig+0xa4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_OC4_SetConfig+0x68>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a11      	ldr	r2, [pc, #68]	@ (80085e0 <TIM_OC4_SetConfig+0xa8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d109      	bne.n	80085b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	019b      	lsls	r3, r3, #6
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40010400 	.word	0x40010400

080085e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f003 031f 	and.w	r3, r3, #31
 80085f6:	2201      	movs	r2, #1
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1a      	ldr	r2, [r3, #32]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	43db      	mvns	r3, r3
 8008606:	401a      	ands	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a1a      	ldr	r2, [r3, #32]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	fa01 f303 	lsl.w	r3, r1, r3
 800861c:	431a      	orrs	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	621a      	str	r2, [r3, #32]
}
 8008622:	bf00      	nop
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008640:	2b01      	cmp	r3, #1
 8008642:	d101      	bne.n	8008648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008644:	2302      	movs	r3, #2
 8008646:	e05a      	b.n	80086fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800866e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a21      	ldr	r2, [pc, #132]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d022      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008694:	d01d      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a1d      	ldr	r2, [pc, #116]	@ (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d018      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00e      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a18      	ldr	r2, [pc, #96]	@ (800871c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d009      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a17      	ldr	r2, [pc, #92]	@ (8008720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d004      	beq.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a15      	ldr	r2, [pc, #84]	@ (8008724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d10c      	bne.n	80086ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40010000 	.word	0x40010000
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800
 8008718:	40000c00 	.word	0x40000c00
 800871c:	40010400 	.word	0x40010400
 8008720:	40014000 	.word	0x40014000
 8008724:	40001800 	.word	0x40001800

08008728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800873c:	2b01      	cmp	r3, #1
 800873e:	d101      	bne.n	8008744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008740:	2302      	movs	r3, #2
 8008742:	e03d      	b.n	80087c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	4313      	orrs	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087f4:	b084      	sub	sp, #16
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	f107 001c 	add.w	r0, r7, #28
 8008802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008806:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800880a:	2b01      	cmp	r3, #1
 800880c:	d123      	bne.n	8008856 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008812:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008836:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800883a:	2b01      	cmp	r3, #1
 800883c:	d105      	bne.n	800884a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fae2 	bl	8009e14 <USB_CoreReset>
 8008850:	4603      	mov	r3, r0
 8008852:	73fb      	strb	r3, [r7, #15]
 8008854:	e01b      	b.n	800888e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fad6 	bl	8009e14 <USB_CoreReset>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800886c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008870:	2b00      	cmp	r3, #0
 8008872:	d106      	bne.n	8008882 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008878:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008880:	e005      	b.n	800888e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008886:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800888e:	7fbb      	ldrb	r3, [r7, #30]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d10b      	bne.n	80088ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f043 0206 	orr.w	r2, r3, #6
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f043 0220 	orr.w	r2, r3, #32
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088b8:	b004      	add	sp, #16
 80088ba:	4770      	bx	lr

080088bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d165      	bne.n	800899c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4a41      	ldr	r2, [pc, #260]	@ (80089d8 <USB_SetTurnaroundTime+0x11c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d906      	bls.n	80088e6 <USB_SetTurnaroundTime+0x2a>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4a40      	ldr	r2, [pc, #256]	@ (80089dc <USB_SetTurnaroundTime+0x120>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d202      	bcs.n	80088e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80088e0:	230f      	movs	r3, #15
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e062      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	4a3c      	ldr	r2, [pc, #240]	@ (80089dc <USB_SetTurnaroundTime+0x120>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d306      	bcc.n	80088fc <USB_SetTurnaroundTime+0x40>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	4a3b      	ldr	r2, [pc, #236]	@ (80089e0 <USB_SetTurnaroundTime+0x124>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d202      	bcs.n	80088fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80088f6:	230e      	movs	r3, #14
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e057      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4a38      	ldr	r2, [pc, #224]	@ (80089e0 <USB_SetTurnaroundTime+0x124>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d306      	bcc.n	8008912 <USB_SetTurnaroundTime+0x56>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4a37      	ldr	r2, [pc, #220]	@ (80089e4 <USB_SetTurnaroundTime+0x128>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d202      	bcs.n	8008912 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800890c:	230d      	movs	r3, #13
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e04c      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	4a33      	ldr	r2, [pc, #204]	@ (80089e4 <USB_SetTurnaroundTime+0x128>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d306      	bcc.n	8008928 <USB_SetTurnaroundTime+0x6c>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	4a32      	ldr	r2, [pc, #200]	@ (80089e8 <USB_SetTurnaroundTime+0x12c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d802      	bhi.n	8008928 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008922:	230c      	movs	r3, #12
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	e041      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	4a2f      	ldr	r2, [pc, #188]	@ (80089e8 <USB_SetTurnaroundTime+0x12c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d906      	bls.n	800893e <USB_SetTurnaroundTime+0x82>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4a2e      	ldr	r2, [pc, #184]	@ (80089ec <USB_SetTurnaroundTime+0x130>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d802      	bhi.n	800893e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008938:	230b      	movs	r3, #11
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e036      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	4a2a      	ldr	r2, [pc, #168]	@ (80089ec <USB_SetTurnaroundTime+0x130>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d906      	bls.n	8008954 <USB_SetTurnaroundTime+0x98>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4a29      	ldr	r2, [pc, #164]	@ (80089f0 <USB_SetTurnaroundTime+0x134>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d802      	bhi.n	8008954 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800894e:	230a      	movs	r3, #10
 8008950:	617b      	str	r3, [r7, #20]
 8008952:	e02b      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4a26      	ldr	r2, [pc, #152]	@ (80089f0 <USB_SetTurnaroundTime+0x134>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d906      	bls.n	800896a <USB_SetTurnaroundTime+0xae>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4a25      	ldr	r2, [pc, #148]	@ (80089f4 <USB_SetTurnaroundTime+0x138>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d202      	bcs.n	800896a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008964:	2309      	movs	r3, #9
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e020      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4a21      	ldr	r2, [pc, #132]	@ (80089f4 <USB_SetTurnaroundTime+0x138>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d306      	bcc.n	8008980 <USB_SetTurnaroundTime+0xc4>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4a20      	ldr	r2, [pc, #128]	@ (80089f8 <USB_SetTurnaroundTime+0x13c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d802      	bhi.n	8008980 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800897a:	2308      	movs	r3, #8
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	e015      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <USB_SetTurnaroundTime+0x13c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d906      	bls.n	8008996 <USB_SetTurnaroundTime+0xda>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4a1c      	ldr	r2, [pc, #112]	@ (80089fc <USB_SetTurnaroundTime+0x140>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d202      	bcs.n	8008996 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008990:	2307      	movs	r3, #7
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	e00a      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008996:	2306      	movs	r3, #6
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e007      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80089a2:	2309      	movs	r3, #9
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	e001      	b.n	80089ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80089a8:	2309      	movs	r3, #9
 80089aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	029b      	lsls	r3, r3, #10
 80089c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80089c4:	431a      	orrs	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	371c      	adds	r7, #28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	00d8acbf 	.word	0x00d8acbf
 80089dc:	00e4e1c0 	.word	0x00e4e1c0
 80089e0:	00f42400 	.word	0x00f42400
 80089e4:	01067380 	.word	0x01067380
 80089e8:	011a499f 	.word	0x011a499f
 80089ec:	01312cff 	.word	0x01312cff
 80089f0:	014ca43f 	.word	0x014ca43f
 80089f4:	016e3600 	.word	0x016e3600
 80089f8:	01a6ab1f 	.word	0x01a6ab1f
 80089fc:	01e84800 	.word	0x01e84800

08008a00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f043 0201 	orr.w	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f023 0201 	bic.w	r2, r3, #1
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d115      	bne.n	8008a92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a72:	200a      	movs	r0, #10
 8008a74:	f7fa f868 	bl	8002b48 <HAL_Delay>
      ms += 10U;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	330a      	adds	r3, #10
 8008a7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 f939 	bl	8009cf6 <USB_GetMode>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d01e      	beq.n	8008ac8 <USB_SetCurrentMode+0x84>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008a8e:	d9f0      	bls.n	8008a72 <USB_SetCurrentMode+0x2e>
 8008a90:	e01a      	b.n	8008ac8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d115      	bne.n	8008ac4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008aa4:	200a      	movs	r0, #10
 8008aa6:	f7fa f84f 	bl	8002b48 <HAL_Delay>
      ms += 10U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	330a      	adds	r3, #10
 8008aae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f920 	bl	8009cf6 <USB_GetMode>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <USB_SetCurrentMode+0x84>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ac0:	d9f0      	bls.n	8008aa4 <USB_SetCurrentMode+0x60>
 8008ac2:	e001      	b.n	8008ac8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e005      	b.n	8008ad4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2bc8      	cmp	r3, #200	@ 0xc8
 8008acc:	d101      	bne.n	8008ad2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008adc:	b084      	sub	sp, #16
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	e009      	b.n	8008b10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	3340      	adds	r3, #64	@ 0x40
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	2200      	movs	r2, #0
 8008b08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	613b      	str	r3, [r7, #16]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2b0e      	cmp	r3, #14
 8008b14:	d9f2      	bls.n	8008afc <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d11c      	bne.n	8008b58 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b36:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	e005      	b.n	8008b64 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b70:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d10d      	bne.n	8008b94 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b80:	2100      	movs	r1, #0
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f968 	bl	8008e58 <USB_SetDevSpeed>
 8008b88:	e008      	b.n	8008b9c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f963 	bl	8008e58 <USB_SetDevSpeed>
 8008b92:	e003      	b.n	8008b9c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b94:	2103      	movs	r1, #3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f95e 	bl	8008e58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b9c:	2110      	movs	r1, #16
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f8fa 	bl	8008d98 <USB_FlushTxFifo>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f924 	bl	8008dfc <USB_FlushRxFifo>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bdc:	461a      	mov	r2, r3
 8008bde:	2300      	movs	r3, #0
 8008be0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008be2:	2300      	movs	r3, #0
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	e043      	b.n	8008c70 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bfe:	d118      	bne.n	8008c32 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c12:	461a      	mov	r2, r3
 8008c14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e013      	b.n	8008c44 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	e008      	b.n	8008c44 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c3e:	461a      	mov	r2, r3
 8008c40:	2300      	movs	r3, #0
 8008c42:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c50:	461a      	mov	r2, r3
 8008c52:	2300      	movs	r3, #0
 8008c54:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c62:	461a      	mov	r2, r3
 8008c64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008c68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c74:	461a      	mov	r2, r3
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d3b5      	bcc.n	8008be8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	e043      	b.n	8008d0a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c98:	d118      	bne.n	8008ccc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cac:	461a      	mov	r2, r3
 8008cae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	e013      	b.n	8008cde <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	e008      	b.n	8008cde <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd8:	461a      	mov	r2, r3
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cea:	461a      	mov	r2, r3
 8008cec:	2300      	movs	r3, #0
 8008cee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	3301      	adds	r3, #1
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d0e:	461a      	mov	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d3b5      	bcc.n	8008c82 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008d36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f043 0210 	orr.w	r2, r3, #16
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	4b10      	ldr	r3, [pc, #64]	@ (8008d94 <USB_DevInit+0x2b8>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d005      	beq.n	8008d6c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f043 0208 	orr.w	r2, r3, #8
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d107      	bne.n	8008d84 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d7c:	f043 0304 	orr.w	r3, r3, #4
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d90:	b004      	add	sp, #16
 8008d92:	4770      	bx	lr
 8008d94:	803c3800 	.word	0x803c3800

08008d98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008db2:	d901      	bls.n	8008db8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e01b      	b.n	8008df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	daf2      	bge.n	8008da6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	019b      	lsls	r3, r3, #6
 8008dc8:	f043 0220 	orr.w	r2, r3, #32
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ddc:	d901      	bls.n	8008de2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e006      	b.n	8008df0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d0f0      	beq.n	8008dd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e14:	d901      	bls.n	8008e1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e018      	b.n	8008e4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	daf2      	bge.n	8008e08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2210      	movs	r2, #16
 8008e2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e38:	d901      	bls.n	8008e3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e006      	b.n	8008e4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	f003 0310 	and.w	r3, r3, #16
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	d0f0      	beq.n	8008e2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	68f9      	ldr	r1, [r7, #12]
 8008e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b087      	sub	sp, #28
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 0306 	and.w	r3, r3, #6
 8008ea2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d102      	bne.n	8008eb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	75fb      	strb	r3, [r7, #23]
 8008eae:	e00a      	b.n	8008ec6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d002      	beq.n	8008ebc <USB_GetDevSpeed+0x32>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b06      	cmp	r3, #6
 8008eba:	d102      	bne.n	8008ec2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	75fb      	strb	r3, [r7, #23]
 8008ec0:	e001      	b.n	8008ec6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ec2:	230f      	movs	r3, #15
 8008ec4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d13a      	bne.n	8008f66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	2101      	movs	r1, #1
 8008f02:	fa01 f303 	lsl.w	r3, r1, r3
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	68f9      	ldr	r1, [r7, #12]
 8008f0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d155      	bne.n	8008fd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	791b      	ldrb	r3, [r3, #4]
 8008f42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	059b      	lsls	r3, r3, #22
 8008f4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	e036      	b.n	8008fd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f6c:	69da      	ldr	r2, [r3, #28]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	f003 030f 	and.w	r3, r3, #15
 8008f76:	2101      	movs	r1, #1
 8008f78:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7c:	041b      	lsls	r3, r3, #16
 8008f7e:	68f9      	ldr	r1, [r7, #12]
 8008f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d11a      	bne.n	8008fd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	791b      	ldrb	r3, [r3, #4]
 8008fb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fba:	430b      	orrs	r3, r1
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	0151      	lsls	r1, r2, #5
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	440a      	add	r2, r1
 8008fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	785b      	ldrb	r3, [r3, #1]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d161      	bne.n	80090c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009012:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009016:	d11f      	bne.n	8009058 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009032:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009036:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009052:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009056:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800905e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	2101      	movs	r1, #1
 800906a:	fa01 f303 	lsl.w	r3, r1, r3
 800906e:	b29b      	uxth	r3, r3
 8009070:	43db      	mvns	r3, r3
 8009072:	68f9      	ldr	r1, [r7, #12]
 8009074:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009078:	4013      	ands	r3, r2
 800907a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009082:	69da      	ldr	r2, [r3, #28]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	f003 030f 	and.w	r3, r3, #15
 800908c:	2101      	movs	r1, #1
 800908e:	fa01 f303 	lsl.w	r3, r1, r3
 8009092:	b29b      	uxth	r3, r3
 8009094:	43db      	mvns	r3, r3
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800909c:	4013      	ands	r3, r2
 800909e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	0159      	lsls	r1, r3, #5
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	440b      	add	r3, r1
 80090b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ba:	4619      	mov	r1, r3
 80090bc:	4b35      	ldr	r3, [pc, #212]	@ (8009194 <USB_DeactivateEndpoint+0x1b0>)
 80090be:	4013      	ands	r3, r2
 80090c0:	600b      	str	r3, [r1, #0]
 80090c2:	e060      	b.n	8009186 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090da:	d11f      	bne.n	800911c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	0151      	lsls	r1, r2, #5
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	440a      	add	r2, r1
 80090f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80090fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	0151      	lsls	r1, r2, #5
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	440a      	add	r2, r1
 8009112:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009116:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800911a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	2101      	movs	r1, #1
 800912e:	fa01 f303 	lsl.w	r3, r1, r3
 8009132:	041b      	lsls	r3, r3, #16
 8009134:	43db      	mvns	r3, r3
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800913c:	4013      	ands	r3, r2
 800913e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009146:	69da      	ldr	r2, [r3, #28]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	f003 030f 	and.w	r3, r3, #15
 8009150:	2101      	movs	r1, #1
 8009152:	fa01 f303 	lsl.w	r3, r1, r3
 8009156:	041b      	lsls	r3, r3, #16
 8009158:	43db      	mvns	r3, r3
 800915a:	68f9      	ldr	r1, [r7, #12]
 800915c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009160:	4013      	ands	r3, r2
 8009162:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	0159      	lsls	r1, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	440b      	add	r3, r1
 800917a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917e:	4619      	mov	r1, r3
 8009180:	4b05      	ldr	r3, [pc, #20]	@ (8009198 <USB_DeactivateEndpoint+0x1b4>)
 8009182:	4013      	ands	r3, r2
 8009184:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	ec337800 	.word	0xec337800
 8009198:	eff37800 	.word	0xeff37800

0800919c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08a      	sub	sp, #40	@ 0x28
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	f040 817f 	bne.w	80094bc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d132      	bne.n	800922c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	0151      	lsls	r1, r2, #5
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	440a      	add	r2, r1
 80091dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80091e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80091e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009204:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009208:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	0151      	lsls	r1, r2, #5
 800921c:	69fa      	ldr	r2, [r7, #28]
 800921e:	440a      	add	r2, r1
 8009220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009224:	0cdb      	lsrs	r3, r3, #19
 8009226:	04db      	lsls	r3, r3, #19
 8009228:	6113      	str	r3, [r2, #16]
 800922a:	e097      	b.n	800935c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009246:	0cdb      	lsrs	r3, r3, #19
 8009248:	04db      	lsls	r3, r3, #19
 800924a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	440a      	add	r2, r1
 8009262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009266:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800926a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800926e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d11a      	bne.n	80092ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	691a      	ldr	r2, [r3, #16]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	429a      	cmp	r2, r3
 8009280:	d903      	bls.n	800928a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	0151      	lsls	r1, r2, #5
 800929c:	69fa      	ldr	r2, [r7, #28]
 800929e:	440a      	add	r2, r1
 80092a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092a8:	6113      	str	r3, [r2, #16]
 80092aa:	e044      	b.n	8009336 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	691a      	ldr	r2, [r3, #16]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	4413      	add	r3, r2
 80092b6:	1e5a      	subs	r2, r3, #1
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	8afb      	ldrh	r3, [r7, #22]
 80092d2:	04d9      	lsls	r1, r3, #19
 80092d4:	4ba4      	ldr	r3, [pc, #656]	@ (8009568 <USB_EPStartXfer+0x3cc>)
 80092d6:	400b      	ands	r3, r1
 80092d8:	69b9      	ldr	r1, [r7, #24]
 80092da:	0148      	lsls	r0, r1, #5
 80092dc:	69f9      	ldr	r1, [r7, #28]
 80092de:	4401      	add	r1, r0
 80092e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80092e4:	4313      	orrs	r3, r2
 80092e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	791b      	ldrb	r3, [r3, #4]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d122      	bne.n	8009336 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	440a      	add	r2, r1
 8009306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800930a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800930e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800931c:	691a      	ldr	r2, [r3, #16]
 800931e:	8afb      	ldrh	r3, [r7, #22]
 8009320:	075b      	lsls	r3, r3, #29
 8009322:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009326:	69b9      	ldr	r1, [r7, #24]
 8009328:	0148      	lsls	r0, r1, #5
 800932a:	69f9      	ldr	r1, [r7, #28]
 800932c:	4401      	add	r1, r0
 800932e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009332:	4313      	orrs	r3, r2
 8009334:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	4413      	add	r3, r2
 800933e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800934c:	69b9      	ldr	r1, [r7, #24]
 800934e:	0148      	lsls	r0, r1, #5
 8009350:	69f9      	ldr	r1, [r7, #28]
 8009352:	4401      	add	r1, r0
 8009354:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009358:	4313      	orrs	r3, r2
 800935a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d14b      	bne.n	80093fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d009      	beq.n	800937e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009376:	461a      	mov	r2, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	791b      	ldrb	r3, [r3, #4]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d128      	bne.n	80093d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009392:	2b00      	cmp	r3, #0
 8009394:	d110      	bne.n	80093b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	e00f      	b.n	80093d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	0151      	lsls	r1, r2, #5
 80093ca:	69fa      	ldr	r2, [r7, #28]
 80093cc:	440a      	add	r2, r1
 80093ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	0151      	lsls	r1, r2, #5
 80093ea:	69fa      	ldr	r2, [r7, #28]
 80093ec:	440a      	add	r2, r1
 80093ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	e166      	b.n	80096c8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009414:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009418:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	791b      	ldrb	r3, [r3, #4]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d015      	beq.n	800944e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 814e 	beq.w	80096c8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 030f 	and.w	r3, r3, #15
 800943c:	2101      	movs	r1, #1
 800943e:	fa01 f303 	lsl.w	r3, r1, r3
 8009442:	69f9      	ldr	r1, [r7, #28]
 8009444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009448:	4313      	orrs	r3, r2
 800944a:	634b      	str	r3, [r1, #52]	@ 0x34
 800944c:	e13c      	b.n	80096c8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800945a:	2b00      	cmp	r3, #0
 800945c:	d110      	bne.n	8009480 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	0151      	lsls	r1, r2, #5
 8009470:	69fa      	ldr	r2, [r7, #28]
 8009472:	440a      	add	r2, r1
 8009474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009478:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	e00f      	b.n	80094a0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	0151      	lsls	r1, r2, #5
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	440a      	add	r2, r1
 8009496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800949a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800949e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	68d9      	ldr	r1, [r3, #12]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	781a      	ldrb	r2, [r3, #0]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	b298      	uxth	r0, r3
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	4603      	mov	r3, r0
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f9b9 	bl	800982c <USB_WritePacket>
 80094ba:	e105      	b.n	80096c8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	0151      	lsls	r1, r2, #5
 80094ce:	69fa      	ldr	r2, [r7, #28]
 80094d0:	440a      	add	r2, r1
 80094d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094d6:	0cdb      	lsrs	r3, r3, #19
 80094d8:	04db      	lsls	r3, r3, #19
 80094da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80094fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80094fe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d132      	bne.n	800956c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800952a:	691a      	ldr	r2, [r3, #16]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	6a1b      	ldr	r3, [r3, #32]
 8009530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009534:	69b9      	ldr	r1, [r7, #24]
 8009536:	0148      	lsls	r0, r1, #5
 8009538:	69f9      	ldr	r1, [r7, #28]
 800953a:	4401      	add	r1, r0
 800953c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009540:	4313      	orrs	r3, r2
 8009542:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	0151      	lsls	r1, r2, #5
 8009556:	69fa      	ldr	r2, [r7, #28]
 8009558:	440a      	add	r2, r1
 800955a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800955e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009562:	6113      	str	r3, [r2, #16]
 8009564:	e062      	b.n	800962c <USB_EPStartXfer+0x490>
 8009566:	bf00      	nop
 8009568:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d123      	bne.n	80095bc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009580:	691a      	ldr	r2, [r3, #16]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800958a:	69b9      	ldr	r1, [r7, #24]
 800958c:	0148      	lsls	r0, r1, #5
 800958e:	69f9      	ldr	r1, [r7, #28]
 8009590:	4401      	add	r1, r0
 8009592:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009596:	4313      	orrs	r3, r2
 8009598:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095b8:	6113      	str	r3, [r2, #16]
 80095ba:	e037      	b.n	800962c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	4413      	add	r3, r2
 80095c6:	1e5a      	subs	r2, r3, #1
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	8afa      	ldrh	r2, [r7, #22]
 80095d8:	fb03 f202 	mul.w	r2, r3, r2
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ec:	691a      	ldr	r2, [r3, #16]
 80095ee:	8afb      	ldrh	r3, [r7, #22]
 80095f0:	04d9      	lsls	r1, r3, #19
 80095f2:	4b38      	ldr	r3, [pc, #224]	@ (80096d4 <USB_EPStartXfer+0x538>)
 80095f4:	400b      	ands	r3, r1
 80095f6:	69b9      	ldr	r1, [r7, #24]
 80095f8:	0148      	lsls	r0, r1, #5
 80095fa:	69f9      	ldr	r1, [r7, #28]
 80095fc:	4401      	add	r1, r0
 80095fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009602:	4313      	orrs	r3, r2
 8009604:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009612:	691a      	ldr	r2, [r3, #16]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800961c:	69b9      	ldr	r1, [r7, #24]
 800961e:	0148      	lsls	r0, r1, #5
 8009620:	69f9      	ldr	r1, [r7, #28]
 8009622:	4401      	add	r1, r0
 8009624:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009628:	4313      	orrs	r3, r2
 800962a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d10d      	bne.n	800964e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	68d9      	ldr	r1, [r3, #12]
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964a:	460a      	mov	r2, r1
 800964c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	791b      	ldrb	r3, [r3, #4]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d128      	bne.n	80096a8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009662:	2b00      	cmp	r3, #0
 8009664:	d110      	bne.n	8009688 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	0151      	lsls	r1, r2, #5
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	440a      	add	r2, r1
 800967c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009680:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	e00f      	b.n	80096a8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	0151      	lsls	r1, r2, #5
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	440a      	add	r2, r1
 800969e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	0151      	lsls	r1, r2, #5
 80096ba:	69fa      	ldr	r2, [r7, #28]
 80096bc:	440a      	add	r2, r1
 80096be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	1ff80000 	.word	0x1ff80000

080096d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d14a      	bne.n	800978c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800970a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800970e:	f040 8086 	bne.w	800981e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	7812      	ldrb	r2, [r2, #0]
 8009726:	0151      	lsls	r1, r2, #5
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	440a      	add	r2, r1
 800972c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009734:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	7812      	ldrb	r2, [r2, #0]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	440a      	add	r2, r1
 8009750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009754:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009758:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3301      	adds	r3, #1
 800975e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009766:	4293      	cmp	r3, r2
 8009768:	d902      	bls.n	8009770 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	75fb      	strb	r3, [r7, #23]
          break;
 800976e:	e056      	b.n	800981e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009788:	d0e7      	beq.n	800975a <USB_EPStopXfer+0x82>
 800978a:	e048      	b.n	800981e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097a4:	d13b      	bne.n	800981e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	7812      	ldrb	r2, [r2, #0]
 80097ba:	0151      	lsls	r1, r2, #5
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	440a      	add	r2, r1
 80097c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	015a      	lsls	r2, r3, #5
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	4413      	add	r3, r2
 80097d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	7812      	ldrb	r2, [r2, #0]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3301      	adds	r3, #1
 80097f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d902      	bls.n	8009804 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	75fb      	strb	r3, [r7, #23]
          break;
 8009802:	e00c      	b.n	800981e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800981c:	d0e7      	beq.n	80097ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	371c      	adds	r7, #28
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800982c:	b480      	push	{r7}
 800982e:	b089      	sub	sp, #36	@ 0x24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	4611      	mov	r1, r2
 8009838:	461a      	mov	r2, r3
 800983a:	460b      	mov	r3, r1
 800983c:	71fb      	strb	r3, [r7, #7]
 800983e:	4613      	mov	r3, r2
 8009840:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800984a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d123      	bne.n	800989a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009852:	88bb      	ldrh	r3, [r7, #4]
 8009854:	3303      	adds	r3, #3
 8009856:	089b      	lsrs	r3, r3, #2
 8009858:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800985a:	2300      	movs	r3, #0
 800985c:	61bb      	str	r3, [r7, #24]
 800985e:	e018      	b.n	8009892 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	031a      	lsls	r2, r3, #12
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	4413      	add	r3, r2
 8009868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800986c:	461a      	mov	r2, r3
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	3301      	adds	r3, #1
 8009878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	3301      	adds	r3, #1
 800987e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	3301      	adds	r3, #1
 8009884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	3301      	adds	r3, #1
 800988a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	3301      	adds	r3, #1
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	429a      	cmp	r2, r3
 8009898:	d3e2      	bcc.n	8009860 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3724      	adds	r7, #36	@ 0x24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b08b      	sub	sp, #44	@ 0x2c
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	4613      	mov	r3, r2
 80098b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80098be:	88fb      	ldrh	r3, [r7, #6]
 80098c0:	089b      	lsrs	r3, r3, #2
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80098c6:	88fb      	ldrh	r3, [r7, #6]
 80098c8:	f003 0303 	and.w	r3, r3, #3
 80098cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80098ce:	2300      	movs	r3, #0
 80098d0:	623b      	str	r3, [r7, #32]
 80098d2:	e014      	b.n	80098fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098de:	601a      	str	r2, [r3, #0]
    pDest++;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e2:	3301      	adds	r3, #1
 80098e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e8:	3301      	adds	r3, #1
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	3301      	adds	r3, #1
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	3301      	adds	r3, #1
 80098f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	3301      	adds	r3, #1
 80098fc:	623b      	str	r3, [r7, #32]
 80098fe:	6a3a      	ldr	r2, [r7, #32]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	429a      	cmp	r2, r3
 8009904:	d3e6      	bcc.n	80098d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009906:	8bfb      	ldrh	r3, [r7, #30]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01e      	beq.n	800994a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009916:	461a      	mov	r2, r3
 8009918:	f107 0310 	add.w	r3, r7, #16
 800991c:	6812      	ldr	r2, [r2, #0]
 800991e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	fa22 f303 	lsr.w	r3, r2, r3
 800992c:	b2da      	uxtb	r2, r3
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	701a      	strb	r2, [r3, #0]
      i++;
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	3301      	adds	r3, #1
 8009936:	623b      	str	r3, [r7, #32]
      pDest++;
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	3301      	adds	r3, #1
 800993c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800993e:	8bfb      	ldrh	r3, [r7, #30]
 8009940:	3b01      	subs	r3, #1
 8009942:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009944:	8bfb      	ldrh	r3, [r7, #30]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1ea      	bne.n	8009920 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800994c:	4618      	mov	r0, r3
 800994e:	372c      	adds	r7, #44	@ 0x2c
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	785b      	ldrb	r3, [r3, #1]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d12c      	bne.n	80099ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	db12      	blt.n	80099ac <USB_EPSetStall+0x54>
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00f      	beq.n	80099ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	0151      	lsls	r1, r2, #5
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	440a      	add	r2, r1
 80099a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80099aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	e02b      	b.n	8009a26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	db12      	blt.n	8009a06 <USB_EPSetStall+0xae>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00f      	beq.n	8009a06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	0151      	lsls	r1, r2, #5
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	785b      	ldrb	r3, [r3, #1]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d128      	bne.n	8009aa2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	791b      	ldrb	r3, [r3, #4]
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d003      	beq.n	8009a80 <USB_EPClearStall+0x4c>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	791b      	ldrb	r3, [r3, #4]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d138      	bne.n	8009af2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	0151      	lsls	r1, r2, #5
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	440a      	add	r2, r1
 8009a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a9e:	6013      	str	r3, [r2, #0]
 8009aa0:	e027      	b.n	8009af2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	0151      	lsls	r1, r2, #5
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	440a      	add	r2, r1
 8009ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009abc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ac0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	791b      	ldrb	r3, [r3, #4]
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d003      	beq.n	8009ad2 <USB_EPClearStall+0x9e>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	791b      	ldrb	r3, [r3, #4]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d10f      	bne.n	8009af2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	0151      	lsls	r1, r2, #5
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	440a      	add	r2, r1
 8009ae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009af0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009b22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009b34:	68f9      	ldr	r1, [r7, #12]
 8009b36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b66:	f023 0303 	bic.w	r3, r3, #3
 8009b6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b7a:	f023 0302 	bic.w	r3, r3, #2
 8009b7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b085      	sub	sp, #20
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ba8:	f023 0303 	bic.w	r3, r3, #3
 8009bac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	4013      	ands	r3, r2
 8009be6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009be8:	68fb      	ldr	r3, [r7, #12]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b085      	sub	sp, #20
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	4013      	ands	r3, r2
 8009c18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	0c1b      	lsrs	r3, r3, #16
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b085      	sub	sp, #20
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	b29b      	uxth	r3, r3
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b085      	sub	sp, #20
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c6e:	78fb      	ldrb	r3, [r7, #3]
 8009c70:	015a      	lsls	r2, r3, #5
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4413      	add	r3, r2
 8009c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b087      	sub	sp, #28
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	f003 030f 	and.w	r3, r3, #15
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cca:	01db      	lsls	r3, r3, #7
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	f003 0301 	and.w	r3, r3, #1
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009d30:	f023 0307 	bic.w	r3, r3, #7
 8009d34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	460b      	mov	r3, r1
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	333c      	adds	r3, #60	@ 0x3c
 8009d6e:	3304      	adds	r3, #4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	4a26      	ldr	r2, [pc, #152]	@ (8009e10 <USB_EP0_OutStart+0xb8>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d90a      	bls.n	8009d92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d8c:	d101      	bne.n	8009d92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e037      	b.n	8009e02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d98:	461a      	mov	r2, r3
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009db0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dc0:	f043 0318 	orr.w	r3, r3, #24
 8009dc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dd4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009dd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009dda:	7afb      	ldrb	r3, [r7, #11]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d10f      	bne.n	8009e00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de6:	461a      	mov	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dfa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009dfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	4f54300a 	.word	0x4f54300a

08009e14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3301      	adds	r3, #1
 8009e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e2c:	d901      	bls.n	8009e32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e01b      	b.n	8009e6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	daf2      	bge.n	8009e20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	f043 0201 	orr.w	r2, r3, #1
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e56:	d901      	bls.n	8009e5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e006      	b.n	8009e6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d0f0      	beq.n	8009e4a <USB_CoreReset+0x36>

  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
	...

08009e78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8009e7c:	f001 f992 	bl	800b1a4 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8009e80:	2200      	movs	r2, #0
 8009e82:	4917      	ldr	r1, [pc, #92]	@ (8009ee0 <MX_USB_DEVICE_Init+0x68>)
 8009e84:	4817      	ldr	r0, [pc, #92]	@ (8009ee4 <MX_USB_DEVICE_Init+0x6c>)
 8009e86:	f001 fda7 	bl	800b9d8 <USBD_Init>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8009e90:	f7f8 f97c 	bl	800218c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8009e94:	4914      	ldr	r1, [pc, #80]	@ (8009ee8 <MX_USB_DEVICE_Init+0x70>)
 8009e96:	4813      	ldr	r0, [pc, #76]	@ (8009ee4 <MX_USB_DEVICE_Init+0x6c>)
 8009e98:	f001 fdca 	bl	800ba30 <USBD_RegisterClass>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8009ea2:	f7f8 f973 	bl	800218c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8009ea6:	4911      	ldr	r1, [pc, #68]	@ (8009eec <MX_USB_DEVICE_Init+0x74>)
 8009ea8:	480e      	ldr	r0, [pc, #56]	@ (8009ee4 <MX_USB_DEVICE_Init+0x6c>)
 8009eaa:	f000 fe55 	bl	800ab58 <USBD_CDC_ACM_RegisterInterface>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009eb4:	f7f8 f96a 	bl	800218c <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8009eb8:	490d      	ldr	r1, [pc, #52]	@ (8009ef0 <MX_USB_DEVICE_Init+0x78>)
 8009eba:	480a      	ldr	r0, [pc, #40]	@ (8009ee4 <MX_USB_DEVICE_Init+0x6c>)
 8009ebc:	f001 fd3e 	bl	800b93c <USBD_CUSTOM_HID_RegisterInterface>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8009ec6:	f7f8 f961 	bl	800218c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8009eca:	4806      	ldr	r0, [pc, #24]	@ (8009ee4 <MX_USB_DEVICE_Init+0x6c>)
 8009ecc:	f001 fdee 	bl	800baac <USBD_Start>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8009ed6:	f7f8 f959 	bl	800218c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009eda:	bf00      	nop
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000028 	.word	0x20000028
 8009ee4:	20000d60 	.word	0x20000d60
 8009ee8:	200001b0 	.word	0x200001b0
 8009eec:	20000014 	.word	0x20000014
 8009ef0:	200000c0 	.word	0x200000c0

08009ef4 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8009efe:	79fb      	ldrb	r3, [r7, #7]
 8009f00:	01db      	lsls	r3, r3, #7
 8009f02:	4a06      	ldr	r2, [pc, #24]	@ (8009f1c <CDC_Init+0x28>)
 8009f04:	441a      	add	r2, r3
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	4905      	ldr	r1, [pc, #20]	@ (8009f20 <CDC_Init+0x2c>)
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fe5e 	bl	800abcc <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8009f10:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	2000107c 	.word	0x2000107c
 8009f20:	20000d60 	.word	0x20000d60

08009f24 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8009f2e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	603a      	str	r2, [r7, #0]
 8009f44:	461a      	mov	r2, r3
 8009f46:	4603      	mov	r3, r0
 8009f48:	71fb      	strb	r3, [r7, #7]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	71bb      	strb	r3, [r7, #6]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8009f52:	79bb      	ldrb	r3, [r7, #6]
 8009f54:	2b23      	cmp	r3, #35	@ 0x23
 8009f56:	f200 80b6 	bhi.w	800a0c6 <CDC_Control+0x18a>
 8009f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <CDC_Control+0x24>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	0800a0c7 	.word	0x0800a0c7
 8009f64:	0800a0c7 	.word	0x0800a0c7
 8009f68:	0800a0c7 	.word	0x0800a0c7
 8009f6c:	0800a0c7 	.word	0x0800a0c7
 8009f70:	0800a0c7 	.word	0x0800a0c7
 8009f74:	0800a0c7 	.word	0x0800a0c7
 8009f78:	0800a0c7 	.word	0x0800a0c7
 8009f7c:	0800a0c7 	.word	0x0800a0c7
 8009f80:	0800a0c7 	.word	0x0800a0c7
 8009f84:	0800a0c7 	.word	0x0800a0c7
 8009f88:	0800a0c7 	.word	0x0800a0c7
 8009f8c:	0800a0c7 	.word	0x0800a0c7
 8009f90:	0800a0c7 	.word	0x0800a0c7
 8009f94:	0800a0c7 	.word	0x0800a0c7
 8009f98:	0800a0c7 	.word	0x0800a0c7
 8009f9c:	0800a0c7 	.word	0x0800a0c7
 8009fa0:	0800a0c7 	.word	0x0800a0c7
 8009fa4:	0800a0c7 	.word	0x0800a0c7
 8009fa8:	0800a0c7 	.word	0x0800a0c7
 8009fac:	0800a0c7 	.word	0x0800a0c7
 8009fb0:	0800a0c7 	.word	0x0800a0c7
 8009fb4:	0800a0c7 	.word	0x0800a0c7
 8009fb8:	0800a0c7 	.word	0x0800a0c7
 8009fbc:	0800a0c7 	.word	0x0800a0c7
 8009fc0:	0800a0c7 	.word	0x0800a0c7
 8009fc4:	0800a0c7 	.word	0x0800a0c7
 8009fc8:	0800a0c7 	.word	0x0800a0c7
 8009fcc:	0800a0c7 	.word	0x0800a0c7
 8009fd0:	0800a0c7 	.word	0x0800a0c7
 8009fd4:	0800a0c7 	.word	0x0800a0c7
 8009fd8:	0800a0c7 	.word	0x0800a0c7
 8009fdc:	0800a0c7 	.word	0x0800a0c7
 8009fe0:	08009ff1 	.word	0x08009ff1
 8009fe4:	0800a051 	.word	0x0800a051
 8009fe8:	0800a0c7 	.word	0x0800a0c7
 8009fec:	0800a0c7 	.word	0x0800a0c7
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	021b      	lsls	r3, r3, #8
 8009ffe:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	3302      	adds	r3, #2
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800a008:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	3303      	adds	r3, #3
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	061b      	lsls	r3, r3, #24
 800a012:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	4611      	mov	r1, r2
 800a018:	4a2f      	ldr	r2, [pc, #188]	@ (800a0d8 <CDC_Control+0x19c>)
 800a01a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	7911      	ldrb	r1, [r2, #4]
 800a024:	4a2c      	ldr	r2, [pc, #176]	@ (800a0d8 <CDC_Control+0x19c>)
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	4413      	add	r3, r2
 800a02a:	460a      	mov	r2, r1
 800a02c:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	7951      	ldrb	r1, [r2, #5]
 800a034:	4a28      	ldr	r2, [pc, #160]	@ (800a0d8 <CDC_Control+0x19c>)
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	460a      	mov	r2, r1
 800a03c:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800a03e:	79fb      	ldrb	r3, [r7, #7]
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	7991      	ldrb	r1, [r2, #6]
 800a044:	4a24      	ldr	r2, [pc, #144]	@ (800a0d8 <CDC_Control+0x19c>)
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	4413      	add	r3, r2
 800a04a:	460a      	mov	r2, r1
 800a04c:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800a04e:	e03b      	b.n	800a0c8 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	4a21      	ldr	r2, [pc, #132]	@ (800a0d8 <CDC_Control+0x19c>)
 800a054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	4a1d      	ldr	r2, [pc, #116]	@ (800a0d8 <CDC_Control+0x19c>)
 800a062:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a066:	0a1a      	lsrs	r2, r3, #8
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800a070:	79fb      	ldrb	r3, [r7, #7]
 800a072:	4a19      	ldr	r2, [pc, #100]	@ (800a0d8 <CDC_Control+0x19c>)
 800a074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a078:	0c1a      	lsrs	r2, r3, #16
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	3302      	adds	r3, #2
 800a07e:	b2d2      	uxtb	r2, r2
 800a080:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	4a14      	ldr	r2, [pc, #80]	@ (800a0d8 <CDC_Control+0x19c>)
 800a086:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a08a:	0e1a      	lsrs	r2, r3, #24
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	3303      	adds	r3, #3
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	3204      	adds	r2, #4
 800a09a:	490f      	ldr	r1, [pc, #60]	@ (800a0d8 <CDC_Control+0x19c>)
 800a09c:	00db      	lsls	r3, r3, #3
 800a09e:	440b      	add	r3, r1
 800a0a0:	791b      	ldrb	r3, [r3, #4]
 800a0a2:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	3205      	adds	r2, #5
 800a0aa:	490b      	ldr	r1, [pc, #44]	@ (800a0d8 <CDC_Control+0x19c>)
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	440b      	add	r3, r1
 800a0b0:	795b      	ldrb	r3, [r3, #5]
 800a0b2:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	3206      	adds	r2, #6
 800a0ba:	4907      	ldr	r1, [pc, #28]	@ (800a0d8 <CDC_Control+0x19c>)
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	440b      	add	r3, r1
 800a0c0:	799b      	ldrb	r3, [r3, #6]
 800a0c2:	7013      	strb	r3, [r2, #0]
    break;
 800a0c4:	e000      	b.n	800a0c8 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0c6:	bf00      	nop
  }

  return (USBD_OK);
 800a0c8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	200010fc 	.word	0x200010fc

0800a0dc <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
	signalTelemetryTask(Buf, *Len);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	68b8      	ldr	r0, [r7, #8]
 800a0f2:	f7f7 fdcf 	bl	8001c94 <signalTelemetryTask>
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	68b9      	ldr	r1, [r7, #8]
 800a100:	4618      	mov	r0, r3
 800a102:	f000 f825 	bl	800a150 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	4907      	ldr	r1, [pc, #28]	@ (800a128 <CDC_Receive+0x4c>)
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 fd5d 	bl	800abcc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	4904      	ldr	r1, [pc, #16]	@ (800a128 <CDC_Receive+0x4c>)
 800a116:	4618      	mov	r0, r3
 800a118:	f000 fdb8 	bl	800ac8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a11c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20000d60 	.word	0x20000d60

0800a12c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	607a      	str	r2, [r7, #4]
 800a136:	461a      	mov	r2, r3
 800a138:	4603      	mov	r3, r0
 800a13a:	73fb      	strb	r3, [r7, #15]
 800a13c:	4613      	mov	r3, r2
 800a13e:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	6039      	str	r1, [r7, #0]
 800a15a:	71fb      	strb	r3, [r7, #7]
 800a15c:	4613      	mov	r3, r2
 800a15e:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a164:	2300      	movs	r3, #0
 800a166:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a16e:	fb02 f303 	mul.w	r3, r2, r3
 800a172:	4a0e      	ldr	r2, [pc, #56]	@ (800a1ac <CDC_Transmit+0x5c>)
 800a174:	4413      	add	r3, r2
 800a176:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800a182:	2301      	movs	r3, #1
 800a184:	e00d      	b.n	800a1a2 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800a186:	88bb      	ldrh	r3, [r7, #4]
 800a188:	79f8      	ldrb	r0, [r7, #7]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	4908      	ldr	r1, [pc, #32]	@ (800a1b0 <CDC_Transmit+0x60>)
 800a18e:	f000 fcf9 	bl	800ab84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	4906      	ldr	r1, [pc, #24]	@ (800a1b0 <CDC_Transmit+0x60>)
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fd36 	bl	800ac08 <USBD_CDC_TransmitPacket>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	2000131c 	.word	0x2000131c
 800a1b0:	20000d60 	.word	0x20000d60

0800a1b4 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	6039      	str	r1, [r7, #0]
 800a1be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2212      	movs	r2, #18
 800a1c4:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800a1c6:	4b03      	ldr	r3, [pc, #12]	@ (800a1d4 <USBD_DeviceDescriptor+0x20>)
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	20000044 	.word	0x20000044

0800a1d8 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	6039      	str	r1, [r7, #0]
 800a1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2204      	movs	r2, #4
 800a1e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1ea:	4b03      	ldr	r3, [pc, #12]	@ (800a1f8 <USBD_LangIDStrDescriptor+0x20>)
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	20000058 	.word	0x20000058

0800a1fc <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	6039      	str	r1, [r7, #0]
 800a206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d105      	bne.n	800a21a <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4907      	ldr	r1, [pc, #28]	@ (800a230 <USBD_ProductStrDescriptor+0x34>)
 800a212:	4808      	ldr	r0, [pc, #32]	@ (800a234 <USBD_ProductStrDescriptor+0x38>)
 800a214:	f002 fc89 	bl	800cb2a <USBD_GetString>
 800a218:	e004      	b.n	800a224 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	4904      	ldr	r1, [pc, #16]	@ (800a230 <USBD_ProductStrDescriptor+0x34>)
 800a21e:	4805      	ldr	r0, [pc, #20]	@ (800a234 <USBD_ProductStrDescriptor+0x38>)
 800a220:	f002 fc83 	bl	800cb2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a224:	4b02      	ldr	r3, [pc, #8]	@ (800a230 <USBD_ProductStrDescriptor+0x34>)
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20001104 	.word	0x20001104
 800a234:	080105b0 	.word	0x080105b0

0800a238 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	6039      	str	r1, [r7, #0]
 800a242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	4904      	ldr	r1, [pc, #16]	@ (800a258 <USBD_ManufacturerStrDescriptor+0x20>)
 800a248:	4804      	ldr	r0, [pc, #16]	@ (800a25c <USBD_ManufacturerStrDescriptor+0x24>)
 800a24a:	f002 fc6e 	bl	800cb2a <USBD_GetString>
  return USBD_StrDesc;
 800a24e:	4b02      	ldr	r3, [pc, #8]	@ (800a258 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20001104 	.word	0x20001104
 800a25c:	080105c8 	.word	0x080105c8

0800a260 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	221a      	movs	r2, #26
 800a270:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a272:	f000 f843 	bl	800a2fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a276:	4b02      	ldr	r3, [pc, #8]	@ (800a280 <USBD_SerialStrDescriptor+0x20>)
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	2000005c 	.word	0x2000005c

0800a284 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d105      	bne.n	800a2a2 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	4907      	ldr	r1, [pc, #28]	@ (800a2b8 <USBD_ConfigStrDescriptor+0x34>)
 800a29a:	4808      	ldr	r0, [pc, #32]	@ (800a2bc <USBD_ConfigStrDescriptor+0x38>)
 800a29c:	f002 fc45 	bl	800cb2a <USBD_GetString>
 800a2a0:	e004      	b.n	800a2ac <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	4904      	ldr	r1, [pc, #16]	@ (800a2b8 <USBD_ConfigStrDescriptor+0x34>)
 800a2a6:	4805      	ldr	r0, [pc, #20]	@ (800a2bc <USBD_ConfigStrDescriptor+0x38>)
 800a2a8:	f002 fc3f 	bl	800cb2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2ac:	4b02      	ldr	r3, [pc, #8]	@ (800a2b8 <USBD_ConfigStrDescriptor+0x34>)
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20001104 	.word	0x20001104
 800a2bc:	080105dc 	.word	0x080105dc

0800a2c0 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d105      	bne.n	800a2de <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	4907      	ldr	r1, [pc, #28]	@ (800a2f4 <USBD_InterfaceStrDescriptor+0x34>)
 800a2d6:	4808      	ldr	r0, [pc, #32]	@ (800a2f8 <USBD_InterfaceStrDescriptor+0x38>)
 800a2d8:	f002 fc27 	bl	800cb2a <USBD_GetString>
 800a2dc:	e004      	b.n	800a2e8 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	4904      	ldr	r1, [pc, #16]	@ (800a2f4 <USBD_InterfaceStrDescriptor+0x34>)
 800a2e2:	4805      	ldr	r0, [pc, #20]	@ (800a2f8 <USBD_InterfaceStrDescriptor+0x38>)
 800a2e4:	f002 fc21 	bl	800cb2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2e8:	4b02      	ldr	r3, [pc, #8]	@ (800a2f4 <USBD_InterfaceStrDescriptor+0x34>)
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20001104 	.word	0x20001104
 800a2f8:	080105ec 	.word	0x080105ec

0800a2fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a302:	4b0f      	ldr	r3, [pc, #60]	@ (800a340 <Get_SerialNum+0x44>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a308:	4b0e      	ldr	r3, [pc, #56]	@ (800a344 <Get_SerialNum+0x48>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a30e:	4b0e      	ldr	r3, [pc, #56]	@ (800a348 <Get_SerialNum+0x4c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4413      	add	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a322:	2208      	movs	r2, #8
 800a324:	4909      	ldr	r1, [pc, #36]	@ (800a34c <Get_SerialNum+0x50>)
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 f814 	bl	800a354 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a32c:	2204      	movs	r2, #4
 800a32e:	4908      	ldr	r1, [pc, #32]	@ (800a350 <Get_SerialNum+0x54>)
 800a330:	68b8      	ldr	r0, [r7, #8]
 800a332:	f000 f80f 	bl	800a354 <IntToUnicode>
  }
}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	1fff7a10 	.word	0x1fff7a10
 800a344:	1fff7a14 	.word	0x1fff7a14
 800a348:	1fff7a18 	.word	0x1fff7a18
 800a34c:	2000005e 	.word	0x2000005e
 800a350:	2000006e 	.word	0x2000006e

0800a354 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a354:	b480      	push	{r7}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a366:	2300      	movs	r3, #0
 800a368:	75fb      	strb	r3, [r7, #23]
 800a36a:	e027      	b.n	800a3bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	0f1b      	lsrs	r3, r3, #28
 800a370:	2b09      	cmp	r3, #9
 800a372:	d80b      	bhi.n	800a38c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	0f1b      	lsrs	r3, r3, #28
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	4619      	mov	r1, r3
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	440b      	add	r3, r1
 800a384:	3230      	adds	r2, #48	@ 0x30
 800a386:	b2d2      	uxtb	r2, r2
 800a388:	701a      	strb	r2, [r3, #0]
 800a38a:	e00a      	b.n	800a3a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	0f1b      	lsrs	r3, r3, #28
 800a390:	b2da      	uxtb	r2, r3
 800a392:	7dfb      	ldrb	r3, [r7, #23]
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	4619      	mov	r1, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	440b      	add	r3, r1
 800a39c:	3237      	adds	r2, #55	@ 0x37
 800a39e:	b2d2      	uxtb	r2, r2
 800a3a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	011b      	lsls	r3, r3, #4
 800a3a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	75fb      	strb	r3, [r7, #23]
 800a3bc:	7dfa      	ldrb	r2, [r7, #23]
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d3d3      	bcc.n	800a36c <IntToUnicode+0x18>
  }
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop
 800a3c8:	371c      	adds	r7, #28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3d6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a3e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	460a      	mov	r2, r1
 800a3fc:	71fb      	strb	r3, [r7, #7]
 800a3fe:	4613      	mov	r3, r2
 800a400:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800a402:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBD_CUSTOM_HID_SendCustomReport>:
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t USBD_CUSTOM_HID_SendCustomReport(uint8_t *report, uint16_t len)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDevice, report, len);
 800a41c:	887b      	ldrh	r3, [r7, #2]
 800a41e:	461a      	mov	r2, r3
 800a420:	6879      	ldr	r1, [r7, #4]
 800a422:	4804      	ldr	r0, [pc, #16]	@ (800a434 <USBD_CUSTOM_HID_SendCustomReport+0x24>)
 800a424:	f001 f9c4 	bl	800b7b0 <USBD_CUSTOM_HID_SendReport>
 800a428:	4603      	mov	r3, r0
 800a42a:	b25b      	sxtb	r3, r3
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000d60 	.word	0x20000d60

0800a438 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a444:	2300      	movs	r3, #0
 800a446:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]
 800a44c:	e0c6      	b.n	800a5dc <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a454:	fb02 f303 	mul.w	r3, r2, r3
 800a458:	4a65      	ldr	r2, [pc, #404]	@ (800a5f0 <USBD_CDC_Init+0x1b8>)
 800a45a:	4413      	add	r3, r2
 800a45c:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	7c1b      	ldrb	r3, [r3, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d13d      	bne.n	800a4e2 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4a62      	ldr	r2, [pc, #392]	@ (800a5f4 <USBD_CDC_Init+0x1bc>)
 800a46a:	5cd1      	ldrb	r1, [r2, r3]
 800a46c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a470:	2202      	movs	r2, #2
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f002 fdcb 	bl	800d00e <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800a478:	7bfb      	ldrb	r3, [r7, #15]
 800a47a:	4a5e      	ldr	r2, [pc, #376]	@ (800a5f4 <USBD_CDC_Init+0x1bc>)
 800a47c:	5cd3      	ldrb	r3, [r2, r3]
 800a47e:	f003 020f 	and.w	r2, r3, #15
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	4613      	mov	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	440b      	add	r3, r1
 800a48e:	3324      	adds	r3, #36	@ 0x24
 800a490:	2201      	movs	r2, #1
 800a492:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	4a58      	ldr	r2, [pc, #352]	@ (800a5f8 <USBD_CDC_Init+0x1c0>)
 800a498:	5cd1      	ldrb	r1, [r2, r3]
 800a49a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a49e:	2202      	movs	r2, #2
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f002 fdb4 	bl	800d00e <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	4a53      	ldr	r2, [pc, #332]	@ (800a5f8 <USBD_CDC_Init+0x1c0>)
 800a4aa:	5cd3      	ldrb	r3, [r2, r3]
 800a4ac:	f003 020f 	and.w	r2, r3, #15
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	440b      	add	r3, r1
 800a4bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	4a4d      	ldr	r2, [pc, #308]	@ (800a5fc <USBD_CDC_Init+0x1c4>)
 800a4c8:	5cd3      	ldrb	r3, [r2, r3]
 800a4ca:	f003 020f 	and.w	r2, r3, #15
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	440b      	add	r3, r1
 800a4da:	3326      	adds	r3, #38	@ 0x26
 800a4dc:	2210      	movs	r2, #16
 800a4de:	801a      	strh	r2, [r3, #0]
 800a4e0:	e03a      	b.n	800a558 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	4a43      	ldr	r2, [pc, #268]	@ (800a5f4 <USBD_CDC_Init+0x1bc>)
 800a4e6:	5cd1      	ldrb	r1, [r2, r3]
 800a4e8:	2340      	movs	r3, #64	@ 0x40
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f002 fd8e 	bl	800d00e <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	4a3f      	ldr	r2, [pc, #252]	@ (800a5f4 <USBD_CDC_Init+0x1bc>)
 800a4f6:	5cd3      	ldrb	r3, [r2, r3]
 800a4f8:	f003 020f 	and.w	r2, r3, #15
 800a4fc:	6879      	ldr	r1, [r7, #4]
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	440b      	add	r3, r1
 800a508:	3324      	adds	r3, #36	@ 0x24
 800a50a:	2201      	movs	r2, #1
 800a50c:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	4a39      	ldr	r2, [pc, #228]	@ (800a5f8 <USBD_CDC_Init+0x1c0>)
 800a512:	5cd1      	ldrb	r1, [r2, r3]
 800a514:	2340      	movs	r3, #64	@ 0x40
 800a516:	2202      	movs	r2, #2
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f002 fd78 	bl	800d00e <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
 800a520:	4a35      	ldr	r2, [pc, #212]	@ (800a5f8 <USBD_CDC_Init+0x1c0>)
 800a522:	5cd3      	ldrb	r3, [r2, r3]
 800a524:	f003 020f 	and.w	r2, r3, #15
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	4613      	mov	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	440b      	add	r3, r1
 800a534:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a538:	2201      	movs	r2, #1
 800a53a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	4a2f      	ldr	r2, [pc, #188]	@ (800a5fc <USBD_CDC_Init+0x1c4>)
 800a540:	5cd3      	ldrb	r3, [r2, r3]
 800a542:	f003 020f 	and.w	r2, r3, #15
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	440b      	add	r3, r1
 800a552:	3326      	adds	r3, #38	@ 0x26
 800a554:	2210      	movs	r2, #16
 800a556:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	4a28      	ldr	r2, [pc, #160]	@ (800a5fc <USBD_CDC_Init+0x1c4>)
 800a55c:	5cd1      	ldrb	r1, [r2, r3]
 800a55e:	2308      	movs	r3, #8
 800a560:	2203      	movs	r2, #3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f002 fd53 	bl	800d00e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	4a24      	ldr	r2, [pc, #144]	@ (800a5fc <USBD_CDC_Init+0x1c4>)
 800a56c:	5cd3      	ldrb	r3, [r2, r3]
 800a56e:	f003 020f 	and.w	r2, r3, #15
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	3324      	adds	r3, #36	@ 0x24
 800a580:	2201      	movs	r2, #1
 800a582:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	7bfa      	ldrb	r2, [r7, #15]
 800a58e:	4610      	mov	r0, r2
 800a590:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2200      	movs	r2, #0
 800a596:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7c1b      	ldrb	r3, [r3, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10b      	bne.n	800a5c2 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	4a12      	ldr	r2, [pc, #72]	@ (800a5f8 <USBD_CDC_Init+0x1c0>)
 800a5ae:	5cd1      	ldrb	r1, [r2, r3]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a5b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f002 fe16 	bl	800d1ec <USBD_LL_PrepareReceive>
 800a5c0:	e009      	b.n	800a5d6 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	4a0c      	ldr	r2, [pc, #48]	@ (800a5f8 <USBD_CDC_Init+0x1c0>)
 800a5c6:	5cd1      	ldrb	r1, [r2, r3]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a5ce:	2340      	movs	r3, #64	@ 0x40
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f002 fe0b 	bl	800d1ec <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	73fb      	strb	r3, [r7, #15]
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f43f af35 	beq.w	800a44e <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000131c 	.word	0x2000131c
 800a5f4:	20001304 	.word	0x20001304
 800a5f8:	20001308 	.word	0x20001308
 800a5fc:	2000130c 	.word	0x2000130c

0800a600 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	460b      	mov	r3, r1
 800a60a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a60c:	2300      	movs	r3, #0
 800a60e:	73fb      	strb	r3, [r7, #15]
 800a610:	e057      	b.n	800a6c2 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	4a2f      	ldr	r2, [pc, #188]	@ (800a6d4 <USBD_CDC_DeInit+0xd4>)
 800a616:	5cd3      	ldrb	r3, [r2, r3]
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f002 fd1d 	bl	800d05a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	4a2c      	ldr	r2, [pc, #176]	@ (800a6d4 <USBD_CDC_DeInit+0xd4>)
 800a624:	5cd3      	ldrb	r3, [r2, r3]
 800a626:	f003 020f 	and.w	r2, r3, #15
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	440b      	add	r3, r1
 800a636:	3324      	adds	r3, #36	@ 0x24
 800a638:	2200      	movs	r2, #0
 800a63a:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
 800a63e:	4a26      	ldr	r2, [pc, #152]	@ (800a6d8 <USBD_CDC_DeInit+0xd8>)
 800a640:	5cd3      	ldrb	r3, [r2, r3]
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f002 fd08 	bl	800d05a <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	4a22      	ldr	r2, [pc, #136]	@ (800a6d8 <USBD_CDC_DeInit+0xd8>)
 800a64e:	5cd3      	ldrb	r3, [r2, r3]
 800a650:	f003 020f 	and.w	r2, r3, #15
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a664:	2200      	movs	r2, #0
 800a666:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800a668:	7bfb      	ldrb	r3, [r7, #15]
 800a66a:	4a1c      	ldr	r2, [pc, #112]	@ (800a6dc <USBD_CDC_DeInit+0xdc>)
 800a66c:	5cd3      	ldrb	r3, [r2, r3]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f002 fcf2 	bl	800d05a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	4a18      	ldr	r2, [pc, #96]	@ (800a6dc <USBD_CDC_DeInit+0xdc>)
 800a67a:	5cd3      	ldrb	r3, [r2, r3]
 800a67c:	f003 020f 	and.w	r2, r3, #15
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	3324      	adds	r3, #36	@ 0x24
 800a68e:	2200      	movs	r2, #0
 800a690:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	4a11      	ldr	r2, [pc, #68]	@ (800a6dc <USBD_CDC_DeInit+0xdc>)
 800a696:	5cd3      	ldrb	r3, [r2, r3]
 800a698:	f003 020f 	and.w	r2, r3, #15
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	3326      	adds	r3, #38	@ 0x26
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	7bfa      	ldrb	r2, [r7, #15]
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	73fb      	strb	r3, [r7, #15]
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0a4      	beq.n	800a612 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20001304 	.word	0x20001304
 800a6d8:	20001308 	.word	0x20001308
 800a6dc:	2000130c 	.word	0x2000130c

0800a6e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a6e0:	b590      	push	{r4, r7, lr}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a6fe:	2300      	movs	r3, #0
 800a700:	757b      	strb	r3, [r7, #21]
 800a702:	e015      	b.n	800a730 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	889b      	ldrh	r3, [r3, #4]
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	7d7b      	ldrb	r3, [r7, #21]
 800a70c:	496d      	ldr	r1, [pc, #436]	@ (800a8c4 <USBD_CDC_Setup+0x1e4>)
 800a70e:	5ccb      	ldrb	r3, [r1, r3]
 800a710:	429a      	cmp	r2, r3
 800a712:	d007      	beq.n	800a724 <USBD_CDC_Setup+0x44>
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	889b      	ldrh	r3, [r3, #4]
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	7d7b      	ldrb	r3, [r7, #21]
 800a71c:	496a      	ldr	r1, [pc, #424]	@ (800a8c8 <USBD_CDC_Setup+0x1e8>)
 800a71e:	5ccb      	ldrb	r3, [r1, r3]
 800a720:	429a      	cmp	r2, r3
 800a722:	d102      	bne.n	800a72a <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 800a724:	7d7b      	ldrb	r3, [r7, #21]
 800a726:	75bb      	strb	r3, [r7, #22]
      break;
 800a728:	e005      	b.n	800a736 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a72a:	7d7b      	ldrb	r3, [r7, #21]
 800a72c:	3301      	adds	r3, #1
 800a72e:	757b      	strb	r3, [r7, #21]
 800a730:	7d7b      	ldrb	r3, [r7, #21]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0e6      	beq.n	800a704 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800a736:	7dbb      	ldrb	r3, [r7, #22]
 800a738:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a73c:	fb02 f303 	mul.w	r3, r2, r3
 800a740:	4a62      	ldr	r2, [pc, #392]	@ (800a8cc <USBD_CDC_Setup+0x1ec>)
 800a742:	4413      	add	r3, r2
 800a744:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d04a      	beq.n	800a7e8 <USBD_CDC_Setup+0x108>
 800a752:	2b20      	cmp	r3, #32
 800a754:	f040 80aa 	bne.w	800a8ac <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	88db      	ldrh	r3, [r3, #6]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d038      	beq.n	800a7d2 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	b25b      	sxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	da1d      	bge.n	800a7a6 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a770:	689c      	ldr	r4, [r3, #8]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	7859      	ldrb	r1, [r3, #1]
 800a776:	7dbb      	ldrb	r3, [r7, #22]
 800a778:	025b      	lsls	r3, r3, #9
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	441a      	add	r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	88db      	ldrh	r3, [r3, #6]
 800a782:	7db8      	ldrb	r0, [r7, #22]
 800a784:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	88db      	ldrh	r3, [r3, #6]
 800a78a:	2b07      	cmp	r3, #7
 800a78c:	bf28      	it	cs
 800a78e:	2307      	movcs	r3, #7
 800a790:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800a792:	7dbb      	ldrb	r3, [r7, #22]
 800a794:	025b      	lsls	r3, r3, #9
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	4413      	add	r3, r2
 800a79a:	89fa      	ldrh	r2, [r7, #14]
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f002 fa23 	bl	800cbea <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800a7a4:	e089      	b.n	800a8ba <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	785a      	ldrb	r2, [r3, #1]
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	88db      	ldrh	r3, [r3, #6]
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800a7bc:	7dbb      	ldrb	r3, [r7, #22]
 800a7be:	025b      	lsls	r3, r3, #9
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	18d1      	adds	r1, r2, r3
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	88db      	ldrh	r3, [r3, #6]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f002 fa39 	bl	800cc42 <USBD_CtlPrepareRx>
    break;
 800a7d0:	e073      	b.n	800a8ba <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7d8:	689c      	ldr	r4, [r3, #8]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	7859      	ldrb	r1, [r3, #1]
 800a7de:	7db8      	ldrb	r0, [r7, #22]
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	47a0      	blx	r4
    break;
 800a7e6:	e068      	b.n	800a8ba <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	785b      	ldrb	r3, [r3, #1]
 800a7ec:	2b0b      	cmp	r3, #11
 800a7ee:	d852      	bhi.n	800a896 <USBD_CDC_Setup+0x1b6>
 800a7f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f8 <USBD_CDC_Setup+0x118>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a829 	.word	0x0800a829
 800a7fc:	0800a8a5 	.word	0x0800a8a5
 800a800:	0800a897 	.word	0x0800a897
 800a804:	0800a897 	.word	0x0800a897
 800a808:	0800a897 	.word	0x0800a897
 800a80c:	0800a897 	.word	0x0800a897
 800a810:	0800a897 	.word	0x0800a897
 800a814:	0800a897 	.word	0x0800a897
 800a818:	0800a897 	.word	0x0800a897
 800a81c:	0800a897 	.word	0x0800a897
 800a820:	0800a853 	.word	0x0800a853
 800a824:	0800a87d 	.word	0x0800a87d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b03      	cmp	r3, #3
 800a832:	d107      	bne.n	800a844 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a834:	f107 030a 	add.w	r3, r7, #10
 800a838:	2202      	movs	r2, #2
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f002 f9d4 	bl	800cbea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a842:	e032      	b.n	800a8aa <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f002 f95e 	bl	800cb08 <USBD_CtlError>
        ret = USBD_FAIL;
 800a84c:	2303      	movs	r3, #3
 800a84e:	75fb      	strb	r3, [r7, #23]
      break;
 800a850:	e02b      	b.n	800a8aa <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d107      	bne.n	800a86e <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a85e:	f107 030d 	add.w	r3, r7, #13
 800a862:	2201      	movs	r2, #1
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f002 f9bf 	bl	800cbea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a86c:	e01d      	b.n	800a8aa <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f002 f949 	bl	800cb08 <USBD_CtlError>
        ret = USBD_FAIL;
 800a876:	2303      	movs	r3, #3
 800a878:	75fb      	strb	r3, [r7, #23]
      break;
 800a87a:	e016      	b.n	800a8aa <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b03      	cmp	r3, #3
 800a886:	d00f      	beq.n	800a8a8 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f002 f93c 	bl	800cb08 <USBD_CtlError>
        ret = USBD_FAIL;
 800a890:	2303      	movs	r3, #3
 800a892:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a894:	e008      	b.n	800a8a8 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f002 f935 	bl	800cb08 <USBD_CtlError>
      ret = USBD_FAIL;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a2:	e002      	b.n	800a8aa <USBD_CDC_Setup+0x1ca>
      break;
 800a8a4:	bf00      	nop
 800a8a6:	e008      	b.n	800a8ba <USBD_CDC_Setup+0x1da>
      break;
 800a8a8:	bf00      	nop
    }
    break;
 800a8aa:	e006      	b.n	800a8ba <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f002 f92a 	bl	800cb08 <USBD_CtlError>
    ret = USBD_FAIL;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	75fb      	strb	r3, [r7, #23]
    break;
 800a8b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	371c      	adds	r7, #28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd90      	pop	{r4, r7, pc}
 800a8c4:	20001310 	.word	0x20001310
 800a8c8:	20001314 	.word	0x20001314
 800a8cc:	2000131c 	.word	0x2000131c

0800a8d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8d0:	b590      	push	{r4, r7, lr}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800a8e6:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	75bb      	strb	r3, [r7, #22]
 800a8f0:	e00d      	b.n	800a90e <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800a8f2:	78fa      	ldrb	r2, [r7, #3]
 800a8f4:	7dbb      	ldrb	r3, [r7, #22]
 800a8f6:	4934      	ldr	r1, [pc, #208]	@ (800a9c8 <USBD_CDC_DataIn+0xf8>)
 800a8f8:	5ccb      	ldrb	r3, [r1, r3]
 800a8fa:	f003 030f 	and.w	r3, r3, #15
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d102      	bne.n	800a908 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800a902:	7dbb      	ldrb	r3, [r7, #22]
 800a904:	75fb      	strb	r3, [r7, #23]
      break;
 800a906:	e005      	b.n	800a914 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a908:	7dbb      	ldrb	r3, [r7, #22]
 800a90a:	3301      	adds	r3, #1
 800a90c:	75bb      	strb	r3, [r7, #22]
 800a90e:	7dbb      	ldrb	r3, [r7, #22]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0ee      	beq.n	800a8f2 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a91a:	fb02 f303 	mul.w	r3, r2, r3
 800a91e:	4a2b      	ldr	r2, [pc, #172]	@ (800a9cc <USBD_CDC_DataIn+0xfc>)
 800a920:	4413      	add	r3, r2
 800a922:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a924:	78fa      	ldrb	r2, [r7, #3]
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	3318      	adds	r3, #24
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d029      	beq.n	800a98e <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	6879      	ldr	r1, [r7, #4]
 800a93e:	4613      	mov	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	440b      	add	r3, r1
 800a948:	3318      	adds	r3, #24
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	78f9      	ldrb	r1, [r7, #3]
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	460b      	mov	r3, r1
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	440b      	add	r3, r1
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4403      	add	r3, r0
 800a95a:	331c      	adds	r3, #28
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	fbb2 f1f3 	udiv	r1, r2, r3
 800a962:	fb01 f303 	mul.w	r3, r1, r3
 800a966:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d110      	bne.n	800a98e <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a96c:	78fa      	ldrb	r2, [r7, #3]
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	4613      	mov	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	440b      	add	r3, r1
 800a97a:	3318      	adds	r3, #24
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a980:	78f9      	ldrb	r1, [r7, #3]
 800a982:	2300      	movs	r3, #0
 800a984:	2200      	movs	r2, #0
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f002 fc0f 	bl	800d1aa <USBD_LL_Transmit>
 800a98c:	e016      	b.n	800a9bc <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00c      	beq.n	800a9bc <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9a8:	691c      	ldr	r4, [r3, #16]
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800a9b6:	78fb      	ldrb	r3, [r7, #3]
 800a9b8:	7df8      	ldrb	r0, [r7, #23]
 800a9ba:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd90      	pop	{r4, r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20001304 	.word	0x20001304
 800a9cc:	2000131c 	.word	0x2000131c

0800a9d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73bb      	strb	r3, [r7, #14]
 800a9e8:	e00b      	b.n	800aa02 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	4a17      	ldr	r2, [pc, #92]	@ (800aa4c <USBD_CDC_DataOut+0x7c>)
 800a9ee:	5cd3      	ldrb	r3, [r2, r3]
 800a9f0:	78fa      	ldrb	r2, [r7, #3]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d102      	bne.n	800a9fc <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9fa:	e005      	b.n	800aa08 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	73bb      	strb	r3, [r7, #14]
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0f0      	beq.n	800a9ea <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa0e:	fb02 f303 	mul.w	r3, r2, r3
 800aa12:	4a0f      	ldr	r2, [pc, #60]	@ (800aa50 <USBD_CDC_DataOut+0x80>)
 800aa14:	4413      	add	r3, r2
 800aa16:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f002 fc06 	bl	800d22e <USBD_LL_GetRxDataSize>
 800aa22:	4602      	mov	r2, r0
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aa3e:	7bf8      	ldrb	r0, [r7, #15]
 800aa40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20001308 	.word	0x20001308
 800aa50:	2000131c 	.word	0x2000131c

0800aa54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa54:	b590      	push	{r4, r7, lr}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800aa60:	2300      	movs	r3, #0
 800aa62:	73fb      	strb	r3, [r7, #15]
 800aa64:	e02d      	b.n	800aac2 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa6c:	fb02 f303 	mul.w	r3, r2, r3
 800aa70:	4a18      	ldr	r2, [pc, #96]	@ (800aad4 <USBD_CDC_EP0_RxReady+0x80>)
 800aa72:	4413      	add	r3, r2
 800aa74:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e024      	b.n	800aaca <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d018      	beq.n	800aabc <USBD_CDC_EP0_RxReady+0x68>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800aa90:	2bff      	cmp	r3, #255	@ 0xff
 800aa92:	d013      	beq.n	800aabc <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa9a:	689c      	ldr	r4, [r3, #8]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	025b      	lsls	r3, r3, #9
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	441a      	add	r2, r3
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aab0:	7bf8      	ldrb	r0, [r7, #15]
 800aab2:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	22ff      	movs	r2, #255	@ 0xff
 800aab8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	3301      	adds	r3, #1
 800aac0:	73fb      	strb	r3, [r7, #15]
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0ce      	beq.n	800aa66 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd90      	pop	{r4, r7, pc}
 800aad2:	bf00      	nop
 800aad4:	2000131c 	.word	0x2000131c

0800aad8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	224b      	movs	r2, #75	@ 0x4b
 800aae4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800aae6:	4b03      	ldr	r3, [pc, #12]	@ (800aaf4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	20000164 	.word	0x20000164

0800aaf8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	224b      	movs	r2, #75	@ 0x4b
 800ab04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ab06:	4b03      	ldr	r3, [pc, #12]	@ (800ab14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	20000118 	.word	0x20000118

0800ab18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	224b      	movs	r2, #75	@ 0x4b
 800ab24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ab26:	4b03      	ldr	r3, [pc, #12]	@ (800ab34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	20000164 	.word	0x20000164

0800ab38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	220a      	movs	r2, #10
 800ab44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab46:	4b03      	ldr	r3, [pc, #12]	@ (800ab54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	200000d0 	.word	0x200000d0

0800ab58 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e004      	b.n	800ab76 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
	...

0800ab84 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	607a      	str	r2, [r7, #4]
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ab9e:	fb02 f303 	mul.w	r3, r2, r3
 800aba2:	4a09      	ldr	r2, [pc, #36]	@ (800abc8 <USBD_CDC_SetTxBuffer+0x44>)
 800aba4:	4413      	add	r3, r2
 800aba6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	2000131c 	.word	0x2000131c

0800abcc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800abcc:	b480      	push	{r7}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800abe4:	fb02 f303 	mul.w	r3, r2, r3
 800abe8:	4a06      	ldr	r2, [pc, #24]	@ (800ac04 <USBD_CDC_SetRxBuffer+0x38>)
 800abea:	4413      	add	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	371c      	adds	r7, #28
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	2000131c 	.word	0x2000131c

0800ac08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	6039      	str	r1, [r7, #0]
 800ac12:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ac22:	fb02 f303 	mul.w	r3, r2, r3
 800ac26:	4a17      	ldr	r2, [pc, #92]	@ (800ac84 <USBD_CDC_TransmitPacket+0x7c>)
 800ac28:	4413      	add	r3, r2
 800ac2a:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d121      	bne.n	800ac7a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	4a11      	ldr	r2, [pc, #68]	@ (800ac88 <USBD_CDC_TransmitPacket+0x80>)
 800ac42:	5cd3      	ldrb	r3, [r2, r3]
 800ac44:	f003 020f 	and.w	r2, r3, #15
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ac4e:	6838      	ldr	r0, [r7, #0]
 800ac50:	4613      	mov	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4403      	add	r3, r0
 800ac5a:	3318      	adds	r3, #24
 800ac5c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800ac5e:	79fb      	ldrb	r3, [r7, #7]
 800ac60:	4a09      	ldr	r2, [pc, #36]	@ (800ac88 <USBD_CDC_TransmitPacket+0x80>)
 800ac62:	5cd1      	ldrb	r1, [r2, r3]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ac70:	6838      	ldr	r0, [r7, #0]
 800ac72:	f002 fa9a 	bl	800d1aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	2000131c 	.word	0x2000131c
 800ac88:	20001304 	.word	0x20001304

0800ac8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aca2:	fb02 f303 	mul.w	r3, r2, r3
 800aca6:	4a11      	ldr	r2, [pc, #68]	@ (800acec <USBD_CDC_ReceivePacket+0x60>)
 800aca8:	4413      	add	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	7c1b      	ldrb	r3, [r3, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10b      	bne.n	800accc <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	4a0e      	ldr	r2, [pc, #56]	@ (800acf0 <USBD_CDC_ReceivePacket+0x64>)
 800acb8:	5cd1      	ldrb	r1, [r2, r3]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acc4:	6838      	ldr	r0, [r7, #0]
 800acc6:	f002 fa91 	bl	800d1ec <USBD_LL_PrepareReceive>
 800acca:	e009      	b.n	800ace0 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	4a08      	ldr	r2, [pc, #32]	@ (800acf0 <USBD_CDC_ReceivePacket+0x64>)
 800acd0:	5cd1      	ldrb	r1, [r2, r3]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acd8:	2340      	movs	r3, #64	@ 0x40
 800acda:	6838      	ldr	r0, [r7, #0]
 800acdc:	f002 fa86 	bl	800d1ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	2000131c 	.word	0x2000131c
 800acf0:	20001308 	.word	0x20001308

0800acf4 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	4608      	mov	r0, r1
 800acfe:	4611      	mov	r1, r2
 800ad00:	461a      	mov	r2, r3
 800ad02:	4603      	mov	r3, r0
 800ad04:	70fb      	strb	r3, [r7, #3]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70bb      	strb	r3, [r7, #2]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3309      	adds	r3, #9
 800ad12:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800ad14:	2300      	movs	r3, #0
 800ad16:	73fb      	strb	r3, [r7, #15]
 800ad18:	e05b      	b.n	800add2 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	78fa      	ldrb	r2, [r7, #3]
 800ad20:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3310      	adds	r3, #16
 800ad26:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ad2a:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	330a      	adds	r3, #10
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	331a      	adds	r3, #26
 800ad38:	78ba      	ldrb	r2, [r7, #2]
 800ad3a:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3322      	adds	r3, #34	@ 0x22
 800ad40:	78fa      	ldrb	r2, [r7, #3]
 800ad42:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3323      	adds	r3, #35	@ 0x23
 800ad48:	78ba      	ldrb	r2, [r7, #2]
 800ad4a:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3326      	adds	r3, #38	@ 0x26
 800ad50:	7e3a      	ldrb	r2, [r7, #24]
 800ad52:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	332d      	adds	r3, #45	@ 0x2d
 800ad58:	78ba      	ldrb	r2, [r7, #2]
 800ad5a:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3336      	adds	r3, #54	@ 0x36
 800ad60:	7f3a      	ldrb	r2, [r7, #28]
 800ad62:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	333d      	adds	r3, #61	@ 0x3d
 800ad68:	787a      	ldrb	r2, [r7, #1]
 800ad6a:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3342      	adds	r3, #66	@ 0x42
 800ad70:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	491c      	ldr	r1, [pc, #112]	@ (800ade8 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800ad76:	787a      	ldrb	r2, [r7, #1]
 800ad78:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	491b      	ldr	r1, [pc, #108]	@ (800adec <USBD_Update_CDC_ACM_DESC+0xf8>)
 800ad7e:	7f3a      	ldrb	r2, [r7, #28]
 800ad80:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	491a      	ldr	r1, [pc, #104]	@ (800adf0 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800ad86:	7e3a      	ldrb	r2, [r7, #24]
 800ad88:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	4919      	ldr	r1, [pc, #100]	@ (800adf4 <USBD_Update_CDC_ACM_DESC+0x100>)
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	4918      	ldr	r1, [pc, #96]	@ (800adf8 <USBD_Update_CDC_ACM_DESC+0x104>)
 800ad96:	78ba      	ldrb	r2, [r7, #2]
 800ad98:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	4917      	ldr	r1, [pc, #92]	@ (800adfc <USBD_Update_CDC_ACM_DESC+0x108>)
 800ad9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ada2:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800ada4:	787b      	ldrb	r3, [r7, #1]
 800ada6:	3302      	adds	r3, #2
 800ada8:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800adaa:	787b      	ldrb	r3, [r7, #1]
 800adac:	3301      	adds	r3, #1
 800adae:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800adb0:	7f3b      	ldrb	r3, [r7, #28]
 800adb2:	3301      	adds	r3, #1
 800adb4:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800adb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adba:	3301      	adds	r3, #1
 800adbc:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	3302      	adds	r3, #2
 800adc4:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800adc6:	78fb      	ldrb	r3, [r7, #3]
 800adc8:	3301      	adds	r3, #1
 800adca:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	3301      	adds	r3, #1
 800add0:	73fb      	strb	r3, [r7, #15]
 800add2:	7bfb      	ldrb	r3, [r7, #15]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0a0      	beq.n	800ad1a <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800add8:	bf00      	nop
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	20001304 	.word	0x20001304
 800adec:	20001308 	.word	0x20001308
 800adf0:	2000130c 	.word	0x2000130c
 800adf4:	20001310 	.word	0x20001310
 800adf8:	20001314 	.word	0x20001314
 800adfc:	20001318 	.word	0x20001318

0800ae00 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800ae0c:	4b08      	ldr	r3, [pc, #32]	@ (800ae30 <USBD_COMPOSITE_Init+0x30>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	78fa      	ldrb	r2, [r7, #3]
 800ae12:	4611      	mov	r1, r2
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800ae18:	4b06      	ldr	r3, [pc, #24]	@ (800ae34 <USBD_COMPOSITE_Init+0x34>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	78fa      	ldrb	r2, [r7, #3]
 800ae1e:	4611      	mov	r1, r2
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	200000dc 	.word	0x200000dc
 800ae34:	200001fc 	.word	0x200001fc

0800ae38 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800ae44:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <USBD_COMPOSITE_DeInit+0x30>)
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	78fa      	ldrb	r2, [r7, #3]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800ae50:	4b06      	ldr	r3, [pc, #24]	@ (800ae6c <USBD_COMPOSITE_DeInit+0x34>)
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	78fa      	ldrb	r2, [r7, #3]
 800ae56:	4611      	mov	r1, r2
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	200000dc 	.word	0x200000dc
 800ae6c:	200001fc 	.word	0x200001fc

0800ae70 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	73fb      	strb	r3, [r7, #15]
 800ae7e:	e019      	b.n	800aeb4 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	889b      	ldrh	r3, [r3, #4]
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	4915      	ldr	r1, [pc, #84]	@ (800aee0 <USBD_COMPOSITE_Setup+0x70>)
 800ae8a:	5ccb      	ldrb	r3, [r1, r3]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d007      	beq.n	800aea0 <USBD_COMPOSITE_Setup+0x30>
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	889b      	ldrh	r3, [r3, #4]
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	4912      	ldr	r1, [pc, #72]	@ (800aee4 <USBD_COMPOSITE_Setup+0x74>)
 800ae9a:	5ccb      	ldrb	r3, [r1, r3]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d106      	bne.n	800aeae <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800aea0:	4b11      	ldr	r3, [pc, #68]	@ (800aee8 <USBD_COMPOSITE_Setup+0x78>)
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	4798      	blx	r3
 800aeaa:	4603      	mov	r3, r0
 800aeac:	e014      	b.n	800aed8 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	73fb      	strb	r3, [r7, #15]
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0e2      	beq.n	800ae80 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	889b      	ldrh	r3, [r3, #4]
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	4b0a      	ldr	r3, [pc, #40]	@ (800aeec <USBD_COMPOSITE_Setup+0x7c>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d106      	bne.n	800aed6 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800aec8:	4b09      	ldr	r3, [pc, #36]	@ (800aef0 <USBD_COMPOSITE_Setup+0x80>)
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	e000      	b.n	800aed8 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800aed6:	2303      	movs	r3, #3
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	20001310 	.word	0x20001310
 800aee4:	20001314 	.word	0x20001314
 800aee8:	200000dc 	.word	0x200000dc
 800aeec:	20001650 	.word	0x20001650
 800aef0:	200001fc 	.word	0x200001fc

0800aef4 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]
 800af04:	e01a      	b.n	800af3c <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800af06:	78fa      	ldrb	r2, [r7, #3]
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	4918      	ldr	r1, [pc, #96]	@ (800af6c <USBD_COMPOSITE_DataIn+0x78>)
 800af0c:	5ccb      	ldrb	r3, [r1, r3]
 800af0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af12:	429a      	cmp	r2, r3
 800af14:	d007      	beq.n	800af26 <USBD_COMPOSITE_DataIn+0x32>
 800af16:	78fa      	ldrb	r2, [r7, #3]
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	4915      	ldr	r1, [pc, #84]	@ (800af70 <USBD_COMPOSITE_DataIn+0x7c>)
 800af1c:	5ccb      	ldrb	r3, [r1, r3]
 800af1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af22:	429a      	cmp	r2, r3
 800af24:	d107      	bne.n	800af36 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800af26:	4b13      	ldr	r3, [pc, #76]	@ (800af74 <USBD_COMPOSITE_DataIn+0x80>)
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	78fa      	ldrb	r2, [r7, #3]
 800af2c:	4611      	mov	r1, r2
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4798      	blx	r3
 800af32:	4603      	mov	r3, r0
 800af34:	e015      	b.n	800af62 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	3301      	adds	r3, #1
 800af3a:	73fb      	strb	r3, [r7, #15]
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0e1      	beq.n	800af06 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800af42:	78fa      	ldrb	r2, [r7, #3]
 800af44:	4b0c      	ldr	r3, [pc, #48]	@ (800af78 <USBD_COMPOSITE_DataIn+0x84>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d107      	bne.n	800af60 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800af50:	4b0a      	ldr	r3, [pc, #40]	@ (800af7c <USBD_COMPOSITE_DataIn+0x88>)
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	78fa      	ldrb	r2, [r7, #3]
 800af56:	4611      	mov	r1, r2
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	4798      	blx	r3
 800af5c:	4603      	mov	r3, r0
 800af5e:	e000      	b.n	800af62 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800af60:	2303      	movs	r3, #3
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20001304 	.word	0x20001304
 800af70:	2000130c 	.word	0x2000130c
 800af74:	200000dc 	.word	0x200000dc
 800af78:	200001fa 	.word	0x200001fa
 800af7c:	200001fc 	.word	0x200001fc

0800af80 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800af88:	4b06      	ldr	r3, [pc, #24]	@ (800afa4 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800af90:	4b05      	ldr	r3, [pc, #20]	@ (800afa8 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	200000dc 	.word	0x200000dc
 800afa8:	200001fc 	.word	0x200001fc

0800afac <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b083      	sub	sp, #12
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	460b      	mov	r3, r1
 800affc:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b018:	2300      	movs	r3, #0
 800b01a:	73fb      	strb	r3, [r7, #15]
 800b01c:	e010      	b.n	800b040 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	4a12      	ldr	r2, [pc, #72]	@ (800b06c <USBD_COMPOSITE_DataOut+0x60>)
 800b022:	5cd3      	ldrb	r3, [r2, r3]
 800b024:	78fa      	ldrb	r2, [r7, #3]
 800b026:	429a      	cmp	r2, r3
 800b028:	d107      	bne.n	800b03a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800b02a:	4b11      	ldr	r3, [pc, #68]	@ (800b070 <USBD_COMPOSITE_DataOut+0x64>)
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	78fa      	ldrb	r2, [r7, #3]
 800b030:	4611      	mov	r1, r2
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
 800b036:	4603      	mov	r3, r0
 800b038:	e013      	b.n	800b062 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	3301      	adds	r3, #1
 800b03e:	73fb      	strb	r3, [r7, #15]
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0eb      	beq.n	800b01e <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800b046:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <USBD_COMPOSITE_DataOut+0x68>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	78fa      	ldrb	r2, [r7, #3]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d107      	bne.n	800b060 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800b050:	4b09      	ldr	r3, [pc, #36]	@ (800b078 <USBD_COMPOSITE_DataOut+0x6c>)
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	78fa      	ldrb	r2, [r7, #3]
 800b056:	4611      	mov	r1, r2
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	4798      	blx	r3
 800b05c:	4603      	mov	r3, r0
 800b05e:	e000      	b.n	800b062 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800b060:	2303      	movs	r3, #3
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20001308 	.word	0x20001308
 800b070:	200000dc 	.word	0x200000dc
 800b074:	200001fb 	.word	0x200001fb
 800b078:	200001fc 	.word	0x200001fc

0800b07c <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	226b      	movs	r2, #107	@ 0x6b
 800b088:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800b08a:	4b03      	ldr	r3, [pc, #12]	@ (800b098 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	200015a4 	.word	0x200015a4

0800b09c <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	226b      	movs	r2, #107	@ 0x6b
 800b0a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800b0aa:	4b03      	ldr	r3, [pc, #12]	@ (800b0b8 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	20001538 	.word	0x20001538

0800b0bc <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	226b      	movs	r2, #107	@ 0x6b
 800b0c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800b0ca:	4b03      	ldr	r3, [pc, #12]	@ (800b0d8 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	200015a4 	.word	0x200015a4

0800b0dc <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	220a      	movs	r2, #10
 800b0e8:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800b0ea:	4b03      	ldr	r3, [pc, #12]	@ (800b0f8 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr
 800b0f8:	200001f0 	.word	0x200001f0

0800b0fc <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08a      	sub	sp, #40	@ 0x28
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	460b      	mov	r3, r1
 800b106:	607a      	str	r2, [r7, #4]
 800b108:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800b10a:	4b20      	ldr	r3, [pc, #128]	@ (800b18c <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	7afa      	ldrb	r2, [r7, #11]
 800b110:	429a      	cmp	r2, r3
 800b112:	d836      	bhi.n	800b182 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800b114:	2300      	movs	r3, #0
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	f107 0318 	add.w	r3, r7, #24
 800b11c:	2200      	movs	r2, #0
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	605a      	str	r2, [r3, #4]
 800b122:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b124:	2300      	movs	r3, #0
 800b126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b12a:	e01a      	b.n	800b162 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800b12c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b130:	4a17      	ldr	r2, [pc, #92]	@ (800b190 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800b132:	5cd3      	ldrb	r3, [r2, r3]
 800b134:	7afa      	ldrb	r2, [r7, #11]
 800b136:	429a      	cmp	r2, r3
 800b138:	d10e      	bne.n	800b158 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800b13a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b13e:	f107 0014 	add.w	r0, r7, #20
 800b142:	4a14      	ldr	r2, [pc, #80]	@ (800b194 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800b144:	2110      	movs	r1, #16
 800b146:	f004 fd83 	bl	800fc50 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800b14a:	f107 0314 	add.w	r3, r7, #20
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	4911      	ldr	r1, [pc, #68]	@ (800b198 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800b152:	4618      	mov	r0, r3
 800b154:	f001 fce9 	bl	800cb2a <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b15c:	3301      	adds	r3, #1
 800b15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b162:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0e0      	beq.n	800b12c <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800b16a:	4b0c      	ldr	r3, [pc, #48]	@ (800b19c <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	7afa      	ldrb	r2, [r7, #11]
 800b170:	429a      	cmp	r2, r3
 800b172:	d104      	bne.n	800b17e <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	4908      	ldr	r1, [pc, #32]	@ (800b198 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800b178:	4809      	ldr	r0, [pc, #36]	@ (800b1a0 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800b17a:	f001 fcd6 	bl	800cb2a <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800b17e:	4b06      	ldr	r3, [pc, #24]	@ (800b198 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800b180:	e000      	b.n	800b184 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800b182:	2300      	movs	r3, #0
  }
}
 800b184:	4618      	mov	r0, r3
 800b186:	3728      	adds	r7, #40	@ 0x28
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	200001ec 	.word	0x200001ec
 800b190:	20001318 	.word	0x20001318
 800b194:	08010600 	.word	0x08010600
 800b198:	20001610 	.word	0x20001610
 800b19c:	20001651 	.word	0x20001651
 800b1a0:	08010610 	.word	0x08010610

0800b1a4 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800b1a4:	b590      	push	{r4, r7, lr}
 800b1a6:	b089      	sub	sp, #36	@ 0x24
 800b1a8:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800b1b2:	2381      	movs	r3, #129	@ 0x81
 800b1b4:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800b1be:	4b74      	ldr	r3, [pc, #464]	@ (800b390 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800b1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c2:	1d3a      	adds	r2, r7, #4
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	4798      	blx	r3
 800b1c8:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800b1ca:	4b72      	ldr	r3, [pc, #456]	@ (800b394 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	7ab8      	ldrb	r0, [r7, #10]
 800b1d0:	7afa      	ldrb	r2, [r7, #11]
 800b1d2:	7a79      	ldrb	r1, [r7, #9]
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 fbc5 	bl	800b968 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3309      	adds	r3, #9
 800b1e2:	88ba      	ldrh	r2, [r7, #4]
 800b1e4:	3a09      	subs	r2, #9
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	486b      	ldr	r0, [pc, #428]	@ (800b398 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800b1ea:	f004 fdff 	bl	800fdec <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800b1ee:	4b68      	ldr	r3, [pc, #416]	@ (800b390 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800b1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f2:	1d3a      	adds	r2, r7, #4
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
 800b1f8:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800b1fa:	4b66      	ldr	r3, [pc, #408]	@ (800b394 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	7ab8      	ldrb	r0, [r7, #10]
 800b200:	7afa      	ldrb	r2, [r7, #11]
 800b202:	7a79      	ldrb	r1, [r7, #9]
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	4603      	mov	r3, r0
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fbad 	bl	800b968 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3309      	adds	r3, #9
 800b212:	88ba      	ldrh	r2, [r7, #4]
 800b214:	3a09      	subs	r2, #9
 800b216:	4619      	mov	r1, r3
 800b218:	4860      	ldr	r0, [pc, #384]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800b21a:	f004 fde7 	bl	800fdec <memcpy>

  in_ep_track += 1;
 800b21e:	7afb      	ldrb	r3, [r7, #11]
 800b220:	3301      	adds	r3, #1
 800b222:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800b224:	7abb      	ldrb	r3, [r7, #10]
 800b226:	3301      	adds	r3, #1
 800b228:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800b22a:	7a7b      	ldrb	r3, [r7, #9]
 800b22c:	3301      	adds	r3, #1
 800b22e:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800b230:	4b58      	ldr	r3, [pc, #352]	@ (800b394 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	3301      	adds	r3, #1
 800b236:	b2da      	uxtb	r2, r3
 800b238:	4b56      	ldr	r3, [pc, #344]	@ (800b394 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b23a:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800b23c:	4b58      	ldr	r3, [pc, #352]	@ (800b3a0 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800b23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b240:	1d3a      	adds	r2, r7, #4
 800b242:	4610      	mov	r0, r2
 800b244:	4798      	blx	r3
 800b246:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800b248:	7a7b      	ldrb	r3, [r7, #9]
 800b24a:	3301      	adds	r3, #1
 800b24c:	b2d8      	uxtb	r0, r3
 800b24e:	7afb      	ldrb	r3, [r7, #11]
 800b250:	3301      	adds	r3, #1
 800b252:	b2db      	uxtb	r3, r3
 800b254:	4a4f      	ldr	r2, [pc, #316]	@ (800b394 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b256:	7812      	ldrb	r2, [r2, #0]
 800b258:	7afc      	ldrb	r4, [r7, #11]
 800b25a:	7a79      	ldrb	r1, [r7, #9]
 800b25c:	9202      	str	r2, [sp, #8]
 800b25e:	7aba      	ldrb	r2, [r7, #10]
 800b260:	9201      	str	r2, [sp, #4]
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	4623      	mov	r3, r4
 800b266:	4602      	mov	r2, r0
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff fd43 	bl	800acf4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3309      	adds	r3, #9
 800b272:	88ba      	ldrh	r2, [r7, #4]
 800b274:	3a09      	subs	r2, #9
 800b276:	4619      	mov	r1, r3
 800b278:	484a      	ldr	r0, [pc, #296]	@ (800b3a4 <USBD_COMPOSITE_Mount_Class+0x200>)
 800b27a:	f004 fdb7 	bl	800fdec <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800b27e:	4b48      	ldr	r3, [pc, #288]	@ (800b3a0 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800b280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b282:	1d3a      	adds	r2, r7, #4
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
 800b288:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800b28a:	7a7b      	ldrb	r3, [r7, #9]
 800b28c:	3301      	adds	r3, #1
 800b28e:	b2d8      	uxtb	r0, r3
 800b290:	7afb      	ldrb	r3, [r7, #11]
 800b292:	3301      	adds	r3, #1
 800b294:	b2db      	uxtb	r3, r3
 800b296:	4a3f      	ldr	r2, [pc, #252]	@ (800b394 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b298:	7812      	ldrb	r2, [r2, #0]
 800b29a:	7afc      	ldrb	r4, [r7, #11]
 800b29c:	7a79      	ldrb	r1, [r7, #9]
 800b29e:	9202      	str	r2, [sp, #8]
 800b2a0:	7aba      	ldrb	r2, [r7, #10]
 800b2a2:	9201      	str	r2, [sp, #4]
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	4623      	mov	r3, r4
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7ff fd22 	bl	800acf4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3309      	adds	r3, #9
 800b2b4:	88ba      	ldrh	r2, [r7, #4]
 800b2b6:	3a09      	subs	r2, #9
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	483b      	ldr	r0, [pc, #236]	@ (800b3a8 <USBD_COMPOSITE_Mount_Class+0x204>)
 800b2bc:	f004 fd96 	bl	800fdec <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800b2c0:	7afb      	ldrb	r3, [r7, #11]
 800b2c2:	3302      	adds	r3, #2
 800b2c4:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800b2c6:	7abb      	ldrb	r3, [r7, #10]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800b2cc:	7a7b      	ldrb	r3, [r7, #9]
 800b2ce:	3302      	adds	r3, #2
 800b2d0:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800b2d2:	4b30      	ldr	r3, [pc, #192]	@ (800b394 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	4b2e      	ldr	r3, [pc, #184]	@ (800b394 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b2dc:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800b2de:	236b      	movs	r3, #107	@ 0x6b
 800b2e0:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800b2e2:	4b32      	ldr	r3, [pc, #200]	@ (800b3ac <USBD_COMPOSITE_Mount_Class+0x208>)
 800b2e4:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2209      	movs	r2, #9
 800b2ea:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3302      	adds	r3, #2
 800b2f8:	88fa      	ldrh	r2, [r7, #6]
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800b2fe:	88fb      	ldrh	r3, [r7, #6]
 800b300:	0a1b      	lsrs	r3, r3, #8
 800b302:	b29a      	uxth	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3303      	adds	r3, #3
 800b308:	b2d2      	uxtb	r2, r2
 800b30a:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	3304      	adds	r3, #4
 800b310:	7a7a      	ldrb	r2, [r7, #9]
 800b312:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	3305      	adds	r3, #5
 800b318:	2201      	movs	r2, #1
 800b31a:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3306      	adds	r3, #6
 800b320:	2200      	movs	r2, #0
 800b322:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3307      	adds	r3, #7
 800b328:	22c0      	movs	r2, #192	@ 0xc0
 800b32a:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3308      	adds	r3, #8
 800b330:	2232      	movs	r2, #50	@ 0x32
 800b332:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800b334:	4b1e      	ldr	r3, [pc, #120]	@ (800b3b0 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800b336:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2209      	movs	r2, #9
 800b33c:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3301      	adds	r3, #1
 800b342:	2202      	movs	r2, #2
 800b344:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3302      	adds	r3, #2
 800b34a:	88fa      	ldrh	r2, [r7, #6]
 800b34c:	b2d2      	uxtb	r2, r2
 800b34e:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800b350:	88fb      	ldrh	r3, [r7, #6]
 800b352:	0a1b      	lsrs	r3, r3, #8
 800b354:	b29a      	uxth	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3303      	adds	r3, #3
 800b35a:	b2d2      	uxtb	r2, r2
 800b35c:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3304      	adds	r3, #4
 800b362:	7a7a      	ldrb	r2, [r7, #9]
 800b364:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3305      	adds	r3, #5
 800b36a:	2201      	movs	r2, #1
 800b36c:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3306      	adds	r3, #6
 800b372:	2200      	movs	r2, #0
 800b374:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3307      	adds	r3, #7
 800b37a:	22c0      	movs	r2, #192	@ 0xc0
 800b37c:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3308      	adds	r3, #8
 800b382:	2232      	movs	r2, #50	@ 0x32
 800b384:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800b386:	bf00      	nop
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd90      	pop	{r4, r7, pc}
 800b38e:	bf00      	nop
 800b390:	200001fc 	.word	0x200001fc
 800b394:	200001ec 	.word	0x200001ec
 800b398:	20001541 	.word	0x20001541
 800b39c:	200015ad 	.word	0x200015ad
 800b3a0:	200000dc 	.word	0x200000dc
 800b3a4:	20001561 	.word	0x20001561
 800b3a8:	200015cd 	.word	0x200015cd
 800b3ac:	200015a4 	.word	0x200015a4
 800b3b0:	20001538 	.word	0x20001538

0800b3b4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800b3c0:	4b43      	ldr	r3, [pc, #268]	@ (800b4d0 <USBD_CUSTOM_HID_Init+0x11c>)
 800b3c2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d105      	bne.n	800b3d6 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e077      	b.n	800b4c6 <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	7c1b      	ldrb	r3, [r3, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d11b      	bne.n	800b41e <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b3e6:	4b3b      	ldr	r3, [pc, #236]	@ (800b4d4 <USBD_CUSTOM_HID_Init+0x120>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	f003 020f 	and.w	r2, r3, #15
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	440b      	add	r3, r1
 800b3fa:	3326      	adds	r3, #38	@ 0x26
 800b3fc:	2205      	movs	r2, #5
 800b3fe:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b400:	4b35      	ldr	r3, [pc, #212]	@ (800b4d8 <USBD_CUSTOM_HID_Init+0x124>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f003 020f 	and.w	r2, r3, #15
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b418:	2205      	movs	r2, #5
 800b41a:	801a      	strh	r2, [r3, #0]
 800b41c:	e01a      	b.n	800b454 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b41e:	4b2d      	ldr	r3, [pc, #180]	@ (800b4d4 <USBD_CUSTOM_HID_Init+0x120>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	f003 020f 	and.w	r2, r3, #15
 800b426:	6879      	ldr	r1, [r7, #4]
 800b428:	4613      	mov	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	440b      	add	r3, r1
 800b432:	3326      	adds	r3, #38	@ 0x26
 800b434:	2205      	movs	r2, #5
 800b436:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b438:	4b27      	ldr	r3, [pc, #156]	@ (800b4d8 <USBD_CUSTOM_HID_Init+0x124>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	f003 020f 	and.w	r2, r3, #15
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	440b      	add	r3, r1
 800b44c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b450:	2205      	movs	r2, #5
 800b452:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800b454:	4b1f      	ldr	r3, [pc, #124]	@ (800b4d4 <USBD_CUSTOM_HID_Init+0x120>)
 800b456:	7819      	ldrb	r1, [r3, #0]
 800b458:	2302      	movs	r3, #2
 800b45a:	2203      	movs	r2, #3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f001 fdd6 	bl	800d00e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800b462:	4b1c      	ldr	r3, [pc, #112]	@ (800b4d4 <USBD_CUSTOM_HID_Init+0x120>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	f003 020f 	and.w	r2, r3, #15
 800b46a:	6879      	ldr	r1, [r7, #4]
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	440b      	add	r3, r1
 800b476:	3324      	adds	r3, #36	@ 0x24
 800b478:	2201      	movs	r2, #1
 800b47a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800b47c:	4b16      	ldr	r3, [pc, #88]	@ (800b4d8 <USBD_CUSTOM_HID_Init+0x124>)
 800b47e:	7819      	ldrb	r1, [r3, #0]
 800b480:	2302      	movs	r3, #2
 800b482:	2203      	movs	r2, #3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f001 fdc2 	bl	800d00e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800b48a:	4b13      	ldr	r3, [pc, #76]	@ (800b4d8 <USBD_CUSTOM_HID_Init+0x124>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	f003 020f 	and.w	r2, r3, #15
 800b492:	6879      	ldr	r1, [r7, #4]
 800b494:	4613      	mov	r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	4413      	add	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	440b      	add	r3, r1
 800b49e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800b4b6:	4b08      	ldr	r3, [pc, #32]	@ (800b4d8 <USBD_CUSTOM_HID_Init+0x124>)
 800b4b8:	7819      	ldrb	r1, [r3, #0]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	2302      	movs	r3, #2
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f001 fe94 	bl	800d1ec <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20001654 	.word	0x20001654
 800b4d4:	200001fa 	.word	0x200001fa
 800b4d8:	200001fb 	.word	0x200001fb

0800b4dc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800b4e8:	4b2a      	ldr	r3, [pc, #168]	@ (800b594 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f001 fdb3 	bl	800d05a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800b4f4:	4b27      	ldr	r3, [pc, #156]	@ (800b594 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	f003 020f 	and.w	r2, r3, #15
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	3324      	adds	r3, #36	@ 0x24
 800b50a:	2200      	movs	r2, #0
 800b50c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800b50e:	4b21      	ldr	r3, [pc, #132]	@ (800b594 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f003 020f 	and.w	r2, r3, #15
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	440b      	add	r3, r1
 800b522:	3326      	adds	r3, #38	@ 0x26
 800b524:	2200      	movs	r2, #0
 800b526:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800b528:	4b1b      	ldr	r3, [pc, #108]	@ (800b598 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f001 fd93 	bl	800d05a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800b534:	4b18      	ldr	r3, [pc, #96]	@ (800b598 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f003 020f 	and.w	r2, r3, #15
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b54c:	2200      	movs	r2, #0
 800b54e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800b550:	4b11      	ldr	r3, [pc, #68]	@ (800b598 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	f003 020f 	and.w	r2, r3, #15
 800b558:	6879      	ldr	r1, [r7, #4]
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	440b      	add	r3, r1
 800b564:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b568:	2200      	movs	r2, #0
 800b56a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b572:	2b00      	cmp	r3, #0
 800b574:	d008      	beq.n	800b588 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	200001fa 	.word	0x200001fa
 800b598:	200001fb 	.word	0x200001fb

0800b59c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5ac:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d101      	bne.n	800b5c8 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	e0ed      	b.n	800b7a4 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d052      	beq.n	800b67a <USBD_CUSTOM_HID_Setup+0xde>
 800b5d4:	2b20      	cmp	r3, #32
 800b5d6:	f040 80dd 	bne.w	800b794 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	785b      	ldrb	r3, [r3, #1]
 800b5de:	3b02      	subs	r3, #2
 800b5e0:	2b09      	cmp	r3, #9
 800b5e2:	d842      	bhi.n	800b66a <USBD_CUSTOM_HID_Setup+0xce>
 800b5e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5ec <USBD_CUSTOM_HID_Setup+0x50>)
 800b5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ea:	bf00      	nop
 800b5ec:	0800b645 	.word	0x0800b645
 800b5f0:	0800b623 	.word	0x0800b623
 800b5f4:	0800b66b 	.word	0x0800b66b
 800b5f8:	0800b66b 	.word	0x0800b66b
 800b5fc:	0800b66b 	.word	0x0800b66b
 800b600:	0800b66b 	.word	0x0800b66b
 800b604:	0800b66b 	.word	0x0800b66b
 800b608:	0800b655 	.word	0x0800b655
 800b60c:	0800b633 	.word	0x0800b633
 800b610:	0800b615 	.word	0x0800b615
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	885b      	ldrh	r3, [r3, #2]
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	461a      	mov	r2, r3
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	605a      	str	r2, [r3, #4]
      break;
 800b620:	e02a      	b.n	800b678 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	3304      	adds	r3, #4
 800b626:	2201      	movs	r2, #1
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f001 fadd 	bl	800cbea <USBD_CtlSendData>
      break;
 800b630:	e022      	b.n	800b678 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	885b      	ldrh	r3, [r3, #2]
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	b29b      	uxth	r3, r3
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	461a      	mov	r2, r3
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	609a      	str	r2, [r3, #8]
      break;
 800b642:	e019      	b.n	800b678 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	3308      	adds	r3, #8
 800b648:	2201      	movs	r2, #1
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f001 facc 	bl	800cbea <USBD_CtlSendData>
      break;
 800b652:	e011      	b.n	800b678 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2201      	movs	r2, #1
 800b658:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800b65a:	6939      	ldr	r1, [r7, #16]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	88db      	ldrh	r3, [r3, #6]
 800b660:	461a      	mov	r2, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f001 faed 	bl	800cc42 <USBD_CtlPrepareRx>
      break;
 800b668:	e006      	b.n	800b678 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 fa4b 	bl	800cb08 <USBD_CtlError>
      ret = USBD_FAIL;
 800b672:	2303      	movs	r3, #3
 800b674:	75fb      	strb	r3, [r7, #23]
      break;
 800b676:	bf00      	nop
    }
    break;
 800b678:	e093      	b.n	800b7a2 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	2b0b      	cmp	r3, #11
 800b680:	d87f      	bhi.n	800b782 <USBD_CUSTOM_HID_Setup+0x1e6>
 800b682:	a201      	add	r2, pc, #4	@ (adr r2, 800b688 <USBD_CUSTOM_HID_Setup+0xec>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b6b9 	.word	0x0800b6b9
 800b68c:	0800b791 	.word	0x0800b791
 800b690:	0800b783 	.word	0x0800b783
 800b694:	0800b783 	.word	0x0800b783
 800b698:	0800b783 	.word	0x0800b783
 800b69c:	0800b783 	.word	0x0800b783
 800b6a0:	0800b6e3 	.word	0x0800b6e3
 800b6a4:	0800b783 	.word	0x0800b783
 800b6a8:	0800b783 	.word	0x0800b783
 800b6ac:	0800b783 	.word	0x0800b783
 800b6b0:	0800b731 	.word	0x0800b731
 800b6b4:	0800b75b 	.word	0x0800b75b
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	d107      	bne.n	800b6d4 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b6c4:	f107 030e 	add.w	r3, r7, #14
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 fa8c 	bl	800cbea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b6d2:	e05e      	b.n	800b792 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f001 fa16 	bl	800cb08 <USBD_CtlError>
        ret = USBD_FAIL;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	75fb      	strb	r3, [r7, #23]
      break;
 800b6e0:	e057      	b.n	800b792 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	885b      	ldrh	r3, [r3, #2]
 800b6e6:	0a1b      	lsrs	r3, r3, #8
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	2b22      	cmp	r3, #34	@ 0x22
 800b6ec:	d10b      	bne.n	800b706 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	88db      	ldrh	r3, [r3, #6]
 800b6f2:	2b46      	cmp	r3, #70	@ 0x46
 800b6f4:	bf28      	it	cs
 800b6f6:	2346      	movcs	r3, #70	@ 0x46
 800b6f8:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	61bb      	str	r3, [r7, #24]
 800b704:	e00d      	b.n	800b722 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	885b      	ldrh	r3, [r3, #2]
 800b70a:	0a1b      	lsrs	r3, r3, #8
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	2b21      	cmp	r3, #33	@ 0x21
 800b710:	d107      	bne.n	800b722 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800b712:	4b26      	ldr	r3, [pc, #152]	@ (800b7ac <USBD_CUSTOM_HID_Setup+0x210>)
 800b714:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	88db      	ldrh	r3, [r3, #6]
 800b71a:	2b09      	cmp	r3, #9
 800b71c:	bf28      	it	cs
 800b71e:	2309      	movcs	r3, #9
 800b720:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b722:	8bfb      	ldrh	r3, [r7, #30]
 800b724:	461a      	mov	r2, r3
 800b726:	69b9      	ldr	r1, [r7, #24]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f001 fa5e 	bl	800cbea <USBD_CtlSendData>
      break;
 800b72e:	e030      	b.n	800b792 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b736:	b2db      	uxtb	r3, r3
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d107      	bne.n	800b74c <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	330c      	adds	r3, #12
 800b740:	2201      	movs	r2, #1
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f001 fa50 	bl	800cbea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b74a:	e022      	b.n	800b792 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f001 f9da 	bl	800cb08 <USBD_CtlError>
        ret = USBD_FAIL;
 800b754:	2303      	movs	r3, #3
 800b756:	75fb      	strb	r3, [r7, #23]
      break;
 800b758:	e01b      	b.n	800b792 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b03      	cmp	r3, #3
 800b764:	d106      	bne.n	800b774 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	885b      	ldrh	r3, [r3, #2]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	461a      	mov	r2, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b772:	e00e      	b.n	800b792 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 f9c6 	bl	800cb08 <USBD_CtlError>
        ret = USBD_FAIL;
 800b77c:	2303      	movs	r3, #3
 800b77e:	75fb      	strb	r3, [r7, #23]
      break;
 800b780:	e007      	b.n	800b792 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f001 f9bf 	bl	800cb08 <USBD_CtlError>
      ret = USBD_FAIL;
 800b78a:	2303      	movs	r3, #3
 800b78c:	75fb      	strb	r3, [r7, #23]
      break;
 800b78e:	e000      	b.n	800b792 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800b790:	bf00      	nop
    }
    break;
 800b792:	e006      	b.n	800b7a2 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f001 f9b6 	bl	800cb08 <USBD_CtlError>
    ret = USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	75fb      	strb	r3, [r7, #23]
    break;
 800b7a0:	bf00      	nop
  }
  return (uint8_t)ret;
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3720      	adds	r7, #32
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	200002bc 	.word	0x200002bc

0800b7b0 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e01b      	b.n	800b804 <USBD_CUSTOM_HID_SendReport+0x54>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b7d2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	d110      	bne.n	800b802 <USBD_CUSTOM_HID_SendReport+0x52>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	7d1b      	ldrb	r3, [r3, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <USBD_CUSTOM_HID_SendReport+0x4e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800b7ee:	4b07      	ldr	r3, [pc, #28]	@ (800b80c <USBD_CUSTOM_HID_SendReport+0x5c>)
 800b7f0:	7819      	ldrb	r1, [r3, #0]
 800b7f2:	88fb      	ldrh	r3, [r7, #6]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f001 fcd7 	bl	800d1aa <USBD_LL_Transmit>
 800b7fc:	e001      	b.n	800b802 <USBD_CUSTOM_HID_SendReport+0x52>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e000      	b.n	800b804 <USBD_CUSTOM_HID_SendReport+0x54>
    }
  }
  return (uint8_t)USBD_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	200001fa 	.word	0x200001fa

0800b810 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2229      	movs	r2, #41	@ 0x29
 800b81c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800b81e:	4b03      	ldr	r3, [pc, #12]	@ (800b82c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	20000238 	.word	0x20000238

0800b830 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2229      	movs	r2, #41	@ 0x29
 800b83c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800b83e:	4b03      	ldr	r3, [pc, #12]	@ (800b84c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800b840:	4618      	mov	r0, r3
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	20000264 	.word	0x20000264

0800b850 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2229      	movs	r2, #41	@ 0x29
 800b85c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800b85e:	4b03      	ldr	r3, [pc, #12]	@ (800b86c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	20000290 	.word	0x20000290

0800b870 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b882:	2200      	movs	r2, #0
 800b884:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e00e      	b.n	800b8cc <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	7810      	ldrb	r0, [r2, #0]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	7852      	ldrb	r2, [r2, #1]
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8e2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e011      	b.n	800b912 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d10c      	bne.n	800b910 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	7810      	ldrb	r0, [r2, #0]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	7852      	ldrb	r2, [r2, #1]
 800b906:	4611      	mov	r1, r2
 800b908:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	220a      	movs	r2, #10
 800b928:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b92a:	4b03      	ldr	r3, [pc, #12]	@ (800b938 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	200002c8 	.word	0x200002c8

0800b93c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b94c:	2303      	movs	r3, #3
 800b94e:	e004      	b.n	800b95a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
	...

0800b968 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	4608      	mov	r0, r1
 800b972:	4611      	mov	r1, r2
 800b974:	461a      	mov	r2, r3
 800b976:	4603      	mov	r3, r0
 800b978:	70fb      	strb	r3, [r7, #3]
 800b97a:	460b      	mov	r3, r1
 800b97c:	70bb      	strb	r3, [r7, #2]
 800b97e:	4613      	mov	r3, r2
 800b980:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	330b      	adds	r3, #11
 800b986:	78fa      	ldrb	r2, [r7, #3]
 800b988:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	3311      	adds	r3, #17
 800b98e:	7c3a      	ldrb	r2, [r7, #16]
 800b990:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	331d      	adds	r3, #29
 800b996:	78ba      	ldrb	r2, [r7, #2]
 800b998:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3324      	adds	r3, #36	@ 0x24
 800b99e:	787a      	ldrb	r2, [r7, #1]
 800b9a0:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800b9a2:	4a09      	ldr	r2, [pc, #36]	@ (800b9c8 <USBD_Update_HID_Custom_DESC+0x60>)
 800b9a4:	78bb      	ldrb	r3, [r7, #2]
 800b9a6:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800b9a8:	4a08      	ldr	r2, [pc, #32]	@ (800b9cc <USBD_Update_HID_Custom_DESC+0x64>)
 800b9aa:	787b      	ldrb	r3, [r7, #1]
 800b9ac:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800b9ae:	4a08      	ldr	r2, [pc, #32]	@ (800b9d0 <USBD_Update_HID_Custom_DESC+0x68>)
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800b9b4:	4a07      	ldr	r2, [pc, #28]	@ (800b9d4 <USBD_Update_HID_Custom_DESC+0x6c>)
 800b9b6:	7c3b      	ldrb	r3, [r7, #16]
 800b9b8:	7013      	strb	r3, [r2, #0]
}
 800b9ba:	bf00      	nop
 800b9bc:	370c      	adds	r7, #12
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	200001fa 	.word	0x200001fa
 800b9cc:	200001fb 	.word	0x200001fb
 800b9d0:	20001650 	.word	0x20001650
 800b9d4:	20001651 	.word	0x20001651

0800b9d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e01b      	b.n	800ba28 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	79fa      	ldrb	r2, [r7, #7]
 800ba1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f001 fa7d 	bl	800cf1c <USBD_LL_Init>
 800ba22:	4603      	mov	r3, r0
 800ba24:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3718      	adds	r7, #24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e02d      	b.n	800baa4 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	7c1b      	ldrb	r3, [r3, #16]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d112      	bne.n	800ba7e <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d01e      	beq.n	800baa2 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6c:	f107 020e 	add.w	r2, r7, #14
 800ba70:	4610      	mov	r0, r2
 800ba72:	4798      	blx	r3
 800ba74:	4602      	mov	r2, r0
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800ba7c:	e011      	b.n	800baa2 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00b      	beq.n	800baa2 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba92:	f107 020e 	add.w	r2, r7, #14
 800ba96:	4610      	mov	r0, r2
 800ba98:	4798      	blx	r3
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f001 fa8f 	bl	800cfd8 <USBD_LL_Start>
 800baba:	4603      	mov	r3, r0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	460b      	mov	r3, r1
 800bae4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bae6:	2303      	movs	r3, #3
 800bae8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d009      	beq.n	800bb08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	4611      	mov	r1, r2
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4798      	blx	r3
 800bb04:	4603      	mov	r3, r0
 800bb06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d007      	beq.n	800bb38 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	78fa      	ldrb	r2, [r7, #3]
 800bb32:	4611      	mov	r1, r2
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	4798      	blx	r3
  }

  return USBD_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 ff9d 	bl	800ca94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb68:	461a      	mov	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb76:	f003 031f 	and.w	r3, r3, #31
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d01a      	beq.n	800bbb4 <USBD_LL_SetupStage+0x72>
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d822      	bhi.n	800bbc8 <USBD_LL_SetupStage+0x86>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <USBD_LL_SetupStage+0x4a>
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d00a      	beq.n	800bba0 <USBD_LL_SetupStage+0x5e>
 800bb8a:	e01d      	b.n	800bbc8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fa5d 	bl	800c054 <USBD_StdDevReq>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb9e:	e020      	b.n	800bbe2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fac1 	bl	800c130 <USBD_StdItfReq>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbb2:	e016      	b.n	800bbe2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 fb00 	bl	800c1c2 <USBD_StdEPReq>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	73fb      	strb	r3, [r7, #15]
      break;
 800bbc6:	e00c      	b.n	800bbe2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bbce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f001 fa5e 	bl	800d098 <USBD_LL_StallEP>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe0:	bf00      	nop
  }

  return ret;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbfa:	7afb      	ldrb	r3, [r7, #11]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d138      	bne.n	800bc72 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bc06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d14a      	bne.n	800bca8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	689a      	ldr	r2, [r3, #8]
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d913      	bls.n	800bc46 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	689a      	ldr	r2, [r3, #8]
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	1ad2      	subs	r2, r2, r3
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	4293      	cmp	r3, r2
 800bc36:	bf28      	it	cs
 800bc38:	4613      	movcs	r3, r2
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6879      	ldr	r1, [r7, #4]
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f001 f81c 	bl	800cc7c <USBD_CtlContinueRx>
 800bc44:	e030      	b.n	800bca8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d10b      	bne.n	800bc6a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d005      	beq.n	800bc6a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f001 f817 	bl	800cc9e <USBD_CtlSendStatus>
 800bc70:	e01a      	b.n	800bca8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d114      	bne.n	800bca8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00e      	beq.n	800bca8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	7afa      	ldrb	r2, [r7, #11]
 800bc94:	4611      	mov	r1, r2
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	4798      	blx	r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bc9e:	7dfb      	ldrb	r3, [r7, #23]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	e000      	b.n	800bcaa <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b086      	sub	sp, #24
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	607a      	str	r2, [r7, #4]
 800bcbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bcc0:	7afb      	ldrb	r3, [r7, #11]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d16b      	bne.n	800bd9e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	3314      	adds	r3, #20
 800bcca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d156      	bne.n	800bd84 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	689a      	ldr	r2, [r3, #8]
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d914      	bls.n	800bd0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	689a      	ldr	r2, [r3, #8]
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 ff91 	bl	800cc20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcfe:	2300      	movs	r3, #0
 800bd00:	2200      	movs	r2, #0
 800bd02:	2100      	movs	r1, #0
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f001 fa71 	bl	800d1ec <USBD_LL_PrepareReceive>
 800bd0a:	e03b      	b.n	800bd84 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	68da      	ldr	r2, [r3, #12]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d11c      	bne.n	800bd52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d316      	bcc.n	800bd52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d20f      	bcs.n	800bd52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd32:	2200      	movs	r2, #0
 800bd34:	2100      	movs	r1, #0
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f000 ff72 	bl	800cc20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd44:	2300      	movs	r3, #0
 800bd46:	2200      	movs	r2, #0
 800bd48:	2100      	movs	r1, #0
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f001 fa4e 	bl	800d1ec <USBD_LL_PrepareReceive>
 800bd50:	e018      	b.n	800bd84 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d10b      	bne.n	800bd76 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d005      	beq.n	800bd76 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd76:	2180      	movs	r1, #128	@ 0x80
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f001 f98d 	bl	800d098 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f000 ffa0 	bl	800ccc4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d122      	bne.n	800bdd4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7ff fe98 	bl	800bac4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bd9c:	e01a      	b.n	800bdd4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	d114      	bne.n	800bdd4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00e      	beq.n	800bdd4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	7afa      	ldrb	r2, [r7, #11]
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	4798      	blx	r3
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bdca:	7dfb      	ldrb	r3, [r7, #23]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	e000      	b.n	800bdd6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800be0e:	2303      	movs	r3, #3
 800be10:	e02a      	b.n	800be68 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d009      	beq.n	800be32 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	6852      	ldr	r2, [r2, #4]
 800be2a:	b2d2      	uxtb	r2, r2
 800be2c:	4611      	mov	r1, r2
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be32:	2340      	movs	r3, #64	@ 0x40
 800be34:	2200      	movs	r2, #0
 800be36:	2100      	movs	r1, #0
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f001 f8e8 	bl	800d00e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2201      	movs	r2, #1
 800be42:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2240      	movs	r2, #64	@ 0x40
 800be4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be4e:	2340      	movs	r3, #64	@ 0x40
 800be50:	2200      	movs	r2, #0
 800be52:	2180      	movs	r1, #128	@ 0x80
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f001 f8da 	bl	800d00e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2240      	movs	r2, #64	@ 0x40
 800be64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	78fa      	ldrb	r2, [r7, #3]
 800be80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2204      	movs	r2, #4
 800beaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b04      	cmp	r3, #4
 800bece:	d106      	bne.n	800bede <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800befe:	2303      	movs	r3, #3
 800bf00:	e012      	b.n	800bf28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d10b      	bne.n	800bf26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d005      	beq.n	800bf26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf20:	69db      	ldr	r3, [r3, #28]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bf46:	2303      	movs	r3, #3
 800bf48:	e014      	b.n	800bf74 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d10d      	bne.n	800bf72 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d007      	beq.n	800bf72 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	78fa      	ldrb	r2, [r7, #3]
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d101      	bne.n	800bf96 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e014      	b.n	800bfc0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	d10d      	bne.n	800bfbe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d007      	beq.n	800bfbe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb6:	78fa      	ldrb	r2, [r7, #3]
 800bfb8:	4611      	mov	r1, r2
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b082      	sub	sp, #8
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d009      	beq.n	800c00c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	6852      	ldr	r2, [r2, #4]
 800c004:	b2d2      	uxtb	r2, r2
 800c006:	4611      	mov	r1, r2
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	4798      	blx	r3
  }

  return USBD_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c016:	b480      	push	{r7}
 800c018:	b087      	sub	sp, #28
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	3301      	adds	r3, #1
 800c02c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c034:	8a3b      	ldrh	r3, [r7, #16]
 800c036:	021b      	lsls	r3, r3, #8
 800c038:	b21a      	sxth	r2, r3
 800c03a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c03e:	4313      	orrs	r3, r2
 800c040:	b21b      	sxth	r3, r3
 800c042:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c044:	89fb      	ldrh	r3, [r7, #14]
}
 800c046:	4618      	mov	r0, r3
 800c048:	371c      	adds	r7, #28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
	...

0800c054 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c06a:	2b40      	cmp	r3, #64	@ 0x40
 800c06c:	d005      	beq.n	800c07a <USBD_StdDevReq+0x26>
 800c06e:	2b40      	cmp	r3, #64	@ 0x40
 800c070:	d853      	bhi.n	800c11a <USBD_StdDevReq+0xc6>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00b      	beq.n	800c08e <USBD_StdDevReq+0x3a>
 800c076:	2b20      	cmp	r3, #32
 800c078:	d14f      	bne.n	800c11a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	4798      	blx	r3
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]
      break;
 800c08c:	e04a      	b.n	800c124 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	785b      	ldrb	r3, [r3, #1]
 800c092:	2b09      	cmp	r3, #9
 800c094:	d83b      	bhi.n	800c10e <USBD_StdDevReq+0xba>
 800c096:	a201      	add	r2, pc, #4	@ (adr r2, 800c09c <USBD_StdDevReq+0x48>)
 800c098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c09c:	0800c0f1 	.word	0x0800c0f1
 800c0a0:	0800c105 	.word	0x0800c105
 800c0a4:	0800c10f 	.word	0x0800c10f
 800c0a8:	0800c0fb 	.word	0x0800c0fb
 800c0ac:	0800c10f 	.word	0x0800c10f
 800c0b0:	0800c0cf 	.word	0x0800c0cf
 800c0b4:	0800c0c5 	.word	0x0800c0c5
 800c0b8:	0800c10f 	.word	0x0800c10f
 800c0bc:	0800c0e7 	.word	0x0800c0e7
 800c0c0:	0800c0d9 	.word	0x0800c0d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f9de 	bl	800c488 <USBD_GetDescriptor>
          break;
 800c0cc:	e024      	b.n	800c118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fb55 	bl	800c780 <USBD_SetAddress>
          break;
 800c0d6:	e01f      	b.n	800c118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fb94 	bl	800c808 <USBD_SetConfig>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	73fb      	strb	r3, [r7, #15]
          break;
 800c0e4:	e018      	b.n	800c118 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fc33 	bl	800c954 <USBD_GetConfig>
          break;
 800c0ee:	e013      	b.n	800c118 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fc64 	bl	800c9c0 <USBD_GetStatus>
          break;
 800c0f8:	e00e      	b.n	800c118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 fc93 	bl	800ca28 <USBD_SetFeature>
          break;
 800c102:	e009      	b.n	800c118 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fca2 	bl	800ca50 <USBD_ClrFeature>
          break;
 800c10c:	e004      	b.n	800c118 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fcf9 	bl	800cb08 <USBD_CtlError>
          break;
 800c116:	bf00      	nop
      }
      break;
 800c118:	e004      	b.n	800c124 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fcf3 	bl	800cb08 <USBD_CtlError>
      break;
 800c122:	bf00      	nop
  }

  return ret;
 800c124:	7bfb      	ldrb	r3, [r7, #15]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop

0800c130 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c146:	2b40      	cmp	r3, #64	@ 0x40
 800c148:	d005      	beq.n	800c156 <USBD_StdItfReq+0x26>
 800c14a:	2b40      	cmp	r3, #64	@ 0x40
 800c14c:	d82f      	bhi.n	800c1ae <USBD_StdItfReq+0x7e>
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <USBD_StdItfReq+0x26>
 800c152:	2b20      	cmp	r3, #32
 800c154:	d12b      	bne.n	800c1ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	3b01      	subs	r3, #1
 800c160:	2b02      	cmp	r3, #2
 800c162:	d81d      	bhi.n	800c1a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	889b      	ldrh	r3, [r3, #4]
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b0f      	cmp	r3, #15
 800c16c:	d813      	bhi.n	800c196 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	6839      	ldr	r1, [r7, #0]
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	4798      	blx	r3
 800c17c:	4603      	mov	r3, r0
 800c17e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	88db      	ldrh	r3, [r3, #6]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d110      	bne.n	800c1aa <USBD_StdItfReq+0x7a>
 800c188:	7bfb      	ldrb	r3, [r7, #15]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10d      	bne.n	800c1aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fd85 	bl	800cc9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c194:	e009      	b.n	800c1aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fcb5 	bl	800cb08 <USBD_CtlError>
          break;
 800c19e:	e004      	b.n	800c1aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fcb0 	bl	800cb08 <USBD_CtlError>
          break;
 800c1a8:	e000      	b.n	800c1ac <USBD_StdItfReq+0x7c>
          break;
 800c1aa:	bf00      	nop
      }
      break;
 800c1ac:	e004      	b.n	800c1b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fca9 	bl	800cb08 <USBD_CtlError>
      break;
 800c1b6:	bf00      	nop
  }

  return ret;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	889b      	ldrh	r3, [r3, #4]
 800c1d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1de:	2b40      	cmp	r3, #64	@ 0x40
 800c1e0:	d007      	beq.n	800c1f2 <USBD_StdEPReq+0x30>
 800c1e2:	2b40      	cmp	r3, #64	@ 0x40
 800c1e4:	f200 8145 	bhi.w	800c472 <USBD_StdEPReq+0x2b0>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00c      	beq.n	800c206 <USBD_StdEPReq+0x44>
 800c1ec:	2b20      	cmp	r3, #32
 800c1ee:	f040 8140 	bne.w	800c472 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	4798      	blx	r3
 800c200:	4603      	mov	r3, r0
 800c202:	73fb      	strb	r3, [r7, #15]
      break;
 800c204:	e13a      	b.n	800c47c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	785b      	ldrb	r3, [r3, #1]
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d007      	beq.n	800c21e <USBD_StdEPReq+0x5c>
 800c20e:	2b03      	cmp	r3, #3
 800c210:	f300 8129 	bgt.w	800c466 <USBD_StdEPReq+0x2a4>
 800c214:	2b00      	cmp	r3, #0
 800c216:	d07f      	beq.n	800c318 <USBD_StdEPReq+0x156>
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d03c      	beq.n	800c296 <USBD_StdEPReq+0xd4>
 800c21c:	e123      	b.n	800c466 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b02      	cmp	r3, #2
 800c228:	d002      	beq.n	800c230 <USBD_StdEPReq+0x6e>
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	d016      	beq.n	800c25c <USBD_StdEPReq+0x9a>
 800c22e:	e02c      	b.n	800c28a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00d      	beq.n	800c252 <USBD_StdEPReq+0x90>
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	2b80      	cmp	r3, #128	@ 0x80
 800c23a:	d00a      	beq.n	800c252 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
 800c23e:	4619      	mov	r1, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 ff29 	bl	800d098 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c246:	2180      	movs	r1, #128	@ 0x80
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 ff25 	bl	800d098 <USBD_LL_StallEP>
 800c24e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c250:	e020      	b.n	800c294 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c252:	6839      	ldr	r1, [r7, #0]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fc57 	bl	800cb08 <USBD_CtlError>
              break;
 800c25a:	e01b      	b.n	800c294 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	885b      	ldrh	r3, [r3, #2]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10e      	bne.n	800c282 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c264:	7bbb      	ldrb	r3, [r7, #14]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00b      	beq.n	800c282 <USBD_StdEPReq+0xc0>
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	2b80      	cmp	r3, #128	@ 0x80
 800c26e:	d008      	beq.n	800c282 <USBD_StdEPReq+0xc0>
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	88db      	ldrh	r3, [r3, #6]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d104      	bne.n	800c282 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c278:	7bbb      	ldrb	r3, [r7, #14]
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 ff0b 	bl	800d098 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fd0b 	bl	800cc9e <USBD_CtlSendStatus>

              break;
 800c288:	e004      	b.n	800c294 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fc3b 	bl	800cb08 <USBD_CtlError>
              break;
 800c292:	bf00      	nop
          }
          break;
 800c294:	e0ec      	b.n	800c470 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d002      	beq.n	800c2a8 <USBD_StdEPReq+0xe6>
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d016      	beq.n	800c2d4 <USBD_StdEPReq+0x112>
 800c2a6:	e030      	b.n	800c30a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00d      	beq.n	800c2ca <USBD_StdEPReq+0x108>
 800c2ae:	7bbb      	ldrb	r3, [r7, #14]
 800c2b0:	2b80      	cmp	r3, #128	@ 0x80
 800c2b2:	d00a      	beq.n	800c2ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 feed 	bl	800d098 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2be:	2180      	movs	r1, #128	@ 0x80
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fee9 	bl	800d098 <USBD_LL_StallEP>
 800c2c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2c8:	e025      	b.n	800c316 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c2ca:	6839      	ldr	r1, [r7, #0]
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fc1b 	bl	800cb08 <USBD_CtlError>
              break;
 800c2d2:	e020      	b.n	800c316 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	885b      	ldrh	r3, [r3, #2]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d11b      	bne.n	800c314 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
 800c2de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d004      	beq.n	800c2f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fef3 	bl	800d0d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fcd4 	bl	800cc9e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	4798      	blx	r3
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c308:	e004      	b.n	800c314 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fbfb 	bl	800cb08 <USBD_CtlError>
              break;
 800c312:	e000      	b.n	800c316 <USBD_StdEPReq+0x154>
              break;
 800c314:	bf00      	nop
          }
          break;
 800c316:	e0ab      	b.n	800c470 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b02      	cmp	r3, #2
 800c322:	d002      	beq.n	800c32a <USBD_StdEPReq+0x168>
 800c324:	2b03      	cmp	r3, #3
 800c326:	d032      	beq.n	800c38e <USBD_StdEPReq+0x1cc>
 800c328:	e097      	b.n	800c45a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d007      	beq.n	800c340 <USBD_StdEPReq+0x17e>
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	2b80      	cmp	r3, #128	@ 0x80
 800c334:	d004      	beq.n	800c340 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fbe5 	bl	800cb08 <USBD_CtlError>
                break;
 800c33e:	e091      	b.n	800c464 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c344:	2b00      	cmp	r3, #0
 800c346:	da0b      	bge.n	800c360 <USBD_StdEPReq+0x19e>
 800c348:	7bbb      	ldrb	r3, [r7, #14]
 800c34a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c34e:	4613      	mov	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	3310      	adds	r3, #16
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	4413      	add	r3, r2
 800c35c:	3304      	adds	r3, #4
 800c35e:	e00b      	b.n	800c378 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c366:	4613      	mov	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	4413      	add	r3, r2
 800c376:	3304      	adds	r3, #4
 800c378:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2200      	movs	r2, #0
 800c37e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	2202      	movs	r2, #2
 800c384:	4619      	mov	r1, r3
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fc2f 	bl	800cbea <USBD_CtlSendData>
              break;
 800c38c:	e06a      	b.n	800c464 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c38e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c392:	2b00      	cmp	r3, #0
 800c394:	da11      	bge.n	800c3ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c396:	7bbb      	ldrb	r3, [r7, #14]
 800c398:	f003 020f 	and.w	r2, r3, #15
 800c39c:	6879      	ldr	r1, [r7, #4]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	440b      	add	r3, r1
 800c3a8:	3324      	adds	r3, #36	@ 0x24
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d117      	bne.n	800c3e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fba8 	bl	800cb08 <USBD_CtlError>
                  break;
 800c3b8:	e054      	b.n	800c464 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	f003 020f 	and.w	r2, r3, #15
 800c3c0:	6879      	ldr	r1, [r7, #4]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	440b      	add	r3, r1
 800c3cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d104      	bne.n	800c3e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c3d6:	6839      	ldr	r1, [r7, #0]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fb95 	bl	800cb08 <USBD_CtlError>
                  break;
 800c3de:	e041      	b.n	800c464 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	da0b      	bge.n	800c400 <USBD_StdEPReq+0x23e>
 800c3e8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	3310      	adds	r3, #16
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	e00b      	b.n	800c418 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c400:	7bbb      	ldrb	r3, [r7, #14]
 800c402:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c406:	4613      	mov	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	4413      	add	r3, r2
 800c416:	3304      	adds	r3, #4
 800c418:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <USBD_StdEPReq+0x264>
 800c420:	7bbb      	ldrb	r3, [r7, #14]
 800c422:	2b80      	cmp	r3, #128	@ 0x80
 800c424:	d103      	bne.n	800c42e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	e00e      	b.n	800c44c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c42e:	7bbb      	ldrb	r3, [r7, #14]
 800c430:	4619      	mov	r1, r3
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fe6e 	bl	800d114 <USBD_LL_IsStallEP>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2201      	movs	r2, #1
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	e002      	b.n	800c44c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2202      	movs	r2, #2
 800c450:	4619      	mov	r1, r3
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 fbc9 	bl	800cbea <USBD_CtlSendData>
              break;
 800c458:	e004      	b.n	800c464 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c45a:	6839      	ldr	r1, [r7, #0]
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 fb53 	bl	800cb08 <USBD_CtlError>
              break;
 800c462:	bf00      	nop
          }
          break;
 800c464:	e004      	b.n	800c470 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c466:	6839      	ldr	r1, [r7, #0]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fb4d 	bl	800cb08 <USBD_CtlError>
          break;
 800c46e:	bf00      	nop
      }
      break;
 800c470:	e004      	b.n	800c47c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 fb47 	bl	800cb08 <USBD_CtlError>
      break;
 800c47a:	bf00      	nop
  }

  return ret;
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c492:	2300      	movs	r3, #0
 800c494:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c496:	2300      	movs	r3, #0
 800c498:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c49a:	2300      	movs	r3, #0
 800c49c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	885b      	ldrh	r3, [r3, #2]
 800c4a2:	0a1b      	lsrs	r3, r3, #8
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	2b06      	cmp	r3, #6
 800c4aa:	f200 813b 	bhi.w	800c724 <USBD_GetDescriptor+0x29c>
 800c4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b4 <USBD_GetDescriptor+0x2c>)
 800c4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b4:	0800c4d1 	.word	0x0800c4d1
 800c4b8:	0800c4e9 	.word	0x0800c4e9
 800c4bc:	0800c529 	.word	0x0800c529
 800c4c0:	0800c725 	.word	0x0800c725
 800c4c4:	0800c725 	.word	0x0800c725
 800c4c8:	0800c6c5 	.word	0x0800c6c5
 800c4cc:	0800c6f1 	.word	0x0800c6f1
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	7c12      	ldrb	r2, [r2, #16]
 800c4dc:	f107 0108 	add.w	r1, r7, #8
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	4798      	blx	r3
 800c4e4:	60f8      	str	r0, [r7, #12]
      break;
 800c4e6:	e125      	b.n	800c734 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	7c1b      	ldrb	r3, [r3, #16]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10d      	bne.n	800c50c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f8:	f107 0208 	add.w	r2, r7, #8
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	4798      	blx	r3
 800c500:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3301      	adds	r3, #1
 800c506:	2202      	movs	r2, #2
 800c508:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c50a:	e113      	b.n	800c734 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c514:	f107 0208 	add.w	r2, r7, #8
 800c518:	4610      	mov	r0, r2
 800c51a:	4798      	blx	r3
 800c51c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3301      	adds	r3, #1
 800c522:	2202      	movs	r2, #2
 800c524:	701a      	strb	r2, [r3, #0]
      break;
 800c526:	e105      	b.n	800c734 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	885b      	ldrh	r3, [r3, #2]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b05      	cmp	r3, #5
 800c530:	f200 80ac 	bhi.w	800c68c <USBD_GetDescriptor+0x204>
 800c534:	a201      	add	r2, pc, #4	@ (adr r2, 800c53c <USBD_GetDescriptor+0xb4>)
 800c536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53a:	bf00      	nop
 800c53c:	0800c555 	.word	0x0800c555
 800c540:	0800c589 	.word	0x0800c589
 800c544:	0800c5bd 	.word	0x0800c5bd
 800c548:	0800c5f1 	.word	0x0800c5f1
 800c54c:	0800c625 	.word	0x0800c625
 800c550:	0800c659 	.word	0x0800c659
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	7c12      	ldrb	r2, [r2, #16]
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c576:	e0a4      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fac4 	bl	800cb08 <USBD_CtlError>
            err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
          break;
 800c586:	e09c      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	7c12      	ldrb	r2, [r2, #16]
 800c5a0:	f107 0108 	add.w	r1, r7, #8
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4798      	blx	r3
 800c5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5aa:	e08a      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 faaa 	bl	800cb08 <USBD_CtlError>
            err++;
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ba:	e082      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	7c12      	ldrb	r2, [r2, #16]
 800c5d4:	f107 0108 	add.w	r1, r7, #8
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4798      	blx	r3
 800c5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5de:	e070      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fa90 	bl	800cb08 <USBD_CtlError>
            err++;
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ee:	e068      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00b      	beq.n	800c614 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	7c12      	ldrb	r2, [r2, #16]
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
 800c610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c612:	e056      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa76 	bl	800cb08 <USBD_CtlError>
            err++;
 800c61c:	7afb      	ldrb	r3, [r7, #11]
 800c61e:	3301      	adds	r3, #1
 800c620:	72fb      	strb	r3, [r7, #11]
          break;
 800c622:	e04e      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	7c12      	ldrb	r2, [r2, #16]
 800c63c:	f107 0108 	add.w	r1, r7, #8
 800c640:	4610      	mov	r0, r2
 800c642:	4798      	blx	r3
 800c644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c646:	e03c      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fa5c 	bl	800cb08 <USBD_CtlError>
            err++;
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	3301      	adds	r3, #1
 800c654:	72fb      	strb	r3, [r7, #11]
          break;
 800c656:	e034      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	7c12      	ldrb	r2, [r2, #16]
 800c670:	f107 0108 	add.w	r1, r7, #8
 800c674:	4610      	mov	r0, r2
 800c676:	4798      	blx	r3
 800c678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c67a:	e022      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fa42 	bl	800cb08 <USBD_CtlError>
            err++;
 800c684:	7afb      	ldrb	r3, [r7, #11]
 800c686:	3301      	adds	r3, #1
 800c688:	72fb      	strb	r3, [r7, #11]
          break;
 800c68a:	e01a      	b.n	800c6c2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00c      	beq.n	800c6b2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c69e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	8852      	ldrh	r2, [r2, #2]
 800c6a4:	b2d1      	uxtb	r1, r2
 800c6a6:	f107 0208 	add.w	r2, r7, #8
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	4798      	blx	r3
 800c6ae:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800c6b0:	e006      	b.n	800c6c0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800c6b2:	6839      	ldr	r1, [r7, #0]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fa27 	bl	800cb08 <USBD_CtlError>
            err++;
 800c6ba:	7afb      	ldrb	r3, [r7, #11]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	72fb      	strb	r3, [r7, #11]
          break;
 800c6c0:	bf00      	nop
      }
      break;
 800c6c2:	e037      	b.n	800c734 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7c1b      	ldrb	r3, [r3, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d109      	bne.n	800c6e0 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6d4:	f107 0208 	add.w	r2, r7, #8
 800c6d8:	4610      	mov	r0, r2
 800c6da:	4798      	blx	r3
 800c6dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6de:	e029      	b.n	800c734 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fa10 	bl	800cb08 <USBD_CtlError>
        err++;
 800c6e8:	7afb      	ldrb	r3, [r7, #11]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	72fb      	strb	r3, [r7, #11]
      break;
 800c6ee:	e021      	b.n	800c734 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	7c1b      	ldrb	r3, [r3, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10d      	bne.n	800c714 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c700:	f107 0208 	add.w	r2, r7, #8
 800c704:	4610      	mov	r0, r2
 800c706:	4798      	blx	r3
 800c708:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3301      	adds	r3, #1
 800c70e:	2207      	movs	r2, #7
 800c710:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c712:	e00f      	b.n	800c734 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f9f6 	bl	800cb08 <USBD_CtlError>
        err++;
 800c71c:	7afb      	ldrb	r3, [r7, #11]
 800c71e:	3301      	adds	r3, #1
 800c720:	72fb      	strb	r3, [r7, #11]
      break;
 800c722:	e007      	b.n	800c734 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f9ee 	bl	800cb08 <USBD_CtlError>
      err++;
 800c72c:	7afb      	ldrb	r3, [r7, #11]
 800c72e:	3301      	adds	r3, #1
 800c730:	72fb      	strb	r3, [r7, #11]
      break;
 800c732:	bf00      	nop
  }

  if (err != 0U)
 800c734:	7afb      	ldrb	r3, [r7, #11]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d11e      	bne.n	800c778 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	88db      	ldrh	r3, [r3, #6]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d016      	beq.n	800c770 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800c742:	893b      	ldrh	r3, [r7, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00e      	beq.n	800c766 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	88da      	ldrh	r2, [r3, #6]
 800c74c:	893b      	ldrh	r3, [r7, #8]
 800c74e:	4293      	cmp	r3, r2
 800c750:	bf28      	it	cs
 800c752:	4613      	movcs	r3, r2
 800c754:	b29b      	uxth	r3, r3
 800c756:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c758:	893b      	ldrh	r3, [r7, #8]
 800c75a:	461a      	mov	r2, r3
 800c75c:	68f9      	ldr	r1, [r7, #12]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fa43 	bl	800cbea <USBD_CtlSendData>
 800c764:	e009      	b.n	800c77a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f9cd 	bl	800cb08 <USBD_CtlError>
 800c76e:	e004      	b.n	800c77a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fa94 	bl	800cc9e <USBD_CtlSendStatus>
 800c776:	e000      	b.n	800c77a <USBD_GetDescriptor+0x2f2>
    return;
 800c778:	bf00      	nop
  }
}
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	889b      	ldrh	r3, [r3, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d131      	bne.n	800c7f6 <USBD_SetAddress+0x76>
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	88db      	ldrh	r3, [r3, #6]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d12d      	bne.n	800c7f6 <USBD_SetAddress+0x76>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	885b      	ldrh	r3, [r3, #2]
 800c79e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7a0:	d829      	bhi.n	800c7f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	885b      	ldrh	r3, [r3, #2]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	d104      	bne.n	800c7c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f9a3 	bl	800cb08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7c2:	e01d      	b.n	800c800 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7bfa      	ldrb	r2, [r7, #15]
 800c7c8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fccb 	bl	800d16c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fa61 	bl	800cc9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d004      	beq.n	800c7ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7ea:	e009      	b.n	800c800 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f4:	e004      	b.n	800c800 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f985 	bl	800cb08 <USBD_CtlError>
  }
}
 800c7fe:	bf00      	nop
 800c800:	bf00      	nop
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	885b      	ldrh	r3, [r3, #2]
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	4b4c      	ldr	r3, [pc, #304]	@ (800c950 <USBD_SetConfig+0x148>)
 800c81e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c820:	4b4b      	ldr	r3, [pc, #300]	@ (800c950 <USBD_SetConfig+0x148>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d905      	bls.n	800c834 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f96c 	bl	800cb08 <USBD_CtlError>
    return USBD_FAIL;
 800c830:	2303      	movs	r3, #3
 800c832:	e088      	b.n	800c946 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d002      	beq.n	800c846 <USBD_SetConfig+0x3e>
 800c840:	2b03      	cmp	r3, #3
 800c842:	d025      	beq.n	800c890 <USBD_SetConfig+0x88>
 800c844:	e071      	b.n	800c92a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c846:	4b42      	ldr	r3, [pc, #264]	@ (800c950 <USBD_SetConfig+0x148>)
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d01c      	beq.n	800c888 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c84e:	4b40      	ldr	r3, [pc, #256]	@ (800c950 <USBD_SetConfig+0x148>)
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	461a      	mov	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c858:	4b3d      	ldr	r3, [pc, #244]	@ (800c950 <USBD_SetConfig+0x148>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	4619      	mov	r1, r3
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7ff f93b 	bl	800bada <USBD_SetClassConfig>
 800c864:	4603      	mov	r3, r0
 800c866:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c868:	7bfb      	ldrb	r3, [r7, #15]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d004      	beq.n	800c878 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c86e:	6839      	ldr	r1, [r7, #0]
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f949 	bl	800cb08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c876:	e065      	b.n	800c944 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fa10 	bl	800cc9e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2203      	movs	r2, #3
 800c882:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c886:	e05d      	b.n	800c944 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 fa08 	bl	800cc9e <USBD_CtlSendStatus>
      break;
 800c88e:	e059      	b.n	800c944 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c890:	4b2f      	ldr	r3, [pc, #188]	@ (800c950 <USBD_SetConfig+0x148>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d112      	bne.n	800c8be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2202      	movs	r2, #2
 800c89c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c8a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c950 <USBD_SetConfig+0x148>)
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8aa:	4b29      	ldr	r3, [pc, #164]	@ (800c950 <USBD_SetConfig+0x148>)
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7ff f92e 	bl	800bb12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f9f1 	bl	800cc9e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8bc:	e042      	b.n	800c944 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c8be:	4b24      	ldr	r3, [pc, #144]	@ (800c950 <USBD_SetConfig+0x148>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d02a      	beq.n	800c922 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7ff f91c 	bl	800bb12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c8da:	4b1d      	ldr	r3, [pc, #116]	@ (800c950 <USBD_SetConfig+0x148>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c950 <USBD_SetConfig+0x148>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff f8f5 	bl	800bada <USBD_SetClassConfig>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00f      	beq.n	800c91a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f903 	bl	800cb08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	b2db      	uxtb	r3, r3
 800c908:	4619      	mov	r1, r3
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7ff f901 	bl	800bb12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2202      	movs	r2, #2
 800c914:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c918:	e014      	b.n	800c944 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f9bf 	bl	800cc9e <USBD_CtlSendStatus>
      break;
 800c920:	e010      	b.n	800c944 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f9bb 	bl	800cc9e <USBD_CtlSendStatus>
      break;
 800c928:	e00c      	b.n	800c944 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 f8eb 	bl	800cb08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c932:	4b07      	ldr	r3, [pc, #28]	@ (800c950 <USBD_SetConfig+0x148>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f7ff f8ea 	bl	800bb12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c93e:	2303      	movs	r3, #3
 800c940:	73fb      	strb	r3, [r7, #15]
      break;
 800c942:	bf00      	nop
  }

  return ret;
 800c944:	7bfb      	ldrb	r3, [r7, #15]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	2000166c 	.word	0x2000166c

0800c954 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	88db      	ldrh	r3, [r3, #6]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d004      	beq.n	800c970 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f8cd 	bl	800cb08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c96e:	e023      	b.n	800c9b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	dc02      	bgt.n	800c982 <USBD_GetConfig+0x2e>
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	dc03      	bgt.n	800c988 <USBD_GetConfig+0x34>
 800c980:	e015      	b.n	800c9ae <USBD_GetConfig+0x5a>
 800c982:	2b03      	cmp	r3, #3
 800c984:	d00b      	beq.n	800c99e <USBD_GetConfig+0x4a>
 800c986:	e012      	b.n	800c9ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3308      	adds	r3, #8
 800c992:	2201      	movs	r2, #1
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 f927 	bl	800cbea <USBD_CtlSendData>
        break;
 800c99c:	e00c      	b.n	800c9b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f91f 	bl	800cbea <USBD_CtlSendData>
        break;
 800c9ac:	e004      	b.n	800c9b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f8a9 	bl	800cb08 <USBD_CtlError>
        break;
 800c9b6:	bf00      	nop
}
 800c9b8:	bf00      	nop
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d81e      	bhi.n	800ca16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	88db      	ldrh	r3, [r3, #6]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d004      	beq.n	800c9ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c9e0:	6839      	ldr	r1, [r7, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f890 	bl	800cb08 <USBD_CtlError>
        break;
 800c9e8:	e01a      	b.n	800ca20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d005      	beq.n	800ca06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	f043 0202 	orr.w	r2, r3, #2
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	330c      	adds	r3, #12
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f8eb 	bl	800cbea <USBD_CtlSendData>
      break;
 800ca14:	e004      	b.n	800ca20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f875 	bl	800cb08 <USBD_CtlError>
      break;
 800ca1e:	bf00      	nop
  }
}
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	885b      	ldrh	r3, [r3, #2]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d106      	bne.n	800ca48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f92b 	bl	800cc9e <USBD_CtlSendStatus>
  }
}
 800ca48:	bf00      	nop
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	3b01      	subs	r3, #1
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d80b      	bhi.n	800ca80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	885b      	ldrh	r3, [r3, #2]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d10c      	bne.n	800ca8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f910 	bl	800cc9e <USBD_CtlSendStatus>
      }
      break;
 800ca7e:	e004      	b.n	800ca8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f840 	bl	800cb08 <USBD_CtlError>
      break;
 800ca88:	e000      	b.n	800ca8c <USBD_ClrFeature+0x3c>
      break;
 800ca8a:	bf00      	nop
  }
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	781a      	ldrb	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3301      	adds	r3, #1
 800caae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	781a      	ldrb	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	3301      	adds	r3, #1
 800cabc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7ff faa9 	bl	800c016 <SWAPBYTE>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3301      	adds	r3, #1
 800cad0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3301      	adds	r3, #1
 800cad6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff fa9c 	bl	800c016 <SWAPBYTE>
 800cade:	4603      	mov	r3, r0
 800cae0:	461a      	mov	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	3301      	adds	r3, #1
 800caea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3301      	adds	r3, #1
 800caf0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f7ff fa8f 	bl	800c016 <SWAPBYTE>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	80da      	strh	r2, [r3, #6]
}
 800cb00:	bf00      	nop
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb12:	2180      	movs	r1, #128	@ 0x80
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fabf 	bl	800d098 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fabb 	bl	800d098 <USBD_LL_StallEP>
}
 800cb22:	bf00      	nop
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b086      	sub	sp, #24
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	60f8      	str	r0, [r7, #12]
 800cb32:	60b9      	str	r1, [r7, #8]
 800cb34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb36:	2300      	movs	r3, #0
 800cb38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d036      	beq.n	800cbae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cb44:	6938      	ldr	r0, [r7, #16]
 800cb46:	f000 f836 	bl	800cbb6 <USBD_GetLen>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	005b      	lsls	r3, r3, #1
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	7812      	ldrb	r2, [r2, #0]
 800cb62:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
 800cb66:	3301      	adds	r3, #1
 800cb68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb6a:	7dfb      	ldrb	r3, [r7, #23]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	4413      	add	r3, r2
 800cb70:	2203      	movs	r2, #3
 800cb72:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb74:	7dfb      	ldrb	r3, [r7, #23]
 800cb76:	3301      	adds	r3, #1
 800cb78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb7a:	e013      	b.n	800cba4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	4413      	add	r3, r2
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	7812      	ldrb	r2, [r2, #0]
 800cb86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	613b      	str	r3, [r7, #16]
    idx++;
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	3301      	adds	r3, #1
 800cb92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb94:	7dfb      	ldrb	r3, [r7, #23]
 800cb96:	68ba      	ldr	r2, [r7, #8]
 800cb98:	4413      	add	r3, r2
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
 800cba0:	3301      	adds	r3, #1
 800cba2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1e7      	bne.n	800cb7c <USBD_GetString+0x52>
 800cbac:	e000      	b.n	800cbb0 <USBD_GetString+0x86>
    return;
 800cbae:	bf00      	nop
  }
}
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b085      	sub	sp, #20
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cbc6:	e005      	b.n	800cbd4 <USBD_GetLen+0x1e>
  {
    len++;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1f5      	bne.n	800cbc8 <USBD_GetLen+0x12>
  }

  return len;
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b084      	sub	sp, #16
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2202      	movs	r2, #2
 800cbfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	2100      	movs	r1, #0
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f000 faca 	bl	800d1aa <USBD_LL_Transmit>

  return USBD_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	2100      	movs	r1, #0
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f000 fab9 	bl	800d1aa <USBD_LL_Transmit>

  return USBD_OK;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b084      	sub	sp, #16
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2203      	movs	r2, #3
 800cc52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f000 fabd 	bl	800d1ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f000 faac 	bl	800d1ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b082      	sub	sp, #8
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2204      	movs	r2, #4
 800ccaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ccae:	2300      	movs	r3, #0
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fa78 	bl	800d1aa <USBD_LL_Transmit>

  return USBD_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2205      	movs	r2, #5
 800ccd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2100      	movs	r1, #0
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fa86 	bl	800d1ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b082      	sub	sp, #8
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	70fb      	strb	r3, [r7, #3]
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800ccfa:	883b      	ldrh	r3, [r7, #0]
 800ccfc:	089b      	lsrs	r3, r3, #2
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	78fb      	ldrb	r3, [r7, #3]
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7f9 fa57 	bl	80061b8 <HAL_PCDEx_SetTxFiFo>
 800cd0a:	4603      	mov	r3, r0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800cd20:	887b      	ldrh	r3, [r7, #2]
 800cd22:	089b      	lsrs	r3, r3, #2
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	4619      	mov	r1, r3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7f9 fa8c 	bl	8006246 <HAL_PCDEx_SetRxFiFo>
 800cd2e:	4603      	mov	r3, r0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4610      	mov	r0, r2
 800cd50:	f7fe fef7 	bl	800bb42 <USBD_LL_SetupStage>
}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cd6e:	78fa      	ldrb	r2, [r7, #3]
 800cd70:	6879      	ldr	r1, [r7, #4]
 800cd72:	4613      	mov	r3, r2
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	4413      	add	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	440b      	add	r3, r1
 800cd7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	78fb      	ldrb	r3, [r7, #3]
 800cd84:	4619      	mov	r1, r3
 800cd86:	f7fe ff31 	bl	800bbec <USBD_LL_DataOutStage>
}
 800cd8a:	bf00      	nop
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b082      	sub	sp, #8
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cda4:	78fa      	ldrb	r2, [r7, #3]
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	4413      	add	r3, r2
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	440b      	add	r3, r1
 800cdb2:	3320      	adds	r3, #32
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	78fb      	ldrb	r3, [r7, #3]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	f7fe ff7a 	bl	800bcb2 <USBD_LL_DataInStage>
}
 800cdbe:	bf00      	nop
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b082      	sub	sp, #8
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff f889 	bl	800beec <USBD_LL_SOF>
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b084      	sub	sp, #16
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cdea:	2301      	movs	r3, #1
 800cdec:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	79db      	ldrb	r3, [r3, #7]
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d102      	bne.n	800cdfc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	73fb      	strb	r3, [r7, #15]
 800cdfa:	e008      	b.n	800ce0e <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	79db      	ldrb	r3, [r3, #7]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d102      	bne.n	800ce0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800ce04:	2300      	movs	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]
 800ce08:	e001      	b.n	800ce0e <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800ce0a:	f7f5 f9bf 	bl	800218c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce14:	7bfa      	ldrb	r2, [r7, #15]
 800ce16:	4611      	mov	r1, r2
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff f829 	bl	800be70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe ffda 	bl	800bdde <USBD_LL_Reset>
}
 800ce2a:	bf00      	nop
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff f824 	bl	800be90 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	6812      	ldr	r2, [r2, #0]
 800ce56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce5a:	f043 0301 	orr.w	r3, r3, #1
 800ce5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	7adb      	ldrb	r3, [r3, #11]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d005      	beq.n	800ce74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce68:	4b04      	ldr	r3, [pc, #16]	@ (800ce7c <HAL_PCD_SuspendCallback+0x48>)
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	4a03      	ldr	r2, [pc, #12]	@ (800ce7c <HAL_PCD_SuspendCallback+0x48>)
 800ce6e:	f043 0306 	orr.w	r3, r3, #6
 800ce72:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800ce74:	bf00      	nop
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	e000ed00 	.word	0xe000ed00

0800ce80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff f814 	bl	800bebc <USBD_LL_Resume>
}
 800ce94:	bf00      	nop
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ceae:	78fa      	ldrb	r2, [r7, #3]
 800ceb0:	4611      	mov	r1, r2
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff f862 	bl	800bf7c <USBD_LL_IsoOUTIncomplete>
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ced2:	78fa      	ldrb	r2, [r7, #3]
 800ced4:	4611      	mov	r1, r2
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff f82a 	bl	800bf30 <USBD_LL_IsoINIncomplete>
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff f868 	bl	800bfc8 <USBD_LL_DevConnected>
}
 800cef8:	bf00      	nop
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff f865 	bl	800bfde <USBD_LL_DevDisconnected>
}
 800cf14:	bf00      	nop
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800cf24:	4b27      	ldr	r3, [pc, #156]	@ (800cfc4 <USBD_LL_Init+0xa8>)
 800cf26:	4a28      	ldr	r2, [pc, #160]	@ (800cfc8 <USBD_LL_Init+0xac>)
 800cf28:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d143      	bne.n	800cfba <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800cf32:	4b24      	ldr	r3, [pc, #144]	@ (800cfc4 <USBD_LL_Init+0xa8>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800cf3c:	4b21      	ldr	r3, [pc, #132]	@ (800cfc4 <USBD_LL_Init+0xa8>)
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800cf46:	4b1f      	ldr	r3, [pc, #124]	@ (800cfc4 <USBD_LL_Init+0xa8>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff fee0 	bl	800cd14 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800cf54:	4b1b      	ldr	r3, [pc, #108]	@ (800cfc4 <USBD_LL_Init+0xa8>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2240      	movs	r2, #64	@ 0x40
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff fec4 	bl	800ccea <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800cf62:	4b18      	ldr	r3, [pc, #96]	@ (800cfc4 <USBD_LL_Init+0xa8>)
 800cf64:	6818      	ldr	r0, [r3, #0]
 800cf66:	4b19      	ldr	r3, [pc, #100]	@ (800cfcc <USBD_LL_Init+0xb0>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	2240      	movs	r2, #64	@ 0x40
 800cf72:	4619      	mov	r1, r3
 800cf74:	f7ff feb9 	bl	800ccea <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cf78:	2300      	movs	r3, #0
 800cf7a:	73fb      	strb	r3, [r7, #15]
 800cf7c:	e01a      	b.n	800cfb4 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800cf7e:	4b11      	ldr	r3, [pc, #68]	@ (800cfc4 <USBD_LL_Init+0xa8>)
 800cf80:	6818      	ldr	r0, [r3, #0]
 800cf82:	7bfb      	ldrb	r3, [r7, #15]
 800cf84:	4a12      	ldr	r2, [pc, #72]	@ (800cfd0 <USBD_LL_Init+0xb4>)
 800cf86:	5cd3      	ldrb	r3, [r2, r3]
 800cf88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2280      	movs	r2, #128	@ 0x80
 800cf90:	4619      	mov	r1, r3
 800cf92:	f7ff feaa 	bl	800ccea <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800cf96:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc4 <USBD_LL_Init+0xa8>)
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	7bfb      	ldrb	r3, [r7, #15]
 800cf9c:	4a0d      	ldr	r2, [pc, #52]	@ (800cfd4 <USBD_LL_Init+0xb8>)
 800cf9e:	5cd3      	ldrb	r3, [r2, r3]
 800cfa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2240      	movs	r2, #64	@ 0x40
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	f7ff fe9e 	bl	800ccea <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cfae:	7bfb      	ldrb	r3, [r7, #15]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	73fb      	strb	r3, [r7, #15]
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0e1      	beq.n	800cf7e <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	20001670 	.word	0x20001670
 800cfc8:	20000878 	.word	0x20000878
 800cfcc:	200001fa 	.word	0x200001fa
 800cfd0:	20001304 	.word	0x20001304
 800cfd4:	2000130c 	.word	0x2000130c

0800cfd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7f7 ffd5 	bl	8004f9e <HAL_PCD_Start>
 800cff4:	4603      	mov	r3, r0
 800cff6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800cff8:	7bfb      	ldrb	r3, [r7, #15]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f000 f92a 	bl	800d254 <USBD_Get_USB_Status>
 800d000:	4603      	mov	r3, r0
 800d002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d004:	7bbb      	ldrb	r3, [r7, #14]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b084      	sub	sp, #16
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	4608      	mov	r0, r1
 800d018:	4611      	mov	r1, r2
 800d01a:	461a      	mov	r2, r3
 800d01c:	4603      	mov	r3, r0
 800d01e:	70fb      	strb	r3, [r7, #3]
 800d020:	460b      	mov	r3, r1
 800d022:	70bb      	strb	r3, [r7, #2]
 800d024:	4613      	mov	r3, r2
 800d026:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800d036:	78bb      	ldrb	r3, [r7, #2]
 800d038:	883a      	ldrh	r2, [r7, #0]
 800d03a:	78f9      	ldrb	r1, [r7, #3]
 800d03c:	f7f8 fcd6 	bl	80059ec <HAL_PCD_EP_Open>
 800d040:	4603      	mov	r3, r0
 800d042:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	4618      	mov	r0, r3
 800d048:	f000 f904 	bl	800d254 <USBD_Get_USB_Status>
 800d04c:	4603      	mov	r3, r0
 800d04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d050:	7bbb      	ldrb	r3, [r7, #14]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	460b      	mov	r3, r1
 800d064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d074:	78fa      	ldrb	r2, [r7, #3]
 800d076:	4611      	mov	r1, r2
 800d078:	4618      	mov	r0, r3
 800d07a:	f7f8 fd21 	bl	8005ac0 <HAL_PCD_EP_Close>
 800d07e:	4603      	mov	r3, r0
 800d080:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d082:	7bfb      	ldrb	r3, [r7, #15]
 800d084:	4618      	mov	r0, r3
 800d086:	f000 f8e5 	bl	800d254 <USBD_Get_USB_Status>
 800d08a:	4603      	mov	r3, r0
 800d08c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d0b2:	78fa      	ldrb	r2, [r7, #3]
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7f8 fdd9 	bl	8005c6e <HAL_PCD_EP_SetStall>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f000 f8c6 	bl	800d254 <USBD_Get_USB_Status>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d0f0:	78fa      	ldrb	r2, [r7, #3]
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7f8 fe1d 	bl	8005d34 <HAL_PCD_EP_ClrStall>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d0fe:	7bfb      	ldrb	r3, [r7, #15]
 800d100:	4618      	mov	r0, r3
 800d102:	f000 f8a7 	bl	800d254 <USBD_Get_USB_Status>
 800d106:	4603      	mov	r3, r0
 800d108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3710      	adds	r7, #16
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	460b      	mov	r3, r1
 800d11e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d126:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800d128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	da0b      	bge.n	800d148 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d130:	78fb      	ldrb	r3, [r7, #3]
 800d132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d136:	68f9      	ldr	r1, [r7, #12]
 800d138:	4613      	mov	r3, r2
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	4413      	add	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	440b      	add	r3, r1
 800d142:	3316      	adds	r3, #22
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	e00b      	b.n	800d160 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d148:	78fb      	ldrb	r3, [r7, #3]
 800d14a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d14e:	68f9      	ldr	r1, [r7, #12]
 800d150:	4613      	mov	r3, r2
 800d152:	00db      	lsls	r3, r3, #3
 800d154:	4413      	add	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	440b      	add	r3, r1
 800d15a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d15e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d160:	4618      	mov	r0, r3
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d178:	2300      	movs	r3, #0
 800d17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d186:	78fa      	ldrb	r2, [r7, #3]
 800d188:	4611      	mov	r1, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7f8 fc0a 	bl	80059a4 <HAL_PCD_SetAddress>
 800d190:	4603      	mov	r3, r0
 800d192:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d194:	7bfb      	ldrb	r3, [r7, #15]
 800d196:	4618      	mov	r0, r3
 800d198:	f000 f85c 	bl	800d254 <USBD_Get_USB_Status>
 800d19c:	4603      	mov	r3, r0
 800d19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b086      	sub	sp, #24
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	603b      	str	r3, [r7, #0]
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800d1c8:	7af9      	ldrb	r1, [r7, #11]
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	f7f8 fd14 	bl	8005bfa <HAL_PCD_EP_Transmit>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 f83b 	bl	800d254 <USBD_Get_USB_Status>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	607a      	str	r2, [r7, #4]
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800d20a:	7af9      	ldrb	r1, [r7, #11]
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	f7f8 fca0 	bl	8005b54 <HAL_PCD_EP_Receive>
 800d214:	4603      	mov	r3, r0
 800d216:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d218:	7dfb      	ldrb	r3, [r7, #23]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 f81a 	bl	800d254 <USBD_Get_USB_Status>
 800d220:	4603      	mov	r3, r0
 800d222:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d224:	7dbb      	ldrb	r3, [r7, #22]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3718      	adds	r7, #24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b082      	sub	sp, #8
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	460b      	mov	r3, r1
 800d238:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d240:	78fa      	ldrb	r2, [r7, #3]
 800d242:	4611      	mov	r1, r2
 800d244:	4618      	mov	r0, r3
 800d246:	f7f8 fcc0 	bl	8005bca <HAL_PCD_EP_GetRxCount>
 800d24a:	4603      	mov	r3, r0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	4603      	mov	r3, r0
 800d25c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d262:	79fb      	ldrb	r3, [r7, #7]
 800d264:	2b03      	cmp	r3, #3
 800d266:	d817      	bhi.n	800d298 <USBD_Get_USB_Status+0x44>
 800d268:	a201      	add	r2, pc, #4	@ (adr r2, 800d270 <USBD_Get_USB_Status+0x1c>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d281 	.word	0x0800d281
 800d274:	0800d287 	.word	0x0800d287
 800d278:	0800d28d 	.word	0x0800d28d
 800d27c:	0800d293 	.word	0x0800d293
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73fb      	strb	r3, [r7, #15]
    break;
 800d284:	e00b      	b.n	800d29e <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800d286:	2303      	movs	r3, #3
 800d288:	73fb      	strb	r3, [r7, #15]
    break;
 800d28a:	e008      	b.n	800d29e <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800d28c:	2301      	movs	r3, #1
 800d28e:	73fb      	strb	r3, [r7, #15]
    break;
 800d290:	e005      	b.n	800d29e <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800d292:	2303      	movs	r3, #3
 800d294:	73fb      	strb	r3, [r7, #15]
    break;
 800d296:	e002      	b.n	800d29e <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800d298:	2303      	movs	r3, #3
 800d29a:	73fb      	strb	r3, [r7, #15]
    break;
 800d29c:	bf00      	nop
  }
  return usb_status;
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3714      	adds	r7, #20
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d2ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2be:	2b84      	cmp	r3, #132	@ 0x84
 800d2c0:	d005      	beq.n	800d2ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d2c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	3303      	adds	r3, #3
 800d2cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3714      	adds	r7, #20
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2e2:	f3ef 8305 	mrs	r3, IPSR
 800d2e6:	607b      	str	r3, [r7, #4]
  return(result);
 800d2e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	bf14      	ite	ne
 800d2ee:	2301      	movne	r3, #1
 800d2f0:	2300      	moveq	r3, #0
 800d2f2:	b2db      	uxtb	r3, r3
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d304:	f001 f942 	bl	800e58c <vTaskStartScheduler>
  
  return osOK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d30e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d310:	b089      	sub	sp, #36	@ 0x24
 800d312:	af04      	add	r7, sp, #16
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d020      	beq.n	800d362 <osThreadCreate+0x54>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	699b      	ldr	r3, [r3, #24]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d01c      	beq.n	800d362 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685c      	ldr	r4, [r3, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	691e      	ldr	r6, [r3, #16]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff ffb6 	bl	800d2ac <makeFreeRtosPriority>
 800d340:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	695b      	ldr	r3, [r3, #20]
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d34a:	9202      	str	r2, [sp, #8]
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	9100      	str	r1, [sp, #0]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	4632      	mov	r2, r6
 800d354:	4629      	mov	r1, r5
 800d356:	4620      	mov	r0, r4
 800d358:	f000 ff32 	bl	800e1c0 <xTaskCreateStatic>
 800d35c:	4603      	mov	r3, r0
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	e01c      	b.n	800d39c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685c      	ldr	r4, [r3, #4]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d36e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff ff98 	bl	800d2ac <makeFreeRtosPriority>
 800d37c:	4602      	mov	r2, r0
 800d37e:	f107 030c 	add.w	r3, r7, #12
 800d382:	9301      	str	r3, [sp, #4]
 800d384:	9200      	str	r2, [sp, #0]
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	4632      	mov	r2, r6
 800d38a:	4629      	mov	r1, r5
 800d38c:	4620      	mov	r0, r4
 800d38e:	f000 ff77 	bl	800e280 <xTaskCreate>
 800d392:	4603      	mov	r3, r0
 800d394:	2b01      	cmp	r3, #1
 800d396:	d001      	beq.n	800d39c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d398:	2300      	movs	r3, #0
 800d39a:	e000      	b.n	800d39e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d39c:	68fb      	ldr	r3, [r7, #12]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b084      	sub	sp, #16
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d001      	beq.n	800d3bc <osDelay+0x16>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	e000      	b.n	800d3be <osDelay+0x18>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f001 f8ae 	bl	800e520 <vTaskDelay>
  
  return osOK;
 800d3c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b086      	sub	sp, #24
 800d3d2:	af02      	add	r7, sp, #8
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00f      	beq.n	800d400 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d10a      	bne.n	800d3fc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	2203      	movs	r2, #3
 800d3ec:	9200      	str	r2, [sp, #0]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	f000 f9c0 	bl	800d778 <xQueueGenericCreateStatic>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	e016      	b.n	800d42a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	e014      	b.n	800d42a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	2b01      	cmp	r3, #1
 800d404:	d110      	bne.n	800d428 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d406:	2203      	movs	r2, #3
 800d408:	2100      	movs	r1, #0
 800d40a:	2001      	movs	r0, #1
 800d40c:	f000 fa31 	bl	800d872 <xQueueGenericCreate>
 800d410:	60f8      	str	r0, [r7, #12]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d005      	beq.n	800d424 <osSemaphoreCreate+0x56>
 800d418:	2300      	movs	r3, #0
 800d41a:	2200      	movs	r2, #0
 800d41c:	2100      	movs	r1, #0
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 fa82 	bl	800d928 <xQueueGenericSend>
      return sema;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	e000      	b.n	800d42a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d428:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
	...

0800d434 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d43e:	2300      	movs	r3, #0
 800d440:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d101      	bne.n	800d44c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d448:	2380      	movs	r3, #128	@ 0x80
 800d44a:	e03a      	b.n	800d4c2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d456:	d103      	bne.n	800d460 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d458:	f04f 33ff 	mov.w	r3, #4294967295
 800d45c:	60fb      	str	r3, [r7, #12]
 800d45e:	e009      	b.n	800d474 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d006      	beq.n	800d474 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d101      	bne.n	800d474 <osSemaphoreWait+0x40>
      ticks = 1;
 800d470:	2301      	movs	r3, #1
 800d472:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d474:	f7ff ff32 	bl	800d2dc <inHandlerMode>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d017      	beq.n	800d4ae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d47e:	f107 0308 	add.w	r3, r7, #8
 800d482:	461a      	mov	r2, r3
 800d484:	2100      	movs	r1, #0
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fcf0 	bl	800de6c <xQueueReceiveFromISR>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d001      	beq.n	800d496 <osSemaphoreWait+0x62>
      return osErrorOS;
 800d492:	23ff      	movs	r3, #255	@ 0xff
 800d494:	e015      	b.n	800d4c2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d011      	beq.n	800d4c0 <osSemaphoreWait+0x8c>
 800d49c:	4b0b      	ldr	r3, [pc, #44]	@ (800d4cc <osSemaphoreWait+0x98>)
 800d49e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4a2:	601a      	str	r2, [r3, #0]
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	e008      	b.n	800d4c0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d4ae:	68f9      	ldr	r1, [r7, #12]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fbcb 	bl	800dc4c <xQueueSemaphoreTake>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d001      	beq.n	800d4c0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d4bc:	23ff      	movs	r3, #255	@ 0xff
 800d4be:	e000      	b.n	800d4c2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	e000ed04 	.word	0xe000ed04

0800d4d0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d4e0:	f7ff fefc 	bl	800d2dc <inHandlerMode>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d016      	beq.n	800d518 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d4ea:	f107 0308 	add.w	r3, r7, #8
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 fb1b 	bl	800db2c <xQueueGiveFromISR>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d001      	beq.n	800d500 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d4fc:	23ff      	movs	r3, #255	@ 0xff
 800d4fe:	e017      	b.n	800d530 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d013      	beq.n	800d52e <osSemaphoreRelease+0x5e>
 800d506:	4b0c      	ldr	r3, [pc, #48]	@ (800d538 <osSemaphoreRelease+0x68>)
 800d508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	e00a      	b.n	800d52e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d518:	2300      	movs	r3, #0
 800d51a:	2200      	movs	r2, #0
 800d51c:	2100      	movs	r1, #0
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fa02 	bl	800d928 <xQueueGenericSend>
 800d524:	4603      	mov	r3, r0
 800d526:	2b01      	cmp	r3, #1
 800d528:	d001      	beq.n	800d52e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d52a:	23ff      	movs	r3, #255	@ 0xff
 800d52c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d52e:	68fb      	ldr	r3, [r7, #12]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	e000ed04 	.word	0xe000ed04

0800d53c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f103 0208 	add.w	r2, r3, #8
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f04f 32ff 	mov.w	r2, #4294967295
 800d554:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f103 0208 	add.w	r2, r3, #8
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f103 0208 	add.w	r2, r3, #8
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d58a:	bf00      	nop
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d596:	b480      	push	{r7}
 800d598:	b085      	sub	sp, #20
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	689a      	ldr	r2, [r3, #8]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	1c5a      	adds	r2, r3, #1
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	601a      	str	r2, [r3, #0]
}
 800d5d2:	bf00      	nop
 800d5d4:	3714      	adds	r7, #20
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5de:	b480      	push	{r7}
 800d5e0:	b085      	sub	sp, #20
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f4:	d103      	bne.n	800d5fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	60fb      	str	r3, [r7, #12]
 800d5fc:	e00c      	b.n	800d618 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	3308      	adds	r3, #8
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	e002      	b.n	800d60c <vListInsert+0x2e>
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	429a      	cmp	r2, r3
 800d616:	d2f6      	bcs.n	800d606 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	683a      	ldr	r2, [r7, #0]
 800d632:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	1c5a      	adds	r2, r3, #1
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	601a      	str	r2, [r3, #0]
}
 800d644:	bf00      	nop
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	6892      	ldr	r2, [r2, #8]
 800d666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	6852      	ldr	r2, [r2, #4]
 800d670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d103      	bne.n	800d684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	689a      	ldr	r2, [r3, #8]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	1e5a      	subs	r2, r3, #1
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10b      	bne.n	800d6d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d6ca:	bf00      	nop
 800d6cc:	bf00      	nop
 800d6ce:	e7fd      	b.n	800d6cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d6d0:	f001 fed2 	bl	800f478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6dc:	68f9      	ldr	r1, [r7, #12]
 800d6de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6e0:	fb01 f303 	mul.w	r3, r1, r3
 800d6e4:	441a      	add	r2, r3
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d700:	3b01      	subs	r3, #1
 800d702:	68f9      	ldr	r1, [r7, #12]
 800d704:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d706:	fb01 f303 	mul.w	r3, r1, r3
 800d70a:	441a      	add	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	22ff      	movs	r2, #255	@ 0xff
 800d714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	22ff      	movs	r2, #255	@ 0xff
 800d71c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d114      	bne.n	800d750 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d01a      	beq.n	800d764 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	3310      	adds	r3, #16
 800d732:	4618      	mov	r0, r3
 800d734:	f001 f984 	bl	800ea40 <xTaskRemoveFromEventList>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d012      	beq.n	800d764 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d73e:	4b0d      	ldr	r3, [pc, #52]	@ (800d774 <xQueueGenericReset+0xd0>)
 800d740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	e009      	b.n	800d764 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	3310      	adds	r3, #16
 800d754:	4618      	mov	r0, r3
 800d756:	f7ff fef1 	bl	800d53c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3324      	adds	r3, #36	@ 0x24
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff feec 	bl	800d53c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d764:	f001 feba 	bl	800f4dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d768:	2301      	movs	r3, #1
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	e000ed04 	.word	0xe000ed04

0800d778 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08e      	sub	sp, #56	@ 0x38
 800d77c:	af02      	add	r7, sp, #8
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
 800d784:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10b      	bne.n	800d7a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d79e:	bf00      	nop
 800d7a0:	bf00      	nop
 800d7a2:	e7fd      	b.n	800d7a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10b      	bne.n	800d7c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ae:	f383 8811 	msr	BASEPRI, r3
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d7bc:	bf00      	nop
 800d7be:	bf00      	nop
 800d7c0:	e7fd      	b.n	800d7be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <xQueueGenericCreateStatic+0x56>
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <xQueueGenericCreateStatic+0x5a>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e000      	b.n	800d7d4 <xQueueGenericCreateStatic+0x5c>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10b      	bne.n	800d7f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	623b      	str	r3, [r7, #32]
}
 800d7ea:	bf00      	nop
 800d7ec:	bf00      	nop
 800d7ee:	e7fd      	b.n	800d7ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d102      	bne.n	800d7fc <xQueueGenericCreateStatic+0x84>
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d101      	bne.n	800d800 <xQueueGenericCreateStatic+0x88>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e000      	b.n	800d802 <xQueueGenericCreateStatic+0x8a>
 800d800:	2300      	movs	r3, #0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10b      	bne.n	800d81e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	61fb      	str	r3, [r7, #28]
}
 800d818:	bf00      	nop
 800d81a:	bf00      	nop
 800d81c:	e7fd      	b.n	800d81a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d81e:	2348      	movs	r3, #72	@ 0x48
 800d820:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	2b48      	cmp	r3, #72	@ 0x48
 800d826:	d00b      	beq.n	800d840 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	61bb      	str	r3, [r7, #24]
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	e7fd      	b.n	800d83c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d840:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00d      	beq.n	800d868 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d854:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	4613      	mov	r3, r2
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	68b9      	ldr	r1, [r7, #8]
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 f840 	bl	800d8e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3730      	adds	r7, #48	@ 0x30
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d872:	b580      	push	{r7, lr}
 800d874:	b08a      	sub	sp, #40	@ 0x28
 800d876:	af02      	add	r7, sp, #8
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	4613      	mov	r3, r2
 800d87e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10b      	bne.n	800d89e <xQueueGenericCreate+0x2c>
	__asm volatile
 800d886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	613b      	str	r3, [r7, #16]
}
 800d898:	bf00      	nop
 800d89a:	bf00      	nop
 800d89c:	e7fd      	b.n	800d89a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	fb02 f303 	mul.w	r3, r2, r3
 800d8a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	3348      	adds	r3, #72	@ 0x48
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f001 ff05 	bl	800f6bc <pvPortMalloc>
 800d8b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d011      	beq.n	800d8de <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	3348      	adds	r3, #72	@ 0x48
 800d8c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d8cc:	79fa      	ldrb	r2, [r7, #7]
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	697a      	ldr	r2, [r7, #20]
 800d8d6:	68b9      	ldr	r1, [r7, #8]
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f000 f805 	bl	800d8e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d8de:	69bb      	ldr	r3, [r7, #24]
	}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3720      	adds	r7, #32
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d103      	bne.n	800d904 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	69ba      	ldr	r2, [r7, #24]
 800d900:	601a      	str	r2, [r3, #0]
 800d902:	e002      	b.n	800d90a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d916:	2101      	movs	r1, #1
 800d918:	69b8      	ldr	r0, [r7, #24]
 800d91a:	f7ff fec3 	bl	800d6a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d91e:	bf00      	nop
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
	...

0800d928 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b08e      	sub	sp, #56	@ 0x38
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
 800d934:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d936:	2300      	movs	r3, #0
 800d938:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10b      	bne.n	800d95c <xQueueGenericSend+0x34>
	__asm volatile
 800d944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d948:	f383 8811 	msr	BASEPRI, r3
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d956:	bf00      	nop
 800d958:	bf00      	nop
 800d95a:	e7fd      	b.n	800d958 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d103      	bne.n	800d96a <xQueueGenericSend+0x42>
 800d962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d966:	2b00      	cmp	r3, #0
 800d968:	d101      	bne.n	800d96e <xQueueGenericSend+0x46>
 800d96a:	2301      	movs	r3, #1
 800d96c:	e000      	b.n	800d970 <xQueueGenericSend+0x48>
 800d96e:	2300      	movs	r3, #0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d10b      	bne.n	800d98c <xQueueGenericSend+0x64>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d986:	bf00      	nop
 800d988:	bf00      	nop
 800d98a:	e7fd      	b.n	800d988 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d103      	bne.n	800d99a <xQueueGenericSend+0x72>
 800d992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d996:	2b01      	cmp	r3, #1
 800d998:	d101      	bne.n	800d99e <xQueueGenericSend+0x76>
 800d99a:	2301      	movs	r3, #1
 800d99c:	e000      	b.n	800d9a0 <xQueueGenericSend+0x78>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10b      	bne.n	800d9bc <xQueueGenericSend+0x94>
	__asm volatile
 800d9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a8:	f383 8811 	msr	BASEPRI, r3
 800d9ac:	f3bf 8f6f 	isb	sy
 800d9b0:	f3bf 8f4f 	dsb	sy
 800d9b4:	623b      	str	r3, [r7, #32]
}
 800d9b6:	bf00      	nop
 800d9b8:	bf00      	nop
 800d9ba:	e7fd      	b.n	800d9b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9bc:	f001 fa06 	bl	800edcc <xTaskGetSchedulerState>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <xQueueGenericSend+0xa4>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <xQueueGenericSend+0xa8>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e000      	b.n	800d9d2 <xQueueGenericSend+0xaa>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d10b      	bne.n	800d9ee <xQueueGenericSend+0xc6>
	__asm volatile
 800d9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	61fb      	str	r3, [r7, #28]
}
 800d9e8:	bf00      	nop
 800d9ea:	bf00      	nop
 800d9ec:	e7fd      	b.n	800d9ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9ee:	f001 fd43 	bl	800f478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d302      	bcc.n	800da04 <xQueueGenericSend+0xdc>
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b02      	cmp	r3, #2
 800da02:	d129      	bne.n	800da58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da04:	683a      	ldr	r2, [r7, #0]
 800da06:	68b9      	ldr	r1, [r7, #8]
 800da08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da0a:	f000 fac9 	bl	800dfa0 <prvCopyDataToQueue>
 800da0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da14:	2b00      	cmp	r3, #0
 800da16:	d010      	beq.n	800da3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1a:	3324      	adds	r3, #36	@ 0x24
 800da1c:	4618      	mov	r0, r3
 800da1e:	f001 f80f 	bl	800ea40 <xTaskRemoveFromEventList>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d013      	beq.n	800da50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da28:	4b3f      	ldr	r3, [pc, #252]	@ (800db28 <xQueueGenericSend+0x200>)
 800da2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	e00a      	b.n	800da50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d007      	beq.n	800da50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da40:	4b39      	ldr	r3, [pc, #228]	@ (800db28 <xQueueGenericSend+0x200>)
 800da42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da50:	f001 fd44 	bl	800f4dc <vPortExitCritical>
				return pdPASS;
 800da54:	2301      	movs	r3, #1
 800da56:	e063      	b.n	800db20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d103      	bne.n	800da66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da5e:	f001 fd3d 	bl	800f4dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da62:	2300      	movs	r3, #0
 800da64:	e05c      	b.n	800db20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d106      	bne.n	800da7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da6c:	f107 0314 	add.w	r3, r7, #20
 800da70:	4618      	mov	r0, r3
 800da72:	f001 f849 	bl	800eb08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da76:	2301      	movs	r3, #1
 800da78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da7a:	f001 fd2f 	bl	800f4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da7e:	f000 fdef 	bl	800e660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da82:	f001 fcf9 	bl	800f478 <vPortEnterCritical>
 800da86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da8c:	b25b      	sxtb	r3, r3
 800da8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da92:	d103      	bne.n	800da9c <xQueueGenericSend+0x174>
 800da94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da96:	2200      	movs	r2, #0
 800da98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800daa2:	b25b      	sxtb	r3, r3
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa8:	d103      	bne.n	800dab2 <xQueueGenericSend+0x18a>
 800daaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dab2:	f001 fd13 	bl	800f4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dab6:	1d3a      	adds	r2, r7, #4
 800dab8:	f107 0314 	add.w	r3, r7, #20
 800dabc:	4611      	mov	r1, r2
 800dabe:	4618      	mov	r0, r3
 800dac0:	f001 f838 	bl	800eb34 <xTaskCheckForTimeOut>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d124      	bne.n	800db14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800daca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dacc:	f000 fb60 	bl	800e190 <prvIsQueueFull>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d018      	beq.n	800db08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad8:	3310      	adds	r3, #16
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	4611      	mov	r1, r2
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 ff88 	bl	800e9f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dae6:	f000 faeb 	bl	800e0c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800daea:	f000 fdc7 	bl	800e67c <xTaskResumeAll>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f47f af7c 	bne.w	800d9ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800daf6:	4b0c      	ldr	r3, [pc, #48]	@ (800db28 <xQueueGenericSend+0x200>)
 800daf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dafc:	601a      	str	r2, [r3, #0]
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	e772      	b.n	800d9ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db0a:	f000 fad9 	bl	800e0c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db0e:	f000 fdb5 	bl	800e67c <xTaskResumeAll>
 800db12:	e76c      	b.n	800d9ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800db14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db16:	f000 fad3 	bl	800e0c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db1a:	f000 fdaf 	bl	800e67c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db20:	4618      	mov	r0, r3
 800db22:	3738      	adds	r7, #56	@ 0x38
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08e      	sub	sp, #56	@ 0x38
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800db3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d10b      	bne.n	800db58 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800db40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db44:	f383 8811 	msr	BASEPRI, r3
 800db48:	f3bf 8f6f 	isb	sy
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	623b      	str	r3, [r7, #32]
}
 800db52:	bf00      	nop
 800db54:	bf00      	nop
 800db56:	e7fd      	b.n	800db54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00b      	beq.n	800db78 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800db60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db64:	f383 8811 	msr	BASEPRI, r3
 800db68:	f3bf 8f6f 	isb	sy
 800db6c:	f3bf 8f4f 	dsb	sy
 800db70:	61fb      	str	r3, [r7, #28]
}
 800db72:	bf00      	nop
 800db74:	bf00      	nop
 800db76:	e7fd      	b.n	800db74 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800db78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d103      	bne.n	800db88 <xQueueGiveFromISR+0x5c>
 800db80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d101      	bne.n	800db8c <xQueueGiveFromISR+0x60>
 800db88:	2301      	movs	r3, #1
 800db8a:	e000      	b.n	800db8e <xQueueGiveFromISR+0x62>
 800db8c:	2300      	movs	r3, #0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10b      	bne.n	800dbaa <xQueueGiveFromISR+0x7e>
	__asm volatile
 800db92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db96:	f383 8811 	msr	BASEPRI, r3
 800db9a:	f3bf 8f6f 	isb	sy
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	61bb      	str	r3, [r7, #24]
}
 800dba4:	bf00      	nop
 800dba6:	bf00      	nop
 800dba8:	e7fd      	b.n	800dba6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbaa:	f001 fd45 	bl	800f638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dbae:	f3ef 8211 	mrs	r2, BASEPRI
 800dbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	617a      	str	r2, [r7, #20]
 800dbc4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dbc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d22b      	bcs.n	800dc32 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe6:	1c5a      	adds	r2, r3, #1
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dbec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf4:	d112      	bne.n	800dc1c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d016      	beq.n	800dc2c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc00:	3324      	adds	r3, #36	@ 0x24
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 ff1c 	bl	800ea40 <xTaskRemoveFromEventList>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00e      	beq.n	800dc2c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00b      	beq.n	800dc2c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	2201      	movs	r2, #1
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	e007      	b.n	800dc2c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc20:	3301      	adds	r3, #1
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	b25a      	sxtb	r2, r3
 800dc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc30:	e001      	b.n	800dc36 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc38:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3738      	adds	r7, #56	@ 0x38
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08e      	sub	sp, #56	@ 0x38
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc56:	2300      	movs	r3, #0
 800dc58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10b      	bne.n	800dc80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	623b      	str	r3, [r7, #32]
}
 800dc7a:	bf00      	nop
 800dc7c:	bf00      	nop
 800dc7e:	e7fd      	b.n	800dc7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00b      	beq.n	800dca0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8c:	f383 8811 	msr	BASEPRI, r3
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	61fb      	str	r3, [r7, #28]
}
 800dc9a:	bf00      	nop
 800dc9c:	bf00      	nop
 800dc9e:	e7fd      	b.n	800dc9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dca0:	f001 f894 	bl	800edcc <xTaskGetSchedulerState>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d102      	bne.n	800dcb0 <xQueueSemaphoreTake+0x64>
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <xQueueSemaphoreTake+0x68>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e000      	b.n	800dcb6 <xQueueSemaphoreTake+0x6a>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d10b      	bne.n	800dcd2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	61bb      	str	r3, [r7, #24]
}
 800dccc:	bf00      	nop
 800dcce:	bf00      	nop
 800dcd0:	e7fd      	b.n	800dcce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcd2:	f001 fbd1 	bl	800f478 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d024      	beq.n	800dd2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce4:	1e5a      	subs	r2, r3, #1
 800dce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d104      	bne.n	800dcfc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dcf2:	f001 fa17 	bl	800f124 <pvTaskIncrementMutexHeldCount>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00f      	beq.n	800dd24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd06:	3310      	adds	r3, #16
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f000 fe99 	bl	800ea40 <xTaskRemoveFromEventList>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d007      	beq.n	800dd24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd14:	4b54      	ldr	r3, [pc, #336]	@ (800de68 <xQueueSemaphoreTake+0x21c>)
 800dd16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd1a:	601a      	str	r2, [r3, #0]
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd24:	f001 fbda 	bl	800f4dc <vPortExitCritical>
				return pdPASS;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e098      	b.n	800de5e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d112      	bne.n	800dd58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00b      	beq.n	800dd50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dd38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3c:	f383 8811 	msr	BASEPRI, r3
 800dd40:	f3bf 8f6f 	isb	sy
 800dd44:	f3bf 8f4f 	dsb	sy
 800dd48:	617b      	str	r3, [r7, #20]
}
 800dd4a:	bf00      	nop
 800dd4c:	bf00      	nop
 800dd4e:	e7fd      	b.n	800dd4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dd50:	f001 fbc4 	bl	800f4dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd54:	2300      	movs	r3, #0
 800dd56:	e082      	b.n	800de5e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d106      	bne.n	800dd6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd5e:	f107 030c 	add.w	r3, r7, #12
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 fed0 	bl	800eb08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd6c:	f001 fbb6 	bl	800f4dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd70:	f000 fc76 	bl	800e660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd74:	f001 fb80 	bl	800f478 <vPortEnterCritical>
 800dd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd7e:	b25b      	sxtb	r3, r3
 800dd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd84:	d103      	bne.n	800dd8e <xQueueSemaphoreTake+0x142>
 800dd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd94:	b25b      	sxtb	r3, r3
 800dd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd9a:	d103      	bne.n	800dda4 <xQueueSemaphoreTake+0x158>
 800dd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dda4:	f001 fb9a 	bl	800f4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dda8:	463a      	mov	r2, r7
 800ddaa:	f107 030c 	add.w	r3, r7, #12
 800ddae:	4611      	mov	r1, r2
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 febf 	bl	800eb34 <xTaskCheckForTimeOut>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d132      	bne.n	800de22 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddbe:	f000 f9d1 	bl	800e164 <prvIsQueueEmpty>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d026      	beq.n	800de16 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d109      	bne.n	800dde4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ddd0:	f001 fb52 	bl	800f478 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ddd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f001 f815 	bl	800ee08 <xTaskPriorityInherit>
 800ddde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dde0:	f001 fb7c 	bl	800f4dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde6:	3324      	adds	r3, #36	@ 0x24
 800dde8:	683a      	ldr	r2, [r7, #0]
 800ddea:	4611      	mov	r1, r2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 fe01 	bl	800e9f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ddf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddf4:	f000 f964 	bl	800e0c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ddf8:	f000 fc40 	bl	800e67c <xTaskResumeAll>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	f47f af67 	bne.w	800dcd2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800de04:	4b18      	ldr	r3, [pc, #96]	@ (800de68 <xQueueSemaphoreTake+0x21c>)
 800de06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de0a:	601a      	str	r2, [r3, #0]
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	e75d      	b.n	800dcd2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800de16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de18:	f000 f952 	bl	800e0c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de1c:	f000 fc2e 	bl	800e67c <xTaskResumeAll>
 800de20:	e757      	b.n	800dcd2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800de22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de24:	f000 f94c 	bl	800e0c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de28:	f000 fc28 	bl	800e67c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de2e:	f000 f999 	bl	800e164 <prvIsQueueEmpty>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	f43f af4c 	beq.w	800dcd2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800de3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00d      	beq.n	800de5c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800de40:	f001 fb1a 	bl	800f478 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800de44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de46:	f000 f893 	bl	800df70 <prvGetDisinheritPriorityAfterTimeout>
 800de4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800de4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800de52:	4618      	mov	r0, r3
 800de54:	f001 f8d6 	bl	800f004 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800de58:	f001 fb40 	bl	800f4dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3738      	adds	r7, #56	@ 0x38
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	e000ed04 	.word	0xe000ed04

0800de6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b08e      	sub	sp, #56	@ 0x38
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800de7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10b      	bne.n	800de9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800de82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de86:	f383 8811 	msr	BASEPRI, r3
 800de8a:	f3bf 8f6f 	isb	sy
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	623b      	str	r3, [r7, #32]
}
 800de94:	bf00      	nop
 800de96:	bf00      	nop
 800de98:	e7fd      	b.n	800de96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d103      	bne.n	800dea8 <xQueueReceiveFromISR+0x3c>
 800dea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <xQueueReceiveFromISR+0x40>
 800dea8:	2301      	movs	r3, #1
 800deaa:	e000      	b.n	800deae <xQueueReceiveFromISR+0x42>
 800deac:	2300      	movs	r3, #0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d10b      	bne.n	800deca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800deb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb6:	f383 8811 	msr	BASEPRI, r3
 800deba:	f3bf 8f6f 	isb	sy
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	61fb      	str	r3, [r7, #28]
}
 800dec4:	bf00      	nop
 800dec6:	bf00      	nop
 800dec8:	e7fd      	b.n	800dec6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800deca:	f001 fbb5 	bl	800f638 <vPortValidateInterruptPriority>
	__asm volatile
 800dece:	f3ef 8211 	mrs	r2, BASEPRI
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	61ba      	str	r2, [r7, #24]
 800dee4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dee6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800deea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800deee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800def0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def2:	2b00      	cmp	r3, #0
 800def4:	d02f      	beq.n	800df56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800def6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800defc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df00:	68b9      	ldr	r1, [r7, #8]
 800df02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df04:	f000 f8b6 	bl	800e074 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0a:	1e5a      	subs	r2, r3, #1
 800df0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800df10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800df14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df18:	d112      	bne.n	800df40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1c:	691b      	ldr	r3, [r3, #16]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d016      	beq.n	800df50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df24:	3310      	adds	r3, #16
 800df26:	4618      	mov	r0, r3
 800df28:	f000 fd8a 	bl	800ea40 <xTaskRemoveFromEventList>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00e      	beq.n	800df50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d00b      	beq.n	800df50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2201      	movs	r2, #1
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	e007      	b.n	800df50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800df40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df44:	3301      	adds	r3, #1
 800df46:	b2db      	uxtb	r3, r3
 800df48:	b25a      	sxtb	r2, r3
 800df4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800df50:	2301      	movs	r3, #1
 800df52:	637b      	str	r3, [r7, #52]	@ 0x34
 800df54:	e001      	b.n	800df5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800df56:	2300      	movs	r3, #0
 800df58:	637b      	str	r3, [r7, #52]	@ 0x34
 800df5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	f383 8811 	msr	BASEPRI, r3
}
 800df64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3738      	adds	r7, #56	@ 0x38
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d006      	beq.n	800df8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f1c3 0307 	rsb	r3, r3, #7
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	e001      	b.n	800df92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800df8e:	2300      	movs	r3, #0
 800df90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800df92:	68fb      	ldr	r3, [r7, #12]
	}
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dfac:	2300      	movs	r3, #0
 800dfae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10d      	bne.n	800dfda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d14d      	bne.n	800e062 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 ff92 	bl	800eef4 <xTaskPriorityDisinherit>
 800dfd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	609a      	str	r2, [r3, #8]
 800dfd8:	e043      	b.n	800e062 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d119      	bne.n	800e014 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6858      	ldr	r0, [r3, #4]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe8:	461a      	mov	r2, r3
 800dfea:	68b9      	ldr	r1, [r7, #8]
 800dfec:	f001 fefe 	bl	800fdec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	685a      	ldr	r2, [r3, #4]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dff8:	441a      	add	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	685a      	ldr	r2, [r3, #4]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	429a      	cmp	r2, r3
 800e008:	d32b      	bcc.n	800e062 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	605a      	str	r2, [r3, #4]
 800e012:	e026      	b.n	800e062 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	68d8      	ldr	r0, [r3, #12]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e01c:	461a      	mov	r2, r3
 800e01e:	68b9      	ldr	r1, [r7, #8]
 800e020:	f001 fee4 	bl	800fdec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	68da      	ldr	r2, [r3, #12]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e02c:	425b      	negs	r3, r3
 800e02e:	441a      	add	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	68da      	ldr	r2, [r3, #12]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d207      	bcs.n	800e050 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	689a      	ldr	r2, [r3, #8]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e048:	425b      	negs	r3, r3
 800e04a:	441a      	add	r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b02      	cmp	r3, #2
 800e054:	d105      	bne.n	800e062 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d002      	beq.n	800e062 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	3b01      	subs	r3, #1
 800e060:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	1c5a      	adds	r2, r3, #1
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e06a:	697b      	ldr	r3, [r7, #20]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3718      	adds	r7, #24
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e082:	2b00      	cmp	r3, #0
 800e084:	d018      	beq.n	800e0b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68da      	ldr	r2, [r3, #12]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e08e:	441a      	add	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	68da      	ldr	r2, [r3, #12]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d303      	bcc.n	800e0a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	68d9      	ldr	r1, [r3, #12]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	6838      	ldr	r0, [r7, #0]
 800e0b4:	f001 fe9a 	bl	800fdec <memcpy>
	}
}
 800e0b8:	bf00      	nop
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e0c8:	f001 f9d6 	bl	800f478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e0d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0d4:	e011      	b.n	800e0fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d012      	beq.n	800e104 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	3324      	adds	r3, #36	@ 0x24
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 fcac 	bl	800ea40 <xTaskRemoveFromEventList>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e0ee:	f000 fd85 	bl	800ebfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	dce9      	bgt.n	800e0d6 <prvUnlockQueue+0x16>
 800e102:	e000      	b.n	800e106 <prvUnlockQueue+0x46>
					break;
 800e104:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	22ff      	movs	r2, #255	@ 0xff
 800e10a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e10e:	f001 f9e5 	bl	800f4dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e112:	f001 f9b1 	bl	800f478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e11c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e11e:	e011      	b.n	800e144 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	691b      	ldr	r3, [r3, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d012      	beq.n	800e14e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	3310      	adds	r3, #16
 800e12c:	4618      	mov	r0, r3
 800e12e:	f000 fc87 	bl	800ea40 <xTaskRemoveFromEventList>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e138:	f000 fd60 	bl	800ebfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e13c:	7bbb      	ldrb	r3, [r7, #14]
 800e13e:	3b01      	subs	r3, #1
 800e140:	b2db      	uxtb	r3, r3
 800e142:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	dce9      	bgt.n	800e120 <prvUnlockQueue+0x60>
 800e14c:	e000      	b.n	800e150 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e14e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	22ff      	movs	r2, #255	@ 0xff
 800e154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e158:	f001 f9c0 	bl	800f4dc <vPortExitCritical>
}
 800e15c:	bf00      	nop
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e16c:	f001 f984 	bl	800f478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e174:	2b00      	cmp	r3, #0
 800e176:	d102      	bne.n	800e17e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e178:	2301      	movs	r3, #1
 800e17a:	60fb      	str	r3, [r7, #12]
 800e17c:	e001      	b.n	800e182 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e182:	f001 f9ab 	bl	800f4dc <vPortExitCritical>

	return xReturn;
 800e186:	68fb      	ldr	r3, [r7, #12]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e198:	f001 f96e 	bl	800f478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d102      	bne.n	800e1ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	60fb      	str	r3, [r7, #12]
 800e1ac:	e001      	b.n	800e1b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1b2:	f001 f993 	bl	800f4dc <vPortExitCritical>

	return xReturn;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08e      	sub	sp, #56	@ 0x38
 800e1c4:	af04      	add	r7, sp, #16
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	607a      	str	r2, [r7, #4]
 800e1cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10b      	bne.n	800e1ec <xTaskCreateStatic+0x2c>
	__asm volatile
 800e1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	623b      	str	r3, [r7, #32]
}
 800e1e6:	bf00      	nop
 800e1e8:	bf00      	nop
 800e1ea:	e7fd      	b.n	800e1e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10b      	bne.n	800e20a <xTaskCreateStatic+0x4a>
	__asm volatile
 800e1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	61fb      	str	r3, [r7, #28]
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop
 800e208:	e7fd      	b.n	800e206 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e20a:	23a0      	movs	r3, #160	@ 0xa0
 800e20c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	2ba0      	cmp	r3, #160	@ 0xa0
 800e212:	d00b      	beq.n	800e22c <xTaskCreateStatic+0x6c>
	__asm volatile
 800e214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e218:	f383 8811 	msr	BASEPRI, r3
 800e21c:	f3bf 8f6f 	isb	sy
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	61bb      	str	r3, [r7, #24]
}
 800e226:	bf00      	nop
 800e228:	bf00      	nop
 800e22a:	e7fd      	b.n	800e228 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e22c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e230:	2b00      	cmp	r3, #0
 800e232:	d01e      	beq.n	800e272 <xTaskCreateStatic+0xb2>
 800e234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e236:	2b00      	cmp	r3, #0
 800e238:	d01b      	beq.n	800e272 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e242:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e246:	2202      	movs	r2, #2
 800e248:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e24c:	2300      	movs	r3, #0
 800e24e:	9303      	str	r3, [sp, #12]
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e252:	9302      	str	r3, [sp, #8]
 800e254:	f107 0314 	add.w	r3, r7, #20
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	68b9      	ldr	r1, [r7, #8]
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f000 f851 	bl	800e30c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e26a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e26c:	f000 f8ee 	bl	800e44c <prvAddNewTaskToReadyList>
 800e270:	e001      	b.n	800e276 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e272:	2300      	movs	r3, #0
 800e274:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e276:	697b      	ldr	r3, [r7, #20]
	}
 800e278:	4618      	mov	r0, r3
 800e27a:	3728      	adds	r7, #40	@ 0x28
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e280:	b580      	push	{r7, lr}
 800e282:	b08c      	sub	sp, #48	@ 0x30
 800e284:	af04      	add	r7, sp, #16
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	603b      	str	r3, [r7, #0]
 800e28c:	4613      	mov	r3, r2
 800e28e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e290:	88fb      	ldrh	r3, [r7, #6]
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4618      	mov	r0, r3
 800e296:	f001 fa11 	bl	800f6bc <pvPortMalloc>
 800e29a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00e      	beq.n	800e2c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e2a2:	20a0      	movs	r0, #160	@ 0xa0
 800e2a4:	f001 fa0a 	bl	800f6bc <pvPortMalloc>
 800e2a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d003      	beq.n	800e2b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800e2b6:	e005      	b.n	800e2c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e2b8:	6978      	ldr	r0, [r7, #20]
 800e2ba:	f001 facd 	bl	800f858 <vPortFree>
 800e2be:	e001      	b.n	800e2c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d017      	beq.n	800e2fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e2d2:	88fa      	ldrh	r2, [r7, #6]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	9303      	str	r3, [sp, #12]
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	9302      	str	r3, [sp, #8]
 800e2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2de:	9301      	str	r3, [sp, #4]
 800e2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	68b9      	ldr	r1, [r7, #8]
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f000 f80f 	bl	800e30c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2ee:	69f8      	ldr	r0, [r7, #28]
 800e2f0:	f000 f8ac 	bl	800e44c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	61bb      	str	r3, [r7, #24]
 800e2f8:	e002      	b.n	800e300 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e2fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e300:	69bb      	ldr	r3, [r7, #24]
	}
 800e302:	4618      	mov	r0, r3
 800e304:	3720      	adds	r7, #32
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
	...

0800e30c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b088      	sub	sp, #32
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e324:	3b01      	subs	r3, #1
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	4413      	add	r3, r2
 800e32a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	f023 0307 	bic.w	r3, r3, #7
 800e332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	f003 0307 	and.w	r3, r3, #7
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00b      	beq.n	800e356 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	617b      	str	r3, [r7, #20]
}
 800e350:	bf00      	nop
 800e352:	bf00      	nop
 800e354:	e7fd      	b.n	800e352 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d01f      	beq.n	800e39c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e35c:	2300      	movs	r3, #0
 800e35e:	61fb      	str	r3, [r7, #28]
 800e360:	e012      	b.n	800e388 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	4413      	add	r3, r2
 800e368:	7819      	ldrb	r1, [r3, #0]
 800e36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	4413      	add	r3, r2
 800e370:	3334      	adds	r3, #52	@ 0x34
 800e372:	460a      	mov	r2, r1
 800e374:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	4413      	add	r3, r2
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d006      	beq.n	800e390 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	3301      	adds	r3, #1
 800e386:	61fb      	str	r3, [r7, #28]
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	2b0f      	cmp	r3, #15
 800e38c:	d9e9      	bls.n	800e362 <prvInitialiseNewTask+0x56>
 800e38e:	e000      	b.n	800e392 <prvInitialiseNewTask+0x86>
			{
				break;
 800e390:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e394:	2200      	movs	r2, #0
 800e396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e39a:	e003      	b.n	800e3a4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a6:	2b06      	cmp	r3, #6
 800e3a8:	d901      	bls.n	800e3ae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e3aa:	2306      	movs	r3, #6
 800e3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3b8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3bc:	2200      	movs	r2, #0
 800e3be:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff f8d9 	bl	800d57c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3cc:	3318      	adds	r3, #24
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7ff f8d4 	bl	800d57c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3dc:	f1c3 0207 	rsb	r2, r3, #7
 800e3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fc:	334c      	adds	r3, #76	@ 0x4c
 800e3fe:	224c      	movs	r2, #76	@ 0x4c
 800e400:	2100      	movs	r1, #0
 800e402:	4618      	mov	r0, r3
 800e404:	f001 fc58 	bl	800fcb8 <memset>
 800e408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e40a:	4a0d      	ldr	r2, [pc, #52]	@ (800e440 <prvInitialiseNewTask+0x134>)
 800e40c:	651a      	str	r2, [r3, #80]	@ 0x50
 800e40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e410:	4a0c      	ldr	r2, [pc, #48]	@ (800e444 <prvInitialiseNewTask+0x138>)
 800e412:	655a      	str	r2, [r3, #84]	@ 0x54
 800e414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e416:	4a0c      	ldr	r2, [pc, #48]	@ (800e448 <prvInitialiseNewTask+0x13c>)
 800e418:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	68f9      	ldr	r1, [r7, #12]
 800e41e:	69b8      	ldr	r0, [r7, #24]
 800e420:	f000 fefa 	bl	800f218 <pxPortInitialiseStack>
 800e424:	4602      	mov	r2, r0
 800e426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e436:	bf00      	nop
 800e438:	3720      	adds	r7, #32
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	200053d0 	.word	0x200053d0
 800e444:	20005438 	.word	0x20005438
 800e448:	200054a0 	.word	0x200054a0

0800e44c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e454:	f001 f810 	bl	800f478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e458:	4b2a      	ldr	r3, [pc, #168]	@ (800e504 <prvAddNewTaskToReadyList+0xb8>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3301      	adds	r3, #1
 800e45e:	4a29      	ldr	r2, [pc, #164]	@ (800e504 <prvAddNewTaskToReadyList+0xb8>)
 800e460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e462:	4b29      	ldr	r3, [pc, #164]	@ (800e508 <prvAddNewTaskToReadyList+0xbc>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d109      	bne.n	800e47e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e46a:	4a27      	ldr	r2, [pc, #156]	@ (800e508 <prvAddNewTaskToReadyList+0xbc>)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e470:	4b24      	ldr	r3, [pc, #144]	@ (800e504 <prvAddNewTaskToReadyList+0xb8>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d110      	bne.n	800e49a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e478:	f000 fbe4 	bl	800ec44 <prvInitialiseTaskLists>
 800e47c:	e00d      	b.n	800e49a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e47e:	4b23      	ldr	r3, [pc, #140]	@ (800e50c <prvAddNewTaskToReadyList+0xc0>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d109      	bne.n	800e49a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e486:	4b20      	ldr	r3, [pc, #128]	@ (800e508 <prvAddNewTaskToReadyList+0xbc>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e490:	429a      	cmp	r2, r3
 800e492:	d802      	bhi.n	800e49a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e494:	4a1c      	ldr	r2, [pc, #112]	@ (800e508 <prvAddNewTaskToReadyList+0xbc>)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e49a:	4b1d      	ldr	r3, [pc, #116]	@ (800e510 <prvAddNewTaskToReadyList+0xc4>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	4a1b      	ldr	r2, [pc, #108]	@ (800e510 <prvAddNewTaskToReadyList+0xc4>)
 800e4a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	409a      	lsls	r2, r3
 800e4ac:	4b19      	ldr	r3, [pc, #100]	@ (800e514 <prvAddNewTaskToReadyList+0xc8>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	4a18      	ldr	r2, [pc, #96]	@ (800e514 <prvAddNewTaskToReadyList+0xc8>)
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	4a15      	ldr	r2, [pc, #84]	@ (800e518 <prvAddNewTaskToReadyList+0xcc>)
 800e4c4:	441a      	add	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	4610      	mov	r0, r2
 800e4ce:	f7ff f862 	bl	800d596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e4d2:	f001 f803 	bl	800f4dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e50c <prvAddNewTaskToReadyList+0xc0>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00e      	beq.n	800e4fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e4de:	4b0a      	ldr	r3, [pc, #40]	@ (800e508 <prvAddNewTaskToReadyList+0xbc>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d207      	bcs.n	800e4fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e51c <prvAddNewTaskToReadyList+0xd0>)
 800e4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4fc:	bf00      	nop
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	20001774 	.word	0x20001774
 800e508:	20001674 	.word	0x20001674
 800e50c:	20001780 	.word	0x20001780
 800e510:	20001790 	.word	0x20001790
 800e514:	2000177c 	.word	0x2000177c
 800e518:	20001678 	.word	0x20001678
 800e51c:	e000ed04 	.word	0xe000ed04

0800e520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e528:	2300      	movs	r3, #0
 800e52a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d018      	beq.n	800e564 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e532:	4b14      	ldr	r3, [pc, #80]	@ (800e584 <vTaskDelay+0x64>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00b      	beq.n	800e552 <vTaskDelay+0x32>
	__asm volatile
 800e53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	60bb      	str	r3, [r7, #8]
}
 800e54c:	bf00      	nop
 800e54e:	bf00      	nop
 800e550:	e7fd      	b.n	800e54e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e552:	f000 f885 	bl	800e660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e556:	2100      	movs	r1, #0
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fdf7 	bl	800f14c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e55e:	f000 f88d 	bl	800e67c <xTaskResumeAll>
 800e562:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d107      	bne.n	800e57a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e56a:	4b07      	ldr	r3, [pc, #28]	@ (800e588 <vTaskDelay+0x68>)
 800e56c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e570:	601a      	str	r2, [r3, #0]
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e57a:	bf00      	nop
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	2000179c 	.word	0x2000179c
 800e588:	e000ed04 	.word	0xe000ed04

0800e58c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08a      	sub	sp, #40	@ 0x28
 800e590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e592:	2300      	movs	r3, #0
 800e594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e596:	2300      	movs	r3, #0
 800e598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e59a:	463a      	mov	r2, r7
 800e59c:	1d39      	adds	r1, r7, #4
 800e59e:	f107 0308 	add.w	r3, r7, #8
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7f2 fdda 	bl	800115c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5a8:	6839      	ldr	r1, [r7, #0]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	9202      	str	r2, [sp, #8]
 800e5b0:	9301      	str	r3, [sp, #4]
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	460a      	mov	r2, r1
 800e5ba:	4921      	ldr	r1, [pc, #132]	@ (800e640 <vTaskStartScheduler+0xb4>)
 800e5bc:	4821      	ldr	r0, [pc, #132]	@ (800e644 <vTaskStartScheduler+0xb8>)
 800e5be:	f7ff fdff 	bl	800e1c0 <xTaskCreateStatic>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	4a20      	ldr	r2, [pc, #128]	@ (800e648 <vTaskStartScheduler+0xbc>)
 800e5c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5c8:	4b1f      	ldr	r3, [pc, #124]	@ (800e648 <vTaskStartScheduler+0xbc>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d002      	beq.n	800e5d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	617b      	str	r3, [r7, #20]
 800e5d4:	e001      	b.n	800e5da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d11b      	bne.n	800e618 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	613b      	str	r3, [r7, #16]
}
 800e5f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5f4:	4b15      	ldr	r3, [pc, #84]	@ (800e64c <vTaskStartScheduler+0xc0>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	334c      	adds	r3, #76	@ 0x4c
 800e5fa:	4a15      	ldr	r2, [pc, #84]	@ (800e650 <vTaskStartScheduler+0xc4>)
 800e5fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e5fe:	4b15      	ldr	r3, [pc, #84]	@ (800e654 <vTaskStartScheduler+0xc8>)
 800e600:	f04f 32ff 	mov.w	r2, #4294967295
 800e604:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e606:	4b14      	ldr	r3, [pc, #80]	@ (800e658 <vTaskStartScheduler+0xcc>)
 800e608:	2201      	movs	r2, #1
 800e60a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e60c:	4b13      	ldr	r3, [pc, #76]	@ (800e65c <vTaskStartScheduler+0xd0>)
 800e60e:	2200      	movs	r2, #0
 800e610:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e612:	f000 fe8d 	bl	800f330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e616:	e00f      	b.n	800e638 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e61e:	d10b      	bne.n	800e638 <vTaskStartScheduler+0xac>
	__asm volatile
 800e620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	60fb      	str	r3, [r7, #12]
}
 800e632:	bf00      	nop
 800e634:	bf00      	nop
 800e636:	e7fd      	b.n	800e634 <vTaskStartScheduler+0xa8>
}
 800e638:	bf00      	nop
 800e63a:	3718      	adds	r7, #24
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	08010624 	.word	0x08010624
 800e644:	0800ec15 	.word	0x0800ec15
 800e648:	20001798 	.word	0x20001798
 800e64c:	20001674 	.word	0x20001674
 800e650:	200002d8 	.word	0x200002d8
 800e654:	20001794 	.word	0x20001794
 800e658:	20001780 	.word	0x20001780
 800e65c:	20001778 	.word	0x20001778

0800e660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e660:	b480      	push	{r7}
 800e662:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e664:	4b04      	ldr	r3, [pc, #16]	@ (800e678 <vTaskSuspendAll+0x18>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3301      	adds	r3, #1
 800e66a:	4a03      	ldr	r2, [pc, #12]	@ (800e678 <vTaskSuspendAll+0x18>)
 800e66c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e66e:	bf00      	nop
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	2000179c 	.word	0x2000179c

0800e67c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e682:	2300      	movs	r3, #0
 800e684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e686:	2300      	movs	r3, #0
 800e688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e68a:	4b42      	ldr	r3, [pc, #264]	@ (800e794 <xTaskResumeAll+0x118>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10b      	bne.n	800e6aa <xTaskResumeAll+0x2e>
	__asm volatile
 800e692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	603b      	str	r3, [r7, #0]
}
 800e6a4:	bf00      	nop
 800e6a6:	bf00      	nop
 800e6a8:	e7fd      	b.n	800e6a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6aa:	f000 fee5 	bl	800f478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6ae:	4b39      	ldr	r3, [pc, #228]	@ (800e794 <xTaskResumeAll+0x118>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	4a37      	ldr	r2, [pc, #220]	@ (800e794 <xTaskResumeAll+0x118>)
 800e6b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6b8:	4b36      	ldr	r3, [pc, #216]	@ (800e794 <xTaskResumeAll+0x118>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d161      	bne.n	800e784 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6c0:	4b35      	ldr	r3, [pc, #212]	@ (800e798 <xTaskResumeAll+0x11c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d05d      	beq.n	800e784 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6c8:	e02e      	b.n	800e728 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ca:	4b34      	ldr	r3, [pc, #208]	@ (800e79c <xTaskResumeAll+0x120>)
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3318      	adds	r3, #24
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe ffba 	bl	800d650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3304      	adds	r3, #4
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fe ffb5 	bl	800d650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	409a      	lsls	r2, r3
 800e6ee:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a0 <xTaskResumeAll+0x124>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	4a2a      	ldr	r2, [pc, #168]	@ (800e7a0 <xTaskResumeAll+0x124>)
 800e6f6:	6013      	str	r3, [r2, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4a27      	ldr	r2, [pc, #156]	@ (800e7a4 <xTaskResumeAll+0x128>)
 800e706:	441a      	add	r2, r3
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4619      	mov	r1, r3
 800e70e:	4610      	mov	r0, r2
 800e710:	f7fe ff41 	bl	800d596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e718:	4b23      	ldr	r3, [pc, #140]	@ (800e7a8 <xTaskResumeAll+0x12c>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e71e:	429a      	cmp	r2, r3
 800e720:	d302      	bcc.n	800e728 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e722:	4b22      	ldr	r3, [pc, #136]	@ (800e7ac <xTaskResumeAll+0x130>)
 800e724:	2201      	movs	r2, #1
 800e726:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e728:	4b1c      	ldr	r3, [pc, #112]	@ (800e79c <xTaskResumeAll+0x120>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1cc      	bne.n	800e6ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e736:	f000 fb29 	bl	800ed8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e73a:	4b1d      	ldr	r3, [pc, #116]	@ (800e7b0 <xTaskResumeAll+0x134>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d010      	beq.n	800e768 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e746:	f000 f837 	bl	800e7b8 <xTaskIncrementTick>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d002      	beq.n	800e756 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e750:	4b16      	ldr	r3, [pc, #88]	@ (800e7ac <xTaskResumeAll+0x130>)
 800e752:	2201      	movs	r2, #1
 800e754:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3b01      	subs	r3, #1
 800e75a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1f1      	bne.n	800e746 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e762:	4b13      	ldr	r3, [pc, #76]	@ (800e7b0 <xTaskResumeAll+0x134>)
 800e764:	2200      	movs	r2, #0
 800e766:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e768:	4b10      	ldr	r3, [pc, #64]	@ (800e7ac <xTaskResumeAll+0x130>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d009      	beq.n	800e784 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e770:	2301      	movs	r3, #1
 800e772:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e774:	4b0f      	ldr	r3, [pc, #60]	@ (800e7b4 <xTaskResumeAll+0x138>)
 800e776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e77a:	601a      	str	r2, [r3, #0]
 800e77c:	f3bf 8f4f 	dsb	sy
 800e780:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e784:	f000 feaa 	bl	800f4dc <vPortExitCritical>

	return xAlreadyYielded;
 800e788:	68bb      	ldr	r3, [r7, #8]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	2000179c 	.word	0x2000179c
 800e798:	20001774 	.word	0x20001774
 800e79c:	20001734 	.word	0x20001734
 800e7a0:	2000177c 	.word	0x2000177c
 800e7a4:	20001678 	.word	0x20001678
 800e7a8:	20001674 	.word	0x20001674
 800e7ac:	20001788 	.word	0x20001788
 800e7b0:	20001784 	.word	0x20001784
 800e7b4:	e000ed04 	.word	0xe000ed04

0800e7b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b086      	sub	sp, #24
 800e7bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7c2:	4b4f      	ldr	r3, [pc, #316]	@ (800e900 <xTaskIncrementTick+0x148>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f040 808f 	bne.w	800e8ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7cc:	4b4d      	ldr	r3, [pc, #308]	@ (800e904 <xTaskIncrementTick+0x14c>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e7d4:	4a4b      	ldr	r2, [pc, #300]	@ (800e904 <xTaskIncrementTick+0x14c>)
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d121      	bne.n	800e824 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e7e0:	4b49      	ldr	r3, [pc, #292]	@ (800e908 <xTaskIncrementTick+0x150>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00b      	beq.n	800e802 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ee:	f383 8811 	msr	BASEPRI, r3
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	f3bf 8f4f 	dsb	sy
 800e7fa:	603b      	str	r3, [r7, #0]
}
 800e7fc:	bf00      	nop
 800e7fe:	bf00      	nop
 800e800:	e7fd      	b.n	800e7fe <xTaskIncrementTick+0x46>
 800e802:	4b41      	ldr	r3, [pc, #260]	@ (800e908 <xTaskIncrementTick+0x150>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	60fb      	str	r3, [r7, #12]
 800e808:	4b40      	ldr	r3, [pc, #256]	@ (800e90c <xTaskIncrementTick+0x154>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a3e      	ldr	r2, [pc, #248]	@ (800e908 <xTaskIncrementTick+0x150>)
 800e80e:	6013      	str	r3, [r2, #0]
 800e810:	4a3e      	ldr	r2, [pc, #248]	@ (800e90c <xTaskIncrementTick+0x154>)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6013      	str	r3, [r2, #0]
 800e816:	4b3e      	ldr	r3, [pc, #248]	@ (800e910 <xTaskIncrementTick+0x158>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	3301      	adds	r3, #1
 800e81c:	4a3c      	ldr	r2, [pc, #240]	@ (800e910 <xTaskIncrementTick+0x158>)
 800e81e:	6013      	str	r3, [r2, #0]
 800e820:	f000 fab4 	bl	800ed8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e824:	4b3b      	ldr	r3, [pc, #236]	@ (800e914 <xTaskIncrementTick+0x15c>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	693a      	ldr	r2, [r7, #16]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d348      	bcc.n	800e8c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e82e:	4b36      	ldr	r3, [pc, #216]	@ (800e908 <xTaskIncrementTick+0x150>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d104      	bne.n	800e842 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e838:	4b36      	ldr	r3, [pc, #216]	@ (800e914 <xTaskIncrementTick+0x15c>)
 800e83a:	f04f 32ff 	mov.w	r2, #4294967295
 800e83e:	601a      	str	r2, [r3, #0]
					break;
 800e840:	e03e      	b.n	800e8c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e842:	4b31      	ldr	r3, [pc, #196]	@ (800e908 <xTaskIncrementTick+0x150>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	429a      	cmp	r2, r3
 800e858:	d203      	bcs.n	800e862 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e85a:	4a2e      	ldr	r2, [pc, #184]	@ (800e914 <xTaskIncrementTick+0x15c>)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e860:	e02e      	b.n	800e8c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	3304      	adds	r3, #4
 800e866:	4618      	mov	r0, r3
 800e868:	f7fe fef2 	bl	800d650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e870:	2b00      	cmp	r3, #0
 800e872:	d004      	beq.n	800e87e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	3318      	adds	r3, #24
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fe fee9 	bl	800d650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e882:	2201      	movs	r2, #1
 800e884:	409a      	lsls	r2, r3
 800e886:	4b24      	ldr	r3, [pc, #144]	@ (800e918 <xTaskIncrementTick+0x160>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	4a22      	ldr	r2, [pc, #136]	@ (800e918 <xTaskIncrementTick+0x160>)
 800e88e:	6013      	str	r3, [r2, #0]
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e894:	4613      	mov	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4a1f      	ldr	r2, [pc, #124]	@ (800e91c <xTaskIncrementTick+0x164>)
 800e89e:	441a      	add	r2, r3
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	f7fe fe75 	bl	800d596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8b0:	4b1b      	ldr	r3, [pc, #108]	@ (800e920 <xTaskIncrementTick+0x168>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d3b9      	bcc.n	800e82e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8be:	e7b6      	b.n	800e82e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8c0:	4b17      	ldr	r3, [pc, #92]	@ (800e920 <xTaskIncrementTick+0x168>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8c6:	4915      	ldr	r1, [pc, #84]	@ (800e91c <xTaskIncrementTick+0x164>)
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	4413      	add	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	440b      	add	r3, r1
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d901      	bls.n	800e8dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e8dc:	4b11      	ldr	r3, [pc, #68]	@ (800e924 <xTaskIncrementTick+0x16c>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d007      	beq.n	800e8f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	617b      	str	r3, [r7, #20]
 800e8e8:	e004      	b.n	800e8f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e8ea:	4b0f      	ldr	r3, [pc, #60]	@ (800e928 <xTaskIncrementTick+0x170>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	4a0d      	ldr	r2, [pc, #52]	@ (800e928 <xTaskIncrementTick+0x170>)
 800e8f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e8f4:	697b      	ldr	r3, [r7, #20]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	2000179c 	.word	0x2000179c
 800e904:	20001778 	.word	0x20001778
 800e908:	2000172c 	.word	0x2000172c
 800e90c:	20001730 	.word	0x20001730
 800e910:	2000178c 	.word	0x2000178c
 800e914:	20001794 	.word	0x20001794
 800e918:	2000177c 	.word	0x2000177c
 800e91c:	20001678 	.word	0x20001678
 800e920:	20001674 	.word	0x20001674
 800e924:	20001788 	.word	0x20001788
 800e928:	20001784 	.word	0x20001784

0800e92c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e92c:	b480      	push	{r7}
 800e92e:	b087      	sub	sp, #28
 800e930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e932:	4b2a      	ldr	r3, [pc, #168]	@ (800e9dc <vTaskSwitchContext+0xb0>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d003      	beq.n	800e942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e93a:	4b29      	ldr	r3, [pc, #164]	@ (800e9e0 <vTaskSwitchContext+0xb4>)
 800e93c:	2201      	movs	r2, #1
 800e93e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e940:	e045      	b.n	800e9ce <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e942:	4b27      	ldr	r3, [pc, #156]	@ (800e9e0 <vTaskSwitchContext+0xb4>)
 800e944:	2200      	movs	r2, #0
 800e946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e948:	4b26      	ldr	r3, [pc, #152]	@ (800e9e4 <vTaskSwitchContext+0xb8>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	fab3 f383 	clz	r3, r3
 800e954:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e956:	7afb      	ldrb	r3, [r7, #11]
 800e958:	f1c3 031f 	rsb	r3, r3, #31
 800e95c:	617b      	str	r3, [r7, #20]
 800e95e:	4922      	ldr	r1, [pc, #136]	@ (800e9e8 <vTaskSwitchContext+0xbc>)
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	4613      	mov	r3, r2
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	4413      	add	r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	440b      	add	r3, r1
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d10b      	bne.n	800e98a <vTaskSwitchContext+0x5e>
	__asm volatile
 800e972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e976:	f383 8811 	msr	BASEPRI, r3
 800e97a:	f3bf 8f6f 	isb	sy
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	607b      	str	r3, [r7, #4]
}
 800e984:	bf00      	nop
 800e986:	bf00      	nop
 800e988:	e7fd      	b.n	800e986 <vTaskSwitchContext+0x5a>
 800e98a:	697a      	ldr	r2, [r7, #20]
 800e98c:	4613      	mov	r3, r2
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	4413      	add	r3, r2
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	4a14      	ldr	r2, [pc, #80]	@ (800e9e8 <vTaskSwitchContext+0xbc>)
 800e996:	4413      	add	r3, r2
 800e998:	613b      	str	r3, [r7, #16]
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	605a      	str	r2, [r3, #4]
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	685a      	ldr	r2, [r3, #4]
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d104      	bne.n	800e9ba <vTaskSwitchContext+0x8e>
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	685a      	ldr	r2, [r3, #4]
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	605a      	str	r2, [r3, #4]
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800e9ec <vTaskSwitchContext+0xc0>)
 800e9c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e9c4:	4b09      	ldr	r3, [pc, #36]	@ (800e9ec <vTaskSwitchContext+0xc0>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	334c      	adds	r3, #76	@ 0x4c
 800e9ca:	4a09      	ldr	r2, [pc, #36]	@ (800e9f0 <vTaskSwitchContext+0xc4>)
 800e9cc:	6013      	str	r3, [r2, #0]
}
 800e9ce:	bf00      	nop
 800e9d0:	371c      	adds	r7, #28
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	2000179c 	.word	0x2000179c
 800e9e0:	20001788 	.word	0x20001788
 800e9e4:	2000177c 	.word	0x2000177c
 800e9e8:	20001678 	.word	0x20001678
 800e9ec:	20001674 	.word	0x20001674
 800e9f0:	200002d8 	.word	0x200002d8

0800e9f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10b      	bne.n	800ea1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	60fb      	str	r3, [r7, #12]
}
 800ea16:	bf00      	nop
 800ea18:	bf00      	nop
 800ea1a:	e7fd      	b.n	800ea18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea1c:	4b07      	ldr	r3, [pc, #28]	@ (800ea3c <vTaskPlaceOnEventList+0x48>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3318      	adds	r3, #24
 800ea22:	4619      	mov	r1, r3
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7fe fdda 	bl	800d5de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea2a:	2101      	movs	r1, #1
 800ea2c:	6838      	ldr	r0, [r7, #0]
 800ea2e:	f000 fb8d 	bl	800f14c <prvAddCurrentTaskToDelayedList>
}
 800ea32:	bf00      	nop
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	20001674 	.word	0x20001674

0800ea40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d10b      	bne.n	800ea6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ea56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea5a:	f383 8811 	msr	BASEPRI, r3
 800ea5e:	f3bf 8f6f 	isb	sy
 800ea62:	f3bf 8f4f 	dsb	sy
 800ea66:	60fb      	str	r3, [r7, #12]
}
 800ea68:	bf00      	nop
 800ea6a:	bf00      	nop
 800ea6c:	e7fd      	b.n	800ea6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	3318      	adds	r3, #24
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fe fdec 	bl	800d650 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea78:	4b1d      	ldr	r3, [pc, #116]	@ (800eaf0 <xTaskRemoveFromEventList+0xb0>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d11c      	bne.n	800eaba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	3304      	adds	r3, #4
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fe fde3 	bl	800d650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea8e:	2201      	movs	r2, #1
 800ea90:	409a      	lsls	r2, r3
 800ea92:	4b18      	ldr	r3, [pc, #96]	@ (800eaf4 <xTaskRemoveFromEventList+0xb4>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	4a16      	ldr	r2, [pc, #88]	@ (800eaf4 <xTaskRemoveFromEventList+0xb4>)
 800ea9a:	6013      	str	r3, [r2, #0]
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	4413      	add	r3, r2
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	4a13      	ldr	r2, [pc, #76]	@ (800eaf8 <xTaskRemoveFromEventList+0xb8>)
 800eaaa:	441a      	add	r2, r3
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	3304      	adds	r3, #4
 800eab0:	4619      	mov	r1, r3
 800eab2:	4610      	mov	r0, r2
 800eab4:	f7fe fd6f 	bl	800d596 <vListInsertEnd>
 800eab8:	e005      	b.n	800eac6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	3318      	adds	r3, #24
 800eabe:	4619      	mov	r1, r3
 800eac0:	480e      	ldr	r0, [pc, #56]	@ (800eafc <xTaskRemoveFromEventList+0xbc>)
 800eac2:	f7fe fd68 	bl	800d596 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaca:	4b0d      	ldr	r3, [pc, #52]	@ (800eb00 <xTaskRemoveFromEventList+0xc0>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d905      	bls.n	800eae0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ead4:	2301      	movs	r3, #1
 800ead6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ead8:	4b0a      	ldr	r3, [pc, #40]	@ (800eb04 <xTaskRemoveFromEventList+0xc4>)
 800eada:	2201      	movs	r2, #1
 800eadc:	601a      	str	r2, [r3, #0]
 800eade:	e001      	b.n	800eae4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eae0:	2300      	movs	r3, #0
 800eae2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eae4:	697b      	ldr	r3, [r7, #20]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3718      	adds	r7, #24
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	2000179c 	.word	0x2000179c
 800eaf4:	2000177c 	.word	0x2000177c
 800eaf8:	20001678 	.word	0x20001678
 800eafc:	20001734 	.word	0x20001734
 800eb00:	20001674 	.word	0x20001674
 800eb04:	20001788 	.word	0x20001788

0800eb08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb10:	4b06      	ldr	r3, [pc, #24]	@ (800eb2c <vTaskInternalSetTimeOutState+0x24>)
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb18:	4b05      	ldr	r3, [pc, #20]	@ (800eb30 <vTaskInternalSetTimeOutState+0x28>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	605a      	str	r2, [r3, #4]
}
 800eb20:	bf00      	nop
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	2000178c 	.word	0x2000178c
 800eb30:	20001778 	.word	0x20001778

0800eb34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b088      	sub	sp, #32
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10b      	bne.n	800eb5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800eb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	613b      	str	r3, [r7, #16]
}
 800eb56:	bf00      	nop
 800eb58:	bf00      	nop
 800eb5a:	e7fd      	b.n	800eb58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d10b      	bne.n	800eb7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	60fb      	str	r3, [r7, #12]
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop
 800eb78:	e7fd      	b.n	800eb76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eb7a:	f000 fc7d 	bl	800f478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb7e:	4b1d      	ldr	r3, [pc, #116]	@ (800ebf4 <xTaskCheckForTimeOut+0xc0>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	69ba      	ldr	r2, [r7, #24]
 800eb8a:	1ad3      	subs	r3, r2, r3
 800eb8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb96:	d102      	bne.n	800eb9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	61fb      	str	r3, [r7, #28]
 800eb9c:	e023      	b.n	800ebe6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	4b15      	ldr	r3, [pc, #84]	@ (800ebf8 <xTaskCheckForTimeOut+0xc4>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d007      	beq.n	800ebba <xTaskCheckForTimeOut+0x86>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	69ba      	ldr	r2, [r7, #24]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d302      	bcc.n	800ebba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	61fb      	str	r3, [r7, #28]
 800ebb8:	e015      	b.n	800ebe6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	697a      	ldr	r2, [r7, #20]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d20b      	bcs.n	800ebdc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	1ad2      	subs	r2, r2, r3
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7ff ff99 	bl	800eb08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	61fb      	str	r3, [r7, #28]
 800ebda:	e004      	b.n	800ebe6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ebe6:	f000 fc79 	bl	800f4dc <vPortExitCritical>

	return xReturn;
 800ebea:	69fb      	ldr	r3, [r7, #28]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3720      	adds	r7, #32
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	20001778 	.word	0x20001778
 800ebf8:	2000178c 	.word	0x2000178c

0800ebfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec00:	4b03      	ldr	r3, [pc, #12]	@ (800ec10 <vTaskMissedYield+0x14>)
 800ec02:	2201      	movs	r2, #1
 800ec04:	601a      	str	r2, [r3, #0]
}
 800ec06:	bf00      	nop
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr
 800ec10:	20001788 	.word	0x20001788

0800ec14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec1c:	f000 f852 	bl	800ecc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec20:	4b06      	ldr	r3, [pc, #24]	@ (800ec3c <prvIdleTask+0x28>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d9f9      	bls.n	800ec1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ec28:	4b05      	ldr	r3, [pc, #20]	@ (800ec40 <prvIdleTask+0x2c>)
 800ec2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec2e:	601a      	str	r2, [r3, #0]
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ec38:	e7f0      	b.n	800ec1c <prvIdleTask+0x8>
 800ec3a:	bf00      	nop
 800ec3c:	20001678 	.word	0x20001678
 800ec40:	e000ed04 	.word	0xe000ed04

0800ec44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	607b      	str	r3, [r7, #4]
 800ec4e:	e00c      	b.n	800ec6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	4613      	mov	r3, r2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	4413      	add	r3, r2
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	4a12      	ldr	r2, [pc, #72]	@ (800eca4 <prvInitialiseTaskLists+0x60>)
 800ec5c:	4413      	add	r3, r2
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe fc6c 	bl	800d53c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	3301      	adds	r3, #1
 800ec68:	607b      	str	r3, [r7, #4]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2b06      	cmp	r3, #6
 800ec6e:	d9ef      	bls.n	800ec50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec70:	480d      	ldr	r0, [pc, #52]	@ (800eca8 <prvInitialiseTaskLists+0x64>)
 800ec72:	f7fe fc63 	bl	800d53c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec76:	480d      	ldr	r0, [pc, #52]	@ (800ecac <prvInitialiseTaskLists+0x68>)
 800ec78:	f7fe fc60 	bl	800d53c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec7c:	480c      	ldr	r0, [pc, #48]	@ (800ecb0 <prvInitialiseTaskLists+0x6c>)
 800ec7e:	f7fe fc5d 	bl	800d53c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec82:	480c      	ldr	r0, [pc, #48]	@ (800ecb4 <prvInitialiseTaskLists+0x70>)
 800ec84:	f7fe fc5a 	bl	800d53c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec88:	480b      	ldr	r0, [pc, #44]	@ (800ecb8 <prvInitialiseTaskLists+0x74>)
 800ec8a:	f7fe fc57 	bl	800d53c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec8e:	4b0b      	ldr	r3, [pc, #44]	@ (800ecbc <prvInitialiseTaskLists+0x78>)
 800ec90:	4a05      	ldr	r2, [pc, #20]	@ (800eca8 <prvInitialiseTaskLists+0x64>)
 800ec92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec94:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc0 <prvInitialiseTaskLists+0x7c>)
 800ec96:	4a05      	ldr	r2, [pc, #20]	@ (800ecac <prvInitialiseTaskLists+0x68>)
 800ec98:	601a      	str	r2, [r3, #0]
}
 800ec9a:	bf00      	nop
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20001678 	.word	0x20001678
 800eca8:	20001704 	.word	0x20001704
 800ecac:	20001718 	.word	0x20001718
 800ecb0:	20001734 	.word	0x20001734
 800ecb4:	20001748 	.word	0x20001748
 800ecb8:	20001760 	.word	0x20001760
 800ecbc:	2000172c 	.word	0x2000172c
 800ecc0:	20001730 	.word	0x20001730

0800ecc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecca:	e019      	b.n	800ed00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eccc:	f000 fbd4 	bl	800f478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecd0:	4b10      	ldr	r3, [pc, #64]	@ (800ed14 <prvCheckTasksWaitingTermination+0x50>)
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	3304      	adds	r3, #4
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fe fcb7 	bl	800d650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ece2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed18 <prvCheckTasksWaitingTermination+0x54>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	4a0b      	ldr	r2, [pc, #44]	@ (800ed18 <prvCheckTasksWaitingTermination+0x54>)
 800ecea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ecec:	4b0b      	ldr	r3, [pc, #44]	@ (800ed1c <prvCheckTasksWaitingTermination+0x58>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	4a0a      	ldr	r2, [pc, #40]	@ (800ed1c <prvCheckTasksWaitingTermination+0x58>)
 800ecf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecf6:	f000 fbf1 	bl	800f4dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 f810 	bl	800ed20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed00:	4b06      	ldr	r3, [pc, #24]	@ (800ed1c <prvCheckTasksWaitingTermination+0x58>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1e1      	bne.n	800eccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed08:	bf00      	nop
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20001748 	.word	0x20001748
 800ed18:	20001774 	.word	0x20001774
 800ed1c:	2000175c 	.word	0x2000175c

0800ed20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	334c      	adds	r3, #76	@ 0x4c
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 ffcb 	bl	800fcc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d108      	bne.n	800ed4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed40:	4618      	mov	r0, r3
 800ed42:	f000 fd89 	bl	800f858 <vPortFree>
				vPortFree( pxTCB );
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fd86 	bl	800f858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed4c:	e019      	b.n	800ed82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d103      	bne.n	800ed60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 fd7d 	bl	800f858 <vPortFree>
	}
 800ed5e:	e010      	b.n	800ed82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d00b      	beq.n	800ed82 <prvDeleteTCB+0x62>
	__asm volatile
 800ed6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	60fb      	str	r3, [r7, #12]
}
 800ed7c:	bf00      	nop
 800ed7e:	bf00      	nop
 800ed80:	e7fd      	b.n	800ed7e <prvDeleteTCB+0x5e>
	}
 800ed82:	bf00      	nop
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
	...

0800ed8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b083      	sub	sp, #12
 800ed90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed92:	4b0c      	ldr	r3, [pc, #48]	@ (800edc4 <prvResetNextTaskUnblockTime+0x38>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d104      	bne.n	800eda6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed9c:	4b0a      	ldr	r3, [pc, #40]	@ (800edc8 <prvResetNextTaskUnblockTime+0x3c>)
 800ed9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eda2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eda4:	e008      	b.n	800edb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eda6:	4b07      	ldr	r3, [pc, #28]	@ (800edc4 <prvResetNextTaskUnblockTime+0x38>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	4a04      	ldr	r2, [pc, #16]	@ (800edc8 <prvResetNextTaskUnblockTime+0x3c>)
 800edb6:	6013      	str	r3, [r2, #0]
}
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr
 800edc4:	2000172c 	.word	0x2000172c
 800edc8:	20001794 	.word	0x20001794

0800edcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800edd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ee00 <xTaskGetSchedulerState+0x34>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d102      	bne.n	800ede0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800edda:	2301      	movs	r3, #1
 800eddc:	607b      	str	r3, [r7, #4]
 800edde:	e008      	b.n	800edf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ede0:	4b08      	ldr	r3, [pc, #32]	@ (800ee04 <xTaskGetSchedulerState+0x38>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d102      	bne.n	800edee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ede8:	2302      	movs	r3, #2
 800edea:	607b      	str	r3, [r7, #4]
 800edec:	e001      	b.n	800edf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edee:	2300      	movs	r3, #0
 800edf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edf2:	687b      	ldr	r3, [r7, #4]
	}
 800edf4:	4618      	mov	r0, r3
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	20001780 	.word	0x20001780
 800ee04:	2000179c 	.word	0x2000179c

0800ee08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee14:	2300      	movs	r3, #0
 800ee16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d05e      	beq.n	800eedc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee22:	4b31      	ldr	r3, [pc, #196]	@ (800eee8 <xTaskPriorityInherit+0xe0>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d24e      	bcs.n	800eeca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	699b      	ldr	r3, [r3, #24]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	db06      	blt.n	800ee42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee34:	4b2c      	ldr	r3, [pc, #176]	@ (800eee8 <xTaskPriorityInherit+0xe0>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee3a:	f1c3 0207 	rsb	r2, r3, #7
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	6959      	ldr	r1, [r3, #20]
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	4a26      	ldr	r2, [pc, #152]	@ (800eeec <xTaskPriorityInherit+0xe4>)
 800ee54:	4413      	add	r3, r2
 800ee56:	4299      	cmp	r1, r3
 800ee58:	d12f      	bne.n	800eeba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fe fbf6 	bl	800d650 <uxListRemove>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10a      	bne.n	800ee80 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee6e:	2201      	movs	r2, #1
 800ee70:	fa02 f303 	lsl.w	r3, r2, r3
 800ee74:	43da      	mvns	r2, r3
 800ee76:	4b1e      	ldr	r3, [pc, #120]	@ (800eef0 <xTaskPriorityInherit+0xe8>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	4a1c      	ldr	r2, [pc, #112]	@ (800eef0 <xTaskPriorityInherit+0xe8>)
 800ee7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee80:	4b19      	ldr	r3, [pc, #100]	@ (800eee8 <xTaskPriorityInherit+0xe0>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee8e:	2201      	movs	r2, #1
 800ee90:	409a      	lsls	r2, r3
 800ee92:	4b17      	ldr	r3, [pc, #92]	@ (800eef0 <xTaskPriorityInherit+0xe8>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4313      	orrs	r3, r2
 800ee98:	4a15      	ldr	r2, [pc, #84]	@ (800eef0 <xTaskPriorityInherit+0xe8>)
 800ee9a:	6013      	str	r3, [r2, #0]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eea0:	4613      	mov	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4413      	add	r3, r2
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	4a10      	ldr	r2, [pc, #64]	@ (800eeec <xTaskPriorityInherit+0xe4>)
 800eeaa:	441a      	add	r2, r3
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	3304      	adds	r3, #4
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f7fe fb6f 	bl	800d596 <vListInsertEnd>
 800eeb8:	e004      	b.n	800eec4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eeba:	4b0b      	ldr	r3, [pc, #44]	@ (800eee8 <xTaskPriorityInherit+0xe0>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eec4:	2301      	movs	r3, #1
 800eec6:	60fb      	str	r3, [r7, #12]
 800eec8:	e008      	b.n	800eedc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eece:	4b06      	ldr	r3, [pc, #24]	@ (800eee8 <xTaskPriorityInherit+0xe0>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d201      	bcs.n	800eedc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eed8:	2301      	movs	r3, #1
 800eeda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eedc:	68fb      	ldr	r3, [r7, #12]
	}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	20001674 	.word	0x20001674
 800eeec:	20001678 	.word	0x20001678
 800eef0:	2000177c 	.word	0x2000177c

0800eef4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef00:	2300      	movs	r3, #0
 800ef02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d070      	beq.n	800efec <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef0a:	4b3b      	ldr	r3, [pc, #236]	@ (800eff8 <xTaskPriorityDisinherit+0x104>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	693a      	ldr	r2, [r7, #16]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d00b      	beq.n	800ef2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ef14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef18:	f383 8811 	msr	BASEPRI, r3
 800ef1c:	f3bf 8f6f 	isb	sy
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	60fb      	str	r3, [r7, #12]
}
 800ef26:	bf00      	nop
 800ef28:	bf00      	nop
 800ef2a:	e7fd      	b.n	800ef28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d10b      	bne.n	800ef4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ef34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef38:	f383 8811 	msr	BASEPRI, r3
 800ef3c:	f3bf 8f6f 	isb	sy
 800ef40:	f3bf 8f4f 	dsb	sy
 800ef44:	60bb      	str	r3, [r7, #8]
}
 800ef46:	bf00      	nop
 800ef48:	bf00      	nop
 800ef4a:	e7fd      	b.n	800ef48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef50:	1e5a      	subs	r2, r3, #1
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d044      	beq.n	800efec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d140      	bne.n	800efec <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fe fb6e 	bl	800d650 <uxListRemove>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d115      	bne.n	800efa6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef7e:	491f      	ldr	r1, [pc, #124]	@ (800effc <xTaskPriorityDisinherit+0x108>)
 800ef80:	4613      	mov	r3, r2
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	440b      	add	r3, r1
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d10a      	bne.n	800efa6 <xTaskPriorityDisinherit+0xb2>
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef94:	2201      	movs	r2, #1
 800ef96:	fa02 f303 	lsl.w	r3, r2, r3
 800ef9a:	43da      	mvns	r2, r3
 800ef9c:	4b18      	ldr	r3, [pc, #96]	@ (800f000 <xTaskPriorityDisinherit+0x10c>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4013      	ands	r3, r2
 800efa2:	4a17      	ldr	r2, [pc, #92]	@ (800f000 <xTaskPriorityDisinherit+0x10c>)
 800efa4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb2:	f1c3 0207 	rsb	r2, r3, #7
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efbe:	2201      	movs	r2, #1
 800efc0:	409a      	lsls	r2, r3
 800efc2:	4b0f      	ldr	r3, [pc, #60]	@ (800f000 <xTaskPriorityDisinherit+0x10c>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4313      	orrs	r3, r2
 800efc8:	4a0d      	ldr	r2, [pc, #52]	@ (800f000 <xTaskPriorityDisinherit+0x10c>)
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd0:	4613      	mov	r3, r2
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	4413      	add	r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4a08      	ldr	r2, [pc, #32]	@ (800effc <xTaskPriorityDisinherit+0x108>)
 800efda:	441a      	add	r2, r3
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	3304      	adds	r3, #4
 800efe0:	4619      	mov	r1, r3
 800efe2:	4610      	mov	r0, r2
 800efe4:	f7fe fad7 	bl	800d596 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800efe8:	2301      	movs	r3, #1
 800efea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800efec:	697b      	ldr	r3, [r7, #20]
	}
 800efee:	4618      	mov	r0, r3
 800eff0:	3718      	adds	r7, #24
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	20001674 	.word	0x20001674
 800effc:	20001678 	.word	0x20001678
 800f000:	2000177c 	.word	0x2000177c

0800f004 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f004:	b580      	push	{r7, lr}
 800f006:	b088      	sub	sp, #32
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f012:	2301      	movs	r3, #1
 800f014:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d079      	beq.n	800f110 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10b      	bne.n	800f03c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f028:	f383 8811 	msr	BASEPRI, r3
 800f02c:	f3bf 8f6f 	isb	sy
 800f030:	f3bf 8f4f 	dsb	sy
 800f034:	60fb      	str	r3, [r7, #12]
}
 800f036:	bf00      	nop
 800f038:	bf00      	nop
 800f03a:	e7fd      	b.n	800f038 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f040:	683a      	ldr	r2, [r7, #0]
 800f042:	429a      	cmp	r2, r3
 800f044:	d902      	bls.n	800f04c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	61fb      	str	r3, [r7, #28]
 800f04a:	e002      	b.n	800f052 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f050:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f056:	69fa      	ldr	r2, [r7, #28]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d059      	beq.n	800f110 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f060:	697a      	ldr	r2, [r7, #20]
 800f062:	429a      	cmp	r2, r3
 800f064:	d154      	bne.n	800f110 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f066:	4b2c      	ldr	r3, [pc, #176]	@ (800f118 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	69ba      	ldr	r2, [r7, #24]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d10b      	bne.n	800f088 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	60bb      	str	r3, [r7, #8]
}
 800f082:	bf00      	nop
 800f084:	bf00      	nop
 800f086:	e7fd      	b.n	800f084 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f08c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	69fa      	ldr	r2, [r7, #28]
 800f092:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	699b      	ldr	r3, [r3, #24]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	db04      	blt.n	800f0a6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	f1c3 0207 	rsb	r2, r3, #7
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	6959      	ldr	r1, [r3, #20]
 800f0aa:	693a      	ldr	r2, [r7, #16]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	4413      	add	r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4a19      	ldr	r2, [pc, #100]	@ (800f11c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f0b6:	4413      	add	r3, r2
 800f0b8:	4299      	cmp	r1, r3
 800f0ba:	d129      	bne.n	800f110 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	3304      	adds	r3, #4
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe fac5 	bl	800d650 <uxListRemove>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10a      	bne.n	800f0e2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f0cc:	69bb      	ldr	r3, [r7, #24]
 800f0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f0d6:	43da      	mvns	r2, r3
 800f0d8:	4b11      	ldr	r3, [pc, #68]	@ (800f120 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4013      	ands	r3, r2
 800f0de:	4a10      	ldr	r2, [pc, #64]	@ (800f120 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f0e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	409a      	lsls	r2, r3
 800f0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f120 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	4a0b      	ldr	r2, [pc, #44]	@ (800f120 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f0f2:	6013      	str	r3, [r2, #0]
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	4a06      	ldr	r2, [pc, #24]	@ (800f11c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f102:	441a      	add	r2, r3
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	3304      	adds	r3, #4
 800f108:	4619      	mov	r1, r3
 800f10a:	4610      	mov	r0, r2
 800f10c:	f7fe fa43 	bl	800d596 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f110:	bf00      	nop
 800f112:	3720      	adds	r7, #32
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	20001674 	.word	0x20001674
 800f11c:	20001678 	.word	0x20001678
 800f120:	2000177c 	.word	0x2000177c

0800f124 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f124:	b480      	push	{r7}
 800f126:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f128:	4b07      	ldr	r3, [pc, #28]	@ (800f148 <pvTaskIncrementMutexHeldCount+0x24>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d004      	beq.n	800f13a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f130:	4b05      	ldr	r3, [pc, #20]	@ (800f148 <pvTaskIncrementMutexHeldCount+0x24>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f136:	3201      	adds	r2, #1
 800f138:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f13a:	4b03      	ldr	r3, [pc, #12]	@ (800f148 <pvTaskIncrementMutexHeldCount+0x24>)
 800f13c:	681b      	ldr	r3, [r3, #0]
	}
 800f13e:	4618      	mov	r0, r3
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	20001674 	.word	0x20001674

0800f14c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f156:	4b29      	ldr	r3, [pc, #164]	@ (800f1fc <prvAddCurrentTaskToDelayedList+0xb0>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f15c:	4b28      	ldr	r3, [pc, #160]	@ (800f200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	3304      	adds	r3, #4
 800f162:	4618      	mov	r0, r3
 800f164:	f7fe fa74 	bl	800d650 <uxListRemove>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10b      	bne.n	800f186 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f16e:	4b24      	ldr	r3, [pc, #144]	@ (800f200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f174:	2201      	movs	r2, #1
 800f176:	fa02 f303 	lsl.w	r3, r2, r3
 800f17a:	43da      	mvns	r2, r3
 800f17c:	4b21      	ldr	r3, [pc, #132]	@ (800f204 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4013      	ands	r3, r2
 800f182:	4a20      	ldr	r2, [pc, #128]	@ (800f204 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f184:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f18c:	d10a      	bne.n	800f1a4 <prvAddCurrentTaskToDelayedList+0x58>
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d007      	beq.n	800f1a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f194:	4b1a      	ldr	r3, [pc, #104]	@ (800f200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	3304      	adds	r3, #4
 800f19a:	4619      	mov	r1, r3
 800f19c:	481a      	ldr	r0, [pc, #104]	@ (800f208 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f19e:	f7fe f9fa 	bl	800d596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1a2:	e026      	b.n	800f1f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1ac:	4b14      	ldr	r3, [pc, #80]	@ (800f200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68ba      	ldr	r2, [r7, #8]
 800f1b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f1b4:	68ba      	ldr	r2, [r7, #8]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d209      	bcs.n	800f1d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1bc:	4b13      	ldr	r3, [pc, #76]	@ (800f20c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	4b0f      	ldr	r3, [pc, #60]	@ (800f200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	3304      	adds	r3, #4
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	f7fe fa08 	bl	800d5de <vListInsert>
}
 800f1ce:	e010      	b.n	800f1f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800f210 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800f200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	3304      	adds	r3, #4
 800f1da:	4619      	mov	r1, r3
 800f1dc:	4610      	mov	r0, r2
 800f1de:	f7fe f9fe 	bl	800d5de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f214 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d202      	bcs.n	800f1f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f1ec:	4a09      	ldr	r2, [pc, #36]	@ (800f214 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	6013      	str	r3, [r2, #0]
}
 800f1f2:	bf00      	nop
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	20001778 	.word	0x20001778
 800f200:	20001674 	.word	0x20001674
 800f204:	2000177c 	.word	0x2000177c
 800f208:	20001760 	.word	0x20001760
 800f20c:	20001730 	.word	0x20001730
 800f210:	2000172c 	.word	0x2000172c
 800f214:	20001794 	.word	0x20001794

0800f218 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f218:	b480      	push	{r7}
 800f21a:	b085      	sub	sp, #20
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	3b04      	subs	r3, #4
 800f228:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3b04      	subs	r3, #4
 800f236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	f023 0201 	bic.w	r2, r3, #1
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	3b04      	subs	r3, #4
 800f246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f248:	4a0c      	ldr	r2, [pc, #48]	@ (800f27c <pxPortInitialiseStack+0x64>)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3b14      	subs	r3, #20
 800f252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	3b04      	subs	r3, #4
 800f25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f06f 0202 	mvn.w	r2, #2
 800f266:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	3b20      	subs	r3, #32
 800f26c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f26e:	68fb      	ldr	r3, [r7, #12]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr
 800f27c:	0800f281 	.word	0x0800f281

0800f280 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f286:	2300      	movs	r3, #0
 800f288:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f28a:	4b13      	ldr	r3, [pc, #76]	@ (800f2d8 <prvTaskExitError+0x58>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f292:	d00b      	beq.n	800f2ac <prvTaskExitError+0x2c>
	__asm volatile
 800f294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f298:	f383 8811 	msr	BASEPRI, r3
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	60fb      	str	r3, [r7, #12]
}
 800f2a6:	bf00      	nop
 800f2a8:	bf00      	nop
 800f2aa:	e7fd      	b.n	800f2a8 <prvTaskExitError+0x28>
	__asm volatile
 800f2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b0:	f383 8811 	msr	BASEPRI, r3
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	60bb      	str	r3, [r7, #8]
}
 800f2be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f2c0:	bf00      	nop
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d0fc      	beq.n	800f2c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f2c8:	bf00      	nop
 800f2ca:	bf00      	nop
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	200002d4 	.word	0x200002d4
 800f2dc:	00000000 	.word	0x00000000

0800f2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f2e0:	4b07      	ldr	r3, [pc, #28]	@ (800f300 <pxCurrentTCBConst2>)
 800f2e2:	6819      	ldr	r1, [r3, #0]
 800f2e4:	6808      	ldr	r0, [r1, #0]
 800f2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ea:	f380 8809 	msr	PSP, r0
 800f2ee:	f3bf 8f6f 	isb	sy
 800f2f2:	f04f 0000 	mov.w	r0, #0
 800f2f6:	f380 8811 	msr	BASEPRI, r0
 800f2fa:	4770      	bx	lr
 800f2fc:	f3af 8000 	nop.w

0800f300 <pxCurrentTCBConst2>:
 800f300:	20001674 	.word	0x20001674
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f304:	bf00      	nop
 800f306:	bf00      	nop

0800f308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f308:	4808      	ldr	r0, [pc, #32]	@ (800f32c <prvPortStartFirstTask+0x24>)
 800f30a:	6800      	ldr	r0, [r0, #0]
 800f30c:	6800      	ldr	r0, [r0, #0]
 800f30e:	f380 8808 	msr	MSP, r0
 800f312:	f04f 0000 	mov.w	r0, #0
 800f316:	f380 8814 	msr	CONTROL, r0
 800f31a:	b662      	cpsie	i
 800f31c:	b661      	cpsie	f
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	df00      	svc	0
 800f328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f32a:	bf00      	nop
 800f32c:	e000ed08 	.word	0xe000ed08

0800f330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f336:	4b47      	ldr	r3, [pc, #284]	@ (800f454 <xPortStartScheduler+0x124>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4a47      	ldr	r2, [pc, #284]	@ (800f458 <xPortStartScheduler+0x128>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d10b      	bne.n	800f358 <xPortStartScheduler+0x28>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	613b      	str	r3, [r7, #16]
}
 800f352:	bf00      	nop
 800f354:	bf00      	nop
 800f356:	e7fd      	b.n	800f354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f358:	4b3e      	ldr	r3, [pc, #248]	@ (800f454 <xPortStartScheduler+0x124>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a3f      	ldr	r2, [pc, #252]	@ (800f45c <xPortStartScheduler+0x12c>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d10b      	bne.n	800f37a <xPortStartScheduler+0x4a>
	__asm volatile
 800f362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f366:	f383 8811 	msr	BASEPRI, r3
 800f36a:	f3bf 8f6f 	isb	sy
 800f36e:	f3bf 8f4f 	dsb	sy
 800f372:	60fb      	str	r3, [r7, #12]
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop
 800f378:	e7fd      	b.n	800f376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f37a:	4b39      	ldr	r3, [pc, #228]	@ (800f460 <xPortStartScheduler+0x130>)
 800f37c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	b2db      	uxtb	r3, r3
 800f384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	22ff      	movs	r2, #255	@ 0xff
 800f38a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	b2db      	uxtb	r3, r3
 800f392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f394:	78fb      	ldrb	r3, [r7, #3]
 800f396:	b2db      	uxtb	r3, r3
 800f398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	4b31      	ldr	r3, [pc, #196]	@ (800f464 <xPortStartScheduler+0x134>)
 800f3a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f3a2:	4b31      	ldr	r3, [pc, #196]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3a4:	2207      	movs	r2, #7
 800f3a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3a8:	e009      	b.n	800f3be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f3b4:	78fb      	ldrb	r3, [r7, #3]
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	005b      	lsls	r3, r3, #1
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3be:	78fb      	ldrb	r3, [r7, #3]
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3c6:	2b80      	cmp	r3, #128	@ 0x80
 800f3c8:	d0ef      	beq.n	800f3aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f3ca:	4b27      	ldr	r3, [pc, #156]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f1c3 0307 	rsb	r3, r3, #7
 800f3d2:	2b04      	cmp	r3, #4
 800f3d4:	d00b      	beq.n	800f3ee <xPortStartScheduler+0xbe>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	60bb      	str	r3, [r7, #8]
}
 800f3e8:	bf00      	nop
 800f3ea:	bf00      	nop
 800f3ec:	e7fd      	b.n	800f3ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f3ee:	4b1e      	ldr	r3, [pc, #120]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	021b      	lsls	r3, r3, #8
 800f3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f400:	4a19      	ldr	r2, [pc, #100]	@ (800f468 <xPortStartScheduler+0x138>)
 800f402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	b2da      	uxtb	r2, r3
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f40c:	4b17      	ldr	r3, [pc, #92]	@ (800f46c <xPortStartScheduler+0x13c>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a16      	ldr	r2, [pc, #88]	@ (800f46c <xPortStartScheduler+0x13c>)
 800f412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f418:	4b14      	ldr	r3, [pc, #80]	@ (800f46c <xPortStartScheduler+0x13c>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a13      	ldr	r2, [pc, #76]	@ (800f46c <xPortStartScheduler+0x13c>)
 800f41e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f424:	f000 f8da 	bl	800f5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f428:	4b11      	ldr	r3, [pc, #68]	@ (800f470 <xPortStartScheduler+0x140>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f42e:	f000 f8f9 	bl	800f624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f432:	4b10      	ldr	r3, [pc, #64]	@ (800f474 <xPortStartScheduler+0x144>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a0f      	ldr	r2, [pc, #60]	@ (800f474 <xPortStartScheduler+0x144>)
 800f438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f43c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f43e:	f7ff ff63 	bl	800f308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f442:	f7ff fa73 	bl	800e92c <vTaskSwitchContext>
	prvTaskExitError();
 800f446:	f7ff ff1b 	bl	800f280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3718      	adds	r7, #24
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	e000ed00 	.word	0xe000ed00
 800f458:	410fc271 	.word	0x410fc271
 800f45c:	410fc270 	.word	0x410fc270
 800f460:	e000e400 	.word	0xe000e400
 800f464:	200017a0 	.word	0x200017a0
 800f468:	200017a4 	.word	0x200017a4
 800f46c:	e000ed20 	.word	0xe000ed20
 800f470:	200002d4 	.word	0x200002d4
 800f474:	e000ef34 	.word	0xe000ef34

0800f478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	607b      	str	r3, [r7, #4]
}
 800f490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f492:	4b10      	ldr	r3, [pc, #64]	@ (800f4d4 <vPortEnterCritical+0x5c>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	3301      	adds	r3, #1
 800f498:	4a0e      	ldr	r2, [pc, #56]	@ (800f4d4 <vPortEnterCritical+0x5c>)
 800f49a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f49c:	4b0d      	ldr	r3, [pc, #52]	@ (800f4d4 <vPortEnterCritical+0x5c>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d110      	bne.n	800f4c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800f4d8 <vPortEnterCritical+0x60>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00b      	beq.n	800f4c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	603b      	str	r3, [r7, #0]
}
 800f4c0:	bf00      	nop
 800f4c2:	bf00      	nop
 800f4c4:	e7fd      	b.n	800f4c2 <vPortEnterCritical+0x4a>
	}
}
 800f4c6:	bf00      	nop
 800f4c8:	370c      	adds	r7, #12
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop
 800f4d4:	200002d4 	.word	0x200002d4
 800f4d8:	e000ed04 	.word	0xe000ed04

0800f4dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f4e2:	4b12      	ldr	r3, [pc, #72]	@ (800f52c <vPortExitCritical+0x50>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d10b      	bne.n	800f502 <vPortExitCritical+0x26>
	__asm volatile
 800f4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ee:	f383 8811 	msr	BASEPRI, r3
 800f4f2:	f3bf 8f6f 	isb	sy
 800f4f6:	f3bf 8f4f 	dsb	sy
 800f4fa:	607b      	str	r3, [r7, #4]
}
 800f4fc:	bf00      	nop
 800f4fe:	bf00      	nop
 800f500:	e7fd      	b.n	800f4fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f502:	4b0a      	ldr	r3, [pc, #40]	@ (800f52c <vPortExitCritical+0x50>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3b01      	subs	r3, #1
 800f508:	4a08      	ldr	r2, [pc, #32]	@ (800f52c <vPortExitCritical+0x50>)
 800f50a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f50c:	4b07      	ldr	r3, [pc, #28]	@ (800f52c <vPortExitCritical+0x50>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d105      	bne.n	800f520 <vPortExitCritical+0x44>
 800f514:	2300      	movs	r3, #0
 800f516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	f383 8811 	msr	BASEPRI, r3
}
 800f51e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f520:	bf00      	nop
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr
 800f52c:	200002d4 	.word	0x200002d4

0800f530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f530:	f3ef 8009 	mrs	r0, PSP
 800f534:	f3bf 8f6f 	isb	sy
 800f538:	4b15      	ldr	r3, [pc, #84]	@ (800f590 <pxCurrentTCBConst>)
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	f01e 0f10 	tst.w	lr, #16
 800f540:	bf08      	it	eq
 800f542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f54a:	6010      	str	r0, [r2, #0]
 800f54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f554:	f380 8811 	msr	BASEPRI, r0
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f7ff f9e4 	bl	800e92c <vTaskSwitchContext>
 800f564:	f04f 0000 	mov.w	r0, #0
 800f568:	f380 8811 	msr	BASEPRI, r0
 800f56c:	bc09      	pop	{r0, r3}
 800f56e:	6819      	ldr	r1, [r3, #0]
 800f570:	6808      	ldr	r0, [r1, #0]
 800f572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f576:	f01e 0f10 	tst.w	lr, #16
 800f57a:	bf08      	it	eq
 800f57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f580:	f380 8809 	msr	PSP, r0
 800f584:	f3bf 8f6f 	isb	sy
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	f3af 8000 	nop.w

0800f590 <pxCurrentTCBConst>:
 800f590:	20001674 	.word	0x20001674
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f594:	bf00      	nop
 800f596:	bf00      	nop

0800f598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
	__asm volatile
 800f59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	607b      	str	r3, [r7, #4]
}
 800f5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f5b2:	f7ff f901 	bl	800e7b8 <xTaskIncrementTick>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d003      	beq.n	800f5c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5bc:	4b06      	ldr	r3, [pc, #24]	@ (800f5d8 <SysTick_Handler+0x40>)
 800f5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5c2:	601a      	str	r2, [r3, #0]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	f383 8811 	msr	BASEPRI, r3
}
 800f5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	e000ed04 	.word	0xe000ed04

0800f5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f5dc:	b480      	push	{r7}
 800f5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800f610 <vPortSetupTimerInterrupt+0x34>)
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f614 <vPortSetupTimerInterrupt+0x38>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f618 <vPortSetupTimerInterrupt+0x3c>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800f61c <vPortSetupTimerInterrupt+0x40>)
 800f5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5f6:	099b      	lsrs	r3, r3, #6
 800f5f8:	4a09      	ldr	r2, [pc, #36]	@ (800f620 <vPortSetupTimerInterrupt+0x44>)
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f5fe:	4b04      	ldr	r3, [pc, #16]	@ (800f610 <vPortSetupTimerInterrupt+0x34>)
 800f600:	2207      	movs	r2, #7
 800f602:	601a      	str	r2, [r3, #0]
}
 800f604:	bf00      	nop
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop
 800f610:	e000e010 	.word	0xe000e010
 800f614:	e000e018 	.word	0xe000e018
 800f618:	20000008 	.word	0x20000008
 800f61c:	10624dd3 	.word	0x10624dd3
 800f620:	e000e014 	.word	0xe000e014

0800f624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f634 <vPortEnableVFP+0x10>
 800f628:	6801      	ldr	r1, [r0, #0]
 800f62a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f62e:	6001      	str	r1, [r0, #0]
 800f630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f632:	bf00      	nop
 800f634:	e000ed88 	.word	0xe000ed88

0800f638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f638:	b480      	push	{r7}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f63e:	f3ef 8305 	mrs	r3, IPSR
 800f642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2b0f      	cmp	r3, #15
 800f648:	d915      	bls.n	800f676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f64a:	4a18      	ldr	r2, [pc, #96]	@ (800f6ac <vPortValidateInterruptPriority+0x74>)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	4413      	add	r3, r2
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f654:	4b16      	ldr	r3, [pc, #88]	@ (800f6b0 <vPortValidateInterruptPriority+0x78>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	7afa      	ldrb	r2, [r7, #11]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d20b      	bcs.n	800f676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	607b      	str	r3, [r7, #4]
}
 800f670:	bf00      	nop
 800f672:	bf00      	nop
 800f674:	e7fd      	b.n	800f672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f676:	4b0f      	ldr	r3, [pc, #60]	@ (800f6b4 <vPortValidateInterruptPriority+0x7c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f67e:	4b0e      	ldr	r3, [pc, #56]	@ (800f6b8 <vPortValidateInterruptPriority+0x80>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	429a      	cmp	r2, r3
 800f684:	d90b      	bls.n	800f69e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	603b      	str	r3, [r7, #0]
}
 800f698:	bf00      	nop
 800f69a:	bf00      	nop
 800f69c:	e7fd      	b.n	800f69a <vPortValidateInterruptPriority+0x62>
	}
 800f69e:	bf00      	nop
 800f6a0:	3714      	adds	r7, #20
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	e000e3f0 	.word	0xe000e3f0
 800f6b0:	200017a0 	.word	0x200017a0
 800f6b4:	e000ed0c 	.word	0xe000ed0c
 800f6b8:	200017a4 	.word	0x200017a4

0800f6bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08a      	sub	sp, #40	@ 0x28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f6c8:	f7fe ffca 	bl	800e660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800f840 <pvPortMalloc+0x184>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d101      	bne.n	800f6d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f6d4:	f000 f924 	bl	800f920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f6d8:	4b5a      	ldr	r3, [pc, #360]	@ (800f844 <pvPortMalloc+0x188>)
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4013      	ands	r3, r2
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f040 8095 	bne.w	800f810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d01e      	beq.n	800f72a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f6ec:	2208      	movs	r2, #8
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f003 0307 	and.w	r3, r3, #7
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d015      	beq.n	800f72a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f023 0307 	bic.w	r3, r3, #7
 800f704:	3308      	adds	r3, #8
 800f706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f003 0307 	and.w	r3, r3, #7
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d00b      	beq.n	800f72a <pvPortMalloc+0x6e>
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	617b      	str	r3, [r7, #20]
}
 800f724:	bf00      	nop
 800f726:	bf00      	nop
 800f728:	e7fd      	b.n	800f726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d06f      	beq.n	800f810 <pvPortMalloc+0x154>
 800f730:	4b45      	ldr	r3, [pc, #276]	@ (800f848 <pvPortMalloc+0x18c>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	429a      	cmp	r2, r3
 800f738:	d86a      	bhi.n	800f810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f73a:	4b44      	ldr	r3, [pc, #272]	@ (800f84c <pvPortMalloc+0x190>)
 800f73c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f73e:	4b43      	ldr	r3, [pc, #268]	@ (800f84c <pvPortMalloc+0x190>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f744:	e004      	b.n	800f750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	429a      	cmp	r2, r3
 800f758:	d903      	bls.n	800f762 <pvPortMalloc+0xa6>
 800f75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1f1      	bne.n	800f746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f762:	4b37      	ldr	r3, [pc, #220]	@ (800f840 <pvPortMalloc+0x184>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f768:	429a      	cmp	r2, r3
 800f76a:	d051      	beq.n	800f810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f76c:	6a3b      	ldr	r3, [r7, #32]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2208      	movs	r2, #8
 800f772:	4413      	add	r3, r2
 800f774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f780:	685a      	ldr	r2, [r3, #4]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	1ad2      	subs	r2, r2, r3
 800f786:	2308      	movs	r3, #8
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d920      	bls.n	800f7d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4413      	add	r3, r2
 800f794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	f003 0307 	and.w	r3, r3, #7
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00b      	beq.n	800f7b8 <pvPortMalloc+0xfc>
	__asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	613b      	str	r3, [r7, #16]
}
 800f7b2:	bf00      	nop
 800f7b4:	bf00      	nop
 800f7b6:	e7fd      	b.n	800f7b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ba:	685a      	ldr	r2, [r3, #4]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	1ad2      	subs	r2, r2, r3
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f7ca:	69b8      	ldr	r0, [r7, #24]
 800f7cc:	f000 f90a 	bl	800f9e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f7d0:	4b1d      	ldr	r3, [pc, #116]	@ (800f848 <pvPortMalloc+0x18c>)
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	1ad3      	subs	r3, r2, r3
 800f7da:	4a1b      	ldr	r2, [pc, #108]	@ (800f848 <pvPortMalloc+0x18c>)
 800f7dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f7de:	4b1a      	ldr	r3, [pc, #104]	@ (800f848 <pvPortMalloc+0x18c>)
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f850 <pvPortMalloc+0x194>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d203      	bcs.n	800f7f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f7ea:	4b17      	ldr	r3, [pc, #92]	@ (800f848 <pvPortMalloc+0x18c>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a18      	ldr	r2, [pc, #96]	@ (800f850 <pvPortMalloc+0x194>)
 800f7f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	4b13      	ldr	r3, [pc, #76]	@ (800f844 <pvPortMalloc+0x188>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	431a      	orrs	r2, r3
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f802:	2200      	movs	r2, #0
 800f804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f806:	4b13      	ldr	r3, [pc, #76]	@ (800f854 <pvPortMalloc+0x198>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	3301      	adds	r3, #1
 800f80c:	4a11      	ldr	r2, [pc, #68]	@ (800f854 <pvPortMalloc+0x198>)
 800f80e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f810:	f7fe ff34 	bl	800e67c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00b      	beq.n	800f836 <pvPortMalloc+0x17a>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	60fb      	str	r3, [r7, #12]
}
 800f830:	bf00      	nop
 800f832:	bf00      	nop
 800f834:	e7fd      	b.n	800f832 <pvPortMalloc+0x176>
	return pvReturn;
 800f836:	69fb      	ldr	r3, [r7, #28]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3728      	adds	r7, #40	@ 0x28
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	200053b0 	.word	0x200053b0
 800f844:	200053c4 	.word	0x200053c4
 800f848:	200053b4 	.word	0x200053b4
 800f84c:	200053a8 	.word	0x200053a8
 800f850:	200053b8 	.word	0x200053b8
 800f854:	200053bc 	.word	0x200053bc

0800f858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d04f      	beq.n	800f90a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f86a:	2308      	movs	r3, #8
 800f86c:	425b      	negs	r3, r3
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	4413      	add	r3, r2
 800f872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	4b25      	ldr	r3, [pc, #148]	@ (800f914 <vPortFree+0xbc>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4013      	ands	r3, r2
 800f882:	2b00      	cmp	r3, #0
 800f884:	d10b      	bne.n	800f89e <vPortFree+0x46>
	__asm volatile
 800f886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f88a:	f383 8811 	msr	BASEPRI, r3
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	60fb      	str	r3, [r7, #12]
}
 800f898:	bf00      	nop
 800f89a:	bf00      	nop
 800f89c:	e7fd      	b.n	800f89a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00b      	beq.n	800f8be <vPortFree+0x66>
	__asm volatile
 800f8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	60bb      	str	r3, [r7, #8]
}
 800f8b8:	bf00      	nop
 800f8ba:	bf00      	nop
 800f8bc:	e7fd      	b.n	800f8ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	4b14      	ldr	r3, [pc, #80]	@ (800f914 <vPortFree+0xbc>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4013      	ands	r3, r2
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d01e      	beq.n	800f90a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d11a      	bne.n	800f90a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	685a      	ldr	r2, [r3, #4]
 800f8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f914 <vPortFree+0xbc>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	43db      	mvns	r3, r3
 800f8de:	401a      	ands	r2, r3
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f8e4:	f7fe febc 	bl	800e660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f918 <vPortFree+0xc0>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	4a09      	ldr	r2, [pc, #36]	@ (800f918 <vPortFree+0xc0>)
 800f8f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f8f6:	6938      	ldr	r0, [r7, #16]
 800f8f8:	f000 f874 	bl	800f9e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f8fc:	4b07      	ldr	r3, [pc, #28]	@ (800f91c <vPortFree+0xc4>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3301      	adds	r3, #1
 800f902:	4a06      	ldr	r2, [pc, #24]	@ (800f91c <vPortFree+0xc4>)
 800f904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f906:	f7fe feb9 	bl	800e67c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f90a:	bf00      	nop
 800f90c:	3718      	adds	r7, #24
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	200053c4 	.word	0x200053c4
 800f918:	200053b4 	.word	0x200053b4
 800f91c:	200053c0 	.word	0x200053c0

0800f920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f926:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f92a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f92c:	4b27      	ldr	r3, [pc, #156]	@ (800f9cc <prvHeapInit+0xac>)
 800f92e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f003 0307 	and.w	r3, r3, #7
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00c      	beq.n	800f954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3307      	adds	r3, #7
 800f93e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f023 0307 	bic.w	r3, r3, #7
 800f946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	4a1f      	ldr	r2, [pc, #124]	@ (800f9cc <prvHeapInit+0xac>)
 800f950:	4413      	add	r3, r2
 800f952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f958:	4a1d      	ldr	r2, [pc, #116]	@ (800f9d0 <prvHeapInit+0xb0>)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f95e:	4b1c      	ldr	r3, [pc, #112]	@ (800f9d0 <prvHeapInit+0xb0>)
 800f960:	2200      	movs	r2, #0
 800f962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	4413      	add	r3, r2
 800f96a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f96c:	2208      	movs	r2, #8
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	1a9b      	subs	r3, r3, r2
 800f972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f023 0307 	bic.w	r3, r3, #7
 800f97a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	4a15      	ldr	r2, [pc, #84]	@ (800f9d4 <prvHeapInit+0xb4>)
 800f980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f982:	4b14      	ldr	r3, [pc, #80]	@ (800f9d4 <prvHeapInit+0xb4>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2200      	movs	r2, #0
 800f988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f98a:	4b12      	ldr	r3, [pc, #72]	@ (800f9d4 <prvHeapInit+0xb4>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2200      	movs	r2, #0
 800f990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	1ad2      	subs	r2, r2, r3
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800f9d4 <prvHeapInit+0xb4>)
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	4a0a      	ldr	r2, [pc, #40]	@ (800f9d8 <prvHeapInit+0xb8>)
 800f9ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	4a09      	ldr	r2, [pc, #36]	@ (800f9dc <prvHeapInit+0xbc>)
 800f9b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f9b8:	4b09      	ldr	r3, [pc, #36]	@ (800f9e0 <prvHeapInit+0xc0>)
 800f9ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f9be:	601a      	str	r2, [r3, #0]
}
 800f9c0:	bf00      	nop
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	200017a8 	.word	0x200017a8
 800f9d0:	200053a8 	.word	0x200053a8
 800f9d4:	200053b0 	.word	0x200053b0
 800f9d8:	200053b8 	.word	0x200053b8
 800f9dc:	200053b4 	.word	0x200053b4
 800f9e0:	200053c4 	.word	0x200053c4

0800f9e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f9ec:	4b28      	ldr	r3, [pc, #160]	@ (800fa90 <prvInsertBlockIntoFreeList+0xac>)
 800f9ee:	60fb      	str	r3, [r7, #12]
 800f9f0:	e002      	b.n	800f9f8 <prvInsertBlockIntoFreeList+0x14>
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	60fb      	str	r3, [r7, #12]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d8f7      	bhi.n	800f9f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	687a      	ldr	r2, [r7, #4]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d108      	bne.n	800fa26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	441a      	add	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	68ba      	ldr	r2, [r7, #8]
 800fa30:	441a      	add	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d118      	bne.n	800fa6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	4b15      	ldr	r3, [pc, #84]	@ (800fa94 <prvInsertBlockIntoFreeList+0xb0>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d00d      	beq.n	800fa62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	441a      	add	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	601a      	str	r2, [r3, #0]
 800fa60:	e008      	b.n	800fa74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fa62:	4b0c      	ldr	r3, [pc, #48]	@ (800fa94 <prvInsertBlockIntoFreeList+0xb0>)
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	601a      	str	r2, [r3, #0]
 800fa6a:	e003      	b.n	800fa74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d002      	beq.n	800fa82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa82:	bf00      	nop
 800fa84:	3714      	adds	r7, #20
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	200053a8 	.word	0x200053a8
 800fa94:	200053b0 	.word	0x200053b0

0800fa98 <sbrk_aligned>:
 800fa98:	b570      	push	{r4, r5, r6, lr}
 800fa9a:	4e0f      	ldr	r6, [pc, #60]	@ (800fad8 <sbrk_aligned+0x40>)
 800fa9c:	460c      	mov	r4, r1
 800fa9e:	6831      	ldr	r1, [r6, #0]
 800faa0:	4605      	mov	r5, r0
 800faa2:	b911      	cbnz	r1, 800faaa <sbrk_aligned+0x12>
 800faa4:	f000 f966 	bl	800fd74 <_sbrk_r>
 800faa8:	6030      	str	r0, [r6, #0]
 800faaa:	4621      	mov	r1, r4
 800faac:	4628      	mov	r0, r5
 800faae:	f000 f961 	bl	800fd74 <_sbrk_r>
 800fab2:	1c43      	adds	r3, r0, #1
 800fab4:	d103      	bne.n	800fabe <sbrk_aligned+0x26>
 800fab6:	f04f 34ff 	mov.w	r4, #4294967295
 800faba:	4620      	mov	r0, r4
 800fabc:	bd70      	pop	{r4, r5, r6, pc}
 800fabe:	1cc4      	adds	r4, r0, #3
 800fac0:	f024 0403 	bic.w	r4, r4, #3
 800fac4:	42a0      	cmp	r0, r4
 800fac6:	d0f8      	beq.n	800faba <sbrk_aligned+0x22>
 800fac8:	1a21      	subs	r1, r4, r0
 800faca:	4628      	mov	r0, r5
 800facc:	f000 f952 	bl	800fd74 <_sbrk_r>
 800fad0:	3001      	adds	r0, #1
 800fad2:	d1f2      	bne.n	800faba <sbrk_aligned+0x22>
 800fad4:	e7ef      	b.n	800fab6 <sbrk_aligned+0x1e>
 800fad6:	bf00      	nop
 800fad8:	200053c8 	.word	0x200053c8

0800fadc <_malloc_r>:
 800fadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fae0:	1ccd      	adds	r5, r1, #3
 800fae2:	f025 0503 	bic.w	r5, r5, #3
 800fae6:	3508      	adds	r5, #8
 800fae8:	2d0c      	cmp	r5, #12
 800faea:	bf38      	it	cc
 800faec:	250c      	movcc	r5, #12
 800faee:	2d00      	cmp	r5, #0
 800faf0:	4606      	mov	r6, r0
 800faf2:	db01      	blt.n	800faf8 <_malloc_r+0x1c>
 800faf4:	42a9      	cmp	r1, r5
 800faf6:	d904      	bls.n	800fb02 <_malloc_r+0x26>
 800faf8:	230c      	movs	r3, #12
 800fafa:	6033      	str	r3, [r6, #0]
 800fafc:	2000      	movs	r0, #0
 800fafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fbd8 <_malloc_r+0xfc>
 800fb06:	f000 f869 	bl	800fbdc <__malloc_lock>
 800fb0a:	f8d8 3000 	ldr.w	r3, [r8]
 800fb0e:	461c      	mov	r4, r3
 800fb10:	bb44      	cbnz	r4, 800fb64 <_malloc_r+0x88>
 800fb12:	4629      	mov	r1, r5
 800fb14:	4630      	mov	r0, r6
 800fb16:	f7ff ffbf 	bl	800fa98 <sbrk_aligned>
 800fb1a:	1c43      	adds	r3, r0, #1
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	d158      	bne.n	800fbd2 <_malloc_r+0xf6>
 800fb20:	f8d8 4000 	ldr.w	r4, [r8]
 800fb24:	4627      	mov	r7, r4
 800fb26:	2f00      	cmp	r7, #0
 800fb28:	d143      	bne.n	800fbb2 <_malloc_r+0xd6>
 800fb2a:	2c00      	cmp	r4, #0
 800fb2c:	d04b      	beq.n	800fbc6 <_malloc_r+0xea>
 800fb2e:	6823      	ldr	r3, [r4, #0]
 800fb30:	4639      	mov	r1, r7
 800fb32:	4630      	mov	r0, r6
 800fb34:	eb04 0903 	add.w	r9, r4, r3
 800fb38:	f000 f91c 	bl	800fd74 <_sbrk_r>
 800fb3c:	4581      	cmp	r9, r0
 800fb3e:	d142      	bne.n	800fbc6 <_malloc_r+0xea>
 800fb40:	6821      	ldr	r1, [r4, #0]
 800fb42:	1a6d      	subs	r5, r5, r1
 800fb44:	4629      	mov	r1, r5
 800fb46:	4630      	mov	r0, r6
 800fb48:	f7ff ffa6 	bl	800fa98 <sbrk_aligned>
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	d03a      	beq.n	800fbc6 <_malloc_r+0xea>
 800fb50:	6823      	ldr	r3, [r4, #0]
 800fb52:	442b      	add	r3, r5
 800fb54:	6023      	str	r3, [r4, #0]
 800fb56:	f8d8 3000 	ldr.w	r3, [r8]
 800fb5a:	685a      	ldr	r2, [r3, #4]
 800fb5c:	bb62      	cbnz	r2, 800fbb8 <_malloc_r+0xdc>
 800fb5e:	f8c8 7000 	str.w	r7, [r8]
 800fb62:	e00f      	b.n	800fb84 <_malloc_r+0xa8>
 800fb64:	6822      	ldr	r2, [r4, #0]
 800fb66:	1b52      	subs	r2, r2, r5
 800fb68:	d420      	bmi.n	800fbac <_malloc_r+0xd0>
 800fb6a:	2a0b      	cmp	r2, #11
 800fb6c:	d917      	bls.n	800fb9e <_malloc_r+0xc2>
 800fb6e:	1961      	adds	r1, r4, r5
 800fb70:	42a3      	cmp	r3, r4
 800fb72:	6025      	str	r5, [r4, #0]
 800fb74:	bf18      	it	ne
 800fb76:	6059      	strne	r1, [r3, #4]
 800fb78:	6863      	ldr	r3, [r4, #4]
 800fb7a:	bf08      	it	eq
 800fb7c:	f8c8 1000 	streq.w	r1, [r8]
 800fb80:	5162      	str	r2, [r4, r5]
 800fb82:	604b      	str	r3, [r1, #4]
 800fb84:	4630      	mov	r0, r6
 800fb86:	f000 f82f 	bl	800fbe8 <__malloc_unlock>
 800fb8a:	f104 000b 	add.w	r0, r4, #11
 800fb8e:	1d23      	adds	r3, r4, #4
 800fb90:	f020 0007 	bic.w	r0, r0, #7
 800fb94:	1ac2      	subs	r2, r0, r3
 800fb96:	bf1c      	itt	ne
 800fb98:	1a1b      	subne	r3, r3, r0
 800fb9a:	50a3      	strne	r3, [r4, r2]
 800fb9c:	e7af      	b.n	800fafe <_malloc_r+0x22>
 800fb9e:	6862      	ldr	r2, [r4, #4]
 800fba0:	42a3      	cmp	r3, r4
 800fba2:	bf0c      	ite	eq
 800fba4:	f8c8 2000 	streq.w	r2, [r8]
 800fba8:	605a      	strne	r2, [r3, #4]
 800fbaa:	e7eb      	b.n	800fb84 <_malloc_r+0xa8>
 800fbac:	4623      	mov	r3, r4
 800fbae:	6864      	ldr	r4, [r4, #4]
 800fbb0:	e7ae      	b.n	800fb10 <_malloc_r+0x34>
 800fbb2:	463c      	mov	r4, r7
 800fbb4:	687f      	ldr	r7, [r7, #4]
 800fbb6:	e7b6      	b.n	800fb26 <_malloc_r+0x4a>
 800fbb8:	461a      	mov	r2, r3
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	42a3      	cmp	r3, r4
 800fbbe:	d1fb      	bne.n	800fbb8 <_malloc_r+0xdc>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	6053      	str	r3, [r2, #4]
 800fbc4:	e7de      	b.n	800fb84 <_malloc_r+0xa8>
 800fbc6:	230c      	movs	r3, #12
 800fbc8:	6033      	str	r3, [r6, #0]
 800fbca:	4630      	mov	r0, r6
 800fbcc:	f000 f80c 	bl	800fbe8 <__malloc_unlock>
 800fbd0:	e794      	b.n	800fafc <_malloc_r+0x20>
 800fbd2:	6005      	str	r5, [r0, #0]
 800fbd4:	e7d6      	b.n	800fb84 <_malloc_r+0xa8>
 800fbd6:	bf00      	nop
 800fbd8:	200053cc 	.word	0x200053cc

0800fbdc <__malloc_lock>:
 800fbdc:	4801      	ldr	r0, [pc, #4]	@ (800fbe4 <__malloc_lock+0x8>)
 800fbde:	f000 b903 	b.w	800fde8 <__retarget_lock_acquire_recursive>
 800fbe2:	bf00      	nop
 800fbe4:	2000550c 	.word	0x2000550c

0800fbe8 <__malloc_unlock>:
 800fbe8:	4801      	ldr	r0, [pc, #4]	@ (800fbf0 <__malloc_unlock+0x8>)
 800fbea:	f000 b8fe 	b.w	800fdea <__retarget_lock_release_recursive>
 800fbee:	bf00      	nop
 800fbf0:	2000550c 	.word	0x2000550c

0800fbf4 <_realloc_r>:
 800fbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf8:	4680      	mov	r8, r0
 800fbfa:	4615      	mov	r5, r2
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	b921      	cbnz	r1, 800fc0a <_realloc_r+0x16>
 800fc00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc04:	4611      	mov	r1, r2
 800fc06:	f7ff bf69 	b.w	800fadc <_malloc_r>
 800fc0a:	b92a      	cbnz	r2, 800fc18 <_realloc_r+0x24>
 800fc0c:	f000 f8fc 	bl	800fe08 <_free_r>
 800fc10:	2400      	movs	r4, #0
 800fc12:	4620      	mov	r0, r4
 800fc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc18:	f000 f940 	bl	800fe9c <_malloc_usable_size_r>
 800fc1c:	4285      	cmp	r5, r0
 800fc1e:	4606      	mov	r6, r0
 800fc20:	d802      	bhi.n	800fc28 <_realloc_r+0x34>
 800fc22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fc26:	d8f4      	bhi.n	800fc12 <_realloc_r+0x1e>
 800fc28:	4629      	mov	r1, r5
 800fc2a:	4640      	mov	r0, r8
 800fc2c:	f7ff ff56 	bl	800fadc <_malloc_r>
 800fc30:	4607      	mov	r7, r0
 800fc32:	2800      	cmp	r0, #0
 800fc34:	d0ec      	beq.n	800fc10 <_realloc_r+0x1c>
 800fc36:	42b5      	cmp	r5, r6
 800fc38:	462a      	mov	r2, r5
 800fc3a:	4621      	mov	r1, r4
 800fc3c:	bf28      	it	cs
 800fc3e:	4632      	movcs	r2, r6
 800fc40:	f000 f8d4 	bl	800fdec <memcpy>
 800fc44:	4621      	mov	r1, r4
 800fc46:	4640      	mov	r0, r8
 800fc48:	f000 f8de 	bl	800fe08 <_free_r>
 800fc4c:	463c      	mov	r4, r7
 800fc4e:	e7e0      	b.n	800fc12 <_realloc_r+0x1e>

0800fc50 <sniprintf>:
 800fc50:	b40c      	push	{r2, r3}
 800fc52:	b530      	push	{r4, r5, lr}
 800fc54:	4b17      	ldr	r3, [pc, #92]	@ (800fcb4 <sniprintf+0x64>)
 800fc56:	1e0c      	subs	r4, r1, #0
 800fc58:	681d      	ldr	r5, [r3, #0]
 800fc5a:	b09d      	sub	sp, #116	@ 0x74
 800fc5c:	da08      	bge.n	800fc70 <sniprintf+0x20>
 800fc5e:	238b      	movs	r3, #139	@ 0x8b
 800fc60:	602b      	str	r3, [r5, #0]
 800fc62:	f04f 30ff 	mov.w	r0, #4294967295
 800fc66:	b01d      	add	sp, #116	@ 0x74
 800fc68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc6c:	b002      	add	sp, #8
 800fc6e:	4770      	bx	lr
 800fc70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fc78:	bf14      	ite	ne
 800fc7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fc7e:	4623      	moveq	r3, r4
 800fc80:	9304      	str	r3, [sp, #16]
 800fc82:	9307      	str	r3, [sp, #28]
 800fc84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc88:	9002      	str	r0, [sp, #8]
 800fc8a:	9006      	str	r0, [sp, #24]
 800fc8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fc90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fc92:	ab21      	add	r3, sp, #132	@ 0x84
 800fc94:	a902      	add	r1, sp, #8
 800fc96:	4628      	mov	r0, r5
 800fc98:	9301      	str	r3, [sp, #4]
 800fc9a:	f000 f963 	bl	800ff64 <_svfiprintf_r>
 800fc9e:	1c43      	adds	r3, r0, #1
 800fca0:	bfbc      	itt	lt
 800fca2:	238b      	movlt	r3, #139	@ 0x8b
 800fca4:	602b      	strlt	r3, [r5, #0]
 800fca6:	2c00      	cmp	r4, #0
 800fca8:	d0dd      	beq.n	800fc66 <sniprintf+0x16>
 800fcaa:	9b02      	ldr	r3, [sp, #8]
 800fcac:	2200      	movs	r2, #0
 800fcae:	701a      	strb	r2, [r3, #0]
 800fcb0:	e7d9      	b.n	800fc66 <sniprintf+0x16>
 800fcb2:	bf00      	nop
 800fcb4:	200002d8 	.word	0x200002d8

0800fcb8 <memset>:
 800fcb8:	4402      	add	r2, r0
 800fcba:	4603      	mov	r3, r0
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d100      	bne.n	800fcc2 <memset+0xa>
 800fcc0:	4770      	bx	lr
 800fcc2:	f803 1b01 	strb.w	r1, [r3], #1
 800fcc6:	e7f9      	b.n	800fcbc <memset+0x4>

0800fcc8 <_reclaim_reent>:
 800fcc8:	4b29      	ldr	r3, [pc, #164]	@ (800fd70 <_reclaim_reent+0xa8>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4283      	cmp	r3, r0
 800fcce:	b570      	push	{r4, r5, r6, lr}
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	d04b      	beq.n	800fd6c <_reclaim_reent+0xa4>
 800fcd4:	69c3      	ldr	r3, [r0, #28]
 800fcd6:	b1ab      	cbz	r3, 800fd04 <_reclaim_reent+0x3c>
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	b16b      	cbz	r3, 800fcf8 <_reclaim_reent+0x30>
 800fcdc:	2500      	movs	r5, #0
 800fcde:	69e3      	ldr	r3, [r4, #28]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	5959      	ldr	r1, [r3, r5]
 800fce4:	2900      	cmp	r1, #0
 800fce6:	d13b      	bne.n	800fd60 <_reclaim_reent+0x98>
 800fce8:	3504      	adds	r5, #4
 800fcea:	2d80      	cmp	r5, #128	@ 0x80
 800fcec:	d1f7      	bne.n	800fcde <_reclaim_reent+0x16>
 800fcee:	69e3      	ldr	r3, [r4, #28]
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	68d9      	ldr	r1, [r3, #12]
 800fcf4:	f000 f888 	bl	800fe08 <_free_r>
 800fcf8:	69e3      	ldr	r3, [r4, #28]
 800fcfa:	6819      	ldr	r1, [r3, #0]
 800fcfc:	b111      	cbz	r1, 800fd04 <_reclaim_reent+0x3c>
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f000 f882 	bl	800fe08 <_free_r>
 800fd04:	6961      	ldr	r1, [r4, #20]
 800fd06:	b111      	cbz	r1, 800fd0e <_reclaim_reent+0x46>
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f000 f87d 	bl	800fe08 <_free_r>
 800fd0e:	69e1      	ldr	r1, [r4, #28]
 800fd10:	b111      	cbz	r1, 800fd18 <_reclaim_reent+0x50>
 800fd12:	4620      	mov	r0, r4
 800fd14:	f000 f878 	bl	800fe08 <_free_r>
 800fd18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fd1a:	b111      	cbz	r1, 800fd22 <_reclaim_reent+0x5a>
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f000 f873 	bl	800fe08 <_free_r>
 800fd22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd24:	b111      	cbz	r1, 800fd2c <_reclaim_reent+0x64>
 800fd26:	4620      	mov	r0, r4
 800fd28:	f000 f86e 	bl	800fe08 <_free_r>
 800fd2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fd2e:	b111      	cbz	r1, 800fd36 <_reclaim_reent+0x6e>
 800fd30:	4620      	mov	r0, r4
 800fd32:	f000 f869 	bl	800fe08 <_free_r>
 800fd36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fd38:	b111      	cbz	r1, 800fd40 <_reclaim_reent+0x78>
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f000 f864 	bl	800fe08 <_free_r>
 800fd40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fd42:	b111      	cbz	r1, 800fd4a <_reclaim_reent+0x82>
 800fd44:	4620      	mov	r0, r4
 800fd46:	f000 f85f 	bl	800fe08 <_free_r>
 800fd4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fd4c:	b111      	cbz	r1, 800fd54 <_reclaim_reent+0x8c>
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 f85a 	bl	800fe08 <_free_r>
 800fd54:	6a23      	ldr	r3, [r4, #32]
 800fd56:	b14b      	cbz	r3, 800fd6c <_reclaim_reent+0xa4>
 800fd58:	4620      	mov	r0, r4
 800fd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd5e:	4718      	bx	r3
 800fd60:	680e      	ldr	r6, [r1, #0]
 800fd62:	4620      	mov	r0, r4
 800fd64:	f000 f850 	bl	800fe08 <_free_r>
 800fd68:	4631      	mov	r1, r6
 800fd6a:	e7bb      	b.n	800fce4 <_reclaim_reent+0x1c>
 800fd6c:	bd70      	pop	{r4, r5, r6, pc}
 800fd6e:	bf00      	nop
 800fd70:	200002d8 	.word	0x200002d8

0800fd74 <_sbrk_r>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	4d06      	ldr	r5, [pc, #24]	@ (800fd90 <_sbrk_r+0x1c>)
 800fd78:	2300      	movs	r3, #0
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	4608      	mov	r0, r1
 800fd7e:	602b      	str	r3, [r5, #0]
 800fd80:	f7f2 fb78 	bl	8002474 <_sbrk>
 800fd84:	1c43      	adds	r3, r0, #1
 800fd86:	d102      	bne.n	800fd8e <_sbrk_r+0x1a>
 800fd88:	682b      	ldr	r3, [r5, #0]
 800fd8a:	b103      	cbz	r3, 800fd8e <_sbrk_r+0x1a>
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	bd38      	pop	{r3, r4, r5, pc}
 800fd90:	20005508 	.word	0x20005508

0800fd94 <__errno>:
 800fd94:	4b01      	ldr	r3, [pc, #4]	@ (800fd9c <__errno+0x8>)
 800fd96:	6818      	ldr	r0, [r3, #0]
 800fd98:	4770      	bx	lr
 800fd9a:	bf00      	nop
 800fd9c:	200002d8 	.word	0x200002d8

0800fda0 <__libc_init_array>:
 800fda0:	b570      	push	{r4, r5, r6, lr}
 800fda2:	4d0d      	ldr	r5, [pc, #52]	@ (800fdd8 <__libc_init_array+0x38>)
 800fda4:	4c0d      	ldr	r4, [pc, #52]	@ (800fddc <__libc_init_array+0x3c>)
 800fda6:	1b64      	subs	r4, r4, r5
 800fda8:	10a4      	asrs	r4, r4, #2
 800fdaa:	2600      	movs	r6, #0
 800fdac:	42a6      	cmp	r6, r4
 800fdae:	d109      	bne.n	800fdc4 <__libc_init_array+0x24>
 800fdb0:	4d0b      	ldr	r5, [pc, #44]	@ (800fde0 <__libc_init_array+0x40>)
 800fdb2:	4c0c      	ldr	r4, [pc, #48]	@ (800fde4 <__libc_init_array+0x44>)
 800fdb4:	f000 fb7a 	bl	80104ac <_init>
 800fdb8:	1b64      	subs	r4, r4, r5
 800fdba:	10a4      	asrs	r4, r4, #2
 800fdbc:	2600      	movs	r6, #0
 800fdbe:	42a6      	cmp	r6, r4
 800fdc0:	d105      	bne.n	800fdce <__libc_init_array+0x2e>
 800fdc2:	bd70      	pop	{r4, r5, r6, pc}
 800fdc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdc8:	4798      	blx	r3
 800fdca:	3601      	adds	r6, #1
 800fdcc:	e7ee      	b.n	800fdac <__libc_init_array+0xc>
 800fdce:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdd2:	4798      	blx	r3
 800fdd4:	3601      	adds	r6, #1
 800fdd6:	e7f2      	b.n	800fdbe <__libc_init_array+0x1e>
 800fdd8:	08010688 	.word	0x08010688
 800fddc:	08010688 	.word	0x08010688
 800fde0:	08010688 	.word	0x08010688
 800fde4:	0801068c 	.word	0x0801068c

0800fde8 <__retarget_lock_acquire_recursive>:
 800fde8:	4770      	bx	lr

0800fdea <__retarget_lock_release_recursive>:
 800fdea:	4770      	bx	lr

0800fdec <memcpy>:
 800fdec:	440a      	add	r2, r1
 800fdee:	4291      	cmp	r1, r2
 800fdf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800fdf4:	d100      	bne.n	800fdf8 <memcpy+0xc>
 800fdf6:	4770      	bx	lr
 800fdf8:	b510      	push	{r4, lr}
 800fdfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe02:	4291      	cmp	r1, r2
 800fe04:	d1f9      	bne.n	800fdfa <memcpy+0xe>
 800fe06:	bd10      	pop	{r4, pc}

0800fe08 <_free_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	2900      	cmp	r1, #0
 800fe0e:	d041      	beq.n	800fe94 <_free_r+0x8c>
 800fe10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe14:	1f0c      	subs	r4, r1, #4
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	bfb8      	it	lt
 800fe1a:	18e4      	addlt	r4, r4, r3
 800fe1c:	f7ff fede 	bl	800fbdc <__malloc_lock>
 800fe20:	4a1d      	ldr	r2, [pc, #116]	@ (800fe98 <_free_r+0x90>)
 800fe22:	6813      	ldr	r3, [r2, #0]
 800fe24:	b933      	cbnz	r3, 800fe34 <_free_r+0x2c>
 800fe26:	6063      	str	r3, [r4, #4]
 800fe28:	6014      	str	r4, [r2, #0]
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe30:	f7ff beda 	b.w	800fbe8 <__malloc_unlock>
 800fe34:	42a3      	cmp	r3, r4
 800fe36:	d908      	bls.n	800fe4a <_free_r+0x42>
 800fe38:	6820      	ldr	r0, [r4, #0]
 800fe3a:	1821      	adds	r1, r4, r0
 800fe3c:	428b      	cmp	r3, r1
 800fe3e:	bf01      	itttt	eq
 800fe40:	6819      	ldreq	r1, [r3, #0]
 800fe42:	685b      	ldreq	r3, [r3, #4]
 800fe44:	1809      	addeq	r1, r1, r0
 800fe46:	6021      	streq	r1, [r4, #0]
 800fe48:	e7ed      	b.n	800fe26 <_free_r+0x1e>
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	b10b      	cbz	r3, 800fe54 <_free_r+0x4c>
 800fe50:	42a3      	cmp	r3, r4
 800fe52:	d9fa      	bls.n	800fe4a <_free_r+0x42>
 800fe54:	6811      	ldr	r1, [r2, #0]
 800fe56:	1850      	adds	r0, r2, r1
 800fe58:	42a0      	cmp	r0, r4
 800fe5a:	d10b      	bne.n	800fe74 <_free_r+0x6c>
 800fe5c:	6820      	ldr	r0, [r4, #0]
 800fe5e:	4401      	add	r1, r0
 800fe60:	1850      	adds	r0, r2, r1
 800fe62:	4283      	cmp	r3, r0
 800fe64:	6011      	str	r1, [r2, #0]
 800fe66:	d1e0      	bne.n	800fe2a <_free_r+0x22>
 800fe68:	6818      	ldr	r0, [r3, #0]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	6053      	str	r3, [r2, #4]
 800fe6e:	4408      	add	r0, r1
 800fe70:	6010      	str	r0, [r2, #0]
 800fe72:	e7da      	b.n	800fe2a <_free_r+0x22>
 800fe74:	d902      	bls.n	800fe7c <_free_r+0x74>
 800fe76:	230c      	movs	r3, #12
 800fe78:	602b      	str	r3, [r5, #0]
 800fe7a:	e7d6      	b.n	800fe2a <_free_r+0x22>
 800fe7c:	6820      	ldr	r0, [r4, #0]
 800fe7e:	1821      	adds	r1, r4, r0
 800fe80:	428b      	cmp	r3, r1
 800fe82:	bf04      	itt	eq
 800fe84:	6819      	ldreq	r1, [r3, #0]
 800fe86:	685b      	ldreq	r3, [r3, #4]
 800fe88:	6063      	str	r3, [r4, #4]
 800fe8a:	bf04      	itt	eq
 800fe8c:	1809      	addeq	r1, r1, r0
 800fe8e:	6021      	streq	r1, [r4, #0]
 800fe90:	6054      	str	r4, [r2, #4]
 800fe92:	e7ca      	b.n	800fe2a <_free_r+0x22>
 800fe94:	bd38      	pop	{r3, r4, r5, pc}
 800fe96:	bf00      	nop
 800fe98:	200053cc 	.word	0x200053cc

0800fe9c <_malloc_usable_size_r>:
 800fe9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fea0:	1f18      	subs	r0, r3, #4
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	bfbc      	itt	lt
 800fea6:	580b      	ldrlt	r3, [r1, r0]
 800fea8:	18c0      	addlt	r0, r0, r3
 800feaa:	4770      	bx	lr

0800feac <__ssputs_r>:
 800feac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feb0:	688e      	ldr	r6, [r1, #8]
 800feb2:	461f      	mov	r7, r3
 800feb4:	42be      	cmp	r6, r7
 800feb6:	680b      	ldr	r3, [r1, #0]
 800feb8:	4682      	mov	sl, r0
 800feba:	460c      	mov	r4, r1
 800febc:	4690      	mov	r8, r2
 800febe:	d82d      	bhi.n	800ff1c <__ssputs_r+0x70>
 800fec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fec4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fec8:	d026      	beq.n	800ff18 <__ssputs_r+0x6c>
 800feca:	6965      	ldr	r5, [r4, #20]
 800fecc:	6909      	ldr	r1, [r1, #16]
 800fece:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fed2:	eba3 0901 	sub.w	r9, r3, r1
 800fed6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800feda:	1c7b      	adds	r3, r7, #1
 800fedc:	444b      	add	r3, r9
 800fede:	106d      	asrs	r5, r5, #1
 800fee0:	429d      	cmp	r5, r3
 800fee2:	bf38      	it	cc
 800fee4:	461d      	movcc	r5, r3
 800fee6:	0553      	lsls	r3, r2, #21
 800fee8:	d527      	bpl.n	800ff3a <__ssputs_r+0x8e>
 800feea:	4629      	mov	r1, r5
 800feec:	f7ff fdf6 	bl	800fadc <_malloc_r>
 800fef0:	4606      	mov	r6, r0
 800fef2:	b360      	cbz	r0, 800ff4e <__ssputs_r+0xa2>
 800fef4:	6921      	ldr	r1, [r4, #16]
 800fef6:	464a      	mov	r2, r9
 800fef8:	f7ff ff78 	bl	800fdec <memcpy>
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ff02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff06:	81a3      	strh	r3, [r4, #12]
 800ff08:	6126      	str	r6, [r4, #16]
 800ff0a:	6165      	str	r5, [r4, #20]
 800ff0c:	444e      	add	r6, r9
 800ff0e:	eba5 0509 	sub.w	r5, r5, r9
 800ff12:	6026      	str	r6, [r4, #0]
 800ff14:	60a5      	str	r5, [r4, #8]
 800ff16:	463e      	mov	r6, r7
 800ff18:	42be      	cmp	r6, r7
 800ff1a:	d900      	bls.n	800ff1e <__ssputs_r+0x72>
 800ff1c:	463e      	mov	r6, r7
 800ff1e:	6820      	ldr	r0, [r4, #0]
 800ff20:	4632      	mov	r2, r6
 800ff22:	4641      	mov	r1, r8
 800ff24:	f000 faa8 	bl	8010478 <memmove>
 800ff28:	68a3      	ldr	r3, [r4, #8]
 800ff2a:	1b9b      	subs	r3, r3, r6
 800ff2c:	60a3      	str	r3, [r4, #8]
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	4433      	add	r3, r6
 800ff32:	6023      	str	r3, [r4, #0]
 800ff34:	2000      	movs	r0, #0
 800ff36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff3a:	462a      	mov	r2, r5
 800ff3c:	f7ff fe5a 	bl	800fbf4 <_realloc_r>
 800ff40:	4606      	mov	r6, r0
 800ff42:	2800      	cmp	r0, #0
 800ff44:	d1e0      	bne.n	800ff08 <__ssputs_r+0x5c>
 800ff46:	6921      	ldr	r1, [r4, #16]
 800ff48:	4650      	mov	r0, sl
 800ff4a:	f7ff ff5d 	bl	800fe08 <_free_r>
 800ff4e:	230c      	movs	r3, #12
 800ff50:	f8ca 3000 	str.w	r3, [sl]
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff5a:	81a3      	strh	r3, [r4, #12]
 800ff5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff60:	e7e9      	b.n	800ff36 <__ssputs_r+0x8a>
	...

0800ff64 <_svfiprintf_r>:
 800ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff68:	4698      	mov	r8, r3
 800ff6a:	898b      	ldrh	r3, [r1, #12]
 800ff6c:	061b      	lsls	r3, r3, #24
 800ff6e:	b09d      	sub	sp, #116	@ 0x74
 800ff70:	4607      	mov	r7, r0
 800ff72:	460d      	mov	r5, r1
 800ff74:	4614      	mov	r4, r2
 800ff76:	d510      	bpl.n	800ff9a <_svfiprintf_r+0x36>
 800ff78:	690b      	ldr	r3, [r1, #16]
 800ff7a:	b973      	cbnz	r3, 800ff9a <_svfiprintf_r+0x36>
 800ff7c:	2140      	movs	r1, #64	@ 0x40
 800ff7e:	f7ff fdad 	bl	800fadc <_malloc_r>
 800ff82:	6028      	str	r0, [r5, #0]
 800ff84:	6128      	str	r0, [r5, #16]
 800ff86:	b930      	cbnz	r0, 800ff96 <_svfiprintf_r+0x32>
 800ff88:	230c      	movs	r3, #12
 800ff8a:	603b      	str	r3, [r7, #0]
 800ff8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff90:	b01d      	add	sp, #116	@ 0x74
 800ff92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff96:	2340      	movs	r3, #64	@ 0x40
 800ff98:	616b      	str	r3, [r5, #20]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff9e:	2320      	movs	r3, #32
 800ffa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ffa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffa8:	2330      	movs	r3, #48	@ 0x30
 800ffaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010148 <_svfiprintf_r+0x1e4>
 800ffae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ffb2:	f04f 0901 	mov.w	r9, #1
 800ffb6:	4623      	mov	r3, r4
 800ffb8:	469a      	mov	sl, r3
 800ffba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffbe:	b10a      	cbz	r2, 800ffc4 <_svfiprintf_r+0x60>
 800ffc0:	2a25      	cmp	r2, #37	@ 0x25
 800ffc2:	d1f9      	bne.n	800ffb8 <_svfiprintf_r+0x54>
 800ffc4:	ebba 0b04 	subs.w	fp, sl, r4
 800ffc8:	d00b      	beq.n	800ffe2 <_svfiprintf_r+0x7e>
 800ffca:	465b      	mov	r3, fp
 800ffcc:	4622      	mov	r2, r4
 800ffce:	4629      	mov	r1, r5
 800ffd0:	4638      	mov	r0, r7
 800ffd2:	f7ff ff6b 	bl	800feac <__ssputs_r>
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f000 80a7 	beq.w	801012a <_svfiprintf_r+0x1c6>
 800ffdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffde:	445a      	add	r2, fp
 800ffe0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffe2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	f000 809f 	beq.w	801012a <_svfiprintf_r+0x1c6>
 800ffec:	2300      	movs	r3, #0
 800ffee:	f04f 32ff 	mov.w	r2, #4294967295
 800fff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fff6:	f10a 0a01 	add.w	sl, sl, #1
 800fffa:	9304      	str	r3, [sp, #16]
 800fffc:	9307      	str	r3, [sp, #28]
 800fffe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010002:	931a      	str	r3, [sp, #104]	@ 0x68
 8010004:	4654      	mov	r4, sl
 8010006:	2205      	movs	r2, #5
 8010008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801000c:	484e      	ldr	r0, [pc, #312]	@ (8010148 <_svfiprintf_r+0x1e4>)
 801000e:	f7f0 f8ff 	bl	8000210 <memchr>
 8010012:	9a04      	ldr	r2, [sp, #16]
 8010014:	b9d8      	cbnz	r0, 801004e <_svfiprintf_r+0xea>
 8010016:	06d0      	lsls	r0, r2, #27
 8010018:	bf44      	itt	mi
 801001a:	2320      	movmi	r3, #32
 801001c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010020:	0711      	lsls	r1, r2, #28
 8010022:	bf44      	itt	mi
 8010024:	232b      	movmi	r3, #43	@ 0x2b
 8010026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801002a:	f89a 3000 	ldrb.w	r3, [sl]
 801002e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010030:	d015      	beq.n	801005e <_svfiprintf_r+0xfa>
 8010032:	9a07      	ldr	r2, [sp, #28]
 8010034:	4654      	mov	r4, sl
 8010036:	2000      	movs	r0, #0
 8010038:	f04f 0c0a 	mov.w	ip, #10
 801003c:	4621      	mov	r1, r4
 801003e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010042:	3b30      	subs	r3, #48	@ 0x30
 8010044:	2b09      	cmp	r3, #9
 8010046:	d94b      	bls.n	80100e0 <_svfiprintf_r+0x17c>
 8010048:	b1b0      	cbz	r0, 8010078 <_svfiprintf_r+0x114>
 801004a:	9207      	str	r2, [sp, #28]
 801004c:	e014      	b.n	8010078 <_svfiprintf_r+0x114>
 801004e:	eba0 0308 	sub.w	r3, r0, r8
 8010052:	fa09 f303 	lsl.w	r3, r9, r3
 8010056:	4313      	orrs	r3, r2
 8010058:	9304      	str	r3, [sp, #16]
 801005a:	46a2      	mov	sl, r4
 801005c:	e7d2      	b.n	8010004 <_svfiprintf_r+0xa0>
 801005e:	9b03      	ldr	r3, [sp, #12]
 8010060:	1d19      	adds	r1, r3, #4
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	9103      	str	r1, [sp, #12]
 8010066:	2b00      	cmp	r3, #0
 8010068:	bfbb      	ittet	lt
 801006a:	425b      	neglt	r3, r3
 801006c:	f042 0202 	orrlt.w	r2, r2, #2
 8010070:	9307      	strge	r3, [sp, #28]
 8010072:	9307      	strlt	r3, [sp, #28]
 8010074:	bfb8      	it	lt
 8010076:	9204      	strlt	r2, [sp, #16]
 8010078:	7823      	ldrb	r3, [r4, #0]
 801007a:	2b2e      	cmp	r3, #46	@ 0x2e
 801007c:	d10a      	bne.n	8010094 <_svfiprintf_r+0x130>
 801007e:	7863      	ldrb	r3, [r4, #1]
 8010080:	2b2a      	cmp	r3, #42	@ 0x2a
 8010082:	d132      	bne.n	80100ea <_svfiprintf_r+0x186>
 8010084:	9b03      	ldr	r3, [sp, #12]
 8010086:	1d1a      	adds	r2, r3, #4
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	9203      	str	r2, [sp, #12]
 801008c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010090:	3402      	adds	r4, #2
 8010092:	9305      	str	r3, [sp, #20]
 8010094:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010158 <_svfiprintf_r+0x1f4>
 8010098:	7821      	ldrb	r1, [r4, #0]
 801009a:	2203      	movs	r2, #3
 801009c:	4650      	mov	r0, sl
 801009e:	f7f0 f8b7 	bl	8000210 <memchr>
 80100a2:	b138      	cbz	r0, 80100b4 <_svfiprintf_r+0x150>
 80100a4:	9b04      	ldr	r3, [sp, #16]
 80100a6:	eba0 000a 	sub.w	r0, r0, sl
 80100aa:	2240      	movs	r2, #64	@ 0x40
 80100ac:	4082      	lsls	r2, r0
 80100ae:	4313      	orrs	r3, r2
 80100b0:	3401      	adds	r4, #1
 80100b2:	9304      	str	r3, [sp, #16]
 80100b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100b8:	4824      	ldr	r0, [pc, #144]	@ (801014c <_svfiprintf_r+0x1e8>)
 80100ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100be:	2206      	movs	r2, #6
 80100c0:	f7f0 f8a6 	bl	8000210 <memchr>
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d036      	beq.n	8010136 <_svfiprintf_r+0x1d2>
 80100c8:	4b21      	ldr	r3, [pc, #132]	@ (8010150 <_svfiprintf_r+0x1ec>)
 80100ca:	bb1b      	cbnz	r3, 8010114 <_svfiprintf_r+0x1b0>
 80100cc:	9b03      	ldr	r3, [sp, #12]
 80100ce:	3307      	adds	r3, #7
 80100d0:	f023 0307 	bic.w	r3, r3, #7
 80100d4:	3308      	adds	r3, #8
 80100d6:	9303      	str	r3, [sp, #12]
 80100d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100da:	4433      	add	r3, r6
 80100dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80100de:	e76a      	b.n	800ffb6 <_svfiprintf_r+0x52>
 80100e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80100e4:	460c      	mov	r4, r1
 80100e6:	2001      	movs	r0, #1
 80100e8:	e7a8      	b.n	801003c <_svfiprintf_r+0xd8>
 80100ea:	2300      	movs	r3, #0
 80100ec:	3401      	adds	r4, #1
 80100ee:	9305      	str	r3, [sp, #20]
 80100f0:	4619      	mov	r1, r3
 80100f2:	f04f 0c0a 	mov.w	ip, #10
 80100f6:	4620      	mov	r0, r4
 80100f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100fc:	3a30      	subs	r2, #48	@ 0x30
 80100fe:	2a09      	cmp	r2, #9
 8010100:	d903      	bls.n	801010a <_svfiprintf_r+0x1a6>
 8010102:	2b00      	cmp	r3, #0
 8010104:	d0c6      	beq.n	8010094 <_svfiprintf_r+0x130>
 8010106:	9105      	str	r1, [sp, #20]
 8010108:	e7c4      	b.n	8010094 <_svfiprintf_r+0x130>
 801010a:	fb0c 2101 	mla	r1, ip, r1, r2
 801010e:	4604      	mov	r4, r0
 8010110:	2301      	movs	r3, #1
 8010112:	e7f0      	b.n	80100f6 <_svfiprintf_r+0x192>
 8010114:	ab03      	add	r3, sp, #12
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	462a      	mov	r2, r5
 801011a:	4b0e      	ldr	r3, [pc, #56]	@ (8010154 <_svfiprintf_r+0x1f0>)
 801011c:	a904      	add	r1, sp, #16
 801011e:	4638      	mov	r0, r7
 8010120:	f3af 8000 	nop.w
 8010124:	1c42      	adds	r2, r0, #1
 8010126:	4606      	mov	r6, r0
 8010128:	d1d6      	bne.n	80100d8 <_svfiprintf_r+0x174>
 801012a:	89ab      	ldrh	r3, [r5, #12]
 801012c:	065b      	lsls	r3, r3, #25
 801012e:	f53f af2d 	bmi.w	800ff8c <_svfiprintf_r+0x28>
 8010132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010134:	e72c      	b.n	800ff90 <_svfiprintf_r+0x2c>
 8010136:	ab03      	add	r3, sp, #12
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	462a      	mov	r2, r5
 801013c:	4b05      	ldr	r3, [pc, #20]	@ (8010154 <_svfiprintf_r+0x1f0>)
 801013e:	a904      	add	r1, sp, #16
 8010140:	4638      	mov	r0, r7
 8010142:	f000 f879 	bl	8010238 <_printf_i>
 8010146:	e7ed      	b.n	8010124 <_svfiprintf_r+0x1c0>
 8010148:	0801064c 	.word	0x0801064c
 801014c:	08010656 	.word	0x08010656
 8010150:	00000000 	.word	0x00000000
 8010154:	0800fead 	.word	0x0800fead
 8010158:	08010652 	.word	0x08010652

0801015c <_printf_common>:
 801015c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010160:	4616      	mov	r6, r2
 8010162:	4698      	mov	r8, r3
 8010164:	688a      	ldr	r2, [r1, #8]
 8010166:	690b      	ldr	r3, [r1, #16]
 8010168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801016c:	4293      	cmp	r3, r2
 801016e:	bfb8      	it	lt
 8010170:	4613      	movlt	r3, r2
 8010172:	6033      	str	r3, [r6, #0]
 8010174:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010178:	4607      	mov	r7, r0
 801017a:	460c      	mov	r4, r1
 801017c:	b10a      	cbz	r2, 8010182 <_printf_common+0x26>
 801017e:	3301      	adds	r3, #1
 8010180:	6033      	str	r3, [r6, #0]
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	0699      	lsls	r1, r3, #26
 8010186:	bf42      	ittt	mi
 8010188:	6833      	ldrmi	r3, [r6, #0]
 801018a:	3302      	addmi	r3, #2
 801018c:	6033      	strmi	r3, [r6, #0]
 801018e:	6825      	ldr	r5, [r4, #0]
 8010190:	f015 0506 	ands.w	r5, r5, #6
 8010194:	d106      	bne.n	80101a4 <_printf_common+0x48>
 8010196:	f104 0a19 	add.w	sl, r4, #25
 801019a:	68e3      	ldr	r3, [r4, #12]
 801019c:	6832      	ldr	r2, [r6, #0]
 801019e:	1a9b      	subs	r3, r3, r2
 80101a0:	42ab      	cmp	r3, r5
 80101a2:	dc26      	bgt.n	80101f2 <_printf_common+0x96>
 80101a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80101a8:	6822      	ldr	r2, [r4, #0]
 80101aa:	3b00      	subs	r3, #0
 80101ac:	bf18      	it	ne
 80101ae:	2301      	movne	r3, #1
 80101b0:	0692      	lsls	r2, r2, #26
 80101b2:	d42b      	bmi.n	801020c <_printf_common+0xb0>
 80101b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80101b8:	4641      	mov	r1, r8
 80101ba:	4638      	mov	r0, r7
 80101bc:	47c8      	blx	r9
 80101be:	3001      	adds	r0, #1
 80101c0:	d01e      	beq.n	8010200 <_printf_common+0xa4>
 80101c2:	6823      	ldr	r3, [r4, #0]
 80101c4:	6922      	ldr	r2, [r4, #16]
 80101c6:	f003 0306 	and.w	r3, r3, #6
 80101ca:	2b04      	cmp	r3, #4
 80101cc:	bf02      	ittt	eq
 80101ce:	68e5      	ldreq	r5, [r4, #12]
 80101d0:	6833      	ldreq	r3, [r6, #0]
 80101d2:	1aed      	subeq	r5, r5, r3
 80101d4:	68a3      	ldr	r3, [r4, #8]
 80101d6:	bf0c      	ite	eq
 80101d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101dc:	2500      	movne	r5, #0
 80101de:	4293      	cmp	r3, r2
 80101e0:	bfc4      	itt	gt
 80101e2:	1a9b      	subgt	r3, r3, r2
 80101e4:	18ed      	addgt	r5, r5, r3
 80101e6:	2600      	movs	r6, #0
 80101e8:	341a      	adds	r4, #26
 80101ea:	42b5      	cmp	r5, r6
 80101ec:	d11a      	bne.n	8010224 <_printf_common+0xc8>
 80101ee:	2000      	movs	r0, #0
 80101f0:	e008      	b.n	8010204 <_printf_common+0xa8>
 80101f2:	2301      	movs	r3, #1
 80101f4:	4652      	mov	r2, sl
 80101f6:	4641      	mov	r1, r8
 80101f8:	4638      	mov	r0, r7
 80101fa:	47c8      	blx	r9
 80101fc:	3001      	adds	r0, #1
 80101fe:	d103      	bne.n	8010208 <_printf_common+0xac>
 8010200:	f04f 30ff 	mov.w	r0, #4294967295
 8010204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010208:	3501      	adds	r5, #1
 801020a:	e7c6      	b.n	801019a <_printf_common+0x3e>
 801020c:	18e1      	adds	r1, r4, r3
 801020e:	1c5a      	adds	r2, r3, #1
 8010210:	2030      	movs	r0, #48	@ 0x30
 8010212:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010216:	4422      	add	r2, r4
 8010218:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801021c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010220:	3302      	adds	r3, #2
 8010222:	e7c7      	b.n	80101b4 <_printf_common+0x58>
 8010224:	2301      	movs	r3, #1
 8010226:	4622      	mov	r2, r4
 8010228:	4641      	mov	r1, r8
 801022a:	4638      	mov	r0, r7
 801022c:	47c8      	blx	r9
 801022e:	3001      	adds	r0, #1
 8010230:	d0e6      	beq.n	8010200 <_printf_common+0xa4>
 8010232:	3601      	adds	r6, #1
 8010234:	e7d9      	b.n	80101ea <_printf_common+0x8e>
	...

08010238 <_printf_i>:
 8010238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801023c:	7e0f      	ldrb	r7, [r1, #24]
 801023e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010240:	2f78      	cmp	r7, #120	@ 0x78
 8010242:	4691      	mov	r9, r2
 8010244:	4680      	mov	r8, r0
 8010246:	460c      	mov	r4, r1
 8010248:	469a      	mov	sl, r3
 801024a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801024e:	d807      	bhi.n	8010260 <_printf_i+0x28>
 8010250:	2f62      	cmp	r7, #98	@ 0x62
 8010252:	d80a      	bhi.n	801026a <_printf_i+0x32>
 8010254:	2f00      	cmp	r7, #0
 8010256:	f000 80d2 	beq.w	80103fe <_printf_i+0x1c6>
 801025a:	2f58      	cmp	r7, #88	@ 0x58
 801025c:	f000 80b9 	beq.w	80103d2 <_printf_i+0x19a>
 8010260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010264:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010268:	e03a      	b.n	80102e0 <_printf_i+0xa8>
 801026a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801026e:	2b15      	cmp	r3, #21
 8010270:	d8f6      	bhi.n	8010260 <_printf_i+0x28>
 8010272:	a101      	add	r1, pc, #4	@ (adr r1, 8010278 <_printf_i+0x40>)
 8010274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010278:	080102d1 	.word	0x080102d1
 801027c:	080102e5 	.word	0x080102e5
 8010280:	08010261 	.word	0x08010261
 8010284:	08010261 	.word	0x08010261
 8010288:	08010261 	.word	0x08010261
 801028c:	08010261 	.word	0x08010261
 8010290:	080102e5 	.word	0x080102e5
 8010294:	08010261 	.word	0x08010261
 8010298:	08010261 	.word	0x08010261
 801029c:	08010261 	.word	0x08010261
 80102a0:	08010261 	.word	0x08010261
 80102a4:	080103e5 	.word	0x080103e5
 80102a8:	0801030f 	.word	0x0801030f
 80102ac:	0801039f 	.word	0x0801039f
 80102b0:	08010261 	.word	0x08010261
 80102b4:	08010261 	.word	0x08010261
 80102b8:	08010407 	.word	0x08010407
 80102bc:	08010261 	.word	0x08010261
 80102c0:	0801030f 	.word	0x0801030f
 80102c4:	08010261 	.word	0x08010261
 80102c8:	08010261 	.word	0x08010261
 80102cc:	080103a7 	.word	0x080103a7
 80102d0:	6833      	ldr	r3, [r6, #0]
 80102d2:	1d1a      	adds	r2, r3, #4
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	6032      	str	r2, [r6, #0]
 80102d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80102e0:	2301      	movs	r3, #1
 80102e2:	e09d      	b.n	8010420 <_printf_i+0x1e8>
 80102e4:	6833      	ldr	r3, [r6, #0]
 80102e6:	6820      	ldr	r0, [r4, #0]
 80102e8:	1d19      	adds	r1, r3, #4
 80102ea:	6031      	str	r1, [r6, #0]
 80102ec:	0606      	lsls	r6, r0, #24
 80102ee:	d501      	bpl.n	80102f4 <_printf_i+0xbc>
 80102f0:	681d      	ldr	r5, [r3, #0]
 80102f2:	e003      	b.n	80102fc <_printf_i+0xc4>
 80102f4:	0645      	lsls	r5, r0, #25
 80102f6:	d5fb      	bpl.n	80102f0 <_printf_i+0xb8>
 80102f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80102fc:	2d00      	cmp	r5, #0
 80102fe:	da03      	bge.n	8010308 <_printf_i+0xd0>
 8010300:	232d      	movs	r3, #45	@ 0x2d
 8010302:	426d      	negs	r5, r5
 8010304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010308:	4859      	ldr	r0, [pc, #356]	@ (8010470 <_printf_i+0x238>)
 801030a:	230a      	movs	r3, #10
 801030c:	e011      	b.n	8010332 <_printf_i+0xfa>
 801030e:	6821      	ldr	r1, [r4, #0]
 8010310:	6833      	ldr	r3, [r6, #0]
 8010312:	0608      	lsls	r0, r1, #24
 8010314:	f853 5b04 	ldr.w	r5, [r3], #4
 8010318:	d402      	bmi.n	8010320 <_printf_i+0xe8>
 801031a:	0649      	lsls	r1, r1, #25
 801031c:	bf48      	it	mi
 801031e:	b2ad      	uxthmi	r5, r5
 8010320:	2f6f      	cmp	r7, #111	@ 0x6f
 8010322:	4853      	ldr	r0, [pc, #332]	@ (8010470 <_printf_i+0x238>)
 8010324:	6033      	str	r3, [r6, #0]
 8010326:	bf14      	ite	ne
 8010328:	230a      	movne	r3, #10
 801032a:	2308      	moveq	r3, #8
 801032c:	2100      	movs	r1, #0
 801032e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010332:	6866      	ldr	r6, [r4, #4]
 8010334:	60a6      	str	r6, [r4, #8]
 8010336:	2e00      	cmp	r6, #0
 8010338:	bfa2      	ittt	ge
 801033a:	6821      	ldrge	r1, [r4, #0]
 801033c:	f021 0104 	bicge.w	r1, r1, #4
 8010340:	6021      	strge	r1, [r4, #0]
 8010342:	b90d      	cbnz	r5, 8010348 <_printf_i+0x110>
 8010344:	2e00      	cmp	r6, #0
 8010346:	d04b      	beq.n	80103e0 <_printf_i+0x1a8>
 8010348:	4616      	mov	r6, r2
 801034a:	fbb5 f1f3 	udiv	r1, r5, r3
 801034e:	fb03 5711 	mls	r7, r3, r1, r5
 8010352:	5dc7      	ldrb	r7, [r0, r7]
 8010354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010358:	462f      	mov	r7, r5
 801035a:	42bb      	cmp	r3, r7
 801035c:	460d      	mov	r5, r1
 801035e:	d9f4      	bls.n	801034a <_printf_i+0x112>
 8010360:	2b08      	cmp	r3, #8
 8010362:	d10b      	bne.n	801037c <_printf_i+0x144>
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	07df      	lsls	r7, r3, #31
 8010368:	d508      	bpl.n	801037c <_printf_i+0x144>
 801036a:	6923      	ldr	r3, [r4, #16]
 801036c:	6861      	ldr	r1, [r4, #4]
 801036e:	4299      	cmp	r1, r3
 8010370:	bfde      	ittt	le
 8010372:	2330      	movle	r3, #48	@ 0x30
 8010374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010378:	f106 36ff 	addle.w	r6, r6, #4294967295
 801037c:	1b92      	subs	r2, r2, r6
 801037e:	6122      	str	r2, [r4, #16]
 8010380:	f8cd a000 	str.w	sl, [sp]
 8010384:	464b      	mov	r3, r9
 8010386:	aa03      	add	r2, sp, #12
 8010388:	4621      	mov	r1, r4
 801038a:	4640      	mov	r0, r8
 801038c:	f7ff fee6 	bl	801015c <_printf_common>
 8010390:	3001      	adds	r0, #1
 8010392:	d14a      	bne.n	801042a <_printf_i+0x1f2>
 8010394:	f04f 30ff 	mov.w	r0, #4294967295
 8010398:	b004      	add	sp, #16
 801039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	f043 0320 	orr.w	r3, r3, #32
 80103a4:	6023      	str	r3, [r4, #0]
 80103a6:	4833      	ldr	r0, [pc, #204]	@ (8010474 <_printf_i+0x23c>)
 80103a8:	2778      	movs	r7, #120	@ 0x78
 80103aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	6831      	ldr	r1, [r6, #0]
 80103b2:	061f      	lsls	r7, r3, #24
 80103b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80103b8:	d402      	bmi.n	80103c0 <_printf_i+0x188>
 80103ba:	065f      	lsls	r7, r3, #25
 80103bc:	bf48      	it	mi
 80103be:	b2ad      	uxthmi	r5, r5
 80103c0:	6031      	str	r1, [r6, #0]
 80103c2:	07d9      	lsls	r1, r3, #31
 80103c4:	bf44      	itt	mi
 80103c6:	f043 0320 	orrmi.w	r3, r3, #32
 80103ca:	6023      	strmi	r3, [r4, #0]
 80103cc:	b11d      	cbz	r5, 80103d6 <_printf_i+0x19e>
 80103ce:	2310      	movs	r3, #16
 80103d0:	e7ac      	b.n	801032c <_printf_i+0xf4>
 80103d2:	4827      	ldr	r0, [pc, #156]	@ (8010470 <_printf_i+0x238>)
 80103d4:	e7e9      	b.n	80103aa <_printf_i+0x172>
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	f023 0320 	bic.w	r3, r3, #32
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	e7f6      	b.n	80103ce <_printf_i+0x196>
 80103e0:	4616      	mov	r6, r2
 80103e2:	e7bd      	b.n	8010360 <_printf_i+0x128>
 80103e4:	6833      	ldr	r3, [r6, #0]
 80103e6:	6825      	ldr	r5, [r4, #0]
 80103e8:	6961      	ldr	r1, [r4, #20]
 80103ea:	1d18      	adds	r0, r3, #4
 80103ec:	6030      	str	r0, [r6, #0]
 80103ee:	062e      	lsls	r6, r5, #24
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	d501      	bpl.n	80103f8 <_printf_i+0x1c0>
 80103f4:	6019      	str	r1, [r3, #0]
 80103f6:	e002      	b.n	80103fe <_printf_i+0x1c6>
 80103f8:	0668      	lsls	r0, r5, #25
 80103fa:	d5fb      	bpl.n	80103f4 <_printf_i+0x1bc>
 80103fc:	8019      	strh	r1, [r3, #0]
 80103fe:	2300      	movs	r3, #0
 8010400:	6123      	str	r3, [r4, #16]
 8010402:	4616      	mov	r6, r2
 8010404:	e7bc      	b.n	8010380 <_printf_i+0x148>
 8010406:	6833      	ldr	r3, [r6, #0]
 8010408:	1d1a      	adds	r2, r3, #4
 801040a:	6032      	str	r2, [r6, #0]
 801040c:	681e      	ldr	r6, [r3, #0]
 801040e:	6862      	ldr	r2, [r4, #4]
 8010410:	2100      	movs	r1, #0
 8010412:	4630      	mov	r0, r6
 8010414:	f7ef fefc 	bl	8000210 <memchr>
 8010418:	b108      	cbz	r0, 801041e <_printf_i+0x1e6>
 801041a:	1b80      	subs	r0, r0, r6
 801041c:	6060      	str	r0, [r4, #4]
 801041e:	6863      	ldr	r3, [r4, #4]
 8010420:	6123      	str	r3, [r4, #16]
 8010422:	2300      	movs	r3, #0
 8010424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010428:	e7aa      	b.n	8010380 <_printf_i+0x148>
 801042a:	6923      	ldr	r3, [r4, #16]
 801042c:	4632      	mov	r2, r6
 801042e:	4649      	mov	r1, r9
 8010430:	4640      	mov	r0, r8
 8010432:	47d0      	blx	sl
 8010434:	3001      	adds	r0, #1
 8010436:	d0ad      	beq.n	8010394 <_printf_i+0x15c>
 8010438:	6823      	ldr	r3, [r4, #0]
 801043a:	079b      	lsls	r3, r3, #30
 801043c:	d413      	bmi.n	8010466 <_printf_i+0x22e>
 801043e:	68e0      	ldr	r0, [r4, #12]
 8010440:	9b03      	ldr	r3, [sp, #12]
 8010442:	4298      	cmp	r0, r3
 8010444:	bfb8      	it	lt
 8010446:	4618      	movlt	r0, r3
 8010448:	e7a6      	b.n	8010398 <_printf_i+0x160>
 801044a:	2301      	movs	r3, #1
 801044c:	4632      	mov	r2, r6
 801044e:	4649      	mov	r1, r9
 8010450:	4640      	mov	r0, r8
 8010452:	47d0      	blx	sl
 8010454:	3001      	adds	r0, #1
 8010456:	d09d      	beq.n	8010394 <_printf_i+0x15c>
 8010458:	3501      	adds	r5, #1
 801045a:	68e3      	ldr	r3, [r4, #12]
 801045c:	9903      	ldr	r1, [sp, #12]
 801045e:	1a5b      	subs	r3, r3, r1
 8010460:	42ab      	cmp	r3, r5
 8010462:	dcf2      	bgt.n	801044a <_printf_i+0x212>
 8010464:	e7eb      	b.n	801043e <_printf_i+0x206>
 8010466:	2500      	movs	r5, #0
 8010468:	f104 0619 	add.w	r6, r4, #25
 801046c:	e7f5      	b.n	801045a <_printf_i+0x222>
 801046e:	bf00      	nop
 8010470:	0801065d 	.word	0x0801065d
 8010474:	0801066e 	.word	0x0801066e

08010478 <memmove>:
 8010478:	4288      	cmp	r0, r1
 801047a:	b510      	push	{r4, lr}
 801047c:	eb01 0402 	add.w	r4, r1, r2
 8010480:	d902      	bls.n	8010488 <memmove+0x10>
 8010482:	4284      	cmp	r4, r0
 8010484:	4623      	mov	r3, r4
 8010486:	d807      	bhi.n	8010498 <memmove+0x20>
 8010488:	1e43      	subs	r3, r0, #1
 801048a:	42a1      	cmp	r1, r4
 801048c:	d008      	beq.n	80104a0 <memmove+0x28>
 801048e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010496:	e7f8      	b.n	801048a <memmove+0x12>
 8010498:	4402      	add	r2, r0
 801049a:	4601      	mov	r1, r0
 801049c:	428a      	cmp	r2, r1
 801049e:	d100      	bne.n	80104a2 <memmove+0x2a>
 80104a0:	bd10      	pop	{r4, pc}
 80104a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104aa:	e7f7      	b.n	801049c <memmove+0x24>

080104ac <_init>:
 80104ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ae:	bf00      	nop
 80104b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b2:	bc08      	pop	{r3}
 80104b4:	469e      	mov	lr, r3
 80104b6:	4770      	bx	lr

080104b8 <_fini>:
 80104b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ba:	bf00      	nop
 80104bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104be:	bc08      	pop	{r3}
 80104c0:	469e      	mov	lr, r3
 80104c2:	4770      	bx	lr
