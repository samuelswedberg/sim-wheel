
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c150  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800c320  0800c320  0000d320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c910  0800c910  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c910  0800c910  0000d910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c918  0800c918  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c918  0800c918  0000d918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c91c  0800c91c  0000d91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c920  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044ec  200001e4  0800cb04  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046d0  0800cb04  0000e6d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b39a  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c88  00000000  00000000  000295ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013db  00000000  00000000  0002eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a71  00000000  00000000  0002ff3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf2d  00000000  00000000  000559ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0a1f  00000000  00000000  000718d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001522f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dd0  00000000  00000000  0015233c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0015a10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c308 	.word	0x0800c308

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800c308 	.word	0x0800c308

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b9a0 	b.w	8001014 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f83c 	bl	8000d58 <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__aeabi_d2lz>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	f7ff ff21 	bl	8000b3c <__aeabi_dcmplt>
 8000cfa:	b928      	cbnz	r0, 8000d08 <__aeabi_d2lz+0x1c>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b80a 	b.w	8000d1c <__aeabi_d2ulz>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0e:	f000 f805 	bl	8000d1c <__aeabi_d2ulz>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	bf00      	nop

08000d1c <__aeabi_d2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__aeabi_d2ulz+0x34>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc97 	bl	8000658 <__aeabi_dmul>
 8000d2a:	f7ff ff57 	bl	8000bdc <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc18 	bl	8000564 <__aeabi_ui2d>
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <__aeabi_d2ulz+0x38>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f7ff fc8e 	bl	8000658 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff fad0 	bl	80002e8 <__aeabi_dsub>
 8000d48:	f7ff ff48 	bl	8000bdc <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <case_insensitive_strcmp+0x16>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800102e:	2301      	movs	r3, #1
 8001030:	e056      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d10d      	bne.n	8001056 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e050      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e04a      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3301      	adds	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3301      	adds	r3, #1
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d103      	bne.n	8001076 <case_insensitive_strcmp+0x5e>
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f103 0220 	add.w	r2, r3, #32
 8001074:	e000      	b.n	8001078 <case_insensitive_strcmp+0x60>
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	73bb      	strb	r3, [r7, #14]
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	491a      	ldr	r1, [pc, #104]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <case_insensitive_strcmp+0x7e>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	3320      	adds	r3, #32
 8001094:	e000      	b.n	8001098 <case_insensitive_strcmp+0x80>
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	429a      	cmp	r2, r3
 800109a:	d0d0      	beq.n	800103e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	737b      	strb	r3, [r7, #13]
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d103      	bne.n	80010bc <case_insensitive_strcmp+0xa4>
 80010b4:	7b7b      	ldrb	r3, [r7, #13]
 80010b6:	f103 0220 	add.w	r2, r3, #32
 80010ba:	e000      	b.n	80010be <case_insensitive_strcmp+0xa6>
 80010bc:	7b7a      	ldrb	r2, [r7, #13]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	733b      	strb	r3, [r7, #12]
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010ca:	440b      	add	r3, r1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <case_insensitive_strcmp+0xc4>
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	3320      	adds	r3, #32
 80010da:	e000      	b.n	80010de <case_insensitive_strcmp+0xc6>
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	0800c5b8 	.word	0x0800c5b8

080010f0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2028      	movs	r0, #40	@ 0x28
 80010fe:	4798      	blx	r3
 8001100:	60f8      	str	r0, [r7, #12]
    if (node)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001108:	2228      	movs	r2, #40	@ 0x28
 800110a:	2100      	movs	r1, #0
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f009 f900 	bl	800a312 <memset>
    }

    return node;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001128:	e03d      	b.n	80011a6 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d108      	bne.n	800114e <cJSON_Delete+0x32>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffe7 	bl	800111c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <cJSON_Delete+0x58>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <cJSON_Delete+0x9c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6912      	ldr	r2, [r2, #16]
 800116a:	4610      	mov	r0, r2
 800116c:	4798      	blx	r3
            item->valuestring = NULL;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10c      	bne.n	800119a <cJSON_Delete+0x7e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <cJSON_Delete+0x9c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6a12      	ldr	r2, [r2, #32]
 8001190:	4610      	mov	r0, r2
 8001192:	4798      	blx	r3
            item->string = NULL;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <cJSON_Delete+0x9c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	4798      	blx	r3
        item = next;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1be      	bne.n	800112a <cJSON_Delete+0xe>
    }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000

080011bc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80011c0:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	0000      	movs	r0, r0
	...

080011d0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b098      	sub	sp, #96	@ 0x60
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011ea:	f7ff ffe7 	bl	80011bc <get_decimal_point>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <parse_number+0x36>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <parse_number+0x3a>
    {
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e0a0      	b.n	800134c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800120e:	e03d      	b.n	800128c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6899      	ldr	r1, [r3, #8]
 8001218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800121a:	440b      	add	r3, r1
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b45      	cmp	r3, #69	@ 0x45
 8001222:	dc17      	bgt.n	8001254 <parse_number+0x84>
 8001224:	2b2b      	cmp	r3, #43	@ 0x2b
 8001226:	db40      	blt.n	80012aa <parse_number+0xda>
 8001228:	3b2b      	subs	r3, #43	@ 0x2b
 800122a:	2201      	movs	r2, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <parse_number+0x190>)
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <parse_number+0x88>
 8001240:	f002 0308 	and.w	r3, r2, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d111      	bne.n	8001276 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001252:	e02a      	b.n	80012aa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001254:	2b65      	cmp	r3, #101	@ 0x65
 8001256:	d128      	bne.n	80012aa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001262:	440b      	add	r3, r1
 8001264:	4413      	add	r3, r2
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
                break;
 8001274:	e007      	b.n	8001286 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800127c:	4413      	add	r3, r2
 800127e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001282:	701a      	strb	r2, [r3, #0]
                break;
 8001284:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001288:	3301      	adds	r3, #1
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800128c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001290:	d80d      	bhi.n	80012ae <parse_number+0xde>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <parse_number+0xde>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129e:	441a      	add	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3b3      	bcc.n	8001210 <parse_number+0x40>
        }
    }
loop_end:
 80012a8:	e001      	b.n	80012ae <parse_number+0xde>
                goto loop_end;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <parse_number+0xe0>
loop_end:
 80012ae:	bf00      	nop
    number_c_string[i] = '\0';
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80012bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f008 fede 	bl	800a088 <strtod>
 80012cc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80012d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d101      	bne.n	80012de <parse_number+0x10e>
    {
        return false; /* parse_error */
 80012da:	2300      	movs	r3, #0
 80012dc:	e036      	b.n	800134c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012e4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001358 <parse_number+0x188>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012f2:	f7ff fc37 	bl	8000b64 <__aeabi_dcmpge>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	e015      	b.n	8001332 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <parse_number+0x194>)
 800130c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001310:	f7ff fc1e 	bl	8000b50 <__aeabi_dcmple>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	e006      	b.n	8001332 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001324:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001328:	f7ff fc30 	bl	8000b8c <__aeabi_d2iz>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2208      	movs	r2, #8
 8001336:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800133e:	f107 0208 	add.w	r2, r7, #8
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	441a      	add	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	609a      	str	r2, [r3, #8]
    return true;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3760      	adds	r7, #96	@ 0x60
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	ffc00000 	.word	0xffc00000
 800135c:	41dfffff 	.word	0x41dfffff
 8001360:	04007fe5 	.word	0x04007fe5
 8001364:	c1e00000 	.word	0xc1e00000

08001368 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e04c      	b.n	8001418 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b2f      	cmp	r3, #47	@ 0x2f
 8001388:	d90f      	bls.n	80013aa <parse_hex4+0x42>
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b39      	cmp	r3, #57	@ 0x39
 8001394:	d809      	bhi.n	80013aa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b30      	subs	r3, #48	@ 0x30
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e02d      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b40      	cmp	r3, #64	@ 0x40
 80013b4:	d90f      	bls.n	80013d6 <parse_hex4+0x6e>
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b46      	cmp	r3, #70	@ 0x46
 80013c0:	d809      	bhi.n	80013d6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	3b37      	subs	r3, #55	@ 0x37
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e017      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b60      	cmp	r3, #96	@ 0x60
 80013e0:	d90f      	bls.n	8001402 <parse_hex4+0x9a>
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b66      	cmp	r3, #102	@ 0x66
 80013ec:	d809      	bhi.n	8001402 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	3b57      	subs	r3, #87	@ 0x57
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e001      	b.n	8001406 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001402:	2300      	movs	r3, #0
 8001404:	e00c      	b.n	8001420 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d802      	bhi.n	8001412 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d9af      	bls.n	800137e <parse_hex4+0x16>
        }
    }

    return h;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b05      	cmp	r3, #5
 8001464:	f340 80b7 	ble.w	80015d6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	3302      	adds	r3, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff7b 	bl	8001368 <parse_hex4>
 8001472:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800147a:	d304      	bcc.n	8001486 <utf16_literal_to_utf8+0x5a>
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001482:	f0c0 80aa 	bcc.w	80015da <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800148c:	d337      	bcc.n	80014fe <utf16_literal_to_utf8+0xd2>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001494:	d233      	bcs.n	80014fe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	3306      	adds	r3, #6
 800149a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80014a0:	230c      	movs	r3, #12
 80014a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	f340 8096 	ble.w	80015de <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80014b8:	f040 8093 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b75      	cmp	r3, #117	@ 0x75
 80014c4:	f040 808d 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3302      	adds	r3, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff4b 	bl	8001368 <parse_hex4>
 80014d2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80014da:	f0c0 8084 	bcc.w	80015e6 <utf16_literal_to_utf8+0x1ba>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80014e4:	d27f      	bcs.n	80015e6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	029a      	lsls	r2, r3, #10
 80014ea:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <utf16_literal_to_utf8+0x1cc>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 80014fc:	e004      	b.n	8001508 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014fe:	2306      	movs	r3, #6
 8001500:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	2b7f      	cmp	r3, #127	@ 0x7f
 800150c:	d803      	bhi.n	8001516 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001514:	e01f      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800151c:	d206      	bcs.n	800152c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001524:	23c0      	movs	r3, #192	@ 0xc0
 8001526:	f887 3020 	strb.w	r3, [r7, #32]
 800152a:	e014      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001532:	d206      	bcs.n	8001542 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001534:	2303      	movs	r3, #3
 8001536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800153a:	23e0      	movs	r3, #224	@ 0xe0
 800153c:	f887 3020 	strb.w	r3, [r7, #32]
 8001540:	e009      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001548:	d24f      	bcs.n	80015ea <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001550:	23f0      	movs	r3, #240	@ 0xf0
 8001552:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800155a:	3b01      	subs	r3, #1
 800155c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001560:	e015      	b.n	800158e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001574:	440b      	add	r3, r1
 8001576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001584:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001588:	3b01      	subs	r3, #1
 800158a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800158e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1e5      	bne.n	8001562 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800159a:	2b01      	cmp	r3, #1
 800159c:	d909      	bls.n	80015b2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	b2d9      	uxtb	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e007      	b.n	80015c2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ca:	441a      	add	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80015d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015d4:	e00b      	b.n	80015ee <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015d6:	bf00      	nop
 80015d8:	e008      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015da:	bf00      	nop
 80015dc:	e006      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015de:	bf00      	nop
 80015e0:	e004      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e2:	bf00      	nop
 80015e4:	e002      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e6:	bf00      	nop
 80015e8:	e000      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015ea:	bf00      	nop

fail:
    return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	000ffc00 	.word	0x000ffc00

080015fc <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b22      	cmp	r3, #34	@ 0x22
 8001638:	f040 8103 	bne.w	8001842 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001644:	e017      	b.n	8001676 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b5c      	cmp	r3, #92	@ 0x5c
 800164c:	d110      	bne.n	8001670 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	f080 80f1 	bcs.w	8001846 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	3301      	adds	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
                input_end++;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3301      	adds	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	461a      	mov	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d203      	bcs.n	8001690 <parse_string+0x94>
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b22      	cmp	r3, #34	@ 0x22
 800168e:	d1da      	bne.n	8001646 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	f080 80d3 	bcs.w	800184a <parse_string+0x24e>
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b22      	cmp	r3, #34	@ 0x22
 80016aa:	f040 80ce 	bne.w	800184a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	6a3a      	ldr	r2, [r7, #32]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	3201      	adds	r2, #1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4798      	blx	r3
 80016d0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ba 	beq.w	800184e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016de:	e094      	b.n	800180a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80016e6:	d008      	beq.n	80016fa <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	1c53      	adds	r3, r2, #1
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	60f9      	str	r1, [r7, #12]
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e087      	b.n	800180a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016fe:	6a3a      	ldr	r2, [r7, #32]
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f340 80a4 	ble.w	8001852 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b75      	cmp	r3, #117	@ 0x75
 8001712:	f300 80a0 	bgt.w	8001856 <parse_string+0x25a>
 8001716:	2b5c      	cmp	r3, #92	@ 0x5c
 8001718:	da04      	bge.n	8001724 <parse_string+0x128>
 800171a:	2b22      	cmp	r3, #34	@ 0x22
 800171c:	d05c      	beq.n	80017d8 <parse_string+0x1dc>
 800171e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001720:	d05a      	beq.n	80017d8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001722:	e098      	b.n	8001856 <parse_string+0x25a>
            switch (input_pointer[1])
 8001724:	3b5c      	subs	r3, #92	@ 0x5c
 8001726:	2b19      	cmp	r3, #25
 8001728:	f200 8095 	bhi.w	8001856 <parse_string+0x25a>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <parse_string+0x138>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	080017d9 	.word	0x080017d9
 8001738:	08001857 	.word	0x08001857
 800173c:	08001857 	.word	0x08001857
 8001740:	08001857 	.word	0x08001857
 8001744:	08001857 	.word	0x08001857
 8001748:	08001857 	.word	0x08001857
 800174c:	0800179d 	.word	0x0800179d
 8001750:	08001857 	.word	0x08001857
 8001754:	08001857 	.word	0x08001857
 8001758:	08001857 	.word	0x08001857
 800175c:	080017a9 	.word	0x080017a9
 8001760:	08001857 	.word	0x08001857
 8001764:	08001857 	.word	0x08001857
 8001768:	08001857 	.word	0x08001857
 800176c:	08001857 	.word	0x08001857
 8001770:	08001857 	.word	0x08001857
 8001774:	08001857 	.word	0x08001857
 8001778:	08001857 	.word	0x08001857
 800177c:	080017b5 	.word	0x080017b5
 8001780:	08001857 	.word	0x08001857
 8001784:	08001857 	.word	0x08001857
 8001788:	08001857 	.word	0x08001857
 800178c:	080017c1 	.word	0x080017c1
 8001790:	08001857 	.word	0x08001857
 8001794:	080017cd 	.word	0x080017cd
 8001798:	080017e9 	.word	0x080017e9
                    *output_pointer++ = '\b';
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60fa      	str	r2, [r7, #12]
 80017a2:	2208      	movs	r2, #8
 80017a4:	701a      	strb	r2, [r3, #0]
                    break;
 80017a6:	e02c      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60fa      	str	r2, [r7, #12]
 80017ae:	220c      	movs	r2, #12
 80017b0:	701a      	strb	r2, [r3, #0]
                    break;
 80017b2:	e026      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60fa      	str	r2, [r7, #12]
 80017ba:	220a      	movs	r2, #10
 80017bc:	701a      	strb	r2, [r3, #0]
                    break;
 80017be:	e020      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	220d      	movs	r2, #13
 80017c8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ca:	e01a      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60fa      	str	r2, [r7, #12]
 80017d2:	2209      	movs	r2, #9
 80017d4:	701a      	strb	r2, [r3, #0]
                    break;
 80017d6:	e014      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	60f9      	str	r1, [r7, #12]
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	701a      	strb	r2, [r3, #0]
                    break;
 80017e6:	e00c      	b.n	8001802 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	461a      	mov	r2, r3
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017f2:	f7ff fe1b 	bl	800142c <utf16_literal_to_utf8>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02c      	beq.n	800185a <parse_string+0x25e>
                    break;
 8001800:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001806:	4413      	add	r3, r2
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800180a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	429a      	cmp	r2, r3
 8001810:	f4ff af66 	bcc.w	80016e0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2210      	movs	r2, #16
 800181e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	461a      	mov	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	609a      	str	r2, [r3, #8]

    return true;
 800183e:	2301      	movs	r3, #1
 8001840:	e020      	b.n	8001884 <parse_string+0x288>
        goto fail;
 8001842:	bf00      	nop
 8001844:	e00a      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001846:	bf00      	nop
 8001848:	e008      	b.n	800185c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800184a:	bf00      	nop
 800184c:	e006      	b.n	800185c <parse_string+0x260>
            goto fail; /* allocation failure */
 800184e:	bf00      	nop
 8001850:	e004      	b.n	800185c <parse_string+0x260>
                goto fail;
 8001852:	bf00      	nop
 8001854:	e002      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <parse_string+0x260>
                        goto fail;
 800185a:	bf00      	nop

fail:
    if (output != NULL)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	69f8      	ldr	r0, [r7, #28]
 8001868:	4798      	blx	r3
        output = NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	461a      	mov	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <buffer_skip_whitespace+0x16>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02c      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <buffer_skip_whitespace+0x2c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d306      	bcc.n	80018c6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e021      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d9e9      	bls.n	80018bc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d104      	bne.n	80018fe <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <skip_utf8_bom+0x1e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <skip_utf8_bom+0x1e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <skip_utf8_bom+0x22>
    {
        return NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	e01c      	b.n	8001968 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d018      	beq.n	8001966 <skip_utf8_bom+0x5a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	1d1a      	adds	r2, r3, #4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d211      	bcs.n	8001966 <skip_utf8_bom+0x5a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4413      	add	r3, r2
 800194c:	2203      	movs	r2, #3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <skip_utf8_bom+0x64>)
 8001950:	4618      	mov	r0, r3
 8001952:	f008 fce6 	bl	800a322 <strncmp>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1cda      	adds	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0800c358 	.word	0x0800c358

08001974 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	e00c      	b.n	80019a4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7fe fc4a 	bl	8000224 <strlen>
 8001990:	4603      	mov	r3, r0
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	6979      	ldr	r1, [r7, #20]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f805 	bl	80019ac <cJSON_ParseWithLengthOpts>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	@ 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d042      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03f      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019f6:	4a39      	ldr	r2, [pc, #228]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 80019f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001a02:	4836      	ldr	r0, [pc, #216]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 8001a04:	f7ff fb74 	bl	80010f0 <cJSON_New_Item>
 8001a08:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d02e      	beq.n	8001a6e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff79 	bl	800190c <skip_utf8_bom>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <buffer_skip_whitespace>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a28:	f000 f868 	bl	8001afc <parse_value>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01f      	beq.n	8001a72 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff25 	bl	800188c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d215      	bcs.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a68:	e031      	b.n	8001ace <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a6a:	bf00      	nop
 8001a6c:	e004      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a6e:	bf00      	nop
 8001a70:	e002      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a76:	bf00      	nop

fail:
    if (item != NULL)
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a80:	f7ff fb4c 	bl	800111c <cJSON_Delete>
    }

    if (value != NULL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d020      	beq.n	8001acc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a92:	6a3a      	ldr	r2, [r7, #32]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d202      	bcs.n	8001aa0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e005      	b.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3738      	adds	r7, #56	@ 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000200 	.word	0x20000200
 8001adc:	20000000 	.word	0x20000000

08001ae0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff41 	bl	8001974 <cJSON_ParseWithOpts>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <parse_value+0x18>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <parse_value+0x1c>
    {
        return false; /* no input */
 8001b14:	2300      	movs	r3, #0
 8001b16:	e0d2      	b.n	8001cbe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01d      	beq.n	8001b5a <parse_value+0x5e>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	1d1a      	adds	r2, r3, #4
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d816      	bhi.n	8001b5a <parse_value+0x5e>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	2204      	movs	r2, #4
 8001b38:	4963      	ldr	r1, [pc, #396]	@ (8001cc8 <parse_value+0x1cc>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f008 fbf1 	bl	800a322 <strncmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1d1a      	adds	r2, r3, #4
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
        return true;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0b1      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01d      	beq.n	8001b9c <parse_value+0xa0>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	1d5a      	adds	r2, r3, #5
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d816      	bhi.n	8001b9c <parse_value+0xa0>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4413      	add	r3, r2
 8001b78:	2205      	movs	r2, #5
 8001b7a:	4954      	ldr	r1, [pc, #336]	@ (8001ccc <parse_value+0x1d0>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f008 fbd0 	bl	800a322 <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	1d5a      	adds	r2, r3, #5
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
        return true;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e090      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <parse_value+0xe8>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d819      	bhi.n	8001be4 <parse_value+0xe8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4413      	add	r3, r2
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4944      	ldr	r1, [pc, #272]	@ (8001cd0 <parse_value+0x1d4>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f008 fbaf 	bl	800a322 <strncmp>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	609a      	str	r2, [r3, #8]
        return true;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e06c      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d013      	beq.n	8001c12 <parse_value+0x116>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20d      	bcs.n	8001c12 <parse_value+0x116>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b22      	cmp	r3, #34	@ 0x22
 8001c04:	d105      	bne.n	8001c12 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fcf7 	bl	80015fc <parse_string>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e055      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <parse_value+0x164>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d21d      	bcs.n	8001c60 <parse_value+0x164>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c32:	d00f      	beq.n	8001c54 <parse_value+0x158>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c42:	d90d      	bls.n	8001c60 <parse_value+0x164>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b39      	cmp	r3, #57	@ 0x39
 8001c52:	d805      	bhi.n	8001c60 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff faba 	bl	80011d0 <parse_number>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	e02e      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d013      	beq.n	8001c8e <parse_value+0x192>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20d      	bcs.n	8001c8e <parse_value+0x192>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c80:	d105      	bne.n	8001c8e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f825 	bl	8001cd4 <parse_array>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	e017      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <parse_value+0x1c0>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d20d      	bcs.n	8001cbc <parse_value+0x1c0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b7b      	cmp	r3, #123	@ 0x7b
 8001cae:	d105      	bne.n	8001cbc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8d2 	bl	8001e5c <parse_object>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e000      	b.n	8001cbe <parse_value+0x1c2>
    }

    return false;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	0800c32c 	.word	0x0800c32c
 8001ccc:	0800c35c 	.word	0x0800c35c
 8001cd0:	0800c364 	.word	0x0800c364

08001cd4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cee:	d301      	bcc.n	8001cf4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e0af      	b.n	8001e54 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d0c:	f040 8094 	bne.w	8001e38 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f7ff fdb6 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <parse_array+0x6e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d207      	bcs.n	8001d42 <parse_array+0x6e>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d40:	d061      	beq.n	8001e06 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <parse_array+0x80>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d305      	bcc.n	8001d60 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d5e:	e072      	b.n	8001e46 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9be 	bl	80010f0 <cJSON_New_Item>
 8001d74:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05f      	beq.n	8001e3c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e007      	b.n	8001d9c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7ff fd70 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f7ff fea4 	bl	8001afc <parse_value>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d042      	beq.n	8001e40 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001dba:	6838      	ldr	r0, [r7, #0]
 8001dbc:	f7ff fd66 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <parse_array+0x10e>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d207      	bcs.n	8001de2 <parse_array+0x10e>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b2c      	cmp	r3, #44	@ 0x2c
 8001de0:	d0c3      	beq.n	8001d6a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02d      	beq.n	8001e44 <parse_array+0x170>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d227      	bcs.n	8001e44 <parse_array+0x170>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b5d      	cmp	r3, #93	@ 0x5d
 8001e02:	d11f      	bne.n	8001e44 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001e04:	e000      	b.n	8001e08 <parse_array+0x134>
        goto success;
 8001e06:	bf00      	nop
    input_buffer->depth--;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <parse_array+0x14a>
        head->prev = current_item;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	609a      	str	r2, [r3, #8]

    return true;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00d      	b.n	8001e54 <parse_array+0x180>
        goto fail;
 8001e38:	bf00      	nop
 8001e3a:	e004      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e44:	bf00      	nop

fail:
    if (head != NULL)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7ff f965 	bl	800111c <cJSON_Delete>
    }

    return false;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e76:	d301      	bcc.n	8001e7c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e0f7      	b.n	800206c <parse_object+0x210>
    }
    input_buffer->depth++;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80db 	beq.w	8002044 <parse_object+0x1e8>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	f080 80d4 	bcs.w	8002044 <parse_object+0x1e8>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b7b      	cmp	r3, #123	@ 0x7b
 8001eaa:	f040 80cb 	bne.w	8002044 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f7ff fce7 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00e      	beq.n	8001ee2 <parse_object+0x86>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d208      	bcs.n	8001ee2 <parse_object+0x86>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ede:	f000 8098 	beq.w	8002012 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <parse_object+0x98>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d305      	bcc.n	8001f00 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	609a      	str	r2, [r3, #8]
        goto fail;
 8001efe:	e0ae      	b.n	800205e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8ee 	bl	80010f0 <cJSON_New_Item>
 8001f14:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8095 	beq.w	8002048 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	e007      	b.n	8001f3e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8083 	beq.w	800204c <parse_object+0x1f0>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d27b      	bcs.n	800204c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7ff fc94 	bl	800188c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	6938      	ldr	r0, [r7, #16]
 8001f68:	f7ff fb48 	bl	80015fc <parse_string>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06e      	beq.n	8002050 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f7ff fc8a 	bl	800188c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d063      	beq.n	8002054 <parse_object+0x1f8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d25d      	bcs.n	8002054 <parse_object+0x1f8>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001fa6:	d155      	bne.n	8002054 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f7ff fc6a 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	6938      	ldr	r0, [r7, #16]
 8001fbc:	f7ff fd9e 	bl	8001afc <parse_value>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d048      	beq.n	8002058 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f7ff fc60 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <parse_object+0x192>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d207      	bcs.n	8001fee <parse_object+0x192>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b2c      	cmp	r3, #44	@ 0x2c
 8001fec:	d08d      	beq.n	8001f0a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d033      	beq.n	800205c <parse_object+0x200>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d22d      	bcs.n	800205c <parse_object+0x200>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b7d      	cmp	r3, #125	@ 0x7d
 800200e:	d125      	bne.n	800205c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002010:	e000      	b.n	8002014 <parse_object+0x1b8>
        goto success; /* empty object */
 8002012:	bf00      	nop
    input_buffer->depth--;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <parse_object+0x1ce>
        head->prev = current_item;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	609a      	str	r2, [r3, #8]
    return true;
 8002040:	2301      	movs	r3, #1
 8002042:	e013      	b.n	800206c <parse_object+0x210>
        goto fail; /* not an object */
 8002044:	bf00      	nop
 8002046:	e00a      	b.n	800205e <parse_object+0x202>
            goto fail; /* allocation failure */
 8002048:	bf00      	nop
 800204a:	e008      	b.n	800205e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800204c:	bf00      	nop
 800204e:	e006      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002050:	bf00      	nop
 8002052:	e004      	b.n	800205e <parse_object+0x202>
            goto fail; /* invalid object */
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <parse_object+0x202>
        goto fail; /* expected end of object */
 800205c:	bf00      	nop

fail:
    if (head != NULL)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f7ff f859 	bl	800111c <cJSON_Delete>
    }

    return false;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <get_object_item+0x1c>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <get_object_item+0x20>
    {
        return NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	e033      	b.n	80020fc <get_object_item+0x88>
    }

    current_element = object->child;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a0:	e002      	b.n	80020a8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01c      	beq.n	80020e8 <get_object_item+0x74>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d018      	beq.n	80020e8 <get_object_item+0x74>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4619      	mov	r1, r3
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f7fe f8a7 	bl	8000210 <strcmp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ec      	bne.n	80020a2 <get_object_item+0x2e>
 80020c8:	e00e      	b.n	80020e8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <get_object_item+0x74>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4619      	mov	r1, r3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f7fe ff9b 	bl	8001018 <case_insensitive_strcmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <get_object_item+0x82>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <get_object_item+0x86>
        return NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <get_object_item+0x88>
    }

    return current_element;
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800210e:	2200      	movs	r2, #0
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffae 	bl	8002074 <get_object_item>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <cJSON_IsNumber+0x12>
    {
        return false;
 8002130:	2300      	movs	r3, #0
 8002132:	e007      	b.n	8002144 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b08      	cmp	r3, #8
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a07      	ldr	r2, [pc, #28]	@ (800217c <vApplicationGetIdleTaskMemory+0x2c>)
 8002160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4a06      	ldr	r2, [pc, #24]	@ (8002180 <vApplicationGetIdleTaskMemory+0x30>)
 8002166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000208 	.word	0x20000208
 8002180:	200002a8 	.word	0x200002a8

08002184 <process_command>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void process_command(char* cmd) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	@ 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	cJSON *json_data = cJSON_Parse(cmd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fca7 	bl	8001ae0 <cJSON_Parse>
 8002192:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (json_data != NULL) {
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8092 	beq.w	80022c0 <process_command+0x13c>
		// Extract data from the JSON object
		cJSON *rpm = cJSON_GetObjectItem(json_data, "rpm");
 800219c:	494f      	ldr	r1, [pc, #316]	@ (80022dc <process_command+0x158>)
 800219e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021a0:	f7ff ffb0 	bl	8002104 <cJSON_GetObjectItem>
 80021a4:	62b8      	str	r0, [r7, #40]	@ 0x28
		cJSON *gear = cJSON_GetObjectItem(json_data, "gear");
 80021a6:	494e      	ldr	r1, [pc, #312]	@ (80022e0 <process_command+0x15c>)
 80021a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021aa:	f7ff ffab 	bl	8002104 <cJSON_GetObjectItem>
 80021ae:	6278      	str	r0, [r7, #36]	@ 0x24
		cJSON *speedKmh = cJSON_GetObjectItem(json_data, "speedKmh");
 80021b0:	494c      	ldr	r1, [pc, #304]	@ (80022e4 <process_command+0x160>)
 80021b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021b4:	f7ff ffa6 	bl	8002104 <cJSON_GetObjectItem>
 80021b8:	6238      	str	r0, [r7, #32]
		cJSON *hasDRS = cJSON_GetObjectItem(json_data, "hasDRS");
 80021ba:	494b      	ldr	r1, [pc, #300]	@ (80022e8 <process_command+0x164>)
 80021bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021be:	f7ff ffa1 	bl	8002104 <cJSON_GetObjectItem>
 80021c2:	61f8      	str	r0, [r7, #28]
		cJSON *drs = cJSON_GetObjectItem(json_data, "drs");
 80021c4:	4949      	ldr	r1, [pc, #292]	@ (80022ec <process_command+0x168>)
 80021c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021c8:	f7ff ff9c 	bl	8002104 <cJSON_GetObjectItem>
 80021cc:	61b8      	str	r0, [r7, #24]
		cJSON *pitLim = cJSON_GetObjectItem(json_data, "pitLim");
 80021ce:	4948      	ldr	r1, [pc, #288]	@ (80022f0 <process_command+0x16c>)
 80021d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021d2:	f7ff ff97 	bl	8002104 <cJSON_GetObjectItem>
 80021d6:	6178      	str	r0, [r7, #20]
		cJSON *fuel = cJSON_GetObjectItem(json_data, "fuel");
 80021d8:	4946      	ldr	r1, [pc, #280]	@ (80022f4 <process_command+0x170>)
 80021da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021dc:	f7ff ff92 	bl	8002104 <cJSON_GetObjectItem>
 80021e0:	6138      	str	r0, [r7, #16]
		cJSON *brakeBias = cJSON_GetObjectItem(json_data, "brakeBias");
 80021e2:	4945      	ldr	r1, [pc, #276]	@ (80022f8 <process_command+0x174>)
 80021e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021e6:	f7ff ff8d 	bl	8002104 <cJSON_GetObjectItem>
 80021ea:	60f8      	str	r0, [r7, #12]
		cJSON *forceFB = cJSON_GetObjectItem(json_data, "forceFB");
 80021ec:	4943      	ldr	r1, [pc, #268]	@ (80022fc <process_command+0x178>)
 80021ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021f0:	f7ff ff88 	bl	8002104 <cJSON_GetObjectItem>
 80021f4:	60b8      	str	r0, [r7, #8]

		// Check if items were found and extract values
		if (cJSON_IsNumber(rpm)) { telemetry_data.tRpm = rpm->valueint; }
 80021f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021f8:	f7ff ff93 	bl	8002122 <cJSON_IsNumber>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <process_command+0x86>
 8002202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a3e      	ldr	r2, [pc, #248]	@ (8002300 <process_command+0x17c>)
 8002208:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(gear)) { telemetry_data.tGear = gear->valueint; }
 800220a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800220c:	f7ff ff89 	bl	8002122 <cJSON_IsNumber>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <process_command+0x9a>
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a39      	ldr	r2, [pc, #228]	@ (8002300 <process_command+0x17c>)
 800221c:	6053      	str	r3, [r2, #4]
		if (cJSON_IsNumber(speedKmh)) { telemetry_data.tSpeedKmh = speedKmh->valueint; }
 800221e:	6a38      	ldr	r0, [r7, #32]
 8002220:	f7ff ff7f 	bl	8002122 <cJSON_IsNumber>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <process_command+0xae>
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4a34      	ldr	r2, [pc, #208]	@ (8002300 <process_command+0x17c>)
 8002230:	6093      	str	r3, [r2, #8]
		if (cJSON_IsNumber(hasDRS)) { telemetry_data.tHasDRS = hasDRS->valueint; }
 8002232:	69f8      	ldr	r0, [r7, #28]
 8002234:	f7ff ff75 	bl	8002122 <cJSON_IsNumber>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <process_command+0xc2>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4a2f      	ldr	r2, [pc, #188]	@ (8002300 <process_command+0x17c>)
 8002244:	60d3      	str	r3, [r2, #12]
		if (cJSON_IsNumber(drs)) { telemetry_data.tDrs = drs->valueint; }
 8002246:	69b8      	ldr	r0, [r7, #24]
 8002248:	f7ff ff6b 	bl	8002122 <cJSON_IsNumber>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <process_command+0xd6>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a2a      	ldr	r2, [pc, #168]	@ (8002300 <process_command+0x17c>)
 8002258:	6113      	str	r3, [r2, #16]
		if (cJSON_IsNumber(pitLim)) { telemetry_data.tPitLim = pitLim->valueint; }
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff61 	bl	8002122 <cJSON_IsNumber>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <process_command+0xea>
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a25      	ldr	r2, [pc, #148]	@ (8002300 <process_command+0x17c>)
 800226c:	6153      	str	r3, [r2, #20]
		if (cJSON_IsNumber(fuel)) { telemetry_data.tFuel = fuel->valueint; }
 800226e:	6938      	ldr	r0, [r7, #16]
 8002270:	f7ff ff57 	bl	8002122 <cJSON_IsNumber>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <process_command+0xfe>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a20      	ldr	r2, [pc, #128]	@ (8002300 <process_command+0x17c>)
 8002280:	6193      	str	r3, [r2, #24]
		if (cJSON_IsNumber(brakeBias)) { telemetry_data.tBrakeBias = brakeBias->valueint; }
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f7ff ff4d 	bl	8002122 <cJSON_IsNumber>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <process_command+0x112>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4a1b      	ldr	r2, [pc, #108]	@ (8002300 <process_command+0x17c>)
 8002294:	61d3      	str	r3, [r2, #28]
		if (cJSON_IsNumber(forceFB)) { telemetry_data.tForceFB = (float)forceFB->valuedouble; }
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7ff ff43 	bl	8002122 <cJSON_IsNumber>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <process_command+0x13c>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fcb6 	bl	8000c1c <__aeabi_d2f>
 80022b0:	ee07 0a90 	vmov	s15, r0
 80022b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b8:	ee17 2a90 	vmov	r2, s15
 80022bc:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <process_command+0x17c>)
 80022be:	621a      	str	r2, [r3, #32]
		}
		// Cleanup
		cJSON_Delete(json_data);
 80022c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022c2:	f7fe ff2b 	bl	800111c <cJSON_Delete>
		// Clear the buffer for the next message
		memset(gCommandData, 0, BUFFER_SIZE);
 80022c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ca:	2100      	movs	r1, #0
 80022cc:	480d      	ldr	r0, [pc, #52]	@ (8002304 <process_command+0x180>)
 80022ce:	f008 f820 	bl	800a312 <memset>
}
 80022d2:	bf00      	nop
 80022d4:	3730      	adds	r7, #48	@ 0x30
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	0800c36c 	.word	0x0800c36c
 80022e0:	0800c370 	.word	0x0800c370
 80022e4:	0800c378 	.word	0x0800c378
 80022e8:	0800c384 	.word	0x0800c384
 80022ec:	0800c38c 	.word	0x0800c38c
 80022f0:	0800c390 	.word	0x0800c390
 80022f4:	0800c398 	.word	0x0800c398
 80022f8:	0800c3a0 	.word	0x0800c3a0
 80022fc:	0800c3ac 	.word	0x0800c3ac
 8002300:	200004a8 	.word	0x200004a8
 8002304:	200006e0 	.word	0x200006e0

08002308 <send_response>:

void send_response(const char* str) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <send_response+0x28>
        return; // Handle null pointer case if necessary
    }

    // Calculate the length of the string
    uint16_t len = strlen(str);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fd ff84 	bl	8000224 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	81fb      	strh	r3, [r7, #14]

    // Transmit the string using HAL_UART_Transmit
    HAL_UART_Transmit(&huart2, (uint8_t*)str, len, HAL_MAX_DELAY);
 8002320:	89fa      	ldrh	r2, [r7, #14]
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4803      	ldr	r0, [pc, #12]	@ (8002338 <send_response+0x30>)
 800232a:	f003 f981 	bl	8005630 <HAL_UART_Transmit>
 800232e:	e000      	b.n	8002332 <send_response+0x2a>
        return; // Handle null pointer case if necessary
 8002330:	bf00      	nop
}
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000584 	.word	0x20000584

0800233c <DWT_Init>:

// Initialize DWT for cycle counting
void DWT_Init(void) {
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <DWT_Init+0x38>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <DWT_Init+0x38>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <DWT_Init+0x38>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002356:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 8002358:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <DWT_Init+0x3c>)
 800235a:	2200      	movs	r2, #0
 800235c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <DWT_Init+0x3c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a05      	ldr	r2, [pc, #20]	@ (8002378 <DWT_Init+0x3c>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6013      	str	r3, [r2, #0]
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000edf0 	.word	0xe000edf0
 8002378:	e0001000 	.word	0xe0001000

0800237c <DWT_Delay_us>:

// Delay function using DWT for accurate timing in microseconds
void DWT_Delay_us(uint32_t us) {
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 8002384:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <DWT_Delay_us+0x40>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (SystemCoreClock / 1000000); // Convert microseconds to ticks
 800238a:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <DWT_Delay_us+0x44>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <DWT_Delay_us+0x48>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9a      	lsrs	r2, r3, #18
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - startTick) < delayTicks) {
 800239e:	bf00      	nop
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <DWT_Delay_us+0x40>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d8f8      	bhi.n	80023a0 <DWT_Delay_us+0x24>
        // Wait until the required delay has passed
    }
}
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e0001000 	.word	0xe0001000
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	431bde83 	.word	0x431bde83

080023c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b09e      	sub	sp, #120	@ 0x78
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ce:	f000 fea1 	bl	8003114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d2:	f000 f8a1 	bl	8002518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d6:	f000 f995 	bl	8002704 <MX_GPIO_Init>
  MX_DMA_Init();
 80023da:	f000 f973 	bl	80026c4 <MX_DMA_Init>
  MX_SPI2_Init();
 80023de:	f000 f909 	bl	80025f4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80023e2:	f000 f93d 	bl	8002660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  telemetry_data.tRpm = 0;
 80023e6:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <main+0x124>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
  telemetry_data.tRpm = 0;
 80023ec:	4b3f      	ldr	r3, [pc, #252]	@ (80024ec <main+0x124>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
  telemetry_data.tSpeedKmh = 0;
 80023f2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ec <main+0x124>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  telemetry_data.tHasDRS = 0;
 80023f8:	4b3c      	ldr	r3, [pc, #240]	@ (80024ec <main+0x124>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  telemetry_data.tDrs = 0;
 80023fe:	4b3b      	ldr	r3, [pc, #236]	@ (80024ec <main+0x124>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  telemetry_data.tPitLim = 0;
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <main+0x124>)
 8002406:	2200      	movs	r2, #0
 8002408:	615a      	str	r2, [r3, #20]
  telemetry_data.tFuel = 0;
 800240a:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <main+0x124>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  telemetry_data.tBrakeBias = 0;
 8002410:	4b36      	ldr	r3, [pc, #216]	@ (80024ec <main+0x124>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  telemetry_data.tForceFB = 0;
 8002416:	4b35      	ldr	r3, [pc, #212]	@ (80024ec <main+0x124>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 800241c:	2224      	movs	r2, #36	@ 0x24
 800241e:	2100      	movs	r1, #0
 8002420:	4832      	ldr	r0, [pc, #200]	@ (80024ec <main+0x124>)
 8002422:	f007 ff76 	bl	800a312 <memset>

  DWT_Init();
 8002426:	f7ff ff89 	bl	800233c <DWT_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 800242a:	2300      	movs	r3, #0
 800242c:	673b      	str	r3, [r7, #112]	@ 0x70
 800242e:	2300      	movs	r3, #0
 8002430:	677b      	str	r3, [r7, #116]	@ 0x74
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 8002432:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f004 f9d3 	bl	80067e4 <osSemaphoreCreate>
 800243e:	4603      	mov	r3, r0
 8002440:	4a2b      	ldr	r2, [pc, #172]	@ (80024f0 <main+0x128>)
 8002442:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <main+0x12c>)
 8002446:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800244a:	461d      	mov	r5, r3
 800244c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002458:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f004 f91f 	bl	80066a2 <osThreadCreate>
 8002464:	4603      	mov	r3, r0
 8002466:	4a24      	ldr	r2, [pc, #144]	@ (80024f8 <main+0x130>)
 8002468:	6013      	str	r3, [r2, #0]

  /* definition and creation of telemetryTask */
  osThreadDef(telemetryTask, StartTelemetryTask, osPriorityHigh, 0, 128);
 800246a:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <main+0x134>)
 800246c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002470:	461d      	mov	r5, r3
 8002472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002476:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800247a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemetryTaskHandle = osThreadCreate(osThread(telemetryTask), NULL);
 800247e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f004 f90c 	bl	80066a2 <osThreadCreate>
 800248a:	4603      	mov	r3, r0
 800248c:	4a1c      	ldr	r2, [pc, #112]	@ (8002500 <main+0x138>)
 800248e:	6013      	str	r3, [r2, #0]

  /* definition and creation of heartbeatTask */
  osThreadDef(heartbeatTask, StartHeartbeatTask, osPriorityLow, 0, 128);
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <main+0x13c>)
 8002492:	f107 041c 	add.w	r4, r7, #28
 8002496:	461d      	mov	r5, r3
 8002498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800249c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 f8f9 	bl	80066a2 <osThreadCreate>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a15      	ldr	r2, [pc, #84]	@ (8002508 <main+0x140>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SPISendDataTask */
  osThreadDef(SPISendDataTask, StartSPISend, osPriorityHigh, 0, 128);
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <main+0x144>)
 80024b8:	463c      	mov	r4, r7
 80024ba:	461d      	mov	r5, r3
 80024bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SPISendDataTaskHandle = osThreadCreate(osThread(SPISendDataTask), NULL);
 80024c8:	463b      	mov	r3, r7
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 f8e8 	bl	80066a2 <osThreadCreate>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002510 <main+0x148>)
 80024d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80024d8:	f004 f8dc 	bl	8006694 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 80024dc:	f005 fa60 	bl	80079a0 <vTaskStartScheduler>
  send_response("STM Started");
 80024e0:	480c      	ldr	r0, [pc, #48]	@ (8002514 <main+0x14c>)
 80024e2:	f7ff ff11 	bl	8002308 <send_response>

  while (1)
 80024e6:	bf00      	nop
 80024e8:	e7fd      	b.n	80024e6 <main+0x11e>
 80024ea:	bf00      	nop
 80024ec:	200004a8 	.word	0x200004a8
 80024f0:	200005dc 	.word	0x200005dc
 80024f4:	0800c3cc 	.word	0x0800c3cc
 80024f8:	200005cc 	.word	0x200005cc
 80024fc:	0800c3f8 	.word	0x0800c3f8
 8002500:	200005d0 	.word	0x200005d0
 8002504:	0800c424 	.word	0x0800c424
 8002508:	200005d4 	.word	0x200005d4
 800250c:	0800c450 	.word	0x0800c450
 8002510:	200005d8 	.word	0x200005d8
 8002514:	0800c3b4 	.word	0x0800c3b4

08002518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b094      	sub	sp, #80	@ 0x50
 800251c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	2234      	movs	r2, #52	@ 0x34
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f007 fef3 	bl	800a312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800252c:	f107 0308 	add.w	r3, r7, #8
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	4b2a      	ldr	r3, [pc, #168]	@ (80025ec <SystemClock_Config+0xd4>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	4a29      	ldr	r2, [pc, #164]	@ (80025ec <SystemClock_Config+0xd4>)
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254a:	6413      	str	r3, [r2, #64]	@ 0x40
 800254c:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <SystemClock_Config+0xd4>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002558:	2300      	movs	r3, #0
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <SystemClock_Config+0xd8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002564:	4a22      	ldr	r2, [pc, #136]	@ (80025f0 <SystemClock_Config+0xd8>)
 8002566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <SystemClock_Config+0xd8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002578:	2302      	movs	r3, #2
 800257a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800257c:	2301      	movs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002580:	2310      	movs	r3, #16
 8002582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002584:	2302      	movs	r3, #2
 8002586:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800258c:	2310      	movs	r3, #16
 800258e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002590:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002594:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002596:	2304      	movs	r3, #4
 8002598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800259a:	2302      	movs	r3, #2
 800259c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800259e:	2302      	movs	r3, #2
 80025a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 f804 	bl	80045b4 <HAL_RCC_OscConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80025b2:	f000 fa37 	bl	8002a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b6:	230f      	movs	r3, #15
 80025b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ba:	2302      	movs	r3, #2
 80025bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	2102      	movs	r1, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fc72 	bl	8003ebc <HAL_RCC_ClockConfig>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80025de:	f000 fa21 	bl	8002a24 <Error_Handler>
  }
}
 80025e2:	bf00      	nop
 80025e4:	3750      	adds	r7, #80	@ 0x50
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40007000 	.word	0x40007000

080025f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025f8:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <MX_SPI2_Init+0x64>)
 80025fa:	4a18      	ldr	r2, [pc, #96]	@ (800265c <MX_SPI2_Init+0x68>)
 80025fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025fe:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <MX_SPI2_Init+0x64>)
 8002600:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002604:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002606:	4b14      	ldr	r3, [pc, #80]	@ (8002658 <MX_SPI2_Init+0x64>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <MX_SPI2_Init+0x64>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <MX_SPI2_Init+0x64>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002618:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <MX_SPI2_Init+0x64>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <MX_SPI2_Init+0x64>)
 8002620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002624:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <MX_SPI2_Init+0x64>)
 8002628:	2228      	movs	r2, #40	@ 0x28
 800262a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800262c:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <MX_SPI2_Init+0x64>)
 800262e:	2200      	movs	r2, #0
 8002630:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <MX_SPI2_Init+0x64>)
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002638:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <MX_SPI2_Init+0x64>)
 800263a:	2200      	movs	r2, #0
 800263c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <MX_SPI2_Init+0x64>)
 8002640:	220a      	movs	r2, #10
 8002642:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002644:	4804      	ldr	r0, [pc, #16]	@ (8002658 <MX_SPI2_Init+0x64>)
 8002646:	f002 fa53 	bl	8004af0 <HAL_SPI_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002650:	f000 f9e8 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  //HAL_SPI_Transmit_DMA(&hspi2, buffer, sizeof(telemetry_packet));
  /* USER CODE END SPI2_Init 2 */

}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200004cc 	.word	0x200004cc
 800265c:	40003800 	.word	0x40003800

08002660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002664:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 8002666:	4a15      	ldr	r2, [pc, #84]	@ (80026bc <MX_USART2_UART_Init+0x5c>)
 8002668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800266a:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 800266c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800267e:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 8002686:	220c      	movs	r2, #12
 8002688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002696:	4808      	ldr	r0, [pc, #32]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 8002698:	f002 ff7a 	bl	8005590 <HAL_UART_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026a2:	f000 f9bf 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80026a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026aa:	4905      	ldr	r1, [pc, #20]	@ (80026c0 <MX_USART2_UART_Init+0x60>)
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <MX_USART2_UART_Init+0x58>)
 80026ae:	f003 f84a 	bl	8005746 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000584 	.word	0x20000584
 80026bc:	40004400 	.word	0x40004400
 80026c0:	200005e0 	.word	0x200005e0

080026c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <MX_DMA_Init+0x3c>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002700 <MX_DMA_Init+0x3c>)
 80026d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <MX_DMA_Init+0x3c>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2105      	movs	r1, #5
 80026ea:	200f      	movs	r0, #15
 80026ec:	f000 fe0c 	bl	8003308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026f0:	200f      	movs	r0, #15
 80026f2:	f000 fe25 	bl	8003340 <HAL_NVIC_EnableIRQ>

}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	@ 0x28
 8002708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	4b2d      	ldr	r3, [pc, #180]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a2c      	ldr	r2, [pc, #176]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b26      	ldr	r3, [pc, #152]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a25      	ldr	r2, [pc, #148]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a1e      	ldr	r2, [pc, #120]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a17      	ldr	r2, [pc, #92]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <MX_GPIO_Init+0xd0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	2130      	movs	r1, #48	@ 0x30
 800278e:	4812      	ldr	r0, [pc, #72]	@ (80027d8 <MX_GPIO_Init+0xd4>)
 8002790:	f001 fb7a 	bl	8003e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800279a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800279e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	480c      	ldr	r0, [pc, #48]	@ (80027dc <MX_GPIO_Init+0xd8>)
 80027ac:	f001 f9d8 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80027b0:	2330      	movs	r3, #48	@ 0x30
 80027b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b4:	2301      	movs	r3, #1
 80027b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4804      	ldr	r0, [pc, #16]	@ (80027d8 <MX_GPIO_Init+0xd4>)
 80027c8:	f001 f9ca 	bl	8003b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	@ 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020800 	.word	0x40020800

080027e0 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
    // Pull CS line high to deselect the slave
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80027e8:	2201      	movs	r2, #1
 80027ea:	2110      	movs	r1, #16
 80027ec:	4807      	ldr	r0, [pc, #28]	@ (800280c <HAL_SPI_TxCpltCallback+0x2c>)
 80027ee:	f001 fb4b 	bl	8003e88 <HAL_GPIO_WritePin>
    DWT_Delay_us(2);
 80027f2:	2002      	movs	r0, #2
 80027f4:	f7ff fdc2 	bl	800237c <DWT_Delay_us>
    osSemaphoreRelease(spiSendMutexHandle);
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_SPI_TxCpltCallback+0x30>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 f871 	bl	80068e4 <osSemaphoreRelease>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40020000 	.word	0x40020000
 8002810:	200005dc 	.word	0x200005dc

08002814 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0d      	ldr	r2, [pc, #52]	@ (8002858 <HAL_UART_RxCpltCallback+0x44>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d114      	bne.n	8002850 <HAL_UART_RxCpltCallback+0x3c>
        // Process the received data (rx_buffer)
        memcpy(gCommandData, rx_buffer, sizeof(rx_buffer));
 8002826:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <HAL_UART_RxCpltCallback+0x48>)
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_UART_RxCpltCallback+0x4c>)
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002832:	461a      	mov	r2, r3
 8002834:	f007 fe61 	bl	800a4fa <memcpy>
        // Notify the telemetry task to process the command
        osSignalSet(telemetryTaskHandle, 0x01);  // Set signal for telemetry task
 8002838:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <HAL_UART_RxCpltCallback+0x50>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f003 ff90 	bl	8006764 <osSignalSet>
        // Clear the buffer for the next message
        memset(rx_buffer, 0, BUFFER_SIZE);
 8002844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002848:	2100      	movs	r1, #0
 800284a:	4805      	ldr	r0, [pc, #20]	@ (8002860 <HAL_UART_RxCpltCallback+0x4c>)
 800284c:	f007 fd61 	bl	800a312 <memset>
    }
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40004400 	.word	0x40004400
 800285c:	200006e0 	.word	0x200006e0
 8002860:	200005e0 	.word	0x200005e0
 8002864:	200005d0 	.word	0x200005d0

08002868 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    uint32_t error_code = HAL_UART_GetError(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f003 fa35 	bl	8005ce0 <HAL_UART_GetError>
 8002876:	60f8      	str	r0, [r7, #12]

    // Identify which UART instance is causing the error (USART2 in this case)
    if (huart->Instance == USART2) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1a      	ldr	r2, [pc, #104]	@ (80028e8 <HAL_UART_ErrorCallback+0x80>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12d      	bne.n	80028de <HAL_UART_ErrorCallback+0x76>

        // Handle Overrun Error (ORE)
        if (error_code & HAL_UART_ERROR_ORE) {
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_UART_ErrorCallback+0x3a>
            __HAL_UART_CLEAR_OREFLAG(huart);  // Clear overrun error flag
 800288c:	2300      	movs	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
            // Optionally log or handle the error
            //send_response("UART Overrun Error");
        }

        // Handle Framing Error (FE)
        if (error_code & HAL_UART_ERROR_FE) {
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_UART_ErrorCallback+0x4a>
            // Clear framing error flag automatically by reading the status register
        	send_response("UART Framing Error");
 80028ac:	480f      	ldr	r0, [pc, #60]	@ (80028ec <HAL_UART_ErrorCallback+0x84>)
 80028ae:	f7ff fd2b 	bl	8002308 <send_response>
        }

        // Handle Parity Error (PE)
        if (error_code & HAL_UART_ERROR_PE) {
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_ErrorCallback+0x5a>
            // Parity errors may indicate data corruption or mismatch in settings
        	send_response("UART Parity Error");
 80028bc:	480c      	ldr	r0, [pc, #48]	@ (80028f0 <HAL_UART_ErrorCallback+0x88>)
 80028be:	f7ff fd23 	bl	8002308 <send_response>
        }

        // Handle Noise Error (NE)
        if (error_code & HAL_UART_ERROR_NE) {
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_UART_ErrorCallback+0x6a>
            // Noise errors are usually transient but worth logging
        	send_response("UART Noise Error");
 80028cc:	4809      	ldr	r0, [pc, #36]	@ (80028f4 <HAL_UART_ErrorCallback+0x8c>)
 80028ce:	f7ff fd1b 	bl	8002308 <send_response>
        }

        // Recovery: Restart UART reception after clearing the error flags
        HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 80028d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <HAL_UART_ErrorCallback+0x90>)
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f002 ff34 	bl	8005746 <HAL_UART_Receive_IT>
    }
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40004400 	.word	0x40004400
 80028ec:	0800c46c 	.word	0x0800c46c
 80028f0:	0800c480 	.word	0x0800c480
 80028f4:	0800c494 	.word	0x0800c494
 80028f8:	200005e0 	.word	0x200005e0

080028fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8002904:	2001      	movs	r0, #1
 8002906:	f003 ff18 	bl	800673a <osDelay>
 800290a:	e7fb      	b.n	8002904 <StartDefaultTask+0x8>

0800290c <StartTelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetryTask */
void StartTelemetryTask(void const * argument)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetryTask */
  /* Infinite loop */
  for(;;)
  {
	// Wait for notification from UART callback
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	2001      	movs	r0, #1
 800291a:	f005 fe21 	bl	8008560 <ulTaskNotifyTake>
	// Process the command received via UART
	process_command(gCommandData);
 800291e:	4808      	ldr	r0, [pc, #32]	@ (8002940 <StartTelemetryTask+0x34>)
 8002920:	f7ff fc30 	bl	8002184 <process_command>

	// Introduce a delay if necessary
	vTaskDelay(pdMS_TO_TICKS(100)); // Adjust delay as needed
 8002924:	2064      	movs	r0, #100	@ 0x64
 8002926:	f005 f805 	bl	8007934 <vTaskDelay>
	// Re-enable UART reception
	HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	4905      	ldr	r1, [pc, #20]	@ (8002944 <StartTelemetryTask+0x38>)
 8002930:	4805      	ldr	r0, [pc, #20]	@ (8002948 <StartTelemetryTask+0x3c>)
 8002932:	f002 ff08 	bl	8005746 <HAL_UART_Receive_IT>

	osDelay(1);
 8002936:	2001      	movs	r0, #1
 8002938:	f003 feff 	bl	800673a <osDelay>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800293c:	bf00      	nop
 800293e:	e7e9      	b.n	8002914 <StartTelemetryTask+0x8>
 8002940:	200006e0 	.word	0x200006e0
 8002944:	200005e0 	.word	0x200005e0
 8002948:	20000584 	.word	0x20000584

0800294c <StartHeartbeatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void const * argument)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
	// Perform actions based on telemetry data
	if (telemetry_data.tRpm >= 7000) {
 8002954:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <StartHeartbeatTask+0x34>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f641 3257 	movw	r2, #6999	@ 0x1b57
 800295c:	4293      	cmp	r3, r2
 800295e:	dd05      	ble.n	800296c <StartHeartbeatTask+0x20>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002960:	2201      	movs	r2, #1
 8002962:	2120      	movs	r1, #32
 8002964:	4807      	ldr	r0, [pc, #28]	@ (8002984 <StartHeartbeatTask+0x38>)
 8002966:	f001 fa8f 	bl	8003e88 <HAL_GPIO_WritePin>
 800296a:	e004      	b.n	8002976 <StartHeartbeatTask+0x2a>
	} else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800296c:	2200      	movs	r2, #0
 800296e:	2120      	movs	r1, #32
 8002970:	4804      	ldr	r0, [pc, #16]	@ (8002984 <StartHeartbeatTask+0x38>)
 8002972:	f001 fa89 	bl	8003e88 <HAL_GPIO_WritePin>
	}
    osDelay(1);
 8002976:	2001      	movs	r0, #1
 8002978:	f003 fedf 	bl	800673a <osDelay>
	if (telemetry_data.tRpm >= 7000) {
 800297c:	e7ea      	b.n	8002954 <StartHeartbeatTask+0x8>
 800297e:	bf00      	nop
 8002980:	200004a8 	.word	0x200004a8
 8002984:	40020000 	.word	0x40020000

08002988 <StartSPISend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPISend */
void StartSPISend(void const * argument)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b08c      	sub	sp, #48	@ 0x30
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSPISend */
  /* Infinite loop */

  while(1)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, osWaitForever) == osOK)
 8002990:	4b16      	ldr	r3, [pc, #88]	@ (80029ec <StartSPISend+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	4618      	mov	r0, r3
 800299a:	f003 ff55 	bl	8006848 <osSemaphoreWait>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11f      	bne.n	80029e4 <StartSPISend+0x5c>
	  {
		HAL_StatusTypeDef status;
		uint8_t buffer[sizeof(telemetry_packet)];
		//telemetry_packet dataToSend = {3600, 1, 120, 0, 0, 0, 45, 0, 1};
		memcpy(&buffer, (uint8_t*)&telemetry_data, sizeof(telemetry_packet));
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <StartSPISend+0x68>)
 80029a6:	f107 0408 	add.w	r4, r7, #8
 80029aa:	461d      	mov	r5, r3
 80029ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	6023      	str	r3, [r4, #0]
		// Chip Select pin low to start transmission

		// Transmit the data using DMA
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set NSS low
 80029b8:	2200      	movs	r2, #0
 80029ba:	2110      	movs	r1, #16
 80029bc:	480d      	ldr	r0, [pc, #52]	@ (80029f4 <StartSPISend+0x6c>)
 80029be:	f001 fa63 	bl	8003e88 <HAL_GPIO_WritePin>
		//status = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)&dataToSend, sizeof(telemetry_packet));

		status = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)&buffer, sizeof(telemetry_packet));
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	2224      	movs	r2, #36	@ 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	480b      	ldr	r0, [pc, #44]	@ (80029f8 <StartSPISend+0x70>)
 80029cc:	f002 f91a 	bl	8004c04 <HAL_SPI_Transmit_DMA>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		//uint8_t testData[4] = {0xAA, 0xBB, 0xCC, 0xDD}; // tRpm = 3600 in little-endian
		//HAL_SPI_Transmit_DMA(&hspi2, &testData, sizeof(testData));

		// Check for errors
		if (status != HAL_OK) {
 80029d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <StartSPISend+0x5c>
			send_response("SPI Transmission Error");
 80029de:	4807      	ldr	r0, [pc, #28]	@ (80029fc <StartSPISend+0x74>)
 80029e0:	f7ff fc92 	bl	8002308 <send_response>
		}
		// Wait for transmission to complete (optional but safer)
	  }
	 osDelay(10);
 80029e4:	200a      	movs	r0, #10
 80029e6:	f003 fea8 	bl	800673a <osDelay>
	  if (osSemaphoreWait(spiSendMutexHandle, osWaitForever) == osOK)
 80029ea:	e7d1      	b.n	8002990 <StartSPISend+0x8>
 80029ec:	200005dc 	.word	0x200005dc
 80029f0:	200004a8 	.word	0x200004a8
 80029f4:	40020000 	.word	0x40020000
 80029f8:	200004cc 	.word	0x200004cc
 80029fc:	0800c4a8 	.word	0x0800c4a8

08002a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a12:	f000 fba1 	bl	8003158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40001000 	.word	0x40001000

08002a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
}
 8002a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <Error_Handler+0x8>

08002a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	4a11      	ldr	r2, [pc, #68]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a46:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	210f      	movs	r1, #15
 8002a72:	f06f 0001 	mvn.w	r0, #1
 8002a76:	f000 fc47 	bl	8003308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	@ 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a48      	ldr	r2, [pc, #288]	@ (8002bc8 <HAL_SPI_MspInit+0x140>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	f040 8089 	bne.w	8002bbe <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	4b46      	ldr	r3, [pc, #280]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	4a45      	ldr	r2, [pc, #276]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002ab6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aba:	6413      	str	r3, [r2, #64]	@ 0x40
 8002abc:	4b43      	ldr	r3, [pc, #268]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	4b3f      	ldr	r3, [pc, #252]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	4a3e      	ldr	r2, [pc, #248]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	4a37      	ldr	r2, [pc, #220]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af4:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <HAL_SPI_MspInit+0x144>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b00:	2302      	movs	r3, #2
 8002b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002b10:	2307      	movs	r3, #7
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4619      	mov	r1, r3
 8002b1a:	482d      	ldr	r0, [pc, #180]	@ (8002bd0 <HAL_SPI_MspInit+0x148>)
 8002b1c:	f001 f820 	bl	8003b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b20:	2304      	movs	r3, #4
 8002b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b30:	2305      	movs	r3, #5
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4825      	ldr	r0, [pc, #148]	@ (8002bd0 <HAL_SPI_MspInit+0x148>)
 8002b3c:	f001 f810 	bl	8003b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b52:	2305      	movs	r3, #5
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	481d      	ldr	r0, [pc, #116]	@ (8002bd4 <HAL_SPI_MspInit+0x14c>)
 8002b5e:	f000 ffff 	bl	8003b60 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b64:	4a1d      	ldr	r2, [pc, #116]	@ (8002bdc <HAL_SPI_MspInit+0x154>)
 8002b66:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002b68:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b70:	2240      	movs	r2, #64	@ 0x40
 8002b72:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b88:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b94:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b9a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002ba2:	480d      	ldr	r0, [pc, #52]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002ba4:	f000 fbda 	bl	800335c <HAL_DMA_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8002bae:	f7ff ff39 	bl	8002a24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a08      	ldr	r2, [pc, #32]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002bb6:	649a      	str	r2, [r3, #72]	@ 0x48
 8002bb8:	4a07      	ldr	r2, [pc, #28]	@ (8002bd8 <HAL_SPI_MspInit+0x150>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	@ 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40003800 	.word	0x40003800
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	20000524 	.word	0x20000524
 8002bdc:	40026070 	.word	0x40026070

08002be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	@ 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_UART_MspInit+0x94>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d133      	bne.n	8002c6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <HAL_UART_MspInit+0x98>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c78 <HAL_UART_MspInit+0x98>)
 8002c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_UART_MspInit+0x98>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <HAL_UART_MspInit+0x98>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	4a14      	ldr	r2, [pc, #80]	@ (8002c78 <HAL_UART_MspInit+0x98>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2e:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_UART_MspInit+0x98>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	4809      	ldr	r0, [pc, #36]	@ (8002c7c <HAL_UART_MspInit+0x9c>)
 8002c56:	f000 ff83 	bl	8003b60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2106      	movs	r1, #6
 8002c5e:	2026      	movs	r0, #38	@ 0x26
 8002c60:	f000 fb52 	bl	8003308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c64:	2026      	movs	r0, #38	@ 0x26
 8002c66:	f000 fb6b 	bl	8003340 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	@ 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40004400 	.word	0x40004400
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020000 	.word	0x40020000

08002c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	@ 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <HAL_InitTick+0xe4>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	4a32      	ldr	r2, [pc, #200]	@ (8002d64 <HAL_InitTick+0xe4>)
 8002c9a:	f043 0310 	orr.w	r3, r3, #16
 8002c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca0:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <HAL_InitTick+0xe4>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cac:	f107 0210 	add.w	r2, r7, #16
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fa1a 	bl	80040f0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cc6:	f001 f9eb 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8002cca:	6378      	str	r0, [r7, #52]	@ 0x34
 8002ccc:	e004      	b.n	8002cd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cce:	f001 f9e7 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cda:	4a23      	ldr	r2, [pc, #140]	@ (8002d68 <HAL_InitTick+0xe8>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	0c9b      	lsrs	r3, r3, #18
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ce6:	4b21      	ldr	r3, [pc, #132]	@ (8002d6c <HAL_InitTick+0xec>)
 8002ce8:	4a21      	ldr	r2, [pc, #132]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002cea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002cec:	4b1f      	ldr	r3, [pc, #124]	@ (8002d6c <HAL_InitTick+0xec>)
 8002cee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <HAL_InitTick+0xec>)
 8002cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002d6c <HAL_InitTick+0xec>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d00:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <HAL_InitTick+0xec>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d06:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <HAL_InitTick+0xec>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002d0c:	4817      	ldr	r0, [pc, #92]	@ (8002d6c <HAL_InitTick+0xec>)
 8002d0e:	f002 f99d 	bl	800504c <HAL_TIM_Base_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002d18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11b      	bne.n	8002d58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002d20:	4812      	ldr	r0, [pc, #72]	@ (8002d6c <HAL_InitTick+0xec>)
 8002d22:	f002 f9ed 	bl	8005100 <HAL_TIM_Base_Start_IT>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d111      	bne.n	8002d58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d34:	2036      	movs	r0, #54	@ 0x36
 8002d36:	f000 fb03 	bl	8003340 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d808      	bhi.n	8002d52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d40:	2200      	movs	r2, #0
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	2036      	movs	r0, #54	@ 0x36
 8002d46:	f000 fadf 	bl	8003308 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <HAL_InitTick+0xf4>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e002      	b.n	8002d58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3738      	adds	r7, #56	@ 0x38
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	200007e0 	.word	0x200007e0
 8002d70:	40001000 	.word	0x40001000
 8002d74:	20000010 	.word	0x20000010

08002d78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002d7c:	f3bf 8f4f 	dsb	sy
}
 8002d80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <__NVIC_SystemReset+0x24>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d8a:	4904      	ldr	r1, [pc, #16]	@ (8002d9c <__NVIC_SystemReset+0x24>)
 8002d8c:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <__NVIC_SystemReset+0x28>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d92:	f3bf 8f4f 	dsb	sy
}
 8002d96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <__NVIC_SystemReset+0x20>
 8002d9c:	e000ed00 	.word	0xe000ed00
 8002da0:	05fa0004 	.word	0x05fa0004

08002da4 <log_message>:
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim6;

/* USER CODE BEGIN EV */
/* USER CODE BEGIN 0 */
void log_message(const char *message) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
    // Send the log message over UART
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fd fa39 	bl	8000224 <strlen>
 8002db2:	4603      	mov	r3, r0
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4803      	ldr	r0, [pc, #12]	@ (8002dcc <log_message+0x28>)
 8002dbe:	f002 fc37 	bl	8005630 <HAL_UART_Transmit>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000584 	.word	0x20000584

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <NMI_Handler+0x4>

08002dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b0d6      	sub	sp, #344	@ 0x158
 8002ddc:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 8002dde:	f01e 0f04 	tst.w	lr, #4
 8002de2:	bf0c      	ite	eq
 8002de4:	f3ef 8308 	mrseq	r3, MSP
 8002de8:	f3ef 8309 	mrsne	r3, PSP
 8002dec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 8002df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 8002dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8002e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 8002e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 8002e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 8002e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 8002e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 8002e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 8002e40:	4b18      	ldr	r3, [pc, #96]	@ (8002ea4 <HardFault_Handler+0xcc>)
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 8002e48:	4b16      	ldr	r3, [pc, #88]	@ (8002ea4 <HardFault_Handler+0xcc>)
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 8002e50:	1d38      	adds	r0, r7, #4
 8002e52:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e56:	9308      	str	r3, [sp, #32]
 8002e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e5c:	9307      	str	r3, [sp, #28]
 8002e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e62:	9306      	str	r3, [sp, #24]
 8002e64:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e68:	9305      	str	r3, [sp, #20]
 8002e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6e:	9304      	str	r3, [sp, #16]
 8002e70:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002e74:	9303      	str	r3, [sp, #12]
 8002e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e7a:	9302      	str	r3, [sp, #8]
 8002e7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ea8 <HardFault_Handler+0xd0>)
 8002e8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e92:	f007 f9c7 	bl	800a224 <sniprintf>
		"CFSR: %08X HFSR: %08X\n",
		r0, r1, r2, r3, r12, lr, pc, psr, cfsr, hfsr
	);

	// Log the message
	log_message(log_buffer);
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff83 	bl	8002da4 <log_message>

	NVIC_SystemReset();
 8002e9e:	f7ff ff6b 	bl	8002d78 <__NVIC_SystemReset>
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00
 8002ea8:	0800c4c0 	.word	0x0800c4c0

08002eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <MemManage_Handler+0x4>

08002eb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <BusFault_Handler+0x4>

08002ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <UsageFault_Handler+0x4>

08002ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <DMA1_Stream4_IRQHandler+0x10>)
 8002eda:	f000 fbd7 	bl	800368c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000524 	.word	0x20000524

08002ee8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002eec:	4802      	ldr	r0, [pc, #8]	@ (8002ef8 <USART2_IRQHandler+0x10>)
 8002eee:	f002 fc4f 	bl	8005790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000584 	.word	0x20000584

08002efc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <TIM6_DAC_IRQHandler+0x10>)
 8002f02:	f002 f96d 	bl	80051e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200007e0 	.word	0x200007e0

08002f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return 1;
 8002f14:	2301      	movs	r3, #1
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <_kill>:

int _kill(int pid, int sig)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f2a:	f007 fab9 	bl	800a4a0 <__errno>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2216      	movs	r2, #22
 8002f32:	601a      	str	r2, [r3, #0]
  return -1;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_exit>:

void _exit (int status)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ffe7 	bl	8002f20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f52:	bf00      	nop
 8002f54:	e7fd      	b.n	8002f52 <_exit+0x12>

08002f56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e00a      	b.n	8002f7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f68:	f3af 8000 	nop.w
 8002f6c:	4601      	mov	r1, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	60ba      	str	r2, [r7, #8]
 8002f74:	b2ca      	uxtb	r2, r1
 8002f76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	dbf0      	blt.n	8002f68 <_read+0x12>
  }

  return len;
 8002f86:	687b      	ldr	r3, [r7, #4]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e009      	b.n	8002fb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	60ba      	str	r2, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	dbf1      	blt.n	8002fa2 <_write+0x12>
  }
  return len;
 8002fbe:	687b      	ldr	r3, [r7, #4]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_close>:

int _close(int file)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ff0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <_isatty>:

int _isatty(int file)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003038:	4a14      	ldr	r2, [pc, #80]	@ (800308c <_sbrk+0x5c>)
 800303a:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <_sbrk+0x60>)
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <_sbrk+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <_sbrk+0x64>)
 800304e:	4a12      	ldr	r2, [pc, #72]	@ (8003098 <_sbrk+0x68>)
 8003050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <_sbrk+0x64>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d207      	bcs.n	8003070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003060:	f007 fa1e 	bl	800a4a0 <__errno>
 8003064:	4603      	mov	r3, r0
 8003066:	220c      	movs	r2, #12
 8003068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	e009      	b.n	8003084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003070:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <_sbrk+0x64>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003076:	4b07      	ldr	r3, [pc, #28]	@ (8003094 <_sbrk+0x64>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	4a05      	ldr	r2, [pc, #20]	@ (8003094 <_sbrk+0x64>)
 8003080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20020000 	.word	0x20020000
 8003090:	00000400 	.word	0x00000400
 8003094:	20000828 	.word	0x20000828
 8003098:	200046d0 	.word	0x200046d0

0800309c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <SystemInit+0x20>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	4a05      	ldr	r2, [pc, #20]	@ (80030bc <SystemInit+0x20>)
 80030a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030c4:	f7ff ffea 	bl	800309c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030c8:	480c      	ldr	r0, [pc, #48]	@ (80030fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030ca:	490d      	ldr	r1, [pc, #52]	@ (8003100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d0:	e002      	b.n	80030d8 <LoopCopyDataInit>

080030d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d6:	3304      	adds	r3, #4

080030d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030dc:	d3f9      	bcc.n	80030d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030de:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030e0:	4c0a      	ldr	r4, [pc, #40]	@ (800310c <LoopFillZerobss+0x22>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e4:	e001      	b.n	80030ea <LoopFillZerobss>

080030e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e8:	3204      	adds	r2, #4

080030ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ec:	d3fb      	bcc.n	80030e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80030ee:	f007 f9dd 	bl	800a4ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f2:	f7ff f969 	bl	80023c8 <main>
  bx  lr    
 80030f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003100:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003104:	0800c920 	.word	0x0800c920
  ldr r2, =_sbss
 8003108:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800310c:	200046d0 	.word	0x200046d0

08003110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC_IRQHandler>
	...

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003118:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	@ (8003154 <HAL_Init+0x40>)
 800311e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003124:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	@ (8003154 <HAL_Init+0x40>)
 800312a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800312e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003130:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a07      	ldr	r2, [pc, #28]	@ (8003154 <HAL_Init+0x40>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800313a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800313c:	2003      	movs	r0, #3
 800313e:	f000 f8d8 	bl	80032f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003142:	200f      	movs	r0, #15
 8003144:	f7ff fd9c 	bl	8002c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003148:	f7ff fc72 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00

08003158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800315c:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <HAL_IncTick+0x20>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_IncTick+0x24>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4413      	add	r3, r2
 8003168:	4a04      	ldr	r2, [pc, #16]	@ (800317c <HAL_IncTick+0x24>)
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000014 	.word	0x20000014
 800317c:	2000082c 	.word	0x2000082c

08003180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return uwTick;
 8003184:	4b03      	ldr	r3, [pc, #12]	@ (8003194 <HAL_GetTick+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	2000082c 	.word	0x2000082c

08003198 <__NVIC_SetPriorityGrouping>:
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a8:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ca:	4a04      	ldr	r2, [pc, #16]	@ (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_GetPriorityGrouping>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e4:	4b04      	ldr	r3, [pc, #16]	@ (80031f8 <__NVIC_GetPriorityGrouping+0x18>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	f003 0307 	and.w	r3, r3, #7
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_EnableIRQ>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db0b      	blt.n	8003226 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	4907      	ldr	r1, [pc, #28]	@ (8003234 <__NVIC_EnableIRQ+0x38>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_SetPriority>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	@ (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	@ (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	@ 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf28      	it	cs
 80032aa:	2304      	movcs	r3, #4
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b03      	subs	r3, #3
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	401a      	ands	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43d9      	mvns	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	4313      	orrs	r3, r2
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	@ 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ff4c 	bl	8003198 <__NVIC_SetPriorityGrouping>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800331a:	f7ff ff61 	bl	80031e0 <__NVIC_GetPriorityGrouping>
 800331e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	6978      	ldr	r0, [r7, #20]
 8003326:	f7ff ffb1 	bl	800328c <NVIC_EncodePriority>
 800332a:	4602      	mov	r2, r0
 800332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff80 	bl	8003238 <__NVIC_SetPriority>
}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ff54 	bl	80031fc <__NVIC_EnableIRQ>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff ff0a 	bl	8003180 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e099      	b.n	80034ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003398:	e00f      	b.n	80033ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800339a:	f7ff fef1 	bl	8003180 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d908      	bls.n	80033ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2203      	movs	r2, #3
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e078      	b.n	80034ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e8      	bne.n	800339a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4b38      	ldr	r3, [pc, #224]	@ (80034b4 <HAL_DMA_Init+0x158>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	2b04      	cmp	r3, #4
 8003412:	d107      	bne.n	8003424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341c:	4313      	orrs	r3, r2
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0307 	bic.w	r3, r3, #7
 800343a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	2b04      	cmp	r3, #4
 800344c:	d117      	bne.n	800347e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fb01 	bl	8003a68 <DMA_CheckFifoParam>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2240      	movs	r2, #64	@ 0x40
 8003470:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800347a:	2301      	movs	r3, #1
 800347c:	e016      	b.n	80034ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fab8 	bl	80039fc <DMA_CalcBaseAndBitshift>
 800348c:	4603      	mov	r3, r0
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003494:	223f      	movs	r2, #63	@ 0x3f
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	f010803f 	.word	0xf010803f

080034b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_DMA_Start_IT+0x26>
 80034da:	2302      	movs	r3, #2
 80034dc:	e040      	b.n	8003560 <HAL_DMA_Start_IT+0xa8>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d12f      	bne.n	8003552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fa4a 	bl	80039a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	223f      	movs	r2, #63	@ 0x3f
 8003512:	409a      	lsls	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0216 	orr.w	r2, r2, #22
 8003526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0208 	orr.w	r2, r2, #8
 800353e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e005      	b.n	800355e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800355e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003576:	f7ff fe03 	bl	8003180 <HAL_GetTick>
 800357a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d008      	beq.n	800359a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2280      	movs	r2, #128	@ 0x80
 800358c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e052      	b.n	8003640 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0216 	bic.w	r2, r2, #22
 80035a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <HAL_DMA_Abort+0x62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0208 	bic.w	r2, r2, #8
 80035d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ea:	e013      	b.n	8003614 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ec:	f7ff fdc8 	bl	8003180 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d90c      	bls.n	8003614 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2203      	movs	r2, #3
 8003604:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e015      	b.n	8003640 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e4      	bne.n	80035ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	223f      	movs	r2, #63	@ 0x3f
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d004      	beq.n	8003666 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2280      	movs	r2, #128	@ 0x80
 8003660:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e00c      	b.n	8003680 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2205      	movs	r2, #5
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003698:	4b8e      	ldr	r3, [pc, #568]	@ (80038d4 <HAL_DMA_IRQHandler+0x248>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a8e      	ldr	r2, [pc, #568]	@ (80038d8 <HAL_DMA_IRQHandler+0x24c>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0a9b      	lsrs	r3, r3, #10
 80036a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2208      	movs	r2, #8
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01a      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0204 	bic.w	r2, r2, #4
 80036de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	2208      	movs	r2, #8
 80036e6:	409a      	lsls	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d012      	beq.n	800372e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371a:	2201      	movs	r2, #1
 800371c:	409a      	lsls	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003732:	2204      	movs	r2, #4
 8003734:	409a      	lsls	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d012      	beq.n	8003764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	2204      	movs	r2, #4
 8003752:	409a      	lsls	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003768:	2210      	movs	r2, #16
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d043      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d03c      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003786:	2210      	movs	r2, #16
 8003788:	409a      	lsls	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d018      	beq.n	80037ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d108      	bne.n	80037bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d024      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
 80037ba:	e01f      	b.n	80037fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
 80037cc:	e016      	b.n	80037fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d107      	bne.n	80037ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0208 	bic.w	r2, r2, #8
 80037ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	2220      	movs	r2, #32
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 808f 	beq.w	800392c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8087 	beq.w	800392c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	2220      	movs	r2, #32
 8003824:	409a      	lsls	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b05      	cmp	r3, #5
 8003834:	d136      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0216 	bic.w	r2, r2, #22
 8003844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_DMA_IRQHandler+0x1da>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0208 	bic.w	r2, r2, #8
 8003874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387a:	223f      	movs	r2, #63	@ 0x3f
 800387c:	409a      	lsls	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003896:	2b00      	cmp	r3, #0
 8003898:	d07e      	beq.n	8003998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
        }
        return;
 80038a2:	e079      	b.n	8003998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01d      	beq.n	80038ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d031      	beq.n	800392c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
 80038d0:	e02c      	b.n	800392c <HAL_DMA_IRQHandler+0x2a0>
 80038d2:	bf00      	nop
 80038d4:	2000000c 	.word	0x2000000c
 80038d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d023      	beq.n	800392c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
 80038ec:	e01e      	b.n	800392c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10f      	bne.n	800391c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0210 	bic.w	r2, r2, #16
 800390a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003930:	2b00      	cmp	r3, #0
 8003932:	d032      	beq.n	800399a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d022      	beq.n	8003986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2205      	movs	r2, #5
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	3301      	adds	r3, #1
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	429a      	cmp	r2, r3
 8003962:	d307      	bcc.n	8003974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f2      	bne.n	8003958 <HAL_DMA_IRQHandler+0x2cc>
 8003972:	e000      	b.n	8003976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
 8003996:	e000      	b.n	800399a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003998:	bf00      	nop
    }
  }
}
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b40      	cmp	r3, #64	@ 0x40
 80039cc:	d108      	bne.n	80039e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039de:	e007      	b.n	80039f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	3b10      	subs	r3, #16
 8003a0c:	4a14      	ldr	r2, [pc, #80]	@ (8003a60 <DMA_CalcBaseAndBitshift+0x64>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a16:	4a13      	ldr	r2, [pc, #76]	@ (8003a64 <DMA_CalcBaseAndBitshift+0x68>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d909      	bls.n	8003a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	1d1a      	adds	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a3c:	e007      	b.n	8003a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	aaaaaaab 	.word	0xaaaaaaab
 8003a64:	0800c54c 	.word	0x0800c54c

08003a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11f      	bne.n	8003ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d856      	bhi.n	8003b36 <DMA_CheckFifoParam+0xce>
 8003a88:	a201      	add	r2, pc, #4	@ (adr r2, 8003a90 <DMA_CheckFifoParam+0x28>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003ab3 	.word	0x08003ab3
 8003a98:	08003aa1 	.word	0x08003aa1
 8003a9c:	08003b37 	.word	0x08003b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d046      	beq.n	8003b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab0:	e043      	b.n	8003b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aba:	d140      	bne.n	8003b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac0:	e03d      	b.n	8003b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aca:	d121      	bne.n	8003b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d837      	bhi.n	8003b42 <DMA_CheckFifoParam+0xda>
 8003ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <DMA_CheckFifoParam+0x70>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003aef 	.word	0x08003aef
 8003ae0:	08003ae9 	.word	0x08003ae9
 8003ae4:	08003b01 	.word	0x08003b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e030      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d025      	beq.n	8003b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afe:	e022      	b.n	8003b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b08:	d11f      	bne.n	8003b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b0e:	e01c      	b.n	8003b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d903      	bls.n	8003b1e <DMA_CheckFifoParam+0xb6>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d003      	beq.n	8003b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b1c:	e018      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
      break;
 8003b22:	e015      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00e      	beq.n	8003b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e00b      	b.n	8003b4e <DMA_CheckFifoParam+0xe6>
      break;
 8003b36:	bf00      	nop
 8003b38:	e00a      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e008      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e006      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b42:	bf00      	nop
 8003b44:	e004      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b46:	bf00      	nop
 8003b48:	e002      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop

08003b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	@ 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	e165      	b.n	8003e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	f040 8154 	bne.w	8003e42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d005      	beq.n	8003bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d130      	bne.n	8003c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 0201 	and.w	r2, r3, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d017      	beq.n	8003c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d123      	bne.n	8003ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	08da      	lsrs	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3208      	adds	r2, #8
 8003c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	220f      	movs	r2, #15
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3208      	adds	r2, #8
 8003c9e:	69b9      	ldr	r1, [r7, #24]
 8003ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	2203      	movs	r2, #3
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0203 	and.w	r2, r3, #3
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80ae 	beq.w	8003e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b5d      	ldr	r3, [pc, #372]	@ (8003e60 <HAL_GPIO_Init+0x300>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	4a5c      	ldr	r2, [pc, #368]	@ (8003e60 <HAL_GPIO_Init+0x300>)
 8003cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e60 <HAL_GPIO_Init+0x300>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d02:	4a58      	ldr	r2, [pc, #352]	@ (8003e64 <HAL_GPIO_Init+0x304>)
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	3302      	adds	r3, #2
 8003d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	220f      	movs	r2, #15
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4f      	ldr	r2, [pc, #316]	@ (8003e68 <HAL_GPIO_Init+0x308>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d025      	beq.n	8003d7a <HAL_GPIO_Init+0x21a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4e      	ldr	r2, [pc, #312]	@ (8003e6c <HAL_GPIO_Init+0x30c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01f      	beq.n	8003d76 <HAL_GPIO_Init+0x216>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4d      	ldr	r2, [pc, #308]	@ (8003e70 <HAL_GPIO_Init+0x310>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d019      	beq.n	8003d72 <HAL_GPIO_Init+0x212>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4c      	ldr	r2, [pc, #304]	@ (8003e74 <HAL_GPIO_Init+0x314>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_GPIO_Init+0x20e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	@ (8003e78 <HAL_GPIO_Init+0x318>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00d      	beq.n	8003d6a <HAL_GPIO_Init+0x20a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4a      	ldr	r2, [pc, #296]	@ (8003e7c <HAL_GPIO_Init+0x31c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <HAL_GPIO_Init+0x206>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a49      	ldr	r2, [pc, #292]	@ (8003e80 <HAL_GPIO_Init+0x320>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <HAL_GPIO_Init+0x202>
 8003d5e:	2306      	movs	r3, #6
 8003d60:	e00c      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d62:	2307      	movs	r3, #7
 8003d64:	e00a      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d66:	2305      	movs	r3, #5
 8003d68:	e008      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	e006      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e004      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e002      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_GPIO_Init+0x21c>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	f002 0203 	and.w	r2, r2, #3
 8003d82:	0092      	lsls	r2, r2, #2
 8003d84:	4093      	lsls	r3, r2
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d8c:	4935      	ldr	r1, [pc, #212]	@ (8003e64 <HAL_GPIO_Init+0x304>)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	3302      	adds	r3, #2
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e84 <HAL_GPIO_Init+0x324>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dbe:	4a31      	ldr	r2, [pc, #196]	@ (8003e84 <HAL_GPIO_Init+0x324>)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8003e84 <HAL_GPIO_Init+0x324>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003de8:	4a26      	ldr	r2, [pc, #152]	@ (8003e84 <HAL_GPIO_Init+0x324>)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dee:	4b25      	ldr	r3, [pc, #148]	@ (8003e84 <HAL_GPIO_Init+0x324>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e12:	4a1c      	ldr	r2, [pc, #112]	@ (8003e84 <HAL_GPIO_Init+0x324>)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e18:	4b1a      	ldr	r3, [pc, #104]	@ (8003e84 <HAL_GPIO_Init+0x324>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e3c:	4a11      	ldr	r2, [pc, #68]	@ (8003e84 <HAL_GPIO_Init+0x324>)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3301      	adds	r3, #1
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	f67f ae96 	bls.w	8003b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	3724      	adds	r7, #36	@ 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40013800 	.word	0x40013800
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	40020400 	.word	0x40020400
 8003e70:	40020800 	.word	0x40020800
 8003e74:	40020c00 	.word	0x40020c00
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40021400 	.word	0x40021400
 8003e80:	40021800 	.word	0x40021800
 8003e84:	40013c00 	.word	0x40013c00

08003e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	807b      	strh	r3, [r7, #2]
 8003e94:	4613      	mov	r3, r2
 8003e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e98:	787b      	ldrb	r3, [r7, #1]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea4:	e003      	b.n	8003eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	041a      	lsls	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	619a      	str	r2, [r3, #24]
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cc      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b68      	ldr	r3, [pc, #416]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d90c      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b65      	ldr	r3, [pc, #404]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d044      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d119      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e067      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b37      	ldr	r3, [pc, #220]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4934      	ldr	r1, [pc, #208]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7ff f8e8 	bl	8003180 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7ff f8e4 	bl	8003180 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e04f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2b      	ldr	r3, [pc, #172]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d20c      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b22      	ldr	r3, [pc, #136]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402e:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f887 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fe0c 	bl	8002c80 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	0800c534 	.word	0x0800c534
 8004080:	2000000c 	.word	0x2000000c
 8004084:	20000010 	.word	0x20000010

08004088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800408c:	4b03      	ldr	r3, [pc, #12]	@ (800409c <HAL_RCC_GetHCLKFreq+0x14>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040a4:	f7ff fff0 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	0a9b      	lsrs	r3, r3, #10
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4903      	ldr	r1, [pc, #12]	@ (80040c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40023800 	.word	0x40023800
 80040c4:	0800c544 	.word	0x0800c544

080040c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040cc:	f7ff ffdc 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0b5b      	lsrs	r3, r3, #13
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4903      	ldr	r1, [pc, #12]	@ (80040ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	0800c544 	.word	0x0800c544

080040f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	220f      	movs	r2, #15
 80040fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004100:	4b12      	ldr	r3, [pc, #72]	@ (800414c <HAL_RCC_GetClockConfig+0x5c>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0203 	and.w	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800410c:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <HAL_RCC_GetClockConfig+0x5c>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004118:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <HAL_RCC_GetClockConfig+0x5c>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004124:	4b09      	ldr	r3, [pc, #36]	@ (800414c <HAL_RCC_GetClockConfig+0x5c>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	08db      	lsrs	r3, r3, #3
 800412a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004132:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <HAL_RCC_GetClockConfig+0x60>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 020f 	and.w	r2, r3, #15
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	40023c00 	.word	0x40023c00

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b0ae      	sub	sp, #184	@ 0xb8
 800415a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800417a:	4bcb      	ldr	r3, [pc, #812]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b0c      	cmp	r3, #12
 8004184:	f200 8206 	bhi.w	8004594 <HAL_RCC_GetSysClockFreq+0x440>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <HAL_RCC_GetSysClockFreq+0x3c>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041c5 	.word	0x080041c5
 8004194:	08004595 	.word	0x08004595
 8004198:	08004595 	.word	0x08004595
 800419c:	08004595 	.word	0x08004595
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	08004595 	.word	0x08004595
 80041a8:	08004595 	.word	0x08004595
 80041ac:	08004595 	.word	0x08004595
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	08004595 	.word	0x08004595
 80041b8:	08004595 	.word	0x08004595
 80041bc:	08004595 	.word	0x08004595
 80041c0:	080043c5 	.word	0x080043c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c4:	4bb9      	ldr	r3, [pc, #740]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x358>)
 80041c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041ca:	e1e7      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041cc:	4bb8      	ldr	r3, [pc, #736]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041d2:	e1e3      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d4:	4bb4      	ldr	r3, [pc, #720]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041e0:	4bb1      	ldr	r3, [pc, #708]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d071      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ec:	4bae      	ldr	r3, [pc, #696]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80041fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004204:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800420e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	0159      	lsls	r1, r3, #5
 8004220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004224:	0150      	lsls	r0, r2, #5
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4621      	mov	r1, r4
 800422c:	1a51      	subs	r1, r2, r1
 800422e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004230:	4629      	mov	r1, r5
 8004232:	eb63 0301 	sbc.w	r3, r3, r1
 8004236:	647b      	str	r3, [r7, #68]	@ 0x44
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004244:	4649      	mov	r1, r9
 8004246:	018b      	lsls	r3, r1, #6
 8004248:	4641      	mov	r1, r8
 800424a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800424e:	4641      	mov	r1, r8
 8004250:	018a      	lsls	r2, r1, #6
 8004252:	4641      	mov	r1, r8
 8004254:	1a51      	subs	r1, r2, r1
 8004256:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004258:	4649      	mov	r1, r9
 800425a:	eb63 0301 	sbc.w	r3, r3, r1
 800425e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800426c:	4649      	mov	r1, r9
 800426e:	00cb      	lsls	r3, r1, #3
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004276:	4641      	mov	r1, r8
 8004278:	00ca      	lsls	r2, r1, #3
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	4603      	mov	r3, r0
 8004280:	4622      	mov	r2, r4
 8004282:	189b      	adds	r3, r3, r2
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30
 8004286:	462b      	mov	r3, r5
 8004288:	460a      	mov	r2, r1
 800428a:	eb42 0303 	adc.w	r3, r2, r3
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800429c:	4629      	mov	r1, r5
 800429e:	024b      	lsls	r3, r1, #9
 80042a0:	4621      	mov	r1, r4
 80042a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042a6:	4621      	mov	r1, r4
 80042a8:	024a      	lsls	r2, r1, #9
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80042c0:	f7fc fcfc 	bl	8000cbc <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4613      	mov	r3, r2
 80042ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ce:	e067      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d0:	4b75      	ldr	r3, [pc, #468]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80042e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042ea:	2300      	movs	r3, #0
 80042ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80042f2:	4622      	mov	r2, r4
 80042f4:	462b      	mov	r3, r5
 80042f6:	f04f 0000 	mov.w	r0, #0
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	0159      	lsls	r1, r3, #5
 8004300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004304:	0150      	lsls	r0, r2, #5
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4621      	mov	r1, r4
 800430c:	1a51      	subs	r1, r2, r1
 800430e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004310:	4629      	mov	r1, r5
 8004312:	eb63 0301 	sbc.w	r3, r3, r1
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004324:	4649      	mov	r1, r9
 8004326:	018b      	lsls	r3, r1, #6
 8004328:	4641      	mov	r1, r8
 800432a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800432e:	4641      	mov	r1, r8
 8004330:	018a      	lsls	r2, r1, #6
 8004332:	4641      	mov	r1, r8
 8004334:	ebb2 0a01 	subs.w	sl, r2, r1
 8004338:	4649      	mov	r1, r9
 800433a:	eb63 0b01 	sbc.w	fp, r3, r1
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800434a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800434e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004352:	4692      	mov	sl, r2
 8004354:	469b      	mov	fp, r3
 8004356:	4623      	mov	r3, r4
 8004358:	eb1a 0303 	adds.w	r3, sl, r3
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	462b      	mov	r3, r5
 8004360:	eb4b 0303 	adc.w	r3, fp, r3
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004372:	4629      	mov	r1, r5
 8004374:	028b      	lsls	r3, r1, #10
 8004376:	4621      	mov	r1, r4
 8004378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800437c:	4621      	mov	r1, r4
 800437e:	028a      	lsls	r2, r1, #10
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004388:	2200      	movs	r2, #0
 800438a:	673b      	str	r3, [r7, #112]	@ 0x70
 800438c:	677a      	str	r2, [r7, #116]	@ 0x74
 800438e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004392:	f7fc fc93 	bl	8000cbc <__aeabi_uldivmod>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4613      	mov	r3, r2
 800439c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043a0:	4b41      	ldr	r3, [pc, #260]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80043b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80043c2:	e0eb      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c4:	4b38      	ldr	r3, [pc, #224]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043d0:	4b35      	ldr	r3, [pc, #212]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d06b      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043dc:	4b32      	ldr	r3, [pc, #200]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	2200      	movs	r2, #0
 80043e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80043f0:	2300      	movs	r3, #0
 80043f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80043f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80043f8:	4622      	mov	r2, r4
 80043fa:	462b      	mov	r3, r5
 80043fc:	f04f 0000 	mov.w	r0, #0
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	0159      	lsls	r1, r3, #5
 8004406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800440a:	0150      	lsls	r0, r2, #5
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4621      	mov	r1, r4
 8004412:	1a51      	subs	r1, r2, r1
 8004414:	61b9      	str	r1, [r7, #24]
 8004416:	4629      	mov	r1, r5
 8004418:	eb63 0301 	sbc.w	r3, r3, r1
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800442a:	4659      	mov	r1, fp
 800442c:	018b      	lsls	r3, r1, #6
 800442e:	4651      	mov	r1, sl
 8004430:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004434:	4651      	mov	r1, sl
 8004436:	018a      	lsls	r2, r1, #6
 8004438:	4651      	mov	r1, sl
 800443a:	ebb2 0801 	subs.w	r8, r2, r1
 800443e:	4659      	mov	r1, fp
 8004440:	eb63 0901 	sbc.w	r9, r3, r1
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004450:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004454:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004458:	4690      	mov	r8, r2
 800445a:	4699      	mov	r9, r3
 800445c:	4623      	mov	r3, r4
 800445e:	eb18 0303 	adds.w	r3, r8, r3
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	462b      	mov	r3, r5
 8004466:	eb49 0303 	adc.w	r3, r9, r3
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004478:	4629      	mov	r1, r5
 800447a:	024b      	lsls	r3, r1, #9
 800447c:	4621      	mov	r1, r4
 800447e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004482:	4621      	mov	r1, r4
 8004484:	024a      	lsls	r2, r1, #9
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800448e:	2200      	movs	r2, #0
 8004490:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004492:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004494:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004498:	f7fc fc10 	bl	8000cbc <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4613      	mov	r3, r2
 80044a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044a6:	e065      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0x420>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	00f42400 	.word	0x00f42400
 80044b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b4:	4b3d      	ldr	r3, [pc, #244]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x458>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	2200      	movs	r2, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	4611      	mov	r1, r2
 80044c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80044c6:	2300      	movs	r3, #0
 80044c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80044ce:	4642      	mov	r2, r8
 80044d0:	464b      	mov	r3, r9
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	0159      	lsls	r1, r3, #5
 80044dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e0:	0150      	lsls	r0, r2, #5
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4641      	mov	r1, r8
 80044e8:	1a51      	subs	r1, r2, r1
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	4649      	mov	r1, r9
 80044ee:	eb63 0301 	sbc.w	r3, r3, r1
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004500:	4659      	mov	r1, fp
 8004502:	018b      	lsls	r3, r1, #6
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800450a:	4651      	mov	r1, sl
 800450c:	018a      	lsls	r2, r1, #6
 800450e:	4651      	mov	r1, sl
 8004510:	1a54      	subs	r4, r2, r1
 8004512:	4659      	mov	r1, fp
 8004514:	eb63 0501 	sbc.w	r5, r3, r1
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	00eb      	lsls	r3, r5, #3
 8004522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004526:	00e2      	lsls	r2, r4, #3
 8004528:	4614      	mov	r4, r2
 800452a:	461d      	mov	r5, r3
 800452c:	4643      	mov	r3, r8
 800452e:	18e3      	adds	r3, r4, r3
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	464b      	mov	r3, r9
 8004534:	eb45 0303 	adc.w	r3, r5, r3
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004546:	4629      	mov	r1, r5
 8004548:	028b      	lsls	r3, r1, #10
 800454a:	4621      	mov	r1, r4
 800454c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004550:	4621      	mov	r1, r4
 8004552:	028a      	lsls	r2, r1, #10
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800455c:	2200      	movs	r2, #0
 800455e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004560:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004562:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004566:	f7fc fba9 	bl	8000cbc <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4613      	mov	r3, r2
 8004570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004574:	4b0d      	ldr	r3, [pc, #52]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x458>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	0f1b      	lsrs	r3, r3, #28
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004592:	e003      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800459a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	37b8      	adds	r7, #184	@ 0xb8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	00f42400 	.word	0x00f42400

080045b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e28d      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8083 	beq.w	80046da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045d4:	4b94      	ldr	r3, [pc, #592]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d019      	beq.n	8004614 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045e0:	4b91      	ldr	r3, [pc, #580]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d106      	bne.n	80045fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045ec:	4b8e      	ldr	r3, [pc, #568]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f8:	d00c      	beq.n	8004614 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d112      	bne.n	800462c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004606:	4b88      	ldr	r3, [pc, #544]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004612:	d10b      	bne.n	800462c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	4b84      	ldr	r3, [pc, #528]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d05b      	beq.n	80046d8 <HAL_RCC_OscConfig+0x124>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d157      	bne.n	80046d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e25a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004634:	d106      	bne.n	8004644 <HAL_RCC_OscConfig+0x90>
 8004636:	4b7c      	ldr	r3, [pc, #496]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a7b      	ldr	r2, [pc, #492]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e01d      	b.n	8004680 <HAL_RCC_OscConfig+0xcc>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0xb4>
 800464e:	4b76      	ldr	r3, [pc, #472]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a75      	ldr	r2, [pc, #468]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a72      	ldr	r2, [pc, #456]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0xcc>
 8004668:	4b6f      	ldr	r3, [pc, #444]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6e      	ldr	r2, [pc, #440]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b6c      	ldr	r3, [pc, #432]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a6b      	ldr	r2, [pc, #428]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800467e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fe fd7a 	bl	8003180 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fe fd76 	bl	8003180 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	@ 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e21f      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b61      	ldr	r3, [pc, #388]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0xdc>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fe fd66 	bl	8003180 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fd62 	bl	8003180 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	@ 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e20b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	4b57      	ldr	r3, [pc, #348]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x104>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d06f      	beq.n	80047c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046e6:	4b50      	ldr	r3, [pc, #320]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d105      	bne.n	800470a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800470a:	4b47      	ldr	r3, [pc, #284]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d11c      	bne.n	8004750 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004716:	4b44      	ldr	r3, [pc, #272]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d116      	bne.n	8004750 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004722:	4b41      	ldr	r3, [pc, #260]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_RCC_OscConfig+0x186>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e1d3      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473a:	4b3b      	ldr	r3, [pc, #236]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4937      	ldr	r1, [pc, #220]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	e03a      	b.n	80047c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004758:	4b34      	ldr	r3, [pc, #208]	@ (800482c <HAL_RCC_OscConfig+0x278>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fe fd0f 	bl	8003180 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004766:	f7fe fd0b 	bl	8003180 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e1b4      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004778:	4b2b      	ldr	r3, [pc, #172]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004784:	4b28      	ldr	r3, [pc, #160]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4925      	ldr	r1, [pc, #148]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 8004794:	4313      	orrs	r3, r2
 8004796:	600b      	str	r3, [r1, #0]
 8004798:	e015      	b.n	80047c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479a:	4b24      	ldr	r3, [pc, #144]	@ (800482c <HAL_RCC_OscConfig+0x278>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fe fcee 	bl	8003180 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a8:	f7fe fcea 	bl	8003180 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e193      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d036      	beq.n	8004840 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d016      	beq.n	8004808 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047da:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <HAL_RCC_OscConfig+0x27c>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fe fcce 	bl	8003180 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e8:	f7fe fcca 	bl	8003180 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e173      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <HAL_RCC_OscConfig+0x274>)
 80047fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x234>
 8004806:	e01b      	b.n	8004840 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004808:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <HAL_RCC_OscConfig+0x27c>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480e:	f7fe fcb7 	bl	8003180 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004814:	e00e      	b.n	8004834 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004816:	f7fe fcb3 	bl	8003180 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d907      	bls.n	8004834 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e15c      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
 8004828:	40023800 	.word	0x40023800
 800482c:	42470000 	.word	0x42470000
 8004830:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004834:	4b8a      	ldr	r3, [pc, #552]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ea      	bne.n	8004816 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8097 	beq.w	800497c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004852:	4b83      	ldr	r3, [pc, #524]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	4b7f      	ldr	r3, [pc, #508]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	4a7e      	ldr	r2, [pc, #504]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800486c:	6413      	str	r3, [r2, #64]	@ 0x40
 800486e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487e:	4b79      	ldr	r3, [pc, #484]	@ (8004a64 <HAL_RCC_OscConfig+0x4b0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d118      	bne.n	80048bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800488a:	4b76      	ldr	r3, [pc, #472]	@ (8004a64 <HAL_RCC_OscConfig+0x4b0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a75      	ldr	r2, [pc, #468]	@ (8004a64 <HAL_RCC_OscConfig+0x4b0>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004896:	f7fe fc73 	bl	8003180 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489e:	f7fe fc6f 	bl	8003180 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e118      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a64 <HAL_RCC_OscConfig+0x4b0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x31e>
 80048c4:	4b66      	ldr	r3, [pc, #408]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c8:	4a65      	ldr	r2, [pc, #404]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d0:	e01c      	b.n	800490c <HAL_RCC_OscConfig+0x358>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x340>
 80048da:	4b61      	ldr	r3, [pc, #388]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	4a60      	ldr	r2, [pc, #384]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0x358>
 80048f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f8:	4a59      	ldr	r2, [pc, #356]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004900:	4b57      	ldr	r3, [pc, #348]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004904:	4a56      	ldr	r2, [pc, #344]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004906:	f023 0304 	bic.w	r3, r3, #4
 800490a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d015      	beq.n	8004940 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fe fc34 	bl	8003180 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491a:	e00a      	b.n	8004932 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fe fc30 	bl	8003180 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e0d7      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004932:	4b4b      	ldr	r3, [pc, #300]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ee      	beq.n	800491c <HAL_RCC_OscConfig+0x368>
 800493e:	e014      	b.n	800496a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fe fc1e 	bl	8003180 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004946:	e00a      	b.n	800495e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fe fc1a 	bl	8003180 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0c1      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495e:	4b40      	ldr	r3, [pc, #256]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1ee      	bne.n	8004948 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800496a:	7dfb      	ldrb	r3, [r7, #23]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004970:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800497a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80ad 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004986:	4b36      	ldr	r3, [pc, #216]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b08      	cmp	r3, #8
 8004990:	d060      	beq.n	8004a54 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d145      	bne.n	8004a26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b33      	ldr	r3, [pc, #204]	@ (8004a68 <HAL_RCC_OscConfig+0x4b4>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe fbee 	bl	8003180 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fe fbea 	bl	8003180 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e093      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	4b29      	ldr	r3, [pc, #164]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69da      	ldr	r2, [r3, #28]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	019b      	lsls	r3, r3, #6
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	3b01      	subs	r3, #1
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	061b      	lsls	r3, r3, #24
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f0:	071b      	lsls	r3, r3, #28
 80049f2:	491b      	ldr	r1, [pc, #108]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a68 <HAL_RCC_OscConfig+0x4b4>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fe:	f7fe fbbf 	bl	8003180 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fe fbbb 	bl	8003180 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e064      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a18:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x452>
 8004a24:	e05c      	b.n	8004ae0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b10      	ldr	r3, [pc, #64]	@ (8004a68 <HAL_RCC_OscConfig+0x4b4>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fba8 	bl	8003180 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fe fba4 	bl	8003180 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e04d      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a46:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <HAL_RCC_OscConfig+0x4ac>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x480>
 8004a52:	e045      	b.n	8004ae0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e040      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000
 8004a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004aec <HAL_RCC_OscConfig+0x538>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d030      	beq.n	8004adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d129      	bne.n	8004adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d122      	bne.n	8004adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d119      	bne.n	8004adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d10f      	bne.n	8004adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800

08004af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07b      	b.n	8004bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b12:	d009      	beq.n	8004b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
 8004b1a:	e005      	b.n	8004b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fd ffa0 	bl	8002a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bac:	ea42 0103 	orr.w	r1, r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f003 0104 	and.w	r1, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	f003 0210 	and.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d001      	beq.n	8004c22 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e097      	b.n	8004d52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Transmit_DMA+0x2a>
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e08f      	b.n	8004d52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_SPI_Transmit_DMA+0x3c>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e088      	b.n	8004d52 <HAL_SPI_Transmit_DMA+0x14e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	88fa      	ldrh	r2, [r7, #6]
 8004c66:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c8e:	d10f      	bne.n	8004cb0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb4:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <HAL_SPI_Transmit_DMA+0x158>)
 8004cb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cbc:	4a28      	ldr	r2, [pc, #160]	@ (8004d60 <HAL_SPI_Transmit_DMA+0x15c>)
 8004cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc4:	4a27      	ldr	r2, [pc, #156]	@ (8004d64 <HAL_SPI_Transmit_DMA+0x160>)
 8004cc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ccc:	2200      	movs	r2, #0
 8004cce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	4619      	mov	r1, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ce8:	f7fe fbe6 	bl	80034b8 <HAL_DMA_Start_IT>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf6:	f043 0210 	orr.w	r2, r3, #16
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e023      	b.n	8004d52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d007      	beq.n	8004d28 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d26:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0220 	orr.w	r2, r2, #32
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0202 	orr.w	r2, r2, #2
 8004d4e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	08004e39 	.word	0x08004e39
 8004d60:	08004d91 	.word	0x08004d91
 8004d64:	08004e55 	.word	0x08004e55

08004d68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d9e:	f7fe f9ef 	bl	8003180 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db2:	d03b      	beq.n	8004e2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0220 	bic.w	r2, r2, #32
 8004dc2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0202 	bic.w	r2, r2, #2
 8004dd2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	2164      	movs	r1, #100	@ 0x64
 8004dd8:	6978      	ldr	r0, [r7, #20]
 8004dda:	f000 f8e3 	bl	8004fa4 <SPI_EndRxTxTransaction>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e24:	6978      	ldr	r0, [r7, #20]
 8004e26:	f7ff ffa9 	bl	8004d7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e2a:	e002      	b.n	8004e32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7fd fcd7 	bl	80027e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff ff8e 	bl	8004d68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0203 	bic.w	r2, r2, #3
 8004e70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	f043 0210 	orr.w	r2, r3, #16
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff ff78 	bl	8004d7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ea4:	f7fe f96c 	bl	8003180 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eb4:	f7fe f964 	bl	8003180 <HAL_GetTick>
 8004eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eba:	4b39      	ldr	r3, [pc, #228]	@ (8004fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	015b      	lsls	r3, r3, #5
 8004ec0:	0d1b      	lsrs	r3, r3, #20
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eca:	e054      	b.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d050      	beq.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ed4:	f7fe f954 	bl	8003180 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d902      	bls.n	8004eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d13d      	bne.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f02:	d111      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f0c:	d004      	beq.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f16:	d107      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f30:	d10f      	bne.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e017      	b.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d19b      	bne.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	2000000c 	.word	0x2000000c

08004fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	2102      	movs	r1, #2
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff ff6a 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e032      	b.n	800503c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005044 <SPI_EndRxTxTransaction+0xa0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1b      	ldr	r2, [pc, #108]	@ (8005048 <SPI_EndRxTxTransaction+0xa4>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	0d5b      	lsrs	r3, r3, #21
 8004fe2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff4:	d112      	bne.n	800501c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2180      	movs	r1, #128	@ 0x80
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff ff47 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d016      	beq.n	800503a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e00f      	b.n	800503c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	3b01      	subs	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005032:	2b80      	cmp	r3, #128	@ 0x80
 8005034:	d0f2      	beq.n	800501c <SPI_EndRxTxTransaction+0x78>
 8005036:	e000      	b.n	800503a <SPI_EndRxTxTransaction+0x96>
        break;
 8005038:	bf00      	nop
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	2000000c 	.word	0x2000000c
 8005048:	165e9f81 	.word	0x165e9f81

0800504c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e041      	b.n	80050e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f839 	bl	80050ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f000 f9c0 	bl	8005410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	d001      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e04e      	b.n	80051b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a23      	ldr	r2, [pc, #140]	@ (80051c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005142:	d01d      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1f      	ldr	r2, [pc, #124]	@ (80051c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1e      	ldr	r2, [pc, #120]	@ (80051cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1c      	ldr	r2, [pc, #112]	@ (80051d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <HAL_TIM_Base_Start_IT+0xdc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d111      	bne.n	80051a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b06      	cmp	r3, #6
 8005190:	d010      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	e007      	b.n	80051b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40010400 	.word	0x40010400
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40001800 	.word	0x40001800

080051e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0202 	mvn.w	r2, #2
 8005214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8d2 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8c4 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8d5 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d020      	beq.n	8005290 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0204 	mvn.w	r2, #4
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8ac 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f89e 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8af 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d020      	beq.n	80052dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0208 	mvn.w	r2, #8
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f886 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f878 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f889 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d020      	beq.n	8005328 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0210 	mvn.w	r2, #16
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2208      	movs	r2, #8
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f860 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f852 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f863 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00c      	beq.n	800534c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0201 	mvn.w	r2, #1
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fd fb5a 	bl	8002a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00c      	beq.n	8005370 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f906 	bl	800557c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f834 	bl	80053fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00c      	beq.n	80053b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d007      	beq.n	80053b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0220 	mvn.w	r2, #32
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8d8 	bl	8005568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a46      	ldr	r2, [pc, #280]	@ (800553c <TIM_Base_SetConfig+0x12c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542e:	d00f      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a43      	ldr	r2, [pc, #268]	@ (8005540 <TIM_Base_SetConfig+0x130>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a42      	ldr	r2, [pc, #264]	@ (8005544 <TIM_Base_SetConfig+0x134>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a41      	ldr	r2, [pc, #260]	@ (8005548 <TIM_Base_SetConfig+0x138>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a40      	ldr	r2, [pc, #256]	@ (800554c <TIM_Base_SetConfig+0x13c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d108      	bne.n	8005462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a35      	ldr	r2, [pc, #212]	@ (800553c <TIM_Base_SetConfig+0x12c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d02b      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005470:	d027      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a32      	ldr	r2, [pc, #200]	@ (8005540 <TIM_Base_SetConfig+0x130>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d023      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a31      	ldr	r2, [pc, #196]	@ (8005544 <TIM_Base_SetConfig+0x134>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01f      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a30      	ldr	r2, [pc, #192]	@ (8005548 <TIM_Base_SetConfig+0x138>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01b      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2f      	ldr	r2, [pc, #188]	@ (800554c <TIM_Base_SetConfig+0x13c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d017      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a2e      	ldr	r2, [pc, #184]	@ (8005550 <TIM_Base_SetConfig+0x140>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d013      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2d      	ldr	r2, [pc, #180]	@ (8005554 <TIM_Base_SetConfig+0x144>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00f      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005558 <TIM_Base_SetConfig+0x148>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00b      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2b      	ldr	r2, [pc, #172]	@ (800555c <TIM_Base_SetConfig+0x14c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005560 <TIM_Base_SetConfig+0x150>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a29      	ldr	r2, [pc, #164]	@ (8005564 <TIM_Base_SetConfig+0x154>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d108      	bne.n	80054d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a10      	ldr	r2, [pc, #64]	@ (800553c <TIM_Base_SetConfig+0x12c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a12      	ldr	r2, [pc, #72]	@ (800554c <TIM_Base_SetConfig+0x13c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d103      	bne.n	8005510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]
  }
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40010000 	.word	0x40010000
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800
 8005548:	40000c00 	.word	0x40000c00
 800554c:	40010400 	.word	0x40010400
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800
 800555c:	40001800 	.word	0x40001800
 8005560:	40001c00 	.word	0x40001c00
 8005564:	40002000 	.word	0x40002000

08005568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e042      	b.n	8005628 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fd fb12 	bl	8002be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	@ 0x24
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fdbf 	bl	8006158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	@ 0x28
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b20      	cmp	r3, #32
 800564e:	d175      	bne.n	800573c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Transmit+0x2c>
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e06e      	b.n	800573e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2221      	movs	r2, #33	@ 0x21
 800566a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566e:	f7fd fd87 	bl	8003180 <HAL_GetTick>
 8005672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005688:	d108      	bne.n	800569c <HAL_UART_Transmit+0x6c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e003      	b.n	80056a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056a4:	e02e      	b.n	8005704 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	@ 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fb21 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e03a      	b.n	800573e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	3302      	adds	r3, #2
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e007      	b.n	80056f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1cb      	bne.n	80056a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	2140      	movs	r1, #64	@ 0x40
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 faed 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e006      	b.n	800573e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	4613      	mov	r3, r2
 8005752:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b20      	cmp	r3, #32
 800575e:	d112      	bne.n	8005786 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_UART_Receive_IT+0x26>
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e00b      	b.n	8005788 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	461a      	mov	r2, r3
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fb14 	bl	8005daa <UART_Start_Receive_IT>
 8005782:	4603      	mov	r3, r0
 8005784:	e000      	b.n	8005788 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005786:	2302      	movs	r3, #2
  }
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b0ba      	sub	sp, #232	@ 0xe8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10f      	bne.n	80057f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_UART_IRQHandler+0x66>
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fbf4 	bl	8005fdc <UART_Receive_IT>
      return;
 80057f4:	e25b      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 80de 	beq.w	80059bc <HAL_UART_IRQHandler+0x22c>
 8005800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005810:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80d1 	beq.w	80059bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_UART_IRQHandler+0xae>
 8005826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800582a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f043 0201 	orr.w	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_UART_IRQHandler+0xd2>
 800584a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	f043 0202 	orr.w	r2, r3, #2
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_UART_IRQHandler+0xf6>
 800586e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d011      	beq.n	80058b6 <HAL_UART_IRQHandler+0x126>
 8005892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d105      	bne.n	80058aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800589e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ae:	f043 0208 	orr.w	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 81f2 	beq.w	8005ca4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_UART_IRQHandler+0x14e>
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb7f 	bl	8005fdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b40      	cmp	r3, #64	@ 0x40
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <HAL_UART_IRQHandler+0x17a>
 8005902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d04f      	beq.n	80059aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa87 	bl	8005e1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591a:	2b40      	cmp	r3, #64	@ 0x40
 800591c:	d141      	bne.n	80059a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3314      	adds	r3, #20
 8005924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800593c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800594a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800594e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1d9      	bne.n	800591e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d013      	beq.n	800599a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005976:	4a7e      	ldr	r2, [pc, #504]	@ (8005b70 <HAL_UART_IRQHandler+0x3e0>)
 8005978:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597e:	4618      	mov	r0, r3
 8005980:	f7fd fe62 	bl	8003648 <HAL_DMA_Abort_IT>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d016      	beq.n	80059b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005994:	4610      	mov	r0, r2
 8005996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	e00e      	b.n	80059b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fc ff64 	bl	8002868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	e00a      	b.n	80059b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fc ff60 	bl	8002868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	e006      	b.n	80059b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fc ff5c 	bl	8002868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059b6:	e175      	b.n	8005ca4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	bf00      	nop
    return;
 80059ba:	e173      	b.n	8005ca4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	f040 814f 	bne.w	8005c64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8148 	beq.w	8005c64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8141 	beq.w	8005c64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a02:	2b40      	cmp	r3, #64	@ 0x40
 8005a04:	f040 80b6 	bne.w	8005b74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8145 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a26:	429a      	cmp	r2, r3
 8005a28:	f080 813e 	bcs.w	8005ca8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a3e:	f000 8088 	beq.w	8005b52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	330c      	adds	r3, #12
 8005a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1d9      	bne.n	8005a42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3314      	adds	r3, #20
 8005a94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ab2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005aba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e1      	bne.n	8005a8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3314      	adds	r3, #20
 8005aea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005aee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005af0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005af4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005afc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e3      	bne.n	8005aca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b22:	f023 0310 	bic.w	r3, r3, #16
 8005b26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e3      	bne.n	8005b10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fd fd0b 	bl	8003568 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f8ad 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b6e:	e09b      	b.n	8005ca8 <HAL_UART_IRQHandler+0x518>
 8005b70:	08005ee5 	.word	0x08005ee5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 808e 	beq.w	8005cac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8089 	beq.w	8005cac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005bbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e3      	bne.n	8005b9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	623b      	str	r3, [r7, #32]
   return(result);
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e3      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
 8005c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c3c:	61fa      	str	r2, [r7, #28]
 8005c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	617b      	str	r3, [r7, #20]
   return(result);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e3      	bne.n	8005c18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f833 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c62:	e023      	b.n	8005cac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <HAL_UART_IRQHandler+0x4f4>
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f945 	bl	8005f0c <UART_Transmit_IT>
    return;
 8005c82:	e014      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <HAL_UART_IRQHandler+0x51e>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f985 	bl	8005fac <UART_EndTransmit_IT>
    return;
 8005ca2:	e004      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
    return;
 8005ca4:	bf00      	nop
 8005ca6:	e002      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
      return;
 8005ca8:	bf00      	nop
 8005caa:	e000      	b.n	8005cae <HAL_UART_IRQHandler+0x51e>
      return;
 8005cac:	bf00      	nop
  }
}
 8005cae:	37e8      	adds	r7, #232	@ 0xe8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d08:	e03b      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d037      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d12:	f7fd fa35 	bl	8003180 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	6a3a      	ldr	r2, [r7, #32]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e03a      	b.n	8005da2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d023      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b80      	cmp	r3, #128	@ 0x80
 8005d3e:	d020      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d01d      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d116      	bne.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 f857 	bl	8005e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2208      	movs	r2, #8
 8005d74:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e00f      	b.n	8005da2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d0b4      	beq.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2222      	movs	r2, #34	@ 0x22
 8005dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0220 	orr.w	r2, r2, #32
 8005e0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b095      	sub	sp, #84	@ 0x54
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e46:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e5      	bne.n	8005e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3314      	adds	r3, #20
 8005e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3314      	adds	r3, #20
 8005e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e5      	bne.n	8005e5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d119      	bne.n	8005eca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f023 0310 	bic.w	r3, r3, #16
 8005eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eb6:	61ba      	str	r2, [r7, #24]
 8005eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6979      	ldr	r1, [r7, #20]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e5      	bne.n	8005e96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ed8:	bf00      	nop
 8005eda:	3754      	adds	r7, #84	@ 0x54
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7fc fcb2 	bl	8002868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b21      	cmp	r3, #33	@ 0x21
 8005f1e:	d13e      	bne.n	8005f9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f28:	d114      	bne.n	8005f54 <UART_Transmit_IT+0x48>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d110      	bne.n	8005f54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	1c9a      	adds	r2, r3, #2
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	621a      	str	r2, [r3, #32]
 8005f52:	e008      	b.n	8005f66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	1c59      	adds	r1, r3, #1
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6211      	str	r1, [r2, #32]
 8005f5e:	781a      	ldrb	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	4619      	mov	r1, r3
 8005f74:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10f      	bne.n	8005f9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fe71 	bl	8005cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08c      	sub	sp, #48	@ 0x30
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b22      	cmp	r3, #34	@ 0x22
 8005fee:	f040 80ae 	bne.w	800614e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ffa:	d117      	bne.n	800602c <UART_Receive_IT+0x50>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d113      	bne.n	800602c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601a:	b29a      	uxth	r2, r3
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	1c9a      	adds	r2, r3, #2
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	629a      	str	r2, [r3, #40]	@ 0x28
 800602a:	e026      	b.n	800607a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006030:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800603e:	d007      	beq.n	8006050 <UART_Receive_IT+0x74>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <UART_Receive_IT+0x82>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e008      	b.n	8006070 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800606a:	b2da      	uxtb	r2, r3
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	4619      	mov	r1, r3
 8006088:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800608a:	2b00      	cmp	r3, #0
 800608c:	d15d      	bne.n	800614a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0220 	bic.w	r2, r2, #32
 800609c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d135      	bne.n	8006140 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f023 0310 	bic.w	r3, r3, #16
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	330c      	adds	r3, #12
 80060f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fa:	623a      	str	r2, [r7, #32]
 80060fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	69f9      	ldr	r1, [r7, #28]
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	61bb      	str	r3, [r7, #24]
   return(result);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e5      	bne.n	80060da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b10      	cmp	r3, #16
 800611a:	d10a      	bne.n	8006132 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fdc5 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
 800613e:	e002      	b.n	8006146 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fc fb67 	bl	8002814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e002      	b.n	8006150 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	e000      	b.n	8006150 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
  }
}
 8006150:	4618      	mov	r0, r3
 8006152:	3730      	adds	r7, #48	@ 0x30
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800615c:	b0c0      	sub	sp, #256	@ 0x100
 800615e:	af00      	add	r7, sp, #0
 8006160:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006174:	68d9      	ldr	r1, [r3, #12]
 8006176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	ea40 0301 	orr.w	r3, r0, r1
 8006180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	431a      	orrs	r2, r3
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	431a      	orrs	r2, r3
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061b0:	f021 010c 	bic.w	r1, r1, #12
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061be:	430b      	orrs	r3, r1
 80061c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d2:	6999      	ldr	r1, [r3, #24]
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	ea40 0301 	orr.w	r3, r0, r1
 80061de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b8f      	ldr	r3, [pc, #572]	@ (8006424 <UART_SetConfig+0x2cc>)
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d005      	beq.n	80061f8 <UART_SetConfig+0xa0>
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b8d      	ldr	r3, [pc, #564]	@ (8006428 <UART_SetConfig+0x2d0>)
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d104      	bne.n	8006202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061f8:	f7fd ff66 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 80061fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006200:	e003      	b.n	800620a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006202:	f7fd ff4d 	bl	80040a0 <HAL_RCC_GetPCLK1Freq>
 8006206:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006214:	f040 810c 	bne.w	8006430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800621c:	2200      	movs	r2, #0
 800621e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006222:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800622a:	4622      	mov	r2, r4
 800622c:	462b      	mov	r3, r5
 800622e:	1891      	adds	r1, r2, r2
 8006230:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006232:	415b      	adcs	r3, r3
 8006234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800623a:	4621      	mov	r1, r4
 800623c:	eb12 0801 	adds.w	r8, r2, r1
 8006240:	4629      	mov	r1, r5
 8006242:	eb43 0901 	adc.w	r9, r3, r1
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800625a:	4690      	mov	r8, r2
 800625c:	4699      	mov	r9, r3
 800625e:	4623      	mov	r3, r4
 8006260:	eb18 0303 	adds.w	r3, r8, r3
 8006264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006268:	462b      	mov	r3, r5
 800626a:	eb49 0303 	adc.w	r3, r9, r3
 800626e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800627e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006286:	460b      	mov	r3, r1
 8006288:	18db      	adds	r3, r3, r3
 800628a:	653b      	str	r3, [r7, #80]	@ 0x50
 800628c:	4613      	mov	r3, r2
 800628e:	eb42 0303 	adc.w	r3, r2, r3
 8006292:	657b      	str	r3, [r7, #84]	@ 0x54
 8006294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800629c:	f7fa fd0e 	bl	8000cbc <__aeabi_uldivmod>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4b61      	ldr	r3, [pc, #388]	@ (800642c <UART_SetConfig+0x2d4>)
 80062a6:	fba3 2302 	umull	r2, r3, r3, r2
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	011c      	lsls	r4, r3, #4
 80062ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	1891      	adds	r1, r2, r2
 80062c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062c8:	415b      	adcs	r3, r3
 80062ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062d0:	4641      	mov	r1, r8
 80062d2:	eb12 0a01 	adds.w	sl, r2, r1
 80062d6:	4649      	mov	r1, r9
 80062d8:	eb43 0b01 	adc.w	fp, r3, r1
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f0:	4692      	mov	sl, r2
 80062f2:	469b      	mov	fp, r3
 80062f4:	4643      	mov	r3, r8
 80062f6:	eb1a 0303 	adds.w	r3, sl, r3
 80062fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062fe:	464b      	mov	r3, r9
 8006300:	eb4b 0303 	adc.w	r3, fp, r3
 8006304:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006314:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800631c:	460b      	mov	r3, r1
 800631e:	18db      	adds	r3, r3, r3
 8006320:	643b      	str	r3, [r7, #64]	@ 0x40
 8006322:	4613      	mov	r3, r2
 8006324:	eb42 0303 	adc.w	r3, r2, r3
 8006328:	647b      	str	r3, [r7, #68]	@ 0x44
 800632a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800632e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006332:	f7fa fcc3 	bl	8000cbc <__aeabi_uldivmod>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4611      	mov	r1, r2
 800633c:	4b3b      	ldr	r3, [pc, #236]	@ (800642c <UART_SetConfig+0x2d4>)
 800633e:	fba3 2301 	umull	r2, r3, r3, r1
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2264      	movs	r2, #100	@ 0x64
 8006346:	fb02 f303 	mul.w	r3, r2, r3
 800634a:	1acb      	subs	r3, r1, r3
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006352:	4b36      	ldr	r3, [pc, #216]	@ (800642c <UART_SetConfig+0x2d4>)
 8006354:	fba3 2302 	umull	r2, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006360:	441c      	add	r4, r3
 8006362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006366:	2200      	movs	r2, #0
 8006368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800636c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	1891      	adds	r1, r2, r2
 800637a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800637c:	415b      	adcs	r3, r3
 800637e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006384:	4641      	mov	r1, r8
 8006386:	1851      	adds	r1, r2, r1
 8006388:	6339      	str	r1, [r7, #48]	@ 0x30
 800638a:	4649      	mov	r1, r9
 800638c:	414b      	adcs	r3, r1
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800639c:	4659      	mov	r1, fp
 800639e:	00cb      	lsls	r3, r1, #3
 80063a0:	4651      	mov	r1, sl
 80063a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063a6:	4651      	mov	r1, sl
 80063a8:	00ca      	lsls	r2, r1, #3
 80063aa:	4610      	mov	r0, r2
 80063ac:	4619      	mov	r1, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	4642      	mov	r2, r8
 80063b2:	189b      	adds	r3, r3, r2
 80063b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063b8:	464b      	mov	r3, r9
 80063ba:	460a      	mov	r2, r1
 80063bc:	eb42 0303 	adc.w	r3, r2, r3
 80063c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063d8:	460b      	mov	r3, r1
 80063da:	18db      	adds	r3, r3, r3
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063de:	4613      	mov	r3, r2
 80063e0:	eb42 0303 	adc.w	r3, r2, r3
 80063e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063ee:	f7fa fc65 	bl	8000cbc <__aeabi_uldivmod>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <UART_SetConfig+0x2d4>)
 80063f8:	fba3 1302 	umull	r1, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	2164      	movs	r1, #100	@ 0x64
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	3332      	adds	r3, #50	@ 0x32
 800640a:	4a08      	ldr	r2, [pc, #32]	@ (800642c <UART_SetConfig+0x2d4>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	f003 0207 	and.w	r2, r3, #7
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4422      	add	r2, r4
 800641e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006420:	e106      	b.n	8006630 <UART_SetConfig+0x4d8>
 8006422:	bf00      	nop
 8006424:	40011000 	.word	0x40011000
 8006428:	40011400 	.word	0x40011400
 800642c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006434:	2200      	movs	r2, #0
 8006436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800643a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800643e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006442:	4642      	mov	r2, r8
 8006444:	464b      	mov	r3, r9
 8006446:	1891      	adds	r1, r2, r2
 8006448:	6239      	str	r1, [r7, #32]
 800644a:	415b      	adcs	r3, r3
 800644c:	627b      	str	r3, [r7, #36]	@ 0x24
 800644e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006452:	4641      	mov	r1, r8
 8006454:	1854      	adds	r4, r2, r1
 8006456:	4649      	mov	r1, r9
 8006458:	eb43 0501 	adc.w	r5, r3, r1
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	00eb      	lsls	r3, r5, #3
 8006466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800646a:	00e2      	lsls	r2, r4, #3
 800646c:	4614      	mov	r4, r2
 800646e:	461d      	mov	r5, r3
 8006470:	4643      	mov	r3, r8
 8006472:	18e3      	adds	r3, r4, r3
 8006474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006478:	464b      	mov	r3, r9
 800647a:	eb45 0303 	adc.w	r3, r5, r3
 800647e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800648e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800649e:	4629      	mov	r1, r5
 80064a0:	008b      	lsls	r3, r1, #2
 80064a2:	4621      	mov	r1, r4
 80064a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064a8:	4621      	mov	r1, r4
 80064aa:	008a      	lsls	r2, r1, #2
 80064ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064b0:	f7fa fc04 	bl	8000cbc <__aeabi_uldivmod>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4b60      	ldr	r3, [pc, #384]	@ (800663c <UART_SetConfig+0x4e4>)
 80064ba:	fba3 2302 	umull	r2, r3, r3, r2
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	011c      	lsls	r4, r3, #4
 80064c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	1891      	adds	r1, r2, r2
 80064da:	61b9      	str	r1, [r7, #24]
 80064dc:	415b      	adcs	r3, r3
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e4:	4641      	mov	r1, r8
 80064e6:	1851      	adds	r1, r2, r1
 80064e8:	6139      	str	r1, [r7, #16]
 80064ea:	4649      	mov	r1, r9
 80064ec:	414b      	adcs	r3, r1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064fc:	4659      	mov	r1, fp
 80064fe:	00cb      	lsls	r3, r1, #3
 8006500:	4651      	mov	r1, sl
 8006502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006506:	4651      	mov	r1, sl
 8006508:	00ca      	lsls	r2, r1, #3
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	4603      	mov	r3, r0
 8006510:	4642      	mov	r2, r8
 8006512:	189b      	adds	r3, r3, r2
 8006514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006518:	464b      	mov	r3, r9
 800651a:	460a      	mov	r2, r1
 800651c:	eb42 0303 	adc.w	r3, r2, r3
 8006520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800652e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800653c:	4649      	mov	r1, r9
 800653e:	008b      	lsls	r3, r1, #2
 8006540:	4641      	mov	r1, r8
 8006542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006546:	4641      	mov	r1, r8
 8006548:	008a      	lsls	r2, r1, #2
 800654a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800654e:	f7fa fbb5 	bl	8000cbc <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4611      	mov	r1, r2
 8006558:	4b38      	ldr	r3, [pc, #224]	@ (800663c <UART_SetConfig+0x4e4>)
 800655a:	fba3 2301 	umull	r2, r3, r3, r1
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	2264      	movs	r2, #100	@ 0x64
 8006562:	fb02 f303 	mul.w	r3, r2, r3
 8006566:	1acb      	subs	r3, r1, r3
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	3332      	adds	r3, #50	@ 0x32
 800656c:	4a33      	ldr	r2, [pc, #204]	@ (800663c <UART_SetConfig+0x4e4>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006578:	441c      	add	r4, r3
 800657a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800657e:	2200      	movs	r2, #0
 8006580:	673b      	str	r3, [r7, #112]	@ 0x70
 8006582:	677a      	str	r2, [r7, #116]	@ 0x74
 8006584:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006588:	4642      	mov	r2, r8
 800658a:	464b      	mov	r3, r9
 800658c:	1891      	adds	r1, r2, r2
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	415b      	adcs	r3, r3
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006598:	4641      	mov	r1, r8
 800659a:	1851      	adds	r1, r2, r1
 800659c:	6039      	str	r1, [r7, #0]
 800659e:	4649      	mov	r1, r9
 80065a0:	414b      	adcs	r3, r1
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065b0:	4659      	mov	r1, fp
 80065b2:	00cb      	lsls	r3, r1, #3
 80065b4:	4651      	mov	r1, sl
 80065b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ba:	4651      	mov	r1, sl
 80065bc:	00ca      	lsls	r2, r1, #3
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	4642      	mov	r2, r8
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ca:	464b      	mov	r3, r9
 80065cc:	460a      	mov	r2, r1
 80065ce:	eb42 0303 	adc.w	r3, r2, r3
 80065d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80065de:	667a      	str	r2, [r7, #100]	@ 0x64
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065ec:	4649      	mov	r1, r9
 80065ee:	008b      	lsls	r3, r1, #2
 80065f0:	4641      	mov	r1, r8
 80065f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f6:	4641      	mov	r1, r8
 80065f8:	008a      	lsls	r2, r1, #2
 80065fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065fe:	f7fa fb5d 	bl	8000cbc <__aeabi_uldivmod>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <UART_SetConfig+0x4e4>)
 8006608:	fba3 1302 	umull	r1, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	2164      	movs	r1, #100	@ 0x64
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	3332      	adds	r3, #50	@ 0x32
 800661a:	4a08      	ldr	r2, [pc, #32]	@ (800663c <UART_SetConfig+0x4e4>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f003 020f 	and.w	r2, r3, #15
 8006626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4422      	add	r2, r4
 800662e:	609a      	str	r2, [r3, #8]
}
 8006630:	bf00      	nop
 8006632:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006636:	46bd      	mov	sp, r7
 8006638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800663c:	51eb851f 	.word	0x51eb851f

08006640 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800664e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006652:	2b84      	cmp	r3, #132	@ 0x84
 8006654:	d005      	beq.n	8006662 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	3303      	adds	r3, #3
 8006660:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006662:	68fb      	ldr	r3, [r7, #12]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006676:	f3ef 8305 	mrs	r3, IPSR
 800667a:	607b      	str	r3, [r7, #4]
  return(result);
 800667c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800667e:	2b00      	cmp	r3, #0
 8006680:	bf14      	ite	ne
 8006682:	2301      	movne	r3, #1
 8006684:	2300      	moveq	r3, #0
 8006686:	b2db      	uxtb	r3, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006698:	f001 f982 	bl	80079a0 <vTaskStartScheduler>
  
  return osOK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80066a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a4:	b089      	sub	sp, #36	@ 0x24
 80066a6:	af04      	add	r7, sp, #16
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <osThreadCreate+0x54>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01c      	beq.n	80066f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685c      	ldr	r4, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691e      	ldr	r6, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff ffb6 	bl	8006640 <makeFreeRtosPriority>
 80066d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066de:	9202      	str	r2, [sp, #8]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	9100      	str	r1, [sp, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	4632      	mov	r2, r6
 80066e8:	4629      	mov	r1, r5
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 ff72 	bl	80075d4 <xTaskCreateStatic>
 80066f0:	4603      	mov	r3, r0
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e01c      	b.n	8006730 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685c      	ldr	r4, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006702:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff ff98 	bl	8006640 <makeFreeRtosPriority>
 8006710:	4602      	mov	r2, r0
 8006712:	f107 030c 	add.w	r3, r7, #12
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	9200      	str	r2, [sp, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	4632      	mov	r2, r6
 800671e:	4629      	mov	r1, r5
 8006720:	4620      	mov	r0, r4
 8006722:	f000 ffb7 	bl	8007694 <xTaskCreate>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d001      	beq.n	8006730 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	e000      	b.n	8006732 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006730:	68fb      	ldr	r3, [r7, #12]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800673a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <osDelay+0x16>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	e000      	b.n	8006752 <osDelay+0x18>
 8006750:	2301      	movs	r3, #1
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f8ee 	bl	8007934 <vTaskDelay>
  
  return osOK;
 8006758:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af02      	add	r7, sp, #8
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8006776:	f7ff ff7b 	bl	8006670 <inHandlerMode>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01c      	beq.n	80067ba <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	f107 0208 	add.w	r2, r7, #8
 8006786:	f107 030c 	add.w	r3, r7, #12
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	2201      	movs	r2, #1
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fff3 	bl	800877c <xTaskGenericNotifyFromISR>
 8006796:	4603      	mov	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d002      	beq.n	80067a2 <osSignalSet+0x3e>
      return 0x80000000;
 800679c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80067a0:	e019      	b.n	80067d6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d015      	beq.n	80067d4 <osSignalSet+0x70>
 80067a8:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <osSignalSet+0x7c>)
 80067aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	e00c      	b.n	80067d4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	2201      	movs	r2, #1
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 ff18 	bl	80085f8 <xTaskGenericNotify>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d002      	beq.n	80067d4 <osSignalSet+0x70>
    return 0x80000000;
 80067ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80067d2:	e000      	b.n	80067d6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80067d4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00f      	beq.n	8006816 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10a      	bne.n	8006812 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2203      	movs	r2, #3
 8006802:	9200      	str	r2, [sp, #0]
 8006804:	2200      	movs	r2, #0
 8006806:	2100      	movs	r1, #0
 8006808:	2001      	movs	r0, #1
 800680a:	f000 f9bf 	bl	8006b8c <xQueueGenericCreateStatic>
 800680e:	4603      	mov	r3, r0
 8006810:	e016      	b.n	8006840 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	e014      	b.n	8006840 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d110      	bne.n	800683e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800681c:	2203      	movs	r2, #3
 800681e:	2100      	movs	r1, #0
 8006820:	2001      	movs	r0, #1
 8006822:	f000 fa30 	bl	8006c86 <xQueueGenericCreate>
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <osSemaphoreCreate+0x56>
 800682e:	2300      	movs	r3, #0
 8006830:	2200      	movs	r2, #0
 8006832:	2100      	movs	r1, #0
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fa81 	bl	8006d3c <xQueueGenericSend>
      return sema;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	e000      	b.n	8006840 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800683e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006852:	2300      	movs	r3, #0
 8006854:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800685c:	2380      	movs	r3, #128	@ 0x80
 800685e:	e03a      	b.n	80068d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	d103      	bne.n	8006874 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800686c:	f04f 33ff 	mov.w	r3, #4294967295
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e009      	b.n	8006888 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d006      	beq.n	8006888 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <osSemaphoreWait+0x40>
      ticks = 1;
 8006884:	2301      	movs	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006888:	f7ff fef2 	bl	8006670 <inHandlerMode>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d017      	beq.n	80068c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	461a      	mov	r2, r3
 8006898:	2100      	movs	r1, #0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fcf0 	bl	8007280 <xQueueReceiveFromISR>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d001      	beq.n	80068aa <osSemaphoreWait+0x62>
      return osErrorOS;
 80068a6:	23ff      	movs	r3, #255	@ 0xff
 80068a8:	e015      	b.n	80068d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d011      	beq.n	80068d4 <osSemaphoreWait+0x8c>
 80068b0:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <osSemaphoreWait+0x98>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	e008      	b.n	80068d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fbcb 	bl	8007060 <xQueueSemaphoreTake>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d001      	beq.n	80068d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80068d0:	23ff      	movs	r3, #255	@ 0xff
 80068d2:	e000      	b.n	80068d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	e000ed04 	.word	0xe000ed04

080068e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80068f4:	f7ff febc 	bl	8006670 <inHandlerMode>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d016      	beq.n	800692c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80068fe:	f107 0308 	add.w	r3, r7, #8
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fb1b 	bl	8006f40 <xQueueGiveFromISR>
 800690a:	4603      	mov	r3, r0
 800690c:	2b01      	cmp	r3, #1
 800690e:	d001      	beq.n	8006914 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006910:	23ff      	movs	r3, #255	@ 0xff
 8006912:	e017      	b.n	8006944 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d013      	beq.n	8006942 <osSemaphoreRelease+0x5e>
 800691a:	4b0c      	ldr	r3, [pc, #48]	@ (800694c <osSemaphoreRelease+0x68>)
 800691c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	e00a      	b.n	8006942 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800692c:	2300      	movs	r3, #0
 800692e:	2200      	movs	r2, #0
 8006930:	2100      	movs	r1, #0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fa02 	bl	8006d3c <xQueueGenericSend>
 8006938:	4603      	mov	r3, r0
 800693a:	2b01      	cmp	r3, #1
 800693c:	d001      	beq.n	8006942 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800693e:	23ff      	movs	r3, #255	@ 0xff
 8006940:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f103 0208 	add.w	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f04f 32ff 	mov.w	r2, #4294967295
 8006968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f103 0208 	add.w	r2, r3, #8
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f103 0208 	add.w	r2, r3, #8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069aa:	b480      	push	{r7}
 80069ac:	b085      	sub	sp, #20
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d103      	bne.n	8006a12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e00c      	b.n	8006a2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3308      	adds	r3, #8
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e002      	b.n	8006a20 <vListInsert+0x2e>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d2f6      	bcs.n	8006a1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]
}
 8006a58:	bf00      	nop
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6892      	ldr	r2, [r2, #8]
 8006a7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6852      	ldr	r2, [r2, #4]
 8006a84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d103      	bne.n	8006a98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	1e5a      	subs	r2, r3, #1
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ae4:	f002 f8c8 	bl	8008c78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	68f9      	ldr	r1, [r7, #12]
 8006af2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	441a      	add	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b14:	3b01      	subs	r3, #1
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b1a:	fb01 f303 	mul.w	r3, r1, r3
 8006b1e:	441a      	add	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	22ff      	movs	r2, #255	@ 0xff
 8006b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	22ff      	movs	r2, #255	@ 0xff
 8006b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d114      	bne.n	8006b64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01a      	beq.n	8006b78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3310      	adds	r3, #16
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 f984 	bl	8007e54 <xTaskRemoveFromEventList>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d012      	beq.n	8006b78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b52:	4b0d      	ldr	r3, [pc, #52]	@ (8006b88 <xQueueGenericReset+0xd0>)
 8006b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	e009      	b.n	8006b78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3310      	adds	r3, #16
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fef1 	bl	8006950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3324      	adds	r3, #36	@ 0x24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff feec 	bl	8006950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b78:	f002 f8b0 	bl	8008cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b7c:	2301      	movs	r3, #1
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08e      	sub	sp, #56	@ 0x38
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10b      	bne.n	8006bb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bb2:	bf00      	nop
 8006bb4:	bf00      	nop
 8006bb6:	e7fd      	b.n	8006bb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10b      	bne.n	8006bd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <xQueueGenericCreateStatic+0x56>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <xQueueGenericCreateStatic+0x5a>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueGenericCreateStatic+0x5c>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	623b      	str	r3, [r7, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	bf00      	nop
 8006c02:	e7fd      	b.n	8006c00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <xQueueGenericCreateStatic+0x84>
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <xQueueGenericCreateStatic+0x88>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <xQueueGenericCreateStatic+0x8a>
 8006c14:	2300      	movs	r3, #0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	61fb      	str	r3, [r7, #28]
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	e7fd      	b.n	8006c2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c32:	2348      	movs	r3, #72	@ 0x48
 8006c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2b48      	cmp	r3, #72	@ 0x48
 8006c3a:	d00b      	beq.n	8006c54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	61bb      	str	r3, [r7, #24]
}
 8006c4e:	bf00      	nop
 8006c50:	bf00      	nop
 8006c52:	e7fd      	b.n	8006c50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00d      	beq.n	8006c7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f840 	bl	8006cfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3730      	adds	r7, #48	@ 0x30
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b08a      	sub	sp, #40	@ 0x28
 8006c8a:	af02      	add	r7, sp, #8
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	4613      	mov	r3, r2
 8006c92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	613b      	str	r3, [r7, #16]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	fb02 f303 	mul.w	r3, r2, r3
 8006cba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	3348      	adds	r3, #72	@ 0x48
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f002 f8fb 	bl	8008ebc <pvPortMalloc>
 8006cc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d011      	beq.n	8006cf2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	3348      	adds	r3, #72	@ 0x48
 8006cd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ce0:	79fa      	ldrb	r2, [r7, #7]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 f805 	bl	8006cfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d103      	bne.n	8006d18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	69b8      	ldr	r0, [r7, #24]
 8006d2e:	f7ff fec3 	bl	8006ab8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08e      	sub	sp, #56	@ 0x38
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <xQueueGenericSend+0x34>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	e7fd      	b.n	8006d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d103      	bne.n	8006d7e <xQueueGenericSend+0x42>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <xQueueGenericSend+0x46>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <xQueueGenericSend+0x48>
 8006d82:	2300      	movs	r3, #0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10b      	bne.n	8006da0 <xQueueGenericSend+0x64>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	e7fd      	b.n	8006d9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d103      	bne.n	8006dae <xQueueGenericSend+0x72>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <xQueueGenericSend+0x76>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <xQueueGenericSend+0x78>
 8006db2:	2300      	movs	r3, #0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10b      	bne.n	8006dd0 <xQueueGenericSend+0x94>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	623b      	str	r3, [r7, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dd0:	f001 fa06 	bl	80081e0 <xTaskGetSchedulerState>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <xQueueGenericSend+0xa4>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <xQueueGenericSend+0xa8>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <xQueueGenericSend+0xaa>
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <xQueueGenericSend+0xc6>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	61fb      	str	r3, [r7, #28]
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	e7fd      	b.n	8006dfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e02:	f001 ff39 	bl	8008c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <xQueueGenericSend+0xdc>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d129      	bne.n	8006e6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e1e:	f000 fac9 	bl	80073b4 <prvCopyDataToQueue>
 8006e22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d010      	beq.n	8006e4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	3324      	adds	r3, #36	@ 0x24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 f80f 	bl	8007e54 <xTaskRemoveFromEventList>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d013      	beq.n	8006e64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8006f3c <xQueueGenericSend+0x200>)
 8006e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	e00a      	b.n	8006e64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e54:	4b39      	ldr	r3, [pc, #228]	@ (8006f3c <xQueueGenericSend+0x200>)
 8006e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e64:	f001 ff3a 	bl	8008cdc <vPortExitCritical>
				return pdPASS;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e063      	b.n	8006f34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d103      	bne.n	8006e7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e72:	f001 ff33 	bl	8008cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e05c      	b.n	8006f34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e80:	f107 0314 	add.w	r3, r7, #20
 8006e84:	4618      	mov	r0, r3
 8006e86:	f001 f849 	bl	8007f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e8e:	f001 ff25 	bl	8008cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e92:	f000 fdef 	bl	8007a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e96:	f001 feef 	bl	8008c78 <vPortEnterCritical>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ea0:	b25b      	sxtb	r3, r3
 8006ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea6:	d103      	bne.n	8006eb0 <xQueueGenericSend+0x174>
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eb6:	b25b      	sxtb	r3, r3
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebc:	d103      	bne.n	8006ec6 <xQueueGenericSend+0x18a>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ec6:	f001 ff09 	bl	8008cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eca:	1d3a      	adds	r2, r7, #4
 8006ecc:	f107 0314 	add.w	r3, r7, #20
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 f838 	bl	8007f48 <xTaskCheckForTimeOut>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d124      	bne.n	8006f28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ee0:	f000 fb60 	bl	80075a4 <prvIsQueueFull>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d018      	beq.n	8006f1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eec:	3310      	adds	r3, #16
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 ff88 	bl	8007e08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ef8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006efa:	f000 faeb 	bl	80074d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006efe:	f000 fdc7 	bl	8007a90 <xTaskResumeAll>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f47f af7c 	bne.w	8006e02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <xQueueGenericSend+0x200>)
 8006f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	e772      	b.n	8006e02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f1e:	f000 fad9 	bl	80074d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f22:	f000 fdb5 	bl	8007a90 <xTaskResumeAll>
 8006f26:	e76c      	b.n	8006e02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f2a:	f000 fad3 	bl	80074d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f2e:	f000 fdaf 	bl	8007a90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3738      	adds	r7, #56	@ 0x38
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	e000ed04 	.word	0xe000ed04

08006f40 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	@ 0x38
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	623b      	str	r3, [r7, #32]
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	61fb      	str	r3, [r7, #28]
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	e7fd      	b.n	8006f88 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <xQueueGiveFromISR+0x5c>
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <xQueueGiveFromISR+0x60>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <xQueueGiveFromISR+0x62>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	61bb      	str	r3, [r7, #24]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fbe:	f001 ff3b 	bl	8008e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fc2:	f3ef 8211 	mrs	r2, BASEPRI
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	617a      	str	r2, [r7, #20]
 8006fd8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d22b      	bcs.n	8007046 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007000:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d112      	bne.n	8007030 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d016      	beq.n	8007040 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007014:	3324      	adds	r3, #36	@ 0x24
 8007016:	4618      	mov	r0, r3
 8007018:	f000 ff1c 	bl	8007e54 <xTaskRemoveFromEventList>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00e      	beq.n	8007040 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2201      	movs	r2, #1
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e007      	b.n	8007040 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007034:	3301      	adds	r3, #1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	b25a      	sxtb	r2, r3
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007040:	2301      	movs	r3, #1
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
 8007044:	e001      	b.n	800704a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007046:	2300      	movs	r3, #0
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
 800704a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007054:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007058:	4618      	mov	r0, r3
 800705a:	3738      	adds	r7, #56	@ 0x38
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08e      	sub	sp, #56	@ 0x38
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007072:	2300      	movs	r3, #0
 8007074:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10b      	bne.n	8007094 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	623b      	str	r3, [r7, #32]
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	61fb      	str	r3, [r7, #28]
}
 80070ae:	bf00      	nop
 80070b0:	bf00      	nop
 80070b2:	e7fd      	b.n	80070b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070b4:	f001 f894 	bl	80081e0 <xTaskGetSchedulerState>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <xQueueSemaphoreTake+0x64>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <xQueueSemaphoreTake+0x68>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <xQueueSemaphoreTake+0x6a>
 80070c8:	2300      	movs	r3, #0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	61bb      	str	r3, [r7, #24]
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	e7fd      	b.n	80070e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070e6:	f001 fdc7 	bl	8008c78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80070ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d024      	beq.n	8007140 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	1e5a      	subs	r2, r3, #1
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007106:	f001 fa17 	bl	8008538 <pvTaskIncrementMutexHeldCount>
 800710a:	4602      	mov	r2, r0
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	3310      	adds	r3, #16
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fe99 	bl	8007e54 <xTaskRemoveFromEventList>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007128:	4b54      	ldr	r3, [pc, #336]	@ (800727c <xQueueSemaphoreTake+0x21c>)
 800712a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007138:	f001 fdd0 	bl	8008cdc <vPortExitCritical>
				return pdPASS;
 800713c:	2301      	movs	r3, #1
 800713e:	e098      	b.n	8007272 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d112      	bne.n	800716c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	617b      	str	r3, [r7, #20]
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007164:	f001 fdba 	bl	8008cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007168:	2300      	movs	r3, #0
 800716a:	e082      	b.n	8007272 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007172:	f107 030c 	add.w	r3, r7, #12
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fed0 	bl	8007f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800717c:	2301      	movs	r3, #1
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007180:	f001 fdac 	bl	8008cdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007184:	f000 fc76 	bl	8007a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007188:	f001 fd76 	bl	8008c78 <vPortEnterCritical>
 800718c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007192:	b25b      	sxtb	r3, r3
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007198:	d103      	bne.n	80071a2 <xQueueSemaphoreTake+0x142>
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071a8:	b25b      	sxtb	r3, r3
 80071aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ae:	d103      	bne.n	80071b8 <xQueueSemaphoreTake+0x158>
 80071b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071b8:	f001 fd90 	bl	8008cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071bc:	463a      	mov	r2, r7
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	4611      	mov	r1, r2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 febf 	bl	8007f48 <xTaskCheckForTimeOut>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d132      	bne.n	8007236 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071d2:	f000 f9d1 	bl	8007578 <prvIsQueueEmpty>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d026      	beq.n	800722a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80071e4:	f001 fd48 	bl	8008c78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f815 	bl	800821c <xTaskPriorityInherit>
 80071f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80071f4:	f001 fd72 	bl	8008cdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	3324      	adds	r3, #36	@ 0x24
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fe01 	bl	8007e08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007208:	f000 f964 	bl	80074d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800720c:	f000 fc40 	bl	8007a90 <xTaskResumeAll>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	f47f af67 	bne.w	80070e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007218:	4b18      	ldr	r3, [pc, #96]	@ (800727c <xQueueSemaphoreTake+0x21c>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	e75d      	b.n	80070e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800722a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800722c:	f000 f952 	bl	80074d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007230:	f000 fc2e 	bl	8007a90 <xTaskResumeAll>
 8007234:	e757      	b.n	80070e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007236:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007238:	f000 f94c 	bl	80074d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800723c:	f000 fc28 	bl	8007a90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007242:	f000 f999 	bl	8007578 <prvIsQueueEmpty>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	f43f af4c 	beq.w	80070e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00d      	beq.n	8007270 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007254:	f001 fd10 	bl	8008c78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800725a:	f000 f893 	bl	8007384 <prvGetDisinheritPriorityAfterTimeout>
 800725e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007266:	4618      	mov	r0, r3
 8007268:	f001 f8d6 	bl	8008418 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800726c:	f001 fd36 	bl	8008cdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007270:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007272:	4618      	mov	r0, r3
 8007274:	3738      	adds	r7, #56	@ 0x38
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08e      	sub	sp, #56	@ 0x38
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	623b      	str	r3, [r7, #32]
}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop
 80072ac:	e7fd      	b.n	80072aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d103      	bne.n	80072bc <xQueueReceiveFromISR+0x3c>
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <xQueueReceiveFromISR+0x40>
 80072bc:	2301      	movs	r3, #1
 80072be:	e000      	b.n	80072c2 <xQueueReceiveFromISR+0x42>
 80072c0:	2300      	movs	r3, #0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10b      	bne.n	80072de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	61fb      	str	r3, [r7, #28]
}
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	e7fd      	b.n	80072da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072de:	f001 fdab 	bl	8008e38 <vPortValidateInterruptPriority>
	__asm volatile
 80072e2:	f3ef 8211 	mrs	r2, BASEPRI
 80072e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	61ba      	str	r2, [r7, #24]
 80072f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80072fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007302:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007306:	2b00      	cmp	r3, #0
 8007308:	d02f      	beq.n	800736a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007318:	f000 f8b6 	bl	8007488 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800731c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731e:	1e5a      	subs	r2, r3, #1
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007324:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d112      	bne.n	8007354 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d016      	beq.n	8007364 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	3310      	adds	r3, #16
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fd8a 	bl	8007e54 <xTaskRemoveFromEventList>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e007      	b.n	8007364 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007358:	3301      	adds	r3, #1
 800735a:	b2db      	uxtb	r3, r3
 800735c:	b25a      	sxtb	r2, r3
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007364:	2301      	movs	r3, #1
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34
 8007368:	e001      	b.n	800736e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800736a:	2300      	movs	r3, #0
 800736c:	637b      	str	r3, [r7, #52]	@ 0x34
 800736e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007370:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f383 8811 	msr	BASEPRI, r3
}
 8007378:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800737c:	4618      	mov	r0, r3
 800737e:	3738      	adds	r7, #56	@ 0x38
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1c3 0307 	rsb	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	e001      	b.n	80073a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80073a6:	68fb      	ldr	r3, [r7, #12]
	}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10d      	bne.n	80073ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d14d      	bne.n	8007476 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 ff92 	bl	8008308 <xTaskPriorityDisinherit>
 80073e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	609a      	str	r2, [r3, #8]
 80073ec:	e043      	b.n	8007476 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d119      	bne.n	8007428 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6858      	ldr	r0, [r3, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fc:	461a      	mov	r2, r3
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	f003 f87b 	bl	800a4fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	441a      	add	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	429a      	cmp	r2, r3
 800741c:	d32b      	bcc.n	8007476 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	605a      	str	r2, [r3, #4]
 8007426:	e026      	b.n	8007476 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68d8      	ldr	r0, [r3, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	461a      	mov	r2, r3
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	f003 f861 	bl	800a4fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007440:	425b      	negs	r3, r3
 8007442:	441a      	add	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	429a      	cmp	r2, r3
 8007452:	d207      	bcs.n	8007464 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745c:	425b      	negs	r3, r3
 800745e:	441a      	add	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d105      	bne.n	8007476 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	3b01      	subs	r3, #1
 8007474:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800747e:	697b      	ldr	r3, [r7, #20]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d018      	beq.n	80074cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a2:	441a      	add	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d303      	bcc.n	80074bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68d9      	ldr	r1, [r3, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c4:	461a      	mov	r2, r3
 80074c6:	6838      	ldr	r0, [r7, #0]
 80074c8:	f003 f817 	bl	800a4fa <memcpy>
	}
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074dc:	f001 fbcc 	bl	8008c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074e8:	e011      	b.n	800750e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d012      	beq.n	8007518 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3324      	adds	r3, #36	@ 0x24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fcac 	bl	8007e54 <xTaskRemoveFromEventList>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007502:	f000 fd85 	bl	8008010 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	3b01      	subs	r3, #1
 800750a:	b2db      	uxtb	r3, r3
 800750c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800750e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007512:	2b00      	cmp	r3, #0
 8007514:	dce9      	bgt.n	80074ea <prvUnlockQueue+0x16>
 8007516:	e000      	b.n	800751a <prvUnlockQueue+0x46>
					break;
 8007518:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	22ff      	movs	r2, #255	@ 0xff
 800751e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007522:	f001 fbdb 	bl	8008cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007526:	f001 fba7 	bl	8008c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007530:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007532:	e011      	b.n	8007558 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d012      	beq.n	8007562 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3310      	adds	r3, #16
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fc87 	bl	8007e54 <xTaskRemoveFromEventList>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800754c:	f000 fd60 	bl	8008010 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	3b01      	subs	r3, #1
 8007554:	b2db      	uxtb	r3, r3
 8007556:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	dce9      	bgt.n	8007534 <prvUnlockQueue+0x60>
 8007560:	e000      	b.n	8007564 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007562:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	22ff      	movs	r2, #255	@ 0xff
 8007568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800756c:	f001 fbb6 	bl	8008cdc <vPortExitCritical>
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007580:	f001 fb7a 	bl	8008c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007588:	2b00      	cmp	r3, #0
 800758a:	d102      	bne.n	8007592 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800758c:	2301      	movs	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e001      	b.n	8007596 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007596:	f001 fba1 	bl	8008cdc <vPortExitCritical>

	return xReturn;
 800759a:	68fb      	ldr	r3, [r7, #12]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075ac:	f001 fb64 	bl	8008c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d102      	bne.n	80075c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	e001      	b.n	80075c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075c6:	f001 fb89 	bl	8008cdc <vPortExitCritical>

	return xReturn;
 80075ca:	68fb      	ldr	r3, [r7, #12]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08e      	sub	sp, #56	@ 0x38
 80075d8:	af04      	add	r7, sp, #16
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10b      	bne.n	8007600 <xTaskCreateStatic+0x2c>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	623b      	str	r3, [r7, #32]
}
 80075fa:	bf00      	nop
 80075fc:	bf00      	nop
 80075fe:	e7fd      	b.n	80075fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10b      	bne.n	800761e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	61fb      	str	r3, [r7, #28]
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	e7fd      	b.n	800761a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800761e:	23a0      	movs	r3, #160	@ 0xa0
 8007620:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	2ba0      	cmp	r3, #160	@ 0xa0
 8007626:	d00b      	beq.n	8007640 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	61bb      	str	r3, [r7, #24]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007640:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01e      	beq.n	8007686 <xTaskCreateStatic+0xb2>
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01b      	beq.n	8007686 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800764e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007656:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	2202      	movs	r2, #2
 800765c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007660:	2300      	movs	r3, #0
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	f107 0314 	add.w	r3, r7, #20
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f851 	bl	8007720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800767e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007680:	f000 f8ee 	bl	8007860 <prvAddNewTaskToReadyList>
 8007684:	e001      	b.n	800768a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800768a:	697b      	ldr	r3, [r7, #20]
	}
 800768c:	4618      	mov	r0, r3
 800768e:	3728      	adds	r7, #40	@ 0x28
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	@ 0x30
 8007698:	af04      	add	r7, sp, #16
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	603b      	str	r3, [r7, #0]
 80076a0:	4613      	mov	r3, r2
 80076a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 fc07 	bl	8008ebc <pvPortMalloc>
 80076ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00e      	beq.n	80076d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076b6:	20a0      	movs	r0, #160	@ 0xa0
 80076b8:	f001 fc00 	bl	8008ebc <pvPortMalloc>
 80076bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80076ca:	e005      	b.n	80076d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076cc:	6978      	ldr	r0, [r7, #20]
 80076ce:	f001 fcc3 	bl	8009058 <vPortFree>
 80076d2:	e001      	b.n	80076d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d017      	beq.n	800770e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	2300      	movs	r3, #0
 80076ea:	9303      	str	r3, [sp, #12]
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	9302      	str	r3, [sp, #8]
 80076f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f80f 	bl	8007720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007702:	69f8      	ldr	r0, [r7, #28]
 8007704:	f000 f8ac 	bl	8007860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007708:	2301      	movs	r3, #1
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	e002      	b.n	8007714 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800770e:	f04f 33ff 	mov.w	r3, #4294967295
 8007712:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007714:	69bb      	ldr	r3, [r7, #24]
	}
 8007716:	4618      	mov	r0, r3
 8007718:	3720      	adds	r7, #32
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007738:	3b01      	subs	r3, #1
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f023 0307 	bic.w	r3, r3, #7
 8007746:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	617b      	str	r3, [r7, #20]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01f      	beq.n	80077b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	e012      	b.n	800779c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	7819      	ldrb	r1, [r3, #0]
 800777e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	3334      	adds	r3, #52	@ 0x34
 8007786:	460a      	mov	r2, r1
 8007788:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	3301      	adds	r3, #1
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b0f      	cmp	r3, #15
 80077a0:	d9e9      	bls.n	8007776 <prvInitialiseNewTask+0x56>
 80077a2:	e000      	b.n	80077a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80077a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077ae:	e003      	b.n	80077b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ba:	2b06      	cmp	r3, #6
 80077bc:	d901      	bls.n	80077c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077be:	2306      	movs	r3, #6
 80077c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	2200      	movs	r2, #0
 80077d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff f8d9 	bl	8006990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	3318      	adds	r3, #24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff f8d4 	bl	8006990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f0:	f1c3 0207 	rsb	r2, r3, #7
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	2200      	movs	r2, #0
 800780a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	334c      	adds	r3, #76	@ 0x4c
 8007812:	224c      	movs	r2, #76	@ 0x4c
 8007814:	2100      	movs	r1, #0
 8007816:	4618      	mov	r0, r3
 8007818:	f002 fd7b 	bl	800a312 <memset>
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	4a0d      	ldr	r2, [pc, #52]	@ (8007854 <prvInitialiseNewTask+0x134>)
 8007820:	651a      	str	r2, [r3, #80]	@ 0x50
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	4a0c      	ldr	r2, [pc, #48]	@ (8007858 <prvInitialiseNewTask+0x138>)
 8007826:	655a      	str	r2, [r3, #84]	@ 0x54
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	4a0c      	ldr	r2, [pc, #48]	@ (800785c <prvInitialiseNewTask+0x13c>)
 800782c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	68f9      	ldr	r1, [r7, #12]
 8007832:	69b8      	ldr	r0, [r7, #24]
 8007834:	f001 f8ee 	bl	8008a14 <pxPortInitialiseStack>
 8007838:	4602      	mov	r2, r0
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800784a:	bf00      	nop
 800784c:	3720      	adds	r7, #32
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	2000458c 	.word	0x2000458c
 8007858:	200045f4 	.word	0x200045f4
 800785c:	2000465c 	.word	0x2000465c

08007860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007868:	f001 fa06 	bl	8008c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800786c:	4b2a      	ldr	r3, [pc, #168]	@ (8007918 <prvAddNewTaskToReadyList+0xb8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	4a29      	ldr	r2, [pc, #164]	@ (8007918 <prvAddNewTaskToReadyList+0xb8>)
 8007874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007876:	4b29      	ldr	r3, [pc, #164]	@ (800791c <prvAddNewTaskToReadyList+0xbc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d109      	bne.n	8007892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800787e:	4a27      	ldr	r2, [pc, #156]	@ (800791c <prvAddNewTaskToReadyList+0xbc>)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007884:	4b24      	ldr	r3, [pc, #144]	@ (8007918 <prvAddNewTaskToReadyList+0xb8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d110      	bne.n	80078ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800788c:	f000 fbe4 	bl	8008058 <prvInitialiseTaskLists>
 8007890:	e00d      	b.n	80078ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007892:	4b23      	ldr	r3, [pc, #140]	@ (8007920 <prvAddNewTaskToReadyList+0xc0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800789a:	4b20      	ldr	r3, [pc, #128]	@ (800791c <prvAddNewTaskToReadyList+0xbc>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d802      	bhi.n	80078ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078a8:	4a1c      	ldr	r2, [pc, #112]	@ (800791c <prvAddNewTaskToReadyList+0xbc>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007924 <prvAddNewTaskToReadyList+0xc4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007924 <prvAddNewTaskToReadyList+0xc4>)
 80078b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078bc:	2201      	movs	r2, #1
 80078be:	409a      	lsls	r2, r3
 80078c0:	4b19      	ldr	r3, [pc, #100]	@ (8007928 <prvAddNewTaskToReadyList+0xc8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	4a18      	ldr	r2, [pc, #96]	@ (8007928 <prvAddNewTaskToReadyList+0xc8>)
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4a15      	ldr	r2, [pc, #84]	@ (800792c <prvAddNewTaskToReadyList+0xcc>)
 80078d8:	441a      	add	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7ff f862 	bl	80069aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078e6:	f001 f9f9 	bl	8008cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <prvAddNewTaskToReadyList+0xc0>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078f2:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <prvAddNewTaskToReadyList+0xbc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d207      	bcs.n	8007910 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <prvAddNewTaskToReadyList+0xd0>)
 8007902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000930 	.word	0x20000930
 800791c:	20000830 	.word	0x20000830
 8007920:	2000093c 	.word	0x2000093c
 8007924:	2000094c 	.word	0x2000094c
 8007928:	20000938 	.word	0x20000938
 800792c:	20000834 	.word	0x20000834
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d018      	beq.n	8007978 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007946:	4b14      	ldr	r3, [pc, #80]	@ (8007998 <vTaskDelay+0x64>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00b      	beq.n	8007966 <vTaskDelay+0x32>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60bb      	str	r3, [r7, #8]
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	e7fd      	b.n	8007962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007966:	f000 f885 	bl	8007a74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800796a:	2100      	movs	r1, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 ffeb 	bl	8008948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007972:	f000 f88d 	bl	8007a90 <xTaskResumeAll>
 8007976:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d107      	bne.n	800798e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800797e:	4b07      	ldr	r3, [pc, #28]	@ (800799c <vTaskDelay+0x68>)
 8007980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20000958 	.word	0x20000958
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	@ 0x28
 80079a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079ae:	463a      	mov	r2, r7
 80079b0:	1d39      	adds	r1, r7, #4
 80079b2:	f107 0308 	add.w	r3, r7, #8
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fa fbca 	bl	8002150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	9202      	str	r2, [sp, #8]
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	2300      	movs	r3, #0
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	460a      	mov	r2, r1
 80079ce:	4921      	ldr	r1, [pc, #132]	@ (8007a54 <vTaskStartScheduler+0xb4>)
 80079d0:	4821      	ldr	r0, [pc, #132]	@ (8007a58 <vTaskStartScheduler+0xb8>)
 80079d2:	f7ff fdff 	bl	80075d4 <xTaskCreateStatic>
 80079d6:	4603      	mov	r3, r0
 80079d8:	4a20      	ldr	r2, [pc, #128]	@ (8007a5c <vTaskStartScheduler+0xbc>)
 80079da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079dc:	4b1f      	ldr	r3, [pc, #124]	@ (8007a5c <vTaskStartScheduler+0xbc>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079e4:	2301      	movs	r3, #1
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e001      	b.n	80079ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d11b      	bne.n	8007a2c <vTaskStartScheduler+0x8c>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	613b      	str	r3, [r7, #16]
}
 8007a06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a08:	4b15      	ldr	r3, [pc, #84]	@ (8007a60 <vTaskStartScheduler+0xc0>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	334c      	adds	r3, #76	@ 0x4c
 8007a0e:	4a15      	ldr	r2, [pc, #84]	@ (8007a64 <vTaskStartScheduler+0xc4>)
 8007a10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a12:	4b15      	ldr	r3, [pc, #84]	@ (8007a68 <vTaskStartScheduler+0xc8>)
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a1a:	4b14      	ldr	r3, [pc, #80]	@ (8007a6c <vTaskStartScheduler+0xcc>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a20:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <vTaskStartScheduler+0xd0>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a26:	f001 f883 	bl	8008b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a2a:	e00f      	b.n	8007a4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a32:	d10b      	bne.n	8007a4c <vTaskStartScheduler+0xac>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	60fb      	str	r3, [r7, #12]
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	e7fd      	b.n	8007a48 <vTaskStartScheduler+0xa8>
}
 8007a4c:	bf00      	nop
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	0800c52c 	.word	0x0800c52c
 8007a58:	08008029 	.word	0x08008029
 8007a5c:	20000954 	.word	0x20000954
 8007a60:	20000830 	.word	0x20000830
 8007a64:	20000194 	.word	0x20000194
 8007a68:	20000950 	.word	0x20000950
 8007a6c:	2000093c 	.word	0x2000093c
 8007a70:	20000934 	.word	0x20000934

08007a74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a78:	4b04      	ldr	r3, [pc, #16]	@ (8007a8c <vTaskSuspendAll+0x18>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	4a03      	ldr	r2, [pc, #12]	@ (8007a8c <vTaskSuspendAll+0x18>)
 8007a80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a82:	bf00      	nop
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20000958 	.word	0x20000958

08007a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a9e:	4b42      	ldr	r3, [pc, #264]	@ (8007ba8 <xTaskResumeAll+0x118>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10b      	bne.n	8007abe <xTaskResumeAll+0x2e>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	603b      	str	r3, [r7, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007abe:	f001 f8db 	bl	8008c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ac2:	4b39      	ldr	r3, [pc, #228]	@ (8007ba8 <xTaskResumeAll+0x118>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4a37      	ldr	r2, [pc, #220]	@ (8007ba8 <xTaskResumeAll+0x118>)
 8007aca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007acc:	4b36      	ldr	r3, [pc, #216]	@ (8007ba8 <xTaskResumeAll+0x118>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d161      	bne.n	8007b98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ad4:	4b35      	ldr	r3, [pc, #212]	@ (8007bac <xTaskResumeAll+0x11c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d05d      	beq.n	8007b98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007adc:	e02e      	b.n	8007b3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ade:	4b34      	ldr	r3, [pc, #208]	@ (8007bb0 <xTaskResumeAll+0x120>)
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3318      	adds	r3, #24
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe ffba 	bl	8006a64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe ffb5 	bl	8006a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	2201      	movs	r2, #1
 8007b00:	409a      	lsls	r2, r3
 8007b02:	4b2c      	ldr	r3, [pc, #176]	@ (8007bb4 <xTaskResumeAll+0x124>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb4 <xTaskResumeAll+0x124>)
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4a27      	ldr	r2, [pc, #156]	@ (8007bb8 <xTaskResumeAll+0x128>)
 8007b1a:	441a      	add	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f7fe ff41 	bl	80069aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2c:	4b23      	ldr	r3, [pc, #140]	@ (8007bbc <xTaskResumeAll+0x12c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d302      	bcc.n	8007b3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b36:	4b22      	ldr	r3, [pc, #136]	@ (8007bc0 <xTaskResumeAll+0x130>)
 8007b38:	2201      	movs	r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb0 <xTaskResumeAll+0x120>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1cc      	bne.n	8007ade <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b4a:	f000 fb29 	bl	80081a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc4 <xTaskResumeAll+0x134>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d010      	beq.n	8007b7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b5a:	f000 f837 	bl	8007bcc <xTaskIncrementTick>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b64:	4b16      	ldr	r3, [pc, #88]	@ (8007bc0 <xTaskResumeAll+0x130>)
 8007b66:	2201      	movs	r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f1      	bne.n	8007b5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b76:	4b13      	ldr	r3, [pc, #76]	@ (8007bc4 <xTaskResumeAll+0x134>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b7c:	4b10      	ldr	r3, [pc, #64]	@ (8007bc0 <xTaskResumeAll+0x130>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b84:	2301      	movs	r3, #1
 8007b86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b88:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc8 <xTaskResumeAll+0x138>)
 8007b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b98:	f001 f8a0 	bl	8008cdc <vPortExitCritical>

	return xAlreadyYielded;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000958 	.word	0x20000958
 8007bac:	20000930 	.word	0x20000930
 8007bb0:	200008f0 	.word	0x200008f0
 8007bb4:	20000938 	.word	0x20000938
 8007bb8:	20000834 	.word	0x20000834
 8007bbc:	20000830 	.word	0x20000830
 8007bc0:	20000944 	.word	0x20000944
 8007bc4:	20000940 	.word	0x20000940
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd6:	4b4f      	ldr	r3, [pc, #316]	@ (8007d14 <xTaskIncrementTick+0x148>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f040 808f 	bne.w	8007cfe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007be0:	4b4d      	ldr	r3, [pc, #308]	@ (8007d18 <xTaskIncrementTick+0x14c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3301      	adds	r3, #1
 8007be6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007be8:	4a4b      	ldr	r2, [pc, #300]	@ (8007d18 <xTaskIncrementTick+0x14c>)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d121      	bne.n	8007c38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bf4:	4b49      	ldr	r3, [pc, #292]	@ (8007d1c <xTaskIncrementTick+0x150>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	603b      	str	r3, [r7, #0]
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	e7fd      	b.n	8007c12 <xTaskIncrementTick+0x46>
 8007c16:	4b41      	ldr	r3, [pc, #260]	@ (8007d1c <xTaskIncrementTick+0x150>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	4b40      	ldr	r3, [pc, #256]	@ (8007d20 <xTaskIncrementTick+0x154>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a3e      	ldr	r2, [pc, #248]	@ (8007d1c <xTaskIncrementTick+0x150>)
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	4a3e      	ldr	r2, [pc, #248]	@ (8007d20 <xTaskIncrementTick+0x154>)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007d24 <xTaskIncrementTick+0x158>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	4a3c      	ldr	r2, [pc, #240]	@ (8007d24 <xTaskIncrementTick+0x158>)
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	f000 fab4 	bl	80081a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c38:	4b3b      	ldr	r3, [pc, #236]	@ (8007d28 <xTaskIncrementTick+0x15c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d348      	bcc.n	8007cd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c42:	4b36      	ldr	r3, [pc, #216]	@ (8007d1c <xTaskIncrementTick+0x150>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c4c:	4b36      	ldr	r3, [pc, #216]	@ (8007d28 <xTaskIncrementTick+0x15c>)
 8007c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c52:	601a      	str	r2, [r3, #0]
					break;
 8007c54:	e03e      	b.n	8007cd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c56:	4b31      	ldr	r3, [pc, #196]	@ (8007d1c <xTaskIncrementTick+0x150>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d203      	bcs.n	8007c76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8007d28 <xTaskIncrementTick+0x15c>)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c74:	e02e      	b.n	8007cd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fef2 	bl	8006a64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe fee9 	bl	8006a64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c96:	2201      	movs	r2, #1
 8007c98:	409a      	lsls	r2, r3
 8007c9a:	4b24      	ldr	r3, [pc, #144]	@ (8007d2c <xTaskIncrementTick+0x160>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	4a22      	ldr	r2, [pc, #136]	@ (8007d2c <xTaskIncrementTick+0x160>)
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d30 <xTaskIncrementTick+0x164>)
 8007cb2:	441a      	add	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7fe fe75 	bl	80069aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d34 <xTaskIncrementTick+0x168>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d3b9      	bcc.n	8007c42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd2:	e7b6      	b.n	8007c42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cd4:	4b17      	ldr	r3, [pc, #92]	@ (8007d34 <xTaskIncrementTick+0x168>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cda:	4915      	ldr	r1, [pc, #84]	@ (8007d30 <xTaskIncrementTick+0x164>)
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d901      	bls.n	8007cf0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007cec:	2301      	movs	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cf0:	4b11      	ldr	r3, [pc, #68]	@ (8007d38 <xTaskIncrementTick+0x16c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	e004      	b.n	8007d08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8007d3c <xTaskIncrementTick+0x170>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3301      	adds	r3, #1
 8007d04:	4a0d      	ldr	r2, [pc, #52]	@ (8007d3c <xTaskIncrementTick+0x170>)
 8007d06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d08:	697b      	ldr	r3, [r7, #20]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000958 	.word	0x20000958
 8007d18:	20000934 	.word	0x20000934
 8007d1c:	200008e8 	.word	0x200008e8
 8007d20:	200008ec 	.word	0x200008ec
 8007d24:	20000948 	.word	0x20000948
 8007d28:	20000950 	.word	0x20000950
 8007d2c:	20000938 	.word	0x20000938
 8007d30:	20000834 	.word	0x20000834
 8007d34:	20000830 	.word	0x20000830
 8007d38:	20000944 	.word	0x20000944
 8007d3c:	20000940 	.word	0x20000940

08007d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d46:	4b2a      	ldr	r3, [pc, #168]	@ (8007df0 <vTaskSwitchContext+0xb0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d4e:	4b29      	ldr	r3, [pc, #164]	@ (8007df4 <vTaskSwitchContext+0xb4>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d54:	e045      	b.n	8007de2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007d56:	4b27      	ldr	r3, [pc, #156]	@ (8007df4 <vTaskSwitchContext+0xb4>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5c:	4b26      	ldr	r3, [pc, #152]	@ (8007df8 <vTaskSwitchContext+0xb8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	fab3 f383 	clz	r3, r3
 8007d68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	f1c3 031f 	rsb	r3, r3, #31
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	4922      	ldr	r1, [pc, #136]	@ (8007dfc <vTaskSwitchContext+0xbc>)
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	607b      	str	r3, [r7, #4]
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	e7fd      	b.n	8007d9a <vTaskSwitchContext+0x5a>
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4a14      	ldr	r2, [pc, #80]	@ (8007dfc <vTaskSwitchContext+0xbc>)
 8007daa:	4413      	add	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d104      	bne.n	8007dce <vTaskSwitchContext+0x8e>
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	605a      	str	r2, [r3, #4]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007e00 <vTaskSwitchContext+0xc0>)
 8007dd6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dd8:	4b09      	ldr	r3, [pc, #36]	@ (8007e00 <vTaskSwitchContext+0xc0>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	334c      	adds	r3, #76	@ 0x4c
 8007dde:	4a09      	ldr	r2, [pc, #36]	@ (8007e04 <vTaskSwitchContext+0xc4>)
 8007de0:	6013      	str	r3, [r2, #0]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20000958 	.word	0x20000958
 8007df4:	20000944 	.word	0x20000944
 8007df8:	20000938 	.word	0x20000938
 8007dfc:	20000834 	.word	0x20000834
 8007e00:	20000830 	.word	0x20000830
 8007e04:	20000194 	.word	0x20000194

08007e08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	60fb      	str	r3, [r7, #12]
}
 8007e2a:	bf00      	nop
 8007e2c:	bf00      	nop
 8007e2e:	e7fd      	b.n	8007e2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e30:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <vTaskPlaceOnEventList+0x48>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3318      	adds	r3, #24
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7fe fdda 	bl	80069f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e3e:	2101      	movs	r1, #1
 8007e40:	6838      	ldr	r0, [r7, #0]
 8007e42:	f000 fd81 	bl	8008948 <prvAddCurrentTaskToDelayedList>
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000830 	.word	0x20000830

08007e54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	60fb      	str	r3, [r7, #12]
}
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
 8007e80:	e7fd      	b.n	8007e7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	3318      	adds	r3, #24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fdec 	bl	8006a64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007f04 <xTaskRemoveFromEventList+0xb0>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11c      	bne.n	8007ece <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	3304      	adds	r3, #4
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fe fde3 	bl	8006a64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	409a      	lsls	r2, r3
 8007ea6:	4b18      	ldr	r3, [pc, #96]	@ (8007f08 <xTaskRemoveFromEventList+0xb4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	4a16      	ldr	r2, [pc, #88]	@ (8007f08 <xTaskRemoveFromEventList+0xb4>)
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4a13      	ldr	r2, [pc, #76]	@ (8007f0c <xTaskRemoveFromEventList+0xb8>)
 8007ebe:	441a      	add	r2, r3
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f7fe fd6f 	bl	80069aa <vListInsertEnd>
 8007ecc:	e005      	b.n	8007eda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	3318      	adds	r3, #24
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	480e      	ldr	r0, [pc, #56]	@ (8007f10 <xTaskRemoveFromEventList+0xbc>)
 8007ed6:	f7fe fd68 	bl	80069aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ede:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <xTaskRemoveFromEventList+0xc0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d905      	bls.n	8007ef4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007eec:	4b0a      	ldr	r3, [pc, #40]	@ (8007f18 <xTaskRemoveFromEventList+0xc4>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	e001      	b.n	8007ef8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ef8:	697b      	ldr	r3, [r7, #20]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000958 	.word	0x20000958
 8007f08:	20000938 	.word	0x20000938
 8007f0c:	20000834 	.word	0x20000834
 8007f10:	200008f0 	.word	0x200008f0
 8007f14:	20000830 	.word	0x20000830
 8007f18:	20000944 	.word	0x20000944

08007f1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f24:	4b06      	ldr	r3, [pc, #24]	@ (8007f40 <vTaskInternalSetTimeOutState+0x24>)
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <vTaskInternalSetTimeOutState+0x28>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	605a      	str	r2, [r3, #4]
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20000948 	.word	0x20000948
 8007f44:	20000934 	.word	0x20000934

08007f48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10b      	bne.n	8007f70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	613b      	str	r3, [r7, #16]
}
 8007f6a:	bf00      	nop
 8007f6c:	bf00      	nop
 8007f6e:	e7fd      	b.n	8007f6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10b      	bne.n	8007f8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60fb      	str	r3, [r7, #12]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f8e:	f000 fe73 	bl	8008c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f92:	4b1d      	ldr	r3, [pc, #116]	@ (8008008 <xTaskCheckForTimeOut+0xc0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d102      	bne.n	8007fb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e023      	b.n	8007ffa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4b15      	ldr	r3, [pc, #84]	@ (800800c <xTaskCheckForTimeOut+0xc4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d007      	beq.n	8007fce <xTaskCheckForTimeOut+0x86>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d302      	bcc.n	8007fce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	e015      	b.n	8007ffa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d20b      	bcs.n	8007ff0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff99 	bl	8007f1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	e004      	b.n	8007ffa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ffa:	f000 fe6f 	bl	8008cdc <vPortExitCritical>

	return xReturn;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3720      	adds	r7, #32
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000934 	.word	0x20000934
 800800c:	20000948 	.word	0x20000948

08008010 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008014:	4b03      	ldr	r3, [pc, #12]	@ (8008024 <vTaskMissedYield+0x14>)
 8008016:	2201      	movs	r2, #1
 8008018:	601a      	str	r2, [r3, #0]
}
 800801a:	bf00      	nop
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	20000944 	.word	0x20000944

08008028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008030:	f000 f852 	bl	80080d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008034:	4b06      	ldr	r3, [pc, #24]	@ (8008050 <prvIdleTask+0x28>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d9f9      	bls.n	8008030 <prvIdleTask+0x8>
			{
				taskYIELD();
 800803c:	4b05      	ldr	r3, [pc, #20]	@ (8008054 <prvIdleTask+0x2c>)
 800803e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800804c:	e7f0      	b.n	8008030 <prvIdleTask+0x8>
 800804e:	bf00      	nop
 8008050:	20000834 	.word	0x20000834
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	e00c      	b.n	800807e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4a12      	ldr	r2, [pc, #72]	@ (80080b8 <prvInitialiseTaskLists+0x60>)
 8008070:	4413      	add	r3, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fc6c 	bl	8006950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3301      	adds	r3, #1
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b06      	cmp	r3, #6
 8008082:	d9ef      	bls.n	8008064 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008084:	480d      	ldr	r0, [pc, #52]	@ (80080bc <prvInitialiseTaskLists+0x64>)
 8008086:	f7fe fc63 	bl	8006950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800808a:	480d      	ldr	r0, [pc, #52]	@ (80080c0 <prvInitialiseTaskLists+0x68>)
 800808c:	f7fe fc60 	bl	8006950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008090:	480c      	ldr	r0, [pc, #48]	@ (80080c4 <prvInitialiseTaskLists+0x6c>)
 8008092:	f7fe fc5d 	bl	8006950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008096:	480c      	ldr	r0, [pc, #48]	@ (80080c8 <prvInitialiseTaskLists+0x70>)
 8008098:	f7fe fc5a 	bl	8006950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800809c:	480b      	ldr	r0, [pc, #44]	@ (80080cc <prvInitialiseTaskLists+0x74>)
 800809e:	f7fe fc57 	bl	8006950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080a2:	4b0b      	ldr	r3, [pc, #44]	@ (80080d0 <prvInitialiseTaskLists+0x78>)
 80080a4:	4a05      	ldr	r2, [pc, #20]	@ (80080bc <prvInitialiseTaskLists+0x64>)
 80080a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080a8:	4b0a      	ldr	r3, [pc, #40]	@ (80080d4 <prvInitialiseTaskLists+0x7c>)
 80080aa:	4a05      	ldr	r2, [pc, #20]	@ (80080c0 <prvInitialiseTaskLists+0x68>)
 80080ac:	601a      	str	r2, [r3, #0]
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000834 	.word	0x20000834
 80080bc:	200008c0 	.word	0x200008c0
 80080c0:	200008d4 	.word	0x200008d4
 80080c4:	200008f0 	.word	0x200008f0
 80080c8:	20000904 	.word	0x20000904
 80080cc:	2000091c 	.word	0x2000091c
 80080d0:	200008e8 	.word	0x200008e8
 80080d4:	200008ec 	.word	0x200008ec

080080d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080de:	e019      	b.n	8008114 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080e0:	f000 fdca 	bl	8008c78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e4:	4b10      	ldr	r3, [pc, #64]	@ (8008128 <prvCheckTasksWaitingTermination+0x50>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fe fcb7 	bl	8006a64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080f6:	4b0d      	ldr	r3, [pc, #52]	@ (800812c <prvCheckTasksWaitingTermination+0x54>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	4a0b      	ldr	r2, [pc, #44]	@ (800812c <prvCheckTasksWaitingTermination+0x54>)
 80080fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008100:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3b01      	subs	r3, #1
 8008106:	4a0a      	ldr	r2, [pc, #40]	@ (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008108:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800810a:	f000 fde7 	bl	8008cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f810 	bl	8008134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008114:	4b06      	ldr	r3, [pc, #24]	@ (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e1      	bne.n	80080e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000904 	.word	0x20000904
 800812c:	20000930 	.word	0x20000930
 8008130:	20000918 	.word	0x20000918

08008134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	334c      	adds	r3, #76	@ 0x4c
 8008140:	4618      	mov	r0, r3
 8008142:	f002 f911 	bl	800a368 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800814c:	2b00      	cmp	r3, #0
 800814e:	d108      	bne.n	8008162 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008154:	4618      	mov	r0, r3
 8008156:	f000 ff7f 	bl	8009058 <vPortFree>
				vPortFree( pxTCB );
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 ff7c 	bl	8009058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008160:	e019      	b.n	8008196 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008168:	2b01      	cmp	r3, #1
 800816a:	d103      	bne.n	8008174 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 ff73 	bl	8009058 <vPortFree>
	}
 8008172:	e010      	b.n	8008196 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800817a:	2b02      	cmp	r3, #2
 800817c:	d00b      	beq.n	8008196 <prvDeleteTCB+0x62>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	60fb      	str	r3, [r7, #12]
}
 8008190:	bf00      	nop
 8008192:	bf00      	nop
 8008194:	e7fd      	b.n	8008192 <prvDeleteTCB+0x5e>
	}
 8008196:	bf00      	nop
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081a6:	4b0c      	ldr	r3, [pc, #48]	@ (80081d8 <prvResetNextTaskUnblockTime+0x38>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d104      	bne.n	80081ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081b0:	4b0a      	ldr	r3, [pc, #40]	@ (80081dc <prvResetNextTaskUnblockTime+0x3c>)
 80081b2:	f04f 32ff 	mov.w	r2, #4294967295
 80081b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081b8:	e008      	b.n	80081cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ba:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <prvResetNextTaskUnblockTime+0x38>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4a04      	ldr	r2, [pc, #16]	@ (80081dc <prvResetNextTaskUnblockTime+0x3c>)
 80081ca:	6013      	str	r3, [r2, #0]
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	200008e8 	.word	0x200008e8
 80081dc:	20000950 	.word	0x20000950

080081e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008214 <xTaskGetSchedulerState+0x34>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d102      	bne.n	80081f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081ee:	2301      	movs	r3, #1
 80081f0:	607b      	str	r3, [r7, #4]
 80081f2:	e008      	b.n	8008206 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f4:	4b08      	ldr	r3, [pc, #32]	@ (8008218 <xTaskGetSchedulerState+0x38>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d102      	bne.n	8008202 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081fc:	2302      	movs	r3, #2
 80081fe:	607b      	str	r3, [r7, #4]
 8008200:	e001      	b.n	8008206 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008202:	2300      	movs	r3, #0
 8008204:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008206:	687b      	ldr	r3, [r7, #4]
	}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	2000093c 	.word	0x2000093c
 8008218:	20000958 	.word	0x20000958

0800821c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d05e      	beq.n	80082f0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008236:	4b31      	ldr	r3, [pc, #196]	@ (80082fc <xTaskPriorityInherit+0xe0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	429a      	cmp	r2, r3
 800823e:	d24e      	bcs.n	80082de <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	db06      	blt.n	8008256 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008248:	4b2c      	ldr	r3, [pc, #176]	@ (80082fc <xTaskPriorityInherit+0xe0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824e:	f1c3 0207 	rsb	r2, r3, #7
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6959      	ldr	r1, [r3, #20]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800825e:	4613      	mov	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4a26      	ldr	r2, [pc, #152]	@ (8008300 <xTaskPriorityInherit+0xe4>)
 8008268:	4413      	add	r3, r2
 800826a:	4299      	cmp	r1, r3
 800826c:	d12f      	bne.n	80082ce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	3304      	adds	r3, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fbf6 	bl	8006a64 <uxListRemove>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008282:	2201      	movs	r2, #1
 8008284:	fa02 f303 	lsl.w	r3, r2, r3
 8008288:	43da      	mvns	r2, r3
 800828a:	4b1e      	ldr	r3, [pc, #120]	@ (8008304 <xTaskPriorityInherit+0xe8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4013      	ands	r3, r2
 8008290:	4a1c      	ldr	r2, [pc, #112]	@ (8008304 <xTaskPriorityInherit+0xe8>)
 8008292:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008294:	4b19      	ldr	r3, [pc, #100]	@ (80082fc <xTaskPriorityInherit+0xe0>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a2:	2201      	movs	r2, #1
 80082a4:	409a      	lsls	r2, r3
 80082a6:	4b17      	ldr	r3, [pc, #92]	@ (8008304 <xTaskPriorityInherit+0xe8>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	4a15      	ldr	r2, [pc, #84]	@ (8008304 <xTaskPriorityInherit+0xe8>)
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4a10      	ldr	r2, [pc, #64]	@ (8008300 <xTaskPriorityInherit+0xe4>)
 80082be:	441a      	add	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f7fe fb6f 	bl	80069aa <vListInsertEnd>
 80082cc:	e004      	b.n	80082d8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082ce:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <xTaskPriorityInherit+0xe0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e008      	b.n	80082f0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082e2:	4b06      	ldr	r3, [pc, #24]	@ (80082fc <xTaskPriorityInherit+0xe0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d201      	bcs.n	80082f0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082f0:	68fb      	ldr	r3, [r7, #12]
	}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20000830 	.word	0x20000830
 8008300:	20000834 	.word	0x20000834
 8008304:	20000938 	.word	0x20000938

08008308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d070      	beq.n	8008400 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800831e:	4b3b      	ldr	r3, [pc, #236]	@ (800840c <xTaskPriorityDisinherit+0x104>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	429a      	cmp	r2, r3
 8008326:	d00b      	beq.n	8008340 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10b      	bne.n	8008360 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	60bb      	str	r3, [r7, #8]
}
 800835a:	bf00      	nop
 800835c:	bf00      	nop
 800835e:	e7fd      	b.n	800835c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008364:	1e5a      	subs	r2, r3, #1
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008372:	429a      	cmp	r2, r3
 8008374:	d044      	beq.n	8008400 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800837a:	2b00      	cmp	r3, #0
 800837c:	d140      	bne.n	8008400 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	3304      	adds	r3, #4
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fb6e 	bl	8006a64 <uxListRemove>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d115      	bne.n	80083ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008392:	491f      	ldr	r1, [pc, #124]	@ (8008410 <xTaskPriorityDisinherit+0x108>)
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <xTaskPriorityDisinherit+0xb2>
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a8:	2201      	movs	r2, #1
 80083aa:	fa02 f303 	lsl.w	r3, r2, r3
 80083ae:	43da      	mvns	r2, r3
 80083b0:	4b18      	ldr	r3, [pc, #96]	@ (8008414 <xTaskPriorityDisinherit+0x10c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4013      	ands	r3, r2
 80083b6:	4a17      	ldr	r2, [pc, #92]	@ (8008414 <xTaskPriorityDisinherit+0x10c>)
 80083b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c6:	f1c3 0207 	rsb	r2, r3, #7
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	2201      	movs	r2, #1
 80083d4:	409a      	lsls	r2, r3
 80083d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008414 <xTaskPriorityDisinherit+0x10c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4313      	orrs	r3, r2
 80083dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008414 <xTaskPriorityDisinherit+0x10c>)
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4a08      	ldr	r2, [pc, #32]	@ (8008410 <xTaskPriorityDisinherit+0x108>)
 80083ee:	441a      	add	r2, r3
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f7fe fad7 	bl	80069aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083fc:	2301      	movs	r3, #1
 80083fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008400:	697b      	ldr	r3, [r7, #20]
	}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000830 	.word	0x20000830
 8008410:	20000834 	.word	0x20000834
 8008414:	20000938 	.word	0x20000938

08008418 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008426:	2301      	movs	r3, #1
 8008428:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d079      	beq.n	8008524 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10b      	bne.n	8008450 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	60fb      	str	r3, [r7, #12]
}
 800844a:	bf00      	nop
 800844c:	bf00      	nop
 800844e:	e7fd      	b.n	800844c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d902      	bls.n	8008460 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	e002      	b.n	8008466 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008464:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	429a      	cmp	r2, r3
 800846e:	d059      	beq.n	8008524 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	429a      	cmp	r2, r3
 8008478:	d154      	bne.n	8008524 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800847a:	4b2c      	ldr	r3, [pc, #176]	@ (800852c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	429a      	cmp	r2, r3
 8008482:	d10b      	bne.n	800849c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	60bb      	str	r3, [r7, #8]
}
 8008496:	bf00      	nop
 8008498:	bf00      	nop
 800849a:	e7fd      	b.n	8008498 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	db04      	blt.n	80084ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	f1c3 0207 	rsb	r2, r3, #7
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	6959      	ldr	r1, [r3, #20]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4a19      	ldr	r2, [pc, #100]	@ (8008530 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80084ca:	4413      	add	r3, r2
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d129      	bne.n	8008524 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fac5 	bl	8006a64 <uxListRemove>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	2201      	movs	r2, #1
 80084e6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ea:	43da      	mvns	r2, r3
 80084ec:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4013      	ands	r3, r2
 80084f2:	4a10      	ldr	r2, [pc, #64]	@ (8008534 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80084f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fa:	2201      	movs	r2, #1
 80084fc:	409a      	lsls	r2, r3
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4313      	orrs	r3, r2
 8008504:	4a0b      	ldr	r2, [pc, #44]	@ (8008534 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4a06      	ldr	r2, [pc, #24]	@ (8008530 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008516:	441a      	add	r2, r3
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	3304      	adds	r3, #4
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f7fe fa43 	bl	80069aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008524:	bf00      	nop
 8008526:	3720      	adds	r7, #32
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000830 	.word	0x20000830
 8008530:	20000834 	.word	0x20000834
 8008534:	20000938 	.word	0x20000938

08008538 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800853c:	4b07      	ldr	r3, [pc, #28]	@ (800855c <pvTaskIncrementMutexHeldCount+0x24>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008544:	4b05      	ldr	r3, [pc, #20]	@ (800855c <pvTaskIncrementMutexHeldCount+0x24>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800854a:	3201      	adds	r2, #1
 800854c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800854e:	4b03      	ldr	r3, [pc, #12]	@ (800855c <pvTaskIncrementMutexHeldCount+0x24>)
 8008550:	681b      	ldr	r3, [r3, #0]
	}
 8008552:	4618      	mov	r0, r3
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	20000830 	.word	0x20000830

08008560 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800856a:	f000 fb85 	bl	8008c78 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800856e:	4b20      	ldr	r3, [pc, #128]	@ (80085f0 <ulTaskNotifyTake+0x90>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008576:	2b00      	cmp	r3, #0
 8008578:	d113      	bne.n	80085a2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800857a:	4b1d      	ldr	r3, [pc, #116]	@ (80085f0 <ulTaskNotifyTake+0x90>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800858a:	2101      	movs	r1, #1
 800858c:	6838      	ldr	r0, [r7, #0]
 800858e:	f000 f9db 	bl	8008948 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008592:	4b18      	ldr	r3, [pc, #96]	@ (80085f4 <ulTaskNotifyTake+0x94>)
 8008594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80085a2:	f000 fb9b 	bl	8008cdc <vPortExitCritical>

		taskENTER_CRITICAL();
 80085a6:	f000 fb67 	bl	8008c78 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80085aa:	4b11      	ldr	r3, [pc, #68]	@ (80085f0 <ulTaskNotifyTake+0x90>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085b2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00e      	beq.n	80085d8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80085c0:	4b0b      	ldr	r3, [pc, #44]	@ (80085f0 <ulTaskNotifyTake+0x90>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80085ca:	e005      	b.n	80085d8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80085cc:	4b08      	ldr	r3, [pc, #32]	@ (80085f0 <ulTaskNotifyTake+0x90>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	3a01      	subs	r2, #1
 80085d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085d8:	4b05      	ldr	r3, [pc, #20]	@ (80085f0 <ulTaskNotifyTake+0x90>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 80085e2:	f000 fb7b 	bl	8008cdc <vPortExitCritical>

		return ulReturn;
 80085e6:	68fb      	ldr	r3, [r7, #12]
	}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20000830 	.word	0x20000830
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08a      	sub	sp, #40	@ 0x28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4613      	mov	r3, r2
 8008606:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008608:	2301      	movs	r3, #1
 800860a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10b      	bne.n	800862a <xTaskGenericNotify+0x32>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	61bb      	str	r3, [r7, #24]
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	e7fd      	b.n	8008626 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800862e:	f000 fb23 	bl	8008c78 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008648:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	2202      	movs	r2, #2
 800864e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	2b04      	cmp	r3, #4
 8008656:	d82e      	bhi.n	80086b6 <xTaskGenericNotify+0xbe>
 8008658:	a201      	add	r2, pc, #4	@ (adr r2, 8008660 <xTaskGenericNotify+0x68>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	080086db 	.word	0x080086db
 8008664:	08008675 	.word	0x08008675
 8008668:	08008687 	.word	0x08008687
 800866c:	08008697 	.word	0x08008697
 8008670:	080086a1 	.word	0x080086a1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	431a      	orrs	r2, r3
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008684:	e02c      	b.n	80086e0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008694:	e024      	b.n	80086e0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800869e:	e01f      	b.n	80086e0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80086a0:	7ffb      	ldrb	r3, [r7, #31]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d004      	beq.n	80086b0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80086ae:	e017      	b.n	80086e0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80086b4:	e014      	b.n	80086e0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d00d      	beq.n	80086de <xTaskGenericNotify+0xe6>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	617b      	str	r3, [r7, #20]
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop
 80086d8:	e7fd      	b.n	80086d6 <xTaskGenericNotify+0xde>
					break;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <xTaskGenericNotify+0xe8>

					break;
 80086de:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80086e0:	7ffb      	ldrb	r3, [r7, #31]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d13a      	bne.n	800875c <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	3304      	adds	r3, #4
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe f9ba 	bl	8006a64 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	2201      	movs	r2, #1
 80086f6:	409a      	lsls	r2, r3
 80086f8:	4b1c      	ldr	r3, [pc, #112]	@ (800876c <xTaskGenericNotify+0x174>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	4a1b      	ldr	r2, [pc, #108]	@ (800876c <xTaskGenericNotify+0x174>)
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a18      	ldr	r2, [pc, #96]	@ (8008770 <xTaskGenericNotify+0x178>)
 8008710:	441a      	add	r2, r3
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fe f946 	bl	80069aa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <xTaskGenericNotify+0x146>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	613b      	str	r3, [r7, #16]
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	e7fd      	b.n	800873a <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008742:	4b0c      	ldr	r3, [pc, #48]	@ (8008774 <xTaskGenericNotify+0x17c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	429a      	cmp	r2, r3
 800874a:	d907      	bls.n	800875c <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800874c:	4b0a      	ldr	r3, [pc, #40]	@ (8008778 <xTaskGenericNotify+0x180>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800875c:	f000 fabe 	bl	8008cdc <vPortExitCritical>

		return xReturn;
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008762:	4618      	mov	r0, r3
 8008764:	3728      	adds	r7, #40	@ 0x28
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000938 	.word	0x20000938
 8008770:	20000834 	.word	0x20000834
 8008774:	20000830 	.word	0x20000830
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08e      	sub	sp, #56	@ 0x38
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	4613      	mov	r3, r2
 800878a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800878c:	2301      	movs	r3, #1
 800878e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10b      	bne.n	80087ae <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	e7fd      	b.n	80087aa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ae:	f000 fb43 	bl	8008e38 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80087b6:	f3ef 8211 	mrs	r2, BASEPRI
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	623a      	str	r2, [r7, #32]
 80087cc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80087ce:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087da:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80087e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d82e      	bhi.n	8008858 <xTaskGenericNotifyFromISR+0xdc>
 80087fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008800 <xTaskGenericNotifyFromISR+0x84>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	0800887d 	.word	0x0800887d
 8008804:	08008815 	.word	0x08008815
 8008808:	08008827 	.word	0x08008827
 800880c:	08008837 	.word	0x08008837
 8008810:	08008841 	.word	0x08008841
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008816:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	431a      	orrs	r2, r3
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008824:	e02d      	b.n	8008882 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008834:	e025      	b.n	8008882 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800883e:	e020      	b.n	8008882 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008840:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008844:	2b02      	cmp	r3, #2
 8008846:	d004      	beq.n	8008852 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008850:	e017      	b.n	8008882 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8008852:	2300      	movs	r3, #0
 8008854:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8008856:	e014      	b.n	8008882 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008862:	d00d      	beq.n	8008880 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	61bb      	str	r3, [r7, #24]
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	e7fd      	b.n	8008878 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800887c:	bf00      	nop
 800887e:	e000      	b.n	8008882 <xTaskGenericNotifyFromISR+0x106>
					break;
 8008880:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008882:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008886:	2b01      	cmp	r3, #1
 8008888:	d146      	bne.n	8008918 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	617b      	str	r3, [r7, #20]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088aa:	4b21      	ldr	r3, [pc, #132]	@ (8008930 <xTaskGenericNotifyFromISR+0x1b4>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d11c      	bne.n	80088ec <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	3304      	adds	r3, #4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe f8d4 	bl	8006a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c0:	2201      	movs	r2, #1
 80088c2:	409a      	lsls	r2, r3
 80088c4:	4b1b      	ldr	r3, [pc, #108]	@ (8008934 <xTaskGenericNotifyFromISR+0x1b8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008934 <xTaskGenericNotifyFromISR+0x1b8>)
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4a17      	ldr	r2, [pc, #92]	@ (8008938 <xTaskGenericNotifyFromISR+0x1bc>)
 80088dc:	441a      	add	r2, r3
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fe f860 	bl	80069aa <vListInsertEnd>
 80088ea:	e005      	b.n	80088f8 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	3318      	adds	r3, #24
 80088f0:	4619      	mov	r1, r3
 80088f2:	4812      	ldr	r0, [pc, #72]	@ (800893c <xTaskGenericNotifyFromISR+0x1c0>)
 80088f4:	f7fe f859 	bl	80069aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fc:	4b10      	ldr	r3, [pc, #64]	@ (8008940 <xTaskGenericNotifyFromISR+0x1c4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	429a      	cmp	r2, r3
 8008904:	d908      	bls.n	8008918 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800890c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800890e:	2201      	movs	r2, #1
 8008910:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008912:	4b0c      	ldr	r3, [pc, #48]	@ (8008944 <xTaskGenericNotifyFromISR+0x1c8>)
 8008914:	2201      	movs	r2, #1
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f383 8811 	msr	BASEPRI, r3
}
 8008922:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8008926:	4618      	mov	r0, r3
 8008928:	3738      	adds	r7, #56	@ 0x38
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000958 	.word	0x20000958
 8008934:	20000938 	.word	0x20000938
 8008938:	20000834 	.word	0x20000834
 800893c:	200008f0 	.word	0x200008f0
 8008940:	20000830 	.word	0x20000830
 8008944:	20000944 	.word	0x20000944

08008948 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008952:	4b29      	ldr	r3, [pc, #164]	@ (80089f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008958:	4b28      	ldr	r3, [pc, #160]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3304      	adds	r3, #4
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe f880 	bl	8006a64 <uxListRemove>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800896a:	4b24      	ldr	r3, [pc, #144]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008970:	2201      	movs	r2, #1
 8008972:	fa02 f303 	lsl.w	r3, r2, r3
 8008976:	43da      	mvns	r2, r3
 8008978:	4b21      	ldr	r3, [pc, #132]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4013      	ands	r3, r2
 800897e:	4a20      	ldr	r2, [pc, #128]	@ (8008a00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008980:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008988:	d10a      	bne.n	80089a0 <prvAddCurrentTaskToDelayedList+0x58>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008990:	4b1a      	ldr	r3, [pc, #104]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3304      	adds	r3, #4
 8008996:	4619      	mov	r1, r3
 8008998:	481a      	ldr	r0, [pc, #104]	@ (8008a04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800899a:	f7fe f806 	bl	80069aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800899e:	e026      	b.n	80089ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4413      	add	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089a8:	4b14      	ldr	r3, [pc, #80]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d209      	bcs.n	80089cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089b8:	4b13      	ldr	r3, [pc, #76]	@ (8008a08 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	4b0f      	ldr	r3, [pc, #60]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3304      	adds	r3, #4
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f7fe f814 	bl	80069f2 <vListInsert>
}
 80089ca:	e010      	b.n	80089ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089cc:	4b0f      	ldr	r3, [pc, #60]	@ (8008a0c <prvAddCurrentTaskToDelayedList+0xc4>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b0a      	ldr	r3, [pc, #40]	@ (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4619      	mov	r1, r3
 80089d8:	4610      	mov	r0, r2
 80089da:	f7fe f80a 	bl	80069f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089de:	4b0c      	ldr	r3, [pc, #48]	@ (8008a10 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d202      	bcs.n	80089ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089e8:	4a09      	ldr	r2, [pc, #36]	@ (8008a10 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6013      	str	r3, [r2, #0]
}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20000934 	.word	0x20000934
 80089fc:	20000830 	.word	0x20000830
 8008a00:	20000938 	.word	0x20000938
 8008a04:	2000091c 	.word	0x2000091c
 8008a08:	200008ec 	.word	0x200008ec
 8008a0c:	200008e8 	.word	0x200008e8
 8008a10:	20000950 	.word	0x20000950

08008a14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3b04      	subs	r3, #4
 8008a24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3b04      	subs	r3, #4
 8008a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f023 0201 	bic.w	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3b04      	subs	r3, #4
 8008a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a44:	4a0c      	ldr	r2, [pc, #48]	@ (8008a78 <pxPortInitialiseStack+0x64>)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3b14      	subs	r3, #20
 8008a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3b04      	subs	r3, #4
 8008a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f06f 0202 	mvn.w	r2, #2
 8008a62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3b20      	subs	r3, #32
 8008a68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	08008a7d 	.word	0x08008a7d

08008a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a86:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <prvTaskExitError+0x58>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8e:	d00b      	beq.n	8008aa8 <prvTaskExitError+0x2c>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <prvTaskExitError+0x28>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60bb      	str	r3, [r7, #8]
}
 8008aba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008abc:	bf00      	nop
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0fc      	beq.n	8008abe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000018 	.word	0x20000018
	...

08008ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ae0:	4b07      	ldr	r3, [pc, #28]	@ (8008b00 <pxCurrentTCBConst2>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	6808      	ldr	r0, [r1, #0]
 8008ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	f380 8809 	msr	PSP, r0
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8811 	msr	BASEPRI, r0
 8008afa:	4770      	bx	lr
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst2>:
 8008b00:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b08:	4808      	ldr	r0, [pc, #32]	@ (8008b2c <prvPortStartFirstTask+0x24>)
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f380 8808 	msr	MSP, r0
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f380 8814 	msr	CONTROL, r0
 8008b1a:	b662      	cpsie	i
 8008b1c:	b661      	cpsie	f
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	df00      	svc	0
 8008b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b2a:	bf00      	nop
 8008b2c:	e000ed08 	.word	0xe000ed08

08008b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b36:	4b47      	ldr	r3, [pc, #284]	@ (8008c54 <xPortStartScheduler+0x124>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a47      	ldr	r2, [pc, #284]	@ (8008c58 <xPortStartScheduler+0x128>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d10b      	bne.n	8008b58 <xPortStartScheduler+0x28>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	613b      	str	r3, [r7, #16]
}
 8008b52:	bf00      	nop
 8008b54:	bf00      	nop
 8008b56:	e7fd      	b.n	8008b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b58:	4b3e      	ldr	r3, [pc, #248]	@ (8008c54 <xPortStartScheduler+0x124>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c5c <xPortStartScheduler+0x12c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d10b      	bne.n	8008b7a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60fb      	str	r3, [r7, #12]
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	e7fd      	b.n	8008b76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b7a:	4b39      	ldr	r3, [pc, #228]	@ (8008c60 <xPortStartScheduler+0x130>)
 8008b7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	22ff      	movs	r2, #255	@ 0xff
 8008b8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	4b31      	ldr	r3, [pc, #196]	@ (8008c64 <xPortStartScheduler+0x134>)
 8008ba0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ba2:	4b31      	ldr	r3, [pc, #196]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008ba4:	2207      	movs	r2, #7
 8008ba6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ba8:	e009      	b.n	8008bbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008baa:	4b2f      	ldr	r3, [pc, #188]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc6:	2b80      	cmp	r3, #128	@ 0x80
 8008bc8:	d0ef      	beq.n	8008baa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bca:	4b27      	ldr	r3, [pc, #156]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f1c3 0307 	rsb	r3, r3, #7
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d00b      	beq.n	8008bee <xPortStartScheduler+0xbe>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	60bb      	str	r3, [r7, #8]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bee:	4b1e      	ldr	r3, [pc, #120]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c00:	4a19      	ldr	r2, [pc, #100]	@ (8008c68 <xPortStartScheduler+0x138>)
 8008c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c0c:	4b17      	ldr	r3, [pc, #92]	@ (8008c6c <xPortStartScheduler+0x13c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a16      	ldr	r2, [pc, #88]	@ (8008c6c <xPortStartScheduler+0x13c>)
 8008c12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c18:	4b14      	ldr	r3, [pc, #80]	@ (8008c6c <xPortStartScheduler+0x13c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a13      	ldr	r2, [pc, #76]	@ (8008c6c <xPortStartScheduler+0x13c>)
 8008c1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c24:	f000 f8da 	bl	8008ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c28:	4b11      	ldr	r3, [pc, #68]	@ (8008c70 <xPortStartScheduler+0x140>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c2e:	f000 f8f9 	bl	8008e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c32:	4b10      	ldr	r3, [pc, #64]	@ (8008c74 <xPortStartScheduler+0x144>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a0f      	ldr	r2, [pc, #60]	@ (8008c74 <xPortStartScheduler+0x144>)
 8008c38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c3e:	f7ff ff63 	bl	8008b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c42:	f7ff f87d 	bl	8007d40 <vTaskSwitchContext>
	prvTaskExitError();
 8008c46:	f7ff ff19 	bl	8008a7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3718      	adds	r7, #24
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	e000ed00 	.word	0xe000ed00
 8008c58:	410fc271 	.word	0x410fc271
 8008c5c:	410fc270 	.word	0x410fc270
 8008c60:	e000e400 	.word	0xe000e400
 8008c64:	2000095c 	.word	0x2000095c
 8008c68:	20000960 	.word	0x20000960
 8008c6c:	e000ed20 	.word	0xe000ed20
 8008c70:	20000018 	.word	0x20000018
 8008c74:	e000ef34 	.word	0xe000ef34

08008c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
}
 8008c90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c92:	4b10      	ldr	r3, [pc, #64]	@ (8008cd4 <vPortEnterCritical+0x5c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3301      	adds	r3, #1
 8008c98:	4a0e      	ldr	r2, [pc, #56]	@ (8008cd4 <vPortEnterCritical+0x5c>)
 8008c9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd4 <vPortEnterCritical+0x5c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d110      	bne.n	8008cc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <vPortEnterCritical+0x60>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	603b      	str	r3, [r7, #0]
}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	e7fd      	b.n	8008cc2 <vPortEnterCritical+0x4a>
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000018 	.word	0x20000018
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ce2:	4b12      	ldr	r3, [pc, #72]	@ (8008d2c <vPortExitCritical+0x50>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <vPortExitCritical+0x26>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	607b      	str	r3, [r7, #4]
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	e7fd      	b.n	8008cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d02:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <vPortExitCritical+0x50>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	4a08      	ldr	r2, [pc, #32]	@ (8008d2c <vPortExitCritical+0x50>)
 8008d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d0c:	4b07      	ldr	r3, [pc, #28]	@ (8008d2c <vPortExitCritical+0x50>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d105      	bne.n	8008d20 <vPortExitCritical+0x44>
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	20000018 	.word	0x20000018

08008d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d30:	f3ef 8009 	mrs	r0, PSP
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4b15      	ldr	r3, [pc, #84]	@ (8008d90 <pxCurrentTCBConst>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	f01e 0f10 	tst.w	lr, #16
 8008d40:	bf08      	it	eq
 8008d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d54:	f380 8811 	msr	BASEPRI, r0
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f7fe ffee 	bl	8007d40 <vTaskSwitchContext>
 8008d64:	f04f 0000 	mov.w	r0, #0
 8008d68:	f380 8811 	msr	BASEPRI, r0
 8008d6c:	bc09      	pop	{r0, r3}
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	6808      	ldr	r0, [r1, #0]
 8008d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d76:	f01e 0f10 	tst.w	lr, #16
 8008d7a:	bf08      	it	eq
 8008d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d80:	f380 8809 	msr	PSP, r0
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst>:
 8008d90:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	607b      	str	r3, [r7, #4]
}
 8008db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008db2:	f7fe ff0b 	bl	8007bcc <xTaskIncrementTick>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dbc:	4b06      	ldr	r3, [pc, #24]	@ (8008dd8 <SysTick_Handler+0x40>)
 8008dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f383 8811 	msr	BASEPRI, r3
}
 8008dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008de6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e14 <vPortSetupTimerInterrupt+0x38>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	@ (8008e18 <vPortSetupTimerInterrupt+0x3c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	@ (8008e1c <vPortSetupTimerInterrupt+0x40>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	4a09      	ldr	r2, [pc, #36]	@ (8008e20 <vPortSetupTimerInterrupt+0x44>)
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dfe:	4b04      	ldr	r3, [pc, #16]	@ (8008e10 <vPortSetupTimerInterrupt+0x34>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010
 8008e14:	e000e018 	.word	0xe000e018
 8008e18:	2000000c 	.word	0x2000000c
 8008e1c:	10624dd3 	.word	0x10624dd3
 8008e20:	e000e014 	.word	0xe000e014

08008e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e34 <vPortEnableVFP+0x10>
 8008e28:	6801      	ldr	r1, [r0, #0]
 8008e2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e2e:	6001      	str	r1, [r0, #0]
 8008e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e32:	bf00      	nop
 8008e34:	e000ed88 	.word	0xe000ed88

08008e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e3e:	f3ef 8305 	mrs	r3, IPSR
 8008e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b0f      	cmp	r3, #15
 8008e48:	d915      	bls.n	8008e76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e4a:	4a18      	ldr	r2, [pc, #96]	@ (8008eac <vPortValidateInterruptPriority+0x74>)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e54:	4b16      	ldr	r3, [pc, #88]	@ (8008eb0 <vPortValidateInterruptPriority+0x78>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	7afa      	ldrb	r2, [r7, #11]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d20b      	bcs.n	8008e76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
 8008e72:	bf00      	nop
 8008e74:	e7fd      	b.n	8008e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e76:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb4 <vPortValidateInterruptPriority+0x7c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb8 <vPortValidateInterruptPriority+0x80>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d90b      	bls.n	8008e9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	603b      	str	r3, [r7, #0]
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	e7fd      	b.n	8008e9a <vPortValidateInterruptPriority+0x62>
	}
 8008e9e:	bf00      	nop
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	e000e3f0 	.word	0xe000e3f0
 8008eb0:	2000095c 	.word	0x2000095c
 8008eb4:	e000ed0c 	.word	0xe000ed0c
 8008eb8:	20000960 	.word	0x20000960

08008ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08a      	sub	sp, #40	@ 0x28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ec8:	f7fe fdd4 	bl	8007a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8009040 <pvPortMalloc+0x184>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ed4:	f000 f924 	bl	8009120 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8009044 <pvPortMalloc+0x188>)
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4013      	ands	r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f040 8095 	bne.w	8009010 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d01e      	beq.n	8008f2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008eec:	2208      	movs	r2, #8
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f003 0307 	and.w	r3, r3, #7
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d015      	beq.n	8008f2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f023 0307 	bic.w	r3, r3, #7
 8008f04:	3308      	adds	r3, #8
 8008f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <pvPortMalloc+0x6e>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	617b      	str	r3, [r7, #20]
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	e7fd      	b.n	8008f26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d06f      	beq.n	8009010 <pvPortMalloc+0x154>
 8008f30:	4b45      	ldr	r3, [pc, #276]	@ (8009048 <pvPortMalloc+0x18c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d86a      	bhi.n	8009010 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f3a:	4b44      	ldr	r3, [pc, #272]	@ (800904c <pvPortMalloc+0x190>)
 8008f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f3e:	4b43      	ldr	r3, [pc, #268]	@ (800904c <pvPortMalloc+0x190>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f44:	e004      	b.n	8008f50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d903      	bls.n	8008f62 <pvPortMalloc+0xa6>
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f1      	bne.n	8008f46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f62:	4b37      	ldr	r3, [pc, #220]	@ (8009040 <pvPortMalloc+0x184>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d051      	beq.n	8009010 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2208      	movs	r2, #8
 8008f72:	4413      	add	r3, r2
 8008f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1ad2      	subs	r2, r2, r3
 8008f86:	2308      	movs	r3, #8
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d920      	bls.n	8008fd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <pvPortMalloc+0xfc>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	613b      	str	r3, [r7, #16]
}
 8008fb2:	bf00      	nop
 8008fb4:	bf00      	nop
 8008fb6:	e7fd      	b.n	8008fb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	1ad2      	subs	r2, r2, r3
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fca:	69b8      	ldr	r0, [r7, #24]
 8008fcc:	f000 f90a 	bl	80091e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009048 <pvPortMalloc+0x18c>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	4a1b      	ldr	r2, [pc, #108]	@ (8009048 <pvPortMalloc+0x18c>)
 8008fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fde:	4b1a      	ldr	r3, [pc, #104]	@ (8009048 <pvPortMalloc+0x18c>)
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8009050 <pvPortMalloc+0x194>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d203      	bcs.n	8008ff2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fea:	4b17      	ldr	r3, [pc, #92]	@ (8009048 <pvPortMalloc+0x18c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a18      	ldr	r2, [pc, #96]	@ (8009050 <pvPortMalloc+0x194>)
 8008ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	4b13      	ldr	r3, [pc, #76]	@ (8009044 <pvPortMalloc+0x188>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009006:	4b13      	ldr	r3, [pc, #76]	@ (8009054 <pvPortMalloc+0x198>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3301      	adds	r3, #1
 800900c:	4a11      	ldr	r2, [pc, #68]	@ (8009054 <pvPortMalloc+0x198>)
 800900e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009010:	f7fe fd3e 	bl	8007a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <pvPortMalloc+0x17a>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60fb      	str	r3, [r7, #12]
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	e7fd      	b.n	8009032 <pvPortMalloc+0x176>
	return pvReturn;
 8009036:	69fb      	ldr	r3, [r7, #28]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3728      	adds	r7, #40	@ 0x28
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	2000456c 	.word	0x2000456c
 8009044:	20004580 	.word	0x20004580
 8009048:	20004570 	.word	0x20004570
 800904c:	20004564 	.word	0x20004564
 8009050:	20004574 	.word	0x20004574
 8009054:	20004578 	.word	0x20004578

08009058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d04f      	beq.n	800910a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800906a:	2308      	movs	r3, #8
 800906c:	425b      	negs	r3, r3
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	4413      	add	r3, r2
 8009072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	4b25      	ldr	r3, [pc, #148]	@ (8009114 <vPortFree+0xbc>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4013      	ands	r3, r2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10b      	bne.n	800909e <vPortFree+0x46>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	60fb      	str	r3, [r7, #12]
}
 8009098:	bf00      	nop
 800909a:	bf00      	nop
 800909c:	e7fd      	b.n	800909a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <vPortFree+0x66>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	60bb      	str	r3, [r7, #8]
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	e7fd      	b.n	80090ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	4b14      	ldr	r3, [pc, #80]	@ (8009114 <vPortFree+0xbc>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4013      	ands	r3, r2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01e      	beq.n	800910a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d11a      	bne.n	800910a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009114 <vPortFree+0xbc>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	43db      	mvns	r3, r3
 80090de:	401a      	ands	r2, r3
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090e4:	f7fe fcc6 	bl	8007a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009118 <vPortFree+0xc0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4413      	add	r3, r2
 80090f2:	4a09      	ldr	r2, [pc, #36]	@ (8009118 <vPortFree+0xc0>)
 80090f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090f6:	6938      	ldr	r0, [r7, #16]
 80090f8:	f000 f874 	bl	80091e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090fc:	4b07      	ldr	r3, [pc, #28]	@ (800911c <vPortFree+0xc4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	4a06      	ldr	r2, [pc, #24]	@ (800911c <vPortFree+0xc4>)
 8009104:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009106:	f7fe fcc3 	bl	8007a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800910a:	bf00      	nop
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20004580 	.word	0x20004580
 8009118:	20004570 	.word	0x20004570
 800911c:	2000457c 	.word	0x2000457c

08009120 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009126:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800912a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800912c:	4b27      	ldr	r3, [pc, #156]	@ (80091cc <prvHeapInit+0xac>)
 800912e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f003 0307 	and.w	r3, r3, #7
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00c      	beq.n	8009154 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3307      	adds	r3, #7
 800913e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0307 	bic.w	r3, r3, #7
 8009146:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	4a1f      	ldr	r2, [pc, #124]	@ (80091cc <prvHeapInit+0xac>)
 8009150:	4413      	add	r3, r2
 8009152:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009158:	4a1d      	ldr	r2, [pc, #116]	@ (80091d0 <prvHeapInit+0xb0>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800915e:	4b1c      	ldr	r3, [pc, #112]	@ (80091d0 <prvHeapInit+0xb0>)
 8009160:	2200      	movs	r2, #0
 8009162:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	4413      	add	r3, r2
 800916a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800916c:	2208      	movs	r2, #8
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 0307 	bic.w	r3, r3, #7
 800917a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4a15      	ldr	r2, [pc, #84]	@ (80091d4 <prvHeapInit+0xb4>)
 8009180:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009182:	4b14      	ldr	r3, [pc, #80]	@ (80091d4 <prvHeapInit+0xb4>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2200      	movs	r2, #0
 8009188:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800918a:	4b12      	ldr	r3, [pc, #72]	@ (80091d4 <prvHeapInit+0xb4>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	1ad2      	subs	r2, r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091a0:	4b0c      	ldr	r3, [pc, #48]	@ (80091d4 <prvHeapInit+0xb4>)
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	4a0a      	ldr	r2, [pc, #40]	@ (80091d8 <prvHeapInit+0xb8>)
 80091ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	4a09      	ldr	r2, [pc, #36]	@ (80091dc <prvHeapInit+0xbc>)
 80091b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091b8:	4b09      	ldr	r3, [pc, #36]	@ (80091e0 <prvHeapInit+0xc0>)
 80091ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80091be:	601a      	str	r2, [r3, #0]
}
 80091c0:	bf00      	nop
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	20000964 	.word	0x20000964
 80091d0:	20004564 	.word	0x20004564
 80091d4:	2000456c 	.word	0x2000456c
 80091d8:	20004574 	.word	0x20004574
 80091dc:	20004570 	.word	0x20004570
 80091e0:	20004580 	.word	0x20004580

080091e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091ec:	4b28      	ldr	r3, [pc, #160]	@ (8009290 <prvInsertBlockIntoFreeList+0xac>)
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	e002      	b.n	80091f8 <prvInsertBlockIntoFreeList+0x14>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d8f7      	bhi.n	80091f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	4413      	add	r3, r2
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	429a      	cmp	r2, r3
 8009212:	d108      	bne.n	8009226 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	441a      	add	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	441a      	add	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d118      	bne.n	800926c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	4b15      	ldr	r3, [pc, #84]	@ (8009294 <prvInsertBlockIntoFreeList+0xb0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d00d      	beq.n	8009262 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	441a      	add	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	e008      	b.n	8009274 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009262:	4b0c      	ldr	r3, [pc, #48]	@ (8009294 <prvInsertBlockIntoFreeList+0xb0>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e003      	b.n	8009274 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	429a      	cmp	r2, r3
 800927a:	d002      	beq.n	8009282 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20004564 	.word	0x20004564
 8009294:	2000456c 	.word	0x2000456c

08009298 <malloc>:
 8009298:	4b02      	ldr	r3, [pc, #8]	@ (80092a4 <malloc+0xc>)
 800929a:	4601      	mov	r1, r0
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f000 b82d 	b.w	80092fc <_malloc_r>
 80092a2:	bf00      	nop
 80092a4:	20000194 	.word	0x20000194

080092a8 <free>:
 80092a8:	4b02      	ldr	r3, [pc, #8]	@ (80092b4 <free+0xc>)
 80092aa:	4601      	mov	r1, r0
 80092ac:	6818      	ldr	r0, [r3, #0]
 80092ae:	f001 b93b 	b.w	800a528 <_free_r>
 80092b2:	bf00      	nop
 80092b4:	20000194 	.word	0x20000194

080092b8 <sbrk_aligned>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4e0f      	ldr	r6, [pc, #60]	@ (80092f8 <sbrk_aligned+0x40>)
 80092bc:	460c      	mov	r4, r1
 80092be:	6831      	ldr	r1, [r6, #0]
 80092c0:	4605      	mov	r5, r0
 80092c2:	b911      	cbnz	r1, 80092ca <sbrk_aligned+0x12>
 80092c4:	f001 f8ca 	bl	800a45c <_sbrk_r>
 80092c8:	6030      	str	r0, [r6, #0]
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f001 f8c5 	bl	800a45c <_sbrk_r>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	d103      	bne.n	80092de <sbrk_aligned+0x26>
 80092d6:	f04f 34ff 	mov.w	r4, #4294967295
 80092da:	4620      	mov	r0, r4
 80092dc:	bd70      	pop	{r4, r5, r6, pc}
 80092de:	1cc4      	adds	r4, r0, #3
 80092e0:	f024 0403 	bic.w	r4, r4, #3
 80092e4:	42a0      	cmp	r0, r4
 80092e6:	d0f8      	beq.n	80092da <sbrk_aligned+0x22>
 80092e8:	1a21      	subs	r1, r4, r0
 80092ea:	4628      	mov	r0, r5
 80092ec:	f001 f8b6 	bl	800a45c <_sbrk_r>
 80092f0:	3001      	adds	r0, #1
 80092f2:	d1f2      	bne.n	80092da <sbrk_aligned+0x22>
 80092f4:	e7ef      	b.n	80092d6 <sbrk_aligned+0x1e>
 80092f6:	bf00      	nop
 80092f8:	20004584 	.word	0x20004584

080092fc <_malloc_r>:
 80092fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009300:	1ccd      	adds	r5, r1, #3
 8009302:	f025 0503 	bic.w	r5, r5, #3
 8009306:	3508      	adds	r5, #8
 8009308:	2d0c      	cmp	r5, #12
 800930a:	bf38      	it	cc
 800930c:	250c      	movcc	r5, #12
 800930e:	2d00      	cmp	r5, #0
 8009310:	4606      	mov	r6, r0
 8009312:	db01      	blt.n	8009318 <_malloc_r+0x1c>
 8009314:	42a9      	cmp	r1, r5
 8009316:	d904      	bls.n	8009322 <_malloc_r+0x26>
 8009318:	230c      	movs	r3, #12
 800931a:	6033      	str	r3, [r6, #0]
 800931c:	2000      	movs	r0, #0
 800931e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093f8 <_malloc_r+0xfc>
 8009326:	f000 f869 	bl	80093fc <__malloc_lock>
 800932a:	f8d8 3000 	ldr.w	r3, [r8]
 800932e:	461c      	mov	r4, r3
 8009330:	bb44      	cbnz	r4, 8009384 <_malloc_r+0x88>
 8009332:	4629      	mov	r1, r5
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff ffbf 	bl	80092b8 <sbrk_aligned>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	4604      	mov	r4, r0
 800933e:	d158      	bne.n	80093f2 <_malloc_r+0xf6>
 8009340:	f8d8 4000 	ldr.w	r4, [r8]
 8009344:	4627      	mov	r7, r4
 8009346:	2f00      	cmp	r7, #0
 8009348:	d143      	bne.n	80093d2 <_malloc_r+0xd6>
 800934a:	2c00      	cmp	r4, #0
 800934c:	d04b      	beq.n	80093e6 <_malloc_r+0xea>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	4639      	mov	r1, r7
 8009352:	4630      	mov	r0, r6
 8009354:	eb04 0903 	add.w	r9, r4, r3
 8009358:	f001 f880 	bl	800a45c <_sbrk_r>
 800935c:	4581      	cmp	r9, r0
 800935e:	d142      	bne.n	80093e6 <_malloc_r+0xea>
 8009360:	6821      	ldr	r1, [r4, #0]
 8009362:	1a6d      	subs	r5, r5, r1
 8009364:	4629      	mov	r1, r5
 8009366:	4630      	mov	r0, r6
 8009368:	f7ff ffa6 	bl	80092b8 <sbrk_aligned>
 800936c:	3001      	adds	r0, #1
 800936e:	d03a      	beq.n	80093e6 <_malloc_r+0xea>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	442b      	add	r3, r5
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	f8d8 3000 	ldr.w	r3, [r8]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	bb62      	cbnz	r2, 80093d8 <_malloc_r+0xdc>
 800937e:	f8c8 7000 	str.w	r7, [r8]
 8009382:	e00f      	b.n	80093a4 <_malloc_r+0xa8>
 8009384:	6822      	ldr	r2, [r4, #0]
 8009386:	1b52      	subs	r2, r2, r5
 8009388:	d420      	bmi.n	80093cc <_malloc_r+0xd0>
 800938a:	2a0b      	cmp	r2, #11
 800938c:	d917      	bls.n	80093be <_malloc_r+0xc2>
 800938e:	1961      	adds	r1, r4, r5
 8009390:	42a3      	cmp	r3, r4
 8009392:	6025      	str	r5, [r4, #0]
 8009394:	bf18      	it	ne
 8009396:	6059      	strne	r1, [r3, #4]
 8009398:	6863      	ldr	r3, [r4, #4]
 800939a:	bf08      	it	eq
 800939c:	f8c8 1000 	streq.w	r1, [r8]
 80093a0:	5162      	str	r2, [r4, r5]
 80093a2:	604b      	str	r3, [r1, #4]
 80093a4:	4630      	mov	r0, r6
 80093a6:	f000 f82f 	bl	8009408 <__malloc_unlock>
 80093aa:	f104 000b 	add.w	r0, r4, #11
 80093ae:	1d23      	adds	r3, r4, #4
 80093b0:	f020 0007 	bic.w	r0, r0, #7
 80093b4:	1ac2      	subs	r2, r0, r3
 80093b6:	bf1c      	itt	ne
 80093b8:	1a1b      	subne	r3, r3, r0
 80093ba:	50a3      	strne	r3, [r4, r2]
 80093bc:	e7af      	b.n	800931e <_malloc_r+0x22>
 80093be:	6862      	ldr	r2, [r4, #4]
 80093c0:	42a3      	cmp	r3, r4
 80093c2:	bf0c      	ite	eq
 80093c4:	f8c8 2000 	streq.w	r2, [r8]
 80093c8:	605a      	strne	r2, [r3, #4]
 80093ca:	e7eb      	b.n	80093a4 <_malloc_r+0xa8>
 80093cc:	4623      	mov	r3, r4
 80093ce:	6864      	ldr	r4, [r4, #4]
 80093d0:	e7ae      	b.n	8009330 <_malloc_r+0x34>
 80093d2:	463c      	mov	r4, r7
 80093d4:	687f      	ldr	r7, [r7, #4]
 80093d6:	e7b6      	b.n	8009346 <_malloc_r+0x4a>
 80093d8:	461a      	mov	r2, r3
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	42a3      	cmp	r3, r4
 80093de:	d1fb      	bne.n	80093d8 <_malloc_r+0xdc>
 80093e0:	2300      	movs	r3, #0
 80093e2:	6053      	str	r3, [r2, #4]
 80093e4:	e7de      	b.n	80093a4 <_malloc_r+0xa8>
 80093e6:	230c      	movs	r3, #12
 80093e8:	6033      	str	r3, [r6, #0]
 80093ea:	4630      	mov	r0, r6
 80093ec:	f000 f80c 	bl	8009408 <__malloc_unlock>
 80093f0:	e794      	b.n	800931c <_malloc_r+0x20>
 80093f2:	6005      	str	r5, [r0, #0]
 80093f4:	e7d6      	b.n	80093a4 <_malloc_r+0xa8>
 80093f6:	bf00      	nop
 80093f8:	20004588 	.word	0x20004588

080093fc <__malloc_lock>:
 80093fc:	4801      	ldr	r0, [pc, #4]	@ (8009404 <__malloc_lock+0x8>)
 80093fe:	f001 b87a 	b.w	800a4f6 <__retarget_lock_acquire_recursive>
 8009402:	bf00      	nop
 8009404:	200046cc 	.word	0x200046cc

08009408 <__malloc_unlock>:
 8009408:	4801      	ldr	r0, [pc, #4]	@ (8009410 <__malloc_unlock+0x8>)
 800940a:	f001 b875 	b.w	800a4f8 <__retarget_lock_release_recursive>
 800940e:	bf00      	nop
 8009410:	200046cc 	.word	0x200046cc

08009414 <realloc>:
 8009414:	4b02      	ldr	r3, [pc, #8]	@ (8009420 <realloc+0xc>)
 8009416:	460a      	mov	r2, r1
 8009418:	4601      	mov	r1, r0
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	f000 b802 	b.w	8009424 <_realloc_r>
 8009420:	20000194 	.word	0x20000194

08009424 <_realloc_r>:
 8009424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009428:	4680      	mov	r8, r0
 800942a:	4615      	mov	r5, r2
 800942c:	460c      	mov	r4, r1
 800942e:	b921      	cbnz	r1, 800943a <_realloc_r+0x16>
 8009430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009434:	4611      	mov	r1, r2
 8009436:	f7ff bf61 	b.w	80092fc <_malloc_r>
 800943a:	b92a      	cbnz	r2, 8009448 <_realloc_r+0x24>
 800943c:	f001 f874 	bl	800a528 <_free_r>
 8009440:	2400      	movs	r4, #0
 8009442:	4620      	mov	r0, r4
 8009444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009448:	f002 f8b6 	bl	800b5b8 <_malloc_usable_size_r>
 800944c:	4285      	cmp	r5, r0
 800944e:	4606      	mov	r6, r0
 8009450:	d802      	bhi.n	8009458 <_realloc_r+0x34>
 8009452:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009456:	d8f4      	bhi.n	8009442 <_realloc_r+0x1e>
 8009458:	4629      	mov	r1, r5
 800945a:	4640      	mov	r0, r8
 800945c:	f7ff ff4e 	bl	80092fc <_malloc_r>
 8009460:	4607      	mov	r7, r0
 8009462:	2800      	cmp	r0, #0
 8009464:	d0ec      	beq.n	8009440 <_realloc_r+0x1c>
 8009466:	42b5      	cmp	r5, r6
 8009468:	462a      	mov	r2, r5
 800946a:	4621      	mov	r1, r4
 800946c:	bf28      	it	cs
 800946e:	4632      	movcs	r2, r6
 8009470:	f001 f843 	bl	800a4fa <memcpy>
 8009474:	4621      	mov	r1, r4
 8009476:	4640      	mov	r0, r8
 8009478:	f001 f856 	bl	800a528 <_free_r>
 800947c:	463c      	mov	r4, r7
 800947e:	e7e0      	b.n	8009442 <_realloc_r+0x1e>

08009480 <sulp>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4604      	mov	r4, r0
 8009484:	460d      	mov	r5, r1
 8009486:	ec45 4b10 	vmov	d0, r4, r5
 800948a:	4616      	mov	r6, r2
 800948c:	f001 ff56 	bl	800b33c <__ulp>
 8009490:	ec51 0b10 	vmov	r0, r1, d0
 8009494:	b17e      	cbz	r6, 80094b6 <sulp+0x36>
 8009496:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800949a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800949e:	2b00      	cmp	r3, #0
 80094a0:	dd09      	ble.n	80094b6 <sulp+0x36>
 80094a2:	051b      	lsls	r3, r3, #20
 80094a4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80094a8:	2400      	movs	r4, #0
 80094aa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80094ae:	4622      	mov	r2, r4
 80094b0:	462b      	mov	r3, r5
 80094b2:	f7f7 f8d1 	bl	8000658 <__aeabi_dmul>
 80094b6:	ec41 0b10 	vmov	d0, r0, r1
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	0000      	movs	r0, r0
	...

080094c0 <_strtod_l>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	b09f      	sub	sp, #124	@ 0x7c
 80094c6:	460c      	mov	r4, r1
 80094c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80094ca:	2200      	movs	r2, #0
 80094cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80094ce:	9005      	str	r0, [sp, #20]
 80094d0:	f04f 0a00 	mov.w	sl, #0
 80094d4:	f04f 0b00 	mov.w	fp, #0
 80094d8:	460a      	mov	r2, r1
 80094da:	9219      	str	r2, [sp, #100]	@ 0x64
 80094dc:	7811      	ldrb	r1, [r2, #0]
 80094de:	292b      	cmp	r1, #43	@ 0x2b
 80094e0:	d04a      	beq.n	8009578 <_strtod_l+0xb8>
 80094e2:	d838      	bhi.n	8009556 <_strtod_l+0x96>
 80094e4:	290d      	cmp	r1, #13
 80094e6:	d832      	bhi.n	800954e <_strtod_l+0x8e>
 80094e8:	2908      	cmp	r1, #8
 80094ea:	d832      	bhi.n	8009552 <_strtod_l+0x92>
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d03b      	beq.n	8009568 <_strtod_l+0xa8>
 80094f0:	2200      	movs	r2, #0
 80094f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80094f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80094f6:	782a      	ldrb	r2, [r5, #0]
 80094f8:	2a30      	cmp	r2, #48	@ 0x30
 80094fa:	f040 80b3 	bne.w	8009664 <_strtod_l+0x1a4>
 80094fe:	786a      	ldrb	r2, [r5, #1]
 8009500:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009504:	2a58      	cmp	r2, #88	@ 0x58
 8009506:	d16e      	bne.n	80095e6 <_strtod_l+0x126>
 8009508:	9302      	str	r3, [sp, #8]
 800950a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	4a8e      	ldr	r2, [pc, #568]	@ (800974c <_strtod_l+0x28c>)
 8009514:	9805      	ldr	r0, [sp, #20]
 8009516:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009518:	a919      	add	r1, sp, #100	@ 0x64
 800951a:	f001 f8b7 	bl	800a68c <__gethex>
 800951e:	f010 060f 	ands.w	r6, r0, #15
 8009522:	4604      	mov	r4, r0
 8009524:	d005      	beq.n	8009532 <_strtod_l+0x72>
 8009526:	2e06      	cmp	r6, #6
 8009528:	d128      	bne.n	800957c <_strtod_l+0xbc>
 800952a:	3501      	adds	r5, #1
 800952c:	2300      	movs	r3, #0
 800952e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009532:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 858e 	bne.w	800a056 <_strtod_l+0xb96>
 800953a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800953c:	b1cb      	cbz	r3, 8009572 <_strtod_l+0xb2>
 800953e:	4652      	mov	r2, sl
 8009540:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009544:	ec43 2b10 	vmov	d0, r2, r3
 8009548:	b01f      	add	sp, #124	@ 0x7c
 800954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	2920      	cmp	r1, #32
 8009550:	d1ce      	bne.n	80094f0 <_strtod_l+0x30>
 8009552:	3201      	adds	r2, #1
 8009554:	e7c1      	b.n	80094da <_strtod_l+0x1a>
 8009556:	292d      	cmp	r1, #45	@ 0x2d
 8009558:	d1ca      	bne.n	80094f0 <_strtod_l+0x30>
 800955a:	2101      	movs	r1, #1
 800955c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800955e:	1c51      	adds	r1, r2, #1
 8009560:	9119      	str	r1, [sp, #100]	@ 0x64
 8009562:	7852      	ldrb	r2, [r2, #1]
 8009564:	2a00      	cmp	r2, #0
 8009566:	d1c5      	bne.n	80094f4 <_strtod_l+0x34>
 8009568:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800956a:	9419      	str	r4, [sp, #100]	@ 0x64
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8570 	bne.w	800a052 <_strtod_l+0xb92>
 8009572:	4652      	mov	r2, sl
 8009574:	465b      	mov	r3, fp
 8009576:	e7e5      	b.n	8009544 <_strtod_l+0x84>
 8009578:	2100      	movs	r1, #0
 800957a:	e7ef      	b.n	800955c <_strtod_l+0x9c>
 800957c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800957e:	b13a      	cbz	r2, 8009590 <_strtod_l+0xd0>
 8009580:	2135      	movs	r1, #53	@ 0x35
 8009582:	a81c      	add	r0, sp, #112	@ 0x70
 8009584:	f001 ffd4 	bl	800b530 <__copybits>
 8009588:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800958a:	9805      	ldr	r0, [sp, #20]
 800958c:	f001 fba2 	bl	800acd4 <_Bfree>
 8009590:	3e01      	subs	r6, #1
 8009592:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009594:	2e04      	cmp	r6, #4
 8009596:	d806      	bhi.n	80095a6 <_strtod_l+0xe6>
 8009598:	e8df f006 	tbb	[pc, r6]
 800959c:	201d0314 	.word	0x201d0314
 80095a0:	14          	.byte	0x14
 80095a1:	00          	.byte	0x00
 80095a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80095a6:	05e1      	lsls	r1, r4, #23
 80095a8:	bf48      	it	mi
 80095aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80095ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095b2:	0d1b      	lsrs	r3, r3, #20
 80095b4:	051b      	lsls	r3, r3, #20
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1bb      	bne.n	8009532 <_strtod_l+0x72>
 80095ba:	f000 ff71 	bl	800a4a0 <__errno>
 80095be:	2322      	movs	r3, #34	@ 0x22
 80095c0:	6003      	str	r3, [r0, #0]
 80095c2:	e7b6      	b.n	8009532 <_strtod_l+0x72>
 80095c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80095c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80095cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80095d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80095d4:	e7e7      	b.n	80095a6 <_strtod_l+0xe6>
 80095d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009754 <_strtod_l+0x294>
 80095da:	e7e4      	b.n	80095a6 <_strtod_l+0xe6>
 80095dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80095e0:	f04f 3aff 	mov.w	sl, #4294967295
 80095e4:	e7df      	b.n	80095a6 <_strtod_l+0xe6>
 80095e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80095ec:	785b      	ldrb	r3, [r3, #1]
 80095ee:	2b30      	cmp	r3, #48	@ 0x30
 80095f0:	d0f9      	beq.n	80095e6 <_strtod_l+0x126>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d09d      	beq.n	8009532 <_strtod_l+0x72>
 80095f6:	2301      	movs	r3, #1
 80095f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80095fe:	2300      	movs	r3, #0
 8009600:	9308      	str	r3, [sp, #32]
 8009602:	930a      	str	r3, [sp, #40]	@ 0x28
 8009604:	461f      	mov	r7, r3
 8009606:	220a      	movs	r2, #10
 8009608:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800960a:	7805      	ldrb	r5, [r0, #0]
 800960c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009610:	b2d9      	uxtb	r1, r3
 8009612:	2909      	cmp	r1, #9
 8009614:	d928      	bls.n	8009668 <_strtod_l+0x1a8>
 8009616:	494e      	ldr	r1, [pc, #312]	@ (8009750 <_strtod_l+0x290>)
 8009618:	2201      	movs	r2, #1
 800961a:	f000 fe82 	bl	800a322 <strncmp>
 800961e:	2800      	cmp	r0, #0
 8009620:	d032      	beq.n	8009688 <_strtod_l+0x1c8>
 8009622:	2000      	movs	r0, #0
 8009624:	462a      	mov	r2, r5
 8009626:	4681      	mov	r9, r0
 8009628:	463d      	mov	r5, r7
 800962a:	4603      	mov	r3, r0
 800962c:	2a65      	cmp	r2, #101	@ 0x65
 800962e:	d001      	beq.n	8009634 <_strtod_l+0x174>
 8009630:	2a45      	cmp	r2, #69	@ 0x45
 8009632:	d114      	bne.n	800965e <_strtod_l+0x19e>
 8009634:	b91d      	cbnz	r5, 800963e <_strtod_l+0x17e>
 8009636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009638:	4302      	orrs	r2, r0
 800963a:	d095      	beq.n	8009568 <_strtod_l+0xa8>
 800963c:	2500      	movs	r5, #0
 800963e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009640:	1c62      	adds	r2, r4, #1
 8009642:	9219      	str	r2, [sp, #100]	@ 0x64
 8009644:	7862      	ldrb	r2, [r4, #1]
 8009646:	2a2b      	cmp	r2, #43	@ 0x2b
 8009648:	d077      	beq.n	800973a <_strtod_l+0x27a>
 800964a:	2a2d      	cmp	r2, #45	@ 0x2d
 800964c:	d07b      	beq.n	8009746 <_strtod_l+0x286>
 800964e:	f04f 0c00 	mov.w	ip, #0
 8009652:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009656:	2909      	cmp	r1, #9
 8009658:	f240 8082 	bls.w	8009760 <_strtod_l+0x2a0>
 800965c:	9419      	str	r4, [sp, #100]	@ 0x64
 800965e:	f04f 0800 	mov.w	r8, #0
 8009662:	e0a2      	b.n	80097aa <_strtod_l+0x2ea>
 8009664:	2300      	movs	r3, #0
 8009666:	e7c7      	b.n	80095f8 <_strtod_l+0x138>
 8009668:	2f08      	cmp	r7, #8
 800966a:	bfd5      	itete	le
 800966c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800966e:	9908      	ldrgt	r1, [sp, #32]
 8009670:	fb02 3301 	mlale	r3, r2, r1, r3
 8009674:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009678:	f100 0001 	add.w	r0, r0, #1
 800967c:	bfd4      	ite	le
 800967e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009680:	9308      	strgt	r3, [sp, #32]
 8009682:	3701      	adds	r7, #1
 8009684:	9019      	str	r0, [sp, #100]	@ 0x64
 8009686:	e7bf      	b.n	8009608 <_strtod_l+0x148>
 8009688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	9219      	str	r2, [sp, #100]	@ 0x64
 800968e:	785a      	ldrb	r2, [r3, #1]
 8009690:	b37f      	cbz	r7, 80096f2 <_strtod_l+0x232>
 8009692:	4681      	mov	r9, r0
 8009694:	463d      	mov	r5, r7
 8009696:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800969a:	2b09      	cmp	r3, #9
 800969c:	d912      	bls.n	80096c4 <_strtod_l+0x204>
 800969e:	2301      	movs	r3, #1
 80096a0:	e7c4      	b.n	800962c <_strtod_l+0x16c>
 80096a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80096a8:	785a      	ldrb	r2, [r3, #1]
 80096aa:	3001      	adds	r0, #1
 80096ac:	2a30      	cmp	r2, #48	@ 0x30
 80096ae:	d0f8      	beq.n	80096a2 <_strtod_l+0x1e2>
 80096b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	f200 84d3 	bhi.w	800a060 <_strtod_l+0xba0>
 80096ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80096be:	4681      	mov	r9, r0
 80096c0:	2000      	movs	r0, #0
 80096c2:	4605      	mov	r5, r0
 80096c4:	3a30      	subs	r2, #48	@ 0x30
 80096c6:	f100 0301 	add.w	r3, r0, #1
 80096ca:	d02a      	beq.n	8009722 <_strtod_l+0x262>
 80096cc:	4499      	add	r9, r3
 80096ce:	eb00 0c05 	add.w	ip, r0, r5
 80096d2:	462b      	mov	r3, r5
 80096d4:	210a      	movs	r1, #10
 80096d6:	4563      	cmp	r3, ip
 80096d8:	d10d      	bne.n	80096f6 <_strtod_l+0x236>
 80096da:	1c69      	adds	r1, r5, #1
 80096dc:	4401      	add	r1, r0
 80096de:	4428      	add	r0, r5
 80096e0:	2808      	cmp	r0, #8
 80096e2:	dc16      	bgt.n	8009712 <_strtod_l+0x252>
 80096e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096e6:	230a      	movs	r3, #10
 80096e8:	fb03 2300 	mla	r3, r3, r0, r2
 80096ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80096ee:	2300      	movs	r3, #0
 80096f0:	e018      	b.n	8009724 <_strtod_l+0x264>
 80096f2:	4638      	mov	r0, r7
 80096f4:	e7da      	b.n	80096ac <_strtod_l+0x1ec>
 80096f6:	2b08      	cmp	r3, #8
 80096f8:	f103 0301 	add.w	r3, r3, #1
 80096fc:	dc03      	bgt.n	8009706 <_strtod_l+0x246>
 80096fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009700:	434e      	muls	r6, r1
 8009702:	960a      	str	r6, [sp, #40]	@ 0x28
 8009704:	e7e7      	b.n	80096d6 <_strtod_l+0x216>
 8009706:	2b10      	cmp	r3, #16
 8009708:	bfde      	ittt	le
 800970a:	9e08      	ldrle	r6, [sp, #32]
 800970c:	434e      	mulle	r6, r1
 800970e:	9608      	strle	r6, [sp, #32]
 8009710:	e7e1      	b.n	80096d6 <_strtod_l+0x216>
 8009712:	280f      	cmp	r0, #15
 8009714:	dceb      	bgt.n	80096ee <_strtod_l+0x22e>
 8009716:	9808      	ldr	r0, [sp, #32]
 8009718:	230a      	movs	r3, #10
 800971a:	fb03 2300 	mla	r3, r3, r0, r2
 800971e:	9308      	str	r3, [sp, #32]
 8009720:	e7e5      	b.n	80096ee <_strtod_l+0x22e>
 8009722:	4629      	mov	r1, r5
 8009724:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009726:	1c50      	adds	r0, r2, #1
 8009728:	9019      	str	r0, [sp, #100]	@ 0x64
 800972a:	7852      	ldrb	r2, [r2, #1]
 800972c:	4618      	mov	r0, r3
 800972e:	460d      	mov	r5, r1
 8009730:	e7b1      	b.n	8009696 <_strtod_l+0x1d6>
 8009732:	f04f 0900 	mov.w	r9, #0
 8009736:	2301      	movs	r3, #1
 8009738:	e77d      	b.n	8009636 <_strtod_l+0x176>
 800973a:	f04f 0c00 	mov.w	ip, #0
 800973e:	1ca2      	adds	r2, r4, #2
 8009740:	9219      	str	r2, [sp, #100]	@ 0x64
 8009742:	78a2      	ldrb	r2, [r4, #2]
 8009744:	e785      	b.n	8009652 <_strtod_l+0x192>
 8009746:	f04f 0c01 	mov.w	ip, #1
 800974a:	e7f8      	b.n	800973e <_strtod_l+0x27e>
 800974c:	0800c578 	.word	0x0800c578
 8009750:	0800c554 	.word	0x0800c554
 8009754:	7ff00000 	.word	0x7ff00000
 8009758:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800975a:	1c51      	adds	r1, r2, #1
 800975c:	9119      	str	r1, [sp, #100]	@ 0x64
 800975e:	7852      	ldrb	r2, [r2, #1]
 8009760:	2a30      	cmp	r2, #48	@ 0x30
 8009762:	d0f9      	beq.n	8009758 <_strtod_l+0x298>
 8009764:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009768:	2908      	cmp	r1, #8
 800976a:	f63f af78 	bhi.w	800965e <_strtod_l+0x19e>
 800976e:	3a30      	subs	r2, #48	@ 0x30
 8009770:	920e      	str	r2, [sp, #56]	@ 0x38
 8009772:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009774:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009776:	f04f 080a 	mov.w	r8, #10
 800977a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800977c:	1c56      	adds	r6, r2, #1
 800977e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009780:	7852      	ldrb	r2, [r2, #1]
 8009782:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009786:	f1be 0f09 	cmp.w	lr, #9
 800978a:	d939      	bls.n	8009800 <_strtod_l+0x340>
 800978c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800978e:	1a76      	subs	r6, r6, r1
 8009790:	2e08      	cmp	r6, #8
 8009792:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009796:	dc03      	bgt.n	80097a0 <_strtod_l+0x2e0>
 8009798:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800979a:	4588      	cmp	r8, r1
 800979c:	bfa8      	it	ge
 800979e:	4688      	movge	r8, r1
 80097a0:	f1bc 0f00 	cmp.w	ip, #0
 80097a4:	d001      	beq.n	80097aa <_strtod_l+0x2ea>
 80097a6:	f1c8 0800 	rsb	r8, r8, #0
 80097aa:	2d00      	cmp	r5, #0
 80097ac:	d14e      	bne.n	800984c <_strtod_l+0x38c>
 80097ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097b0:	4308      	orrs	r0, r1
 80097b2:	f47f aebe 	bne.w	8009532 <_strtod_l+0x72>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f47f aed6 	bne.w	8009568 <_strtod_l+0xa8>
 80097bc:	2a69      	cmp	r2, #105	@ 0x69
 80097be:	d028      	beq.n	8009812 <_strtod_l+0x352>
 80097c0:	dc25      	bgt.n	800980e <_strtod_l+0x34e>
 80097c2:	2a49      	cmp	r2, #73	@ 0x49
 80097c4:	d025      	beq.n	8009812 <_strtod_l+0x352>
 80097c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80097c8:	f47f aece 	bne.w	8009568 <_strtod_l+0xa8>
 80097cc:	499b      	ldr	r1, [pc, #620]	@ (8009a3c <_strtod_l+0x57c>)
 80097ce:	a819      	add	r0, sp, #100	@ 0x64
 80097d0:	f001 f97e 	bl	800aad0 <__match>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	f43f aec7 	beq.w	8009568 <_strtod_l+0xa8>
 80097da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b28      	cmp	r3, #40	@ 0x28
 80097e0:	d12e      	bne.n	8009840 <_strtod_l+0x380>
 80097e2:	4997      	ldr	r1, [pc, #604]	@ (8009a40 <_strtod_l+0x580>)
 80097e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80097e6:	a819      	add	r0, sp, #100	@ 0x64
 80097e8:	f001 f986 	bl	800aaf8 <__hexnan>
 80097ec:	2805      	cmp	r0, #5
 80097ee:	d127      	bne.n	8009840 <_strtod_l+0x380>
 80097f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80097f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80097fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80097fe:	e698      	b.n	8009532 <_strtod_l+0x72>
 8009800:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009802:	fb08 2101 	mla	r1, r8, r1, r2
 8009806:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800980a:	920e      	str	r2, [sp, #56]	@ 0x38
 800980c:	e7b5      	b.n	800977a <_strtod_l+0x2ba>
 800980e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009810:	e7da      	b.n	80097c8 <_strtod_l+0x308>
 8009812:	498c      	ldr	r1, [pc, #560]	@ (8009a44 <_strtod_l+0x584>)
 8009814:	a819      	add	r0, sp, #100	@ 0x64
 8009816:	f001 f95b 	bl	800aad0 <__match>
 800981a:	2800      	cmp	r0, #0
 800981c:	f43f aea4 	beq.w	8009568 <_strtod_l+0xa8>
 8009820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009822:	4989      	ldr	r1, [pc, #548]	@ (8009a48 <_strtod_l+0x588>)
 8009824:	3b01      	subs	r3, #1
 8009826:	a819      	add	r0, sp, #100	@ 0x64
 8009828:	9319      	str	r3, [sp, #100]	@ 0x64
 800982a:	f001 f951 	bl	800aad0 <__match>
 800982e:	b910      	cbnz	r0, 8009836 <_strtod_l+0x376>
 8009830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009832:	3301      	adds	r3, #1
 8009834:	9319      	str	r3, [sp, #100]	@ 0x64
 8009836:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009a58 <_strtod_l+0x598>
 800983a:	f04f 0a00 	mov.w	sl, #0
 800983e:	e678      	b.n	8009532 <_strtod_l+0x72>
 8009840:	4882      	ldr	r0, [pc, #520]	@ (8009a4c <_strtod_l+0x58c>)
 8009842:	f000 fe69 	bl	800a518 <nan>
 8009846:	ec5b ab10 	vmov	sl, fp, d0
 800984a:	e672      	b.n	8009532 <_strtod_l+0x72>
 800984c:	eba8 0309 	sub.w	r3, r8, r9
 8009850:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009852:	9309      	str	r3, [sp, #36]	@ 0x24
 8009854:	2f00      	cmp	r7, #0
 8009856:	bf08      	it	eq
 8009858:	462f      	moveq	r7, r5
 800985a:	2d10      	cmp	r5, #16
 800985c:	462c      	mov	r4, r5
 800985e:	bfa8      	it	ge
 8009860:	2410      	movge	r4, #16
 8009862:	f7f6 fe7f 	bl	8000564 <__aeabi_ui2d>
 8009866:	2d09      	cmp	r5, #9
 8009868:	4682      	mov	sl, r0
 800986a:	468b      	mov	fp, r1
 800986c:	dc13      	bgt.n	8009896 <_strtod_l+0x3d6>
 800986e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009870:	2b00      	cmp	r3, #0
 8009872:	f43f ae5e 	beq.w	8009532 <_strtod_l+0x72>
 8009876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009878:	dd78      	ble.n	800996c <_strtod_l+0x4ac>
 800987a:	2b16      	cmp	r3, #22
 800987c:	dc5f      	bgt.n	800993e <_strtod_l+0x47e>
 800987e:	4974      	ldr	r1, [pc, #464]	@ (8009a50 <_strtod_l+0x590>)
 8009880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009888:	4652      	mov	r2, sl
 800988a:	465b      	mov	r3, fp
 800988c:	f7f6 fee4 	bl	8000658 <__aeabi_dmul>
 8009890:	4682      	mov	sl, r0
 8009892:	468b      	mov	fp, r1
 8009894:	e64d      	b.n	8009532 <_strtod_l+0x72>
 8009896:	4b6e      	ldr	r3, [pc, #440]	@ (8009a50 <_strtod_l+0x590>)
 8009898:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800989c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80098a0:	f7f6 feda 	bl	8000658 <__aeabi_dmul>
 80098a4:	4682      	mov	sl, r0
 80098a6:	9808      	ldr	r0, [sp, #32]
 80098a8:	468b      	mov	fp, r1
 80098aa:	f7f6 fe5b 	bl	8000564 <__aeabi_ui2d>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4650      	mov	r0, sl
 80098b4:	4659      	mov	r1, fp
 80098b6:	f7f6 fd19 	bl	80002ec <__adddf3>
 80098ba:	2d0f      	cmp	r5, #15
 80098bc:	4682      	mov	sl, r0
 80098be:	468b      	mov	fp, r1
 80098c0:	ddd5      	ble.n	800986e <_strtod_l+0x3ae>
 80098c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c4:	1b2c      	subs	r4, r5, r4
 80098c6:	441c      	add	r4, r3
 80098c8:	2c00      	cmp	r4, #0
 80098ca:	f340 8096 	ble.w	80099fa <_strtod_l+0x53a>
 80098ce:	f014 030f 	ands.w	r3, r4, #15
 80098d2:	d00a      	beq.n	80098ea <_strtod_l+0x42a>
 80098d4:	495e      	ldr	r1, [pc, #376]	@ (8009a50 <_strtod_l+0x590>)
 80098d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098da:	4652      	mov	r2, sl
 80098dc:	465b      	mov	r3, fp
 80098de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e2:	f7f6 feb9 	bl	8000658 <__aeabi_dmul>
 80098e6:	4682      	mov	sl, r0
 80098e8:	468b      	mov	fp, r1
 80098ea:	f034 040f 	bics.w	r4, r4, #15
 80098ee:	d073      	beq.n	80099d8 <_strtod_l+0x518>
 80098f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80098f4:	dd48      	ble.n	8009988 <_strtod_l+0x4c8>
 80098f6:	2400      	movs	r4, #0
 80098f8:	46a0      	mov	r8, r4
 80098fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80098fc:	46a1      	mov	r9, r4
 80098fe:	9a05      	ldr	r2, [sp, #20]
 8009900:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009a58 <_strtod_l+0x598>
 8009904:	2322      	movs	r3, #34	@ 0x22
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	f04f 0a00 	mov.w	sl, #0
 800990c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800990e:	2b00      	cmp	r3, #0
 8009910:	f43f ae0f 	beq.w	8009532 <_strtod_l+0x72>
 8009914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009916:	9805      	ldr	r0, [sp, #20]
 8009918:	f001 f9dc 	bl	800acd4 <_Bfree>
 800991c:	9805      	ldr	r0, [sp, #20]
 800991e:	4649      	mov	r1, r9
 8009920:	f001 f9d8 	bl	800acd4 <_Bfree>
 8009924:	9805      	ldr	r0, [sp, #20]
 8009926:	4641      	mov	r1, r8
 8009928:	f001 f9d4 	bl	800acd4 <_Bfree>
 800992c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800992e:	9805      	ldr	r0, [sp, #20]
 8009930:	f001 f9d0 	bl	800acd4 <_Bfree>
 8009934:	9805      	ldr	r0, [sp, #20]
 8009936:	4621      	mov	r1, r4
 8009938:	f001 f9cc 	bl	800acd4 <_Bfree>
 800993c:	e5f9      	b.n	8009532 <_strtod_l+0x72>
 800993e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009940:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009944:	4293      	cmp	r3, r2
 8009946:	dbbc      	blt.n	80098c2 <_strtod_l+0x402>
 8009948:	4c41      	ldr	r4, [pc, #260]	@ (8009a50 <_strtod_l+0x590>)
 800994a:	f1c5 050f 	rsb	r5, r5, #15
 800994e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009952:	4652      	mov	r2, sl
 8009954:	465b      	mov	r3, fp
 8009956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800995a:	f7f6 fe7d 	bl	8000658 <__aeabi_dmul>
 800995e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009960:	1b5d      	subs	r5, r3, r5
 8009962:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009966:	e9d4 2300 	ldrd	r2, r3, [r4]
 800996a:	e78f      	b.n	800988c <_strtod_l+0x3cc>
 800996c:	3316      	adds	r3, #22
 800996e:	dba8      	blt.n	80098c2 <_strtod_l+0x402>
 8009970:	4b37      	ldr	r3, [pc, #220]	@ (8009a50 <_strtod_l+0x590>)
 8009972:	eba9 0808 	sub.w	r8, r9, r8
 8009976:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800997a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800997e:	4650      	mov	r0, sl
 8009980:	4659      	mov	r1, fp
 8009982:	f7f6 ff93 	bl	80008ac <__aeabi_ddiv>
 8009986:	e783      	b.n	8009890 <_strtod_l+0x3d0>
 8009988:	4b32      	ldr	r3, [pc, #200]	@ (8009a54 <_strtod_l+0x594>)
 800998a:	9308      	str	r3, [sp, #32]
 800998c:	2300      	movs	r3, #0
 800998e:	1124      	asrs	r4, r4, #4
 8009990:	4650      	mov	r0, sl
 8009992:	4659      	mov	r1, fp
 8009994:	461e      	mov	r6, r3
 8009996:	2c01      	cmp	r4, #1
 8009998:	dc21      	bgt.n	80099de <_strtod_l+0x51e>
 800999a:	b10b      	cbz	r3, 80099a0 <_strtod_l+0x4e0>
 800999c:	4682      	mov	sl, r0
 800999e:	468b      	mov	fp, r1
 80099a0:	492c      	ldr	r1, [pc, #176]	@ (8009a54 <_strtod_l+0x594>)
 80099a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80099a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80099aa:	4652      	mov	r2, sl
 80099ac:	465b      	mov	r3, fp
 80099ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b2:	f7f6 fe51 	bl	8000658 <__aeabi_dmul>
 80099b6:	4b28      	ldr	r3, [pc, #160]	@ (8009a58 <_strtod_l+0x598>)
 80099b8:	460a      	mov	r2, r1
 80099ba:	400b      	ands	r3, r1
 80099bc:	4927      	ldr	r1, [pc, #156]	@ (8009a5c <_strtod_l+0x59c>)
 80099be:	428b      	cmp	r3, r1
 80099c0:	4682      	mov	sl, r0
 80099c2:	d898      	bhi.n	80098f6 <_strtod_l+0x436>
 80099c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80099c8:	428b      	cmp	r3, r1
 80099ca:	bf86      	itte	hi
 80099cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009a60 <_strtod_l+0x5a0>
 80099d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80099d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80099d8:	2300      	movs	r3, #0
 80099da:	9308      	str	r3, [sp, #32]
 80099dc:	e07a      	b.n	8009ad4 <_strtod_l+0x614>
 80099de:	07e2      	lsls	r2, r4, #31
 80099e0:	d505      	bpl.n	80099ee <_strtod_l+0x52e>
 80099e2:	9b08      	ldr	r3, [sp, #32]
 80099e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e8:	f7f6 fe36 	bl	8000658 <__aeabi_dmul>
 80099ec:	2301      	movs	r3, #1
 80099ee:	9a08      	ldr	r2, [sp, #32]
 80099f0:	3208      	adds	r2, #8
 80099f2:	3601      	adds	r6, #1
 80099f4:	1064      	asrs	r4, r4, #1
 80099f6:	9208      	str	r2, [sp, #32]
 80099f8:	e7cd      	b.n	8009996 <_strtod_l+0x4d6>
 80099fa:	d0ed      	beq.n	80099d8 <_strtod_l+0x518>
 80099fc:	4264      	negs	r4, r4
 80099fe:	f014 020f 	ands.w	r2, r4, #15
 8009a02:	d00a      	beq.n	8009a1a <_strtod_l+0x55a>
 8009a04:	4b12      	ldr	r3, [pc, #72]	@ (8009a50 <_strtod_l+0x590>)
 8009a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a0a:	4650      	mov	r0, sl
 8009a0c:	4659      	mov	r1, fp
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f7f6 ff4b 	bl	80008ac <__aeabi_ddiv>
 8009a16:	4682      	mov	sl, r0
 8009a18:	468b      	mov	fp, r1
 8009a1a:	1124      	asrs	r4, r4, #4
 8009a1c:	d0dc      	beq.n	80099d8 <_strtod_l+0x518>
 8009a1e:	2c1f      	cmp	r4, #31
 8009a20:	dd20      	ble.n	8009a64 <_strtod_l+0x5a4>
 8009a22:	2400      	movs	r4, #0
 8009a24:	46a0      	mov	r8, r4
 8009a26:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a28:	46a1      	mov	r9, r4
 8009a2a:	9a05      	ldr	r2, [sp, #20]
 8009a2c:	2322      	movs	r3, #34	@ 0x22
 8009a2e:	f04f 0a00 	mov.w	sl, #0
 8009a32:	f04f 0b00 	mov.w	fp, #0
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	e768      	b.n	800990c <_strtod_l+0x44c>
 8009a3a:	bf00      	nop
 8009a3c:	0800c55f 	.word	0x0800c55f
 8009a40:	0800c564 	.word	0x0800c564
 8009a44:	0800c556 	.word	0x0800c556
 8009a48:	0800c559 	.word	0x0800c559
 8009a4c:	0800c90e 	.word	0x0800c90e
 8009a50:	0800c7d8 	.word	0x0800c7d8
 8009a54:	0800c7b0 	.word	0x0800c7b0
 8009a58:	7ff00000 	.word	0x7ff00000
 8009a5c:	7ca00000 	.word	0x7ca00000
 8009a60:	7fefffff 	.word	0x7fefffff
 8009a64:	f014 0310 	ands.w	r3, r4, #16
 8009a68:	bf18      	it	ne
 8009a6a:	236a      	movne	r3, #106	@ 0x6a
 8009a6c:	4ea9      	ldr	r6, [pc, #676]	@ (8009d14 <_strtod_l+0x854>)
 8009a6e:	9308      	str	r3, [sp, #32]
 8009a70:	4650      	mov	r0, sl
 8009a72:	4659      	mov	r1, fp
 8009a74:	2300      	movs	r3, #0
 8009a76:	07e2      	lsls	r2, r4, #31
 8009a78:	d504      	bpl.n	8009a84 <_strtod_l+0x5c4>
 8009a7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a7e:	f7f6 fdeb 	bl	8000658 <__aeabi_dmul>
 8009a82:	2301      	movs	r3, #1
 8009a84:	1064      	asrs	r4, r4, #1
 8009a86:	f106 0608 	add.w	r6, r6, #8
 8009a8a:	d1f4      	bne.n	8009a76 <_strtod_l+0x5b6>
 8009a8c:	b10b      	cbz	r3, 8009a92 <_strtod_l+0x5d2>
 8009a8e:	4682      	mov	sl, r0
 8009a90:	468b      	mov	fp, r1
 8009a92:	9b08      	ldr	r3, [sp, #32]
 8009a94:	b1b3      	cbz	r3, 8009ac4 <_strtod_l+0x604>
 8009a96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	4659      	mov	r1, fp
 8009aa2:	dd0f      	ble.n	8009ac4 <_strtod_l+0x604>
 8009aa4:	2b1f      	cmp	r3, #31
 8009aa6:	dd55      	ble.n	8009b54 <_strtod_l+0x694>
 8009aa8:	2b34      	cmp	r3, #52	@ 0x34
 8009aaa:	bfde      	ittt	le
 8009aac:	f04f 33ff 	movle.w	r3, #4294967295
 8009ab0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009ab4:	4093      	lslle	r3, r2
 8009ab6:	f04f 0a00 	mov.w	sl, #0
 8009aba:	bfcc      	ite	gt
 8009abc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009ac0:	ea03 0b01 	andle.w	fp, r3, r1
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	4650      	mov	r0, sl
 8009aca:	4659      	mov	r1, fp
 8009acc:	f7f7 f82c 	bl	8000b28 <__aeabi_dcmpeq>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d1a6      	bne.n	8009a22 <_strtod_l+0x562>
 8009ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009ada:	9805      	ldr	r0, [sp, #20]
 8009adc:	462b      	mov	r3, r5
 8009ade:	463a      	mov	r2, r7
 8009ae0:	f001 f960 	bl	800ada4 <__s2b>
 8009ae4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f43f af05 	beq.w	80098f6 <_strtod_l+0x436>
 8009aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	eba9 0308 	sub.w	r3, r9, r8
 8009af4:	bfa8      	it	ge
 8009af6:	2300      	movge	r3, #0
 8009af8:	9312      	str	r3, [sp, #72]	@ 0x48
 8009afa:	2400      	movs	r4, #0
 8009afc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b00:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b02:	46a0      	mov	r8, r4
 8009b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b06:	9805      	ldr	r0, [sp, #20]
 8009b08:	6859      	ldr	r1, [r3, #4]
 8009b0a:	f001 f8a3 	bl	800ac54 <_Balloc>
 8009b0e:	4681      	mov	r9, r0
 8009b10:	2800      	cmp	r0, #0
 8009b12:	f43f aef4 	beq.w	80098fe <_strtod_l+0x43e>
 8009b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b18:	691a      	ldr	r2, [r3, #16]
 8009b1a:	3202      	adds	r2, #2
 8009b1c:	f103 010c 	add.w	r1, r3, #12
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	300c      	adds	r0, #12
 8009b24:	f000 fce9 	bl	800a4fa <memcpy>
 8009b28:	ec4b ab10 	vmov	d0, sl, fp
 8009b2c:	9805      	ldr	r0, [sp, #20]
 8009b2e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b30:	a91b      	add	r1, sp, #108	@ 0x6c
 8009b32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009b36:	f001 fc71 	bl	800b41c <__d2b>
 8009b3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f43f aede 	beq.w	80098fe <_strtod_l+0x43e>
 8009b42:	9805      	ldr	r0, [sp, #20]
 8009b44:	2101      	movs	r1, #1
 8009b46:	f001 f9c3 	bl	800aed0 <__i2b>
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	b948      	cbnz	r0, 8009b62 <_strtod_l+0x6a2>
 8009b4e:	f04f 0800 	mov.w	r8, #0
 8009b52:	e6d4      	b.n	80098fe <_strtod_l+0x43e>
 8009b54:	f04f 32ff 	mov.w	r2, #4294967295
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	ea03 0a0a 	and.w	sl, r3, sl
 8009b60:	e7b0      	b.n	8009ac4 <_strtod_l+0x604>
 8009b62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009b64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009b66:	2d00      	cmp	r5, #0
 8009b68:	bfab      	itete	ge
 8009b6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009b6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009b6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009b70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009b72:	bfac      	ite	ge
 8009b74:	18ef      	addge	r7, r5, r3
 8009b76:	1b5e      	sublt	r6, r3, r5
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	1aed      	subs	r5, r5, r3
 8009b7c:	4415      	add	r5, r2
 8009b7e:	4b66      	ldr	r3, [pc, #408]	@ (8009d18 <_strtod_l+0x858>)
 8009b80:	3d01      	subs	r5, #1
 8009b82:	429d      	cmp	r5, r3
 8009b84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009b88:	da50      	bge.n	8009c2c <_strtod_l+0x76c>
 8009b8a:	1b5b      	subs	r3, r3, r5
 8009b8c:	2b1f      	cmp	r3, #31
 8009b8e:	eba2 0203 	sub.w	r2, r2, r3
 8009b92:	f04f 0101 	mov.w	r1, #1
 8009b96:	dc3d      	bgt.n	8009c14 <_strtod_l+0x754>
 8009b98:	fa01 f303 	lsl.w	r3, r1, r3
 8009b9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ba2:	18bd      	adds	r5, r7, r2
 8009ba4:	9b08      	ldr	r3, [sp, #32]
 8009ba6:	42af      	cmp	r7, r5
 8009ba8:	4416      	add	r6, r2
 8009baa:	441e      	add	r6, r3
 8009bac:	463b      	mov	r3, r7
 8009bae:	bfa8      	it	ge
 8009bb0:	462b      	movge	r3, r5
 8009bb2:	42b3      	cmp	r3, r6
 8009bb4:	bfa8      	it	ge
 8009bb6:	4633      	movge	r3, r6
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bfc2      	ittt	gt
 8009bbc:	1aed      	subgt	r5, r5, r3
 8009bbe:	1af6      	subgt	r6, r6, r3
 8009bc0:	1aff      	subgt	r7, r7, r3
 8009bc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	dd16      	ble.n	8009bf6 <_strtod_l+0x736>
 8009bc8:	4641      	mov	r1, r8
 8009bca:	9805      	ldr	r0, [sp, #20]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f001 fa3f 	bl	800b050 <__pow5mult>
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d0ba      	beq.n	8009b4e <_strtod_l+0x68e>
 8009bd8:	4601      	mov	r1, r0
 8009bda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009bdc:	9805      	ldr	r0, [sp, #20]
 8009bde:	f001 f98d 	bl	800aefc <__multiply>
 8009be2:	900e      	str	r0, [sp, #56]	@ 0x38
 8009be4:	2800      	cmp	r0, #0
 8009be6:	f43f ae8a 	beq.w	80098fe <_strtod_l+0x43e>
 8009bea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bec:	9805      	ldr	r0, [sp, #20]
 8009bee:	f001 f871 	bl	800acd4 <_Bfree>
 8009bf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	dc1d      	bgt.n	8009c36 <_strtod_l+0x776>
 8009bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dd23      	ble.n	8009c48 <_strtod_l+0x788>
 8009c00:	4649      	mov	r1, r9
 8009c02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c04:	9805      	ldr	r0, [sp, #20]
 8009c06:	f001 fa23 	bl	800b050 <__pow5mult>
 8009c0a:	4681      	mov	r9, r0
 8009c0c:	b9e0      	cbnz	r0, 8009c48 <_strtod_l+0x788>
 8009c0e:	f04f 0900 	mov.w	r9, #0
 8009c12:	e674      	b.n	80098fe <_strtod_l+0x43e>
 8009c14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009c18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009c1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009c20:	35e2      	adds	r5, #226	@ 0xe2
 8009c22:	fa01 f305 	lsl.w	r3, r1, r5
 8009c26:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009c2a:	e7ba      	b.n	8009ba2 <_strtod_l+0x6e2>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c30:	2301      	movs	r3, #1
 8009c32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c34:	e7b5      	b.n	8009ba2 <_strtod_l+0x6e2>
 8009c36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c38:	9805      	ldr	r0, [sp, #20]
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	f001 fa62 	bl	800b104 <__lshift>
 8009c40:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d1d9      	bne.n	8009bfa <_strtod_l+0x73a>
 8009c46:	e65a      	b.n	80098fe <_strtod_l+0x43e>
 8009c48:	2e00      	cmp	r6, #0
 8009c4a:	dd07      	ble.n	8009c5c <_strtod_l+0x79c>
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	9805      	ldr	r0, [sp, #20]
 8009c50:	4632      	mov	r2, r6
 8009c52:	f001 fa57 	bl	800b104 <__lshift>
 8009c56:	4681      	mov	r9, r0
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d0d8      	beq.n	8009c0e <_strtod_l+0x74e>
 8009c5c:	2f00      	cmp	r7, #0
 8009c5e:	dd08      	ble.n	8009c72 <_strtod_l+0x7b2>
 8009c60:	4641      	mov	r1, r8
 8009c62:	9805      	ldr	r0, [sp, #20]
 8009c64:	463a      	mov	r2, r7
 8009c66:	f001 fa4d 	bl	800b104 <__lshift>
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	f43f ae46 	beq.w	80098fe <_strtod_l+0x43e>
 8009c72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c74:	9805      	ldr	r0, [sp, #20]
 8009c76:	464a      	mov	r2, r9
 8009c78:	f001 facc 	bl	800b214 <__mdiff>
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f43f ae3d 	beq.w	80098fe <_strtod_l+0x43e>
 8009c84:	68c3      	ldr	r3, [r0, #12]
 8009c86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60c3      	str	r3, [r0, #12]
 8009c8c:	4641      	mov	r1, r8
 8009c8e:	f001 faa5 	bl	800b1dc <__mcmp>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	da46      	bge.n	8009d24 <_strtod_l+0x864>
 8009c96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c98:	ea53 030a 	orrs.w	r3, r3, sl
 8009c9c:	d16c      	bne.n	8009d78 <_strtod_l+0x8b8>
 8009c9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d168      	bne.n	8009d78 <_strtod_l+0x8b8>
 8009ca6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009caa:	0d1b      	lsrs	r3, r3, #20
 8009cac:	051b      	lsls	r3, r3, #20
 8009cae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009cb2:	d961      	bls.n	8009d78 <_strtod_l+0x8b8>
 8009cb4:	6963      	ldr	r3, [r4, #20]
 8009cb6:	b913      	cbnz	r3, 8009cbe <_strtod_l+0x7fe>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	dd5c      	ble.n	8009d78 <_strtod_l+0x8b8>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	f001 fa1e 	bl	800b104 <__lshift>
 8009cc8:	4641      	mov	r1, r8
 8009cca:	4604      	mov	r4, r0
 8009ccc:	f001 fa86 	bl	800b1dc <__mcmp>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	dd51      	ble.n	8009d78 <_strtod_l+0x8b8>
 8009cd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cd8:	9a08      	ldr	r2, [sp, #32]
 8009cda:	0d1b      	lsrs	r3, r3, #20
 8009cdc:	051b      	lsls	r3, r3, #20
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	d06b      	beq.n	8009dba <_strtod_l+0x8fa>
 8009ce2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ce6:	d868      	bhi.n	8009dba <_strtod_l+0x8fa>
 8009ce8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009cec:	f67f ae9d 	bls.w	8009a2a <_strtod_l+0x56a>
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8009d1c <_strtod_l+0x85c>)
 8009cf2:	4650      	mov	r0, sl
 8009cf4:	4659      	mov	r1, fp
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f7f6 fcae 	bl	8000658 <__aeabi_dmul>
 8009cfc:	4b08      	ldr	r3, [pc, #32]	@ (8009d20 <_strtod_l+0x860>)
 8009cfe:	400b      	ands	r3, r1
 8009d00:	4682      	mov	sl, r0
 8009d02:	468b      	mov	fp, r1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f47f ae05 	bne.w	8009914 <_strtod_l+0x454>
 8009d0a:	9a05      	ldr	r2, [sp, #20]
 8009d0c:	2322      	movs	r3, #34	@ 0x22
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	e600      	b.n	8009914 <_strtod_l+0x454>
 8009d12:	bf00      	nop
 8009d14:	0800c590 	.word	0x0800c590
 8009d18:	fffffc02 	.word	0xfffffc02
 8009d1c:	39500000 	.word	0x39500000
 8009d20:	7ff00000 	.word	0x7ff00000
 8009d24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d28:	d165      	bne.n	8009df6 <_strtod_l+0x936>
 8009d2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d30:	b35a      	cbz	r2, 8009d8a <_strtod_l+0x8ca>
 8009d32:	4a9f      	ldr	r2, [pc, #636]	@ (8009fb0 <_strtod_l+0xaf0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d12b      	bne.n	8009d90 <_strtod_l+0x8d0>
 8009d38:	9b08      	ldr	r3, [sp, #32]
 8009d3a:	4651      	mov	r1, sl
 8009d3c:	b303      	cbz	r3, 8009d80 <_strtod_l+0x8c0>
 8009d3e:	4b9d      	ldr	r3, [pc, #628]	@ (8009fb4 <_strtod_l+0xaf4>)
 8009d40:	465a      	mov	r2, fp
 8009d42:	4013      	ands	r3, r2
 8009d44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009d48:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4c:	d81b      	bhi.n	8009d86 <_strtod_l+0x8c6>
 8009d4e:	0d1b      	lsrs	r3, r3, #20
 8009d50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d54:	fa02 f303 	lsl.w	r3, r2, r3
 8009d58:	4299      	cmp	r1, r3
 8009d5a:	d119      	bne.n	8009d90 <_strtod_l+0x8d0>
 8009d5c:	4b96      	ldr	r3, [pc, #600]	@ (8009fb8 <_strtod_l+0xaf8>)
 8009d5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d102      	bne.n	8009d6a <_strtod_l+0x8aa>
 8009d64:	3101      	adds	r1, #1
 8009d66:	f43f adca 	beq.w	80098fe <_strtod_l+0x43e>
 8009d6a:	4b92      	ldr	r3, [pc, #584]	@ (8009fb4 <_strtod_l+0xaf4>)
 8009d6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d6e:	401a      	ands	r2, r3
 8009d70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009d74:	f04f 0a00 	mov.w	sl, #0
 8009d78:	9b08      	ldr	r3, [sp, #32]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1b8      	bne.n	8009cf0 <_strtod_l+0x830>
 8009d7e:	e5c9      	b.n	8009914 <_strtod_l+0x454>
 8009d80:	f04f 33ff 	mov.w	r3, #4294967295
 8009d84:	e7e8      	b.n	8009d58 <_strtod_l+0x898>
 8009d86:	4613      	mov	r3, r2
 8009d88:	e7e6      	b.n	8009d58 <_strtod_l+0x898>
 8009d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8009d8e:	d0a1      	beq.n	8009cd4 <_strtod_l+0x814>
 8009d90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d92:	b1db      	cbz	r3, 8009dcc <_strtod_l+0x90c>
 8009d94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d96:	4213      	tst	r3, r2
 8009d98:	d0ee      	beq.n	8009d78 <_strtod_l+0x8b8>
 8009d9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d9c:	9a08      	ldr	r2, [sp, #32]
 8009d9e:	4650      	mov	r0, sl
 8009da0:	4659      	mov	r1, fp
 8009da2:	b1bb      	cbz	r3, 8009dd4 <_strtod_l+0x914>
 8009da4:	f7ff fb6c 	bl	8009480 <sulp>
 8009da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dac:	ec53 2b10 	vmov	r2, r3, d0
 8009db0:	f7f6 fa9c 	bl	80002ec <__adddf3>
 8009db4:	4682      	mov	sl, r0
 8009db6:	468b      	mov	fp, r1
 8009db8:	e7de      	b.n	8009d78 <_strtod_l+0x8b8>
 8009dba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009dbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009dc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009dc6:	f04f 3aff 	mov.w	sl, #4294967295
 8009dca:	e7d5      	b.n	8009d78 <_strtod_l+0x8b8>
 8009dcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dce:	ea13 0f0a 	tst.w	r3, sl
 8009dd2:	e7e1      	b.n	8009d98 <_strtod_l+0x8d8>
 8009dd4:	f7ff fb54 	bl	8009480 <sulp>
 8009dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ddc:	ec53 2b10 	vmov	r2, r3, d0
 8009de0:	f7f6 fa82 	bl	80002e8 <__aeabi_dsub>
 8009de4:	2200      	movs	r2, #0
 8009de6:	2300      	movs	r3, #0
 8009de8:	4682      	mov	sl, r0
 8009dea:	468b      	mov	fp, r1
 8009dec:	f7f6 fe9c 	bl	8000b28 <__aeabi_dcmpeq>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d0c1      	beq.n	8009d78 <_strtod_l+0x8b8>
 8009df4:	e619      	b.n	8009a2a <_strtod_l+0x56a>
 8009df6:	4641      	mov	r1, r8
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f001 fb67 	bl	800b4cc <__ratio>
 8009dfe:	ec57 6b10 	vmov	r6, r7, d0
 8009e02:	2200      	movs	r2, #0
 8009e04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fea0 	bl	8000b50 <__aeabi_dcmple>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d06f      	beq.n	8009ef4 <_strtod_l+0xa34>
 8009e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d17a      	bne.n	8009f10 <_strtod_l+0xa50>
 8009e1a:	f1ba 0f00 	cmp.w	sl, #0
 8009e1e:	d158      	bne.n	8009ed2 <_strtod_l+0xa12>
 8009e20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d15a      	bne.n	8009ee0 <_strtod_l+0xa20>
 8009e2a:	4b64      	ldr	r3, [pc, #400]	@ (8009fbc <_strtod_l+0xafc>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4630      	mov	r0, r6
 8009e30:	4639      	mov	r1, r7
 8009e32:	f7f6 fe83 	bl	8000b3c <__aeabi_dcmplt>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d159      	bne.n	8009eee <_strtod_l+0xa2e>
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	4b60      	ldr	r3, [pc, #384]	@ (8009fc0 <_strtod_l+0xb00>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	f7f6 fc09 	bl	8000658 <__aeabi_dmul>
 8009e46:	4606      	mov	r6, r0
 8009e48:	460f      	mov	r7, r1
 8009e4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009e4e:	9606      	str	r6, [sp, #24]
 8009e50:	9307      	str	r3, [sp, #28]
 8009e52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e56:	4d57      	ldr	r5, [pc, #348]	@ (8009fb4 <_strtod_l+0xaf4>)
 8009e58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e5e:	401d      	ands	r5, r3
 8009e60:	4b58      	ldr	r3, [pc, #352]	@ (8009fc4 <_strtod_l+0xb04>)
 8009e62:	429d      	cmp	r5, r3
 8009e64:	f040 80b2 	bne.w	8009fcc <_strtod_l+0xb0c>
 8009e68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009e6e:	ec4b ab10 	vmov	d0, sl, fp
 8009e72:	f001 fa63 	bl	800b33c <__ulp>
 8009e76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e7a:	ec51 0b10 	vmov	r0, r1, d0
 8009e7e:	f7f6 fbeb 	bl	8000658 <__aeabi_dmul>
 8009e82:	4652      	mov	r2, sl
 8009e84:	465b      	mov	r3, fp
 8009e86:	f7f6 fa31 	bl	80002ec <__adddf3>
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4949      	ldr	r1, [pc, #292]	@ (8009fb4 <_strtod_l+0xaf4>)
 8009e8e:	4a4e      	ldr	r2, [pc, #312]	@ (8009fc8 <_strtod_l+0xb08>)
 8009e90:	4019      	ands	r1, r3
 8009e92:	4291      	cmp	r1, r2
 8009e94:	4682      	mov	sl, r0
 8009e96:	d942      	bls.n	8009f1e <_strtod_l+0xa5e>
 8009e98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e9a:	4b47      	ldr	r3, [pc, #284]	@ (8009fb8 <_strtod_l+0xaf8>)
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d103      	bne.n	8009ea8 <_strtod_l+0x9e8>
 8009ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f43f ad2b 	beq.w	80098fe <_strtod_l+0x43e>
 8009ea8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009fb8 <_strtod_l+0xaf8>
 8009eac:	f04f 3aff 	mov.w	sl, #4294967295
 8009eb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009eb2:	9805      	ldr	r0, [sp, #20]
 8009eb4:	f000 ff0e 	bl	800acd4 <_Bfree>
 8009eb8:	9805      	ldr	r0, [sp, #20]
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f000 ff0a 	bl	800acd4 <_Bfree>
 8009ec0:	9805      	ldr	r0, [sp, #20]
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	f000 ff06 	bl	800acd4 <_Bfree>
 8009ec8:	9805      	ldr	r0, [sp, #20]
 8009eca:	4621      	mov	r1, r4
 8009ecc:	f000 ff02 	bl	800acd4 <_Bfree>
 8009ed0:	e618      	b.n	8009b04 <_strtod_l+0x644>
 8009ed2:	f1ba 0f01 	cmp.w	sl, #1
 8009ed6:	d103      	bne.n	8009ee0 <_strtod_l+0xa20>
 8009ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f43f ada5 	beq.w	8009a2a <_strtod_l+0x56a>
 8009ee0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009f90 <_strtod_l+0xad0>
 8009ee4:	4f35      	ldr	r7, [pc, #212]	@ (8009fbc <_strtod_l+0xafc>)
 8009ee6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009eea:	2600      	movs	r6, #0
 8009eec:	e7b1      	b.n	8009e52 <_strtod_l+0x992>
 8009eee:	4f34      	ldr	r7, [pc, #208]	@ (8009fc0 <_strtod_l+0xb00>)
 8009ef0:	2600      	movs	r6, #0
 8009ef2:	e7aa      	b.n	8009e4a <_strtod_l+0x98a>
 8009ef4:	4b32      	ldr	r3, [pc, #200]	@ (8009fc0 <_strtod_l+0xb00>)
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	4639      	mov	r1, r7
 8009efa:	2200      	movs	r2, #0
 8009efc:	f7f6 fbac 	bl	8000658 <__aeabi_dmul>
 8009f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f02:	4606      	mov	r6, r0
 8009f04:	460f      	mov	r7, r1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d09f      	beq.n	8009e4a <_strtod_l+0x98a>
 8009f0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009f0e:	e7a0      	b.n	8009e52 <_strtod_l+0x992>
 8009f10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009f98 <_strtod_l+0xad8>
 8009f14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f18:	ec57 6b17 	vmov	r6, r7, d7
 8009f1c:	e799      	b.n	8009e52 <_strtod_l+0x992>
 8009f1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1c1      	bne.n	8009eb0 <_strtod_l+0x9f0>
 8009f2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f30:	0d1b      	lsrs	r3, r3, #20
 8009f32:	051b      	lsls	r3, r3, #20
 8009f34:	429d      	cmp	r5, r3
 8009f36:	d1bb      	bne.n	8009eb0 <_strtod_l+0x9f0>
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 fed6 	bl	8000cec <__aeabi_d2lz>
 8009f40:	f7f6 fb5c 	bl	80005fc <__aeabi_l2d>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4630      	mov	r0, r6
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	f7f6 f9cc 	bl	80002e8 <__aeabi_dsub>
 8009f50:	460b      	mov	r3, r1
 8009f52:	4602      	mov	r2, r0
 8009f54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009f58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f5e:	ea46 060a 	orr.w	r6, r6, sl
 8009f62:	431e      	orrs	r6, r3
 8009f64:	d06f      	beq.n	800a046 <_strtod_l+0xb86>
 8009f66:	a30e      	add	r3, pc, #56	@ (adr r3, 8009fa0 <_strtod_l+0xae0>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f7f6 fde6 	bl	8000b3c <__aeabi_dcmplt>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	f47f accf 	bne.w	8009914 <_strtod_l+0x454>
 8009f76:	a30c      	add	r3, pc, #48	@ (adr r3, 8009fa8 <_strtod_l+0xae8>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f80:	f7f6 fdfa 	bl	8000b78 <__aeabi_dcmpgt>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d093      	beq.n	8009eb0 <_strtod_l+0x9f0>
 8009f88:	e4c4      	b.n	8009914 <_strtod_l+0x454>
 8009f8a:	bf00      	nop
 8009f8c:	f3af 8000 	nop.w
 8009f90:	00000000 	.word	0x00000000
 8009f94:	bff00000 	.word	0xbff00000
 8009f98:	00000000 	.word	0x00000000
 8009f9c:	3ff00000 	.word	0x3ff00000
 8009fa0:	94a03595 	.word	0x94a03595
 8009fa4:	3fdfffff 	.word	0x3fdfffff
 8009fa8:	35afe535 	.word	0x35afe535
 8009fac:	3fe00000 	.word	0x3fe00000
 8009fb0:	000fffff 	.word	0x000fffff
 8009fb4:	7ff00000 	.word	0x7ff00000
 8009fb8:	7fefffff 	.word	0x7fefffff
 8009fbc:	3ff00000 	.word	0x3ff00000
 8009fc0:	3fe00000 	.word	0x3fe00000
 8009fc4:	7fe00000 	.word	0x7fe00000
 8009fc8:	7c9fffff 	.word	0x7c9fffff
 8009fcc:	9b08      	ldr	r3, [sp, #32]
 8009fce:	b323      	cbz	r3, 800a01a <_strtod_l+0xb5a>
 8009fd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009fd4:	d821      	bhi.n	800a01a <_strtod_l+0xb5a>
 8009fd6:	a328      	add	r3, pc, #160	@ (adr r3, 800a078 <_strtod_l+0xbb8>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	4630      	mov	r0, r6
 8009fde:	4639      	mov	r1, r7
 8009fe0:	f7f6 fdb6 	bl	8000b50 <__aeabi_dcmple>
 8009fe4:	b1a0      	cbz	r0, 800a010 <_strtod_l+0xb50>
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7f6 fdf7 	bl	8000bdc <__aeabi_d2uiz>
 8009fee:	2801      	cmp	r0, #1
 8009ff0:	bf38      	it	cc
 8009ff2:	2001      	movcc	r0, #1
 8009ff4:	f7f6 fab6 	bl	8000564 <__aeabi_ui2d>
 8009ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	460f      	mov	r7, r1
 8009ffe:	b9fb      	cbnz	r3, 800a040 <_strtod_l+0xb80>
 800a000:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a004:	9014      	str	r0, [sp, #80]	@ 0x50
 800a006:	9315      	str	r3, [sp, #84]	@ 0x54
 800a008:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a00c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a010:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a012:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a016:	1b5b      	subs	r3, r3, r5
 800a018:	9311      	str	r3, [sp, #68]	@ 0x44
 800a01a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a01e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a022:	f001 f98b 	bl	800b33c <__ulp>
 800a026:	4650      	mov	r0, sl
 800a028:	ec53 2b10 	vmov	r2, r3, d0
 800a02c:	4659      	mov	r1, fp
 800a02e:	f7f6 fb13 	bl	8000658 <__aeabi_dmul>
 800a032:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a036:	f7f6 f959 	bl	80002ec <__adddf3>
 800a03a:	4682      	mov	sl, r0
 800a03c:	468b      	mov	fp, r1
 800a03e:	e770      	b.n	8009f22 <_strtod_l+0xa62>
 800a040:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a044:	e7e0      	b.n	800a008 <_strtod_l+0xb48>
 800a046:	a30e      	add	r3, pc, #56	@ (adr r3, 800a080 <_strtod_l+0xbc0>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f7f6 fd76 	bl	8000b3c <__aeabi_dcmplt>
 800a050:	e798      	b.n	8009f84 <_strtod_l+0xac4>
 800a052:	2300      	movs	r3, #0
 800a054:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a056:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	f7ff ba6d 	b.w	800953a <_strtod_l+0x7a>
 800a060:	2a65      	cmp	r2, #101	@ 0x65
 800a062:	f43f ab66 	beq.w	8009732 <_strtod_l+0x272>
 800a066:	2a45      	cmp	r2, #69	@ 0x45
 800a068:	f43f ab63 	beq.w	8009732 <_strtod_l+0x272>
 800a06c:	2301      	movs	r3, #1
 800a06e:	f7ff bb9e 	b.w	80097ae <_strtod_l+0x2ee>
 800a072:	bf00      	nop
 800a074:	f3af 8000 	nop.w
 800a078:	ffc00000 	.word	0xffc00000
 800a07c:	41dfffff 	.word	0x41dfffff
 800a080:	94a03595 	.word	0x94a03595
 800a084:	3fcfffff 	.word	0x3fcfffff

0800a088 <strtod>:
 800a088:	460a      	mov	r2, r1
 800a08a:	4601      	mov	r1, r0
 800a08c:	4802      	ldr	r0, [pc, #8]	@ (800a098 <strtod+0x10>)
 800a08e:	4b03      	ldr	r3, [pc, #12]	@ (800a09c <strtod+0x14>)
 800a090:	6800      	ldr	r0, [r0, #0]
 800a092:	f7ff ba15 	b.w	80094c0 <_strtod_l>
 800a096:	bf00      	nop
 800a098:	20000194 	.word	0x20000194
 800a09c:	20000028 	.word	0x20000028

0800a0a0 <std>:
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a0aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0ae:	6083      	str	r3, [r0, #8]
 800a0b0:	8181      	strh	r1, [r0, #12]
 800a0b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a0b4:	81c2      	strh	r2, [r0, #14]
 800a0b6:	6183      	str	r3, [r0, #24]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	305c      	adds	r0, #92	@ 0x5c
 800a0be:	f000 f928 	bl	800a312 <memset>
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0f8 <std+0x58>)
 800a0c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0fc <std+0x5c>)
 800a0c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a100 <std+0x60>)
 800a0cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a104 <std+0x64>)
 800a0d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a108 <std+0x68>)
 800a0d4:	6224      	str	r4, [r4, #32]
 800a0d6:	429c      	cmp	r4, r3
 800a0d8:	d006      	beq.n	800a0e8 <std+0x48>
 800a0da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0de:	4294      	cmp	r4, r2
 800a0e0:	d002      	beq.n	800a0e8 <std+0x48>
 800a0e2:	33d0      	adds	r3, #208	@ 0xd0
 800a0e4:	429c      	cmp	r4, r3
 800a0e6:	d105      	bne.n	800a0f4 <std+0x54>
 800a0e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f0:	f000 ba00 	b.w	800a4f4 <__retarget_lock_init_recursive>
 800a0f4:	bd10      	pop	{r4, pc}
 800a0f6:	bf00      	nop
 800a0f8:	0800a28d 	.word	0x0800a28d
 800a0fc:	0800a2af 	.word	0x0800a2af
 800a100:	0800a2e7 	.word	0x0800a2e7
 800a104:	0800a30b 	.word	0x0800a30b
 800a108:	2000458c 	.word	0x2000458c

0800a10c <stdio_exit_handler>:
 800a10c:	4a02      	ldr	r2, [pc, #8]	@ (800a118 <stdio_exit_handler+0xc>)
 800a10e:	4903      	ldr	r1, [pc, #12]	@ (800a11c <stdio_exit_handler+0x10>)
 800a110:	4803      	ldr	r0, [pc, #12]	@ (800a120 <stdio_exit_handler+0x14>)
 800a112:	f000 b869 	b.w	800a1e8 <_fwalk_sglue>
 800a116:	bf00      	nop
 800a118:	2000001c 	.word	0x2000001c
 800a11c:	0800bcb5 	.word	0x0800bcb5
 800a120:	20000198 	.word	0x20000198

0800a124 <cleanup_stdio>:
 800a124:	6841      	ldr	r1, [r0, #4]
 800a126:	4b0c      	ldr	r3, [pc, #48]	@ (800a158 <cleanup_stdio+0x34>)
 800a128:	4299      	cmp	r1, r3
 800a12a:	b510      	push	{r4, lr}
 800a12c:	4604      	mov	r4, r0
 800a12e:	d001      	beq.n	800a134 <cleanup_stdio+0x10>
 800a130:	f001 fdc0 	bl	800bcb4 <_fflush_r>
 800a134:	68a1      	ldr	r1, [r4, #8]
 800a136:	4b09      	ldr	r3, [pc, #36]	@ (800a15c <cleanup_stdio+0x38>)
 800a138:	4299      	cmp	r1, r3
 800a13a:	d002      	beq.n	800a142 <cleanup_stdio+0x1e>
 800a13c:	4620      	mov	r0, r4
 800a13e:	f001 fdb9 	bl	800bcb4 <_fflush_r>
 800a142:	68e1      	ldr	r1, [r4, #12]
 800a144:	4b06      	ldr	r3, [pc, #24]	@ (800a160 <cleanup_stdio+0x3c>)
 800a146:	4299      	cmp	r1, r3
 800a148:	d004      	beq.n	800a154 <cleanup_stdio+0x30>
 800a14a:	4620      	mov	r0, r4
 800a14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a150:	f001 bdb0 	b.w	800bcb4 <_fflush_r>
 800a154:	bd10      	pop	{r4, pc}
 800a156:	bf00      	nop
 800a158:	2000458c 	.word	0x2000458c
 800a15c:	200045f4 	.word	0x200045f4
 800a160:	2000465c 	.word	0x2000465c

0800a164 <global_stdio_init.part.0>:
 800a164:	b510      	push	{r4, lr}
 800a166:	4b0b      	ldr	r3, [pc, #44]	@ (800a194 <global_stdio_init.part.0+0x30>)
 800a168:	4c0b      	ldr	r4, [pc, #44]	@ (800a198 <global_stdio_init.part.0+0x34>)
 800a16a:	4a0c      	ldr	r2, [pc, #48]	@ (800a19c <global_stdio_init.part.0+0x38>)
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	4620      	mov	r0, r4
 800a170:	2200      	movs	r2, #0
 800a172:	2104      	movs	r1, #4
 800a174:	f7ff ff94 	bl	800a0a0 <std>
 800a178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a17c:	2201      	movs	r2, #1
 800a17e:	2109      	movs	r1, #9
 800a180:	f7ff ff8e 	bl	800a0a0 <std>
 800a184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a188:	2202      	movs	r2, #2
 800a18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a18e:	2112      	movs	r1, #18
 800a190:	f7ff bf86 	b.w	800a0a0 <std>
 800a194:	200046c4 	.word	0x200046c4
 800a198:	2000458c 	.word	0x2000458c
 800a19c:	0800a10d 	.word	0x0800a10d

0800a1a0 <__sfp_lock_acquire>:
 800a1a0:	4801      	ldr	r0, [pc, #4]	@ (800a1a8 <__sfp_lock_acquire+0x8>)
 800a1a2:	f000 b9a8 	b.w	800a4f6 <__retarget_lock_acquire_recursive>
 800a1a6:	bf00      	nop
 800a1a8:	200046cd 	.word	0x200046cd

0800a1ac <__sfp_lock_release>:
 800a1ac:	4801      	ldr	r0, [pc, #4]	@ (800a1b4 <__sfp_lock_release+0x8>)
 800a1ae:	f000 b9a3 	b.w	800a4f8 <__retarget_lock_release_recursive>
 800a1b2:	bf00      	nop
 800a1b4:	200046cd 	.word	0x200046cd

0800a1b8 <__sinit>:
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	f7ff fff0 	bl	800a1a0 <__sfp_lock_acquire>
 800a1c0:	6a23      	ldr	r3, [r4, #32]
 800a1c2:	b11b      	cbz	r3, 800a1cc <__sinit+0x14>
 800a1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c8:	f7ff bff0 	b.w	800a1ac <__sfp_lock_release>
 800a1cc:	4b04      	ldr	r3, [pc, #16]	@ (800a1e0 <__sinit+0x28>)
 800a1ce:	6223      	str	r3, [r4, #32]
 800a1d0:	4b04      	ldr	r3, [pc, #16]	@ (800a1e4 <__sinit+0x2c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1f5      	bne.n	800a1c4 <__sinit+0xc>
 800a1d8:	f7ff ffc4 	bl	800a164 <global_stdio_init.part.0>
 800a1dc:	e7f2      	b.n	800a1c4 <__sinit+0xc>
 800a1de:	bf00      	nop
 800a1e0:	0800a125 	.word	0x0800a125
 800a1e4:	200046c4 	.word	0x200046c4

0800a1e8 <_fwalk_sglue>:
 800a1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	4688      	mov	r8, r1
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	2600      	movs	r6, #0
 800a1f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1f8:	f1b9 0901 	subs.w	r9, r9, #1
 800a1fc:	d505      	bpl.n	800a20a <_fwalk_sglue+0x22>
 800a1fe:	6824      	ldr	r4, [r4, #0]
 800a200:	2c00      	cmp	r4, #0
 800a202:	d1f7      	bne.n	800a1f4 <_fwalk_sglue+0xc>
 800a204:	4630      	mov	r0, r6
 800a206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20a:	89ab      	ldrh	r3, [r5, #12]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d907      	bls.n	800a220 <_fwalk_sglue+0x38>
 800a210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a214:	3301      	adds	r3, #1
 800a216:	d003      	beq.n	800a220 <_fwalk_sglue+0x38>
 800a218:	4629      	mov	r1, r5
 800a21a:	4638      	mov	r0, r7
 800a21c:	47c0      	blx	r8
 800a21e:	4306      	orrs	r6, r0
 800a220:	3568      	adds	r5, #104	@ 0x68
 800a222:	e7e9      	b.n	800a1f8 <_fwalk_sglue+0x10>

0800a224 <sniprintf>:
 800a224:	b40c      	push	{r2, r3}
 800a226:	b530      	push	{r4, r5, lr}
 800a228:	4b17      	ldr	r3, [pc, #92]	@ (800a288 <sniprintf+0x64>)
 800a22a:	1e0c      	subs	r4, r1, #0
 800a22c:	681d      	ldr	r5, [r3, #0]
 800a22e:	b09d      	sub	sp, #116	@ 0x74
 800a230:	da08      	bge.n	800a244 <sniprintf+0x20>
 800a232:	238b      	movs	r3, #139	@ 0x8b
 800a234:	602b      	str	r3, [r5, #0]
 800a236:	f04f 30ff 	mov.w	r0, #4294967295
 800a23a:	b01d      	add	sp, #116	@ 0x74
 800a23c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a240:	b002      	add	sp, #8
 800a242:	4770      	bx	lr
 800a244:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a248:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a24c:	bf14      	ite	ne
 800a24e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a252:	4623      	moveq	r3, r4
 800a254:	9304      	str	r3, [sp, #16]
 800a256:	9307      	str	r3, [sp, #28]
 800a258:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a25c:	9002      	str	r0, [sp, #8]
 800a25e:	9006      	str	r0, [sp, #24]
 800a260:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a264:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a266:	ab21      	add	r3, sp, #132	@ 0x84
 800a268:	a902      	add	r1, sp, #8
 800a26a:	4628      	mov	r0, r5
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	f001 fa13 	bl	800b698 <_svfiprintf_r>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	bfbc      	itt	lt
 800a276:	238b      	movlt	r3, #139	@ 0x8b
 800a278:	602b      	strlt	r3, [r5, #0]
 800a27a:	2c00      	cmp	r4, #0
 800a27c:	d0dd      	beq.n	800a23a <sniprintf+0x16>
 800a27e:	9b02      	ldr	r3, [sp, #8]
 800a280:	2200      	movs	r2, #0
 800a282:	701a      	strb	r2, [r3, #0]
 800a284:	e7d9      	b.n	800a23a <sniprintf+0x16>
 800a286:	bf00      	nop
 800a288:	20000194 	.word	0x20000194

0800a28c <__sread>:
 800a28c:	b510      	push	{r4, lr}
 800a28e:	460c      	mov	r4, r1
 800a290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a294:	f000 f8d0 	bl	800a438 <_read_r>
 800a298:	2800      	cmp	r0, #0
 800a29a:	bfab      	itete	ge
 800a29c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a29e:	89a3      	ldrhlt	r3, [r4, #12]
 800a2a0:	181b      	addge	r3, r3, r0
 800a2a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2a6:	bfac      	ite	ge
 800a2a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2aa:	81a3      	strhlt	r3, [r4, #12]
 800a2ac:	bd10      	pop	{r4, pc}

0800a2ae <__swrite>:
 800a2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b2:	461f      	mov	r7, r3
 800a2b4:	898b      	ldrh	r3, [r1, #12]
 800a2b6:	05db      	lsls	r3, r3, #23
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	4616      	mov	r6, r2
 800a2be:	d505      	bpl.n	800a2cc <__swrite+0x1e>
 800a2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f000 f8a4 	bl	800a414 <_lseek_r>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2d6:	81a3      	strh	r3, [r4, #12]
 800a2d8:	4632      	mov	r2, r6
 800a2da:	463b      	mov	r3, r7
 800a2dc:	4628      	mov	r0, r5
 800a2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e2:	f000 b8cb 	b.w	800a47c <_write_r>

0800a2e6 <__sseek>:
 800a2e6:	b510      	push	{r4, lr}
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ee:	f000 f891 	bl	800a414 <_lseek_r>
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	bf15      	itete	ne
 800a2f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a302:	81a3      	strheq	r3, [r4, #12]
 800a304:	bf18      	it	ne
 800a306:	81a3      	strhne	r3, [r4, #12]
 800a308:	bd10      	pop	{r4, pc}

0800a30a <__sclose>:
 800a30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30e:	f000 b81b 	b.w	800a348 <_close_r>

0800a312 <memset>:
 800a312:	4402      	add	r2, r0
 800a314:	4603      	mov	r3, r0
 800a316:	4293      	cmp	r3, r2
 800a318:	d100      	bne.n	800a31c <memset+0xa>
 800a31a:	4770      	bx	lr
 800a31c:	f803 1b01 	strb.w	r1, [r3], #1
 800a320:	e7f9      	b.n	800a316 <memset+0x4>

0800a322 <strncmp>:
 800a322:	b510      	push	{r4, lr}
 800a324:	b16a      	cbz	r2, 800a342 <strncmp+0x20>
 800a326:	3901      	subs	r1, #1
 800a328:	1884      	adds	r4, r0, r2
 800a32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a32e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a332:	429a      	cmp	r2, r3
 800a334:	d103      	bne.n	800a33e <strncmp+0x1c>
 800a336:	42a0      	cmp	r0, r4
 800a338:	d001      	beq.n	800a33e <strncmp+0x1c>
 800a33a:	2a00      	cmp	r2, #0
 800a33c:	d1f5      	bne.n	800a32a <strncmp+0x8>
 800a33e:	1ad0      	subs	r0, r2, r3
 800a340:	bd10      	pop	{r4, pc}
 800a342:	4610      	mov	r0, r2
 800a344:	e7fc      	b.n	800a340 <strncmp+0x1e>
	...

0800a348 <_close_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4d06      	ldr	r5, [pc, #24]	@ (800a364 <_close_r+0x1c>)
 800a34c:	2300      	movs	r3, #0
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	f7f8 fe38 	bl	8002fc8 <_close>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_close_r+0x1a>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_close_r+0x1a>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	200046c8 	.word	0x200046c8

0800a368 <_reclaim_reent>:
 800a368:	4b29      	ldr	r3, [pc, #164]	@ (800a410 <_reclaim_reent+0xa8>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4283      	cmp	r3, r0
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	4604      	mov	r4, r0
 800a372:	d04b      	beq.n	800a40c <_reclaim_reent+0xa4>
 800a374:	69c3      	ldr	r3, [r0, #28]
 800a376:	b1ab      	cbz	r3, 800a3a4 <_reclaim_reent+0x3c>
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	b16b      	cbz	r3, 800a398 <_reclaim_reent+0x30>
 800a37c:	2500      	movs	r5, #0
 800a37e:	69e3      	ldr	r3, [r4, #28]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	5959      	ldr	r1, [r3, r5]
 800a384:	2900      	cmp	r1, #0
 800a386:	d13b      	bne.n	800a400 <_reclaim_reent+0x98>
 800a388:	3504      	adds	r5, #4
 800a38a:	2d80      	cmp	r5, #128	@ 0x80
 800a38c:	d1f7      	bne.n	800a37e <_reclaim_reent+0x16>
 800a38e:	69e3      	ldr	r3, [r4, #28]
 800a390:	4620      	mov	r0, r4
 800a392:	68d9      	ldr	r1, [r3, #12]
 800a394:	f000 f8c8 	bl	800a528 <_free_r>
 800a398:	69e3      	ldr	r3, [r4, #28]
 800a39a:	6819      	ldr	r1, [r3, #0]
 800a39c:	b111      	cbz	r1, 800a3a4 <_reclaim_reent+0x3c>
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 f8c2 	bl	800a528 <_free_r>
 800a3a4:	6961      	ldr	r1, [r4, #20]
 800a3a6:	b111      	cbz	r1, 800a3ae <_reclaim_reent+0x46>
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 f8bd 	bl	800a528 <_free_r>
 800a3ae:	69e1      	ldr	r1, [r4, #28]
 800a3b0:	b111      	cbz	r1, 800a3b8 <_reclaim_reent+0x50>
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 f8b8 	bl	800a528 <_free_r>
 800a3b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a3ba:	b111      	cbz	r1, 800a3c2 <_reclaim_reent+0x5a>
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 f8b3 	bl	800a528 <_free_r>
 800a3c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3c4:	b111      	cbz	r1, 800a3cc <_reclaim_reent+0x64>
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 f8ae 	bl	800a528 <_free_r>
 800a3cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a3ce:	b111      	cbz	r1, 800a3d6 <_reclaim_reent+0x6e>
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 f8a9 	bl	800a528 <_free_r>
 800a3d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a3d8:	b111      	cbz	r1, 800a3e0 <_reclaim_reent+0x78>
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 f8a4 	bl	800a528 <_free_r>
 800a3e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a3e2:	b111      	cbz	r1, 800a3ea <_reclaim_reent+0x82>
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 f89f 	bl	800a528 <_free_r>
 800a3ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a3ec:	b111      	cbz	r1, 800a3f4 <_reclaim_reent+0x8c>
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f000 f89a 	bl	800a528 <_free_r>
 800a3f4:	6a23      	ldr	r3, [r4, #32]
 800a3f6:	b14b      	cbz	r3, 800a40c <_reclaim_reent+0xa4>
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3fe:	4718      	bx	r3
 800a400:	680e      	ldr	r6, [r1, #0]
 800a402:	4620      	mov	r0, r4
 800a404:	f000 f890 	bl	800a528 <_free_r>
 800a408:	4631      	mov	r1, r6
 800a40a:	e7bb      	b.n	800a384 <_reclaim_reent+0x1c>
 800a40c:	bd70      	pop	{r4, r5, r6, pc}
 800a40e:	bf00      	nop
 800a410:	20000194 	.word	0x20000194

0800a414 <_lseek_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4d07      	ldr	r5, [pc, #28]	@ (800a434 <_lseek_r+0x20>)
 800a418:	4604      	mov	r4, r0
 800a41a:	4608      	mov	r0, r1
 800a41c:	4611      	mov	r1, r2
 800a41e:	2200      	movs	r2, #0
 800a420:	602a      	str	r2, [r5, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	f7f8 fdf7 	bl	8003016 <_lseek>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_lseek_r+0x1e>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_lseek_r+0x1e>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	200046c8 	.word	0x200046c8

0800a438 <_read_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d07      	ldr	r5, [pc, #28]	@ (800a458 <_read_r+0x20>)
 800a43c:	4604      	mov	r4, r0
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	2200      	movs	r2, #0
 800a444:	602a      	str	r2, [r5, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	f7f8 fd85 	bl	8002f56 <_read>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_read_r+0x1e>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_read_r+0x1e>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	200046c8 	.word	0x200046c8

0800a45c <_sbrk_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	@ (800a478 <_sbrk_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f8 fde2 	bl	8003030 <_sbrk>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_sbrk_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_sbrk_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	200046c8 	.word	0x200046c8

0800a47c <_write_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d07      	ldr	r5, [pc, #28]	@ (800a49c <_write_r+0x20>)
 800a480:	4604      	mov	r4, r0
 800a482:	4608      	mov	r0, r1
 800a484:	4611      	mov	r1, r2
 800a486:	2200      	movs	r2, #0
 800a488:	602a      	str	r2, [r5, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	f7f8 fd80 	bl	8002f90 <_write>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_write_r+0x1e>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_write_r+0x1e>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	200046c8 	.word	0x200046c8

0800a4a0 <__errno>:
 800a4a0:	4b01      	ldr	r3, [pc, #4]	@ (800a4a8 <__errno+0x8>)
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	20000194 	.word	0x20000194

0800a4ac <__libc_init_array>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a4e4 <__libc_init_array+0x38>)
 800a4b0:	4c0d      	ldr	r4, [pc, #52]	@ (800a4e8 <__libc_init_array+0x3c>)
 800a4b2:	1b64      	subs	r4, r4, r5
 800a4b4:	10a4      	asrs	r4, r4, #2
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	42a6      	cmp	r6, r4
 800a4ba:	d109      	bne.n	800a4d0 <__libc_init_array+0x24>
 800a4bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a4ec <__libc_init_array+0x40>)
 800a4be:	4c0c      	ldr	r4, [pc, #48]	@ (800a4f0 <__libc_init_array+0x44>)
 800a4c0:	f001 ff22 	bl	800c308 <_init>
 800a4c4:	1b64      	subs	r4, r4, r5
 800a4c6:	10a4      	asrs	r4, r4, #2
 800a4c8:	2600      	movs	r6, #0
 800a4ca:	42a6      	cmp	r6, r4
 800a4cc:	d105      	bne.n	800a4da <__libc_init_array+0x2e>
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d4:	4798      	blx	r3
 800a4d6:	3601      	adds	r6, #1
 800a4d8:	e7ee      	b.n	800a4b8 <__libc_init_array+0xc>
 800a4da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4de:	4798      	blx	r3
 800a4e0:	3601      	adds	r6, #1
 800a4e2:	e7f2      	b.n	800a4ca <__libc_init_array+0x1e>
 800a4e4:	0800c918 	.word	0x0800c918
 800a4e8:	0800c918 	.word	0x0800c918
 800a4ec:	0800c918 	.word	0x0800c918
 800a4f0:	0800c91c 	.word	0x0800c91c

0800a4f4 <__retarget_lock_init_recursive>:
 800a4f4:	4770      	bx	lr

0800a4f6 <__retarget_lock_acquire_recursive>:
 800a4f6:	4770      	bx	lr

0800a4f8 <__retarget_lock_release_recursive>:
 800a4f8:	4770      	bx	lr

0800a4fa <memcpy>:
 800a4fa:	440a      	add	r2, r1
 800a4fc:	4291      	cmp	r1, r2
 800a4fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800a502:	d100      	bne.n	800a506 <memcpy+0xc>
 800a504:	4770      	bx	lr
 800a506:	b510      	push	{r4, lr}
 800a508:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a50c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a510:	4291      	cmp	r1, r2
 800a512:	d1f9      	bne.n	800a508 <memcpy+0xe>
 800a514:	bd10      	pop	{r4, pc}
	...

0800a518 <nan>:
 800a518:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a520 <nan+0x8>
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	00000000 	.word	0x00000000
 800a524:	7ff80000 	.word	0x7ff80000

0800a528 <_free_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4605      	mov	r5, r0
 800a52c:	2900      	cmp	r1, #0
 800a52e:	d041      	beq.n	800a5b4 <_free_r+0x8c>
 800a530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a534:	1f0c      	subs	r4, r1, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfb8      	it	lt
 800a53a:	18e4      	addlt	r4, r4, r3
 800a53c:	f7fe ff5e 	bl	80093fc <__malloc_lock>
 800a540:	4a1d      	ldr	r2, [pc, #116]	@ (800a5b8 <_free_r+0x90>)
 800a542:	6813      	ldr	r3, [r2, #0]
 800a544:	b933      	cbnz	r3, 800a554 <_free_r+0x2c>
 800a546:	6063      	str	r3, [r4, #4]
 800a548:	6014      	str	r4, [r2, #0]
 800a54a:	4628      	mov	r0, r5
 800a54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a550:	f7fe bf5a 	b.w	8009408 <__malloc_unlock>
 800a554:	42a3      	cmp	r3, r4
 800a556:	d908      	bls.n	800a56a <_free_r+0x42>
 800a558:	6820      	ldr	r0, [r4, #0]
 800a55a:	1821      	adds	r1, r4, r0
 800a55c:	428b      	cmp	r3, r1
 800a55e:	bf01      	itttt	eq
 800a560:	6819      	ldreq	r1, [r3, #0]
 800a562:	685b      	ldreq	r3, [r3, #4]
 800a564:	1809      	addeq	r1, r1, r0
 800a566:	6021      	streq	r1, [r4, #0]
 800a568:	e7ed      	b.n	800a546 <_free_r+0x1e>
 800a56a:	461a      	mov	r2, r3
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	b10b      	cbz	r3, 800a574 <_free_r+0x4c>
 800a570:	42a3      	cmp	r3, r4
 800a572:	d9fa      	bls.n	800a56a <_free_r+0x42>
 800a574:	6811      	ldr	r1, [r2, #0]
 800a576:	1850      	adds	r0, r2, r1
 800a578:	42a0      	cmp	r0, r4
 800a57a:	d10b      	bne.n	800a594 <_free_r+0x6c>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	4401      	add	r1, r0
 800a580:	1850      	adds	r0, r2, r1
 800a582:	4283      	cmp	r3, r0
 800a584:	6011      	str	r1, [r2, #0]
 800a586:	d1e0      	bne.n	800a54a <_free_r+0x22>
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	6053      	str	r3, [r2, #4]
 800a58e:	4408      	add	r0, r1
 800a590:	6010      	str	r0, [r2, #0]
 800a592:	e7da      	b.n	800a54a <_free_r+0x22>
 800a594:	d902      	bls.n	800a59c <_free_r+0x74>
 800a596:	230c      	movs	r3, #12
 800a598:	602b      	str	r3, [r5, #0]
 800a59a:	e7d6      	b.n	800a54a <_free_r+0x22>
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	1821      	adds	r1, r4, r0
 800a5a0:	428b      	cmp	r3, r1
 800a5a2:	bf04      	itt	eq
 800a5a4:	6819      	ldreq	r1, [r3, #0]
 800a5a6:	685b      	ldreq	r3, [r3, #4]
 800a5a8:	6063      	str	r3, [r4, #4]
 800a5aa:	bf04      	itt	eq
 800a5ac:	1809      	addeq	r1, r1, r0
 800a5ae:	6021      	streq	r1, [r4, #0]
 800a5b0:	6054      	str	r4, [r2, #4]
 800a5b2:	e7ca      	b.n	800a54a <_free_r+0x22>
 800a5b4:	bd38      	pop	{r3, r4, r5, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20004588 	.word	0x20004588

0800a5bc <rshift>:
 800a5bc:	6903      	ldr	r3, [r0, #16]
 800a5be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a5ca:	f100 0414 	add.w	r4, r0, #20
 800a5ce:	dd45      	ble.n	800a65c <rshift+0xa0>
 800a5d0:	f011 011f 	ands.w	r1, r1, #31
 800a5d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5dc:	d10c      	bne.n	800a5f8 <rshift+0x3c>
 800a5de:	f100 0710 	add.w	r7, r0, #16
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	42b1      	cmp	r1, r6
 800a5e6:	d334      	bcc.n	800a652 <rshift+0x96>
 800a5e8:	1a9b      	subs	r3, r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	1eea      	subs	r2, r5, #3
 800a5ee:	4296      	cmp	r6, r2
 800a5f0:	bf38      	it	cc
 800a5f2:	2300      	movcc	r3, #0
 800a5f4:	4423      	add	r3, r4
 800a5f6:	e015      	b.n	800a624 <rshift+0x68>
 800a5f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5fc:	f1c1 0820 	rsb	r8, r1, #32
 800a600:	40cf      	lsrs	r7, r1
 800a602:	f105 0e04 	add.w	lr, r5, #4
 800a606:	46a1      	mov	r9, r4
 800a608:	4576      	cmp	r6, lr
 800a60a:	46f4      	mov	ip, lr
 800a60c:	d815      	bhi.n	800a63a <rshift+0x7e>
 800a60e:	1a9a      	subs	r2, r3, r2
 800a610:	0092      	lsls	r2, r2, #2
 800a612:	3a04      	subs	r2, #4
 800a614:	3501      	adds	r5, #1
 800a616:	42ae      	cmp	r6, r5
 800a618:	bf38      	it	cc
 800a61a:	2200      	movcc	r2, #0
 800a61c:	18a3      	adds	r3, r4, r2
 800a61e:	50a7      	str	r7, [r4, r2]
 800a620:	b107      	cbz	r7, 800a624 <rshift+0x68>
 800a622:	3304      	adds	r3, #4
 800a624:	1b1a      	subs	r2, r3, r4
 800a626:	42a3      	cmp	r3, r4
 800a628:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a62c:	bf08      	it	eq
 800a62e:	2300      	moveq	r3, #0
 800a630:	6102      	str	r2, [r0, #16]
 800a632:	bf08      	it	eq
 800a634:	6143      	streq	r3, [r0, #20]
 800a636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a63a:	f8dc c000 	ldr.w	ip, [ip]
 800a63e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a642:	ea4c 0707 	orr.w	r7, ip, r7
 800a646:	f849 7b04 	str.w	r7, [r9], #4
 800a64a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a64e:	40cf      	lsrs	r7, r1
 800a650:	e7da      	b.n	800a608 <rshift+0x4c>
 800a652:	f851 cb04 	ldr.w	ip, [r1], #4
 800a656:	f847 cf04 	str.w	ip, [r7, #4]!
 800a65a:	e7c3      	b.n	800a5e4 <rshift+0x28>
 800a65c:	4623      	mov	r3, r4
 800a65e:	e7e1      	b.n	800a624 <rshift+0x68>

0800a660 <__hexdig_fun>:
 800a660:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a664:	2b09      	cmp	r3, #9
 800a666:	d802      	bhi.n	800a66e <__hexdig_fun+0xe>
 800a668:	3820      	subs	r0, #32
 800a66a:	b2c0      	uxtb	r0, r0
 800a66c:	4770      	bx	lr
 800a66e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a672:	2b05      	cmp	r3, #5
 800a674:	d801      	bhi.n	800a67a <__hexdig_fun+0x1a>
 800a676:	3847      	subs	r0, #71	@ 0x47
 800a678:	e7f7      	b.n	800a66a <__hexdig_fun+0xa>
 800a67a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a67e:	2b05      	cmp	r3, #5
 800a680:	d801      	bhi.n	800a686 <__hexdig_fun+0x26>
 800a682:	3827      	subs	r0, #39	@ 0x27
 800a684:	e7f1      	b.n	800a66a <__hexdig_fun+0xa>
 800a686:	2000      	movs	r0, #0
 800a688:	4770      	bx	lr
	...

0800a68c <__gethex>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	b085      	sub	sp, #20
 800a692:	468a      	mov	sl, r1
 800a694:	9302      	str	r3, [sp, #8]
 800a696:	680b      	ldr	r3, [r1, #0]
 800a698:	9001      	str	r0, [sp, #4]
 800a69a:	4690      	mov	r8, r2
 800a69c:	1c9c      	adds	r4, r3, #2
 800a69e:	46a1      	mov	r9, r4
 800a6a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a6a4:	2830      	cmp	r0, #48	@ 0x30
 800a6a6:	d0fa      	beq.n	800a69e <__gethex+0x12>
 800a6a8:	eba9 0303 	sub.w	r3, r9, r3
 800a6ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800a6b0:	f7ff ffd6 	bl	800a660 <__hexdig_fun>
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d168      	bne.n	800a78c <__gethex+0x100>
 800a6ba:	49a0      	ldr	r1, [pc, #640]	@ (800a93c <__gethex+0x2b0>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	4648      	mov	r0, r9
 800a6c0:	f7ff fe2f 	bl	800a322 <strncmp>
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d167      	bne.n	800a79a <__gethex+0x10e>
 800a6ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a6ce:	4626      	mov	r6, r4
 800a6d0:	f7ff ffc6 	bl	800a660 <__hexdig_fun>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d062      	beq.n	800a79e <__gethex+0x112>
 800a6d8:	4623      	mov	r3, r4
 800a6da:	7818      	ldrb	r0, [r3, #0]
 800a6dc:	2830      	cmp	r0, #48	@ 0x30
 800a6de:	4699      	mov	r9, r3
 800a6e0:	f103 0301 	add.w	r3, r3, #1
 800a6e4:	d0f9      	beq.n	800a6da <__gethex+0x4e>
 800a6e6:	f7ff ffbb 	bl	800a660 <__hexdig_fun>
 800a6ea:	fab0 f580 	clz	r5, r0
 800a6ee:	096d      	lsrs	r5, r5, #5
 800a6f0:	f04f 0b01 	mov.w	fp, #1
 800a6f4:	464a      	mov	r2, r9
 800a6f6:	4616      	mov	r6, r2
 800a6f8:	3201      	adds	r2, #1
 800a6fa:	7830      	ldrb	r0, [r6, #0]
 800a6fc:	f7ff ffb0 	bl	800a660 <__hexdig_fun>
 800a700:	2800      	cmp	r0, #0
 800a702:	d1f8      	bne.n	800a6f6 <__gethex+0x6a>
 800a704:	498d      	ldr	r1, [pc, #564]	@ (800a93c <__gethex+0x2b0>)
 800a706:	2201      	movs	r2, #1
 800a708:	4630      	mov	r0, r6
 800a70a:	f7ff fe0a 	bl	800a322 <strncmp>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d13f      	bne.n	800a792 <__gethex+0x106>
 800a712:	b944      	cbnz	r4, 800a726 <__gethex+0x9a>
 800a714:	1c74      	adds	r4, r6, #1
 800a716:	4622      	mov	r2, r4
 800a718:	4616      	mov	r6, r2
 800a71a:	3201      	adds	r2, #1
 800a71c:	7830      	ldrb	r0, [r6, #0]
 800a71e:	f7ff ff9f 	bl	800a660 <__hexdig_fun>
 800a722:	2800      	cmp	r0, #0
 800a724:	d1f8      	bne.n	800a718 <__gethex+0x8c>
 800a726:	1ba4      	subs	r4, r4, r6
 800a728:	00a7      	lsls	r7, r4, #2
 800a72a:	7833      	ldrb	r3, [r6, #0]
 800a72c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a730:	2b50      	cmp	r3, #80	@ 0x50
 800a732:	d13e      	bne.n	800a7b2 <__gethex+0x126>
 800a734:	7873      	ldrb	r3, [r6, #1]
 800a736:	2b2b      	cmp	r3, #43	@ 0x2b
 800a738:	d033      	beq.n	800a7a2 <__gethex+0x116>
 800a73a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a73c:	d034      	beq.n	800a7a8 <__gethex+0x11c>
 800a73e:	1c71      	adds	r1, r6, #1
 800a740:	2400      	movs	r4, #0
 800a742:	7808      	ldrb	r0, [r1, #0]
 800a744:	f7ff ff8c 	bl	800a660 <__hexdig_fun>
 800a748:	1e43      	subs	r3, r0, #1
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b18      	cmp	r3, #24
 800a74e:	d830      	bhi.n	800a7b2 <__gethex+0x126>
 800a750:	f1a0 0210 	sub.w	r2, r0, #16
 800a754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a758:	f7ff ff82 	bl	800a660 <__hexdig_fun>
 800a75c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a760:	fa5f fc8c 	uxtb.w	ip, ip
 800a764:	f1bc 0f18 	cmp.w	ip, #24
 800a768:	f04f 030a 	mov.w	r3, #10
 800a76c:	d91e      	bls.n	800a7ac <__gethex+0x120>
 800a76e:	b104      	cbz	r4, 800a772 <__gethex+0xe6>
 800a770:	4252      	negs	r2, r2
 800a772:	4417      	add	r7, r2
 800a774:	f8ca 1000 	str.w	r1, [sl]
 800a778:	b1ed      	cbz	r5, 800a7b6 <__gethex+0x12a>
 800a77a:	f1bb 0f00 	cmp.w	fp, #0
 800a77e:	bf0c      	ite	eq
 800a780:	2506      	moveq	r5, #6
 800a782:	2500      	movne	r5, #0
 800a784:	4628      	mov	r0, r5
 800a786:	b005      	add	sp, #20
 800a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78c:	2500      	movs	r5, #0
 800a78e:	462c      	mov	r4, r5
 800a790:	e7b0      	b.n	800a6f4 <__gethex+0x68>
 800a792:	2c00      	cmp	r4, #0
 800a794:	d1c7      	bne.n	800a726 <__gethex+0x9a>
 800a796:	4627      	mov	r7, r4
 800a798:	e7c7      	b.n	800a72a <__gethex+0x9e>
 800a79a:	464e      	mov	r6, r9
 800a79c:	462f      	mov	r7, r5
 800a79e:	2501      	movs	r5, #1
 800a7a0:	e7c3      	b.n	800a72a <__gethex+0x9e>
 800a7a2:	2400      	movs	r4, #0
 800a7a4:	1cb1      	adds	r1, r6, #2
 800a7a6:	e7cc      	b.n	800a742 <__gethex+0xb6>
 800a7a8:	2401      	movs	r4, #1
 800a7aa:	e7fb      	b.n	800a7a4 <__gethex+0x118>
 800a7ac:	fb03 0002 	mla	r0, r3, r2, r0
 800a7b0:	e7ce      	b.n	800a750 <__gethex+0xc4>
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	e7de      	b.n	800a774 <__gethex+0xe8>
 800a7b6:	eba6 0309 	sub.w	r3, r6, r9
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	4629      	mov	r1, r5
 800a7be:	2b07      	cmp	r3, #7
 800a7c0:	dc0a      	bgt.n	800a7d8 <__gethex+0x14c>
 800a7c2:	9801      	ldr	r0, [sp, #4]
 800a7c4:	f000 fa46 	bl	800ac54 <_Balloc>
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	b940      	cbnz	r0, 800a7de <__gethex+0x152>
 800a7cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a940 <__gethex+0x2b4>)
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	21e4      	movs	r1, #228	@ 0xe4
 800a7d2:	485c      	ldr	r0, [pc, #368]	@ (800a944 <__gethex+0x2b8>)
 800a7d4:	f001 fab0 	bl	800bd38 <__assert_func>
 800a7d8:	3101      	adds	r1, #1
 800a7da:	105b      	asrs	r3, r3, #1
 800a7dc:	e7ef      	b.n	800a7be <__gethex+0x132>
 800a7de:	f100 0a14 	add.w	sl, r0, #20
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4655      	mov	r5, sl
 800a7e6:	469b      	mov	fp, r3
 800a7e8:	45b1      	cmp	r9, r6
 800a7ea:	d337      	bcc.n	800a85c <__gethex+0x1d0>
 800a7ec:	f845 bb04 	str.w	fp, [r5], #4
 800a7f0:	eba5 050a 	sub.w	r5, r5, sl
 800a7f4:	10ad      	asrs	r5, r5, #2
 800a7f6:	6125      	str	r5, [r4, #16]
 800a7f8:	4658      	mov	r0, fp
 800a7fa:	f000 fb1d 	bl	800ae38 <__hi0bits>
 800a7fe:	016d      	lsls	r5, r5, #5
 800a800:	f8d8 6000 	ldr.w	r6, [r8]
 800a804:	1a2d      	subs	r5, r5, r0
 800a806:	42b5      	cmp	r5, r6
 800a808:	dd54      	ble.n	800a8b4 <__gethex+0x228>
 800a80a:	1bad      	subs	r5, r5, r6
 800a80c:	4629      	mov	r1, r5
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 feb1 	bl	800b576 <__any_on>
 800a814:	4681      	mov	r9, r0
 800a816:	b178      	cbz	r0, 800a838 <__gethex+0x1ac>
 800a818:	1e6b      	subs	r3, r5, #1
 800a81a:	1159      	asrs	r1, r3, #5
 800a81c:	f003 021f 	and.w	r2, r3, #31
 800a820:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a824:	f04f 0901 	mov.w	r9, #1
 800a828:	fa09 f202 	lsl.w	r2, r9, r2
 800a82c:	420a      	tst	r2, r1
 800a82e:	d003      	beq.n	800a838 <__gethex+0x1ac>
 800a830:	454b      	cmp	r3, r9
 800a832:	dc36      	bgt.n	800a8a2 <__gethex+0x216>
 800a834:	f04f 0902 	mov.w	r9, #2
 800a838:	4629      	mov	r1, r5
 800a83a:	4620      	mov	r0, r4
 800a83c:	f7ff febe 	bl	800a5bc <rshift>
 800a840:	442f      	add	r7, r5
 800a842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a846:	42bb      	cmp	r3, r7
 800a848:	da42      	bge.n	800a8d0 <__gethex+0x244>
 800a84a:	9801      	ldr	r0, [sp, #4]
 800a84c:	4621      	mov	r1, r4
 800a84e:	f000 fa41 	bl	800acd4 <_Bfree>
 800a852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a854:	2300      	movs	r3, #0
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	25a3      	movs	r5, #163	@ 0xa3
 800a85a:	e793      	b.n	800a784 <__gethex+0xf8>
 800a85c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a860:	2a2e      	cmp	r2, #46	@ 0x2e
 800a862:	d012      	beq.n	800a88a <__gethex+0x1fe>
 800a864:	2b20      	cmp	r3, #32
 800a866:	d104      	bne.n	800a872 <__gethex+0x1e6>
 800a868:	f845 bb04 	str.w	fp, [r5], #4
 800a86c:	f04f 0b00 	mov.w	fp, #0
 800a870:	465b      	mov	r3, fp
 800a872:	7830      	ldrb	r0, [r6, #0]
 800a874:	9303      	str	r3, [sp, #12]
 800a876:	f7ff fef3 	bl	800a660 <__hexdig_fun>
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	f000 000f 	and.w	r0, r0, #15
 800a880:	4098      	lsls	r0, r3
 800a882:	ea4b 0b00 	orr.w	fp, fp, r0
 800a886:	3304      	adds	r3, #4
 800a888:	e7ae      	b.n	800a7e8 <__gethex+0x15c>
 800a88a:	45b1      	cmp	r9, r6
 800a88c:	d8ea      	bhi.n	800a864 <__gethex+0x1d8>
 800a88e:	492b      	ldr	r1, [pc, #172]	@ (800a93c <__gethex+0x2b0>)
 800a890:	9303      	str	r3, [sp, #12]
 800a892:	2201      	movs	r2, #1
 800a894:	4630      	mov	r0, r6
 800a896:	f7ff fd44 	bl	800a322 <strncmp>
 800a89a:	9b03      	ldr	r3, [sp, #12]
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d1e1      	bne.n	800a864 <__gethex+0x1d8>
 800a8a0:	e7a2      	b.n	800a7e8 <__gethex+0x15c>
 800a8a2:	1ea9      	subs	r1, r5, #2
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 fe66 	bl	800b576 <__any_on>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d0c2      	beq.n	800a834 <__gethex+0x1a8>
 800a8ae:	f04f 0903 	mov.w	r9, #3
 800a8b2:	e7c1      	b.n	800a838 <__gethex+0x1ac>
 800a8b4:	da09      	bge.n	800a8ca <__gethex+0x23e>
 800a8b6:	1b75      	subs	r5, r6, r5
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	9801      	ldr	r0, [sp, #4]
 800a8bc:	462a      	mov	r2, r5
 800a8be:	f000 fc21 	bl	800b104 <__lshift>
 800a8c2:	1b7f      	subs	r7, r7, r5
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	f100 0a14 	add.w	sl, r0, #20
 800a8ca:	f04f 0900 	mov.w	r9, #0
 800a8ce:	e7b8      	b.n	800a842 <__gethex+0x1b6>
 800a8d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8d4:	42bd      	cmp	r5, r7
 800a8d6:	dd6f      	ble.n	800a9b8 <__gethex+0x32c>
 800a8d8:	1bed      	subs	r5, r5, r7
 800a8da:	42ae      	cmp	r6, r5
 800a8dc:	dc34      	bgt.n	800a948 <__gethex+0x2bc>
 800a8de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d022      	beq.n	800a92c <__gethex+0x2a0>
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d024      	beq.n	800a934 <__gethex+0x2a8>
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d115      	bne.n	800a91a <__gethex+0x28e>
 800a8ee:	42ae      	cmp	r6, r5
 800a8f0:	d113      	bne.n	800a91a <__gethex+0x28e>
 800a8f2:	2e01      	cmp	r6, #1
 800a8f4:	d10b      	bne.n	800a90e <__gethex+0x282>
 800a8f6:	9a02      	ldr	r2, [sp, #8]
 800a8f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	2301      	movs	r3, #1
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	f8ca 3000 	str.w	r3, [sl]
 800a906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a908:	2562      	movs	r5, #98	@ 0x62
 800a90a:	601c      	str	r4, [r3, #0]
 800a90c:	e73a      	b.n	800a784 <__gethex+0xf8>
 800a90e:	1e71      	subs	r1, r6, #1
 800a910:	4620      	mov	r0, r4
 800a912:	f000 fe30 	bl	800b576 <__any_on>
 800a916:	2800      	cmp	r0, #0
 800a918:	d1ed      	bne.n	800a8f6 <__gethex+0x26a>
 800a91a:	9801      	ldr	r0, [sp, #4]
 800a91c:	4621      	mov	r1, r4
 800a91e:	f000 f9d9 	bl	800acd4 <_Bfree>
 800a922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a924:	2300      	movs	r3, #0
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	2550      	movs	r5, #80	@ 0x50
 800a92a:	e72b      	b.n	800a784 <__gethex+0xf8>
 800a92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1f3      	bne.n	800a91a <__gethex+0x28e>
 800a932:	e7e0      	b.n	800a8f6 <__gethex+0x26a>
 800a934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1dd      	bne.n	800a8f6 <__gethex+0x26a>
 800a93a:	e7ee      	b.n	800a91a <__gethex+0x28e>
 800a93c:	0800c554 	.word	0x0800c554
 800a940:	0800c6c1 	.word	0x0800c6c1
 800a944:	0800c6d2 	.word	0x0800c6d2
 800a948:	1e6f      	subs	r7, r5, #1
 800a94a:	f1b9 0f00 	cmp.w	r9, #0
 800a94e:	d130      	bne.n	800a9b2 <__gethex+0x326>
 800a950:	b127      	cbz	r7, 800a95c <__gethex+0x2d0>
 800a952:	4639      	mov	r1, r7
 800a954:	4620      	mov	r0, r4
 800a956:	f000 fe0e 	bl	800b576 <__any_on>
 800a95a:	4681      	mov	r9, r0
 800a95c:	117a      	asrs	r2, r7, #5
 800a95e:	2301      	movs	r3, #1
 800a960:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a964:	f007 071f 	and.w	r7, r7, #31
 800a968:	40bb      	lsls	r3, r7
 800a96a:	4213      	tst	r3, r2
 800a96c:	4629      	mov	r1, r5
 800a96e:	4620      	mov	r0, r4
 800a970:	bf18      	it	ne
 800a972:	f049 0902 	orrne.w	r9, r9, #2
 800a976:	f7ff fe21 	bl	800a5bc <rshift>
 800a97a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a97e:	1b76      	subs	r6, r6, r5
 800a980:	2502      	movs	r5, #2
 800a982:	f1b9 0f00 	cmp.w	r9, #0
 800a986:	d047      	beq.n	800aa18 <__gethex+0x38c>
 800a988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d015      	beq.n	800a9bc <__gethex+0x330>
 800a990:	2b03      	cmp	r3, #3
 800a992:	d017      	beq.n	800a9c4 <__gethex+0x338>
 800a994:	2b01      	cmp	r3, #1
 800a996:	d109      	bne.n	800a9ac <__gethex+0x320>
 800a998:	f019 0f02 	tst.w	r9, #2
 800a99c:	d006      	beq.n	800a9ac <__gethex+0x320>
 800a99e:	f8da 3000 	ldr.w	r3, [sl]
 800a9a2:	ea49 0903 	orr.w	r9, r9, r3
 800a9a6:	f019 0f01 	tst.w	r9, #1
 800a9aa:	d10e      	bne.n	800a9ca <__gethex+0x33e>
 800a9ac:	f045 0510 	orr.w	r5, r5, #16
 800a9b0:	e032      	b.n	800aa18 <__gethex+0x38c>
 800a9b2:	f04f 0901 	mov.w	r9, #1
 800a9b6:	e7d1      	b.n	800a95c <__gethex+0x2d0>
 800a9b8:	2501      	movs	r5, #1
 800a9ba:	e7e2      	b.n	800a982 <__gethex+0x2f6>
 800a9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9be:	f1c3 0301 	rsb	r3, r3, #1
 800a9c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0f0      	beq.n	800a9ac <__gethex+0x320>
 800a9ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9ce:	f104 0314 	add.w	r3, r4, #20
 800a9d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9da:	f04f 0c00 	mov.w	ip, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9e8:	d01b      	beq.n	800aa22 <__gethex+0x396>
 800a9ea:	3201      	adds	r2, #1
 800a9ec:	6002      	str	r2, [r0, #0]
 800a9ee:	2d02      	cmp	r5, #2
 800a9f0:	f104 0314 	add.w	r3, r4, #20
 800a9f4:	d13c      	bne.n	800aa70 <__gethex+0x3e4>
 800a9f6:	f8d8 2000 	ldr.w	r2, [r8]
 800a9fa:	3a01      	subs	r2, #1
 800a9fc:	42b2      	cmp	r2, r6
 800a9fe:	d109      	bne.n	800aa14 <__gethex+0x388>
 800aa00:	1171      	asrs	r1, r6, #5
 800aa02:	2201      	movs	r2, #1
 800aa04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa08:	f006 061f 	and.w	r6, r6, #31
 800aa0c:	fa02 f606 	lsl.w	r6, r2, r6
 800aa10:	421e      	tst	r6, r3
 800aa12:	d13a      	bne.n	800aa8a <__gethex+0x3fe>
 800aa14:	f045 0520 	orr.w	r5, r5, #32
 800aa18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa1a:	601c      	str	r4, [r3, #0]
 800aa1c:	9b02      	ldr	r3, [sp, #8]
 800aa1e:	601f      	str	r7, [r3, #0]
 800aa20:	e6b0      	b.n	800a784 <__gethex+0xf8>
 800aa22:	4299      	cmp	r1, r3
 800aa24:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa28:	d8d9      	bhi.n	800a9de <__gethex+0x352>
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	459b      	cmp	fp, r3
 800aa2e:	db17      	blt.n	800aa60 <__gethex+0x3d4>
 800aa30:	6861      	ldr	r1, [r4, #4]
 800aa32:	9801      	ldr	r0, [sp, #4]
 800aa34:	3101      	adds	r1, #1
 800aa36:	f000 f90d 	bl	800ac54 <_Balloc>
 800aa3a:	4681      	mov	r9, r0
 800aa3c:	b918      	cbnz	r0, 800aa46 <__gethex+0x3ba>
 800aa3e:	4b1a      	ldr	r3, [pc, #104]	@ (800aaa8 <__gethex+0x41c>)
 800aa40:	4602      	mov	r2, r0
 800aa42:	2184      	movs	r1, #132	@ 0x84
 800aa44:	e6c5      	b.n	800a7d2 <__gethex+0x146>
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	3202      	adds	r2, #2
 800aa4a:	f104 010c 	add.w	r1, r4, #12
 800aa4e:	0092      	lsls	r2, r2, #2
 800aa50:	300c      	adds	r0, #12
 800aa52:	f7ff fd52 	bl	800a4fa <memcpy>
 800aa56:	4621      	mov	r1, r4
 800aa58:	9801      	ldr	r0, [sp, #4]
 800aa5a:	f000 f93b 	bl	800acd4 <_Bfree>
 800aa5e:	464c      	mov	r4, r9
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa68:	6122      	str	r2, [r4, #16]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	615a      	str	r2, [r3, #20]
 800aa6e:	e7be      	b.n	800a9ee <__gethex+0x362>
 800aa70:	6922      	ldr	r2, [r4, #16]
 800aa72:	455a      	cmp	r2, fp
 800aa74:	dd0b      	ble.n	800aa8e <__gethex+0x402>
 800aa76:	2101      	movs	r1, #1
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f7ff fd9f 	bl	800a5bc <rshift>
 800aa7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa82:	3701      	adds	r7, #1
 800aa84:	42bb      	cmp	r3, r7
 800aa86:	f6ff aee0 	blt.w	800a84a <__gethex+0x1be>
 800aa8a:	2501      	movs	r5, #1
 800aa8c:	e7c2      	b.n	800aa14 <__gethex+0x388>
 800aa8e:	f016 061f 	ands.w	r6, r6, #31
 800aa92:	d0fa      	beq.n	800aa8a <__gethex+0x3fe>
 800aa94:	4453      	add	r3, sl
 800aa96:	f1c6 0620 	rsb	r6, r6, #32
 800aa9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa9e:	f000 f9cb 	bl	800ae38 <__hi0bits>
 800aaa2:	42b0      	cmp	r0, r6
 800aaa4:	dbe7      	blt.n	800aa76 <__gethex+0x3ea>
 800aaa6:	e7f0      	b.n	800aa8a <__gethex+0x3fe>
 800aaa8:	0800c6c1 	.word	0x0800c6c1

0800aaac <L_shift>:
 800aaac:	f1c2 0208 	rsb	r2, r2, #8
 800aab0:	0092      	lsls	r2, r2, #2
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	f1c2 0620 	rsb	r6, r2, #32
 800aab8:	6843      	ldr	r3, [r0, #4]
 800aaba:	6804      	ldr	r4, [r0, #0]
 800aabc:	fa03 f506 	lsl.w	r5, r3, r6
 800aac0:	432c      	orrs	r4, r5
 800aac2:	40d3      	lsrs	r3, r2
 800aac4:	6004      	str	r4, [r0, #0]
 800aac6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaca:	4288      	cmp	r0, r1
 800aacc:	d3f4      	bcc.n	800aab8 <L_shift+0xc>
 800aace:	bd70      	pop	{r4, r5, r6, pc}

0800aad0 <__match>:
 800aad0:	b530      	push	{r4, r5, lr}
 800aad2:	6803      	ldr	r3, [r0, #0]
 800aad4:	3301      	adds	r3, #1
 800aad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aada:	b914      	cbnz	r4, 800aae2 <__match+0x12>
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	2001      	movs	r0, #1
 800aae0:	bd30      	pop	{r4, r5, pc}
 800aae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aaea:	2d19      	cmp	r5, #25
 800aaec:	bf98      	it	ls
 800aaee:	3220      	addls	r2, #32
 800aaf0:	42a2      	cmp	r2, r4
 800aaf2:	d0f0      	beq.n	800aad6 <__match+0x6>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e7f3      	b.n	800aae0 <__match+0x10>

0800aaf8 <__hexnan>:
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	680b      	ldr	r3, [r1, #0]
 800aafe:	6801      	ldr	r1, [r0, #0]
 800ab00:	115e      	asrs	r6, r3, #5
 800ab02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab06:	f013 031f 	ands.w	r3, r3, #31
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	bf18      	it	ne
 800ab0e:	3604      	addne	r6, #4
 800ab10:	2500      	movs	r5, #0
 800ab12:	1f37      	subs	r7, r6, #4
 800ab14:	4682      	mov	sl, r0
 800ab16:	4690      	mov	r8, r2
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab1e:	46b9      	mov	r9, r7
 800ab20:	463c      	mov	r4, r7
 800ab22:	9502      	str	r5, [sp, #8]
 800ab24:	46ab      	mov	fp, r5
 800ab26:	784a      	ldrb	r2, [r1, #1]
 800ab28:	1c4b      	adds	r3, r1, #1
 800ab2a:	9303      	str	r3, [sp, #12]
 800ab2c:	b342      	cbz	r2, 800ab80 <__hexnan+0x88>
 800ab2e:	4610      	mov	r0, r2
 800ab30:	9105      	str	r1, [sp, #20]
 800ab32:	9204      	str	r2, [sp, #16]
 800ab34:	f7ff fd94 	bl	800a660 <__hexdig_fun>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d151      	bne.n	800abe0 <__hexnan+0xe8>
 800ab3c:	9a04      	ldr	r2, [sp, #16]
 800ab3e:	9905      	ldr	r1, [sp, #20]
 800ab40:	2a20      	cmp	r2, #32
 800ab42:	d818      	bhi.n	800ab76 <__hexnan+0x7e>
 800ab44:	9b02      	ldr	r3, [sp, #8]
 800ab46:	459b      	cmp	fp, r3
 800ab48:	dd13      	ble.n	800ab72 <__hexnan+0x7a>
 800ab4a:	454c      	cmp	r4, r9
 800ab4c:	d206      	bcs.n	800ab5c <__hexnan+0x64>
 800ab4e:	2d07      	cmp	r5, #7
 800ab50:	dc04      	bgt.n	800ab5c <__hexnan+0x64>
 800ab52:	462a      	mov	r2, r5
 800ab54:	4649      	mov	r1, r9
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7ff ffa8 	bl	800aaac <L_shift>
 800ab5c:	4544      	cmp	r4, r8
 800ab5e:	d952      	bls.n	800ac06 <__hexnan+0x10e>
 800ab60:	2300      	movs	r3, #0
 800ab62:	f1a4 0904 	sub.w	r9, r4, #4
 800ab66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab6a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab6e:	464c      	mov	r4, r9
 800ab70:	461d      	mov	r5, r3
 800ab72:	9903      	ldr	r1, [sp, #12]
 800ab74:	e7d7      	b.n	800ab26 <__hexnan+0x2e>
 800ab76:	2a29      	cmp	r2, #41	@ 0x29
 800ab78:	d157      	bne.n	800ac2a <__hexnan+0x132>
 800ab7a:	3102      	adds	r1, #2
 800ab7c:	f8ca 1000 	str.w	r1, [sl]
 800ab80:	f1bb 0f00 	cmp.w	fp, #0
 800ab84:	d051      	beq.n	800ac2a <__hexnan+0x132>
 800ab86:	454c      	cmp	r4, r9
 800ab88:	d206      	bcs.n	800ab98 <__hexnan+0xa0>
 800ab8a:	2d07      	cmp	r5, #7
 800ab8c:	dc04      	bgt.n	800ab98 <__hexnan+0xa0>
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4649      	mov	r1, r9
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7ff ff8a 	bl	800aaac <L_shift>
 800ab98:	4544      	cmp	r4, r8
 800ab9a:	d936      	bls.n	800ac0a <__hexnan+0x112>
 800ab9c:	f1a8 0204 	sub.w	r2, r8, #4
 800aba0:	4623      	mov	r3, r4
 800aba2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aba6:	f842 1f04 	str.w	r1, [r2, #4]!
 800abaa:	429f      	cmp	r7, r3
 800abac:	d2f9      	bcs.n	800aba2 <__hexnan+0xaa>
 800abae:	1b3b      	subs	r3, r7, r4
 800abb0:	f023 0303 	bic.w	r3, r3, #3
 800abb4:	3304      	adds	r3, #4
 800abb6:	3401      	adds	r4, #1
 800abb8:	3e03      	subs	r6, #3
 800abba:	42b4      	cmp	r4, r6
 800abbc:	bf88      	it	hi
 800abbe:	2304      	movhi	r3, #4
 800abc0:	4443      	add	r3, r8
 800abc2:	2200      	movs	r2, #0
 800abc4:	f843 2b04 	str.w	r2, [r3], #4
 800abc8:	429f      	cmp	r7, r3
 800abca:	d2fb      	bcs.n	800abc4 <__hexnan+0xcc>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	b91b      	cbnz	r3, 800abd8 <__hexnan+0xe0>
 800abd0:	4547      	cmp	r7, r8
 800abd2:	d128      	bne.n	800ac26 <__hexnan+0x12e>
 800abd4:	2301      	movs	r3, #1
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	2005      	movs	r0, #5
 800abda:	b007      	add	sp, #28
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	3501      	adds	r5, #1
 800abe2:	2d08      	cmp	r5, #8
 800abe4:	f10b 0b01 	add.w	fp, fp, #1
 800abe8:	dd06      	ble.n	800abf8 <__hexnan+0x100>
 800abea:	4544      	cmp	r4, r8
 800abec:	d9c1      	bls.n	800ab72 <__hexnan+0x7a>
 800abee:	2300      	movs	r3, #0
 800abf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800abf4:	2501      	movs	r5, #1
 800abf6:	3c04      	subs	r4, #4
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	f000 000f 	and.w	r0, r0, #15
 800abfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac02:	6020      	str	r0, [r4, #0]
 800ac04:	e7b5      	b.n	800ab72 <__hexnan+0x7a>
 800ac06:	2508      	movs	r5, #8
 800ac08:	e7b3      	b.n	800ab72 <__hexnan+0x7a>
 800ac0a:	9b01      	ldr	r3, [sp, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d0dd      	beq.n	800abcc <__hexnan+0xd4>
 800ac10:	f1c3 0320 	rsb	r3, r3, #32
 800ac14:	f04f 32ff 	mov.w	r2, #4294967295
 800ac18:	40da      	lsrs	r2, r3
 800ac1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ac1e:	4013      	ands	r3, r2
 800ac20:	f846 3c04 	str.w	r3, [r6, #-4]
 800ac24:	e7d2      	b.n	800abcc <__hexnan+0xd4>
 800ac26:	3f04      	subs	r7, #4
 800ac28:	e7d0      	b.n	800abcc <__hexnan+0xd4>
 800ac2a:	2004      	movs	r0, #4
 800ac2c:	e7d5      	b.n	800abda <__hexnan+0xe2>

0800ac2e <__ascii_mbtowc>:
 800ac2e:	b082      	sub	sp, #8
 800ac30:	b901      	cbnz	r1, 800ac34 <__ascii_mbtowc+0x6>
 800ac32:	a901      	add	r1, sp, #4
 800ac34:	b142      	cbz	r2, 800ac48 <__ascii_mbtowc+0x1a>
 800ac36:	b14b      	cbz	r3, 800ac4c <__ascii_mbtowc+0x1e>
 800ac38:	7813      	ldrb	r3, [r2, #0]
 800ac3a:	600b      	str	r3, [r1, #0]
 800ac3c:	7812      	ldrb	r2, [r2, #0]
 800ac3e:	1e10      	subs	r0, r2, #0
 800ac40:	bf18      	it	ne
 800ac42:	2001      	movne	r0, #1
 800ac44:	b002      	add	sp, #8
 800ac46:	4770      	bx	lr
 800ac48:	4610      	mov	r0, r2
 800ac4a:	e7fb      	b.n	800ac44 <__ascii_mbtowc+0x16>
 800ac4c:	f06f 0001 	mvn.w	r0, #1
 800ac50:	e7f8      	b.n	800ac44 <__ascii_mbtowc+0x16>
	...

0800ac54 <_Balloc>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	69c6      	ldr	r6, [r0, #28]
 800ac58:	4604      	mov	r4, r0
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	b976      	cbnz	r6, 800ac7c <_Balloc+0x28>
 800ac5e:	2010      	movs	r0, #16
 800ac60:	f7fe fb1a 	bl	8009298 <malloc>
 800ac64:	4602      	mov	r2, r0
 800ac66:	61e0      	str	r0, [r4, #28]
 800ac68:	b920      	cbnz	r0, 800ac74 <_Balloc+0x20>
 800ac6a:	4b18      	ldr	r3, [pc, #96]	@ (800accc <_Balloc+0x78>)
 800ac6c:	4818      	ldr	r0, [pc, #96]	@ (800acd0 <_Balloc+0x7c>)
 800ac6e:	216b      	movs	r1, #107	@ 0x6b
 800ac70:	f001 f862 	bl	800bd38 <__assert_func>
 800ac74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac78:	6006      	str	r6, [r0, #0]
 800ac7a:	60c6      	str	r6, [r0, #12]
 800ac7c:	69e6      	ldr	r6, [r4, #28]
 800ac7e:	68f3      	ldr	r3, [r6, #12]
 800ac80:	b183      	cbz	r3, 800aca4 <_Balloc+0x50>
 800ac82:	69e3      	ldr	r3, [r4, #28]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac8a:	b9b8      	cbnz	r0, 800acbc <_Balloc+0x68>
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac92:	1d72      	adds	r2, r6, #5
 800ac94:	0092      	lsls	r2, r2, #2
 800ac96:	4620      	mov	r0, r4
 800ac98:	f001 f86c 	bl	800bd74 <_calloc_r>
 800ac9c:	b160      	cbz	r0, 800acb8 <_Balloc+0x64>
 800ac9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aca2:	e00e      	b.n	800acc2 <_Balloc+0x6e>
 800aca4:	2221      	movs	r2, #33	@ 0x21
 800aca6:	2104      	movs	r1, #4
 800aca8:	4620      	mov	r0, r4
 800acaa:	f001 f863 	bl	800bd74 <_calloc_r>
 800acae:	69e3      	ldr	r3, [r4, #28]
 800acb0:	60f0      	str	r0, [r6, #12]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e4      	bne.n	800ac82 <_Balloc+0x2e>
 800acb8:	2000      	movs	r0, #0
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	6802      	ldr	r2, [r0, #0]
 800acbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acc2:	2300      	movs	r3, #0
 800acc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acc8:	e7f7      	b.n	800acba <_Balloc+0x66>
 800acca:	bf00      	nop
 800accc:	0800c732 	.word	0x0800c732
 800acd0:	0800c749 	.word	0x0800c749

0800acd4 <_Bfree>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	69c6      	ldr	r6, [r0, #28]
 800acd8:	4605      	mov	r5, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	b976      	cbnz	r6, 800acfc <_Bfree+0x28>
 800acde:	2010      	movs	r0, #16
 800ace0:	f7fe fada 	bl	8009298 <malloc>
 800ace4:	4602      	mov	r2, r0
 800ace6:	61e8      	str	r0, [r5, #28]
 800ace8:	b920      	cbnz	r0, 800acf4 <_Bfree+0x20>
 800acea:	4b09      	ldr	r3, [pc, #36]	@ (800ad10 <_Bfree+0x3c>)
 800acec:	4809      	ldr	r0, [pc, #36]	@ (800ad14 <_Bfree+0x40>)
 800acee:	218f      	movs	r1, #143	@ 0x8f
 800acf0:	f001 f822 	bl	800bd38 <__assert_func>
 800acf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acf8:	6006      	str	r6, [r0, #0]
 800acfa:	60c6      	str	r6, [r0, #12]
 800acfc:	b13c      	cbz	r4, 800ad0e <_Bfree+0x3a>
 800acfe:	69eb      	ldr	r3, [r5, #28]
 800ad00:	6862      	ldr	r2, [r4, #4]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad08:	6021      	str	r1, [r4, #0]
 800ad0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	0800c732 	.word	0x0800c732
 800ad14:	0800c749 	.word	0x0800c749

0800ad18 <__multadd>:
 800ad18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1c:	690d      	ldr	r5, [r1, #16]
 800ad1e:	4607      	mov	r7, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	461e      	mov	r6, r3
 800ad24:	f101 0c14 	add.w	ip, r1, #20
 800ad28:	2000      	movs	r0, #0
 800ad2a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad2e:	b299      	uxth	r1, r3
 800ad30:	fb02 6101 	mla	r1, r2, r1, r6
 800ad34:	0c1e      	lsrs	r6, r3, #16
 800ad36:	0c0b      	lsrs	r3, r1, #16
 800ad38:	fb02 3306 	mla	r3, r2, r6, r3
 800ad3c:	b289      	uxth	r1, r1
 800ad3e:	3001      	adds	r0, #1
 800ad40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad44:	4285      	cmp	r5, r0
 800ad46:	f84c 1b04 	str.w	r1, [ip], #4
 800ad4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad4e:	dcec      	bgt.n	800ad2a <__multadd+0x12>
 800ad50:	b30e      	cbz	r6, 800ad96 <__multadd+0x7e>
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	42ab      	cmp	r3, r5
 800ad56:	dc19      	bgt.n	800ad8c <__multadd+0x74>
 800ad58:	6861      	ldr	r1, [r4, #4]
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	3101      	adds	r1, #1
 800ad5e:	f7ff ff79 	bl	800ac54 <_Balloc>
 800ad62:	4680      	mov	r8, r0
 800ad64:	b928      	cbnz	r0, 800ad72 <__multadd+0x5a>
 800ad66:	4602      	mov	r2, r0
 800ad68:	4b0c      	ldr	r3, [pc, #48]	@ (800ad9c <__multadd+0x84>)
 800ad6a:	480d      	ldr	r0, [pc, #52]	@ (800ada0 <__multadd+0x88>)
 800ad6c:	21ba      	movs	r1, #186	@ 0xba
 800ad6e:	f000 ffe3 	bl	800bd38 <__assert_func>
 800ad72:	6922      	ldr	r2, [r4, #16]
 800ad74:	3202      	adds	r2, #2
 800ad76:	f104 010c 	add.w	r1, r4, #12
 800ad7a:	0092      	lsls	r2, r2, #2
 800ad7c:	300c      	adds	r0, #12
 800ad7e:	f7ff fbbc 	bl	800a4fa <memcpy>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4638      	mov	r0, r7
 800ad86:	f7ff ffa5 	bl	800acd4 <_Bfree>
 800ad8a:	4644      	mov	r4, r8
 800ad8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad90:	3501      	adds	r5, #1
 800ad92:	615e      	str	r6, [r3, #20]
 800ad94:	6125      	str	r5, [r4, #16]
 800ad96:	4620      	mov	r0, r4
 800ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9c:	0800c6c1 	.word	0x0800c6c1
 800ada0:	0800c749 	.word	0x0800c749

0800ada4 <__s2b>:
 800ada4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada8:	460c      	mov	r4, r1
 800adaa:	4615      	mov	r5, r2
 800adac:	461f      	mov	r7, r3
 800adae:	2209      	movs	r2, #9
 800adb0:	3308      	adds	r3, #8
 800adb2:	4606      	mov	r6, r0
 800adb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800adb8:	2100      	movs	r1, #0
 800adba:	2201      	movs	r2, #1
 800adbc:	429a      	cmp	r2, r3
 800adbe:	db09      	blt.n	800add4 <__s2b+0x30>
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff ff47 	bl	800ac54 <_Balloc>
 800adc6:	b940      	cbnz	r0, 800adda <__s2b+0x36>
 800adc8:	4602      	mov	r2, r0
 800adca:	4b19      	ldr	r3, [pc, #100]	@ (800ae30 <__s2b+0x8c>)
 800adcc:	4819      	ldr	r0, [pc, #100]	@ (800ae34 <__s2b+0x90>)
 800adce:	21d3      	movs	r1, #211	@ 0xd3
 800add0:	f000 ffb2 	bl	800bd38 <__assert_func>
 800add4:	0052      	lsls	r2, r2, #1
 800add6:	3101      	adds	r1, #1
 800add8:	e7f0      	b.n	800adbc <__s2b+0x18>
 800adda:	9b08      	ldr	r3, [sp, #32]
 800addc:	6143      	str	r3, [r0, #20]
 800adde:	2d09      	cmp	r5, #9
 800ade0:	f04f 0301 	mov.w	r3, #1
 800ade4:	6103      	str	r3, [r0, #16]
 800ade6:	dd16      	ble.n	800ae16 <__s2b+0x72>
 800ade8:	f104 0909 	add.w	r9, r4, #9
 800adec:	46c8      	mov	r8, r9
 800adee:	442c      	add	r4, r5
 800adf0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800adf4:	4601      	mov	r1, r0
 800adf6:	3b30      	subs	r3, #48	@ 0x30
 800adf8:	220a      	movs	r2, #10
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff ff8c 	bl	800ad18 <__multadd>
 800ae00:	45a0      	cmp	r8, r4
 800ae02:	d1f5      	bne.n	800adf0 <__s2b+0x4c>
 800ae04:	f1a5 0408 	sub.w	r4, r5, #8
 800ae08:	444c      	add	r4, r9
 800ae0a:	1b2d      	subs	r5, r5, r4
 800ae0c:	1963      	adds	r3, r4, r5
 800ae0e:	42bb      	cmp	r3, r7
 800ae10:	db04      	blt.n	800ae1c <__s2b+0x78>
 800ae12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae16:	340a      	adds	r4, #10
 800ae18:	2509      	movs	r5, #9
 800ae1a:	e7f6      	b.n	800ae0a <__s2b+0x66>
 800ae1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae20:	4601      	mov	r1, r0
 800ae22:	3b30      	subs	r3, #48	@ 0x30
 800ae24:	220a      	movs	r2, #10
 800ae26:	4630      	mov	r0, r6
 800ae28:	f7ff ff76 	bl	800ad18 <__multadd>
 800ae2c:	e7ee      	b.n	800ae0c <__s2b+0x68>
 800ae2e:	bf00      	nop
 800ae30:	0800c6c1 	.word	0x0800c6c1
 800ae34:	0800c749 	.word	0x0800c749

0800ae38 <__hi0bits>:
 800ae38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	bf36      	itet	cc
 800ae40:	0403      	lslcc	r3, r0, #16
 800ae42:	2000      	movcs	r0, #0
 800ae44:	2010      	movcc	r0, #16
 800ae46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae4a:	bf3c      	itt	cc
 800ae4c:	021b      	lslcc	r3, r3, #8
 800ae4e:	3008      	addcc	r0, #8
 800ae50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae54:	bf3c      	itt	cc
 800ae56:	011b      	lslcc	r3, r3, #4
 800ae58:	3004      	addcc	r0, #4
 800ae5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae5e:	bf3c      	itt	cc
 800ae60:	009b      	lslcc	r3, r3, #2
 800ae62:	3002      	addcc	r0, #2
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	db05      	blt.n	800ae74 <__hi0bits+0x3c>
 800ae68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae6c:	f100 0001 	add.w	r0, r0, #1
 800ae70:	bf08      	it	eq
 800ae72:	2020      	moveq	r0, #32
 800ae74:	4770      	bx	lr

0800ae76 <__lo0bits>:
 800ae76:	6803      	ldr	r3, [r0, #0]
 800ae78:	4602      	mov	r2, r0
 800ae7a:	f013 0007 	ands.w	r0, r3, #7
 800ae7e:	d00b      	beq.n	800ae98 <__lo0bits+0x22>
 800ae80:	07d9      	lsls	r1, r3, #31
 800ae82:	d421      	bmi.n	800aec8 <__lo0bits+0x52>
 800ae84:	0798      	lsls	r0, r3, #30
 800ae86:	bf49      	itett	mi
 800ae88:	085b      	lsrmi	r3, r3, #1
 800ae8a:	089b      	lsrpl	r3, r3, #2
 800ae8c:	2001      	movmi	r0, #1
 800ae8e:	6013      	strmi	r3, [r2, #0]
 800ae90:	bf5c      	itt	pl
 800ae92:	6013      	strpl	r3, [r2, #0]
 800ae94:	2002      	movpl	r0, #2
 800ae96:	4770      	bx	lr
 800ae98:	b299      	uxth	r1, r3
 800ae9a:	b909      	cbnz	r1, 800aea0 <__lo0bits+0x2a>
 800ae9c:	0c1b      	lsrs	r3, r3, #16
 800ae9e:	2010      	movs	r0, #16
 800aea0:	b2d9      	uxtb	r1, r3
 800aea2:	b909      	cbnz	r1, 800aea8 <__lo0bits+0x32>
 800aea4:	3008      	adds	r0, #8
 800aea6:	0a1b      	lsrs	r3, r3, #8
 800aea8:	0719      	lsls	r1, r3, #28
 800aeaa:	bf04      	itt	eq
 800aeac:	091b      	lsreq	r3, r3, #4
 800aeae:	3004      	addeq	r0, #4
 800aeb0:	0799      	lsls	r1, r3, #30
 800aeb2:	bf04      	itt	eq
 800aeb4:	089b      	lsreq	r3, r3, #2
 800aeb6:	3002      	addeq	r0, #2
 800aeb8:	07d9      	lsls	r1, r3, #31
 800aeba:	d403      	bmi.n	800aec4 <__lo0bits+0x4e>
 800aebc:	085b      	lsrs	r3, r3, #1
 800aebe:	f100 0001 	add.w	r0, r0, #1
 800aec2:	d003      	beq.n	800aecc <__lo0bits+0x56>
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	4770      	bx	lr
 800aec8:	2000      	movs	r0, #0
 800aeca:	4770      	bx	lr
 800aecc:	2020      	movs	r0, #32
 800aece:	4770      	bx	lr

0800aed0 <__i2b>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	460c      	mov	r4, r1
 800aed4:	2101      	movs	r1, #1
 800aed6:	f7ff febd 	bl	800ac54 <_Balloc>
 800aeda:	4602      	mov	r2, r0
 800aedc:	b928      	cbnz	r0, 800aeea <__i2b+0x1a>
 800aede:	4b05      	ldr	r3, [pc, #20]	@ (800aef4 <__i2b+0x24>)
 800aee0:	4805      	ldr	r0, [pc, #20]	@ (800aef8 <__i2b+0x28>)
 800aee2:	f240 1145 	movw	r1, #325	@ 0x145
 800aee6:	f000 ff27 	bl	800bd38 <__assert_func>
 800aeea:	2301      	movs	r3, #1
 800aeec:	6144      	str	r4, [r0, #20]
 800aeee:	6103      	str	r3, [r0, #16]
 800aef0:	bd10      	pop	{r4, pc}
 800aef2:	bf00      	nop
 800aef4:	0800c6c1 	.word	0x0800c6c1
 800aef8:	0800c749 	.word	0x0800c749

0800aefc <__multiply>:
 800aefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	4614      	mov	r4, r2
 800af02:	690a      	ldr	r2, [r1, #16]
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	429a      	cmp	r2, r3
 800af08:	bfa8      	it	ge
 800af0a:	4623      	movge	r3, r4
 800af0c:	460f      	mov	r7, r1
 800af0e:	bfa4      	itt	ge
 800af10:	460c      	movge	r4, r1
 800af12:	461f      	movge	r7, r3
 800af14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af1c:	68a3      	ldr	r3, [r4, #8]
 800af1e:	6861      	ldr	r1, [r4, #4]
 800af20:	eb0a 0609 	add.w	r6, sl, r9
 800af24:	42b3      	cmp	r3, r6
 800af26:	b085      	sub	sp, #20
 800af28:	bfb8      	it	lt
 800af2a:	3101      	addlt	r1, #1
 800af2c:	f7ff fe92 	bl	800ac54 <_Balloc>
 800af30:	b930      	cbnz	r0, 800af40 <__multiply+0x44>
 800af32:	4602      	mov	r2, r0
 800af34:	4b44      	ldr	r3, [pc, #272]	@ (800b048 <__multiply+0x14c>)
 800af36:	4845      	ldr	r0, [pc, #276]	@ (800b04c <__multiply+0x150>)
 800af38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af3c:	f000 fefc 	bl	800bd38 <__assert_func>
 800af40:	f100 0514 	add.w	r5, r0, #20
 800af44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af48:	462b      	mov	r3, r5
 800af4a:	2200      	movs	r2, #0
 800af4c:	4543      	cmp	r3, r8
 800af4e:	d321      	bcc.n	800af94 <__multiply+0x98>
 800af50:	f107 0114 	add.w	r1, r7, #20
 800af54:	f104 0214 	add.w	r2, r4, #20
 800af58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af60:	9302      	str	r3, [sp, #8]
 800af62:	1b13      	subs	r3, r2, r4
 800af64:	3b15      	subs	r3, #21
 800af66:	f023 0303 	bic.w	r3, r3, #3
 800af6a:	3304      	adds	r3, #4
 800af6c:	f104 0715 	add.w	r7, r4, #21
 800af70:	42ba      	cmp	r2, r7
 800af72:	bf38      	it	cc
 800af74:	2304      	movcc	r3, #4
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	9b02      	ldr	r3, [sp, #8]
 800af7a:	9103      	str	r1, [sp, #12]
 800af7c:	428b      	cmp	r3, r1
 800af7e:	d80c      	bhi.n	800af9a <__multiply+0x9e>
 800af80:	2e00      	cmp	r6, #0
 800af82:	dd03      	ble.n	800af8c <__multiply+0x90>
 800af84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d05b      	beq.n	800b044 <__multiply+0x148>
 800af8c:	6106      	str	r6, [r0, #16]
 800af8e:	b005      	add	sp, #20
 800af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af94:	f843 2b04 	str.w	r2, [r3], #4
 800af98:	e7d8      	b.n	800af4c <__multiply+0x50>
 800af9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800af9e:	f1ba 0f00 	cmp.w	sl, #0
 800afa2:	d024      	beq.n	800afee <__multiply+0xf2>
 800afa4:	f104 0e14 	add.w	lr, r4, #20
 800afa8:	46a9      	mov	r9, r5
 800afaa:	f04f 0c00 	mov.w	ip, #0
 800afae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afb2:	f8d9 3000 	ldr.w	r3, [r9]
 800afb6:	fa1f fb87 	uxth.w	fp, r7
 800afba:	b29b      	uxth	r3, r3
 800afbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800afc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800afc4:	f8d9 7000 	ldr.w	r7, [r9]
 800afc8:	4463      	add	r3, ip
 800afca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afce:	fb0a c70b 	mla	r7, sl, fp, ip
 800afd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afdc:	4572      	cmp	r2, lr
 800afde:	f849 3b04 	str.w	r3, [r9], #4
 800afe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afe6:	d8e2      	bhi.n	800afae <__multiply+0xb2>
 800afe8:	9b01      	ldr	r3, [sp, #4]
 800afea:	f845 c003 	str.w	ip, [r5, r3]
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aff4:	3104      	adds	r1, #4
 800aff6:	f1b9 0f00 	cmp.w	r9, #0
 800affa:	d021      	beq.n	800b040 <__multiply+0x144>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	f104 0c14 	add.w	ip, r4, #20
 800b002:	46ae      	mov	lr, r5
 800b004:	f04f 0a00 	mov.w	sl, #0
 800b008:	f8bc b000 	ldrh.w	fp, [ip]
 800b00c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b010:	fb09 770b 	mla	r7, r9, fp, r7
 800b014:	4457      	add	r7, sl
 800b016:	b29b      	uxth	r3, r3
 800b018:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b01c:	f84e 3b04 	str.w	r3, [lr], #4
 800b020:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b024:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b028:	f8be 3000 	ldrh.w	r3, [lr]
 800b02c:	fb09 330a 	mla	r3, r9, sl, r3
 800b030:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b034:	4562      	cmp	r2, ip
 800b036:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b03a:	d8e5      	bhi.n	800b008 <__multiply+0x10c>
 800b03c:	9f01      	ldr	r7, [sp, #4]
 800b03e:	51eb      	str	r3, [r5, r7]
 800b040:	3504      	adds	r5, #4
 800b042:	e799      	b.n	800af78 <__multiply+0x7c>
 800b044:	3e01      	subs	r6, #1
 800b046:	e79b      	b.n	800af80 <__multiply+0x84>
 800b048:	0800c6c1 	.word	0x0800c6c1
 800b04c:	0800c749 	.word	0x0800c749

0800b050 <__pow5mult>:
 800b050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b054:	4615      	mov	r5, r2
 800b056:	f012 0203 	ands.w	r2, r2, #3
 800b05a:	4607      	mov	r7, r0
 800b05c:	460e      	mov	r6, r1
 800b05e:	d007      	beq.n	800b070 <__pow5mult+0x20>
 800b060:	4c25      	ldr	r4, [pc, #148]	@ (800b0f8 <__pow5mult+0xa8>)
 800b062:	3a01      	subs	r2, #1
 800b064:	2300      	movs	r3, #0
 800b066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b06a:	f7ff fe55 	bl	800ad18 <__multadd>
 800b06e:	4606      	mov	r6, r0
 800b070:	10ad      	asrs	r5, r5, #2
 800b072:	d03d      	beq.n	800b0f0 <__pow5mult+0xa0>
 800b074:	69fc      	ldr	r4, [r7, #28]
 800b076:	b97c      	cbnz	r4, 800b098 <__pow5mult+0x48>
 800b078:	2010      	movs	r0, #16
 800b07a:	f7fe f90d 	bl	8009298 <malloc>
 800b07e:	4602      	mov	r2, r0
 800b080:	61f8      	str	r0, [r7, #28]
 800b082:	b928      	cbnz	r0, 800b090 <__pow5mult+0x40>
 800b084:	4b1d      	ldr	r3, [pc, #116]	@ (800b0fc <__pow5mult+0xac>)
 800b086:	481e      	ldr	r0, [pc, #120]	@ (800b100 <__pow5mult+0xb0>)
 800b088:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b08c:	f000 fe54 	bl	800bd38 <__assert_func>
 800b090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b094:	6004      	str	r4, [r0, #0]
 800b096:	60c4      	str	r4, [r0, #12]
 800b098:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b09c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0a0:	b94c      	cbnz	r4, 800b0b6 <__pow5mult+0x66>
 800b0a2:	f240 2171 	movw	r1, #625	@ 0x271
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	f7ff ff12 	bl	800aed0 <__i2b>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	6003      	str	r3, [r0, #0]
 800b0b6:	f04f 0900 	mov.w	r9, #0
 800b0ba:	07eb      	lsls	r3, r5, #31
 800b0bc:	d50a      	bpl.n	800b0d4 <__pow5mult+0x84>
 800b0be:	4631      	mov	r1, r6
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	f7ff ff1a 	bl	800aefc <__multiply>
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4680      	mov	r8, r0
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff fe01 	bl	800acd4 <_Bfree>
 800b0d2:	4646      	mov	r6, r8
 800b0d4:	106d      	asrs	r5, r5, #1
 800b0d6:	d00b      	beq.n	800b0f0 <__pow5mult+0xa0>
 800b0d8:	6820      	ldr	r0, [r4, #0]
 800b0da:	b938      	cbnz	r0, 800b0ec <__pow5mult+0x9c>
 800b0dc:	4622      	mov	r2, r4
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7ff ff0b 	bl	800aefc <__multiply>
 800b0e6:	6020      	str	r0, [r4, #0]
 800b0e8:	f8c0 9000 	str.w	r9, [r0]
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	e7e4      	b.n	800b0ba <__pow5mult+0x6a>
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f6:	bf00      	nop
 800b0f8:	0800c7a4 	.word	0x0800c7a4
 800b0fc:	0800c732 	.word	0x0800c732
 800b100:	0800c749 	.word	0x0800c749

0800b104 <__lshift>:
 800b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b108:	460c      	mov	r4, r1
 800b10a:	6849      	ldr	r1, [r1, #4]
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	4607      	mov	r7, r0
 800b116:	4691      	mov	r9, r2
 800b118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b11c:	f108 0601 	add.w	r6, r8, #1
 800b120:	42b3      	cmp	r3, r6
 800b122:	db0b      	blt.n	800b13c <__lshift+0x38>
 800b124:	4638      	mov	r0, r7
 800b126:	f7ff fd95 	bl	800ac54 <_Balloc>
 800b12a:	4605      	mov	r5, r0
 800b12c:	b948      	cbnz	r0, 800b142 <__lshift+0x3e>
 800b12e:	4602      	mov	r2, r0
 800b130:	4b28      	ldr	r3, [pc, #160]	@ (800b1d4 <__lshift+0xd0>)
 800b132:	4829      	ldr	r0, [pc, #164]	@ (800b1d8 <__lshift+0xd4>)
 800b134:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b138:	f000 fdfe 	bl	800bd38 <__assert_func>
 800b13c:	3101      	adds	r1, #1
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	e7ee      	b.n	800b120 <__lshift+0x1c>
 800b142:	2300      	movs	r3, #0
 800b144:	f100 0114 	add.w	r1, r0, #20
 800b148:	f100 0210 	add.w	r2, r0, #16
 800b14c:	4618      	mov	r0, r3
 800b14e:	4553      	cmp	r3, sl
 800b150:	db33      	blt.n	800b1ba <__lshift+0xb6>
 800b152:	6920      	ldr	r0, [r4, #16]
 800b154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b158:	f104 0314 	add.w	r3, r4, #20
 800b15c:	f019 091f 	ands.w	r9, r9, #31
 800b160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b168:	d02b      	beq.n	800b1c2 <__lshift+0xbe>
 800b16a:	f1c9 0e20 	rsb	lr, r9, #32
 800b16e:	468a      	mov	sl, r1
 800b170:	2200      	movs	r2, #0
 800b172:	6818      	ldr	r0, [r3, #0]
 800b174:	fa00 f009 	lsl.w	r0, r0, r9
 800b178:	4310      	orrs	r0, r2
 800b17a:	f84a 0b04 	str.w	r0, [sl], #4
 800b17e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b182:	459c      	cmp	ip, r3
 800b184:	fa22 f20e 	lsr.w	r2, r2, lr
 800b188:	d8f3      	bhi.n	800b172 <__lshift+0x6e>
 800b18a:	ebac 0304 	sub.w	r3, ip, r4
 800b18e:	3b15      	subs	r3, #21
 800b190:	f023 0303 	bic.w	r3, r3, #3
 800b194:	3304      	adds	r3, #4
 800b196:	f104 0015 	add.w	r0, r4, #21
 800b19a:	4584      	cmp	ip, r0
 800b19c:	bf38      	it	cc
 800b19e:	2304      	movcc	r3, #4
 800b1a0:	50ca      	str	r2, [r1, r3]
 800b1a2:	b10a      	cbz	r2, 800b1a8 <__lshift+0xa4>
 800b1a4:	f108 0602 	add.w	r6, r8, #2
 800b1a8:	3e01      	subs	r6, #1
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	612e      	str	r6, [r5, #16]
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	f7ff fd90 	bl	800acd4 <_Bfree>
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1be:	3301      	adds	r3, #1
 800b1c0:	e7c5      	b.n	800b14e <__lshift+0x4a>
 800b1c2:	3904      	subs	r1, #4
 800b1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1cc:	459c      	cmp	ip, r3
 800b1ce:	d8f9      	bhi.n	800b1c4 <__lshift+0xc0>
 800b1d0:	e7ea      	b.n	800b1a8 <__lshift+0xa4>
 800b1d2:	bf00      	nop
 800b1d4:	0800c6c1 	.word	0x0800c6c1
 800b1d8:	0800c749 	.word	0x0800c749

0800b1dc <__mcmp>:
 800b1dc:	690a      	ldr	r2, [r1, #16]
 800b1de:	4603      	mov	r3, r0
 800b1e0:	6900      	ldr	r0, [r0, #16]
 800b1e2:	1a80      	subs	r0, r0, r2
 800b1e4:	b530      	push	{r4, r5, lr}
 800b1e6:	d10e      	bne.n	800b206 <__mcmp+0x2a>
 800b1e8:	3314      	adds	r3, #20
 800b1ea:	3114      	adds	r1, #20
 800b1ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1fc:	4295      	cmp	r5, r2
 800b1fe:	d003      	beq.n	800b208 <__mcmp+0x2c>
 800b200:	d205      	bcs.n	800b20e <__mcmp+0x32>
 800b202:	f04f 30ff 	mov.w	r0, #4294967295
 800b206:	bd30      	pop	{r4, r5, pc}
 800b208:	42a3      	cmp	r3, r4
 800b20a:	d3f3      	bcc.n	800b1f4 <__mcmp+0x18>
 800b20c:	e7fb      	b.n	800b206 <__mcmp+0x2a>
 800b20e:	2001      	movs	r0, #1
 800b210:	e7f9      	b.n	800b206 <__mcmp+0x2a>
	...

0800b214 <__mdiff>:
 800b214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	4689      	mov	r9, r1
 800b21a:	4606      	mov	r6, r0
 800b21c:	4611      	mov	r1, r2
 800b21e:	4648      	mov	r0, r9
 800b220:	4614      	mov	r4, r2
 800b222:	f7ff ffdb 	bl	800b1dc <__mcmp>
 800b226:	1e05      	subs	r5, r0, #0
 800b228:	d112      	bne.n	800b250 <__mdiff+0x3c>
 800b22a:	4629      	mov	r1, r5
 800b22c:	4630      	mov	r0, r6
 800b22e:	f7ff fd11 	bl	800ac54 <_Balloc>
 800b232:	4602      	mov	r2, r0
 800b234:	b928      	cbnz	r0, 800b242 <__mdiff+0x2e>
 800b236:	4b3f      	ldr	r3, [pc, #252]	@ (800b334 <__mdiff+0x120>)
 800b238:	f240 2137 	movw	r1, #567	@ 0x237
 800b23c:	483e      	ldr	r0, [pc, #248]	@ (800b338 <__mdiff+0x124>)
 800b23e:	f000 fd7b 	bl	800bd38 <__assert_func>
 800b242:	2301      	movs	r3, #1
 800b244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b248:	4610      	mov	r0, r2
 800b24a:	b003      	add	sp, #12
 800b24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b250:	bfbc      	itt	lt
 800b252:	464b      	movlt	r3, r9
 800b254:	46a1      	movlt	r9, r4
 800b256:	4630      	mov	r0, r6
 800b258:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b25c:	bfba      	itte	lt
 800b25e:	461c      	movlt	r4, r3
 800b260:	2501      	movlt	r5, #1
 800b262:	2500      	movge	r5, #0
 800b264:	f7ff fcf6 	bl	800ac54 <_Balloc>
 800b268:	4602      	mov	r2, r0
 800b26a:	b918      	cbnz	r0, 800b274 <__mdiff+0x60>
 800b26c:	4b31      	ldr	r3, [pc, #196]	@ (800b334 <__mdiff+0x120>)
 800b26e:	f240 2145 	movw	r1, #581	@ 0x245
 800b272:	e7e3      	b.n	800b23c <__mdiff+0x28>
 800b274:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b278:	6926      	ldr	r6, [r4, #16]
 800b27a:	60c5      	str	r5, [r0, #12]
 800b27c:	f109 0310 	add.w	r3, r9, #16
 800b280:	f109 0514 	add.w	r5, r9, #20
 800b284:	f104 0e14 	add.w	lr, r4, #20
 800b288:	f100 0b14 	add.w	fp, r0, #20
 800b28c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b290:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b294:	9301      	str	r3, [sp, #4]
 800b296:	46d9      	mov	r9, fp
 800b298:	f04f 0c00 	mov.w	ip, #0
 800b29c:	9b01      	ldr	r3, [sp, #4]
 800b29e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2a6:	9301      	str	r3, [sp, #4]
 800b2a8:	fa1f f38a 	uxth.w	r3, sl
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	b283      	uxth	r3, r0
 800b2b0:	1acb      	subs	r3, r1, r3
 800b2b2:	0c00      	lsrs	r0, r0, #16
 800b2b4:	4463      	add	r3, ip
 800b2b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2c4:	4576      	cmp	r6, lr
 800b2c6:	f849 3b04 	str.w	r3, [r9], #4
 800b2ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2ce:	d8e5      	bhi.n	800b29c <__mdiff+0x88>
 800b2d0:	1b33      	subs	r3, r6, r4
 800b2d2:	3b15      	subs	r3, #21
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	3415      	adds	r4, #21
 800b2da:	3304      	adds	r3, #4
 800b2dc:	42a6      	cmp	r6, r4
 800b2de:	bf38      	it	cc
 800b2e0:	2304      	movcc	r3, #4
 800b2e2:	441d      	add	r5, r3
 800b2e4:	445b      	add	r3, fp
 800b2e6:	461e      	mov	r6, r3
 800b2e8:	462c      	mov	r4, r5
 800b2ea:	4544      	cmp	r4, r8
 800b2ec:	d30e      	bcc.n	800b30c <__mdiff+0xf8>
 800b2ee:	f108 0103 	add.w	r1, r8, #3
 800b2f2:	1b49      	subs	r1, r1, r5
 800b2f4:	f021 0103 	bic.w	r1, r1, #3
 800b2f8:	3d03      	subs	r5, #3
 800b2fa:	45a8      	cmp	r8, r5
 800b2fc:	bf38      	it	cc
 800b2fe:	2100      	movcc	r1, #0
 800b300:	440b      	add	r3, r1
 800b302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b306:	b191      	cbz	r1, 800b32e <__mdiff+0x11a>
 800b308:	6117      	str	r7, [r2, #16]
 800b30a:	e79d      	b.n	800b248 <__mdiff+0x34>
 800b30c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b310:	46e6      	mov	lr, ip
 800b312:	0c08      	lsrs	r0, r1, #16
 800b314:	fa1c fc81 	uxtah	ip, ip, r1
 800b318:	4471      	add	r1, lr
 800b31a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b31e:	b289      	uxth	r1, r1
 800b320:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b324:	f846 1b04 	str.w	r1, [r6], #4
 800b328:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b32c:	e7dd      	b.n	800b2ea <__mdiff+0xd6>
 800b32e:	3f01      	subs	r7, #1
 800b330:	e7e7      	b.n	800b302 <__mdiff+0xee>
 800b332:	bf00      	nop
 800b334:	0800c6c1 	.word	0x0800c6c1
 800b338:	0800c749 	.word	0x0800c749

0800b33c <__ulp>:
 800b33c:	b082      	sub	sp, #8
 800b33e:	ed8d 0b00 	vstr	d0, [sp]
 800b342:	9a01      	ldr	r2, [sp, #4]
 800b344:	4b0f      	ldr	r3, [pc, #60]	@ (800b384 <__ulp+0x48>)
 800b346:	4013      	ands	r3, r2
 800b348:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dc08      	bgt.n	800b362 <__ulp+0x26>
 800b350:	425b      	negs	r3, r3
 800b352:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b356:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b35a:	da04      	bge.n	800b366 <__ulp+0x2a>
 800b35c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b360:	4113      	asrs	r3, r2
 800b362:	2200      	movs	r2, #0
 800b364:	e008      	b.n	800b378 <__ulp+0x3c>
 800b366:	f1a2 0314 	sub.w	r3, r2, #20
 800b36a:	2b1e      	cmp	r3, #30
 800b36c:	bfda      	itte	le
 800b36e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b372:	40da      	lsrle	r2, r3
 800b374:	2201      	movgt	r2, #1
 800b376:	2300      	movs	r3, #0
 800b378:	4619      	mov	r1, r3
 800b37a:	4610      	mov	r0, r2
 800b37c:	ec41 0b10 	vmov	d0, r0, r1
 800b380:	b002      	add	sp, #8
 800b382:	4770      	bx	lr
 800b384:	7ff00000 	.word	0x7ff00000

0800b388 <__b2d>:
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	6906      	ldr	r6, [r0, #16]
 800b38e:	f100 0814 	add.w	r8, r0, #20
 800b392:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b396:	1f37      	subs	r7, r6, #4
 800b398:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b39c:	4610      	mov	r0, r2
 800b39e:	f7ff fd4b 	bl	800ae38 <__hi0bits>
 800b3a2:	f1c0 0320 	rsb	r3, r0, #32
 800b3a6:	280a      	cmp	r0, #10
 800b3a8:	600b      	str	r3, [r1, #0]
 800b3aa:	491b      	ldr	r1, [pc, #108]	@ (800b418 <__b2d+0x90>)
 800b3ac:	dc15      	bgt.n	800b3da <__b2d+0x52>
 800b3ae:	f1c0 0c0b 	rsb	ip, r0, #11
 800b3b2:	fa22 f30c 	lsr.w	r3, r2, ip
 800b3b6:	45b8      	cmp	r8, r7
 800b3b8:	ea43 0501 	orr.w	r5, r3, r1
 800b3bc:	bf34      	ite	cc
 800b3be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3c2:	2300      	movcs	r3, #0
 800b3c4:	3015      	adds	r0, #21
 800b3c6:	fa02 f000 	lsl.w	r0, r2, r0
 800b3ca:	fa23 f30c 	lsr.w	r3, r3, ip
 800b3ce:	4303      	orrs	r3, r0
 800b3d0:	461c      	mov	r4, r3
 800b3d2:	ec45 4b10 	vmov	d0, r4, r5
 800b3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3da:	45b8      	cmp	r8, r7
 800b3dc:	bf3a      	itte	cc
 800b3de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3e2:	f1a6 0708 	subcc.w	r7, r6, #8
 800b3e6:	2300      	movcs	r3, #0
 800b3e8:	380b      	subs	r0, #11
 800b3ea:	d012      	beq.n	800b412 <__b2d+0x8a>
 800b3ec:	f1c0 0120 	rsb	r1, r0, #32
 800b3f0:	fa23 f401 	lsr.w	r4, r3, r1
 800b3f4:	4082      	lsls	r2, r0
 800b3f6:	4322      	orrs	r2, r4
 800b3f8:	4547      	cmp	r7, r8
 800b3fa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b3fe:	bf8c      	ite	hi
 800b400:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b404:	2200      	movls	r2, #0
 800b406:	4083      	lsls	r3, r0
 800b408:	40ca      	lsrs	r2, r1
 800b40a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b40e:	4313      	orrs	r3, r2
 800b410:	e7de      	b.n	800b3d0 <__b2d+0x48>
 800b412:	ea42 0501 	orr.w	r5, r2, r1
 800b416:	e7db      	b.n	800b3d0 <__b2d+0x48>
 800b418:	3ff00000 	.word	0x3ff00000

0800b41c <__d2b>:
 800b41c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b420:	460f      	mov	r7, r1
 800b422:	2101      	movs	r1, #1
 800b424:	ec59 8b10 	vmov	r8, r9, d0
 800b428:	4616      	mov	r6, r2
 800b42a:	f7ff fc13 	bl	800ac54 <_Balloc>
 800b42e:	4604      	mov	r4, r0
 800b430:	b930      	cbnz	r0, 800b440 <__d2b+0x24>
 800b432:	4602      	mov	r2, r0
 800b434:	4b23      	ldr	r3, [pc, #140]	@ (800b4c4 <__d2b+0xa8>)
 800b436:	4824      	ldr	r0, [pc, #144]	@ (800b4c8 <__d2b+0xac>)
 800b438:	f240 310f 	movw	r1, #783	@ 0x30f
 800b43c:	f000 fc7c 	bl	800bd38 <__assert_func>
 800b440:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b448:	b10d      	cbz	r5, 800b44e <__d2b+0x32>
 800b44a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	f1b8 0300 	subs.w	r3, r8, #0
 800b454:	d023      	beq.n	800b49e <__d2b+0x82>
 800b456:	4668      	mov	r0, sp
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	f7ff fd0c 	bl	800ae76 <__lo0bits>
 800b45e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b462:	b1d0      	cbz	r0, 800b49a <__d2b+0x7e>
 800b464:	f1c0 0320 	rsb	r3, r0, #32
 800b468:	fa02 f303 	lsl.w	r3, r2, r3
 800b46c:	430b      	orrs	r3, r1
 800b46e:	40c2      	lsrs	r2, r0
 800b470:	6163      	str	r3, [r4, #20]
 800b472:	9201      	str	r2, [sp, #4]
 800b474:	9b01      	ldr	r3, [sp, #4]
 800b476:	61a3      	str	r3, [r4, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	bf0c      	ite	eq
 800b47c:	2201      	moveq	r2, #1
 800b47e:	2202      	movne	r2, #2
 800b480:	6122      	str	r2, [r4, #16]
 800b482:	b1a5      	cbz	r5, 800b4ae <__d2b+0x92>
 800b484:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b488:	4405      	add	r5, r0
 800b48a:	603d      	str	r5, [r7, #0]
 800b48c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b490:	6030      	str	r0, [r6, #0]
 800b492:	4620      	mov	r0, r4
 800b494:	b003      	add	sp, #12
 800b496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b49a:	6161      	str	r1, [r4, #20]
 800b49c:	e7ea      	b.n	800b474 <__d2b+0x58>
 800b49e:	a801      	add	r0, sp, #4
 800b4a0:	f7ff fce9 	bl	800ae76 <__lo0bits>
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	6163      	str	r3, [r4, #20]
 800b4a8:	3020      	adds	r0, #32
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	e7e8      	b.n	800b480 <__d2b+0x64>
 800b4ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4b6:	6038      	str	r0, [r7, #0]
 800b4b8:	6918      	ldr	r0, [r3, #16]
 800b4ba:	f7ff fcbd 	bl	800ae38 <__hi0bits>
 800b4be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4c2:	e7e5      	b.n	800b490 <__d2b+0x74>
 800b4c4:	0800c6c1 	.word	0x0800c6c1
 800b4c8:	0800c749 	.word	0x0800c749

0800b4cc <__ratio>:
 800b4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	e9cd 1000 	strd	r1, r0, [sp]
 800b4d6:	a902      	add	r1, sp, #8
 800b4d8:	f7ff ff56 	bl	800b388 <__b2d>
 800b4dc:	9800      	ldr	r0, [sp, #0]
 800b4de:	a903      	add	r1, sp, #12
 800b4e0:	ec55 4b10 	vmov	r4, r5, d0
 800b4e4:	f7ff ff50 	bl	800b388 <__b2d>
 800b4e8:	9b01      	ldr	r3, [sp, #4]
 800b4ea:	6919      	ldr	r1, [r3, #16]
 800b4ec:	9b00      	ldr	r3, [sp, #0]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	1ac9      	subs	r1, r1, r3
 800b4f2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b4f6:	1a9b      	subs	r3, r3, r2
 800b4f8:	ec5b ab10 	vmov	sl, fp, d0
 800b4fc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b500:	2b00      	cmp	r3, #0
 800b502:	bfce      	itee	gt
 800b504:	462a      	movgt	r2, r5
 800b506:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b50a:	465a      	movle	r2, fp
 800b50c:	462f      	mov	r7, r5
 800b50e:	46d9      	mov	r9, fp
 800b510:	bfcc      	ite	gt
 800b512:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b516:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b51a:	464b      	mov	r3, r9
 800b51c:	4652      	mov	r2, sl
 800b51e:	4620      	mov	r0, r4
 800b520:	4639      	mov	r1, r7
 800b522:	f7f5 f9c3 	bl	80008ac <__aeabi_ddiv>
 800b526:	ec41 0b10 	vmov	d0, r0, r1
 800b52a:	b005      	add	sp, #20
 800b52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b530 <__copybits>:
 800b530:	3901      	subs	r1, #1
 800b532:	b570      	push	{r4, r5, r6, lr}
 800b534:	1149      	asrs	r1, r1, #5
 800b536:	6914      	ldr	r4, [r2, #16]
 800b538:	3101      	adds	r1, #1
 800b53a:	f102 0314 	add.w	r3, r2, #20
 800b53e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b542:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b546:	1f05      	subs	r5, r0, #4
 800b548:	42a3      	cmp	r3, r4
 800b54a:	d30c      	bcc.n	800b566 <__copybits+0x36>
 800b54c:	1aa3      	subs	r3, r4, r2
 800b54e:	3b11      	subs	r3, #17
 800b550:	f023 0303 	bic.w	r3, r3, #3
 800b554:	3211      	adds	r2, #17
 800b556:	42a2      	cmp	r2, r4
 800b558:	bf88      	it	hi
 800b55a:	2300      	movhi	r3, #0
 800b55c:	4418      	add	r0, r3
 800b55e:	2300      	movs	r3, #0
 800b560:	4288      	cmp	r0, r1
 800b562:	d305      	bcc.n	800b570 <__copybits+0x40>
 800b564:	bd70      	pop	{r4, r5, r6, pc}
 800b566:	f853 6b04 	ldr.w	r6, [r3], #4
 800b56a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b56e:	e7eb      	b.n	800b548 <__copybits+0x18>
 800b570:	f840 3b04 	str.w	r3, [r0], #4
 800b574:	e7f4      	b.n	800b560 <__copybits+0x30>

0800b576 <__any_on>:
 800b576:	f100 0214 	add.w	r2, r0, #20
 800b57a:	6900      	ldr	r0, [r0, #16]
 800b57c:	114b      	asrs	r3, r1, #5
 800b57e:	4298      	cmp	r0, r3
 800b580:	b510      	push	{r4, lr}
 800b582:	db11      	blt.n	800b5a8 <__any_on+0x32>
 800b584:	dd0a      	ble.n	800b59c <__any_on+0x26>
 800b586:	f011 011f 	ands.w	r1, r1, #31
 800b58a:	d007      	beq.n	800b59c <__any_on+0x26>
 800b58c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b590:	fa24 f001 	lsr.w	r0, r4, r1
 800b594:	fa00 f101 	lsl.w	r1, r0, r1
 800b598:	428c      	cmp	r4, r1
 800b59a:	d10b      	bne.n	800b5b4 <__any_on+0x3e>
 800b59c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d803      	bhi.n	800b5ac <__any_on+0x36>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	bd10      	pop	{r4, pc}
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	e7f7      	b.n	800b59c <__any_on+0x26>
 800b5ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5b0:	2900      	cmp	r1, #0
 800b5b2:	d0f5      	beq.n	800b5a0 <__any_on+0x2a>
 800b5b4:	2001      	movs	r0, #1
 800b5b6:	e7f6      	b.n	800b5a6 <__any_on+0x30>

0800b5b8 <_malloc_usable_size_r>:
 800b5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5bc:	1f18      	subs	r0, r3, #4
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	bfbc      	itt	lt
 800b5c2:	580b      	ldrlt	r3, [r1, r0]
 800b5c4:	18c0      	addlt	r0, r0, r3
 800b5c6:	4770      	bx	lr

0800b5c8 <__ascii_wctomb>:
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	4608      	mov	r0, r1
 800b5cc:	b141      	cbz	r1, 800b5e0 <__ascii_wctomb+0x18>
 800b5ce:	2aff      	cmp	r2, #255	@ 0xff
 800b5d0:	d904      	bls.n	800b5dc <__ascii_wctomb+0x14>
 800b5d2:	228a      	movs	r2, #138	@ 0x8a
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5da:	4770      	bx	lr
 800b5dc:	700a      	strb	r2, [r1, #0]
 800b5de:	2001      	movs	r0, #1
 800b5e0:	4770      	bx	lr

0800b5e2 <__ssputs_r>:
 800b5e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e6:	688e      	ldr	r6, [r1, #8]
 800b5e8:	461f      	mov	r7, r3
 800b5ea:	42be      	cmp	r6, r7
 800b5ec:	680b      	ldr	r3, [r1, #0]
 800b5ee:	4682      	mov	sl, r0
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	4690      	mov	r8, r2
 800b5f4:	d82d      	bhi.n	800b652 <__ssputs_r+0x70>
 800b5f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b5fe:	d026      	beq.n	800b64e <__ssputs_r+0x6c>
 800b600:	6965      	ldr	r5, [r4, #20]
 800b602:	6909      	ldr	r1, [r1, #16]
 800b604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b608:	eba3 0901 	sub.w	r9, r3, r1
 800b60c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b610:	1c7b      	adds	r3, r7, #1
 800b612:	444b      	add	r3, r9
 800b614:	106d      	asrs	r5, r5, #1
 800b616:	429d      	cmp	r5, r3
 800b618:	bf38      	it	cc
 800b61a:	461d      	movcc	r5, r3
 800b61c:	0553      	lsls	r3, r2, #21
 800b61e:	d527      	bpl.n	800b670 <__ssputs_r+0x8e>
 800b620:	4629      	mov	r1, r5
 800b622:	f7fd fe6b 	bl	80092fc <_malloc_r>
 800b626:	4606      	mov	r6, r0
 800b628:	b360      	cbz	r0, 800b684 <__ssputs_r+0xa2>
 800b62a:	6921      	ldr	r1, [r4, #16]
 800b62c:	464a      	mov	r2, r9
 800b62e:	f7fe ff64 	bl	800a4fa <memcpy>
 800b632:	89a3      	ldrh	r3, [r4, #12]
 800b634:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b63c:	81a3      	strh	r3, [r4, #12]
 800b63e:	6126      	str	r6, [r4, #16]
 800b640:	6165      	str	r5, [r4, #20]
 800b642:	444e      	add	r6, r9
 800b644:	eba5 0509 	sub.w	r5, r5, r9
 800b648:	6026      	str	r6, [r4, #0]
 800b64a:	60a5      	str	r5, [r4, #8]
 800b64c:	463e      	mov	r6, r7
 800b64e:	42be      	cmp	r6, r7
 800b650:	d900      	bls.n	800b654 <__ssputs_r+0x72>
 800b652:	463e      	mov	r6, r7
 800b654:	6820      	ldr	r0, [r4, #0]
 800b656:	4632      	mov	r2, r6
 800b658:	4641      	mov	r1, r8
 800b65a:	f000 fb53 	bl	800bd04 <memmove>
 800b65e:	68a3      	ldr	r3, [r4, #8]
 800b660:	1b9b      	subs	r3, r3, r6
 800b662:	60a3      	str	r3, [r4, #8]
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	4433      	add	r3, r6
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	2000      	movs	r0, #0
 800b66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b670:	462a      	mov	r2, r5
 800b672:	f7fd fed7 	bl	8009424 <_realloc_r>
 800b676:	4606      	mov	r6, r0
 800b678:	2800      	cmp	r0, #0
 800b67a:	d1e0      	bne.n	800b63e <__ssputs_r+0x5c>
 800b67c:	6921      	ldr	r1, [r4, #16]
 800b67e:	4650      	mov	r0, sl
 800b680:	f7fe ff52 	bl	800a528 <_free_r>
 800b684:	230c      	movs	r3, #12
 800b686:	f8ca 3000 	str.w	r3, [sl]
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	f04f 30ff 	mov.w	r0, #4294967295
 800b696:	e7e9      	b.n	800b66c <__ssputs_r+0x8a>

0800b698 <_svfiprintf_r>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	4698      	mov	r8, r3
 800b69e:	898b      	ldrh	r3, [r1, #12]
 800b6a0:	061b      	lsls	r3, r3, #24
 800b6a2:	b09d      	sub	sp, #116	@ 0x74
 800b6a4:	4607      	mov	r7, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	4614      	mov	r4, r2
 800b6aa:	d510      	bpl.n	800b6ce <_svfiprintf_r+0x36>
 800b6ac:	690b      	ldr	r3, [r1, #16]
 800b6ae:	b973      	cbnz	r3, 800b6ce <_svfiprintf_r+0x36>
 800b6b0:	2140      	movs	r1, #64	@ 0x40
 800b6b2:	f7fd fe23 	bl	80092fc <_malloc_r>
 800b6b6:	6028      	str	r0, [r5, #0]
 800b6b8:	6128      	str	r0, [r5, #16]
 800b6ba:	b930      	cbnz	r0, 800b6ca <_svfiprintf_r+0x32>
 800b6bc:	230c      	movs	r3, #12
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c4:	b01d      	add	sp, #116	@ 0x74
 800b6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ca:	2340      	movs	r3, #64	@ 0x40
 800b6cc:	616b      	str	r3, [r5, #20]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d2:	2320      	movs	r3, #32
 800b6d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6dc:	2330      	movs	r3, #48	@ 0x30
 800b6de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b87c <_svfiprintf_r+0x1e4>
 800b6e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6e6:	f04f 0901 	mov.w	r9, #1
 800b6ea:	4623      	mov	r3, r4
 800b6ec:	469a      	mov	sl, r3
 800b6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6f2:	b10a      	cbz	r2, 800b6f8 <_svfiprintf_r+0x60>
 800b6f4:	2a25      	cmp	r2, #37	@ 0x25
 800b6f6:	d1f9      	bne.n	800b6ec <_svfiprintf_r+0x54>
 800b6f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b6fc:	d00b      	beq.n	800b716 <_svfiprintf_r+0x7e>
 800b6fe:	465b      	mov	r3, fp
 800b700:	4622      	mov	r2, r4
 800b702:	4629      	mov	r1, r5
 800b704:	4638      	mov	r0, r7
 800b706:	f7ff ff6c 	bl	800b5e2 <__ssputs_r>
 800b70a:	3001      	adds	r0, #1
 800b70c:	f000 80a7 	beq.w	800b85e <_svfiprintf_r+0x1c6>
 800b710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b712:	445a      	add	r2, fp
 800b714:	9209      	str	r2, [sp, #36]	@ 0x24
 800b716:	f89a 3000 	ldrb.w	r3, [sl]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 809f 	beq.w	800b85e <_svfiprintf_r+0x1c6>
 800b720:	2300      	movs	r3, #0
 800b722:	f04f 32ff 	mov.w	r2, #4294967295
 800b726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b72a:	f10a 0a01 	add.w	sl, sl, #1
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	9307      	str	r3, [sp, #28]
 800b732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b736:	931a      	str	r3, [sp, #104]	@ 0x68
 800b738:	4654      	mov	r4, sl
 800b73a:	2205      	movs	r2, #5
 800b73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b740:	484e      	ldr	r0, [pc, #312]	@ (800b87c <_svfiprintf_r+0x1e4>)
 800b742:	f7f4 fd7d 	bl	8000240 <memchr>
 800b746:	9a04      	ldr	r2, [sp, #16]
 800b748:	b9d8      	cbnz	r0, 800b782 <_svfiprintf_r+0xea>
 800b74a:	06d0      	lsls	r0, r2, #27
 800b74c:	bf44      	itt	mi
 800b74e:	2320      	movmi	r3, #32
 800b750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b754:	0711      	lsls	r1, r2, #28
 800b756:	bf44      	itt	mi
 800b758:	232b      	movmi	r3, #43	@ 0x2b
 800b75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b75e:	f89a 3000 	ldrb.w	r3, [sl]
 800b762:	2b2a      	cmp	r3, #42	@ 0x2a
 800b764:	d015      	beq.n	800b792 <_svfiprintf_r+0xfa>
 800b766:	9a07      	ldr	r2, [sp, #28]
 800b768:	4654      	mov	r4, sl
 800b76a:	2000      	movs	r0, #0
 800b76c:	f04f 0c0a 	mov.w	ip, #10
 800b770:	4621      	mov	r1, r4
 800b772:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b776:	3b30      	subs	r3, #48	@ 0x30
 800b778:	2b09      	cmp	r3, #9
 800b77a:	d94b      	bls.n	800b814 <_svfiprintf_r+0x17c>
 800b77c:	b1b0      	cbz	r0, 800b7ac <_svfiprintf_r+0x114>
 800b77e:	9207      	str	r2, [sp, #28]
 800b780:	e014      	b.n	800b7ac <_svfiprintf_r+0x114>
 800b782:	eba0 0308 	sub.w	r3, r0, r8
 800b786:	fa09 f303 	lsl.w	r3, r9, r3
 800b78a:	4313      	orrs	r3, r2
 800b78c:	9304      	str	r3, [sp, #16]
 800b78e:	46a2      	mov	sl, r4
 800b790:	e7d2      	b.n	800b738 <_svfiprintf_r+0xa0>
 800b792:	9b03      	ldr	r3, [sp, #12]
 800b794:	1d19      	adds	r1, r3, #4
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	9103      	str	r1, [sp, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	bfbb      	ittet	lt
 800b79e:	425b      	neglt	r3, r3
 800b7a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b7a4:	9307      	strge	r3, [sp, #28]
 800b7a6:	9307      	strlt	r3, [sp, #28]
 800b7a8:	bfb8      	it	lt
 800b7aa:	9204      	strlt	r2, [sp, #16]
 800b7ac:	7823      	ldrb	r3, [r4, #0]
 800b7ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7b0:	d10a      	bne.n	800b7c8 <_svfiprintf_r+0x130>
 800b7b2:	7863      	ldrb	r3, [r4, #1]
 800b7b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7b6:	d132      	bne.n	800b81e <_svfiprintf_r+0x186>
 800b7b8:	9b03      	ldr	r3, [sp, #12]
 800b7ba:	1d1a      	adds	r2, r3, #4
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	9203      	str	r2, [sp, #12]
 800b7c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7c4:	3402      	adds	r4, #2
 800b7c6:	9305      	str	r3, [sp, #20]
 800b7c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b88c <_svfiprintf_r+0x1f4>
 800b7cc:	7821      	ldrb	r1, [r4, #0]
 800b7ce:	2203      	movs	r2, #3
 800b7d0:	4650      	mov	r0, sl
 800b7d2:	f7f4 fd35 	bl	8000240 <memchr>
 800b7d6:	b138      	cbz	r0, 800b7e8 <_svfiprintf_r+0x150>
 800b7d8:	9b04      	ldr	r3, [sp, #16]
 800b7da:	eba0 000a 	sub.w	r0, r0, sl
 800b7de:	2240      	movs	r2, #64	@ 0x40
 800b7e0:	4082      	lsls	r2, r0
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	3401      	adds	r4, #1
 800b7e6:	9304      	str	r3, [sp, #16]
 800b7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ec:	4824      	ldr	r0, [pc, #144]	@ (800b880 <_svfiprintf_r+0x1e8>)
 800b7ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7f2:	2206      	movs	r2, #6
 800b7f4:	f7f4 fd24 	bl	8000240 <memchr>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d036      	beq.n	800b86a <_svfiprintf_r+0x1d2>
 800b7fc:	4b21      	ldr	r3, [pc, #132]	@ (800b884 <_svfiprintf_r+0x1ec>)
 800b7fe:	bb1b      	cbnz	r3, 800b848 <_svfiprintf_r+0x1b0>
 800b800:	9b03      	ldr	r3, [sp, #12]
 800b802:	3307      	adds	r3, #7
 800b804:	f023 0307 	bic.w	r3, r3, #7
 800b808:	3308      	adds	r3, #8
 800b80a:	9303      	str	r3, [sp, #12]
 800b80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b80e:	4433      	add	r3, r6
 800b810:	9309      	str	r3, [sp, #36]	@ 0x24
 800b812:	e76a      	b.n	800b6ea <_svfiprintf_r+0x52>
 800b814:	fb0c 3202 	mla	r2, ip, r2, r3
 800b818:	460c      	mov	r4, r1
 800b81a:	2001      	movs	r0, #1
 800b81c:	e7a8      	b.n	800b770 <_svfiprintf_r+0xd8>
 800b81e:	2300      	movs	r3, #0
 800b820:	3401      	adds	r4, #1
 800b822:	9305      	str	r3, [sp, #20]
 800b824:	4619      	mov	r1, r3
 800b826:	f04f 0c0a 	mov.w	ip, #10
 800b82a:	4620      	mov	r0, r4
 800b82c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b830:	3a30      	subs	r2, #48	@ 0x30
 800b832:	2a09      	cmp	r2, #9
 800b834:	d903      	bls.n	800b83e <_svfiprintf_r+0x1a6>
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0c6      	beq.n	800b7c8 <_svfiprintf_r+0x130>
 800b83a:	9105      	str	r1, [sp, #20]
 800b83c:	e7c4      	b.n	800b7c8 <_svfiprintf_r+0x130>
 800b83e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b842:	4604      	mov	r4, r0
 800b844:	2301      	movs	r3, #1
 800b846:	e7f0      	b.n	800b82a <_svfiprintf_r+0x192>
 800b848:	ab03      	add	r3, sp, #12
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	462a      	mov	r2, r5
 800b84e:	4b0e      	ldr	r3, [pc, #56]	@ (800b888 <_svfiprintf_r+0x1f0>)
 800b850:	a904      	add	r1, sp, #16
 800b852:	4638      	mov	r0, r7
 800b854:	f3af 8000 	nop.w
 800b858:	1c42      	adds	r2, r0, #1
 800b85a:	4606      	mov	r6, r0
 800b85c:	d1d6      	bne.n	800b80c <_svfiprintf_r+0x174>
 800b85e:	89ab      	ldrh	r3, [r5, #12]
 800b860:	065b      	lsls	r3, r3, #25
 800b862:	f53f af2d 	bmi.w	800b6c0 <_svfiprintf_r+0x28>
 800b866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b868:	e72c      	b.n	800b6c4 <_svfiprintf_r+0x2c>
 800b86a:	ab03      	add	r3, sp, #12
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	462a      	mov	r2, r5
 800b870:	4b05      	ldr	r3, [pc, #20]	@ (800b888 <_svfiprintf_r+0x1f0>)
 800b872:	a904      	add	r1, sp, #16
 800b874:	4638      	mov	r0, r7
 800b876:	f000 f879 	bl	800b96c <_printf_i>
 800b87a:	e7ed      	b.n	800b858 <_svfiprintf_r+0x1c0>
 800b87c:	0800c8a0 	.word	0x0800c8a0
 800b880:	0800c8aa 	.word	0x0800c8aa
 800b884:	00000000 	.word	0x00000000
 800b888:	0800b5e3 	.word	0x0800b5e3
 800b88c:	0800c8a6 	.word	0x0800c8a6

0800b890 <_printf_common>:
 800b890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b894:	4616      	mov	r6, r2
 800b896:	4698      	mov	r8, r3
 800b898:	688a      	ldr	r2, [r1, #8]
 800b89a:	690b      	ldr	r3, [r1, #16]
 800b89c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	bfb8      	it	lt
 800b8a4:	4613      	movlt	r3, r2
 800b8a6:	6033      	str	r3, [r6, #0]
 800b8a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	b10a      	cbz	r2, 800b8b6 <_printf_common+0x26>
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	6033      	str	r3, [r6, #0]
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	0699      	lsls	r1, r3, #26
 800b8ba:	bf42      	ittt	mi
 800b8bc:	6833      	ldrmi	r3, [r6, #0]
 800b8be:	3302      	addmi	r3, #2
 800b8c0:	6033      	strmi	r3, [r6, #0]
 800b8c2:	6825      	ldr	r5, [r4, #0]
 800b8c4:	f015 0506 	ands.w	r5, r5, #6
 800b8c8:	d106      	bne.n	800b8d8 <_printf_common+0x48>
 800b8ca:	f104 0a19 	add.w	sl, r4, #25
 800b8ce:	68e3      	ldr	r3, [r4, #12]
 800b8d0:	6832      	ldr	r2, [r6, #0]
 800b8d2:	1a9b      	subs	r3, r3, r2
 800b8d4:	42ab      	cmp	r3, r5
 800b8d6:	dc26      	bgt.n	800b926 <_printf_common+0x96>
 800b8d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b8dc:	6822      	ldr	r2, [r4, #0]
 800b8de:	3b00      	subs	r3, #0
 800b8e0:	bf18      	it	ne
 800b8e2:	2301      	movne	r3, #1
 800b8e4:	0692      	lsls	r2, r2, #26
 800b8e6:	d42b      	bmi.n	800b940 <_printf_common+0xb0>
 800b8e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b8ec:	4641      	mov	r1, r8
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	47c8      	blx	r9
 800b8f2:	3001      	adds	r0, #1
 800b8f4:	d01e      	beq.n	800b934 <_printf_common+0xa4>
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	6922      	ldr	r2, [r4, #16]
 800b8fa:	f003 0306 	and.w	r3, r3, #6
 800b8fe:	2b04      	cmp	r3, #4
 800b900:	bf02      	ittt	eq
 800b902:	68e5      	ldreq	r5, [r4, #12]
 800b904:	6833      	ldreq	r3, [r6, #0]
 800b906:	1aed      	subeq	r5, r5, r3
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	bf0c      	ite	eq
 800b90c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b910:	2500      	movne	r5, #0
 800b912:	4293      	cmp	r3, r2
 800b914:	bfc4      	itt	gt
 800b916:	1a9b      	subgt	r3, r3, r2
 800b918:	18ed      	addgt	r5, r5, r3
 800b91a:	2600      	movs	r6, #0
 800b91c:	341a      	adds	r4, #26
 800b91e:	42b5      	cmp	r5, r6
 800b920:	d11a      	bne.n	800b958 <_printf_common+0xc8>
 800b922:	2000      	movs	r0, #0
 800b924:	e008      	b.n	800b938 <_printf_common+0xa8>
 800b926:	2301      	movs	r3, #1
 800b928:	4652      	mov	r2, sl
 800b92a:	4641      	mov	r1, r8
 800b92c:	4638      	mov	r0, r7
 800b92e:	47c8      	blx	r9
 800b930:	3001      	adds	r0, #1
 800b932:	d103      	bne.n	800b93c <_printf_common+0xac>
 800b934:	f04f 30ff 	mov.w	r0, #4294967295
 800b938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b93c:	3501      	adds	r5, #1
 800b93e:	e7c6      	b.n	800b8ce <_printf_common+0x3e>
 800b940:	18e1      	adds	r1, r4, r3
 800b942:	1c5a      	adds	r2, r3, #1
 800b944:	2030      	movs	r0, #48	@ 0x30
 800b946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b94a:	4422      	add	r2, r4
 800b94c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b954:	3302      	adds	r3, #2
 800b956:	e7c7      	b.n	800b8e8 <_printf_common+0x58>
 800b958:	2301      	movs	r3, #1
 800b95a:	4622      	mov	r2, r4
 800b95c:	4641      	mov	r1, r8
 800b95e:	4638      	mov	r0, r7
 800b960:	47c8      	blx	r9
 800b962:	3001      	adds	r0, #1
 800b964:	d0e6      	beq.n	800b934 <_printf_common+0xa4>
 800b966:	3601      	adds	r6, #1
 800b968:	e7d9      	b.n	800b91e <_printf_common+0x8e>
	...

0800b96c <_printf_i>:
 800b96c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b970:	7e0f      	ldrb	r7, [r1, #24]
 800b972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b974:	2f78      	cmp	r7, #120	@ 0x78
 800b976:	4691      	mov	r9, r2
 800b978:	4680      	mov	r8, r0
 800b97a:	460c      	mov	r4, r1
 800b97c:	469a      	mov	sl, r3
 800b97e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b982:	d807      	bhi.n	800b994 <_printf_i+0x28>
 800b984:	2f62      	cmp	r7, #98	@ 0x62
 800b986:	d80a      	bhi.n	800b99e <_printf_i+0x32>
 800b988:	2f00      	cmp	r7, #0
 800b98a:	f000 80d2 	beq.w	800bb32 <_printf_i+0x1c6>
 800b98e:	2f58      	cmp	r7, #88	@ 0x58
 800b990:	f000 80b9 	beq.w	800bb06 <_printf_i+0x19a>
 800b994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b99c:	e03a      	b.n	800ba14 <_printf_i+0xa8>
 800b99e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b9a2:	2b15      	cmp	r3, #21
 800b9a4:	d8f6      	bhi.n	800b994 <_printf_i+0x28>
 800b9a6:	a101      	add	r1, pc, #4	@ (adr r1, 800b9ac <_printf_i+0x40>)
 800b9a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9ac:	0800ba05 	.word	0x0800ba05
 800b9b0:	0800ba19 	.word	0x0800ba19
 800b9b4:	0800b995 	.word	0x0800b995
 800b9b8:	0800b995 	.word	0x0800b995
 800b9bc:	0800b995 	.word	0x0800b995
 800b9c0:	0800b995 	.word	0x0800b995
 800b9c4:	0800ba19 	.word	0x0800ba19
 800b9c8:	0800b995 	.word	0x0800b995
 800b9cc:	0800b995 	.word	0x0800b995
 800b9d0:	0800b995 	.word	0x0800b995
 800b9d4:	0800b995 	.word	0x0800b995
 800b9d8:	0800bb19 	.word	0x0800bb19
 800b9dc:	0800ba43 	.word	0x0800ba43
 800b9e0:	0800bad3 	.word	0x0800bad3
 800b9e4:	0800b995 	.word	0x0800b995
 800b9e8:	0800b995 	.word	0x0800b995
 800b9ec:	0800bb3b 	.word	0x0800bb3b
 800b9f0:	0800b995 	.word	0x0800b995
 800b9f4:	0800ba43 	.word	0x0800ba43
 800b9f8:	0800b995 	.word	0x0800b995
 800b9fc:	0800b995 	.word	0x0800b995
 800ba00:	0800badb 	.word	0x0800badb
 800ba04:	6833      	ldr	r3, [r6, #0]
 800ba06:	1d1a      	adds	r2, r3, #4
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	6032      	str	r2, [r6, #0]
 800ba0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba14:	2301      	movs	r3, #1
 800ba16:	e09d      	b.n	800bb54 <_printf_i+0x1e8>
 800ba18:	6833      	ldr	r3, [r6, #0]
 800ba1a:	6820      	ldr	r0, [r4, #0]
 800ba1c:	1d19      	adds	r1, r3, #4
 800ba1e:	6031      	str	r1, [r6, #0]
 800ba20:	0606      	lsls	r6, r0, #24
 800ba22:	d501      	bpl.n	800ba28 <_printf_i+0xbc>
 800ba24:	681d      	ldr	r5, [r3, #0]
 800ba26:	e003      	b.n	800ba30 <_printf_i+0xc4>
 800ba28:	0645      	lsls	r5, r0, #25
 800ba2a:	d5fb      	bpl.n	800ba24 <_printf_i+0xb8>
 800ba2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba30:	2d00      	cmp	r5, #0
 800ba32:	da03      	bge.n	800ba3c <_printf_i+0xd0>
 800ba34:	232d      	movs	r3, #45	@ 0x2d
 800ba36:	426d      	negs	r5, r5
 800ba38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba3c:	4859      	ldr	r0, [pc, #356]	@ (800bba4 <_printf_i+0x238>)
 800ba3e:	230a      	movs	r3, #10
 800ba40:	e011      	b.n	800ba66 <_printf_i+0xfa>
 800ba42:	6821      	ldr	r1, [r4, #0]
 800ba44:	6833      	ldr	r3, [r6, #0]
 800ba46:	0608      	lsls	r0, r1, #24
 800ba48:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba4c:	d402      	bmi.n	800ba54 <_printf_i+0xe8>
 800ba4e:	0649      	lsls	r1, r1, #25
 800ba50:	bf48      	it	mi
 800ba52:	b2ad      	uxthmi	r5, r5
 800ba54:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba56:	4853      	ldr	r0, [pc, #332]	@ (800bba4 <_printf_i+0x238>)
 800ba58:	6033      	str	r3, [r6, #0]
 800ba5a:	bf14      	ite	ne
 800ba5c:	230a      	movne	r3, #10
 800ba5e:	2308      	moveq	r3, #8
 800ba60:	2100      	movs	r1, #0
 800ba62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba66:	6866      	ldr	r6, [r4, #4]
 800ba68:	60a6      	str	r6, [r4, #8]
 800ba6a:	2e00      	cmp	r6, #0
 800ba6c:	bfa2      	ittt	ge
 800ba6e:	6821      	ldrge	r1, [r4, #0]
 800ba70:	f021 0104 	bicge.w	r1, r1, #4
 800ba74:	6021      	strge	r1, [r4, #0]
 800ba76:	b90d      	cbnz	r5, 800ba7c <_printf_i+0x110>
 800ba78:	2e00      	cmp	r6, #0
 800ba7a:	d04b      	beq.n	800bb14 <_printf_i+0x1a8>
 800ba7c:	4616      	mov	r6, r2
 800ba7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba82:	fb03 5711 	mls	r7, r3, r1, r5
 800ba86:	5dc7      	ldrb	r7, [r0, r7]
 800ba88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba8c:	462f      	mov	r7, r5
 800ba8e:	42bb      	cmp	r3, r7
 800ba90:	460d      	mov	r5, r1
 800ba92:	d9f4      	bls.n	800ba7e <_printf_i+0x112>
 800ba94:	2b08      	cmp	r3, #8
 800ba96:	d10b      	bne.n	800bab0 <_printf_i+0x144>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	07df      	lsls	r7, r3, #31
 800ba9c:	d508      	bpl.n	800bab0 <_printf_i+0x144>
 800ba9e:	6923      	ldr	r3, [r4, #16]
 800baa0:	6861      	ldr	r1, [r4, #4]
 800baa2:	4299      	cmp	r1, r3
 800baa4:	bfde      	ittt	le
 800baa6:	2330      	movle	r3, #48	@ 0x30
 800baa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800baac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bab0:	1b92      	subs	r2, r2, r6
 800bab2:	6122      	str	r2, [r4, #16]
 800bab4:	f8cd a000 	str.w	sl, [sp]
 800bab8:	464b      	mov	r3, r9
 800baba:	aa03      	add	r2, sp, #12
 800babc:	4621      	mov	r1, r4
 800babe:	4640      	mov	r0, r8
 800bac0:	f7ff fee6 	bl	800b890 <_printf_common>
 800bac4:	3001      	adds	r0, #1
 800bac6:	d14a      	bne.n	800bb5e <_printf_i+0x1f2>
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	b004      	add	sp, #16
 800bace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	f043 0320 	orr.w	r3, r3, #32
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	4833      	ldr	r0, [pc, #204]	@ (800bba8 <_printf_i+0x23c>)
 800badc:	2778      	movs	r7, #120	@ 0x78
 800bade:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	6831      	ldr	r1, [r6, #0]
 800bae6:	061f      	lsls	r7, r3, #24
 800bae8:	f851 5b04 	ldr.w	r5, [r1], #4
 800baec:	d402      	bmi.n	800baf4 <_printf_i+0x188>
 800baee:	065f      	lsls	r7, r3, #25
 800baf0:	bf48      	it	mi
 800baf2:	b2ad      	uxthmi	r5, r5
 800baf4:	6031      	str	r1, [r6, #0]
 800baf6:	07d9      	lsls	r1, r3, #31
 800baf8:	bf44      	itt	mi
 800bafa:	f043 0320 	orrmi.w	r3, r3, #32
 800bafe:	6023      	strmi	r3, [r4, #0]
 800bb00:	b11d      	cbz	r5, 800bb0a <_printf_i+0x19e>
 800bb02:	2310      	movs	r3, #16
 800bb04:	e7ac      	b.n	800ba60 <_printf_i+0xf4>
 800bb06:	4827      	ldr	r0, [pc, #156]	@ (800bba4 <_printf_i+0x238>)
 800bb08:	e7e9      	b.n	800bade <_printf_i+0x172>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	f023 0320 	bic.w	r3, r3, #32
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	e7f6      	b.n	800bb02 <_printf_i+0x196>
 800bb14:	4616      	mov	r6, r2
 800bb16:	e7bd      	b.n	800ba94 <_printf_i+0x128>
 800bb18:	6833      	ldr	r3, [r6, #0]
 800bb1a:	6825      	ldr	r5, [r4, #0]
 800bb1c:	6961      	ldr	r1, [r4, #20]
 800bb1e:	1d18      	adds	r0, r3, #4
 800bb20:	6030      	str	r0, [r6, #0]
 800bb22:	062e      	lsls	r6, r5, #24
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	d501      	bpl.n	800bb2c <_printf_i+0x1c0>
 800bb28:	6019      	str	r1, [r3, #0]
 800bb2a:	e002      	b.n	800bb32 <_printf_i+0x1c6>
 800bb2c:	0668      	lsls	r0, r5, #25
 800bb2e:	d5fb      	bpl.n	800bb28 <_printf_i+0x1bc>
 800bb30:	8019      	strh	r1, [r3, #0]
 800bb32:	2300      	movs	r3, #0
 800bb34:	6123      	str	r3, [r4, #16]
 800bb36:	4616      	mov	r6, r2
 800bb38:	e7bc      	b.n	800bab4 <_printf_i+0x148>
 800bb3a:	6833      	ldr	r3, [r6, #0]
 800bb3c:	1d1a      	adds	r2, r3, #4
 800bb3e:	6032      	str	r2, [r6, #0]
 800bb40:	681e      	ldr	r6, [r3, #0]
 800bb42:	6862      	ldr	r2, [r4, #4]
 800bb44:	2100      	movs	r1, #0
 800bb46:	4630      	mov	r0, r6
 800bb48:	f7f4 fb7a 	bl	8000240 <memchr>
 800bb4c:	b108      	cbz	r0, 800bb52 <_printf_i+0x1e6>
 800bb4e:	1b80      	subs	r0, r0, r6
 800bb50:	6060      	str	r0, [r4, #4]
 800bb52:	6863      	ldr	r3, [r4, #4]
 800bb54:	6123      	str	r3, [r4, #16]
 800bb56:	2300      	movs	r3, #0
 800bb58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb5c:	e7aa      	b.n	800bab4 <_printf_i+0x148>
 800bb5e:	6923      	ldr	r3, [r4, #16]
 800bb60:	4632      	mov	r2, r6
 800bb62:	4649      	mov	r1, r9
 800bb64:	4640      	mov	r0, r8
 800bb66:	47d0      	blx	sl
 800bb68:	3001      	adds	r0, #1
 800bb6a:	d0ad      	beq.n	800bac8 <_printf_i+0x15c>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	079b      	lsls	r3, r3, #30
 800bb70:	d413      	bmi.n	800bb9a <_printf_i+0x22e>
 800bb72:	68e0      	ldr	r0, [r4, #12]
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	4298      	cmp	r0, r3
 800bb78:	bfb8      	it	lt
 800bb7a:	4618      	movlt	r0, r3
 800bb7c:	e7a6      	b.n	800bacc <_printf_i+0x160>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	4632      	mov	r2, r6
 800bb82:	4649      	mov	r1, r9
 800bb84:	4640      	mov	r0, r8
 800bb86:	47d0      	blx	sl
 800bb88:	3001      	adds	r0, #1
 800bb8a:	d09d      	beq.n	800bac8 <_printf_i+0x15c>
 800bb8c:	3501      	adds	r5, #1
 800bb8e:	68e3      	ldr	r3, [r4, #12]
 800bb90:	9903      	ldr	r1, [sp, #12]
 800bb92:	1a5b      	subs	r3, r3, r1
 800bb94:	42ab      	cmp	r3, r5
 800bb96:	dcf2      	bgt.n	800bb7e <_printf_i+0x212>
 800bb98:	e7eb      	b.n	800bb72 <_printf_i+0x206>
 800bb9a:	2500      	movs	r5, #0
 800bb9c:	f104 0619 	add.w	r6, r4, #25
 800bba0:	e7f5      	b.n	800bb8e <_printf_i+0x222>
 800bba2:	bf00      	nop
 800bba4:	0800c8b1 	.word	0x0800c8b1
 800bba8:	0800c8c2 	.word	0x0800c8c2

0800bbac <__sflush_r>:
 800bbac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb4:	0716      	lsls	r6, r2, #28
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	460c      	mov	r4, r1
 800bbba:	d454      	bmi.n	800bc66 <__sflush_r+0xba>
 800bbbc:	684b      	ldr	r3, [r1, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dc02      	bgt.n	800bbc8 <__sflush_r+0x1c>
 800bbc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	dd48      	ble.n	800bc5a <__sflush_r+0xae>
 800bbc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbca:	2e00      	cmp	r6, #0
 800bbcc:	d045      	beq.n	800bc5a <__sflush_r+0xae>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bbd4:	682f      	ldr	r7, [r5, #0]
 800bbd6:	6a21      	ldr	r1, [r4, #32]
 800bbd8:	602b      	str	r3, [r5, #0]
 800bbda:	d030      	beq.n	800bc3e <__sflush_r+0x92>
 800bbdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	0759      	lsls	r1, r3, #29
 800bbe2:	d505      	bpl.n	800bbf0 <__sflush_r+0x44>
 800bbe4:	6863      	ldr	r3, [r4, #4]
 800bbe6:	1ad2      	subs	r2, r2, r3
 800bbe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bbea:	b10b      	cbz	r3, 800bbf0 <__sflush_r+0x44>
 800bbec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bbee:	1ad2      	subs	r2, r2, r3
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbf4:	6a21      	ldr	r1, [r4, #32]
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	47b0      	blx	r6
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	d106      	bne.n	800bc0e <__sflush_r+0x62>
 800bc00:	6829      	ldr	r1, [r5, #0]
 800bc02:	291d      	cmp	r1, #29
 800bc04:	d82b      	bhi.n	800bc5e <__sflush_r+0xb2>
 800bc06:	4a2a      	ldr	r2, [pc, #168]	@ (800bcb0 <__sflush_r+0x104>)
 800bc08:	410a      	asrs	r2, r1
 800bc0a:	07d6      	lsls	r6, r2, #31
 800bc0c:	d427      	bmi.n	800bc5e <__sflush_r+0xb2>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	6062      	str	r2, [r4, #4]
 800bc12:	04d9      	lsls	r1, r3, #19
 800bc14:	6922      	ldr	r2, [r4, #16]
 800bc16:	6022      	str	r2, [r4, #0]
 800bc18:	d504      	bpl.n	800bc24 <__sflush_r+0x78>
 800bc1a:	1c42      	adds	r2, r0, #1
 800bc1c:	d101      	bne.n	800bc22 <__sflush_r+0x76>
 800bc1e:	682b      	ldr	r3, [r5, #0]
 800bc20:	b903      	cbnz	r3, 800bc24 <__sflush_r+0x78>
 800bc22:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc26:	602f      	str	r7, [r5, #0]
 800bc28:	b1b9      	cbz	r1, 800bc5a <__sflush_r+0xae>
 800bc2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc2e:	4299      	cmp	r1, r3
 800bc30:	d002      	beq.n	800bc38 <__sflush_r+0x8c>
 800bc32:	4628      	mov	r0, r5
 800bc34:	f7fe fc78 	bl	800a528 <_free_r>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc3c:	e00d      	b.n	800bc5a <__sflush_r+0xae>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	4628      	mov	r0, r5
 800bc42:	47b0      	blx	r6
 800bc44:	4602      	mov	r2, r0
 800bc46:	1c50      	adds	r0, r2, #1
 800bc48:	d1c9      	bne.n	800bbde <__sflush_r+0x32>
 800bc4a:	682b      	ldr	r3, [r5, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0c6      	beq.n	800bbde <__sflush_r+0x32>
 800bc50:	2b1d      	cmp	r3, #29
 800bc52:	d001      	beq.n	800bc58 <__sflush_r+0xac>
 800bc54:	2b16      	cmp	r3, #22
 800bc56:	d11e      	bne.n	800bc96 <__sflush_r+0xea>
 800bc58:	602f      	str	r7, [r5, #0]
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	e022      	b.n	800bca4 <__sflush_r+0xf8>
 800bc5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc62:	b21b      	sxth	r3, r3
 800bc64:	e01b      	b.n	800bc9e <__sflush_r+0xf2>
 800bc66:	690f      	ldr	r7, [r1, #16]
 800bc68:	2f00      	cmp	r7, #0
 800bc6a:	d0f6      	beq.n	800bc5a <__sflush_r+0xae>
 800bc6c:	0793      	lsls	r3, r2, #30
 800bc6e:	680e      	ldr	r6, [r1, #0]
 800bc70:	bf08      	it	eq
 800bc72:	694b      	ldreq	r3, [r1, #20]
 800bc74:	600f      	str	r7, [r1, #0]
 800bc76:	bf18      	it	ne
 800bc78:	2300      	movne	r3, #0
 800bc7a:	eba6 0807 	sub.w	r8, r6, r7
 800bc7e:	608b      	str	r3, [r1, #8]
 800bc80:	f1b8 0f00 	cmp.w	r8, #0
 800bc84:	dde9      	ble.n	800bc5a <__sflush_r+0xae>
 800bc86:	6a21      	ldr	r1, [r4, #32]
 800bc88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc8a:	4643      	mov	r3, r8
 800bc8c:	463a      	mov	r2, r7
 800bc8e:	4628      	mov	r0, r5
 800bc90:	47b0      	blx	r6
 800bc92:	2800      	cmp	r0, #0
 800bc94:	dc08      	bgt.n	800bca8 <__sflush_r+0xfc>
 800bc96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc9e:	81a3      	strh	r3, [r4, #12]
 800bca0:	f04f 30ff 	mov.w	r0, #4294967295
 800bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca8:	4407      	add	r7, r0
 800bcaa:	eba8 0800 	sub.w	r8, r8, r0
 800bcae:	e7e7      	b.n	800bc80 <__sflush_r+0xd4>
 800bcb0:	dfbffffe 	.word	0xdfbffffe

0800bcb4 <_fflush_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	690b      	ldr	r3, [r1, #16]
 800bcb8:	4605      	mov	r5, r0
 800bcba:	460c      	mov	r4, r1
 800bcbc:	b913      	cbnz	r3, 800bcc4 <_fflush_r+0x10>
 800bcbe:	2500      	movs	r5, #0
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	b118      	cbz	r0, 800bcce <_fflush_r+0x1a>
 800bcc6:	6a03      	ldr	r3, [r0, #32]
 800bcc8:	b90b      	cbnz	r3, 800bcce <_fflush_r+0x1a>
 800bcca:	f7fe fa75 	bl	800a1b8 <__sinit>
 800bcce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0f3      	beq.n	800bcbe <_fflush_r+0xa>
 800bcd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bcd8:	07d0      	lsls	r0, r2, #31
 800bcda:	d404      	bmi.n	800bce6 <_fflush_r+0x32>
 800bcdc:	0599      	lsls	r1, r3, #22
 800bcde:	d402      	bmi.n	800bce6 <_fflush_r+0x32>
 800bce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bce2:	f7fe fc08 	bl	800a4f6 <__retarget_lock_acquire_recursive>
 800bce6:	4628      	mov	r0, r5
 800bce8:	4621      	mov	r1, r4
 800bcea:	f7ff ff5f 	bl	800bbac <__sflush_r>
 800bcee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcf0:	07da      	lsls	r2, r3, #31
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	d4e4      	bmi.n	800bcc0 <_fflush_r+0xc>
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	059b      	lsls	r3, r3, #22
 800bcfa:	d4e1      	bmi.n	800bcc0 <_fflush_r+0xc>
 800bcfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcfe:	f7fe fbfb 	bl	800a4f8 <__retarget_lock_release_recursive>
 800bd02:	e7dd      	b.n	800bcc0 <_fflush_r+0xc>

0800bd04 <memmove>:
 800bd04:	4288      	cmp	r0, r1
 800bd06:	b510      	push	{r4, lr}
 800bd08:	eb01 0402 	add.w	r4, r1, r2
 800bd0c:	d902      	bls.n	800bd14 <memmove+0x10>
 800bd0e:	4284      	cmp	r4, r0
 800bd10:	4623      	mov	r3, r4
 800bd12:	d807      	bhi.n	800bd24 <memmove+0x20>
 800bd14:	1e43      	subs	r3, r0, #1
 800bd16:	42a1      	cmp	r1, r4
 800bd18:	d008      	beq.n	800bd2c <memmove+0x28>
 800bd1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd22:	e7f8      	b.n	800bd16 <memmove+0x12>
 800bd24:	4402      	add	r2, r0
 800bd26:	4601      	mov	r1, r0
 800bd28:	428a      	cmp	r2, r1
 800bd2a:	d100      	bne.n	800bd2e <memmove+0x2a>
 800bd2c:	bd10      	pop	{r4, pc}
 800bd2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd36:	e7f7      	b.n	800bd28 <memmove+0x24>

0800bd38 <__assert_func>:
 800bd38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4b09      	ldr	r3, [pc, #36]	@ (800bd64 <__assert_func+0x2c>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4605      	mov	r5, r0
 800bd44:	68d8      	ldr	r0, [r3, #12]
 800bd46:	b954      	cbnz	r4, 800bd5e <__assert_func+0x26>
 800bd48:	4b07      	ldr	r3, [pc, #28]	@ (800bd68 <__assert_func+0x30>)
 800bd4a:	461c      	mov	r4, r3
 800bd4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd50:	9100      	str	r1, [sp, #0]
 800bd52:	462b      	mov	r3, r5
 800bd54:	4905      	ldr	r1, [pc, #20]	@ (800bd6c <__assert_func+0x34>)
 800bd56:	f000 f821 	bl	800bd9c <fiprintf>
 800bd5a:	f000 f831 	bl	800bdc0 <abort>
 800bd5e:	4b04      	ldr	r3, [pc, #16]	@ (800bd70 <__assert_func+0x38>)
 800bd60:	e7f4      	b.n	800bd4c <__assert_func+0x14>
 800bd62:	bf00      	nop
 800bd64:	20000194 	.word	0x20000194
 800bd68:	0800c90e 	.word	0x0800c90e
 800bd6c:	0800c8e0 	.word	0x0800c8e0
 800bd70:	0800c8d3 	.word	0x0800c8d3

0800bd74 <_calloc_r>:
 800bd74:	b570      	push	{r4, r5, r6, lr}
 800bd76:	fba1 5402 	umull	r5, r4, r1, r2
 800bd7a:	b93c      	cbnz	r4, 800bd8c <_calloc_r+0x18>
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	f7fd fabd 	bl	80092fc <_malloc_r>
 800bd82:	4606      	mov	r6, r0
 800bd84:	b928      	cbnz	r0, 800bd92 <_calloc_r+0x1e>
 800bd86:	2600      	movs	r6, #0
 800bd88:	4630      	mov	r0, r6
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}
 800bd8c:	220c      	movs	r2, #12
 800bd8e:	6002      	str	r2, [r0, #0]
 800bd90:	e7f9      	b.n	800bd86 <_calloc_r+0x12>
 800bd92:	462a      	mov	r2, r5
 800bd94:	4621      	mov	r1, r4
 800bd96:	f7fe fabc 	bl	800a312 <memset>
 800bd9a:	e7f5      	b.n	800bd88 <_calloc_r+0x14>

0800bd9c <fiprintf>:
 800bd9c:	b40e      	push	{r1, r2, r3}
 800bd9e:	b503      	push	{r0, r1, lr}
 800bda0:	4601      	mov	r1, r0
 800bda2:	ab03      	add	r3, sp, #12
 800bda4:	4805      	ldr	r0, [pc, #20]	@ (800bdbc <fiprintf+0x20>)
 800bda6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdaa:	6800      	ldr	r0, [r0, #0]
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	f000 f837 	bl	800be20 <_vfiprintf_r>
 800bdb2:	b002      	add	sp, #8
 800bdb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb8:	b003      	add	sp, #12
 800bdba:	4770      	bx	lr
 800bdbc:	20000194 	.word	0x20000194

0800bdc0 <abort>:
 800bdc0:	b508      	push	{r3, lr}
 800bdc2:	2006      	movs	r0, #6
 800bdc4:	f000 fa00 	bl	800c1c8 <raise>
 800bdc8:	2001      	movs	r0, #1
 800bdca:	f7f7 f8b9 	bl	8002f40 <_exit>

0800bdce <__sfputc_r>:
 800bdce:	6893      	ldr	r3, [r2, #8]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	b410      	push	{r4}
 800bdd6:	6093      	str	r3, [r2, #8]
 800bdd8:	da08      	bge.n	800bdec <__sfputc_r+0x1e>
 800bdda:	6994      	ldr	r4, [r2, #24]
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	db01      	blt.n	800bde4 <__sfputc_r+0x16>
 800bde0:	290a      	cmp	r1, #10
 800bde2:	d103      	bne.n	800bdec <__sfputc_r+0x1e>
 800bde4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bde8:	f000 b932 	b.w	800c050 <__swbuf_r>
 800bdec:	6813      	ldr	r3, [r2, #0]
 800bdee:	1c58      	adds	r0, r3, #1
 800bdf0:	6010      	str	r0, [r2, #0]
 800bdf2:	7019      	strb	r1, [r3, #0]
 800bdf4:	4608      	mov	r0, r1
 800bdf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <__sfputs_r>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	4606      	mov	r6, r0
 800be00:	460f      	mov	r7, r1
 800be02:	4614      	mov	r4, r2
 800be04:	18d5      	adds	r5, r2, r3
 800be06:	42ac      	cmp	r4, r5
 800be08:	d101      	bne.n	800be0e <__sfputs_r+0x12>
 800be0a:	2000      	movs	r0, #0
 800be0c:	e007      	b.n	800be1e <__sfputs_r+0x22>
 800be0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be12:	463a      	mov	r2, r7
 800be14:	4630      	mov	r0, r6
 800be16:	f7ff ffda 	bl	800bdce <__sfputc_r>
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d1f3      	bne.n	800be06 <__sfputs_r+0xa>
 800be1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be20 <_vfiprintf_r>:
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	460d      	mov	r5, r1
 800be26:	b09d      	sub	sp, #116	@ 0x74
 800be28:	4614      	mov	r4, r2
 800be2a:	4698      	mov	r8, r3
 800be2c:	4606      	mov	r6, r0
 800be2e:	b118      	cbz	r0, 800be38 <_vfiprintf_r+0x18>
 800be30:	6a03      	ldr	r3, [r0, #32]
 800be32:	b90b      	cbnz	r3, 800be38 <_vfiprintf_r+0x18>
 800be34:	f7fe f9c0 	bl	800a1b8 <__sinit>
 800be38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be3a:	07d9      	lsls	r1, r3, #31
 800be3c:	d405      	bmi.n	800be4a <_vfiprintf_r+0x2a>
 800be3e:	89ab      	ldrh	r3, [r5, #12]
 800be40:	059a      	lsls	r2, r3, #22
 800be42:	d402      	bmi.n	800be4a <_vfiprintf_r+0x2a>
 800be44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be46:	f7fe fb56 	bl	800a4f6 <__retarget_lock_acquire_recursive>
 800be4a:	89ab      	ldrh	r3, [r5, #12]
 800be4c:	071b      	lsls	r3, r3, #28
 800be4e:	d501      	bpl.n	800be54 <_vfiprintf_r+0x34>
 800be50:	692b      	ldr	r3, [r5, #16]
 800be52:	b99b      	cbnz	r3, 800be7c <_vfiprintf_r+0x5c>
 800be54:	4629      	mov	r1, r5
 800be56:	4630      	mov	r0, r6
 800be58:	f000 f938 	bl	800c0cc <__swsetup_r>
 800be5c:	b170      	cbz	r0, 800be7c <_vfiprintf_r+0x5c>
 800be5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be60:	07dc      	lsls	r4, r3, #31
 800be62:	d504      	bpl.n	800be6e <_vfiprintf_r+0x4e>
 800be64:	f04f 30ff 	mov.w	r0, #4294967295
 800be68:	b01d      	add	sp, #116	@ 0x74
 800be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6e:	89ab      	ldrh	r3, [r5, #12]
 800be70:	0598      	lsls	r0, r3, #22
 800be72:	d4f7      	bmi.n	800be64 <_vfiprintf_r+0x44>
 800be74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be76:	f7fe fb3f 	bl	800a4f8 <__retarget_lock_release_recursive>
 800be7a:	e7f3      	b.n	800be64 <_vfiprintf_r+0x44>
 800be7c:	2300      	movs	r3, #0
 800be7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be80:	2320      	movs	r3, #32
 800be82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be86:	f8cd 800c 	str.w	r8, [sp, #12]
 800be8a:	2330      	movs	r3, #48	@ 0x30
 800be8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c03c <_vfiprintf_r+0x21c>
 800be90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be94:	f04f 0901 	mov.w	r9, #1
 800be98:	4623      	mov	r3, r4
 800be9a:	469a      	mov	sl, r3
 800be9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bea0:	b10a      	cbz	r2, 800bea6 <_vfiprintf_r+0x86>
 800bea2:	2a25      	cmp	r2, #37	@ 0x25
 800bea4:	d1f9      	bne.n	800be9a <_vfiprintf_r+0x7a>
 800bea6:	ebba 0b04 	subs.w	fp, sl, r4
 800beaa:	d00b      	beq.n	800bec4 <_vfiprintf_r+0xa4>
 800beac:	465b      	mov	r3, fp
 800beae:	4622      	mov	r2, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7ff ffa2 	bl	800bdfc <__sfputs_r>
 800beb8:	3001      	adds	r0, #1
 800beba:	f000 80a7 	beq.w	800c00c <_vfiprintf_r+0x1ec>
 800bebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bec0:	445a      	add	r2, fp
 800bec2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bec4:	f89a 3000 	ldrb.w	r3, [sl]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 809f 	beq.w	800c00c <_vfiprintf_r+0x1ec>
 800bece:	2300      	movs	r3, #0
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295
 800bed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bed8:	f10a 0a01 	add.w	sl, sl, #1
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	9307      	str	r3, [sp, #28]
 800bee0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bee4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bee6:	4654      	mov	r4, sl
 800bee8:	2205      	movs	r2, #5
 800beea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beee:	4853      	ldr	r0, [pc, #332]	@ (800c03c <_vfiprintf_r+0x21c>)
 800bef0:	f7f4 f9a6 	bl	8000240 <memchr>
 800bef4:	9a04      	ldr	r2, [sp, #16]
 800bef6:	b9d8      	cbnz	r0, 800bf30 <_vfiprintf_r+0x110>
 800bef8:	06d1      	lsls	r1, r2, #27
 800befa:	bf44      	itt	mi
 800befc:	2320      	movmi	r3, #32
 800befe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf02:	0713      	lsls	r3, r2, #28
 800bf04:	bf44      	itt	mi
 800bf06:	232b      	movmi	r3, #43	@ 0x2b
 800bf08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf10:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf12:	d015      	beq.n	800bf40 <_vfiprintf_r+0x120>
 800bf14:	9a07      	ldr	r2, [sp, #28]
 800bf16:	4654      	mov	r4, sl
 800bf18:	2000      	movs	r0, #0
 800bf1a:	f04f 0c0a 	mov.w	ip, #10
 800bf1e:	4621      	mov	r1, r4
 800bf20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf24:	3b30      	subs	r3, #48	@ 0x30
 800bf26:	2b09      	cmp	r3, #9
 800bf28:	d94b      	bls.n	800bfc2 <_vfiprintf_r+0x1a2>
 800bf2a:	b1b0      	cbz	r0, 800bf5a <_vfiprintf_r+0x13a>
 800bf2c:	9207      	str	r2, [sp, #28]
 800bf2e:	e014      	b.n	800bf5a <_vfiprintf_r+0x13a>
 800bf30:	eba0 0308 	sub.w	r3, r0, r8
 800bf34:	fa09 f303 	lsl.w	r3, r9, r3
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	46a2      	mov	sl, r4
 800bf3e:	e7d2      	b.n	800bee6 <_vfiprintf_r+0xc6>
 800bf40:	9b03      	ldr	r3, [sp, #12]
 800bf42:	1d19      	adds	r1, r3, #4
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	9103      	str	r1, [sp, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	bfbb      	ittet	lt
 800bf4c:	425b      	neglt	r3, r3
 800bf4e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf52:	9307      	strge	r3, [sp, #28]
 800bf54:	9307      	strlt	r3, [sp, #28]
 800bf56:	bfb8      	it	lt
 800bf58:	9204      	strlt	r2, [sp, #16]
 800bf5a:	7823      	ldrb	r3, [r4, #0]
 800bf5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf5e:	d10a      	bne.n	800bf76 <_vfiprintf_r+0x156>
 800bf60:	7863      	ldrb	r3, [r4, #1]
 800bf62:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf64:	d132      	bne.n	800bfcc <_vfiprintf_r+0x1ac>
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	1d1a      	adds	r2, r3, #4
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	9203      	str	r2, [sp, #12]
 800bf6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf72:	3402      	adds	r4, #2
 800bf74:	9305      	str	r3, [sp, #20]
 800bf76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c04c <_vfiprintf_r+0x22c>
 800bf7a:	7821      	ldrb	r1, [r4, #0]
 800bf7c:	2203      	movs	r2, #3
 800bf7e:	4650      	mov	r0, sl
 800bf80:	f7f4 f95e 	bl	8000240 <memchr>
 800bf84:	b138      	cbz	r0, 800bf96 <_vfiprintf_r+0x176>
 800bf86:	9b04      	ldr	r3, [sp, #16]
 800bf88:	eba0 000a 	sub.w	r0, r0, sl
 800bf8c:	2240      	movs	r2, #64	@ 0x40
 800bf8e:	4082      	lsls	r2, r0
 800bf90:	4313      	orrs	r3, r2
 800bf92:	3401      	adds	r4, #1
 800bf94:	9304      	str	r3, [sp, #16]
 800bf96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9a:	4829      	ldr	r0, [pc, #164]	@ (800c040 <_vfiprintf_r+0x220>)
 800bf9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfa0:	2206      	movs	r2, #6
 800bfa2:	f7f4 f94d 	bl	8000240 <memchr>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d03f      	beq.n	800c02a <_vfiprintf_r+0x20a>
 800bfaa:	4b26      	ldr	r3, [pc, #152]	@ (800c044 <_vfiprintf_r+0x224>)
 800bfac:	bb1b      	cbnz	r3, 800bff6 <_vfiprintf_r+0x1d6>
 800bfae:	9b03      	ldr	r3, [sp, #12]
 800bfb0:	3307      	adds	r3, #7
 800bfb2:	f023 0307 	bic.w	r3, r3, #7
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	9303      	str	r3, [sp, #12]
 800bfba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfbc:	443b      	add	r3, r7
 800bfbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfc0:	e76a      	b.n	800be98 <_vfiprintf_r+0x78>
 800bfc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	2001      	movs	r0, #1
 800bfca:	e7a8      	b.n	800bf1e <_vfiprintf_r+0xfe>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	3401      	adds	r4, #1
 800bfd0:	9305      	str	r3, [sp, #20]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	f04f 0c0a 	mov.w	ip, #10
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfde:	3a30      	subs	r2, #48	@ 0x30
 800bfe0:	2a09      	cmp	r2, #9
 800bfe2:	d903      	bls.n	800bfec <_vfiprintf_r+0x1cc>
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0c6      	beq.n	800bf76 <_vfiprintf_r+0x156>
 800bfe8:	9105      	str	r1, [sp, #20]
 800bfea:	e7c4      	b.n	800bf76 <_vfiprintf_r+0x156>
 800bfec:	fb0c 2101 	mla	r1, ip, r1, r2
 800bff0:	4604      	mov	r4, r0
 800bff2:	2301      	movs	r3, #1
 800bff4:	e7f0      	b.n	800bfd8 <_vfiprintf_r+0x1b8>
 800bff6:	ab03      	add	r3, sp, #12
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	462a      	mov	r2, r5
 800bffc:	4b12      	ldr	r3, [pc, #72]	@ (800c048 <_vfiprintf_r+0x228>)
 800bffe:	a904      	add	r1, sp, #16
 800c000:	4630      	mov	r0, r6
 800c002:	f3af 8000 	nop.w
 800c006:	4607      	mov	r7, r0
 800c008:	1c78      	adds	r0, r7, #1
 800c00a:	d1d6      	bne.n	800bfba <_vfiprintf_r+0x19a>
 800c00c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c00e:	07d9      	lsls	r1, r3, #31
 800c010:	d405      	bmi.n	800c01e <_vfiprintf_r+0x1fe>
 800c012:	89ab      	ldrh	r3, [r5, #12]
 800c014:	059a      	lsls	r2, r3, #22
 800c016:	d402      	bmi.n	800c01e <_vfiprintf_r+0x1fe>
 800c018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c01a:	f7fe fa6d 	bl	800a4f8 <__retarget_lock_release_recursive>
 800c01e:	89ab      	ldrh	r3, [r5, #12]
 800c020:	065b      	lsls	r3, r3, #25
 800c022:	f53f af1f 	bmi.w	800be64 <_vfiprintf_r+0x44>
 800c026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c028:	e71e      	b.n	800be68 <_vfiprintf_r+0x48>
 800c02a:	ab03      	add	r3, sp, #12
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	462a      	mov	r2, r5
 800c030:	4b05      	ldr	r3, [pc, #20]	@ (800c048 <_vfiprintf_r+0x228>)
 800c032:	a904      	add	r1, sp, #16
 800c034:	4630      	mov	r0, r6
 800c036:	f7ff fc99 	bl	800b96c <_printf_i>
 800c03a:	e7e4      	b.n	800c006 <_vfiprintf_r+0x1e6>
 800c03c:	0800c8a0 	.word	0x0800c8a0
 800c040:	0800c8aa 	.word	0x0800c8aa
 800c044:	00000000 	.word	0x00000000
 800c048:	0800bdfd 	.word	0x0800bdfd
 800c04c:	0800c8a6 	.word	0x0800c8a6

0800c050 <__swbuf_r>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	460e      	mov	r6, r1
 800c054:	4614      	mov	r4, r2
 800c056:	4605      	mov	r5, r0
 800c058:	b118      	cbz	r0, 800c062 <__swbuf_r+0x12>
 800c05a:	6a03      	ldr	r3, [r0, #32]
 800c05c:	b90b      	cbnz	r3, 800c062 <__swbuf_r+0x12>
 800c05e:	f7fe f8ab 	bl	800a1b8 <__sinit>
 800c062:	69a3      	ldr	r3, [r4, #24]
 800c064:	60a3      	str	r3, [r4, #8]
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	071a      	lsls	r2, r3, #28
 800c06a:	d501      	bpl.n	800c070 <__swbuf_r+0x20>
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	b943      	cbnz	r3, 800c082 <__swbuf_r+0x32>
 800c070:	4621      	mov	r1, r4
 800c072:	4628      	mov	r0, r5
 800c074:	f000 f82a 	bl	800c0cc <__swsetup_r>
 800c078:	b118      	cbz	r0, 800c082 <__swbuf_r+0x32>
 800c07a:	f04f 37ff 	mov.w	r7, #4294967295
 800c07e:	4638      	mov	r0, r7
 800c080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	6922      	ldr	r2, [r4, #16]
 800c086:	1a98      	subs	r0, r3, r2
 800c088:	6963      	ldr	r3, [r4, #20]
 800c08a:	b2f6      	uxtb	r6, r6
 800c08c:	4283      	cmp	r3, r0
 800c08e:	4637      	mov	r7, r6
 800c090:	dc05      	bgt.n	800c09e <__swbuf_r+0x4e>
 800c092:	4621      	mov	r1, r4
 800c094:	4628      	mov	r0, r5
 800c096:	f7ff fe0d 	bl	800bcb4 <_fflush_r>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d1ed      	bne.n	800c07a <__swbuf_r+0x2a>
 800c09e:	68a3      	ldr	r3, [r4, #8]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	60a3      	str	r3, [r4, #8]
 800c0a4:	6823      	ldr	r3, [r4, #0]
 800c0a6:	1c5a      	adds	r2, r3, #1
 800c0a8:	6022      	str	r2, [r4, #0]
 800c0aa:	701e      	strb	r6, [r3, #0]
 800c0ac:	6962      	ldr	r2, [r4, #20]
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d004      	beq.n	800c0be <__swbuf_r+0x6e>
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	07db      	lsls	r3, r3, #31
 800c0b8:	d5e1      	bpl.n	800c07e <__swbuf_r+0x2e>
 800c0ba:	2e0a      	cmp	r6, #10
 800c0bc:	d1df      	bne.n	800c07e <__swbuf_r+0x2e>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f7ff fdf7 	bl	800bcb4 <_fflush_r>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	d0d9      	beq.n	800c07e <__swbuf_r+0x2e>
 800c0ca:	e7d6      	b.n	800c07a <__swbuf_r+0x2a>

0800c0cc <__swsetup_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4b29      	ldr	r3, [pc, #164]	@ (800c174 <__swsetup_r+0xa8>)
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	6818      	ldr	r0, [r3, #0]
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	b118      	cbz	r0, 800c0e0 <__swsetup_r+0x14>
 800c0d8:	6a03      	ldr	r3, [r0, #32]
 800c0da:	b90b      	cbnz	r3, 800c0e0 <__swsetup_r+0x14>
 800c0dc:	f7fe f86c 	bl	800a1b8 <__sinit>
 800c0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e4:	0719      	lsls	r1, r3, #28
 800c0e6:	d422      	bmi.n	800c12e <__swsetup_r+0x62>
 800c0e8:	06da      	lsls	r2, r3, #27
 800c0ea:	d407      	bmi.n	800c0fc <__swsetup_r+0x30>
 800c0ec:	2209      	movs	r2, #9
 800c0ee:	602a      	str	r2, [r5, #0]
 800c0f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0f4:	81a3      	strh	r3, [r4, #12]
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fa:	e033      	b.n	800c164 <__swsetup_r+0x98>
 800c0fc:	0758      	lsls	r0, r3, #29
 800c0fe:	d512      	bpl.n	800c126 <__swsetup_r+0x5a>
 800c100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c102:	b141      	cbz	r1, 800c116 <__swsetup_r+0x4a>
 800c104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c108:	4299      	cmp	r1, r3
 800c10a:	d002      	beq.n	800c112 <__swsetup_r+0x46>
 800c10c:	4628      	mov	r0, r5
 800c10e:	f7fe fa0b 	bl	800a528 <_free_r>
 800c112:	2300      	movs	r3, #0
 800c114:	6363      	str	r3, [r4, #52]	@ 0x34
 800c116:	89a3      	ldrh	r3, [r4, #12]
 800c118:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c11c:	81a3      	strh	r3, [r4, #12]
 800c11e:	2300      	movs	r3, #0
 800c120:	6063      	str	r3, [r4, #4]
 800c122:	6923      	ldr	r3, [r4, #16]
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	f043 0308 	orr.w	r3, r3, #8
 800c12c:	81a3      	strh	r3, [r4, #12]
 800c12e:	6923      	ldr	r3, [r4, #16]
 800c130:	b94b      	cbnz	r3, 800c146 <__swsetup_r+0x7a>
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c13c:	d003      	beq.n	800c146 <__swsetup_r+0x7a>
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f000 f883 	bl	800c24c <__smakebuf_r>
 800c146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c14a:	f013 0201 	ands.w	r2, r3, #1
 800c14e:	d00a      	beq.n	800c166 <__swsetup_r+0x9a>
 800c150:	2200      	movs	r2, #0
 800c152:	60a2      	str	r2, [r4, #8]
 800c154:	6962      	ldr	r2, [r4, #20]
 800c156:	4252      	negs	r2, r2
 800c158:	61a2      	str	r2, [r4, #24]
 800c15a:	6922      	ldr	r2, [r4, #16]
 800c15c:	b942      	cbnz	r2, 800c170 <__swsetup_r+0xa4>
 800c15e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c162:	d1c5      	bne.n	800c0f0 <__swsetup_r+0x24>
 800c164:	bd38      	pop	{r3, r4, r5, pc}
 800c166:	0799      	lsls	r1, r3, #30
 800c168:	bf58      	it	pl
 800c16a:	6962      	ldrpl	r2, [r4, #20]
 800c16c:	60a2      	str	r2, [r4, #8]
 800c16e:	e7f4      	b.n	800c15a <__swsetup_r+0x8e>
 800c170:	2000      	movs	r0, #0
 800c172:	e7f7      	b.n	800c164 <__swsetup_r+0x98>
 800c174:	20000194 	.word	0x20000194

0800c178 <_raise_r>:
 800c178:	291f      	cmp	r1, #31
 800c17a:	b538      	push	{r3, r4, r5, lr}
 800c17c:	4605      	mov	r5, r0
 800c17e:	460c      	mov	r4, r1
 800c180:	d904      	bls.n	800c18c <_raise_r+0x14>
 800c182:	2316      	movs	r3, #22
 800c184:	6003      	str	r3, [r0, #0]
 800c186:	f04f 30ff 	mov.w	r0, #4294967295
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c18e:	b112      	cbz	r2, 800c196 <_raise_r+0x1e>
 800c190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c194:	b94b      	cbnz	r3, 800c1aa <_raise_r+0x32>
 800c196:	4628      	mov	r0, r5
 800c198:	f000 f830 	bl	800c1fc <_getpid_r>
 800c19c:	4622      	mov	r2, r4
 800c19e:	4601      	mov	r1, r0
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1a6:	f000 b817 	b.w	800c1d8 <_kill_r>
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d00a      	beq.n	800c1c4 <_raise_r+0x4c>
 800c1ae:	1c59      	adds	r1, r3, #1
 800c1b0:	d103      	bne.n	800c1ba <_raise_r+0x42>
 800c1b2:	2316      	movs	r3, #22
 800c1b4:	6003      	str	r3, [r0, #0]
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e7e7      	b.n	800c18a <_raise_r+0x12>
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	4798      	blx	r3
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	e7e0      	b.n	800c18a <_raise_r+0x12>

0800c1c8 <raise>:
 800c1c8:	4b02      	ldr	r3, [pc, #8]	@ (800c1d4 <raise+0xc>)
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	6818      	ldr	r0, [r3, #0]
 800c1ce:	f7ff bfd3 	b.w	800c178 <_raise_r>
 800c1d2:	bf00      	nop
 800c1d4:	20000194 	.word	0x20000194

0800c1d8 <_kill_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4d07      	ldr	r5, [pc, #28]	@ (800c1f8 <_kill_r+0x20>)
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4604      	mov	r4, r0
 800c1e0:	4608      	mov	r0, r1
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	602b      	str	r3, [r5, #0]
 800c1e6:	f7f6 fe9b 	bl	8002f20 <_kill>
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	d102      	bne.n	800c1f4 <_kill_r+0x1c>
 800c1ee:	682b      	ldr	r3, [r5, #0]
 800c1f0:	b103      	cbz	r3, 800c1f4 <_kill_r+0x1c>
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	bd38      	pop	{r3, r4, r5, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200046c8 	.word	0x200046c8

0800c1fc <_getpid_r>:
 800c1fc:	f7f6 be88 	b.w	8002f10 <_getpid>

0800c200 <__swhatbuf_r>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	2900      	cmp	r1, #0
 800c20a:	b096      	sub	sp, #88	@ 0x58
 800c20c:	4615      	mov	r5, r2
 800c20e:	461e      	mov	r6, r3
 800c210:	da0d      	bge.n	800c22e <__swhatbuf_r+0x2e>
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c218:	f04f 0100 	mov.w	r1, #0
 800c21c:	bf14      	ite	ne
 800c21e:	2340      	movne	r3, #64	@ 0x40
 800c220:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c224:	2000      	movs	r0, #0
 800c226:	6031      	str	r1, [r6, #0]
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	b016      	add	sp, #88	@ 0x58
 800c22c:	bd70      	pop	{r4, r5, r6, pc}
 800c22e:	466a      	mov	r2, sp
 800c230:	f000 f848 	bl	800c2c4 <_fstat_r>
 800c234:	2800      	cmp	r0, #0
 800c236:	dbec      	blt.n	800c212 <__swhatbuf_r+0x12>
 800c238:	9901      	ldr	r1, [sp, #4]
 800c23a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c23e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c242:	4259      	negs	r1, r3
 800c244:	4159      	adcs	r1, r3
 800c246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c24a:	e7eb      	b.n	800c224 <__swhatbuf_r+0x24>

0800c24c <__smakebuf_r>:
 800c24c:	898b      	ldrh	r3, [r1, #12]
 800c24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c250:	079d      	lsls	r5, r3, #30
 800c252:	4606      	mov	r6, r0
 800c254:	460c      	mov	r4, r1
 800c256:	d507      	bpl.n	800c268 <__smakebuf_r+0x1c>
 800c258:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	6123      	str	r3, [r4, #16]
 800c260:	2301      	movs	r3, #1
 800c262:	6163      	str	r3, [r4, #20]
 800c264:	b003      	add	sp, #12
 800c266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c268:	ab01      	add	r3, sp, #4
 800c26a:	466a      	mov	r2, sp
 800c26c:	f7ff ffc8 	bl	800c200 <__swhatbuf_r>
 800c270:	9f00      	ldr	r7, [sp, #0]
 800c272:	4605      	mov	r5, r0
 800c274:	4639      	mov	r1, r7
 800c276:	4630      	mov	r0, r6
 800c278:	f7fd f840 	bl	80092fc <_malloc_r>
 800c27c:	b948      	cbnz	r0, 800c292 <__smakebuf_r+0x46>
 800c27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c282:	059a      	lsls	r2, r3, #22
 800c284:	d4ee      	bmi.n	800c264 <__smakebuf_r+0x18>
 800c286:	f023 0303 	bic.w	r3, r3, #3
 800c28a:	f043 0302 	orr.w	r3, r3, #2
 800c28e:	81a3      	strh	r3, [r4, #12]
 800c290:	e7e2      	b.n	800c258 <__smakebuf_r+0xc>
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	6020      	str	r0, [r4, #0]
 800c296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	9b01      	ldr	r3, [sp, #4]
 800c29e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c2a2:	b15b      	cbz	r3, 800c2bc <__smakebuf_r+0x70>
 800c2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f81d 	bl	800c2e8 <_isatty_r>
 800c2ae:	b128      	cbz	r0, 800c2bc <__smakebuf_r+0x70>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f023 0303 	bic.w	r3, r3, #3
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	431d      	orrs	r5, r3
 800c2c0:	81a5      	strh	r5, [r4, #12]
 800c2c2:	e7cf      	b.n	800c264 <__smakebuf_r+0x18>

0800c2c4 <_fstat_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d07      	ldr	r5, [pc, #28]	@ (800c2e4 <_fstat_r+0x20>)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	4611      	mov	r1, r2
 800c2d0:	602b      	str	r3, [r5, #0]
 800c2d2:	f7f6 fe85 	bl	8002fe0 <_fstat>
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	d102      	bne.n	800c2e0 <_fstat_r+0x1c>
 800c2da:	682b      	ldr	r3, [r5, #0]
 800c2dc:	b103      	cbz	r3, 800c2e0 <_fstat_r+0x1c>
 800c2de:	6023      	str	r3, [r4, #0]
 800c2e0:	bd38      	pop	{r3, r4, r5, pc}
 800c2e2:	bf00      	nop
 800c2e4:	200046c8 	.word	0x200046c8

0800c2e8 <_isatty_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d06      	ldr	r5, [pc, #24]	@ (800c304 <_isatty_r+0x1c>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f7f6 fe84 	bl	8003000 <_isatty>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_isatty_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_isatty_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	200046c8 	.word	0x200046c8

0800c308 <_init>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	bf00      	nop
 800c30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30e:	bc08      	pop	{r3}
 800c310:	469e      	mov	lr, r3
 800c312:	4770      	bx	lr

0800c314 <_fini>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	bf00      	nop
 800c318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31a:	bc08      	pop	{r3}
 800c31c:	469e      	mov	lr, r3
 800c31e:	4770      	bx	lr
