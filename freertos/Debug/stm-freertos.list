
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014754  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08014928  08014928  00015928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015038  08015038  00017484  2**0
                  CONTENTS
  4 .ARM          00000008  08015038  08015038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015040  08015040  00017484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015040  08015040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015044  08015044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000484  20000000  08015048  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053a4  20000484  080154cc  00017484  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005828  080154cc  00017828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017484  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c458  00000000  00000000  000174b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dbe  00000000  00000000  0004390c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e0  00000000  00000000  0004a6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc4  00000000  00000000  0004cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c472  00000000  00000000  0004e674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e766  00000000  00000000  0007aae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3b1f  00000000  00000000  000a924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019cd6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a96c  00000000  00000000  0019cdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001a771c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000484 	.word	0x20000484
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801490c 	.word	0x0801490c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000488 	.word	0x20000488
 800020c:	0801490c 	.word	0x0801490c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b9a0 	b.w	8001014 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f83c 	bl	8000d58 <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__aeabi_d2lz>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	f7ff ff21 	bl	8000b3c <__aeabi_dcmplt>
 8000cfa:	b928      	cbnz	r0, 8000d08 <__aeabi_d2lz+0x1c>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b80a 	b.w	8000d1c <__aeabi_d2ulz>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0e:	f000 f805 	bl	8000d1c <__aeabi_d2ulz>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	bf00      	nop

08000d1c <__aeabi_d2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__aeabi_d2ulz+0x34>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc97 	bl	8000658 <__aeabi_dmul>
 8000d2a:	f7ff ff57 	bl	8000bdc <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc18 	bl	8000564 <__aeabi_ui2d>
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <__aeabi_d2ulz+0x38>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f7ff fc8e 	bl	8000658 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff fad0 	bl	80002e8 <__aeabi_dsub>
 8000d48:	f7ff ff48 	bl	8000bdc <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <case_insensitive_strcmp+0x16>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800102e:	2301      	movs	r3, #1
 8001030:	e056      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d10d      	bne.n	8001056 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e050      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e04a      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3301      	adds	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3301      	adds	r3, #1
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d103      	bne.n	8001076 <case_insensitive_strcmp+0x5e>
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f103 0220 	add.w	r2, r3, #32
 8001074:	e000      	b.n	8001078 <case_insensitive_strcmp+0x60>
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	73bb      	strb	r3, [r7, #14]
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	491a      	ldr	r1, [pc, #104]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <case_insensitive_strcmp+0x7e>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	3320      	adds	r3, #32
 8001094:	e000      	b.n	8001098 <case_insensitive_strcmp+0x80>
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	429a      	cmp	r2, r3
 800109a:	d0d0      	beq.n	800103e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	737b      	strb	r3, [r7, #13]
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d103      	bne.n	80010bc <case_insensitive_strcmp+0xa4>
 80010b4:	7b7b      	ldrb	r3, [r7, #13]
 80010b6:	f103 0220 	add.w	r2, r3, #32
 80010ba:	e000      	b.n	80010be <case_insensitive_strcmp+0xa6>
 80010bc:	7b7a      	ldrb	r2, [r7, #13]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	733b      	strb	r3, [r7, #12]
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010ca:	440b      	add	r3, r1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <case_insensitive_strcmp+0xc4>
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	3320      	adds	r3, #32
 80010da:	e000      	b.n	80010de <case_insensitive_strcmp+0xc6>
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	08014ce0 	.word	0x08014ce0

080010f0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2028      	movs	r0, #40	@ 0x28
 80010fe:	4798      	blx	r3
 8001100:	60f8      	str	r0, [r7, #12]
    if (node)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001108:	2228      	movs	r2, #40	@ 0x28
 800110a:	2100      	movs	r1, #0
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f011 fc95 	bl	8012a3c <memset>
    }

    return node;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001128:	e03d      	b.n	80011a6 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d108      	bne.n	800114e <cJSON_Delete+0x32>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffe7 	bl	800111c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <cJSON_Delete+0x58>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <cJSON_Delete+0x9c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6912      	ldr	r2, [r2, #16]
 800116a:	4610      	mov	r0, r2
 800116c:	4798      	blx	r3
            item->valuestring = NULL;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10c      	bne.n	800119a <cJSON_Delete+0x7e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <cJSON_Delete+0x9c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6a12      	ldr	r2, [r2, #32]
 8001190:	4610      	mov	r0, r2
 8001192:	4798      	blx	r3
            item->string = NULL;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <cJSON_Delete+0x9c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	4798      	blx	r3
        item = next;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1be      	bne.n	800112a <cJSON_Delete+0xe>
    }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000

080011bc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80011c0:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	0000      	movs	r0, r0
	...

080011d0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b098      	sub	sp, #96	@ 0x60
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011ea:	f7ff ffe7 	bl	80011bc <get_decimal_point>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <parse_number+0x36>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <parse_number+0x3a>
    {
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e0a0      	b.n	800134c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800120e:	e03d      	b.n	800128c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6899      	ldr	r1, [r3, #8]
 8001218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800121a:	440b      	add	r3, r1
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b45      	cmp	r3, #69	@ 0x45
 8001222:	dc17      	bgt.n	8001254 <parse_number+0x84>
 8001224:	2b2b      	cmp	r3, #43	@ 0x2b
 8001226:	db40      	blt.n	80012aa <parse_number+0xda>
 8001228:	3b2b      	subs	r3, #43	@ 0x2b
 800122a:	2201      	movs	r2, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <parse_number+0x190>)
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <parse_number+0x88>
 8001240:	f002 0308 	and.w	r3, r2, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d111      	bne.n	8001276 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001252:	e02a      	b.n	80012aa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001254:	2b65      	cmp	r3, #101	@ 0x65
 8001256:	d128      	bne.n	80012aa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001262:	440b      	add	r3, r1
 8001264:	4413      	add	r3, r2
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
                break;
 8001274:	e007      	b.n	8001286 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800127c:	4413      	add	r3, r2
 800127e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001282:	701a      	strb	r2, [r3, #0]
                break;
 8001284:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001288:	3301      	adds	r3, #1
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800128c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001290:	d80d      	bhi.n	80012ae <parse_number+0xde>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <parse_number+0xde>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129e:	441a      	add	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3b3      	bcc.n	8001210 <parse_number+0x40>
        }
    }
loop_end:
 80012a8:	e001      	b.n	80012ae <parse_number+0xde>
                goto loop_end;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <parse_number+0xe0>
loop_end:
 80012ae:	bf00      	nop
    number_c_string[i] = '\0';
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80012bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f011 f96e 	bl	80125a8 <strtod>
 80012cc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80012d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d101      	bne.n	80012de <parse_number+0x10e>
    {
        return false; /* parse_error */
 80012da:	2300      	movs	r3, #0
 80012dc:	e036      	b.n	800134c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012e4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001358 <parse_number+0x188>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012f2:	f7ff fc37 	bl	8000b64 <__aeabi_dcmpge>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	e015      	b.n	8001332 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <parse_number+0x194>)
 800130c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001310:	f7ff fc1e 	bl	8000b50 <__aeabi_dcmple>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	e006      	b.n	8001332 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001324:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001328:	f7ff fc30 	bl	8000b8c <__aeabi_d2iz>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2208      	movs	r2, #8
 8001336:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800133e:	f107 0208 	add.w	r2, r7, #8
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	441a      	add	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	609a      	str	r2, [r3, #8]
    return true;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3760      	adds	r7, #96	@ 0x60
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	ffc00000 	.word	0xffc00000
 800135c:	41dfffff 	.word	0x41dfffff
 8001360:	04007fe5 	.word	0x04007fe5
 8001364:	c1e00000 	.word	0xc1e00000

08001368 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e04c      	b.n	8001418 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b2f      	cmp	r3, #47	@ 0x2f
 8001388:	d90f      	bls.n	80013aa <parse_hex4+0x42>
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b39      	cmp	r3, #57	@ 0x39
 8001394:	d809      	bhi.n	80013aa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b30      	subs	r3, #48	@ 0x30
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e02d      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b40      	cmp	r3, #64	@ 0x40
 80013b4:	d90f      	bls.n	80013d6 <parse_hex4+0x6e>
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b46      	cmp	r3, #70	@ 0x46
 80013c0:	d809      	bhi.n	80013d6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	3b37      	subs	r3, #55	@ 0x37
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e017      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b60      	cmp	r3, #96	@ 0x60
 80013e0:	d90f      	bls.n	8001402 <parse_hex4+0x9a>
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b66      	cmp	r3, #102	@ 0x66
 80013ec:	d809      	bhi.n	8001402 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	3b57      	subs	r3, #87	@ 0x57
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e001      	b.n	8001406 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001402:	2300      	movs	r3, #0
 8001404:	e00c      	b.n	8001420 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d802      	bhi.n	8001412 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d9af      	bls.n	800137e <parse_hex4+0x16>
        }
    }

    return h;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b05      	cmp	r3, #5
 8001464:	f340 80b7 	ble.w	80015d6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	3302      	adds	r3, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff7b 	bl	8001368 <parse_hex4>
 8001472:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800147a:	d304      	bcc.n	8001486 <utf16_literal_to_utf8+0x5a>
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001482:	f0c0 80aa 	bcc.w	80015da <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800148c:	d337      	bcc.n	80014fe <utf16_literal_to_utf8+0xd2>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001494:	d233      	bcs.n	80014fe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	3306      	adds	r3, #6
 800149a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80014a0:	230c      	movs	r3, #12
 80014a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	f340 8096 	ble.w	80015de <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80014b8:	f040 8093 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b75      	cmp	r3, #117	@ 0x75
 80014c4:	f040 808d 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3302      	adds	r3, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff4b 	bl	8001368 <parse_hex4>
 80014d2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80014da:	f0c0 8084 	bcc.w	80015e6 <utf16_literal_to_utf8+0x1ba>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80014e4:	d27f      	bcs.n	80015e6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	029a      	lsls	r2, r3, #10
 80014ea:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <utf16_literal_to_utf8+0x1cc>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 80014fc:	e004      	b.n	8001508 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014fe:	2306      	movs	r3, #6
 8001500:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	2b7f      	cmp	r3, #127	@ 0x7f
 800150c:	d803      	bhi.n	8001516 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001514:	e01f      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800151c:	d206      	bcs.n	800152c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001524:	23c0      	movs	r3, #192	@ 0xc0
 8001526:	f887 3020 	strb.w	r3, [r7, #32]
 800152a:	e014      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001532:	d206      	bcs.n	8001542 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001534:	2303      	movs	r3, #3
 8001536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800153a:	23e0      	movs	r3, #224	@ 0xe0
 800153c:	f887 3020 	strb.w	r3, [r7, #32]
 8001540:	e009      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001548:	d24f      	bcs.n	80015ea <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001550:	23f0      	movs	r3, #240	@ 0xf0
 8001552:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800155a:	3b01      	subs	r3, #1
 800155c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001560:	e015      	b.n	800158e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001574:	440b      	add	r3, r1
 8001576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001584:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001588:	3b01      	subs	r3, #1
 800158a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800158e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1e5      	bne.n	8001562 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800159a:	2b01      	cmp	r3, #1
 800159c:	d909      	bls.n	80015b2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	b2d9      	uxtb	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e007      	b.n	80015c2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ca:	441a      	add	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80015d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015d4:	e00b      	b.n	80015ee <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015d6:	bf00      	nop
 80015d8:	e008      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015da:	bf00      	nop
 80015dc:	e006      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015de:	bf00      	nop
 80015e0:	e004      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e2:	bf00      	nop
 80015e4:	e002      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e6:	bf00      	nop
 80015e8:	e000      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015ea:	bf00      	nop

fail:
    return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	000ffc00 	.word	0x000ffc00

080015fc <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b22      	cmp	r3, #34	@ 0x22
 8001638:	f040 8103 	bne.w	8001842 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001644:	e017      	b.n	8001676 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b5c      	cmp	r3, #92	@ 0x5c
 800164c:	d110      	bne.n	8001670 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	f080 80f1 	bcs.w	8001846 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	3301      	adds	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
                input_end++;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3301      	adds	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	461a      	mov	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d203      	bcs.n	8001690 <parse_string+0x94>
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b22      	cmp	r3, #34	@ 0x22
 800168e:	d1da      	bne.n	8001646 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	f080 80d3 	bcs.w	800184a <parse_string+0x24e>
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b22      	cmp	r3, #34	@ 0x22
 80016aa:	f040 80ce 	bne.w	800184a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	6a3a      	ldr	r2, [r7, #32]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	3201      	adds	r2, #1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4798      	blx	r3
 80016d0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ba 	beq.w	800184e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016de:	e094      	b.n	800180a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80016e6:	d008      	beq.n	80016fa <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	1c53      	adds	r3, r2, #1
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	60f9      	str	r1, [r7, #12]
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e087      	b.n	800180a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016fe:	6a3a      	ldr	r2, [r7, #32]
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f340 80a4 	ble.w	8001852 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b75      	cmp	r3, #117	@ 0x75
 8001712:	f300 80a0 	bgt.w	8001856 <parse_string+0x25a>
 8001716:	2b5c      	cmp	r3, #92	@ 0x5c
 8001718:	da04      	bge.n	8001724 <parse_string+0x128>
 800171a:	2b22      	cmp	r3, #34	@ 0x22
 800171c:	d05c      	beq.n	80017d8 <parse_string+0x1dc>
 800171e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001720:	d05a      	beq.n	80017d8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001722:	e098      	b.n	8001856 <parse_string+0x25a>
            switch (input_pointer[1])
 8001724:	3b5c      	subs	r3, #92	@ 0x5c
 8001726:	2b19      	cmp	r3, #25
 8001728:	f200 8095 	bhi.w	8001856 <parse_string+0x25a>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <parse_string+0x138>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	080017d9 	.word	0x080017d9
 8001738:	08001857 	.word	0x08001857
 800173c:	08001857 	.word	0x08001857
 8001740:	08001857 	.word	0x08001857
 8001744:	08001857 	.word	0x08001857
 8001748:	08001857 	.word	0x08001857
 800174c:	0800179d 	.word	0x0800179d
 8001750:	08001857 	.word	0x08001857
 8001754:	08001857 	.word	0x08001857
 8001758:	08001857 	.word	0x08001857
 800175c:	080017a9 	.word	0x080017a9
 8001760:	08001857 	.word	0x08001857
 8001764:	08001857 	.word	0x08001857
 8001768:	08001857 	.word	0x08001857
 800176c:	08001857 	.word	0x08001857
 8001770:	08001857 	.word	0x08001857
 8001774:	08001857 	.word	0x08001857
 8001778:	08001857 	.word	0x08001857
 800177c:	080017b5 	.word	0x080017b5
 8001780:	08001857 	.word	0x08001857
 8001784:	08001857 	.word	0x08001857
 8001788:	08001857 	.word	0x08001857
 800178c:	080017c1 	.word	0x080017c1
 8001790:	08001857 	.word	0x08001857
 8001794:	080017cd 	.word	0x080017cd
 8001798:	080017e9 	.word	0x080017e9
                    *output_pointer++ = '\b';
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60fa      	str	r2, [r7, #12]
 80017a2:	2208      	movs	r2, #8
 80017a4:	701a      	strb	r2, [r3, #0]
                    break;
 80017a6:	e02c      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60fa      	str	r2, [r7, #12]
 80017ae:	220c      	movs	r2, #12
 80017b0:	701a      	strb	r2, [r3, #0]
                    break;
 80017b2:	e026      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60fa      	str	r2, [r7, #12]
 80017ba:	220a      	movs	r2, #10
 80017bc:	701a      	strb	r2, [r3, #0]
                    break;
 80017be:	e020      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	220d      	movs	r2, #13
 80017c8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ca:	e01a      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60fa      	str	r2, [r7, #12]
 80017d2:	2209      	movs	r2, #9
 80017d4:	701a      	strb	r2, [r3, #0]
                    break;
 80017d6:	e014      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	60f9      	str	r1, [r7, #12]
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	701a      	strb	r2, [r3, #0]
                    break;
 80017e6:	e00c      	b.n	8001802 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	461a      	mov	r2, r3
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017f2:	f7ff fe1b 	bl	800142c <utf16_literal_to_utf8>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02c      	beq.n	800185a <parse_string+0x25e>
                    break;
 8001800:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001806:	4413      	add	r3, r2
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800180a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	429a      	cmp	r2, r3
 8001810:	f4ff af66 	bcc.w	80016e0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2210      	movs	r2, #16
 800181e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	461a      	mov	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	609a      	str	r2, [r3, #8]

    return true;
 800183e:	2301      	movs	r3, #1
 8001840:	e020      	b.n	8001884 <parse_string+0x288>
        goto fail;
 8001842:	bf00      	nop
 8001844:	e00a      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001846:	bf00      	nop
 8001848:	e008      	b.n	800185c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800184a:	bf00      	nop
 800184c:	e006      	b.n	800185c <parse_string+0x260>
            goto fail; /* allocation failure */
 800184e:	bf00      	nop
 8001850:	e004      	b.n	800185c <parse_string+0x260>
                goto fail;
 8001852:	bf00      	nop
 8001854:	e002      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <parse_string+0x260>
                        goto fail;
 800185a:	bf00      	nop

fail:
    if (output != NULL)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	69f8      	ldr	r0, [r7, #28]
 8001868:	4798      	blx	r3
        output = NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	461a      	mov	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <buffer_skip_whitespace+0x16>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02c      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <buffer_skip_whitespace+0x2c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d306      	bcc.n	80018c6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e021      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d9e9      	bls.n	80018bc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d104      	bne.n	80018fe <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <skip_utf8_bom+0x1e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <skip_utf8_bom+0x1e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <skip_utf8_bom+0x22>
    {
        return NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	e01c      	b.n	8001968 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d018      	beq.n	8001966 <skip_utf8_bom+0x5a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	1d1a      	adds	r2, r3, #4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d211      	bcs.n	8001966 <skip_utf8_bom+0x5a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4413      	add	r3, r2
 800194c:	2203      	movs	r2, #3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <skip_utf8_bom+0x64>)
 8001950:	4618      	mov	r0, r3
 8001952:	f011 f87b 	bl	8012a4c <strncmp>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1cda      	adds	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	08014960 	.word	0x08014960

08001974 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	e00c      	b.n	80019a4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7fe fc4a 	bl	8000224 <strlen>
 8001990:	4603      	mov	r3, r0
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	6979      	ldr	r1, [r7, #20]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f805 	bl	80019ac <cJSON_ParseWithLengthOpts>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	@ 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d042      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03f      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019f6:	4a39      	ldr	r2, [pc, #228]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 80019f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001a02:	4836      	ldr	r0, [pc, #216]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 8001a04:	f7ff fb74 	bl	80010f0 <cJSON_New_Item>
 8001a08:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d02e      	beq.n	8001a6e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff79 	bl	800190c <skip_utf8_bom>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <buffer_skip_whitespace>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a28:	f000 f868 	bl	8001afc <parse_value>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01f      	beq.n	8001a72 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff25 	bl	800188c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d215      	bcs.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a68:	e031      	b.n	8001ace <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a6a:	bf00      	nop
 8001a6c:	e004      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a6e:	bf00      	nop
 8001a70:	e002      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a76:	bf00      	nop

fail:
    if (item != NULL)
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a80:	f7ff fb4c 	bl	800111c <cJSON_Delete>
    }

    if (value != NULL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d020      	beq.n	8001acc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a92:	6a3a      	ldr	r2, [r7, #32]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d202      	bcs.n	8001aa0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e005      	b.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3738      	adds	r7, #56	@ 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200004a0 	.word	0x200004a0
 8001adc:	20000000 	.word	0x20000000

08001ae0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff41 	bl	8001974 <cJSON_ParseWithOpts>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <parse_value+0x18>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <parse_value+0x1c>
    {
        return false; /* no input */
 8001b14:	2300      	movs	r3, #0
 8001b16:	e0d2      	b.n	8001cbe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01d      	beq.n	8001b5a <parse_value+0x5e>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	1d1a      	adds	r2, r3, #4
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d816      	bhi.n	8001b5a <parse_value+0x5e>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	2204      	movs	r2, #4
 8001b38:	4963      	ldr	r1, [pc, #396]	@ (8001cc8 <parse_value+0x1cc>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f010 ff86 	bl	8012a4c <strncmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1d1a      	adds	r2, r3, #4
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
        return true;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0b1      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01d      	beq.n	8001b9c <parse_value+0xa0>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	1d5a      	adds	r2, r3, #5
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d816      	bhi.n	8001b9c <parse_value+0xa0>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4413      	add	r3, r2
 8001b78:	2205      	movs	r2, #5
 8001b7a:	4954      	ldr	r1, [pc, #336]	@ (8001ccc <parse_value+0x1d0>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f010 ff65 	bl	8012a4c <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	1d5a      	adds	r2, r3, #5
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
        return true;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e090      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <parse_value+0xe8>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d819      	bhi.n	8001be4 <parse_value+0xe8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4413      	add	r3, r2
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4944      	ldr	r1, [pc, #272]	@ (8001cd0 <parse_value+0x1d4>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f010 ff44 	bl	8012a4c <strncmp>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	609a      	str	r2, [r3, #8]
        return true;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e06c      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d013      	beq.n	8001c12 <parse_value+0x116>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20d      	bcs.n	8001c12 <parse_value+0x116>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b22      	cmp	r3, #34	@ 0x22
 8001c04:	d105      	bne.n	8001c12 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fcf7 	bl	80015fc <parse_string>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e055      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <parse_value+0x164>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d21d      	bcs.n	8001c60 <parse_value+0x164>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c32:	d00f      	beq.n	8001c54 <parse_value+0x158>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c42:	d90d      	bls.n	8001c60 <parse_value+0x164>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b39      	cmp	r3, #57	@ 0x39
 8001c52:	d805      	bhi.n	8001c60 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff faba 	bl	80011d0 <parse_number>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	e02e      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d013      	beq.n	8001c8e <parse_value+0x192>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20d      	bcs.n	8001c8e <parse_value+0x192>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c80:	d105      	bne.n	8001c8e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f825 	bl	8001cd4 <parse_array>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	e017      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <parse_value+0x1c0>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d20d      	bcs.n	8001cbc <parse_value+0x1c0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b7b      	cmp	r3, #123	@ 0x7b
 8001cae:	d105      	bne.n	8001cbc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8d2 	bl	8001e5c <parse_object>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e000      	b.n	8001cbe <parse_value+0x1c2>
    }

    return false;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08014934 	.word	0x08014934
 8001ccc:	08014964 	.word	0x08014964
 8001cd0:	0801496c 	.word	0x0801496c

08001cd4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cee:	d301      	bcc.n	8001cf4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e0af      	b.n	8001e54 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d0c:	f040 8094 	bne.w	8001e38 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f7ff fdb6 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <parse_array+0x6e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d207      	bcs.n	8001d42 <parse_array+0x6e>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d40:	d061      	beq.n	8001e06 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <parse_array+0x80>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d305      	bcc.n	8001d60 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d5e:	e072      	b.n	8001e46 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9be 	bl	80010f0 <cJSON_New_Item>
 8001d74:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05f      	beq.n	8001e3c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e007      	b.n	8001d9c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7ff fd70 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f7ff fea4 	bl	8001afc <parse_value>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d042      	beq.n	8001e40 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001dba:	6838      	ldr	r0, [r7, #0]
 8001dbc:	f7ff fd66 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <parse_array+0x10e>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d207      	bcs.n	8001de2 <parse_array+0x10e>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b2c      	cmp	r3, #44	@ 0x2c
 8001de0:	d0c3      	beq.n	8001d6a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02d      	beq.n	8001e44 <parse_array+0x170>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d227      	bcs.n	8001e44 <parse_array+0x170>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b5d      	cmp	r3, #93	@ 0x5d
 8001e02:	d11f      	bne.n	8001e44 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001e04:	e000      	b.n	8001e08 <parse_array+0x134>
        goto success;
 8001e06:	bf00      	nop
    input_buffer->depth--;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <parse_array+0x14a>
        head->prev = current_item;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	609a      	str	r2, [r3, #8]

    return true;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00d      	b.n	8001e54 <parse_array+0x180>
        goto fail;
 8001e38:	bf00      	nop
 8001e3a:	e004      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e44:	bf00      	nop

fail:
    if (head != NULL)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7ff f965 	bl	800111c <cJSON_Delete>
    }

    return false;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e76:	d301      	bcc.n	8001e7c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e0f7      	b.n	800206c <parse_object+0x210>
    }
    input_buffer->depth++;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80db 	beq.w	8002044 <parse_object+0x1e8>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	f080 80d4 	bcs.w	8002044 <parse_object+0x1e8>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b7b      	cmp	r3, #123	@ 0x7b
 8001eaa:	f040 80cb 	bne.w	8002044 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f7ff fce7 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00e      	beq.n	8001ee2 <parse_object+0x86>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d208      	bcs.n	8001ee2 <parse_object+0x86>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ede:	f000 8098 	beq.w	8002012 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <parse_object+0x98>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d305      	bcc.n	8001f00 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	609a      	str	r2, [r3, #8]
        goto fail;
 8001efe:	e0ae      	b.n	800205e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8ee 	bl	80010f0 <cJSON_New_Item>
 8001f14:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8095 	beq.w	8002048 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	e007      	b.n	8001f3e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8083 	beq.w	800204c <parse_object+0x1f0>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d27b      	bcs.n	800204c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7ff fc94 	bl	800188c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	6938      	ldr	r0, [r7, #16]
 8001f68:	f7ff fb48 	bl	80015fc <parse_string>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06e      	beq.n	8002050 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f7ff fc8a 	bl	800188c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d063      	beq.n	8002054 <parse_object+0x1f8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d25d      	bcs.n	8002054 <parse_object+0x1f8>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001fa6:	d155      	bne.n	8002054 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f7ff fc6a 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	6938      	ldr	r0, [r7, #16]
 8001fbc:	f7ff fd9e 	bl	8001afc <parse_value>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d048      	beq.n	8002058 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f7ff fc60 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <parse_object+0x192>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d207      	bcs.n	8001fee <parse_object+0x192>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b2c      	cmp	r3, #44	@ 0x2c
 8001fec:	d08d      	beq.n	8001f0a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d033      	beq.n	800205c <parse_object+0x200>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d22d      	bcs.n	800205c <parse_object+0x200>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b7d      	cmp	r3, #125	@ 0x7d
 800200e:	d125      	bne.n	800205c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002010:	e000      	b.n	8002014 <parse_object+0x1b8>
        goto success; /* empty object */
 8002012:	bf00      	nop
    input_buffer->depth--;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <parse_object+0x1ce>
        head->prev = current_item;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	609a      	str	r2, [r3, #8]
    return true;
 8002040:	2301      	movs	r3, #1
 8002042:	e013      	b.n	800206c <parse_object+0x210>
        goto fail; /* not an object */
 8002044:	bf00      	nop
 8002046:	e00a      	b.n	800205e <parse_object+0x202>
            goto fail; /* allocation failure */
 8002048:	bf00      	nop
 800204a:	e008      	b.n	800205e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800204c:	bf00      	nop
 800204e:	e006      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002050:	bf00      	nop
 8002052:	e004      	b.n	800205e <parse_object+0x202>
            goto fail; /* invalid object */
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <parse_object+0x202>
        goto fail; /* expected end of object */
 800205c:	bf00      	nop

fail:
    if (head != NULL)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f7ff f859 	bl	800111c <cJSON_Delete>
    }

    return false;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <get_object_item+0x1c>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <get_object_item+0x20>
    {
        return NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	e033      	b.n	80020fc <get_object_item+0x88>
    }

    current_element = object->child;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a0:	e002      	b.n	80020a8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01c      	beq.n	80020e8 <get_object_item+0x74>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d018      	beq.n	80020e8 <get_object_item+0x74>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4619      	mov	r1, r3
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f7fe f8a7 	bl	8000210 <strcmp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ec      	bne.n	80020a2 <get_object_item+0x2e>
 80020c8:	e00e      	b.n	80020e8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <get_object_item+0x74>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4619      	mov	r1, r3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f7fe ff9b 	bl	8001018 <case_insensitive_strcmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <get_object_item+0x82>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <get_object_item+0x86>
        return NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <get_object_item+0x88>
    }

    return current_element;
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800210e:	2200      	movs	r2, #0
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffae 	bl	8002074 <get_object_item>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <cJSON_IsNumber+0x12>
    {
        return false;
 8002130:	2300      	movs	r3, #0
 8002132:	e007      	b.n	8002144 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b08      	cmp	r3, #8
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002156:	463b      	mov	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002162:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <MX_ADC1_Init+0x98>)
 8002164:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <MX_ADC1_Init+0x9c>)
 8002166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002168:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <MX_ADC1_Init+0x98>)
 800216a:	2200      	movs	r2, #0
 800216c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <MX_ADC1_Init+0x98>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002174:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <MX_ADC1_Init+0x98>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800217a:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <MX_ADC1_Init+0x98>)
 800217c:	2200      	movs	r2, #0
 800217e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002180:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <MX_ADC1_Init+0x98>)
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002188:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <MX_ADC1_Init+0x98>)
 800218a:	2200      	movs	r2, #0
 800218c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800218e:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <MX_ADC1_Init+0x98>)
 8002190:	4a17      	ldr	r2, [pc, #92]	@ (80021f0 <MX_ADC1_Init+0xa0>)
 8002192:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <MX_ADC1_Init+0x98>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <MX_ADC1_Init+0x98>)
 800219c:	2201      	movs	r2, #1
 800219e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <MX_ADC1_Init+0x98>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <MX_ADC1_Init+0x98>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021ae:	480e      	ldr	r0, [pc, #56]	@ (80021e8 <MX_ADC1_Init+0x98>)
 80021b0:	f001 fff0 	bl	8004194 <HAL_ADC_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80021ba:	f001 faaf 	bl	800371c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80021be:	2307      	movs	r3, #7
 80021c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ca:	463b      	mov	r3, r7
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	@ (80021e8 <MX_ADC1_Init+0x98>)
 80021d0:	f002 f9c2 	bl	8004558 <HAL_ADC_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80021da:	f001 fa9f 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200004a8 	.word	0x200004a8
 80021ec:	40012000 	.word	0x40012000
 80021f0:	0f000001 	.word	0x0f000001

080021f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	@ 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_ADC_MspInit+0x7c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d127      	bne.n	8002266 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <HAL_ADC_MspInit+0x80>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4a15      	ldr	r2, [pc, #84]	@ (8002274 <HAL_ADC_MspInit+0x80>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002224:	6453      	str	r3, [r2, #68]	@ 0x44
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_ADC_MspInit+0x80>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <HAL_ADC_MspInit+0x80>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a0e      	ldr	r2, [pc, #56]	@ (8002274 <HAL_ADC_MspInit+0x80>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <HAL_ADC_MspInit+0x80>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002252:	2303      	movs	r3, #3
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <HAL_ADC_MspInit+0x84>)
 8002262:	f003 fbad 	bl	80059c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	@ 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40012000 	.word	0x40012000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000

0800227c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002282:	4b25      	ldr	r3, [pc, #148]	@ (8002318 <MX_CAN1_Init+0x9c>)
 8002284:	4a25      	ldr	r2, [pc, #148]	@ (800231c <MX_CAN1_Init+0xa0>)
 8002286:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002288:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <MX_CAN1_Init+0x9c>)
 800228a:	2203      	movs	r2, #3
 800228c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800228e:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <MX_CAN1_Init+0x9c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002294:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <MX_CAN1_Init+0x9c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800229a:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <MX_CAN1_Init+0x9c>)
 800229c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80022a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <MX_CAN1_Init+0x9c>)
 80022a4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80022a8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80022aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <MX_CAN1_Init+0x9c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80022b0:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <MX_CAN1_Init+0x9c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <MX_CAN1_Init+0x9c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80022bc:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <MX_CAN1_Init+0x9c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <MX_CAN1_Init+0x9c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <MX_CAN1_Init+0x9c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80022ce:	4812      	ldr	r0, [pc, #72]	@ (8002318 <MX_CAN1_Init+0x9c>)
 80022d0:	f002 fb70 	bl	80049b4 <HAL_CAN_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80022da:	f001 fa1f 	bl	800371c <Error_Handler>
//  filterConfig.FilterMaskIdLow = 0x0000;            // Not used in standard ID
//  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // Assign to FIFO0
//  filterConfig.FilterActivation = ENABLE;           // Enable the filter


  filterConfig.FilterBank = 0;                      // Use Filter Bank 0
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // 32-bit scale
 80022e6:	2301      	movs	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;           // Base ID to match (0x100 << 5)
 80022ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ee:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;                // Not used in standard ID
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x7FC << 5;       // Mask to allow 0x101 and 0x102
 80022f4:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80022f8:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;            // Not used in standard ID
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign to FIFO0
 80022fe:	2301      	movs	r3, #1
 8002300:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 8002302:	2301      	movs	r3, #1
 8002304:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8002306:	463b      	mov	r3, r7
 8002308:	4619      	mov	r1, r3
 800230a:	4803      	ldr	r0, [pc, #12]	@ (8002318 <MX_CAN1_Init+0x9c>)
 800230c:	f002 fc4e 	bl	8004bac <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	3728      	adds	r7, #40	@ 0x28
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200004f0 	.word	0x200004f0
 800231c:	40006400 	.word	0x40006400

08002320 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2a      	ldr	r2, [pc, #168]	@ (80023e8 <HAL_CAN_MspInit+0xc8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d14d      	bne.n	80023de <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <HAL_CAN_MspInit+0xcc>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a28      	ldr	r2, [pc, #160]	@ (80023ec <HAL_CAN_MspInit+0xcc>)
 800234c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <HAL_CAN_MspInit+0xcc>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <HAL_CAN_MspInit+0xcc>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a21      	ldr	r2, [pc, #132]	@ (80023ec <HAL_CAN_MspInit+0xcc>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <HAL_CAN_MspInit+0xcc>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800237a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002384:	2301      	movs	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800238c:	2309      	movs	r3, #9
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4816      	ldr	r0, [pc, #88]	@ (80023f0 <HAL_CAN_MspInit+0xd0>)
 8002398:	f003 fb12 	bl	80059c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800239c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80023ae:	2309      	movs	r3, #9
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	480d      	ldr	r0, [pc, #52]	@ (80023f0 <HAL_CAN_MspInit+0xd0>)
 80023ba:	f003 fb01 	bl	80059c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2105      	movs	r1, #5
 80023c2:	2014      	movs	r0, #20
 80023c4:	f003 fa40 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023c8:	2014      	movs	r0, #20
 80023ca:	f003 fa59 	bl	8005880 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2105      	movs	r1, #5
 80023d2:	2015      	movs	r0, #21
 80023d4:	f003 fa38 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80023d8:	2015      	movs	r0, #21
 80023da:	f003 fa51 	bl	8005880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	@ 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40006400 	.word	0x40006400
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020400 	.word	0x40020400

080023f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <vApplicationGetIdleTaskMemory+0x2c>)
 8002404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4a06      	ldr	r2, [pc, #24]	@ (8002424 <vApplicationGetIdleTaskMemory+0x30>)
 800240a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2280      	movs	r2, #128	@ 0x80
 8002410:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200007ac 	.word	0x200007ac
 8002424:	2000084c 	.word	0x2000084c

08002428 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b09a      	sub	sp, #104	@ 0x68
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	telemetry_data.tRpm = 0;
 800242e:	4b45      	ldr	r3, [pc, #276]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8002434:	4b43      	ldr	r3, [pc, #268]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 800243a:	4b42      	ldr	r3, [pc, #264]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 8002440:	4b40      	ldr	r3, [pc, #256]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 800244c:	4b3d      	ldr	r3, [pc, #244]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 8002452:	4b3c      	ldr	r3, [pc, #240]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 8002458:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
	gFfbSignal = 0;
 800245e:	4b3a      	ldr	r3, [pc, #232]	@ (8002548 <MX_FREERTOS_Init+0x120>)
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

	HIDReport.steering = 0;        // Steering data (0-255)
 8002466:	4b39      	ldr	r3, [pc, #228]	@ (800254c <MX_FREERTOS_Init+0x124>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = 0;        // Throttle data (0-255)
 800246c:	4b37      	ldr	r3, [pc, #220]	@ (800254c <MX_FREERTOS_Init+0x124>)
 800246e:	2200      	movs	r2, #0
 8002470:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = 0;           // Brake data (0-255)
 8002472:	4b36      	ldr	r3, [pc, #216]	@ (800254c <MX_FREERTOS_Init+0x124>)
 8002474:	2200      	movs	r2, #0
 8002476:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 8002478:	4b34      	ldr	r3, [pc, #208]	@ (800254c <MX_FREERTOS_Init+0x124>)
 800247a:	2200      	movs	r2, #0
 800247c:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 800247e:	4b33      	ldr	r3, [pc, #204]	@ (800254c <MX_FREERTOS_Init+0x124>)
 8002480:	2200      	movs	r2, #0
 8002482:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 8002484:	4b31      	ldr	r3, [pc, #196]	@ (800254c <MX_FREERTOS_Init+0x124>)
 8002486:	2200      	movs	r2, #0
 8002488:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 800248a:	4b30      	ldr	r3, [pc, #192]	@ (800254c <MX_FREERTOS_Init+0x124>)
 800248c:	2200      	movs	r2, #0
 800248e:	725a      	strb	r2, [r3, #9]
	memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 8002490:	2220      	movs	r2, #32
 8002492:	2100      	movs	r1, #0
 8002494:	482b      	ldr	r0, [pc, #172]	@ (8002544 <MX_FREERTOS_Init+0x11c>)
 8002496:	f010 fad1 	bl	8012a3c <memset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 800249a:	2300      	movs	r3, #0
 800249c:	663b      	str	r3, [r7, #96]	@ 0x60
 800249e:	2300      	movs	r3, #0
 80024a0:	667b      	str	r3, [r7, #100]	@ 0x64
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 80024a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024a6:	2101      	movs	r1, #1
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00c fe22 	bl	800f0f2 <osSemaphoreCreate>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <MX_FREERTOS_Init+0x128>)
 80024b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartMutex */
  osSemaphoreDef(uartMutex);
 80024b4:	2300      	movs	r3, #0
 80024b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024b8:	2300      	movs	r3, #0
 80024ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uartMutexHandle = osSemaphoreCreate(osSemaphore(uartMutex), 1);
 80024bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80024c0:	2101      	movs	r1, #1
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00c fe15 	bl	800f0f2 <osSemaphoreCreate>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a22      	ldr	r2, [pc, #136]	@ (8002554 <MX_FREERTOS_Init+0x12c>)
 80024cc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80024ce:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <MX_FREERTOS_Init+0x130>)
 80024d0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80024d4:	461d      	mov	r5, r3
 80024d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80024e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00c fda2 	bl	800f032 <osThreadCreate>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a1a      	ldr	r2, [pc, #104]	@ (800255c <MX_FREERTOS_Init+0x134>)
 80024f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlLoopTask */
  osThreadDef(ControlLoopTask, StartControlLoop, osPriorityHigh, 0, 512);
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <MX_FREERTOS_Init+0x138>)
 80024f6:	f107 0420 	add.w	r4, r7, #32
 80024fa:	461d      	mov	r5, r3
 80024fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002500:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002504:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLoopTaskHandle = osThreadCreate(osThread(ControlLoopTask), NULL);
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f00c fd8f 	bl	800f032 <osThreadCreate>
 8002514:	4603      	mov	r3, r0
 8002516:	4a13      	ldr	r2, [pc, #76]	@ (8002564 <MX_FREERTOS_Init+0x13c>)
 8002518:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommLoopTask */
  osThreadDef(CommLoopTask, StartCommLoopTask, osPriorityNormal, 0, 512);
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <MX_FREERTOS_Init+0x140>)
 800251c:	1d3c      	adds	r4, r7, #4
 800251e:	461d      	mov	r5, r3
 8002520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002524:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002528:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommLoopTaskHandle = osThreadCreate(osThread(CommLoopTask), NULL);
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f00c fd7e 	bl	800f032 <osThreadCreate>
 8002536:	4603      	mov	r3, r0
 8002538:	4a0c      	ldr	r2, [pc, #48]	@ (800256c <MX_FREERTOS_Init+0x144>)
 800253a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800253c:	bf00      	nop
 800253e:	3768      	adds	r7, #104	@ 0x68
 8002540:	46bd      	mov	sp, r7
 8002542:	bdb0      	pop	{r4, r5, r7, pc}
 8002544:	20000518 	.word	0x20000518
 8002548:	2000078c 	.word	0x2000078c
 800254c:	20000538 	.word	0x20000538
 8002550:	200007a4 	.word	0x200007a4
 8002554:	200007a8 	.word	0x200007a8
 8002558:	08014980 	.word	0x08014980
 800255c:	20000798 	.word	0x20000798
 8002560:	080149ac 	.word	0x080149ac
 8002564:	2000079c 	.word	0x2000079c
 8002568:	080149d8 	.word	0x080149d8
 800256c:	200007a0 	.word	0x200007a0

08002570 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <StartDefaultTask+0x8>

0800257c <StartControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08e      	sub	sp, #56	@ 0x38
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlLoop */
  /* Infinite loop */
  for(;;)
  {
	  float total_force = 0.0;
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
	  const float Kp = 1.0f;
 800258a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30

	  for (;;) {
		  // Step 1: Retrieve current force feedback signal (e.g., from game data).
		  float force_feedback_signal = gFfbSignal;
 8002590:	4b57      	ldr	r3, [pc, #348]	@ (80026f0 <StartControlLoop+0x174>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  // Step 2: Calculate individual forces based on physics:
		  float inertia_force = calculate_inertia(force_feedback_signal, angular_velocity);
 8002596:	4b57      	ldr	r3, [pc, #348]	@ (80026f4 <StartControlLoop+0x178>)
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	eef0 0a67 	vmov.f32	s1, s15
 80025a0:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80025a4:	f000 fae6 	bl	8002b74 <calculate_inertia>
 80025a8:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		  float damping_force = calculate_damping(angular_velocity);
 80025ac:	4b51      	ldr	r3, [pc, #324]	@ (80026f4 <StartControlLoop+0x178>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	eeb0 0a67 	vmov.f32	s0, s15
 80025b6:	f000 fb0d 	bl	8002bd4 <calculate_damping>
 80025ba:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		  float friction_force = calculate_friction(angular_velocity);
 80025be:	4b4d      	ldr	r3, [pc, #308]	@ (80026f4 <StartControlLoop+0x178>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	eeb0 0a67 	vmov.f32	s0, s15
 80025c8:	f000 fb1c 	bl	8002c04 <calculate_friction>
 80025cc:	ed87 0a08 	vstr	s0, [r7, #32]
		  float lock_force = calculate_lock(wheel_angle);
 80025d0:	4b49      	ldr	r3, [pc, #292]	@ (80026f8 <StartControlLoop+0x17c>)
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	eeb0 0a67 	vmov.f32	s0, s15
 80025da:	f000 fb3d 	bl	8002c58 <calculate_lock>
 80025de:	ed87 0a07 	vstr	s0, [r7, #28]

		  // Step 3: Sum all forces and scale to PWM range:
		  total_force = force_feedback_signal + inertia_force + damping_force + friction_force + lock_force;
 80025e2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80025e6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80025ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  // Strength gain
		  total_force *= gStrength;
 800260a:	4b3c      	ldr	r3, [pc, #240]	@ (80026fc <StartControlLoop+0x180>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002618:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  total_force = constrain(total_force, -1.0, 1.0);
 800261c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002620:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002624:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002628:	f000 fa7a 	bl	8002b20 <constrain>
 800262c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		  // Deadband
		  const float FORCE_DEADBAND_THRESHOLD = 0.05f; // Adjust as needed
 8002630:	4b33      	ldr	r3, [pc, #204]	@ (8002700 <StartControlLoop+0x184>)
 8002632:	61bb      	str	r3, [r7, #24]
		  const float ANGLE_DEADBAND_THRESHOLD = 50.0f; // Adjust as needed
 8002634:	4b33      	ldr	r3, [pc, #204]	@ (8002704 <StartControlLoop+0x188>)
 8002636:	617b      	str	r3, [r7, #20]
		  float error = wheel_angle;
 8002638:	4b2f      	ldr	r3, [pc, #188]	@ (80026f8 <StartControlLoop+0x17c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	613b      	str	r3, [r7, #16]
		  if (fabsf(error) < ANGLE_DEADBAND_THRESHOLD)  {
 800263e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002642:	eef0 7ae7 	vabs.f32	s15, s15
 8002646:	ed97 7a05 	vldr	s14, [r7, #20]
 800264a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002652:	dd03      	ble.n	800265c <StartControlLoop+0xe0>
			  total_force = 0.0f;
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	637b      	str	r3, [r7, #52]	@ 0x34
 800265a:	e017      	b.n	800268c <StartControlLoop+0x110>
		  } else { // TEST CODE: gives increasing feedback farther away from center
			  total_force = -Kp * (error / WHEEL_MAX_ANGLE);
 800265c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002660:	eeb1 7a67 	vneg.f32	s14, s15
 8002664:	edd7 6a04 	vldr	s13, [r7, #16]
 8002668:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 8002708 <StartControlLoop+0x18c>
 800266c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002674:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			  total_force = constrain(total_force, -1.0f, 1.0f);
 8002678:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800267c:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002680:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002684:	f000 fa4c 	bl	8002b20 <constrain>
 8002688:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		  }

		  // Step 4: Map total_force to PWM and determine direction
		  float pwm_output = scale_to_pwm(total_force);
 800268c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002690:	f000 fb28 	bl	8002ce4 <scale_to_pwm>
 8002694:	ed87 0a03 	vstr	s0, [r7, #12]
		  // 0 is negative direction; 1 is positive direction
		  uint8_t motor_direction = (total_force >= 0) ? 1 : 0;
 8002698:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800269c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	bfac      	ite	ge
 80026a6:	2301      	movge	r3, #1
 80026a8:	2300      	movlt	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	72fb      	strb	r3, [r7, #11]

		  // Debug
		  gDir = motor_direction;
 80026ae:	4a17      	ldr	r2, [pc, #92]	@ (800270c <StartControlLoop+0x190>)
 80026b0:	7afb      	ldrb	r3, [r7, #11]
 80026b2:	7013      	strb	r3, [r2, #0]
		  gTotalforce = total_force;
 80026b4:	4a16      	ldr	r2, [pc, #88]	@ (8002710 <StartControlLoop+0x194>)
 80026b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b8:	6013      	str	r3, [r2, #0]
		  gPWMConst = pwm_output;
 80026ba:	4a16      	ldr	r2, [pc, #88]	@ (8002714 <StartControlLoop+0x198>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6013      	str	r3, [r2, #0]

		  // Step 5: Send PWM signal to H-bridge for motor control:
		  set_motor_direction(motor_direction);
 80026c0:	7afb      	ldrb	r3, [r7, #11]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fcd6 	bl	8003074 <set_motor_direction>
		  set_motor_pwm(pwm_output);
 80026c8:	ed97 0a03 	vldr	s0, [r7, #12]
 80026cc:	f000 fca0 	bl	8003010 <set_motor_pwm>

		  // Step 6: Update wheel position and velocity for next loop:
		  update_wheel_position_and_velocity(&wheel_angle, &angular_velocity);
 80026d0:	4908      	ldr	r1, [pc, #32]	@ (80026f4 <StartControlLoop+0x178>)
 80026d2:	4809      	ldr	r0, [pc, #36]	@ (80026f8 <StartControlLoop+0x17c>)
 80026d4:	f000 fbf4 	bl	8002ec0 <update_wheel_position_and_velocity>



		  gHall = read_hall_sensor();
 80026d8:	f000 fd42 	bl	8003160 <read_hall_sensor>
 80026dc:	eef0 7a40 	vmov.f32	s15, s0
 80026e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <StartControlLoop+0x19c>)
 80026e2:	edc3 7a00 	vstr	s15, [r3]
		  // Run this task periodically (every 10ms):
		  osDelay(5);
 80026e6:	2005      	movs	r0, #5
 80026e8:	f00c fcef 	bl	800f0ca <osDelay>
	  for (;;) {
 80026ec:	e750      	b.n	8002590 <StartControlLoop+0x14>
 80026ee:	bf00      	nop
 80026f0:	2000078c 	.word	0x2000078c
 80026f4:	20000758 	.word	0x20000758
 80026f8:	20000754 	.word	0x20000754
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	3d4ccccd 	.word	0x3d4ccccd
 8002704:	42480000 	.word	0x42480000
 8002708:	43e10000 	.word	0x43e10000
 800270c:	20000752 	.word	0x20000752
 8002710:	2000074c 	.word	0x2000074c
 8002714:	20000748 	.word	0x20000748
 8002718:	2000076c 	.word	0x2000076c

0800271c <StartCommLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommLoopTask */
void StartCommLoopTask(void const * argument)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommLoopTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(uartMutexHandle, 10) == osOK) {
 8002724:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <StartCommLoopTask+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	210a      	movs	r1, #10
 800272a:	4618      	mov	r0, r3
 800272c:	f00c fd14 	bl	800f158 <osSemaphoreWait>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <StartCommLoopTask+0x1e>
		  runUART();
 8002736:	f000 f9df 	bl	8002af8 <runUART>
	  }

	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 800273a:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <StartCommLoopTask+0x44>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	210a      	movs	r1, #10
 8002740:	4618      	mov	r0, r3
 8002742:	f00c fd09 	bl	800f158 <osSemaphoreWait>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <StartCommLoopTask+0x34>
		  runCAN();
 800274c:	f000 f94c 	bl	80029e8 <runCAN>
	  }

	  runReport();
 8002750:	f000 f90c 	bl	800296c <runReport>
    osDelay(10);
 8002754:	200a      	movs	r0, #10
 8002756:	f00c fcb8 	bl	800f0ca <osDelay>
	  if (osSemaphoreWait(uartMutexHandle, 10) == osOK) {
 800275a:	e7e3      	b.n	8002724 <StartCommLoopTask+0x8>
 800275c:	200007a8 	.word	0x200007a8
 8002760:	200007a4 	.word	0x200007a4

08002764 <DWT_Init>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Initialize DWT for cycle counting
void DWT_Init(void) {
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <DWT_Init+0x38>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <DWT_Init+0x38>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a08      	ldr	r2, [pc, #32]	@ (800279c <DWT_Init+0x38>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800277e:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 8002780:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <DWT_Init+0x3c>)
 8002782:	2200      	movs	r2, #0
 8002784:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <DWT_Init+0x3c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a05      	ldr	r2, [pc, #20]	@ (80027a0 <DWT_Init+0x3c>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6013      	str	r3, [r2, #0]
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000edf0 	.word	0xe000edf0
 80027a0:	e0001000 	.word	0xe0001000

080027a4 <DWT_Delay_us>:

// Delay function using DWT for accurate timing in microseconds
void DWT_Delay_us(uint32_t us) {
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 80027ac:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <DWT_Delay_us+0x40>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (SystemCoreClock / 1000000); // Convert microseconds to ticks
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <DWT_Delay_us+0x44>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <DWT_Delay_us+0x48>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	0c9a      	lsrs	r2, r3, #18
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - startTick) < delayTicks) {
 80027c6:	bf00      	nop
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <DWT_Delay_us+0x40>)
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d8f8      	bhi.n	80027c8 <DWT_Delay_us+0x24>
        // Wait until the required delay has passed
    }
}
 80027d6:	bf00      	nop
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e0001000 	.word	0xe0001000
 80027e8:	20000010 	.word	0x20000010
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <process_command>:

void process_command(char* cmd) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	@ 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	cJSON *json_data = cJSON_Parse(cmd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff f971 	bl	8001ae0 <cJSON_Parse>
 80027fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (json_data != NULL) {
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 808d 	beq.w	8002922 <process_command+0x132>
		// Extract data from the JSON object
		cJSON *rpm = cJSON_GetObjectItem(json_data, "rpm");
 8002808:	494c      	ldr	r1, [pc, #304]	@ (800293c <process_command+0x14c>)
 800280a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800280c:	f7ff fc7a 	bl	8002104 <cJSON_GetObjectItem>
 8002810:	62b8      	str	r0, [r7, #40]	@ 0x28
		cJSON *gear = cJSON_GetObjectItem(json_data, "gear");
 8002812:	494b      	ldr	r1, [pc, #300]	@ (8002940 <process_command+0x150>)
 8002814:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002816:	f7ff fc75 	bl	8002104 <cJSON_GetObjectItem>
 800281a:	6278      	str	r0, [r7, #36]	@ 0x24
		cJSON *speedKmh = cJSON_GetObjectItem(json_data, "speedKmh");
 800281c:	4949      	ldr	r1, [pc, #292]	@ (8002944 <process_command+0x154>)
 800281e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002820:	f7ff fc70 	bl	8002104 <cJSON_GetObjectItem>
 8002824:	6238      	str	r0, [r7, #32]
		cJSON *hasDRS = cJSON_GetObjectItem(json_data, "hasDRS");
 8002826:	4948      	ldr	r1, [pc, #288]	@ (8002948 <process_command+0x158>)
 8002828:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800282a:	f7ff fc6b 	bl	8002104 <cJSON_GetObjectItem>
 800282e:	61f8      	str	r0, [r7, #28]
		cJSON *drs = cJSON_GetObjectItem(json_data, "drs");
 8002830:	4946      	ldr	r1, [pc, #280]	@ (800294c <process_command+0x15c>)
 8002832:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002834:	f7ff fc66 	bl	8002104 <cJSON_GetObjectItem>
 8002838:	61b8      	str	r0, [r7, #24]
		cJSON *pitLim = cJSON_GetObjectItem(json_data, "pitLim");
 800283a:	4945      	ldr	r1, [pc, #276]	@ (8002950 <process_command+0x160>)
 800283c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800283e:	f7ff fc61 	bl	8002104 <cJSON_GetObjectItem>
 8002842:	6178      	str	r0, [r7, #20]
		cJSON *fuel = cJSON_GetObjectItem(json_data, "fuel");
 8002844:	4943      	ldr	r1, [pc, #268]	@ (8002954 <process_command+0x164>)
 8002846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002848:	f7ff fc5c 	bl	8002104 <cJSON_GetObjectItem>
 800284c:	6138      	str	r0, [r7, #16]
		cJSON *brakeBias = cJSON_GetObjectItem(json_data, "brakeBias");
 800284e:	4942      	ldr	r1, [pc, #264]	@ (8002958 <process_command+0x168>)
 8002850:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002852:	f7ff fc57 	bl	8002104 <cJSON_GetObjectItem>
 8002856:	60f8      	str	r0, [r7, #12]
		cJSON *forceFB = cJSON_GetObjectItem(json_data, "forceFB");
 8002858:	4940      	ldr	r1, [pc, #256]	@ (800295c <process_command+0x16c>)
 800285a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800285c:	f7ff fc52 	bl	8002104 <cJSON_GetObjectItem>
 8002860:	60b8      	str	r0, [r7, #8]

		// Check if items were found and extract values
		if (cJSON_IsNumber(rpm)) { telemetry_data.tRpm = rpm->valueint; }
 8002862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002864:	f7ff fc5d 	bl	8002122 <cJSON_IsNumber>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <process_command+0x86>
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4a3b      	ldr	r2, [pc, #236]	@ (8002960 <process_command+0x170>)
 8002874:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(gear)) { telemetry_data.tGear = gear->valueint; }
 8002876:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002878:	f7ff fc53 	bl	8002122 <cJSON_IsNumber>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <process_command+0x9a>
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4a36      	ldr	r2, [pc, #216]	@ (8002960 <process_command+0x170>)
 8002888:	6053      	str	r3, [r2, #4]
		if (cJSON_IsNumber(speedKmh)) { telemetry_data.tSpeedKmh = speedKmh->valueint; }
 800288a:	6a38      	ldr	r0, [r7, #32]
 800288c:	f7ff fc49 	bl	8002122 <cJSON_IsNumber>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <process_command+0xae>
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	4a31      	ldr	r2, [pc, #196]	@ (8002960 <process_command+0x170>)
 800289c:	6093      	str	r3, [r2, #8]
		if (cJSON_IsNumber(hasDRS)) { telemetry_data.tHasDRS = hasDRS->valueint; }
 800289e:	69f8      	ldr	r0, [r7, #28]
 80028a0:	f7ff fc3f 	bl	8002122 <cJSON_IsNumber>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <process_command+0xc2>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002960 <process_command+0x170>)
 80028b0:	60d3      	str	r3, [r2, #12]
		if (cJSON_IsNumber(drs)) { telemetry_data.tDrs = drs->valueint; }
 80028b2:	69b8      	ldr	r0, [r7, #24]
 80028b4:	f7ff fc35 	bl	8002122 <cJSON_IsNumber>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <process_command+0xd6>
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4a27      	ldr	r2, [pc, #156]	@ (8002960 <process_command+0x170>)
 80028c4:	6113      	str	r3, [r2, #16]
		if (cJSON_IsNumber(pitLim)) { telemetry_data.tPitLim = pitLim->valueint; }
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff fc2b 	bl	8002122 <cJSON_IsNumber>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <process_command+0xea>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4a22      	ldr	r2, [pc, #136]	@ (8002960 <process_command+0x170>)
 80028d8:	6153      	str	r3, [r2, #20]
		if (cJSON_IsNumber(fuel)) { telemetry_data.tFuel = fuel->valueint; }
 80028da:	6938      	ldr	r0, [r7, #16]
 80028dc:	f7ff fc21 	bl	8002122 <cJSON_IsNumber>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <process_command+0xfe>
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002960 <process_command+0x170>)
 80028ec:	6193      	str	r3, [r2, #24]
		if (cJSON_IsNumber(brakeBias)) { telemetry_data.tBrakeBias = brakeBias->valueint; }
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff fc17 	bl	8002122 <cJSON_IsNumber>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <process_command+0x112>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4a18      	ldr	r2, [pc, #96]	@ (8002960 <process_command+0x170>)
 8002900:	61d3      	str	r3, [r2, #28]

		if (cJSON_IsNumber(forceFB)) { gFfbSignal = (float)forceFB->valuedouble; }
 8002902:	68b8      	ldr	r0, [r7, #8]
 8002904:	f7ff fc0d 	bl	8002122 <cJSON_IsNumber>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <process_command+0x132>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f980 	bl	8000c1c <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	4a11      	ldr	r2, [pc, #68]	@ (8002964 <process_command+0x174>)
 8002920:	6013      	str	r3, [r2, #0]
		}
		// Cleanup
		cJSON_Delete(json_data);
 8002922:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002924:	f7fe fbfa 	bl	800111c <cJSON_Delete>
		// Clear the buffer for the next message
		memset(gCommandData, 0, BUFFER_SIZE);
 8002928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292c:	2100      	movs	r1, #0
 800292e:	480e      	ldr	r0, [pc, #56]	@ (8002968 <process_command+0x178>)
 8002930:	f010 f884 	bl	8012a3c <memset>
}
 8002934:	bf00      	nop
 8002936:	3730      	adds	r7, #48	@ 0x30
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	080149f4 	.word	0x080149f4
 8002940:	080149f8 	.word	0x080149f8
 8002944:	08014a00 	.word	0x08014a00
 8002948:	08014a0c 	.word	0x08014a0c
 800294c:	08014a14 	.word	0x08014a14
 8002950:	08014a18 	.word	0x08014a18
 8002954:	08014a20 	.word	0x08014a20
 8002958:	08014a28 	.word	0x08014a28
 800295c:	08014a34 	.word	0x08014a34
 8002960:	20000518 	.word	0x20000518
 8002964:	2000078c 	.word	0x2000078c
 8002968:	20000644 	.word	0x20000644

0800296c <runReport>:

void runReport() {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
	HIDReport.steering = gSteering;        // Steering data (0-255)
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <runReport+0x6c>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800297c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002980:	793b      	ldrb	r3, [r7, #4]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <runReport+0x70>)
 8002986:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = gAccel;        // Throttle data (0-255)
 8002988:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <runReport+0x74>)
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002992:	edc7 7a01 	vstr	s15, [r7, #4]
 8002996:	793b      	ldrb	r3, [r7, #4]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <runReport+0x70>)
 800299c:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = gBrake;           // Brake data (0-255)
 800299e:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <runReport+0x78>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80029ac:	793b      	ldrb	r3, [r7, #4]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <runReport+0x70>)
 80029b2:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 80029b4:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <runReport+0x70>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 80029ba:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <runReport+0x70>)
 80029bc:	2200      	movs	r2, #0
 80029be:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <runReport+0x70>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 80029c6:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <runReport+0x70>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	725a      	strb	r2, [r3, #9]
//	USBD_CUSTOM_HID_SendCustomReport((uint8_t *)&HIDReport, sizeof(HIDReport));
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20000768 	.word	0x20000768
 80029dc:	20000538 	.word	0x20000538
 80029e0:	20000764 	.word	0x20000764
 80029e4:	20000760 	.word	0x20000760

080029e8 <runCAN>:

void runCAN() {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b098      	sub	sp, #96	@ 0x60
 80029ec:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	// Create a telemetry_packet instance and initialize its fields
//	telemetry_packet dataToSend = {3600, 1, 120, 0, 0, 0, 45, 0}; DEBUG CODE
	telemetry_packet dataToSend = {3600, 1, gSteering, 0, 0, 0, 45, 0};
 80029ee:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	2301      	movs	r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	4b39      	ldr	r3, [pc, #228]	@ (8002ae0 <runCAN+0xf8>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a02:	ee17 3a90 	vmov	r3, s15
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	2300      	movs	r3, #0
 8002a12:	623b      	str	r3, [r7, #32]
 8002a14:	232d      	movs	r3, #45	@ 0x2d
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t* rawData = (uint8_t*)&dataToSend;
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Initialize CAN Header
	TxHeader.StdId = 0x100;           // CAN ID for the message
 8002a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
	TxHeader.ExtId = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
	TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
	TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 8002a30:	2300      	movs	r3, #0
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
	TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 8002a34:	2308      	movs	r3, #8
 8002a36:	643b      	str	r3, [r7, #64]	@ 0x40

	uint8_t frameData[8];             // Temporary buffer for each CAN frame

	// Calculate the size of the telemetry_packet struct
	int totalSize = sizeof(telemetry_packet);
 8002a38:	2320      	movs	r3, #32
 8002a3a:	657b      	str	r3, [r7, #84]	@ 0x54

	// Split the telemetry_packet into CAN frames
	for (int i = 0; i < totalSize; i += 8) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a40:	e044      	b.n	8002acc <runCAN+0xe4>
	    // Calculate the size of the current chunk (for the last frame)
	    int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 8002a42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	bfa8      	it	ge
 8002a4c:	2308      	movge	r3, #8
 8002a4e:	653b      	str	r3, [r7, #80]	@ 0x50

	    // Copy the next chunk of data into the frame buffer
	    memcpy(frameData, &rawData[i], chunkSize);
 8002a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a54:	18d1      	adds	r1, r2, r3
 8002a56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f010 f8e1 	bl	8012c22 <memcpy>

	    // Adjust DLC for the last frame
	    TxHeader.DLC = chunkSize;
 8002a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a62:	643b      	str	r3, [r7, #64]	@ 0x40

	    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, frameData, &TxMailbox);
 8002a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a68:	1d3a      	adds	r2, r7, #4
 8002a6a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002a6e:	481d      	ldr	r0, [pc, #116]	@ (8002ae4 <runCAN+0xfc>)
 8002a70:	f002 f9c0 	bl	8004df4 <HAL_CAN_AddTxMessage>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	    if (status != HAL_OK) {
 8002a7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01e      	beq.n	8002ac0 <runCAN+0xd8>
	        // Inspect the error
	        if (status == HAL_ERROR) {
 8002a82:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d103      	bne.n	8002a92 <runCAN+0xaa>
	            printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 8002a8a:	4817      	ldr	r0, [pc, #92]	@ (8002ae8 <runCAN+0x100>)
 8002a8c:	f00f fec2 	bl	8012814 <puts>
 8002a90:	e00e      	b.n	8002ab0 <runCAN+0xc8>
	        } else if (status == HAL_BUSY) {
 8002a92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d103      	bne.n	8002aa2 <runCAN+0xba>
	            printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 8002a9a:	4814      	ldr	r0, [pc, #80]	@ (8002aec <runCAN+0x104>)
 8002a9c:	f00f feba 	bl	8012814 <puts>
 8002aa0:	e006      	b.n	8002ab0 <runCAN+0xc8>
	        } else if (status == HAL_TIMEOUT) {
 8002aa2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d102      	bne.n	8002ab0 <runCAN+0xc8>
	            printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 8002aaa:	4811      	ldr	r0, [pc, #68]	@ (8002af0 <runCAN+0x108>)
 8002aac:	f00f feb2 	bl	8012814 <puts>
	        }

	        // Optionally log the state of CAN error counters
	        uint32_t error = HAL_CAN_GetError(&hcan1);
 8002ab0:	480c      	ldr	r0, [pc, #48]	@ (8002ae4 <runCAN+0xfc>)
 8002ab2:	f002 fe04 	bl	80056be <HAL_CAN_GetError>
 8002ab6:	64b8      	str	r0, [r7, #72]	@ 0x48
	        printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 8002ab8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002aba:	480e      	ldr	r0, [pc, #56]	@ (8002af4 <runCAN+0x10c>)
 8002abc:	f00f fe42 	bl	8012744 <iprintf>
	    }
	    HAL_Delay(1);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f001 fb43 	bl	800414c <HAL_Delay>
	for (int i = 0; i < totalSize; i += 8) {
 8002ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac8:	3308      	adds	r3, #8
 8002aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002acc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	dbb6      	blt.n	8002a42 <runCAN+0x5a>
	}

	releaseSPI();
 8002ad4:	f000 fb00 	bl	80030d8 <releaseSPI>
}
 8002ad8:	bf00      	nop
 8002ada:	3760      	adds	r7, #96	@ 0x60
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000768 	.word	0x20000768
 8002ae4:	200004f0 	.word	0x200004f0
 8002ae8:	08014a3c 	.word	0x08014a3c
 8002aec:	08014a64 	.word	0x08014a64
 8002af0:	08014a8c 	.word	0x08014a8c
 8002af4:	08014ab8 	.word	0x08014ab8

08002af8 <runUART>:

void runUART() {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	// Process the command received via UART
	process_command(gCommandData);
 8002afc:	4805      	ldr	r0, [pc, #20]	@ (8002b14 <runUART+0x1c>)
 8002afe:	f7ff fe77 	bl	80027f0 <process_command>
	// Re-enable UART reception
	HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 8002b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b06:	4904      	ldr	r1, [pc, #16]	@ (8002b18 <runUART+0x20>)
 8002b08:	4804      	ldr	r0, [pc, #16]	@ (8002b1c <runUART+0x24>)
 8002b0a:	f006 fdd2 	bl	80096b2 <HAL_UART_Receive_IT>
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000644 	.word	0x20000644
 8002b18:	20000544 	.word	0x20000544
 8002b1c:	20000b44 	.word	0x20000b44

08002b20 <constrain>:

    // Calculate the oscillation value using a sine wave
    return sin((2 * M_PI * elapsed_time) / period);
}

float constrain(float x, float lower, float upper) {
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b2e:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < lower) return lower;
 8002b32:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	d501      	bpl.n	8002b48 <constrain+0x28>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	e00b      	b.n	8002b60 <constrain+0x40>
    if (x > upper) return upper;
 8002b48:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b58:	dd01      	ble.n	8002b5e <constrain+0x3e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	e000      	b.n	8002b60 <constrain+0x40>
    return x;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eeb0 0a67 	vmov.f32	s0, s15
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <calculate_inertia>:

float calculate_inertia(float force_feedback, float angular_velocity) {
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b7e:	edc7 0a00 	vstr	s1, [r7]
    static float previous_output = 0;
    float inertia_coefficient = 0.1; // Fine-tune for feel
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <calculate_inertia+0x58>)
 8002b84:	60fb      	str	r3, [r7, #12]
    float inertia_force = inertia_coefficient * previous_output + (1 - inertia_coefficient) * force_feedback;
 8002b86:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <calculate_inertia+0x5c>)
 8002b88:	ed93 7a00 	vldr	s14, [r3]
 8002b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ba0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bac:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_output = inertia_force;
 8002bb0:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <calculate_inertia+0x5c>)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6013      	str	r3, [r2, #0]
    return inertia_force;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	ee07 3a90 	vmov	s15, r3
}
 8002bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	3dcccccd 	.word	0x3dcccccd
 8002bd0:	20000a4c 	.word	0x20000a4c

08002bd4 <calculate_damping>:

float calculate_damping(float angular_velocity) {
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	ed87 0a01 	vstr	s0, [r7, #4]
    float damping_coefficient = 0.05;
 8002bde:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <calculate_damping+0x2c>)
 8002be0:	60fb      	str	r3, [r7, #12]
    return -damping_coefficient * angular_velocity;
 8002be2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be6:	eeb1 7a67 	vneg.f32	s14, s15
 8002bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	3d4ccccd 	.word	0x3d4ccccd

08002c04 <calculate_friction>:

float calculate_friction(float angular_velocity) {
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	ed87 0a01 	vstr	s0, [r7, #4]
    float friction_coefficient = 0.02;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <calculate_friction+0x4c>)
 8002c10:	60fb      	str	r3, [r7, #12]
    if (angular_velocity > 0) {
 8002c12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	dd04      	ble.n	8002c2a <calculate_friction+0x26>
        return -friction_coefficient;
 8002c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c24:	eef1 7a67 	vneg.f32	s15, s15
 8002c28:	e00b      	b.n	8002c42 <calculate_friction+0x3e>
    } else if (angular_velocity < 0) {
 8002c2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	d502      	bpl.n	8002c3e <calculate_friction+0x3a>
        return friction_coefficient;
 8002c38:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c3c:	e001      	b.n	8002c42 <calculate_friction+0x3e>
    } else {
        return 0;
 8002c3e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002c54 <calculate_friction+0x50>
    }
}
 8002c42:	eeb0 0a67 	vmov.f32	s0, s15
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	3ca3d70a 	.word	0x3ca3d70a
 8002c54:	00000000 	.word	0x00000000

08002c58 <calculate_lock>:

float calculate_lock(float angle) {
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	ed87 0a01 	vstr	s0, [r7, #4]
    float lock_coefficient = 1.0;
 8002c62:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002c66:	60fb      	str	r3, [r7, #12]
    float max_angle = 450.0;
 8002c68:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <calculate_lock+0x84>)
 8002c6a:	60bb      	str	r3, [r7, #8]
    if (angle > max_angle) {
 8002c6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	dd0c      	ble.n	8002c98 <calculate_lock+0x40>
        return -lock_coefficient * (angle - max_angle);
 8002c7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c82:	eeb1 7a67 	vneg.f32	s14, s15
 8002c86:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c96:	e019      	b.n	8002ccc <calculate_lock+0x74>
    } else if (angle < -max_angle) {
 8002c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c9c:	eef1 7a67 	vneg.f32	s15, s15
 8002ca0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	d50c      	bpl.n	8002cc8 <calculate_lock+0x70>
        return -lock_coefficient * (angle + max_angle);
 8002cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cb2:	eeb1 7a67 	vneg.f32	s14, s15
 8002cb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8002cba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	e001      	b.n	8002ccc <calculate_lock+0x74>
    }
    return 0;
 8002cc8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002ce0 <calculate_lock+0x88>
}
 8002ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	43e10000 	.word	0x43e10000
 8002ce0:	00000000 	.word	0x00000000

08002ce4 <scale_to_pwm>:

float scale_to_pwm(float total_force) {
 8002ce4:	b5b0      	push	{r4, r5, r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	ed87 0a01 	vstr	s0, [r7, #4]
    const float MIN_PWM = 50.0f;    // Minimum PWM value for the motor to start moving
 8002cee:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <scale_to_pwm+0xb8>)
 8002cf0:	617b      	str	r3, [r7, #20]
    const float MAX_PWM = 255.0f;   // Maximum PWM value
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <scale_to_pwm+0xbc>)
 8002cf4:	613b      	str	r3, [r7, #16]

    // If total_force is zero, return zero PWM output
    if (total_force == 0.0f) {
 8002cf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	d106      	bne.n	8002d12 <scale_to_pwm+0x2e>
        gPWM = 0.0f;
 8002d04:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <scale_to_pwm+0xc0>)
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
        return 0.0f;
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e03c      	b.n	8002d8c <scale_to_pwm+0xa8>
    }

    // Calculate PWM output
    float pwm_output = fabs(total_force) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 8002d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d16:	eef0 7ae7 	vabs.f32	s15, s15
 8002d1a:	ee17 0a90 	vmov	r0, s15
 8002d1e:	f7fd fc43 	bl	80005a8 <__aeabi_f2d>
 8002d22:	4604      	mov	r4, r0
 8002d24:	460d      	mov	r5, r1
 8002d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d32:	ee17 0a90 	vmov	r0, s15
 8002d36:	f7fd fc37 	bl	80005a8 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4620      	mov	r0, r4
 8002d40:	4629      	mov	r1, r5
 8002d42:	f7fd fc89 	bl	8000658 <__aeabi_dmul>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4614      	mov	r4, r2
 8002d4c:	461d      	mov	r5, r3
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f7fd fc2a 	bl	80005a8 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4620      	mov	r0, r4
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	f7fd fac6 	bl	80002ec <__adddf3>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff58 	bl	8000c1c <__aeabi_d2f>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60fb      	str	r3, [r7, #12]

    // Constrain PWM output to valid range
    pwm_output = constrain(pwm_output, MIN_PWM, MAX_PWM);
 8002d70:	ed97 1a04 	vldr	s2, [r7, #16]
 8002d74:	edd7 0a05 	vldr	s1, [r7, #20]
 8002d78:	ed97 0a03 	vldr	s0, [r7, #12]
 8002d7c:	f7ff fed0 	bl	8002b20 <constrain>
 8002d80:	ed87 0a03 	vstr	s0, [r7, #12]

    // Update debug variable
    gPWM = pwm_output;
 8002d84:	4a07      	ldr	r2, [pc, #28]	@ (8002da4 <scale_to_pwm+0xc0>)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6013      	str	r3, [r2, #0]

    return pwm_output;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eeb0 0a67 	vmov.f32	s0, s15
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	42480000 	.word	0x42480000
 8002da0:	437f0000 	.word	0x437f0000
 8002da4:	20000744 	.word	0x20000744

08002da8 <map_wheel_position_to_axis>:

uint8_t map_wheel_position_to_axis(int32_t position) {
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    int32_t min_position = -450;
 8002db0:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <map_wheel_position_to_axis+0x60>)
 8002db2:	60fb      	str	r3, [r7, #12]
    int32_t max_position = 450;
 8002db4:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8002db8:	60bb      	str	r3, [r7, #8]

    // Clamp the position to the valid range
	if (position < min_position) {
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	da02      	bge.n	8002dc8 <map_wheel_position_to_axis+0x20>
		position = min_position;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	e005      	b.n	8002dd4 <map_wheel_position_to_axis+0x2c>
	} else if (position > max_position) {
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	dd01      	ble.n	8002dd4 <map_wheel_position_to_axis+0x2c>
		position = max_position;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	607b      	str	r3, [r7, #4]
	}

	// Reverse the mapping
	return (uint8_t)((((max_position - position) * 255) + (max_position - min_position) / 2) / (max_position - min_position));
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	1ad2      	subs	r2, r2, r3
 8002dda:	4613      	mov	r3, r2
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	1a9a      	subs	r2, r3, r2
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1acb      	subs	r3, r1, r3
 8002de6:	0fd9      	lsrs	r1, r3, #31
 8002de8:	440b      	add	r3, r1
 8002dea:	105b      	asrs	r3, r3, #1
 8002dec:	441a      	add	r2, r3
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1acb      	subs	r3, r1, r3
 8002df4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002df8:	b2db      	uxtb	r3, r3
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	fffffe3e 	.word	0xfffffe3e

08002e0c <init_encoder>:

extern void init_encoder() {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002e10:	213c      	movs	r1, #60	@ 0x3c
 8002e12:	4803      	ldr	r0, [pc, #12]	@ (8002e20 <init_encoder+0x14>)
 8002e14:	f005 fdf8 	bl	8008a08 <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 8002e18:	f000 f812 	bl	8002e40 <reset_encoder_position>
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000ab4 	.word	0x20000ab4

08002e24 <read_encoder_position>:

int16_t read_encoder_position() {
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
 8002e28:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <read_encoder_position+0x18>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	b21b      	sxth	r3, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000ab4 	.word	0x20000ab4

08002e40 <reset_encoder_position>:

void reset_encoder_position() {
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 8002e44:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <reset_encoder_position+0x18>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000ab4 	.word	0x20000ab4

08002e5c <get_angle_degrees>:

float get_angle_degrees() {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
    int16_t position = read_encoder_position();
 8002e62:	f7ff ffdf 	bl	8002e24 <read_encoder_position>
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
    gPosition = position;
 8002e6a:	4a12      	ldr	r2, [pc, #72]	@ (8002eb4 <get_angle_degrees+0x58>)
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	8013      	strh	r3, [r2, #0]
    return (position * 360.0) / ENCODER_RESOLUTION;
 8002e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb85 	bl	8000584 <__aeabi_i2d>
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <get_angle_degrees+0x5c>)
 8002e80:	f7fd fbea 	bl	8000658 <__aeabi_dmul>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <get_angle_degrees+0x60>)
 8002e92:	f7fd fd0b 	bl	80008ac <__aeabi_ddiv>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd febd 	bl	8000c1c <__aeabi_d2f>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	ee07 3a90 	vmov	s15, r3
}
 8002ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000750 	.word	0x20000750
 8002eb8:	40768000 	.word	0x40768000
 8002ebc:	40a2c000 	.word	0x40a2c000

08002ec0 <update_wheel_position_and_velocity>:

void update_wheel_position_and_velocity(float *wheel_angle, float *angular_velocity) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
    // Get the current encoder count
    float current_angle = get_angle_degrees();
 8002eca:	f7ff ffc7 	bl	8002e5c <get_angle_degrees>
 8002ece:	ed87 0a04 	vstr	s0, [r7, #16]

    // Calculate time difference (in seconds) since the last update
    uint32_t current_time = HAL_GetTick();  // In milliseconds
 8002ed2:	f001 f92f 	bl	8004134 <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]
    float dt = (current_time - last_update_time) / 1000.0f;  // Convert ms to seconds
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ee2:	4b40      	ldr	r3, [pc, #256]	@ (8002fe4 <update_wheel_position_and_velocity+0x124>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002eec:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002fe8 <update_wheel_position_and_velocity+0x128>
 8002ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ef4:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the change in angle
    float delta_angle = current_angle - last_encoder_count;
 8002ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fec <update_wheel_position_and_velocity+0x12c>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f06:	edc7 7a05 	vstr	s15, [r7, #20]

    // Implement a threshold to ignore small changes
    if (fabs(delta_angle) < 0.25f) {  // Adjust the threshold as needed
 8002f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f0e:	eef0 7ae7 	vabs.f32	s15, s15
 8002f12:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8002f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	d502      	bpl.n	8002f26 <update_wheel_position_and_velocity+0x66>
        delta_angle = 0.0f;
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
    }

    // Update the wheel angle, keeping within the lock limit
    *wheel_angle += delta_angle;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	ed93 7a00 	vldr	s14, [r3]
 8002f2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	edc3 7a00 	vstr	s15, [r3]
    if (*wheel_angle > WHEEL_MAX_ANGLE) *wheel_angle = WHEEL_MAX_ANGLE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002ff0 <update_wheel_position_and_velocity+0x130>
 8002f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	dd02      	ble.n	8002f54 <update_wheel_position_and_velocity+0x94>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a28      	ldr	r2, [pc, #160]	@ (8002ff4 <update_wheel_position_and_velocity+0x134>)
 8002f52:	601a      	str	r2, [r3, #0]
    if (*wheel_angle < -WHEEL_MAX_ANGLE) *wheel_angle = -WHEEL_MAX_ANGLE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002ff8 <update_wheel_position_and_velocity+0x138>
 8002f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	d502      	bpl.n	8002f6e <update_wheel_position_and_velocity+0xae>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a24      	ldr	r2, [pc, #144]	@ (8002ffc <update_wheel_position_and_velocity+0x13c>)
 8002f6c:	601a      	str	r2, [r3, #0]

    gDelta = delta_angle;
 8002f6e:	4a24      	ldr	r2, [pc, #144]	@ (8003000 <update_wheel_position_and_velocity+0x140>)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	6013      	str	r3, [r2, #0]
    // Calculate angular velocity (degrees per second)
    if (dt > 0.0001f) {  // Avoid division by zero
 8002f74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f78:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003004 <update_wheel_position_and_velocity+0x144>
 8002f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	dd09      	ble.n	8002f9a <update_wheel_position_and_velocity+0xda>
        *angular_velocity = delta_angle / dt;
 8002f86:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	edc3 7a00 	vstr	s15, [r3]
 8002f98:	e003      	b.n	8002fa2 <update_wheel_position_and_velocity+0xe2>
    } else {
        *angular_velocity = 0.0f;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
    }

    // Store the current values for the next update
    last_encoder_count = current_angle;
 8002fa2:	4a12      	ldr	r2, [pc, #72]	@ (8002fec <update_wheel_position_and_velocity+0x12c>)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	6013      	str	r3, [r2, #0]
    last_update_time = current_time;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <update_wheel_position_and_velocity+0x124>)
 8002fb4:	edc3 7a00 	vstr	s15, [r3]

    gSteering = map_wheel_position_to_axis(*wheel_angle);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc2:	ee17 0a90 	vmov	r0, s15
 8002fc6:	f7ff feef 	bl	8002da8 <map_wheel_position_to_axis>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003008 <update_wheel_position_and_velocity+0x148>)
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000794 	.word	0x20000794
 8002fe8:	447a0000 	.word	0x447a0000
 8002fec:	20000790 	.word	0x20000790
 8002ff0:	43e10000 	.word	0x43e10000
 8002ff4:	43e10000 	.word	0x43e10000
 8002ff8:	c3e10000 	.word	0xc3e10000
 8002ffc:	c3e10000 	.word	0xc3e10000
 8003000:	2000075c 	.word	0x2000075c
 8003004:	38d1b717 	.word	0x38d1b717
 8003008:	20000768 	.word	0x20000768
 800300c:	00000000 	.word	0x00000000

08003010 <set_motor_pwm>:


void set_motor_pwm(float pwm_value) {
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
    // Assuming pwm_value ranges from 0 to 255
    uint32_t pulse = (uint32_t)((pwm_value / 255.0) * htim3.Init.Period);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd fac4 	bl	80005a8 <__aeabi_f2d>
 8003020:	a312      	add	r3, pc, #72	@ (adr r3, 800306c <set_motor_pwm+0x5c>)
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f7fd fc41 	bl	80008ac <__aeabi_ddiv>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4614      	mov	r4, r2
 8003030:	461d      	mov	r5, r3
 8003032:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <set_motor_pwm+0x58>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa94 	bl	8000564 <__aeabi_ui2d>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4620      	mov	r0, r4
 8003042:	4629      	mov	r1, r5
 8003044:	f7fd fb08 	bl	8000658 <__aeabi_dmul>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f7fd fdc4 	bl	8000bdc <__aeabi_d2uiz>
 8003054:	4603      	mov	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <set_motor_pwm+0x58>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bdb0      	pop	{r4, r5, r7, pc}
 8003068:	20000afc 	.word	0x20000afc
 800306c:	00000000 	.word	0x00000000
 8003070:	406fe000 	.word	0x406fe000

08003074 <set_motor_direction>:

void set_motor_direction(uint8_t direction) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
    if (direction == 1) { // Forward
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10a      	bne.n	800309a <set_motor_direction+0x26>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // IN1 = HIGH
 8003084:	2201      	movs	r2, #1
 8003086:	2102      	movs	r1, #2
 8003088:	4812      	ldr	r0, [pc, #72]	@ (80030d4 <set_motor_direction+0x60>)
 800308a:	f002 fe2d 	bl	8005ce8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // IN2 = LOW
 800308e:	2200      	movs	r2, #0
 8003090:	2104      	movs	r1, #4
 8003092:	4810      	ldr	r0, [pc, #64]	@ (80030d4 <set_motor_direction+0x60>)
 8003094:	f002 fe28 	bl	8005ce8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
    } else { // Stop
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
    }
}
 8003098:	e017      	b.n	80030ca <set_motor_direction+0x56>
    } else if (direction == 0) { // Reverse
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <set_motor_direction+0x42>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // IN1 = LOW
 80030a0:	2200      	movs	r2, #0
 80030a2:	2102      	movs	r1, #2
 80030a4:	480b      	ldr	r0, [pc, #44]	@ (80030d4 <set_motor_direction+0x60>)
 80030a6:	f002 fe1f 	bl	8005ce8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
 80030aa:	2201      	movs	r2, #1
 80030ac:	2104      	movs	r1, #4
 80030ae:	4809      	ldr	r0, [pc, #36]	@ (80030d4 <set_motor_direction+0x60>)
 80030b0:	f002 fe1a 	bl	8005ce8 <HAL_GPIO_WritePin>
}
 80030b4:	e009      	b.n	80030ca <set_motor_direction+0x56>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
 80030b6:	2200      	movs	r2, #0
 80030b8:	2102      	movs	r1, #2
 80030ba:	4806      	ldr	r0, [pc, #24]	@ (80030d4 <set_motor_direction+0x60>)
 80030bc:	f002 fe14 	bl	8005ce8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
 80030c0:	2200      	movs	r2, #0
 80030c2:	2104      	movs	r1, #4
 80030c4:	4803      	ldr	r0, [pc, #12]	@ (80030d4 <set_motor_direction+0x60>)
 80030c6:	f002 fe0f 	bl	8005ce8 <HAL_GPIO_WritePin>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40020400 	.word	0x40020400

080030d8 <releaseSPI>:

extern void releaseSPI() {
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	// Process the received data (rx_buffer)
	memcpy(gCommandData, rx_buffer, sizeof(rx_buffer));
 80030dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <releaseSPI+0x30>)
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <releaseSPI+0x34>)
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030e8:	461a      	mov	r2, r3
 80030ea:	f00f fd9a 	bl	8012c22 <memcpy>
	osSemaphoreRelease(spiSendMutexHandle);
 80030ee:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <releaseSPI+0x38>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f00c f87e 	bl	800f1f4 <osSemaphoreRelease>
	// Clear the buffer for the next message
	memset(rx_buffer, 0, BUFFER_SIZE);
 80030f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030fc:	2100      	movs	r1, #0
 80030fe:	4803      	ldr	r0, [pc, #12]	@ (800310c <releaseSPI+0x34>)
 8003100:	f00f fc9c 	bl	8012a3c <memset>
}
 8003104:	bf00      	nop
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000644 	.word	0x20000644
 800310c:	20000544 	.word	0x20000544
 8003110:	200007a4 	.word	0x200007a4

08003114 <signalTelemetryTask>:

extern void signalTelemetryTask() {
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
    // Pull CS line high to deselect the slave
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003118:	2201      	movs	r2, #1
 800311a:	2110      	movs	r1, #16
 800311c:	4806      	ldr	r0, [pc, #24]	@ (8003138 <signalTelemetryTask+0x24>)
 800311e:	f002 fde3 	bl	8005ce8 <HAL_GPIO_WritePin>
    DWT_Delay_us(2);
 8003122:	2002      	movs	r0, #2
 8003124:	f7ff fb3e 	bl	80027a4 <DWT_Delay_us>
    osSemaphoreRelease(uartMutexHandle);
 8003128:	4b04      	ldr	r3, [pc, #16]	@ (800313c <signalTelemetryTask+0x28>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f00c f861 	bl	800f1f4 <osSemaphoreRelease>
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40020000 	.word	0x40020000
 800313c:	200007a8 	.word	0x200007a8

08003140 <restartUart>:

extern void restartUart(UART_HandleTypeDef *huart) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 8003148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800314c:	4903      	ldr	r1, [pc, #12]	@ (800315c <restartUart+0x1c>)
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f006 faaf 	bl	80096b2 <HAL_UART_Receive_IT>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000544 	.word	0x20000544

08003160 <read_hall_sensor>:

    // Stop Motor
    set_motor_pwm(0);
}

float read_hall_sensor() {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 800316a:	481b      	ldr	r0, [pc, #108]	@ (80031d8 <read_hall_sensor+0x78>)
 800316c:	f001 f856 	bl	800421c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	4818      	ldr	r0, [pc, #96]	@ (80031d8 <read_hall_sensor+0x78>)
 8003176:	f001 f956 	bl	8004426 <HAL_ADC_PollForConversion>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <read_hall_sensor+0x28>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8003180:	4815      	ldr	r0, [pc, #84]	@ (80031d8 <read_hall_sensor+0x78>)
 8003182:	f001 f9db 	bl	800453c <HAL_ADC_GetValue>
 8003186:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 8003188:	4813      	ldr	r0, [pc, #76]	@ (80031d8 <read_hall_sensor+0x78>)
 800318a:	f001 f919 	bl	80043c0 <HAL_ADC_Stop>
    return (adc_value * ADC_MAX_VOLTAGE) / ADC_RESOLUTION;
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd f9e8 	bl	8000564 <__aeabi_ui2d>
 8003194:	a30e      	add	r3, pc, #56	@ (adr r3, 80031d0 <read_hall_sensor+0x70>)
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f7fd fa5d 	bl	8000658 <__aeabi_dmul>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <read_hall_sensor+0x7c>)
 80031ac:	f7fd fb7e 	bl	80008ac <__aeabi_ddiv>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7fd fd30 	bl	8000c1c <__aeabi_d2f>
 80031bc:	4603      	mov	r3, r0
 80031be:	ee07 3a90 	vmov	s15, r3
}
 80031c2:	eeb0 0a67 	vmov.f32	s0, s15
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	f3af 8000 	nop.w
 80031d0:	9999999a 	.word	0x9999999a
 80031d4:	40139999 	.word	0x40139999
 80031d8:	200004a8 	.word	0x200004a8
 80031dc:	40b00000 	.word	0x40b00000

080031e0 <processCAN>:
//	} else {
//		printf("Failed to receive CAN message\n");
//	}
//}

void processCAN() {
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b08d      	sub	sp, #52	@ 0x34
 80031e4:	af02      	add	r7, sp, #8
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];  // Buffer to store the received data

    // Optional: Check FIFO1 if used
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 80031e6:	e083      	b.n	80032f0 <processCAN+0x110>
        if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 80031e8:	463b      	mov	r3, r7
 80031ea:	f107 0208 	add.w	r2, r7, #8
 80031ee:	2101      	movs	r1, #1
 80031f0:	4846      	ldr	r0, [pc, #280]	@ (800330c <processCAN+0x12c>)
 80031f2:	f001 fecf 	bl	8004f94 <HAL_CAN_GetRxMessage>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d176      	bne.n	80032ea <processCAN+0x10a>
            // Process the received message
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 80031fc:	68b9      	ldr	r1, [r7, #8]
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 80031fe:	783b      	ldrb	r3, [r7, #0]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8003200:	4618      	mov	r0, r3
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 8003202:	787b      	ldrb	r3, [r7, #1]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8003204:	461c      	mov	r4, r3
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 8003206:	78bb      	ldrb	r3, [r7, #2]
 8003208:	78fa      	ldrb	r2, [r7, #3]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 800320a:	9201      	str	r2, [sp, #4]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	4623      	mov	r3, r4
 8003210:	4602      	mov	r2, r0
 8003212:	483f      	ldr	r0, [pc, #252]	@ (8003310 <processCAN+0x130>)
 8003214:	f00f fa96 	bl	8012744 <iprintf>
            if (rxHeader.StdId == 0x101) {
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f240 1201 	movw	r2, #257	@ 0x101
 800321e:	4293      	cmp	r3, r2
 8003220:	d12e      	bne.n	8003280 <processCAN+0xa0>
				static uint8_t buffer[sizeof(user_input_data_t)];
				static uint8_t offset = 0;

				// Copy received data into buffer
				uint8_t bytesToCopy = (rxHeader.DLC < sizeof(user_input_data_t) - offset) ? rxHeader.DLC : sizeof(user_input_data_t) - offset;
 8003222:	4b3c      	ldr	r3, [pc, #240]	@ (8003314 <processCAN+0x134>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	f1c3 020a 	rsb	r2, r3, #10
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4293      	cmp	r3, r2
 800322e:	bf28      	it	cs
 8003230:	4613      	movcs	r3, r2
 8003232:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				memcpy(&buffer[offset], rxData, bytesToCopy);
 8003236:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <processCAN+0x134>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	4b36      	ldr	r3, [pc, #216]	@ (8003318 <processCAN+0x138>)
 800323e:	4413      	add	r3, r2
 8003240:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003244:	4639      	mov	r1, r7
 8003246:	4618      	mov	r0, r3
 8003248:	f00f fceb 	bl	8012c22 <memcpy>
				offset += bytesToCopy;
 800324c:	4b31      	ldr	r3, [pc, #196]	@ (8003314 <processCAN+0x134>)
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003254:	4413      	add	r3, r2
 8003256:	b2da      	uxtb	r2, r3
 8003258:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <processCAN+0x134>)
 800325a:	701a      	strb	r2, [r3, #0]

				// Check if the entire packet has been received
				if (offset >= sizeof(user_input_data_t)) {
 800325c:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <processCAN+0x134>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b09      	cmp	r3, #9
 8003262:	d945      	bls.n	80032f0 <processCAN+0x110>
					// Copy buffer into the telemetry_packet struct
					memcpy(&gUserInputData, buffer, sizeof(user_input_data_t));
 8003264:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <processCAN+0x13c>)
 8003266:	4a2c      	ldr	r2, [pc, #176]	@ (8003318 <processCAN+0x138>)
 8003268:	ca07      	ldmia	r2, {r0, r1, r2}
 800326a:	c303      	stmia	r3!, {r0, r1}
 800326c:	801a      	strh	r2, [r3, #0]
					offset = 0; // Reset offset for the next packet
 800326e:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <processCAN+0x134>)
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
					gDebugCounter1++;
 8003274:	4b2a      	ldr	r3, [pc, #168]	@ (8003320 <processCAN+0x140>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a29      	ldr	r2, [pc, #164]	@ (8003320 <processCAN+0x140>)
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e037      	b.n	80032f0 <processCAN+0x110>
					// Process the received telemetry data
//					ProcessTelemetryData(&gReceivedTelemetry);
				}
			}
            else if (rxHeader.StdId == 0x102) {
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003286:	d133      	bne.n	80032f0 <processCAN+0x110>
				static uint8_t buffer[sizeof(pedal_data_t)];
				static uint8_t offset = 0;

				// Copy received data into buffer
				uint8_t bytesToCopy = (rxHeader.DLC < sizeof(pedal_data_t) - offset) ? rxHeader.DLC : sizeof(pedal_data_t) - offset;
 8003288:	4b26      	ldr	r3, [pc, #152]	@ (8003324 <processCAN+0x144>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	f1c3 0206 	rsb	r2, r3, #6
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	4293      	cmp	r3, r2
 8003294:	bf28      	it	cs
 8003296:	4613      	movcs	r3, r2
 8003298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				memcpy(&buffer[offset], rxData, bytesToCopy);
 800329c:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <processCAN+0x144>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b21      	ldr	r3, [pc, #132]	@ (8003328 <processCAN+0x148>)
 80032a4:	4413      	add	r3, r2
 80032a6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80032aa:	4639      	mov	r1, r7
 80032ac:	4618      	mov	r0, r3
 80032ae:	f00f fcb8 	bl	8012c22 <memcpy>
				offset += bytesToCopy;
 80032b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003324 <processCAN+0x144>)
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032ba:	4413      	add	r3, r2
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <processCAN+0x144>)
 80032c0:	701a      	strb	r2, [r3, #0]

				// Check if the entire packet has been received
				if (offset >= sizeof(pedal_data_t)) {
 80032c2:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <processCAN+0x144>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d912      	bls.n	80032f0 <processCAN+0x110>
					// Copy buffer into the telemetry_packet struct
					memcpy(&gPedalData, buffer, sizeof(pedal_data_t));
 80032ca:	4b18      	ldr	r3, [pc, #96]	@ (800332c <processCAN+0x14c>)
 80032cc:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <processCAN+0x148>)
 80032ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032d2:	6018      	str	r0, [r3, #0]
 80032d4:	3304      	adds	r3, #4
 80032d6:	8019      	strh	r1, [r3, #0]
					offset = 0; // Reset offset for the next packet
 80032d8:	4b12      	ldr	r3, [pc, #72]	@ (8003324 <processCAN+0x144>)
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
					gDebugCounter2++;
 80032de:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <processCAN+0x150>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <processCAN+0x150>)
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e002      	b.n	80032f0 <processCAN+0x110>
//					ProcessTelemetryData(&gReceivedTelemetry);
				}
			}

        } else {
            printf("Failed to retrieve CAN message\n");
 80032ea:	4812      	ldr	r0, [pc, #72]	@ (8003334 <processCAN+0x154>)
 80032ec:	f00f fa92 	bl	8012814 <puts>
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 80032f0:	2101      	movs	r1, #1
 80032f2:	4806      	ldr	r0, [pc, #24]	@ (800330c <processCAN+0x12c>)
 80032f4:	f001 ff70 	bl	80051d8 <HAL_CAN_GetRxFifoFillLevel>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f47f af74 	bne.w	80031e8 <processCAN+0x8>
        }
    }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	372c      	adds	r7, #44	@ 0x2c
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}
 800330a:	bf00      	nop
 800330c:	200004f0 	.word	0x200004f0
 8003310:	08014ad4 	.word	0x08014ad4
 8003314:	20000a50 	.word	0x20000a50
 8003318:	20000a54 	.word	0x20000a54
 800331c:	20000770 	.word	0x20000770
 8003320:	20000784 	.word	0x20000784
 8003324:	20000a5e 	.word	0x20000a5e
 8003328:	20000a60 	.word	0x20000a60
 800332c:	2000077c 	.word	0x2000077c
 8003330:	20000788 	.word	0x20000788
 8003334:	08014b14 	.word	0x08014b14

08003338 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA9   ------> SPI2_SCK
*/
void MX_GPIO_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	@ 0x28
 800333c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	60da      	str	r2, [r3, #12]
 800334c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	4b3f      	ldr	r3, [pc, #252]	@ (8003450 <MX_GPIO_Init+0x118>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	4a3e      	ldr	r2, [pc, #248]	@ (8003450 <MX_GPIO_Init+0x118>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	6313      	str	r3, [r2, #48]	@ 0x30
 800335e:	4b3c      	ldr	r3, [pc, #240]	@ (8003450 <MX_GPIO_Init+0x118>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b38      	ldr	r3, [pc, #224]	@ (8003450 <MX_GPIO_Init+0x118>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	4a37      	ldr	r2, [pc, #220]	@ (8003450 <MX_GPIO_Init+0x118>)
 8003374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003378:	6313      	str	r3, [r2, #48]	@ 0x30
 800337a:	4b35      	ldr	r3, [pc, #212]	@ (8003450 <MX_GPIO_Init+0x118>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <MX_GPIO_Init+0x118>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	4a30      	ldr	r2, [pc, #192]	@ (8003450 <MX_GPIO_Init+0x118>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6313      	str	r3, [r2, #48]	@ 0x30
 8003396:	4b2e      	ldr	r3, [pc, #184]	@ (8003450 <MX_GPIO_Init+0x118>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003450 <MX_GPIO_Init+0x118>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	4a29      	ldr	r2, [pc, #164]	@ (8003450 <MX_GPIO_Init+0x118>)
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b2:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <MX_GPIO_Init+0x118>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80033be:	2200      	movs	r2, #0
 80033c0:	2130      	movs	r1, #48	@ 0x30
 80033c2:	4824      	ldr	r0, [pc, #144]	@ (8003454 <MX_GPIO_Init+0x11c>)
 80033c4:	f002 fc90 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80033c8:	2200      	movs	r2, #0
 80033ca:	2106      	movs	r1, #6
 80033cc:	4822      	ldr	r0, [pc, #136]	@ (8003458 <MX_GPIO_Init+0x120>)
 80033ce:	f002 fc8b 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	4619      	mov	r1, r3
 80033e8:	481c      	ldr	r0, [pc, #112]	@ (800345c <MX_GPIO_Init+0x124>)
 80033ea:	f002 fae9 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80033ee:	2330      	movs	r3, #48	@ 0x30
 80033f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	f107 0314 	add.w	r3, r7, #20
 8003402:	4619      	mov	r1, r3
 8003404:	4813      	ldr	r0, [pc, #76]	@ (8003454 <MX_GPIO_Init+0x11c>)
 8003406:	f002 fadb 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800340a:	2306      	movs	r3, #6
 800340c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340e:	2301      	movs	r3, #1
 8003410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	480d      	ldr	r0, [pc, #52]	@ (8003458 <MX_GPIO_Init+0x120>)
 8003422:	f002 facd 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800342a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003438:	2305      	movs	r3, #5
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4619      	mov	r1, r3
 8003442:	4804      	ldr	r0, [pc, #16]	@ (8003454 <MX_GPIO_Init+0x11c>)
 8003444:	f002 fabc 	bl	80059c0 <HAL_GPIO_Init>

}
 8003448:	bf00      	nop
 800344a:	3728      	adds	r7, #40	@ 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	40020000 	.word	0x40020000
 8003458:	40020400 	.word	0x40020400
 800345c:	40020800 	.word	0x40020800

08003460 <send_response>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_response(const char* str) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <send_response+0x28>
        return; // Handle null pointer case if necessary
    }

    // Calculate the length of the string
    uint16_t len = strlen(str);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fc fed8 	bl	8000224 <strlen>
 8003474:	4603      	mov	r3, r0
 8003476:	81fb      	strh	r3, [r7, #14]

    // Transmit the string using HAL_UART_Transmit
    HAL_UART_Transmit(&huart2, (uint8_t*)str, len, HAL_MAX_DELAY);
 8003478:	89fa      	ldrh	r2, [r7, #14]
 800347a:	f04f 33ff 	mov.w	r3, #4294967295
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4803      	ldr	r0, [pc, #12]	@ (8003490 <send_response+0x30>)
 8003482:	f006 f88b 	bl	800959c <HAL_UART_Transmit>
 8003486:	e000      	b.n	800348a <send_response+0x2a>
        return; // Handle null pointer case if necessary
 8003488:	bf00      	nop
}
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000b44 	.word	0x20000b44

08003494 <_write>:

int _write(int file, char *data, int len) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
    // Replace 'huart2' with your specific UART handle (e.g., 'huart1', 'huart3', etc.)
    HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	f04f 33ff 	mov.w	r3, #4294967295
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4804      	ldr	r0, [pc, #16]	@ (80034bc <_write+0x28>)
 80034ac:	f006 f876 	bl	800959c <HAL_UART_Transmit>
    return len;
 80034b0:	687b      	ldr	r3, [r7, #4]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000b44 	.word	0x20000b44

080034c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034c4:	f000 fe00 	bl	80040c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034c8:	f000 f830 	bl	800352c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034cc:	f7ff ff34 	bl	8003338 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80034d0:	f000 fcbe 	bl	8003e50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80034d4:	f000 fb6c 	bl	8003bb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80034d8:	f000 fbbe 	bl	8003c58 <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 80034dc:	f000 fd32 	bl	8003f44 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80034e0:	f7fe fe36 	bl	8002150 <MX_ADC1_Init>
  MX_CAN1_Init();
 80034e4:	f7fe feca 	bl	800227c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */



  init_encoder();
 80034e8:	f7ff fc90 	bl	8002e0c <init_encoder>
  DWT_Init();
 80034ec:	f7ff f93a 	bl	8002764 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80034f0:	2100      	movs	r1, #0
 80034f2:	480b      	ldr	r0, [pc, #44]	@ (8003520 <main+0x60>)
 80034f4:	f005 f91a 	bl	800872c <HAL_TIM_PWM_Start>

  MX_USB_DEVICE_Init();
 80034f8:	f008 fb9a 	bl	800bc30 <MX_USB_DEVICE_Init>

  HAL_CAN_Start(&hcan1);
 80034fc:	4809      	ldr	r0, [pc, #36]	@ (8003524 <main+0x64>)
 80034fe:	f001 fc35 	bl	8004d6c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003502:	2110      	movs	r1, #16
 8003504:	4807      	ldr	r0, [pc, #28]	@ (8003524 <main+0x64>)
 8003506:	f001 fe8f 	bl	8005228 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800350a:	f7fe ff8d 	bl	8002428 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800350e:	f00b fd89 	bl	800f024 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 8003512:	f00c fecd 	bl	80102b0 <vTaskStartScheduler>
  send_response("STM Started");
 8003516:	4804      	ldr	r0, [pc, #16]	@ (8003528 <main+0x68>)
 8003518:	f7ff ffa2 	bl	8003460 <send_response>

  while (1)
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <main+0x5c>
 8003520:	20000afc 	.word	0x20000afc
 8003524:	200004f0 	.word	0x200004f0
 8003528:	08014b34 	.word	0x08014b34

0800352c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b094      	sub	sp, #80	@ 0x50
 8003530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003532:	f107 031c 	add.w	r3, r7, #28
 8003536:	2234      	movs	r2, #52	@ 0x34
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f00f fa7e 	bl	8012a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003540:	f107 0308 	add.w	r3, r7, #8
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	4b29      	ldr	r3, [pc, #164]	@ (80035fc <SystemClock_Config+0xd0>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	4a28      	ldr	r2, [pc, #160]	@ (80035fc <SystemClock_Config+0xd0>)
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003560:	4b26      	ldr	r3, [pc, #152]	@ (80035fc <SystemClock_Config+0xd0>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800356c:	2300      	movs	r3, #0
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4b23      	ldr	r3, [pc, #140]	@ (8003600 <SystemClock_Config+0xd4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003578:	4a21      	ldr	r2, [pc, #132]	@ (8003600 <SystemClock_Config+0xd4>)
 800357a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b1f      	ldr	r3, [pc, #124]	@ (8003600 <SystemClock_Config+0xd4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800358c:	2301      	movs	r3, #1
 800358e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003596:	2302      	movs	r3, #2
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800359a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800359e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80035a0:	2304      	movs	r3, #4
 80035a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80035a4:	2348      	movs	r3, #72	@ 0x48
 80035a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035a8:	2302      	movs	r3, #2
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80035ac:	2303      	movs	r3, #3
 80035ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80035b0:	2302      	movs	r3, #2
 80035b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035b4:	f107 031c 	add.w	r3, r7, #28
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 fcff 	bl	8007fbc <HAL_RCC_OscConfig>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80035c4:	f000 f8aa 	bl	800371c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035c8:	230f      	movs	r3, #15
 80035ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035cc:	2302      	movs	r3, #2
 80035ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	2102      	movs	r1, #2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f003 fe43 	bl	8007270 <HAL_RCC_ClockConfig>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80035f0:	f000 f894 	bl	800371c <Error_Handler>
  }
}
 80035f4:	bf00      	nop
 80035f6:	3750      	adds	r7, #80	@ 0x50
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000

08003604 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <HAL_UART_RxCpltCallback+0x20>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_UART_RxCpltCallback+0x16>
        // Notify the telemetry task to process the command
        signalTelemetryTask();
 8003616:	f7ff fd7d 	bl	8003114 <signalTelemetryTask>
    }
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40004400 	.word	0x40004400

08003628 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
    uint32_t error_code = HAL_UART_GetError(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f006 fb0b 	bl	8009c4c <HAL_UART_GetError>
 8003636:	60f8      	str	r0, [r7, #12]

    // Identify which UART instance is causing the error (USART2 in this case)
    if (huart->Instance == USART2) {
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a18      	ldr	r2, [pc, #96]	@ (80036a0 <HAL_UART_ErrorCallback+0x78>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d12a      	bne.n	8003698 <HAL_UART_ErrorCallback+0x70>

        // Handle Overrun Error (ORE)
        if (error_code & HAL_UART_ERROR_ORE) {
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_UART_ErrorCallback+0x3a>
            __HAL_UART_CLEAR_OREFLAG(huart);  // Clear overrun error flag
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
            // Optionally log or handle the error
            //send_response("UART Overrun Error");
        }

        // Handle Framing Error (FE)
        if (error_code & HAL_UART_ERROR_FE) {
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_UART_ErrorCallback+0x4a>
            // Clear framing error flag automatically by reading the status register
        	send_response("UART Framing Error");
 800366c:	480d      	ldr	r0, [pc, #52]	@ (80036a4 <HAL_UART_ErrorCallback+0x7c>)
 800366e:	f7ff fef7 	bl	8003460 <send_response>
        }

        // Handle Parity Error (PE)
        if (error_code & HAL_UART_ERROR_PE) {
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_ErrorCallback+0x5a>
            // Parity errors may indicate data corruption or mismatch in settings
        	send_response("UART Parity Error");
 800367c:	480a      	ldr	r0, [pc, #40]	@ (80036a8 <HAL_UART_ErrorCallback+0x80>)
 800367e:	f7ff feef 	bl	8003460 <send_response>
        }

        // Handle Noise Error (NE)
        if (error_code & HAL_UART_ERROR_NE) {
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_UART_ErrorCallback+0x6a>
            // Noise errors are usually transient but worth logging
        	send_response("UART Noise Error");
 800368c:	4807      	ldr	r0, [pc, #28]	@ (80036ac <HAL_UART_ErrorCallback+0x84>)
 800368e:	f7ff fee7 	bl	8003460 <send_response>
        }

        // Recovery: Restart UART reception after clearing the error flags
        restartUart(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fd54 	bl	8003140 <restartUart>
    }
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40004400 	.word	0x40004400
 80036a4:	08014b40 	.word	0x08014b40
 80036a8:	08014b54 	.word	0x08014b54
 80036ac:	08014b68 	.word	0x08014b68

080036b0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a04      	ldr	r2, [pc, #16]	@ (80036d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
	{
		processCAN();
 80036c2:	f7ff fd8d 	bl	80031e0 <processCAN>
	}
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40006400 	.word	0x40006400

080036d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
	{
		processCAN();
 80036e6:	f7ff fd7b 	bl	80031e0 <processCAN>
	}
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40006400 	.word	0x40006400

080036f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a04      	ldr	r2, [pc, #16]	@ (8003718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800370a:	f000 fcff 	bl	800410c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40001000 	.word	0x40001000

0800371c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003720:	b672      	cpsid	i
}
 8003722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <Error_Handler+0x8>

08003728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	4b12      	ldr	r3, [pc, #72]	@ (800377c <HAL_MspInit+0x54>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	4a11      	ldr	r2, [pc, #68]	@ (800377c <HAL_MspInit+0x54>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800373c:	6453      	str	r3, [r2, #68]	@ 0x44
 800373e:	4b0f      	ldr	r3, [pc, #60]	@ (800377c <HAL_MspInit+0x54>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <HAL_MspInit+0x54>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <HAL_MspInit+0x54>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	@ 0x40
 800375a:	4b08      	ldr	r3, [pc, #32]	@ (800377c <HAL_MspInit+0x54>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003766:	2200      	movs	r2, #0
 8003768:	210f      	movs	r1, #15
 800376a:	f06f 0001 	mvn.w	r0, #1
 800376e:	f002 f86b 	bl	8005848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800

08003780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	@ 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	4b33      	ldr	r3, [pc, #204]	@ (8003864 <HAL_InitTick+0xe4>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	4a32      	ldr	r2, [pc, #200]	@ (8003864 <HAL_InitTick+0xe4>)
 800379a:	f043 0310 	orr.w	r3, r3, #16
 800379e:	6413      	str	r3, [r2, #64]	@ 0x40
 80037a0:	4b30      	ldr	r3, [pc, #192]	@ (8003864 <HAL_InitTick+0xe4>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037ac:	f107 0210 	add.w	r2, r7, #16
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fe74 	bl	80074a4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80037c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037c6:	f003 fe45 	bl	8007454 <HAL_RCC_GetPCLK1Freq>
 80037ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80037cc:	e004      	b.n	80037d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80037ce:	f003 fe41 	bl	8007454 <HAL_RCC_GetPCLK1Freq>
 80037d2:	4603      	mov	r3, r0
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037da:	4a23      	ldr	r2, [pc, #140]	@ (8003868 <HAL_InitTick+0xe8>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	0c9b      	lsrs	r3, r3, #18
 80037e2:	3b01      	subs	r3, #1
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037e6:	4b21      	ldr	r3, [pc, #132]	@ (800386c <HAL_InitTick+0xec>)
 80037e8:	4a21      	ldr	r2, [pc, #132]	@ (8003870 <HAL_InitTick+0xf0>)
 80037ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037ec:	4b1f      	ldr	r3, [pc, #124]	@ (800386c <HAL_InitTick+0xec>)
 80037ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80037f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037f4:	4a1d      	ldr	r2, [pc, #116]	@ (800386c <HAL_InitTick+0xec>)
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037fa:	4b1c      	ldr	r3, [pc, #112]	@ (800386c <HAL_InitTick+0xec>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_InitTick+0xec>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003806:	4b19      	ldr	r3, [pc, #100]	@ (800386c <HAL_InitTick+0xec>)
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800380c:	4817      	ldr	r0, [pc, #92]	@ (800386c <HAL_InitTick+0xec>)
 800380e:	f004 fe73 	bl	80084f8 <HAL_TIM_Base_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11b      	bne.n	8003858 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003820:	4812      	ldr	r0, [pc, #72]	@ (800386c <HAL_InitTick+0xec>)
 8003822:	f004 fec3 	bl	80085ac <HAL_TIM_Base_Start_IT>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800382c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003830:	2b00      	cmp	r3, #0
 8003832:	d111      	bne.n	8003858 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003834:	2036      	movs	r0, #54	@ 0x36
 8003836:	f002 f823 	bl	8005880 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d808      	bhi.n	8003852 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003840:	2200      	movs	r2, #0
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	2036      	movs	r0, #54	@ 0x36
 8003846:	f001 ffff 	bl	8005848 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800384a:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <HAL_InitTick+0xf4>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e002      	b.n	8003858 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003858:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800385c:	4618      	mov	r0, r3
 800385e:	3738      	adds	r7, #56	@ 0x38
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	431bde83 	.word	0x431bde83
 800386c:	20000a68 	.word	0x20000a68
 8003870:	40001000 	.word	0x40001000
 8003874:	20000014 	.word	0x20000014

08003878 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800387c:	f3bf 8f4f 	dsb	sy
}
 8003880:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003882:	4b06      	ldr	r3, [pc, #24]	@ (800389c <__NVIC_SystemReset+0x24>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800388a:	4904      	ldr	r1, [pc, #16]	@ (800389c <__NVIC_SystemReset+0x24>)
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <__NVIC_SystemReset+0x28>)
 800388e:	4313      	orrs	r3, r2
 8003890:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003892:	f3bf 8f4f 	dsb	sy
}
 8003896:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <__NVIC_SystemReset+0x20>
 800389c:	e000ed00 	.word	0xe000ed00
 80038a0:	05fa0004 	.word	0x05fa0004

080038a4 <log_message>:
extern PCD_HandleTypeDef hpcd_USB_OTG_FS;
extern TIM_HandleTypeDef htim6;

/* USER CODE BEGIN EV */
/* USER CODE BEGIN 0 */
void log_message(const char *message) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    // Send the log message over UART
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fc fcb9 	bl	8000224 <strlen>
 80038b2:	4603      	mov	r3, r0
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4803      	ldr	r0, [pc, #12]	@ (80038cc <log_message+0x28>)
 80038be:	f005 fe6d 	bl	800959c <HAL_UART_Transmit>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000b44 	.word	0x20000b44

080038d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038d4:	bf00      	nop
 80038d6:	e7fd      	b.n	80038d4 <NMI_Handler+0x4>

080038d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b0d6      	sub	sp, #344	@ 0x158
 80038dc:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 80038de:	f01e 0f04 	tst.w	lr, #4
 80038e2:	bf0c      	ite	eq
 80038e4:	f3ef 8308 	mrseq	r3, MSP
 80038e8:	f3ef 8309 	mrsne	r3, PSP
 80038ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 80038f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 80038fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8003904:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 800390e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 8003918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 8003922:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 800392c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 8003936:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 8003940:	4b18      	ldr	r3, [pc, #96]	@ (80039a4 <HardFault_Handler+0xcc>)
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 8003948:	4b16      	ldr	r3, [pc, #88]	@ (80039a4 <HardFault_Handler+0xcc>)
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 8003950:	1d38      	adds	r0, r7, #4
 8003952:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003956:	9308      	str	r3, [sp, #32]
 8003958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395c:	9307      	str	r3, [sp, #28]
 800395e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003962:	9306      	str	r3, [sp, #24]
 8003964:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003968:	9305      	str	r3, [sp, #20]
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	9304      	str	r3, [sp, #16]
 8003970:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003974:	9303      	str	r3, [sp, #12]
 8003976:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800397a:	9302      	str	r3, [sp, #8]
 800397c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800398c:	4a06      	ldr	r2, [pc, #24]	@ (80039a8 <HardFault_Handler+0xd0>)
 800398e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003992:	f00e ff47 	bl	8012824 <sniprintf>
		"CFSR: %08X HFSR: %08X\n",
		r0, r1, r2, r3, r12, lr, pc, psr, cfsr, hfsr
	);

	// Log the message
	log_message(log_buffer);
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff83 	bl	80038a4 <log_message>

	NVIC_SystemReset();
 800399e:	f7ff ff6b 	bl	8003878 <__NVIC_SystemReset>
 80039a2:	bf00      	nop
 80039a4:	e000ed00 	.word	0xe000ed00
 80039a8:	08014b7c 	.word	0x08014b7c

080039ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <MemManage_Handler+0x4>

080039b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <BusFault_Handler+0x4>

080039bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039c0:	bf00      	nop
 80039c2:	e7fd      	b.n	80039c0 <UsageFault_Handler+0x4>

080039c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039d8:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <CAN1_RX0_IRQHandler+0x10>)
 80039da:	f001 fc4b 	bl	8005274 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200004f0 	.word	0x200004f0

080039e8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039ec:	4802      	ldr	r0, [pc, #8]	@ (80039f8 <CAN1_RX1_IRQHandler+0x10>)
 80039ee:	f001 fc41 	bl	8005274 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200004f0 	.word	0x200004f0

080039fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a00:	4802      	ldr	r0, [pc, #8]	@ (8003a0c <USART2_IRQHandler+0x10>)
 8003a02:	f005 fe7b 	bl	80096fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000b44 	.word	0x20000b44

08003a10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a14:	4802      	ldr	r0, [pc, #8]	@ (8003a20 <TIM6_DAC_IRQHandler+0x10>)
 8003a16:	f005 f885 	bl	8008b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000a68 	.word	0x20000a68

08003a24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a28:	4802      	ldr	r0, [pc, #8]	@ (8003a34 <OTG_FS_IRQHandler+0x10>)
 8003a2a:	f002 fac1 	bl	8005fb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000b8c 	.word	0x20000b8c

08003a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return 1;
 8003a3c:	2301      	movs	r3, #1
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <_kill>:

int _kill(int pid, int sig)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a52:	f00f f8b9 	bl	8012bc8 <__errno>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2216      	movs	r2, #22
 8003a5a:	601a      	str	r2, [r3, #0]
  return -1;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_exit>:

void _exit (int status)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ffe7 	bl	8003a48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a7a:	bf00      	nop
 8003a7c:	e7fd      	b.n	8003a7a <_exit+0x12>

08003a7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e00a      	b.n	8003aa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a90:	f3af 8000 	nop.w
 8003a94:	4601      	mov	r1, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	60ba      	str	r2, [r7, #8]
 8003a9c:	b2ca      	uxtb	r2, r1
 8003a9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	dbf0      	blt.n	8003a90 <_read+0x12>
  }

  return len;
 8003aae:	687b      	ldr	r3, [r7, #4]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ae0:	605a      	str	r2, [r3, #4]
  return 0;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_isatty>:

int _isatty(int file)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003af8:	2301      	movs	r3, #1
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <_sbrk+0x5c>)
 8003b2a:	4b15      	ldr	r3, [pc, #84]	@ (8003b80 <_sbrk+0x60>)
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b34:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <_sbrk+0x64>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <_sbrk+0x64>)
 8003b3e:	4a12      	ldr	r2, [pc, #72]	@ (8003b88 <_sbrk+0x68>)
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <_sbrk+0x64>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d207      	bcs.n	8003b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b50:	f00f f83a 	bl	8012bc8 <__errno>
 8003b54:	4603      	mov	r3, r0
 8003b56:	220c      	movs	r2, #12
 8003b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	e009      	b.n	8003b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b60:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <_sbrk+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b66:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <_sbrk+0x64>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <_sbrk+0x64>)
 8003b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20020000 	.word	0x20020000
 8003b80:	00000400 	.word	0x00000400
 8003b84:	20000ab0 	.word	0x20000ab0
 8003b88:	20005828 	.word	0x20005828

08003b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b90:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <SystemInit+0x20>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	4a05      	ldr	r2, [pc, #20]	@ (8003bac <SystemInit+0x20>)
 8003b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	@ 0x30
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bb6:	f107 030c 	add.w	r3, r7, #12
 8003bba:	2224      	movs	r2, #36	@ 0x24
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f00e ff3c 	bl	8012a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bcc:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <MX_TIM2_Init+0xa4>)
 8003bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c54 <MX_TIM2_Init+0xa4>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bda:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <MX_TIM2_Init+0xa4>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003be0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <MX_TIM2_Init+0xa4>)
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003be8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c54 <MX_TIM2_Init+0xa4>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bee:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <MX_TIM2_Init+0xa4>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003c18:	f107 030c 	add.w	r3, r7, #12
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	480d      	ldr	r0, [pc, #52]	@ (8003c54 <MX_TIM2_Init+0xa4>)
 8003c20:	f004 fe4c 	bl	80088bc <HAL_TIM_Encoder_Init>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003c2a:	f7ff fd77 	bl	800371c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4806      	ldr	r0, [pc, #24]	@ (8003c54 <MX_TIM2_Init+0xa4>)
 8003c3c:	f005 fbce 	bl	80093dc <HAL_TIMEx_MasterConfigSynchronization>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003c46:	f7ff fd69 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c4a:	bf00      	nop
 8003c4c:	3730      	adds	r7, #48	@ 0x30
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000ab4 	.word	0x20000ab4

08003c58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	@ 0x28
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c5e:	f107 0320 	add.w	r3, r7, #32
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c68:	1d3b      	adds	r3, r7, #4
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	611a      	str	r2, [r3, #16]
 8003c76:	615a      	str	r2, [r3, #20]
 8003c78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c7a:	4b22      	ldr	r3, [pc, #136]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003c7c:	4a22      	ldr	r2, [pc, #136]	@ (8003d08 <MX_TIM3_Init+0xb0>)
 8003c7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 -1;
 8003c80:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003c82:	2253      	movs	r2, #83	@ 0x53
 8003c84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c86:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003c8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003c92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c94:	4b1b      	ldr	r3, [pc, #108]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ca0:	4818      	ldr	r0, [pc, #96]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003ca2:	f004 fcf3 	bl	800868c <HAL_TIM_PWM_Init>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003cac:	f7ff fd36 	bl	800371c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cb8:	f107 0320 	add.w	r3, r7, #32
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4811      	ldr	r0, [pc, #68]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003cc0:	f005 fb8c 	bl	80093dc <HAL_TIMEx_MasterConfigSynchronization>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003cca:	f7ff fd27 	bl	800371c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cce:	2360      	movs	r3, #96	@ 0x60
 8003cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8003cd2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ce0:	1d3b      	adds	r3, r7, #4
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4807      	ldr	r0, [pc, #28]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003ce8:	f005 f80c 	bl	8008d04 <HAL_TIM_PWM_ConfigChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003cf2:	f7ff fd13 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003cf6:	4803      	ldr	r0, [pc, #12]	@ (8003d04 <MX_TIM3_Init+0xac>)
 8003cf8:	f000 f870 	bl	8003ddc <HAL_TIM_MspPostInit>

}
 8003cfc:	bf00      	nop
 8003cfe:	3728      	adds	r7, #40	@ 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000afc 	.word	0x20000afc
 8003d08:	40000400 	.word	0x40000400

08003d0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2c:	d12b      	bne.n	8003d86 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	4b17      	ldr	r3, [pc, #92]	@ (8003d90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	4a16      	ldr	r2, [pc, #88]	@ (8003d90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d3e:	4b14      	ldr	r3, [pc, #80]	@ (8003d90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	4a0f      	ldr	r2, [pc, #60]	@ (8003d90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d66:	2303      	movs	r3, #3
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d76:	2301      	movs	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4804      	ldr	r0, [pc, #16]	@ (8003d94 <HAL_TIM_Encoder_MspInit+0x88>)
 8003d82:	f001 fe1d 	bl	80059c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003d86:	bf00      	nop
 8003d88:	3728      	adds	r7, #40	@ 0x28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40020000 	.word	0x40020000

08003d98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10d      	bne.n	8003dc6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	4a09      	ldr	r2, [pc, #36]	@ (8003dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dba:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a12      	ldr	r2, [pc, #72]	@ (8003e44 <HAL_TIM_MspPostInit+0x68>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d11d      	bne.n	8003e3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b11      	ldr	r3, [pc, #68]	@ (8003e48 <HAL_TIM_MspPostInit+0x6c>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	4a10      	ldr	r2, [pc, #64]	@ (8003e48 <HAL_TIM_MspPostInit+0x6c>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e48 <HAL_TIM_MspPostInit+0x6c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e1a:	2340      	movs	r3, #64	@ 0x40
 8003e1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4619      	mov	r1, r3
 8003e34:	4805      	ldr	r0, [pc, #20]	@ (8003e4c <HAL_TIM_MspPostInit+0x70>)
 8003e36:	f001 fdc3 	bl	80059c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e3a:	bf00      	nop
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40020000 	.word	0x40020000

08003e50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e54:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e56:	4a12      	ldr	r2, [pc, #72]	@ (8003ea0 <MX_USART2_UART_Init+0x50>)
 8003e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e5a:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e62:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e68:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e74:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e76:	220c      	movs	r2, #12
 8003e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e7a:	4b08      	ldr	r3, [pc, #32]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e86:	4805      	ldr	r0, [pc, #20]	@ (8003e9c <MX_USART2_UART_Init+0x4c>)
 8003e88:	f005 fb38 	bl	80094fc <HAL_UART_Init>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e92:	f7ff fc43 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000b44 	.word	0x20000b44
 8003ea0:	40004400 	.word	0x40004400

08003ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f38 <HAL_UART_MspInit+0x94>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d133      	bne.n	8003f2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	4b1c      	ldr	r3, [pc, #112]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	4a1b      	ldr	r2, [pc, #108]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ed6:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef2:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003efe:	230c      	movs	r3, #12
 8003f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f0e:	2307      	movs	r3, #7
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f12:	f107 0314 	add.w	r3, r7, #20
 8003f16:	4619      	mov	r1, r3
 8003f18:	4809      	ldr	r0, [pc, #36]	@ (8003f40 <HAL_UART_MspInit+0x9c>)
 8003f1a:	f001 fd51 	bl	80059c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2106      	movs	r1, #6
 8003f22:	2026      	movs	r0, #38	@ 0x26
 8003f24:	f001 fc90 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f28:	2026      	movs	r0, #38	@ 0x26
 8003f2a:	f001 fca9 	bl	8005880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f2e:	bf00      	nop
 8003f30:	3728      	adds	r7, #40	@ 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40004400 	.word	0x40004400
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020000 	.word	0x40020000

08003f44 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003f48:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003f4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003f50:	4b12      	ldr	r3, [pc, #72]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f52:	2206      	movs	r2, #6
 8003f54:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003f56:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f58:	2202      	movs	r2, #2
 8003f5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f64:	2202      	movs	r2, #2
 8003f66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003f74:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003f86:	4805      	ldr	r0, [pc, #20]	@ (8003f9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f88:	f001 fec7 	bl	8005d1a <HAL_PCD_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003f92:	f7ff fbc3 	bl	800371c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000b8c 	.word	0x20000b8c

08003fa0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b0a0      	sub	sp, #128	@ 0x80
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fb8:	f107 0310 	add.w	r3, r7, #16
 8003fbc:	225c      	movs	r2, #92	@ 0x5c
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f00e fd3b 	bl	8012a3c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fce:	d149      	bne.n	8004064 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fda:	f107 0310 	add.w	r3, r7, #16
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f003 fa92 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8003fea:	f7ff fb97 	bl	800371c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <HAL_PCD_MspInit+0xcc>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800406c <HAL_PCD_MspInit+0xcc>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <HAL_PCD_MspInit+0xcc>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800400a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800400e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004010:	2302      	movs	r3, #2
 8004012:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004018:	2303      	movs	r3, #3
 800401a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800401c:	230a      	movs	r3, #10
 800401e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004020:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004024:	4619      	mov	r1, r3
 8004026:	4812      	ldr	r0, [pc, #72]	@ (8004070 <HAL_PCD_MspInit+0xd0>)
 8004028:	f001 fcca 	bl	80059c0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800402c:	4b0f      	ldr	r3, [pc, #60]	@ (800406c <HAL_PCD_MspInit+0xcc>)
 800402e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004030:	4a0e      	ldr	r2, [pc, #56]	@ (800406c <HAL_PCD_MspInit+0xcc>)
 8004032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004036:	6353      	str	r3, [r2, #52]	@ 0x34
 8004038:	2300      	movs	r3, #0
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_PCD_MspInit+0xcc>)
 800403e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004040:	4a0a      	ldr	r2, [pc, #40]	@ (800406c <HAL_PCD_MspInit+0xcc>)
 8004042:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004046:	6453      	str	r3, [r2, #68]	@ 0x44
 8004048:	4b08      	ldr	r3, [pc, #32]	@ (800406c <HAL_PCD_MspInit+0xcc>)
 800404a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8004054:	2200      	movs	r2, #0
 8004056:	2106      	movs	r1, #6
 8004058:	2043      	movs	r0, #67	@ 0x43
 800405a:	f001 fbf5 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800405e:	2043      	movs	r0, #67	@ 0x43
 8004060:	f001 fc0e 	bl	8005880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004064:	bf00      	nop
 8004066:	3780      	adds	r7, #128	@ 0x80
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	40020000 	.word	0x40020000

08004074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004078:	f7ff fd88 	bl	8003b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800407c:	480c      	ldr	r0, [pc, #48]	@ (80040b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800407e:	490d      	ldr	r1, [pc, #52]	@ (80040b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004080:	4a0d      	ldr	r2, [pc, #52]	@ (80040b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004084:	e002      	b.n	800408c <LoopCopyDataInit>

08004086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800408a:	3304      	adds	r3, #4

0800408c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800408c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800408e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004090:	d3f9      	bcc.n	8004086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004092:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004094:	4c0a      	ldr	r4, [pc, #40]	@ (80040c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004098:	e001      	b.n	800409e <LoopFillZerobss>

0800409a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800409a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800409c:	3204      	adds	r2, #4

0800409e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800409e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040a0:	d3fb      	bcc.n	800409a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80040a2:	f00e fd97 	bl	8012bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040a6:	f7ff fa0b 	bl	80034c0 <main>
  bx  lr    
 80040aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040b4:	20000484 	.word	0x20000484
  ldr r2, =_sidata
 80040b8:	08015048 	.word	0x08015048
  ldr r2, =_sbss
 80040bc:	20000484 	.word	0x20000484
  ldr r4, =_ebss
 80040c0:	20005828 	.word	0x20005828

080040c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040c4:	e7fe      	b.n	80040c4 <ADC_IRQHandler>
	...

080040c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <HAL_Init+0x40>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004108 <HAL_Init+0x40>)
 80040d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_Init+0x40>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004108 <HAL_Init+0x40>)
 80040de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040e4:	4b08      	ldr	r3, [pc, #32]	@ (8004108 <HAL_Init+0x40>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a07      	ldr	r2, [pc, #28]	@ (8004108 <HAL_Init+0x40>)
 80040ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f0:	2003      	movs	r0, #3
 80040f2:	f001 fb9e 	bl	8005832 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040f6:	200f      	movs	r0, #15
 80040f8:	f7ff fb42 	bl	8003780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040fc:	f7ff fb14 	bl	8003728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00

0800410c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004110:	4b06      	ldr	r3, [pc, #24]	@ (800412c <HAL_IncTick+0x20>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_IncTick+0x24>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4413      	add	r3, r2
 800411c:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <HAL_IncTick+0x24>)
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000018 	.word	0x20000018
 8004130:	20001070 	.word	0x20001070

08004134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return uwTick;
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <HAL_GetTick+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20001070 	.word	0x20001070

0800414c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff ffee 	bl	8004134 <HAL_GetTick>
 8004158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d005      	beq.n	8004172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004166:	4b0a      	ldr	r3, [pc, #40]	@ (8004190 <HAL_Delay+0x44>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004172:	bf00      	nop
 8004174:	f7ff ffde 	bl	8004134 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d8f7      	bhi.n	8004174 <HAL_Delay+0x28>
  {
  }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000018 	.word	0x20000018

08004194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e033      	b.n	8004212 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fe f81e 	bl	80021f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041da:	f023 0302 	bic.w	r3, r3, #2
 80041de:	f043 0202 	orr.w	r2, r3, #2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fae8 	bl	80047bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	f043 0201 	orr.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	641a      	str	r2, [r3, #64]	@ 0x40
 8004202:	e001      	b.n	8004208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_ADC_Start+0x1a>
 8004232:	2302      	movs	r3, #2
 8004234:	e0b2      	b.n	800439c <HAL_ADC_Start+0x180>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d018      	beq.n	800427e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800425c:	4b52      	ldr	r3, [pc, #328]	@ (80043a8 <HAL_ADC_Start+0x18c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a52      	ldr	r2, [pc, #328]	@ (80043ac <HAL_ADC_Start+0x190>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	0c9a      	lsrs	r2, r3, #18
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004270:	e002      	b.n	8004278 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	3b01      	subs	r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f9      	bne.n	8004272 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d17a      	bne.n	8004382 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80042b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ca:	d106      	bne.n	80042da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d0:	f023 0206 	bic.w	r2, r3, #6
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80042d8:	e002      	b.n	80042e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042e8:	4b31      	ldr	r3, [pc, #196]	@ (80043b0 <HAL_ADC_Start+0x194>)
 80042ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80042f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d12a      	bne.n	8004358 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <HAL_ADC_Start+0x198>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d015      	beq.n	8004338 <HAL_ADC_Start+0x11c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a29      	ldr	r2, [pc, #164]	@ (80043b8 <HAL_ADC_Start+0x19c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d105      	bne.n	8004322 <HAL_ADC_Start+0x106>
 8004316:	4b26      	ldr	r3, [pc, #152]	@ (80043b0 <HAL_ADC_Start+0x194>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a25      	ldr	r2, [pc, #148]	@ (80043bc <HAL_ADC_Start+0x1a0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d136      	bne.n	800439a <HAL_ADC_Start+0x17e>
 800432c:	4b20      	ldr	r3, [pc, #128]	@ (80043b0 <HAL_ADC_Start+0x194>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d130      	bne.n	800439a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d129      	bne.n	800439a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	e020      	b.n	800439a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a15      	ldr	r2, [pc, #84]	@ (80043b4 <HAL_ADC_Start+0x198>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d11b      	bne.n	800439a <HAL_ADC_Start+0x17e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d114      	bne.n	800439a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	e00b      	b.n	800439a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	f043 0210 	orr.w	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20000010 	.word	0x20000010
 80043ac:	431bde83 	.word	0x431bde83
 80043b0:	40012300 	.word	0x40012300
 80043b4:	40012000 	.word	0x40012000
 80043b8:	40012100 	.word	0x40012100
 80043bc:	40012200 	.word	0x40012200

080043c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_ADC_Stop+0x16>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e021      	b.n	800441a <HAL_ADC_Stop+0x5a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	f043 0201 	orr.w	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004442:	d113      	bne.n	800446c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800444e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004452:	d10b      	bne.n	800446c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e063      	b.n	8004534 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800446c:	f7ff fe62 	bl	8004134 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004472:	e021      	b.n	80044b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d01d      	beq.n	80044b8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_ADC_PollForConversion+0x6c>
 8004482:	f7ff fe57 	bl	8004134 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d212      	bcs.n	80044b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d00b      	beq.n	80044b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	f043 0204 	orr.w	r2, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e03d      	b.n	8004534 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d1d6      	bne.n	8004474 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f06f 0212 	mvn.w	r2, #18
 80044ce:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d123      	bne.n	8004532 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11f      	bne.n	8004532 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800450a:	2b00      	cmp	r3, #0
 800450c:	d111      	bne.n	8004532 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x1c>
 8004570:	2302      	movs	r3, #2
 8004572:	e113      	b.n	800479c <HAL_ADC_ConfigChannel+0x244>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b09      	cmp	r3, #9
 8004582:	d925      	bls.n	80045d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68d9      	ldr	r1, [r3, #12]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	4613      	mov	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	3b1e      	subs	r3, #30
 800459a:	2207      	movs	r2, #7
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43da      	mvns	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	400a      	ands	r2, r1
 80045a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68d9      	ldr	r1, [r3, #12]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	4618      	mov	r0, r3
 80045bc:	4603      	mov	r3, r0
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4403      	add	r3, r0
 80045c2:	3b1e      	subs	r3, #30
 80045c4:	409a      	lsls	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	e022      	b.n	8004616 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6919      	ldr	r1, [r3, #16]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	2207      	movs	r2, #7
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43da      	mvns	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	400a      	ands	r2, r1
 80045f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6919      	ldr	r1, [r3, #16]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	4618      	mov	r0, r3
 8004606:	4603      	mov	r3, r0
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4403      	add	r3, r0
 800460c:	409a      	lsls	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b06      	cmp	r3, #6
 800461c:	d824      	bhi.n	8004668 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	3b05      	subs	r3, #5
 8004630:	221f      	movs	r2, #31
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43da      	mvns	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	400a      	ands	r2, r1
 800463e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	4618      	mov	r0, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	3b05      	subs	r3, #5
 800465a:	fa00 f203 	lsl.w	r2, r0, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	635a      	str	r2, [r3, #52]	@ 0x34
 8004666:	e04c      	b.n	8004702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d824      	bhi.n	80046ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	3b23      	subs	r3, #35	@ 0x23
 8004682:	221f      	movs	r2, #31
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43da      	mvns	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	400a      	ands	r2, r1
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	4618      	mov	r0, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	3b23      	subs	r3, #35	@ 0x23
 80046ac:	fa00 f203 	lsl.w	r2, r0, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b8:	e023      	b.n	8004702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	3b41      	subs	r3, #65	@ 0x41
 80046cc:	221f      	movs	r2, #31
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43da      	mvns	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	400a      	ands	r2, r1
 80046da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4618      	mov	r0, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	3b41      	subs	r3, #65	@ 0x41
 80046f6:	fa00 f203 	lsl.w	r2, r0, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004702:	4b29      	ldr	r3, [pc, #164]	@ (80047a8 <HAL_ADC_ConfigChannel+0x250>)
 8004704:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a28      	ldr	r2, [pc, #160]	@ (80047ac <HAL_ADC_ConfigChannel+0x254>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d10f      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x1d8>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b12      	cmp	r3, #18
 8004716:	d10b      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1d      	ldr	r2, [pc, #116]	@ (80047ac <HAL_ADC_ConfigChannel+0x254>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d12b      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x23a>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1c      	ldr	r2, [pc, #112]	@ (80047b0 <HAL_ADC_ConfigChannel+0x258>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <HAL_ADC_ConfigChannel+0x1f4>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b11      	cmp	r3, #17
 800474a:	d122      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a11      	ldr	r2, [pc, #68]	@ (80047b0 <HAL_ADC_ConfigChannel+0x258>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d111      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800476e:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_ADC_ConfigChannel+0x25c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a11      	ldr	r2, [pc, #68]	@ (80047b8 <HAL_ADC_ConfigChannel+0x260>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	0c9a      	lsrs	r2, r3, #18
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004784:	e002      	b.n	800478c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3b01      	subs	r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f9      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40012300 	.word	0x40012300
 80047ac:	40012000 	.word	0x40012000
 80047b0:	10000012 	.word	0x10000012
 80047b4:	20000010 	.word	0x20000010
 80047b8:	431bde83 	.word	0x431bde83

080047bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047c4:	4b79      	ldr	r3, [pc, #484]	@ (80049ac <ADC_Init+0x1f0>)
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	021a      	lsls	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6899      	ldr	r1, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484e:	4a58      	ldr	r2, [pc, #352]	@ (80049b0 <ADC_Init+0x1f4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d022      	beq.n	800489a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004862:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6899      	ldr	r1, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e00f      	b.n	80048ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80048b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0202 	bic.w	r2, r2, #2
 80048c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6899      	ldr	r1, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7e1b      	ldrb	r3, [r3, #24]
 80048d4:	005a      	lsls	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004906:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6859      	ldr	r1, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	3b01      	subs	r3, #1
 8004914:	035a      	lsls	r2, r3, #13
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	e007      	b.n	8004930 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800492e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800493e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	3b01      	subs	r3, #1
 800494c:	051a      	lsls	r2, r3, #20
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004972:	025a      	lsls	r2, r3, #9
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800498a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6899      	ldr	r1, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	029a      	lsls	r2, r3, #10
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012300 	.word	0x40012300
 80049b0:	0f000001 	.word	0x0f000001

080049b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0ed      	b.n	8004ba2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd fca4 	bl	8002320 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049e8:	f7ff fba4 	bl	8004134 <HAL_GetTick>
 80049ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049ee:	e012      	b.n	8004a16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049f0:	f7ff fba0 	bl	8004134 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b0a      	cmp	r3, #10
 80049fc:	d90b      	bls.n	8004a16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2205      	movs	r2, #5
 8004a0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0c5      	b.n	8004ba2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0e5      	beq.n	80049f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0202 	bic.w	r2, r2, #2
 8004a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a34:	f7ff fb7e 	bl	8004134 <HAL_GetTick>
 8004a38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a3a:	e012      	b.n	8004a62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a3c:	f7ff fb7a 	bl	8004134 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b0a      	cmp	r3, #10
 8004a48:	d90b      	bls.n	8004a62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2205      	movs	r2, #5
 8004a5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e09f      	b.n	8004ba2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7e1b      	ldrb	r3, [r3, #24]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d108      	bne.n	8004a8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e007      	b.n	8004a9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7e5b      	ldrb	r3, [r3, #25]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d108      	bne.n	8004ab4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e007      	b.n	8004ac4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7e9b      	ldrb	r3, [r3, #26]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0220 	orr.w	r2, r2, #32
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e007      	b.n	8004aee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0220 	bic.w	r2, r2, #32
 8004aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7edb      	ldrb	r3, [r3, #27]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d108      	bne.n	8004b08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0210 	bic.w	r2, r2, #16
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e007      	b.n	8004b18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0210 	orr.w	r2, r2, #16
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7f1b      	ldrb	r3, [r3, #28]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d108      	bne.n	8004b32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0208 	orr.w	r2, r2, #8
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e007      	b.n	8004b42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0208 	bic.w	r2, r2, #8
 8004b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	7f5b      	ldrb	r3, [r3, #29]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d108      	bne.n	8004b5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0204 	orr.w	r2, r2, #4
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e007      	b.n	8004b6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0204 	bic.w	r2, r2, #4
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	ea42 0103 	orr.w	r1, r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	1e5a      	subs	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004bc4:	7cfb      	ldrb	r3, [r7, #19]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d003      	beq.n	8004bd2 <HAL_CAN_ConfigFilter+0x26>
 8004bca:	7cfb      	ldrb	r3, [r7, #19]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	f040 80be 	bne.w	8004d4e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004bd2:	4b65      	ldr	r3, [pc, #404]	@ (8004d68 <HAL_CAN_ConfigFilter+0x1bc>)
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004bdc:	f043 0201 	orr.w	r2, r3, #1
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004bec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	431a      	orrs	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2201      	movs	r2, #1
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	401a      	ands	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d123      	bne.n	8004c7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	3248      	adds	r2, #72	@ 0x48
 8004c5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	3348      	adds	r3, #72	@ 0x48
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	440b      	add	r3, r1
 8004c7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d122      	bne.n	8004cca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ca4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	3248      	adds	r2, #72	@ 0x48
 8004caa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cc0:	6979      	ldr	r1, [r7, #20]
 8004cc2:	3348      	adds	r3, #72	@ 0x48
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	440b      	add	r3, r1
 8004cc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	401a      	ands	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004ce4:	e007      	b.n	8004cf6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	401a      	ands	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004d10:	e007      	b.n	8004d22 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d40:	f023 0201 	bic.w	r2, r3, #1
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e006      	b.n	8004d5c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40006400 	.word	0x40006400

08004d6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d12e      	bne.n	8004dde <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d98:	f7ff f9cc 	bl	8004134 <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d9e:	e012      	b.n	8004dc6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004da0:	f7ff f9c8 	bl	8004134 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b0a      	cmp	r3, #10
 8004dac:	d90b      	bls.n	8004dc6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2205      	movs	r2, #5
 8004dbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e012      	b.n	8004dec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e5      	bne.n	8004da0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e006      	b.n	8004dec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b089      	sub	sp, #36	@ 0x24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e12:	7ffb      	ldrb	r3, [r7, #31]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d003      	beq.n	8004e20 <HAL_CAN_AddTxMessage+0x2c>
 8004e18:	7ffb      	ldrb	r3, [r7, #31]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	f040 80ad 	bne.w	8004f7a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8095 	beq.w	8004f6a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	0e1b      	lsrs	r3, r3, #24
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6809      	ldr	r1, [r1, #0]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	440b      	add	r3, r1
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e00f      	b.n	8004e98 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e82:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e8c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3318      	adds	r3, #24
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	440b      	add	r3, r1
 8004e96:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6819      	ldr	r1, [r3, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	7d1b      	ldrb	r3, [r3, #20]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d111      	bne.n	8004ed8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3318      	adds	r3, #24
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	6811      	ldr	r1, [r2, #0]
 8004ec8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3318      	adds	r3, #24
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3307      	adds	r3, #7
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	061a      	lsls	r2, r3, #24
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3306      	adds	r3, #6
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	041b      	lsls	r3, r3, #16
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3305      	adds	r3, #5
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	3204      	adds	r2, #4
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	4610      	mov	r0, r2
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	6811      	ldr	r1, [r2, #0]
 8004f00:	ea43 0200 	orr.w	r2, r3, r0
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	440b      	add	r3, r1
 8004f0a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004f0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3303      	adds	r3, #3
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	061a      	lsls	r2, r3, #24
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3301      	adds	r3, #1
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	4610      	mov	r0, r2
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	6811      	ldr	r1, [r2, #0]
 8004f36:	ea43 0200 	orr.w	r2, r3, r0
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	440b      	add	r3, r1
 8004f40:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004f44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	3318      	adds	r3, #24
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	4413      	add	r3, r2
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	6811      	ldr	r1, [r2, #0]
 8004f58:	f043 0201 	orr.w	r2, r3, #1
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	3318      	adds	r3, #24
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	440b      	add	r3, r1
 8004f64:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e00e      	b.n	8004f88 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e006      	b.n	8004f88 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3724      	adds	r7, #36	@ 0x24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fa8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d003      	beq.n	8004fb8 <HAL_CAN_GetRxMessage+0x24>
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	f040 8103 	bne.w	80051be <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10e      	bne.n	8004fdc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d116      	bne.n	8004ffa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0f7      	b.n	80051cc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e0e8      	b.n	80051cc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	331b      	adds	r3, #27
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4413      	add	r3, r2
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0204 	and.w	r2, r3, #4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10c      	bne.n	8005032 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	331b      	adds	r3, #27
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	4413      	add	r3, r2
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	0d5b      	lsrs	r3, r3, #21
 8005028:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e00b      	b.n	800504a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	331b      	adds	r3, #27
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	4413      	add	r3, r2
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	331b      	adds	r3, #27
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	4413      	add	r3, r2
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0202 	and.w	r2, r3, #2
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	331b      	adds	r3, #27
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	4413      	add	r3, r2
 800506c:	3304      	adds	r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2208      	movs	r2, #8
 800507c:	611a      	str	r2, [r3, #16]
 800507e:	e00b      	b.n	8005098 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	331b      	adds	r3, #27
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	4413      	add	r3, r2
 800508c:	3304      	adds	r3, #4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	331b      	adds	r3, #27
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	4413      	add	r3, r2
 80050a4:	3304      	adds	r3, #4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	0a1b      	lsrs	r3, r3, #8
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	331b      	adds	r3, #27
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4413      	add	r3, r2
 80050bc:	3304      	adds	r3, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	0a1a      	lsrs	r2, r3, #8
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	4413      	add	r3, r2
 8005102:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0c1a      	lsrs	r2, r3, #16
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	3302      	adds	r3, #2
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	4413      	add	r3, r2
 800511c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	0e1a      	lsrs	r2, r3, #24
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	3303      	adds	r3, #3
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	4413      	add	r3, r2
 8005136:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	3304      	adds	r3, #4
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	4413      	add	r3, r2
 800514e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0a1a      	lsrs	r2, r3, #8
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	3305      	adds	r3, #5
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	4413      	add	r3, r2
 8005168:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	0c1a      	lsrs	r2, r3, #16
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	3306      	adds	r3, #6
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	4413      	add	r3, r2
 8005182:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	0e1a      	lsrs	r2, r3, #24
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	3307      	adds	r3, #7
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d108      	bne.n	80051aa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0220 	orr.w	r2, r2, #32
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	e007      	b.n	80051ba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0220 	orr.w	r2, r2, #32
 80051b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e006      	b.n	80051cc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
  }
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ec:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80051ee:	7afb      	ldrb	r3, [r7, #11]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d002      	beq.n	80051fa <HAL_CAN_GetRxFifoFillLevel+0x22>
 80051f4:	7afb      	ldrb	r3, [r7, #11]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d10f      	bne.n	800521a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e005      	b.n	800521a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005238:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d002      	beq.n	8005246 <HAL_CAN_ActivateNotification+0x1e>
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d109      	bne.n	800525a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6959      	ldr	r1, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	e006      	b.n	8005268 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
  }
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08a      	sub	sp, #40	@ 0x28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d07c      	beq.n	80053b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d023      	beq.n	800530c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f983 	bl	80055e2 <HAL_CAN_TxMailbox0CompleteCallback>
 80052dc:	e016      	b.n	800530c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f0:	e00c      	b.n	800530c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
 8005304:	e002      	b.n	800530c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f989 	bl	800561e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d024      	beq.n	8005360 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800531e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f963 	bl	80055f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8005330:	e016      	b.n	8005360 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
 8005344:	e00c      	b.n	8005360 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005356:	627b      	str	r3, [r7, #36]	@ 0x24
 8005358:	e002      	b.n	8005360 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f969 	bl	8005632 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d024      	beq.n	80053b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005372:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f943 	bl	800560a <HAL_CAN_TxMailbox2CompleteCallback>
 8005384:	e016      	b.n	80053b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005396:	627b      	str	r3, [r7, #36]	@ 0x24
 8005398:	e00c      	b.n	80053b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ac:	e002      	b.n	80053b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f949 	bl	8005646 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d006      	beq.n	80053fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2208      	movs	r2, #8
 80053f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f930 	bl	800565a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fe f95e 	bl	80036d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2210      	movs	r2, #16
 800543a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2208      	movs	r2, #8
 8005456:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f908 	bl	800566e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fe f91a 	bl	80036b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d006      	beq.n	800549e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2210      	movs	r2, #16
 8005496:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8f2 	bl	8005682 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2208      	movs	r2, #8
 80054b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8eb 	bl	8005696 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d07b      	beq.n	80055c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d072      	beq.n	80055ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	f043 0304 	orr.w	r3, r3, #4
 8005526:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800552e:	2b00      	cmp	r3, #0
 8005530:	d043      	beq.n	80055ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005538:	2b00      	cmp	r3, #0
 800553a:	d03e      	beq.n	80055ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005542:	2b60      	cmp	r3, #96	@ 0x60
 8005544:	d02b      	beq.n	800559e <HAL_CAN_IRQHandler+0x32a>
 8005546:	2b60      	cmp	r3, #96	@ 0x60
 8005548:	d82e      	bhi.n	80055a8 <HAL_CAN_IRQHandler+0x334>
 800554a:	2b50      	cmp	r3, #80	@ 0x50
 800554c:	d022      	beq.n	8005594 <HAL_CAN_IRQHandler+0x320>
 800554e:	2b50      	cmp	r3, #80	@ 0x50
 8005550:	d82a      	bhi.n	80055a8 <HAL_CAN_IRQHandler+0x334>
 8005552:	2b40      	cmp	r3, #64	@ 0x40
 8005554:	d019      	beq.n	800558a <HAL_CAN_IRQHandler+0x316>
 8005556:	2b40      	cmp	r3, #64	@ 0x40
 8005558:	d826      	bhi.n	80055a8 <HAL_CAN_IRQHandler+0x334>
 800555a:	2b30      	cmp	r3, #48	@ 0x30
 800555c:	d010      	beq.n	8005580 <HAL_CAN_IRQHandler+0x30c>
 800555e:	2b30      	cmp	r3, #48	@ 0x30
 8005560:	d822      	bhi.n	80055a8 <HAL_CAN_IRQHandler+0x334>
 8005562:	2b10      	cmp	r3, #16
 8005564:	d002      	beq.n	800556c <HAL_CAN_IRQHandler+0x2f8>
 8005566:	2b20      	cmp	r3, #32
 8005568:	d005      	beq.n	8005576 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800556a:	e01d      	b.n	80055a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	f043 0308 	orr.w	r3, r3, #8
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005574:	e019      	b.n	80055aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	f043 0310 	orr.w	r3, r3, #16
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800557e:	e014      	b.n	80055aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	f043 0320 	orr.w	r3, r3, #32
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005588:	e00f      	b.n	80055aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005592:	e00a      	b.n	80055aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800559c:	e005      	b.n	80055aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80055a6:	e000      	b.n	80055aa <HAL_CAN_IRQHandler+0x336>
            break;
 80055a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80055b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2204      	movs	r2, #4
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f868 	bl	80056aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80055da:	bf00      	nop
 80055dc:	3728      	adds	r7, #40	@ 0x28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <__NVIC_SetPriorityGrouping>:
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056e8:	4b0c      	ldr	r3, [pc, #48]	@ (800571c <__NVIC_SetPriorityGrouping+0x44>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056f4:	4013      	ands	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800570a:	4a04      	ldr	r2, [pc, #16]	@ (800571c <__NVIC_SetPriorityGrouping+0x44>)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	60d3      	str	r3, [r2, #12]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <__NVIC_GetPriorityGrouping>:
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <__NVIC_GetPriorityGrouping+0x18>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	f003 0307 	and.w	r3, r3, #7
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <__NVIC_EnableIRQ>:
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574a:	2b00      	cmp	r3, #0
 800574c:	db0b      	blt.n	8005766 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	f003 021f 	and.w	r2, r3, #31
 8005754:	4907      	ldr	r1, [pc, #28]	@ (8005774 <__NVIC_EnableIRQ+0x38>)
 8005756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2001      	movs	r0, #1
 800575e:	fa00 f202 	lsl.w	r2, r0, r2
 8005762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	e000e100 	.word	0xe000e100

08005778 <__NVIC_SetPriority>:
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	6039      	str	r1, [r7, #0]
 8005782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005788:	2b00      	cmp	r3, #0
 800578a:	db0a      	blt.n	80057a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	b2da      	uxtb	r2, r3
 8005790:	490c      	ldr	r1, [pc, #48]	@ (80057c4 <__NVIC_SetPriority+0x4c>)
 8005792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005796:	0112      	lsls	r2, r2, #4
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	440b      	add	r3, r1
 800579c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80057a0:	e00a      	b.n	80057b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	4908      	ldr	r1, [pc, #32]	@ (80057c8 <__NVIC_SetPriority+0x50>)
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	3b04      	subs	r3, #4
 80057b0:	0112      	lsls	r2, r2, #4
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	440b      	add	r3, r1
 80057b6:	761a      	strb	r2, [r3, #24]
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	e000e100 	.word	0xe000e100
 80057c8:	e000ed00 	.word	0xe000ed00

080057cc <NVIC_EncodePriority>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b089      	sub	sp, #36	@ 0x24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f1c3 0307 	rsb	r3, r3, #7
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	bf28      	it	cs
 80057ea:	2304      	movcs	r3, #4
 80057ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d902      	bls.n	80057fc <NVIC_EncodePriority+0x30>
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	3b03      	subs	r3, #3
 80057fa:	e000      	b.n	80057fe <NVIC_EncodePriority+0x32>
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005800:	f04f 32ff 	mov.w	r2, #4294967295
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43da      	mvns	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	401a      	ands	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005814:	f04f 31ff 	mov.w	r1, #4294967295
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	fa01 f303 	lsl.w	r3, r1, r3
 800581e:	43d9      	mvns	r1, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005824:	4313      	orrs	r3, r2
}
 8005826:	4618      	mov	r0, r3
 8005828:	3724      	adds	r7, #36	@ 0x24
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ff4c 	bl	80056d8 <__NVIC_SetPriorityGrouping>
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800585a:	f7ff ff61 	bl	8005720 <__NVIC_GetPriorityGrouping>
 800585e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	6978      	ldr	r0, [r7, #20]
 8005866:	f7ff ffb1 	bl	80057cc <NVIC_EncodePriority>
 800586a:	4602      	mov	r2, r0
 800586c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff ff80 	bl	8005778 <__NVIC_SetPriority>
}
 8005878:	bf00      	nop
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800588a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff ff54 	bl	800573c <__NVIC_EnableIRQ>
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058aa:	f7fe fc43 	bl	8004134 <HAL_GetTick>
 80058ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d008      	beq.n	80058ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e052      	b.n	8005974 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0216 	bic.w	r2, r2, #22
 80058dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d103      	bne.n	80058fe <HAL_DMA_Abort+0x62>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0208 	bic.w	r2, r2, #8
 800590c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800591e:	e013      	b.n	8005948 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005920:	f7fe fc08 	bl	8004134 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b05      	cmp	r3, #5
 800592c:	d90c      	bls.n	8005948 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2203      	movs	r2, #3
 8005938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e015      	b.n	8005974 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e4      	bne.n	8005920 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800595a:	223f      	movs	r2, #63	@ 0x3f
 800595c:	409a      	lsls	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d004      	beq.n	800599a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2280      	movs	r2, #128	@ 0x80
 8005994:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e00c      	b.n	80059b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2205      	movs	r2, #5
 800599e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b089      	sub	sp, #36	@ 0x24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	e165      	b.n	8005ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059dc:	2201      	movs	r2, #1
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4013      	ands	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	f040 8154 	bne.w	8005ca2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d005      	beq.n	8005a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d130      	bne.n	8005a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43db      	mvns	r3, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4013      	ands	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a48:	2201      	movs	r2, #1
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f003 0201 	and.w	r2, r3, #1
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d017      	beq.n	8005ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d123      	bne.n	8005b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	220f      	movs	r2, #15
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4013      	ands	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	08da      	lsrs	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3208      	adds	r2, #8
 8005afe:	69b9      	ldr	r1, [r7, #24]
 8005b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	2203      	movs	r2, #3
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 0203 	and.w	r2, r3, #3
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80ae 	beq.w	8005ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005cc0 <HAL_GPIO_Init+0x300>)
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4e:	4a5c      	ldr	r2, [pc, #368]	@ (8005cc0 <HAL_GPIO_Init+0x300>)
 8005b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b56:	4b5a      	ldr	r3, [pc, #360]	@ (8005cc0 <HAL_GPIO_Init+0x300>)
 8005b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b62:	4a58      	ldr	r2, [pc, #352]	@ (8005cc4 <HAL_GPIO_Init+0x304>)
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	089b      	lsrs	r3, r3, #2
 8005b68:	3302      	adds	r3, #2
 8005b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	220f      	movs	r2, #15
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	4013      	ands	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a4f      	ldr	r2, [pc, #316]	@ (8005cc8 <HAL_GPIO_Init+0x308>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d025      	beq.n	8005bda <HAL_GPIO_Init+0x21a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a4e      	ldr	r2, [pc, #312]	@ (8005ccc <HAL_GPIO_Init+0x30c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01f      	beq.n	8005bd6 <HAL_GPIO_Init+0x216>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a4d      	ldr	r2, [pc, #308]	@ (8005cd0 <HAL_GPIO_Init+0x310>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d019      	beq.n	8005bd2 <HAL_GPIO_Init+0x212>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a4c      	ldr	r2, [pc, #304]	@ (8005cd4 <HAL_GPIO_Init+0x314>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_GPIO_Init+0x20e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd8 <HAL_GPIO_Init+0x318>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00d      	beq.n	8005bca <HAL_GPIO_Init+0x20a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8005cdc <HAL_GPIO_Init+0x31c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <HAL_GPIO_Init+0x206>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a49      	ldr	r2, [pc, #292]	@ (8005ce0 <HAL_GPIO_Init+0x320>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <HAL_GPIO_Init+0x202>
 8005bbe:	2306      	movs	r3, #6
 8005bc0:	e00c      	b.n	8005bdc <HAL_GPIO_Init+0x21c>
 8005bc2:	2307      	movs	r3, #7
 8005bc4:	e00a      	b.n	8005bdc <HAL_GPIO_Init+0x21c>
 8005bc6:	2305      	movs	r3, #5
 8005bc8:	e008      	b.n	8005bdc <HAL_GPIO_Init+0x21c>
 8005bca:	2304      	movs	r3, #4
 8005bcc:	e006      	b.n	8005bdc <HAL_GPIO_Init+0x21c>
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e004      	b.n	8005bdc <HAL_GPIO_Init+0x21c>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e002      	b.n	8005bdc <HAL_GPIO_Init+0x21c>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <HAL_GPIO_Init+0x21c>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	f002 0203 	and.w	r2, r2, #3
 8005be2:	0092      	lsls	r2, r2, #2
 8005be4:	4093      	lsls	r3, r2
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bec:	4935      	ldr	r1, [pc, #212]	@ (8005cc4 <HAL_GPIO_Init+0x304>)
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	089b      	lsrs	r3, r3, #2
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c1e:	4a31      	ldr	r2, [pc, #196]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c24:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4013      	ands	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c48:	4a26      	ldr	r2, [pc, #152]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c4e:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	43db      	mvns	r3, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c72:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4013      	ands	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	2b0f      	cmp	r3, #15
 8005cac:	f67f ae96 	bls.w	80059dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	3724      	adds	r7, #36	@ 0x24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	40013800 	.word	0x40013800
 8005cc8:	40020000 	.word	0x40020000
 8005ccc:	40020400 	.word	0x40020400
 8005cd0:	40020800 	.word	0x40020800
 8005cd4:	40020c00 	.word	0x40020c00
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40021400 	.word	0x40021400
 8005ce0:	40021800 	.word	0x40021800
 8005ce4:	40013c00 	.word	0x40013c00

08005ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cf8:	787b      	ldrb	r3, [r7, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d04:	e003      	b.n	8005d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	041a      	lsls	r2, r3, #16
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	619a      	str	r2, [r3, #24]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af02      	add	r7, sp, #8
 8005d20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e108      	b.n	8005f3e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fe f92a 	bl	8003fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2203      	movs	r2, #3
 8005d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d5a:	d102      	bne.n	8005d62 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f004 fd37 	bl	800a7da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	7c1a      	ldrb	r2, [r3, #16]
 8005d74:	f88d 2000 	strb.w	r2, [sp]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d7c:	f004 fc16 	bl	800a5ac <USB_CoreInit>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e0d5      	b.n	8005f3e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f004 fd2f 	bl	800a7fc <USB_SetCurrentMode>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0c6      	b.n	8005f3e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e04a      	b.n	8005e4c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005db6:	7bfa      	ldrb	r2, [r7, #15]
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3315      	adds	r3, #21
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3314      	adds	r3, #20
 8005dda:	7bfa      	ldrb	r2, [r7, #15]
 8005ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	b298      	uxth	r0, r3
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	332e      	adds	r3, #46	@ 0x2e
 8005df2:	4602      	mov	r2, r0
 8005df4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005df6:	7bfa      	ldrb	r2, [r7, #15]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	3318      	adds	r3, #24
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e0a:	7bfa      	ldrb	r2, [r7, #15]
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	331c      	adds	r3, #28
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e1e:	7bfa      	ldrb	r2, [r7, #15]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3320      	adds	r3, #32
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e32:	7bfa      	ldrb	r2, [r7, #15]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	3324      	adds	r3, #36	@ 0x24
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	791b      	ldrb	r3, [r3, #4]
 8005e50:	7bfa      	ldrb	r2, [r7, #15]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d3af      	bcc.n	8005db6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
 8005e5a:	e044      	b.n	8005ee6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e5c:	7bfa      	ldrb	r2, [r7, #15]
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e72:	7bfa      	ldrb	r2, [r7, #15]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005e84:	7bfa      	ldrb	r2, [r7, #15]
 8005e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e88:	7bfa      	ldrb	r2, [r7, #15]
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005eca:	7bfa      	ldrb	r2, [r7, #15]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	791b      	ldrb	r3, [r3, #4]
 8005eea:	7bfa      	ldrb	r2, [r7, #15]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d3b5      	bcc.n	8005e5c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	7c1a      	ldrb	r2, [r3, #16]
 8005ef8:	f88d 2000 	strb.w	r2, [sp]
 8005efc:	3304      	adds	r3, #4
 8005efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f00:	f004 fcc8 	bl	800a894 <USB_DevInit>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e013      	b.n	8005f3e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7b1b      	ldrb	r3, [r3, #12]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d102      	bne.n	8005f32 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 f96f 	bl	8007210 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f005 fd05 	bl	800b946 <USB_DevDisconnect>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_PCD_Start+0x1c>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e022      	b.n	8005fa8 <HAL_PCD_Start+0x62>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d105      	bne.n	8005f8a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f004 fc12 	bl	800a7b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f005 fcb3 	bl	800b904 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005fb0:	b590      	push	{r4, r7, lr}
 8005fb2:	b08d      	sub	sp, #52	@ 0x34
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f005 fd71 	bl	800baae <USB_GetMode>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 84b9 	bne.w	8006946 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f005 fcd5 	bl	800b988 <USB_ReadInterrupts>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 84af 	beq.w	8006944 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f005 fcc2 	bl	800b988 <USB_ReadInterrupts>
 8006004:	4603      	mov	r3, r0
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d107      	bne.n	800601e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f002 0202 	and.w	r2, r2, #2
 800601c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f005 fcb0 	bl	800b988 <USB_ReadInterrupts>
 8006028:	4603      	mov	r3, r0
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b10      	cmp	r3, #16
 8006030:	d161      	bne.n	80060f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0210 	bic.w	r2, r2, #16
 8006040:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f003 020f 	and.w	r2, r3, #15
 800604e:	4613      	mov	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	3304      	adds	r3, #4
 8006060:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	0c5b      	lsrs	r3, r3, #17
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	2b02      	cmp	r3, #2
 800606c:	d124      	bne.n	80060b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d035      	beq.n	80060e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	6a38      	ldr	r0, [r7, #32]
 800608e:	f005 fae7 	bl	800b660 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	091b      	lsrs	r3, r3, #4
 800609a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800609e:	441a      	add	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	695a      	ldr	r2, [r3, #20]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060b0:	441a      	add	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	615a      	str	r2, [r3, #20]
 80060b6:	e016      	b.n	80060e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	0c5b      	lsrs	r3, r3, #17
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	2b06      	cmp	r3, #6
 80060c2:	d110      	bne.n	80060e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060ca:	2208      	movs	r2, #8
 80060cc:	4619      	mov	r1, r3
 80060ce:	6a38      	ldr	r0, [r7, #32]
 80060d0:	f005 fac6 	bl	800b660 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060e0:	441a      	add	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0210 	orr.w	r2, r2, #16
 80060f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f005 fc44 	bl	800b988 <USB_ReadInterrupts>
 8006100:	4603      	mov	r3, r0
 8006102:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006106:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800610a:	f040 80a7 	bne.w	800625c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f005 fc49 	bl	800b9ae <USB_ReadDevAllOutEpInterrupt>
 800611c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800611e:	e099      	b.n	8006254 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 808e 	beq.w	8006248 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f005 fc6d 	bl	800ba16 <USB_ReadDevOutEPInterrupt>
 800613c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006154:	461a      	mov	r2, r3
 8006156:	2301      	movs	r3, #1
 8006158:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800615a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fed1 	bl	8006f04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006178:	461a      	mov	r2, r3
 800617a:	2308      	movs	r3, #8
 800617c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800617e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 ffa7 	bl	80070d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619c:	461a      	mov	r2, r3
 800619e:	2310      	movs	r3, #16
 80061a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d030      	beq.n	800620e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b4:	2b80      	cmp	r3, #128	@ 0x80
 80061b6:	d109      	bne.n	80061cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80061cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	3304      	adds	r3, #4
 80061e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d108      	bne.n	80061fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f008 fce2 	bl	800ebc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	2302      	movs	r3, #2
 800620c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	2320      	movs	r3, #32
 8006228:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006240:	461a      	mov	r2, r3
 8006242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006246:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	3301      	adds	r3, #1
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	2b00      	cmp	r3, #0
 8006258:	f47f af62 	bne.w	8006120 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f005 fb91 	bl	800b988 <USB_ReadInterrupts>
 8006266:	4603      	mov	r3, r0
 8006268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800626c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006270:	f040 80db 	bne.w	800642a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	f005 fbb2 	bl	800b9e2 <USB_ReadDevAllInEpInterrupt>
 800627e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006284:	e0cd      	b.n	8006422 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80c2 	beq.w	8006416 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	4611      	mov	r1, r2
 800629c:	4618      	mov	r0, r3
 800629e:	f005 fbd8 	bl	800ba52 <USB_ReadDevInEPInterrupt>
 80062a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d057      	beq.n	800635e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	2201      	movs	r2, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	43db      	mvns	r3, r3
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062ce:	4013      	ands	r3, r2
 80062d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062de:	461a      	mov	r2, r3
 80062e0:	2301      	movs	r3, #1
 80062e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	799b      	ldrb	r3, [r3, #6]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d132      	bne.n	8006352 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f0:	4613      	mov	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	3320      	adds	r3, #32
 80062fc:	6819      	ldr	r1, [r3, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4403      	add	r3, r0
 800630c:	331c      	adds	r3, #28
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4419      	add	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4403      	add	r3, r0
 8006320:	3320      	adds	r3, #32
 8006322:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d113      	bne.n	8006352 <HAL_PCD_IRQHandler+0x3a2>
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3324      	adds	r3, #36	@ 0x24
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d108      	bne.n	8006352 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800634a:	461a      	mov	r2, r3
 800634c:	2101      	movs	r1, #1
 800634e:	f005 fbdf 	bl	800bb10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	b2db      	uxtb	r3, r3
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f008 fbac 	bl	800eab6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	2308      	movs	r3, #8
 8006378:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006390:	461a      	mov	r2, r3
 8006392:	2310      	movs	r3, #16
 8006394:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d008      	beq.n	80063b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ac:	461a      	mov	r2, r3
 80063ae:	2340      	movs	r3, #64	@ 0x40
 80063b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d023      	beq.n	8006404 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80063bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063be:	6a38      	ldr	r0, [r7, #32]
 80063c0:	f004 fbc6 	bl	800ab50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80063c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c6:	4613      	mov	r3, r2
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	3310      	adds	r3, #16
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4413      	add	r3, r2
 80063d4:	3304      	adds	r3, #4
 80063d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	78db      	ldrb	r3, [r3, #3]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d108      	bne.n	80063f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f008 fbf9 	bl	800ebe4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fe:	461a      	mov	r2, r3
 8006400:	2302      	movs	r3, #2
 8006402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800640e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fcea 	bl	8006dea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	3301      	adds	r3, #1
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	f47f af2e 	bne.w	8006286 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f005 faaa 	bl	800b988 <USB_ReadInterrupts>
 8006434:	4603      	mov	r3, r0
 8006436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800643a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800643e:	d122      	bne.n	8006486 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800645a:	2b01      	cmp	r3, #1
 800645c:	d108      	bne.n	8006470 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006466:	2100      	movs	r1, #0
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fef5 	bl	8007258 <HAL_PCDEx_LPM_Callback>
 800646e:	e002      	b.n	8006476 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f008 fb97 	bl	800eba4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695a      	ldr	r2, [r3, #20]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f005 fa7c 	bl	800b988 <USB_ReadInterrupts>
 8006490:	4603      	mov	r3, r0
 8006492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800649a:	d112      	bne.n	80064c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d102      	bne.n	80064b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f008 fb53 	bl	800eb58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80064c0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f005 fa5e 	bl	800b988 <USB_ReadInterrupts>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064d6:	d121      	bne.n	800651c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80064e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d111      	bne.n	8006516 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006500:	089b      	lsrs	r3, r3, #2
 8006502:	f003 020f 	and.w	r2, r3, #15
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800650c:	2101      	movs	r1, #1
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fea2 	bl	8007258 <HAL_PCDEx_LPM_Callback>
 8006514:	e002      	b.n	800651c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f008 fb1e 	bl	800eb58 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f005 fa31 	bl	800b988 <USB_ReadInterrupts>
 8006526:	4603      	mov	r3, r0
 8006528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006530:	f040 80b7 	bne.w	80066a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2110      	movs	r1, #16
 800654e:	4618      	mov	r0, r3
 8006550:	f004 fafe 	bl	800ab50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006554:	2300      	movs	r3, #0
 8006556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006558:	e046      	b.n	80065e8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800655a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006566:	461a      	mov	r2, r3
 8006568:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800656c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800656e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800657e:	0151      	lsls	r1, r2, #5
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	440a      	add	r2, r1
 8006584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006588:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800658c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800658e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659a:	461a      	mov	r2, r3
 800659c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e4:	3301      	adds	r3, #1
 80065e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	791b      	ldrb	r3, [r3, #4]
 80065ec:	461a      	mov	r2, r3
 80065ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d3b2      	bcc.n	800655a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006602:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006606:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	7bdb      	ldrb	r3, [r3, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d016      	beq.n	800663e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006620:	f043 030b 	orr.w	r3, r3, #11
 8006624:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006636:	f043 030b 	orr.w	r3, r3, #11
 800663a:	6453      	str	r3, [r2, #68]	@ 0x44
 800663c:	e015      	b.n	800666a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800664c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006650:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006654:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006664:	f043 030b 	orr.w	r3, r3, #11
 8006668:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006678:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800667c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800668c:	461a      	mov	r2, r3
 800668e:	f005 fa3f 	bl	800bb10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80066a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f005 f96e 	bl	800b988 <USB_ReadInterrupts>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b6:	d123      	bne.n	8006700 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f005 fa04 	bl	800baca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f004 fabb 	bl	800ac42 <USB_GetDevSpeed>
 80066cc:	4603      	mov	r3, r0
 80066ce:	461a      	mov	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681c      	ldr	r4, [r3, #0]
 80066d8:	f000 feb0 	bl	800743c <HAL_RCC_GetHCLKFreq>
 80066dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066e2:	461a      	mov	r2, r3
 80066e4:	4620      	mov	r0, r4
 80066e6:	f003 ffc5 	bl	800a674 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f008 fa0b 	bl	800eb06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80066fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f005 f93f 	bl	800b988 <USB_ReadInterrupts>
 800670a:	4603      	mov	r3, r0
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b08      	cmp	r3, #8
 8006712:	d10a      	bne.n	800672a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f008 f9e8 	bl	800eaea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f002 0208 	and.w	r2, r2, #8
 8006728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f005 f92a 	bl	800b988 <USB_ReadInterrupts>
 8006734:	4603      	mov	r3, r0
 8006736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673a:	2b80      	cmp	r3, #128	@ 0x80
 800673c:	d123      	bne.n	8006786 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800674a:	2301      	movs	r3, #1
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
 800674e:	e014      	b.n	800677a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006754:	4613      	mov	r3, r2
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d105      	bne.n	8006774 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	b2db      	uxtb	r3, r3
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb0a 	bl	8006d88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	3301      	adds	r3, #1
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	791b      	ldrb	r3, [r3, #4]
 800677e:	461a      	mov	r2, r3
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	4293      	cmp	r3, r2
 8006784:	d3e4      	bcc.n	8006750 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f005 f8fc 	bl	800b988 <USB_ReadInterrupts>
 8006790:	4603      	mov	r3, r0
 8006792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800679a:	d13c      	bne.n	8006816 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800679c:	2301      	movs	r3, #1
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a0:	e02b      	b.n	80067fa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b6:	4613      	mov	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	3318      	adds	r3, #24
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d115      	bne.n	80067f4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80067c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da12      	bge.n	80067f4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d2:	4613      	mov	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3317      	adds	r3, #23
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 faca 	bl	8006d88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	3301      	adds	r3, #1
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	461a      	mov	r2, r3
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	4293      	cmp	r3, r2
 8006804:	d3cd      	bcc.n	80067a2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695a      	ldr	r2, [r3, #20]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f005 f8b4 	bl	800b988 <USB_ReadInterrupts>
 8006820:	4603      	mov	r3, r0
 8006822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006826:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800682a:	d156      	bne.n	80068da <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800682c:	2301      	movs	r3, #1
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006830:	e045      	b.n	80068be <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	440b      	add	r3, r1
 8006850:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d12e      	bne.n	80068b8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800685a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800685c:	2b00      	cmp	r3, #0
 800685e:	da2b      	bge.n	80068b8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800686c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006870:	429a      	cmp	r2, r3
 8006872:	d121      	bne.n	80068b8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006878:	4613      	mov	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068b4:	6053      	str	r3, [r2, #4]
            break;
 80068b6:	e008      	b.n	80068ca <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	3301      	adds	r3, #1
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	791b      	ldrb	r3, [r3, #4]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d3b3      	bcc.n	8006832 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80068d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f005 f852 	bl	800b988 <USB_ReadInterrupts>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80068ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ee:	d10a      	bne.n	8006906 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f008 f989 	bl	800ec08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f005 f83c 	bl	800b988 <USB_ReadInterrupts>
 8006910:	4603      	mov	r3, r0
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b04      	cmp	r3, #4
 8006918:	d115      	bne.n	8006946 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f008 f979 	bl	800ec24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6859      	ldr	r1, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
 8006942:	e000      	b.n	8006946 <HAL_PCD_IRQHandler+0x996>
      return;
 8006944:	bf00      	nop
    }
  }
}
 8006946:	3734      	adds	r7, #52	@ 0x34
 8006948:	46bd      	mov	sp, r7
 800694a:	bd90      	pop	{r4, r7, pc}

0800694c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_PCD_SetAddress+0x1a>
 8006962:	2302      	movs	r3, #2
 8006964:	e012      	b.n	800698c <HAL_PCD_SetAddress+0x40>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f004 ff9b 	bl	800b8b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	4608      	mov	r0, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	70fb      	strb	r3, [r7, #3]
 80069a6:	460b      	mov	r3, r1
 80069a8:	803b      	strh	r3, [r7, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da0f      	bge.n	80069da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	4613      	mov	r3, r2
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	3310      	adds	r3, #16
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	3304      	adds	r3, #4
 80069d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	705a      	strb	r2, [r3, #1]
 80069d8:	e00f      	b.n	80069fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	3304      	adds	r3, #4
 80069f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006a06:	883b      	ldrh	r3, [r7, #0]
 8006a08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	78ba      	ldrb	r2, [r7, #2]
 8006a14:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a28:	78bb      	ldrb	r3, [r7, #2]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d102      	bne.n	8006a34 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_PCD_EP_Open+0xae>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e00e      	b.n	8006a60 <HAL_PCD_EP_Open+0xcc>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f004 f91b 	bl	800ac8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da0f      	bge.n	8006a9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	f003 020f 	and.w	r2, r3, #15
 8006a82:	4613      	mov	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	3310      	adds	r3, #16
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	3304      	adds	r3, #4
 8006a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	705a      	strb	r2, [r3, #1]
 8006a9a:	e00f      	b.n	8006abc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_PCD_EP_Close+0x6e>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e00e      	b.n	8006af4 <HAL_PCD_EP_Close+0x8c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f004 f959 	bl	800ad9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	f003 020f 	and.w	r2, r3, #15
 8006b12:	4613      	mov	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	3304      	adds	r3, #4
 8006b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2200      	movs	r2, #0
 8006b36:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	799b      	ldrb	r3, [r3, #6]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d102      	bne.n	8006b58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	799b      	ldrb	r3, [r3, #6]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6979      	ldr	r1, [r7, #20]
 8006b64:	f004 f9f6 	bl	800af54 <USB_EPStartXfer>

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006b94:	681b      	ldr	r3, [r3, #0]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b086      	sub	sp, #24
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	3310      	adds	r3, #16
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2201      	movs	r2, #1
 8006be0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	799b      	ldrb	r3, [r3, #6]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d102      	bne.n	8006bfc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	799b      	ldrb	r3, [r3, #6]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	f004 f9a4 	bl	800af54 <USB_EPStartXfer>

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	7912      	ldrb	r2, [r2, #4]
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d901      	bls.n	8006c34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e04f      	b.n	8006cd4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	da0f      	bge.n	8006c5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	f003 020f 	and.w	r2, r3, #15
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	3310      	adds	r3, #16
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	4413      	add	r3, r2
 8006c50:	3304      	adds	r3, #4
 8006c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2201      	movs	r2, #1
 8006c58:	705a      	strb	r2, [r3, #1]
 8006c5a:	e00d      	b.n	8006c78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3304      	adds	r3, #4
 8006c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_PCD_EP_SetStall+0x82>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e01d      	b.n	8006cd4 <HAL_PCD_EP_SetStall+0xbe>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68f9      	ldr	r1, [r7, #12]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f004 fd32 	bl	800b710 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6818      	ldr	r0, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	7999      	ldrb	r1, [r3, #6]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f004 ff23 	bl	800bb10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	7912      	ldrb	r2, [r2, #4]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d901      	bls.n	8006cfa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e042      	b.n	8006d80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	da0f      	bge.n	8006d22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	4613      	mov	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	3310      	adds	r3, #16
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	3304      	adds	r3, #4
 8006d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	705a      	strb	r2, [r3, #1]
 8006d20:	e00f      	b.n	8006d42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	f003 020f 	and.w	r2, r3, #15
 8006d28:	4613      	mov	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4413      	add	r3, r2
 8006d38:	3304      	adds	r3, #4
 8006d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d101      	bne.n	8006d62 <HAL_PCD_EP_ClrStall+0x86>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e00e      	b.n	8006d80 <HAL_PCD_EP_ClrStall+0xa4>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f004 fd3b 	bl	800b7ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da0c      	bge.n	8006db6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	f003 020f 	and.w	r2, r3, #15
 8006da2:	4613      	mov	r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	3310      	adds	r3, #16
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	3304      	adds	r3, #4
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e00c      	b.n	8006dd0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	3304      	adds	r3, #4
 8006dce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68f9      	ldr	r1, [r7, #12]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f004 fb5a 	bl	800b490 <USB_EPStopXfer>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006de0:	7afb      	ldrb	r3, [r7, #11]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b08a      	sub	sp, #40	@ 0x28
 8006dee:	af02      	add	r7, sp, #8
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	3310      	adds	r3, #16
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3304      	adds	r3, #4
 8006e10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d901      	bls.n	8006e22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e06b      	b.n	8006efa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d902      	bls.n	8006e3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	3303      	adds	r3, #3
 8006e42:	089b      	lsrs	r3, r3, #2
 8006e44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e46:	e02a      	b.n	8006e9e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d902      	bls.n	8006e64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	3303      	adds	r3, #3
 8006e68:	089b      	lsrs	r3, r3, #2
 8006e6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68d9      	ldr	r1, [r3, #12]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6978      	ldr	r0, [r7, #20]
 8006e82:	f004 fbaf 	bl	800b5e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	441a      	add	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d809      	bhi.n	8006ec8 <PCD_WriteEmptyTxFifo+0xde>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d203      	bcs.n	8006ec8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1bf      	bne.n	8006e48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d811      	bhi.n	8006ef8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	2201      	movs	r2, #1
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	43db      	mvns	r3, r3
 8006eee:	6939      	ldr	r1, [r7, #16]
 8006ef0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	333c      	adds	r3, #60	@ 0x3c
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	799b      	ldrb	r3, [r3, #6]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d17b      	bne.n	8007032 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d015      	beq.n	8006f70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	4a61      	ldr	r2, [pc, #388]	@ (80070cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	f240 80b9 	bls.w	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80b3 	beq.w	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f66:	461a      	mov	r2, r3
 8006f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f6c:	6093      	str	r3, [r2, #8]
 8006f6e:	e0a7      	b.n	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f86:	461a      	mov	r2, r3
 8006f88:	2320      	movs	r3, #32
 8006f8a:	6093      	str	r3, [r2, #8]
 8006f8c:	e098      	b.n	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f040 8093 	bne.w	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80070cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d90f      	bls.n	8006fc2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fbe:	6093      	str	r3, [r2, #8]
 8006fc0:	e07e      	b.n	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	0159      	lsls	r1, r3, #5
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	440b      	add	r3, r1
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d114      	bne.n	8007024 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800700c:	461a      	mov	r2, r3
 800700e:	2101      	movs	r1, #1
 8007010:	f004 fd7e 	bl	800bb10 <USB_EP0_OutStart>
 8007014:	e006      	b.n	8007024 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	441a      	add	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f007 fd28 	bl	800ea80 <HAL_PCD_DataOutStageCallback>
 8007030:	e046      	b.n	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	4a26      	ldr	r2, [pc, #152]	@ (80070d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d124      	bne.n	8007084 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007050:	461a      	mov	r2, r3
 8007052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007056:	6093      	str	r3, [r2, #8]
 8007058:	e032      	b.n	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007070:	461a      	mov	r2, r3
 8007072:	2320      	movs	r3, #32
 8007074:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f007 fcff 	bl	800ea80 <HAL_PCD_DataOutStageCallback>
 8007082:	e01d      	b.n	80070c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d114      	bne.n	80070b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	4613      	mov	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d108      	bne.n	80070b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070ac:	461a      	mov	r2, r3
 80070ae:	2100      	movs	r1, #0
 80070b0:	f004 fd2e 	bl	800bb10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f007 fce0 	bl	800ea80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	4f54300a 	.word	0x4f54300a
 80070d0:	4f54310a 	.word	0x4f54310a

080070d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	333c      	adds	r3, #60	@ 0x3c
 80070ec:	3304      	adds	r3, #4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4a15      	ldr	r2, [pc, #84]	@ (800715c <PCD_EP_OutSetupPacket_int+0x88>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d90e      	bls.n	8007128 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007120:	461a      	mov	r2, r3
 8007122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007126:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f007 fc97 	bl	800ea5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4a0a      	ldr	r2, [pc, #40]	@ (800715c <PCD_EP_OutSetupPacket_int+0x88>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d90c      	bls.n	8007150 <PCD_EP_OutSetupPacket_int+0x7c>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	799b      	ldrb	r3, [r3, #6]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d108      	bne.n	8007150 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007148:	461a      	mov	r2, r3
 800714a:	2101      	movs	r1, #1
 800714c:	f004 fce0 	bl	800bb10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	4f54300a 	.word	0x4f54300a

08007160 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
 800716c:	4613      	mov	r3, r2
 800716e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007176:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007178:	78fb      	ldrb	r3, [r7, #3]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800717e:	883b      	ldrh	r3, [r7, #0]
 8007180:	0419      	lsls	r1, r3, #16
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	430a      	orrs	r2, r1
 800718a:	629a      	str	r2, [r3, #40]	@ 0x28
 800718c:	e028      	b.n	80071e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4413      	add	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
 80071a0:	e00d      	b.n	80071be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	3340      	adds	r3, #64	@ 0x40
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	0c1b      	lsrs	r3, r3, #16
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	4413      	add	r3, r2
 80071b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	3301      	adds	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
 80071be:	7bfa      	ldrb	r2, [r7, #15]
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d3ec      	bcc.n	80071a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80071c8:	883b      	ldrh	r3, [r7, #0]
 80071ca:	0418      	lsls	r0, r3, #16
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4302      	orrs	r2, r0
 80071d8:	3340      	adds	r3, #64	@ 0x40
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	887a      	ldrh	r2, [r7, #2]
 8007200:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007242:	f043 0303 	orr.w	r3, r3, #3
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e0cc      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007284:	4b68      	ldr	r3, [pc, #416]	@ (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d90c      	bls.n	80072ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007292:	4b65      	ldr	r3, [pc, #404]	@ (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800729a:	4b63      	ldr	r3, [pc, #396]	@ (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d001      	beq.n	80072ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0b8      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d020      	beq.n	80072fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072c4:	4b59      	ldr	r3, [pc, #356]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	4a58      	ldr	r2, [pc, #352]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80072ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072dc:	4b53      	ldr	r3, [pc, #332]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	4a52      	ldr	r2, [pc, #328]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072e8:	4b50      	ldr	r3, [pc, #320]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	494d      	ldr	r1, [pc, #308]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d044      	beq.n	8007390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d107      	bne.n	800731e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800730e:	4b47      	ldr	r3, [pc, #284]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d119      	bne.n	800734e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e07f      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d003      	beq.n	800732e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800732a:	2b03      	cmp	r3, #3
 800732c:	d107      	bne.n	800733e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800732e:	4b3f      	ldr	r3, [pc, #252]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e06f      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733e:	4b3b      	ldr	r3, [pc, #236]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e067      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800734e:	4b37      	ldr	r3, [pc, #220]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f023 0203 	bic.w	r2, r3, #3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4934      	ldr	r1, [pc, #208]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 800735c:	4313      	orrs	r3, r2
 800735e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007360:	f7fc fee8 	bl	8004134 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007366:	e00a      	b.n	800737e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007368:	f7fc fee4 	bl	8004134 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e04f      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800737e:	4b2b      	ldr	r3, [pc, #172]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 020c 	and.w	r2, r3, #12
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	429a      	cmp	r2, r3
 800738e:	d1eb      	bne.n	8007368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007390:	4b25      	ldr	r3, [pc, #148]	@ (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d20c      	bcs.n	80073b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739e:	4b22      	ldr	r3, [pc, #136]	@ (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073a6:	4b20      	ldr	r3, [pc, #128]	@ (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d001      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e032      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073c4:	4b19      	ldr	r3, [pc, #100]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	4916      	ldr	r1, [pc, #88]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073e2:	4b12      	ldr	r3, [pc, #72]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	490e      	ldr	r1, [pc, #56]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073f6:	f000 fbb1 	bl	8007b5c <HAL_RCC_GetSysClockFreq>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	091b      	lsrs	r3, r3, #4
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	490a      	ldr	r1, [pc, #40]	@ (8007430 <HAL_RCC_ClockConfig+0x1c0>)
 8007408:	5ccb      	ldrb	r3, [r1, r3]
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	4a09      	ldr	r2, [pc, #36]	@ (8007434 <HAL_RCC_ClockConfig+0x1c4>)
 8007410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007412:	4b09      	ldr	r3, [pc, #36]	@ (8007438 <HAL_RCC_ClockConfig+0x1c8>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f7fc f9b2 	bl	8003780 <HAL_InitTick>

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	40023c00 	.word	0x40023c00
 800742c:	40023800 	.word	0x40023800
 8007430:	08014c64 	.word	0x08014c64
 8007434:	20000010 	.word	0x20000010
 8007438:	20000014 	.word	0x20000014

0800743c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007440:	4b03      	ldr	r3, [pc, #12]	@ (8007450 <HAL_RCC_GetHCLKFreq+0x14>)
 8007442:	681b      	ldr	r3, [r3, #0]
}
 8007444:	4618      	mov	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20000010 	.word	0x20000010

08007454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007458:	f7ff fff0 	bl	800743c <HAL_RCC_GetHCLKFreq>
 800745c:	4602      	mov	r2, r0
 800745e:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	0a9b      	lsrs	r3, r3, #10
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	4903      	ldr	r1, [pc, #12]	@ (8007478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800746a:	5ccb      	ldrb	r3, [r1, r3]
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007470:	4618      	mov	r0, r3
 8007472:	bd80      	pop	{r7, pc}
 8007474:	40023800 	.word	0x40023800
 8007478:	08014c74 	.word	0x08014c74

0800747c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007480:	f7ff ffdc 	bl	800743c <HAL_RCC_GetHCLKFreq>
 8007484:	4602      	mov	r2, r0
 8007486:	4b05      	ldr	r3, [pc, #20]	@ (800749c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	0b5b      	lsrs	r3, r3, #13
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	4903      	ldr	r1, [pc, #12]	@ (80074a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007492:	5ccb      	ldrb	r3, [r1, r3]
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40023800 	.word	0x40023800
 80074a0:	08014c74 	.word	0x08014c74

080074a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	220f      	movs	r2, #15
 80074b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074b4:	4b12      	ldr	r3, [pc, #72]	@ (8007500 <HAL_RCC_GetClockConfig+0x5c>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0203 	and.w	r2, r3, #3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007500 <HAL_RCC_GetClockConfig+0x5c>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007500 <HAL_RCC_GetClockConfig+0x5c>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074d8:	4b09      	ldr	r3, [pc, #36]	@ (8007500 <HAL_RCC_GetClockConfig+0x5c>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	08db      	lsrs	r3, r3, #3
 80074de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074e6:	4b07      	ldr	r3, [pc, #28]	@ (8007504 <HAL_RCC_GetClockConfig+0x60>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 020f 	and.w	r2, r3, #15
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	601a      	str	r2, [r3, #0]
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40023800 	.word	0x40023800
 8007504:	40023c00 	.word	0x40023c00

08007508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08c      	sub	sp, #48	@ 0x30
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d010      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007540:	4b6f      	ldr	r3, [pc, #444]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007546:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800754e:	496c      	ldr	r1, [pc, #432]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800755e:	2301      	movs	r3, #1
 8007560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d010      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800756e:	4b64      	ldr	r3, [pc, #400]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007574:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757c:	4960      	ldr	r1, [pc, #384]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800758c:	2301      	movs	r3, #1
 800758e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800759c:	4b58      	ldr	r3, [pc, #352]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800759e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075aa:	4955      	ldr	r1, [pc, #340]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075ba:	d101      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80075bc:	2301      	movs	r3, #1
 80075be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80075c8:	2301      	movs	r3, #1
 80075ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d017      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80075d8:	4b49      	ldr	r3, [pc, #292]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80075da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e6:	4946      	ldr	r1, [pc, #280]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075f6:	d101      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80075f8:	2301      	movs	r3, #1
 80075fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007604:	2301      	movs	r3, #1
 8007606:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 808a 	beq.w	800772a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007616:	2300      	movs	r3, #0
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	4b39      	ldr	r3, [pc, #228]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	4a38      	ldr	r2, [pc, #224]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007624:	6413      	str	r3, [r2, #64]	@ 0x40
 8007626:	4b36      	ldr	r3, [pc, #216]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800762e:	60bb      	str	r3, [r7, #8]
 8007630:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007632:	4b34      	ldr	r3, [pc, #208]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a33      	ldr	r2, [pc, #204]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800763c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800763e:	f7fc fd79 	bl	8004134 <HAL_GetTick>
 8007642:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007644:	e008      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007646:	f7fc fd75 	bl	8004134 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d901      	bls.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e278      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007658:	4b2a      	ldr	r3, [pc, #168]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0f0      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007664:	4b26      	ldr	r3, [pc, #152]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800766c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d02f      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800767c:	6a3a      	ldr	r2, [r7, #32]
 800767e:	429a      	cmp	r2, r3
 8007680:	d028      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007682:	4b1f      	ldr	r3, [pc, #124]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800768a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800768c:	4b1e      	ldr	r3, [pc, #120]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800768e:	2201      	movs	r2, #1
 8007690:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007692:	4b1d      	ldr	r3, [pc, #116]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007698:	4a19      	ldr	r2, [pc, #100]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800769e:	4b18      	ldr	r3, [pc, #96]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d114      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80076aa:	f7fc fd43 	bl	8004134 <HAL_GetTick>
 80076ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b0:	e00a      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b2:	f7fc fd3f 	bl	8004134 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e240      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ee      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076e0:	d114      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80076e2:	4b07      	ldr	r3, [pc, #28]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80076f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076f6:	4902      	ldr	r1, [pc, #8]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	608b      	str	r3, [r1, #8]
 80076fc:	e00c      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80076fe:	bf00      	nop
 8007700:	40023800 	.word	0x40023800
 8007704:	40007000 	.word	0x40007000
 8007708:	42470e40 	.word	0x42470e40
 800770c:	4b4a      	ldr	r3, [pc, #296]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	4a49      	ldr	r2, [pc, #292]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007712:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007716:	6093      	str	r3, [r2, #8]
 8007718:	4b47      	ldr	r3, [pc, #284]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800771a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007724:	4944      	ldr	r1, [pc, #272]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007726:	4313      	orrs	r3, r2
 8007728:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0310 	and.w	r3, r3, #16
 8007732:	2b00      	cmp	r3, #0
 8007734:	d004      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800773c:	4b3f      	ldr	r3, [pc, #252]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800773e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800774c:	4b3a      	ldr	r3, [pc, #232]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800774e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007752:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800775a:	4937      	ldr	r1, [pc, #220]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800776e:	4b32      	ldr	r3, [pc, #200]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007774:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800777c:	492e      	ldr	r1, [pc, #184]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778c:	2b00      	cmp	r3, #0
 800778e:	d011      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007790:	4b29      	ldr	r3, [pc, #164]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007796:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800779e:	4926      	ldr	r1, [pc, #152]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077ae:	d101      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80077b0:	2301      	movs	r3, #1
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80077c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ce:	491a      	ldr	r1, [pc, #104]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d011      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80077e2:	4b15      	ldr	r3, [pc, #84]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f0:	4911      	ldr	r1, [pc, #68]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007800:	d101      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007802:	2301      	movs	r3, #1
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007808:	2b01      	cmp	r3, #1
 800780a:	d005      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007814:	f040 80ff 	bne.w	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007818:	4b09      	ldr	r3, [pc, #36]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800781e:	f7fc fc89 	bl	8004134 <HAL_GetTick>
 8007822:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007824:	e00e      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007826:	f7fc fc85 	bl	8004134 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d907      	bls.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e188      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007838:	40023800 	.word	0x40023800
 800783c:	424711e0 	.word	0x424711e0
 8007840:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007844:	4b7e      	ldr	r3, [pc, #504]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1ea      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800786c:	2b00      	cmp	r3, #0
 800786e:	d028      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d124      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007878:	4b71      	ldr	r3, [pc, #452]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800787a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	3301      	adds	r3, #1
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800788a:	4b6d      	ldr	r3, [pc, #436]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800788c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007890:	0e1b      	lsrs	r3, r3, #24
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	019b      	lsls	r3, r3, #6
 80078a2:	431a      	orrs	r2, r3
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	3b01      	subs	r3, #1
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	431a      	orrs	r2, r3
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	061b      	lsls	r3, r3, #24
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	071b      	lsls	r3, r3, #28
 80078ba:	4961      	ldr	r1, [pc, #388]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d035      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078ec:	d130      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80078ee:	4b54      	ldr	r3, [pc, #336]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80078f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	3301      	adds	r3, #1
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007900:	4b4f      	ldr	r3, [pc, #316]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007906:	0f1b      	lsrs	r3, r3, #28
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	019b      	lsls	r3, r3, #6
 8007918:	431a      	orrs	r2, r3
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	3b01      	subs	r3, #1
 8007920:	041b      	lsls	r3, r3, #16
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	061b      	lsls	r3, r3, #24
 800792a:	431a      	orrs	r2, r3
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	071b      	lsls	r3, r3, #28
 8007930:	4943      	ldr	r1, [pc, #268]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007938:	4b41      	ldr	r3, [pc, #260]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800793a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800793e:	f023 021f 	bic.w	r2, r3, #31
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	3b01      	subs	r3, #1
 8007948:	493d      	ldr	r1, [pc, #244]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007958:	2b00      	cmp	r3, #0
 800795a:	d029      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007964:	d124      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007966:	4b36      	ldr	r3, [pc, #216]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800796c:	0c1b      	lsrs	r3, r3, #16
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	3301      	adds	r3, #1
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007978:	4b31      	ldr	r3, [pc, #196]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800797e:	0f1b      	lsrs	r3, r3, #28
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	019b      	lsls	r3, r3, #6
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	085b      	lsrs	r3, r3, #1
 8007998:	3b01      	subs	r3, #1
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	431a      	orrs	r2, r3
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	061b      	lsls	r3, r3, #24
 80079a2:	431a      	orrs	r2, r3
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	071b      	lsls	r3, r3, #28
 80079a8:	4925      	ldr	r1, [pc, #148]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d016      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	019b      	lsls	r3, r3, #6
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	085b      	lsrs	r3, r3, #1
 80079ce:	3b01      	subs	r3, #1
 80079d0:	041b      	lsls	r3, r3, #16
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	061b      	lsls	r3, r3, #24
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	071b      	lsls	r3, r3, #28
 80079e2:	4917      	ldr	r1, [pc, #92]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079ea:	4b16      	ldr	r3, [pc, #88]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079f0:	f7fc fba0 	bl	8004134 <HAL_GetTick>
 80079f4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079f6:	e008      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079f8:	f7fc fb9c 	bl	8004134 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e09f      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	f040 8095 	bne.w	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a24:	f7fc fb86 	bl	8004134 <HAL_GetTick>
 8007a28:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a2a:	e00f      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a2c:	f7fc fb82 	bl	8004134 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d908      	bls.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e085      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007a3e:	bf00      	nop
 8007a40:	40023800 	.word	0x40023800
 8007a44:	42470068 	.word	0x42470068
 8007a48:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a4c:	4b41      	ldr	r3, [pc, #260]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a58:	d0e8      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d02b      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d127      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007a82:	4b34      	ldr	r3, [pc, #208]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	3301      	adds	r3, #1
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	019b      	lsls	r3, r3, #6
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	085b      	lsrs	r3, r3, #1
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aae:	061b      	lsls	r3, r3, #24
 8007ab0:	4928      	ldr	r1, [pc, #160]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ab8:	4b26      	ldr	r3, [pc, #152]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007abe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	4922      	ldr	r1, [pc, #136]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d01d      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ae6:	d118      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aee:	0e1b      	lsrs	r3, r3, #24
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	019b      	lsls	r3, r3, #6
 8007b00:	431a      	orrs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	085b      	lsrs	r3, r3, #1
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	041b      	lsls	r3, r3, #16
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	061b      	lsls	r3, r3, #24
 8007b12:	4910      	ldr	r1, [pc, #64]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b20:	f7fc fb08 	bl	8004134 <HAL_GetTick>
 8007b24:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b26:	e008      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b28:	f7fc fb04 	bl	8004134 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e007      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b3a:	4b06      	ldr	r3, [pc, #24]	@ (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b46:	d1ef      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3730      	adds	r7, #48	@ 0x30
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40023800 	.word	0x40023800
 8007b58:	42470070 	.word	0x42470070

08007b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b60:	b0ae      	sub	sp, #184	@ 0xb8
 8007b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b82:	4bcb      	ldr	r3, [pc, #812]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 030c 	and.w	r3, r3, #12
 8007b8a:	2b0c      	cmp	r3, #12
 8007b8c:	f200 8206 	bhi.w	8007f9c <HAL_RCC_GetSysClockFreq+0x440>
 8007b90:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bcd 	.word	0x08007bcd
 8007b9c:	08007f9d 	.word	0x08007f9d
 8007ba0:	08007f9d 	.word	0x08007f9d
 8007ba4:	08007f9d 	.word	0x08007f9d
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	08007f9d 	.word	0x08007f9d
 8007bb0:	08007f9d 	.word	0x08007f9d
 8007bb4:	08007f9d 	.word	0x08007f9d
 8007bb8:	08007bdd 	.word	0x08007bdd
 8007bbc:	08007f9d 	.word	0x08007f9d
 8007bc0:	08007f9d 	.word	0x08007f9d
 8007bc4:	08007f9d 	.word	0x08007f9d
 8007bc8:	08007dcd 	.word	0x08007dcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bcc:	4bb9      	ldr	r3, [pc, #740]	@ (8007eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007bd2:	e1e7      	b.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bd4:	4bb8      	ldr	r3, [pc, #736]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007bda:	e1e3      	b.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bdc:	4bb4      	ldr	r3, [pc, #720]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007be8:	4bb1      	ldr	r3, [pc, #708]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d071      	beq.n	8007cd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bf4:	4bae      	ldr	r3, [pc, #696]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	099b      	lsrs	r3, r3, #6
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c00:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c10:	2300      	movs	r3, #0
 8007c12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	f04f 0000 	mov.w	r0, #0
 8007c22:	f04f 0100 	mov.w	r1, #0
 8007c26:	0159      	lsls	r1, r3, #5
 8007c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c2c:	0150      	lsls	r0, r2, #5
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4621      	mov	r1, r4
 8007c34:	1a51      	subs	r1, r2, r1
 8007c36:	6439      	str	r1, [r7, #64]	@ 0x40
 8007c38:	4629      	mov	r1, r5
 8007c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	018b      	lsls	r3, r1, #6
 8007c50:	4641      	mov	r1, r8
 8007c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c56:	4641      	mov	r1, r8
 8007c58:	018a      	lsls	r2, r1, #6
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	1a51      	subs	r1, r2, r1
 8007c5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c60:	4649      	mov	r1, r9
 8007c62:	eb63 0301 	sbc.w	r3, r3, r1
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007c74:	4649      	mov	r1, r9
 8007c76:	00cb      	lsls	r3, r1, #3
 8007c78:	4641      	mov	r1, r8
 8007c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c7e:	4641      	mov	r1, r8
 8007c80:	00ca      	lsls	r2, r1, #3
 8007c82:	4610      	mov	r0, r2
 8007c84:	4619      	mov	r1, r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	4622      	mov	r2, r4
 8007c8a:	189b      	adds	r3, r3, r2
 8007c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c8e:	462b      	mov	r3, r5
 8007c90:	460a      	mov	r2, r1
 8007c92:	eb42 0303 	adc.w	r3, r2, r3
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c98:	f04f 0200 	mov.w	r2, #0
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	024b      	lsls	r3, r1, #9
 8007ca8:	4621      	mov	r1, r4
 8007caa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007cae:	4621      	mov	r1, r4
 8007cb0:	024a      	lsls	r2, r1, #9
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007cc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007cc8:	f7f8 fff8 	bl	8000cbc <__aeabi_uldivmod>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cd6:	e067      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cd8:	4b75      	ldr	r3, [pc, #468]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	099b      	lsrs	r3, r3, #6
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ce4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cf6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	f04f 0000 	mov.w	r0, #0
 8007d02:	f04f 0100 	mov.w	r1, #0
 8007d06:	0159      	lsls	r1, r3, #5
 8007d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d0c:	0150      	lsls	r0, r2, #5
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4621      	mov	r1, r4
 8007d14:	1a51      	subs	r1, r2, r1
 8007d16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007d18:	4629      	mov	r1, r5
 8007d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8007d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	018b      	lsls	r3, r1, #6
 8007d30:	4641      	mov	r1, r8
 8007d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d36:	4641      	mov	r1, r8
 8007d38:	018a      	lsls	r2, r1, #6
 8007d3a:	4641      	mov	r1, r8
 8007d3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d40:	4649      	mov	r1, r9
 8007d42:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d5a:	4692      	mov	sl, r2
 8007d5c:	469b      	mov	fp, r3
 8007d5e:	4623      	mov	r3, r4
 8007d60:	eb1a 0303 	adds.w	r3, sl, r3
 8007d64:	623b      	str	r3, [r7, #32]
 8007d66:	462b      	mov	r3, r5
 8007d68:	eb4b 0303 	adc.w	r3, fp, r3
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	028b      	lsls	r3, r1, #10
 8007d7e:	4621      	mov	r1, r4
 8007d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d84:	4621      	mov	r1, r4
 8007d86:	028a      	lsls	r2, r1, #10
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d90:	2200      	movs	r2, #0
 8007d92:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d94:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007d9a:	f7f8 ff8f 	bl	8000cbc <__aeabi_uldivmod>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4613      	mov	r3, r2
 8007da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007da8:	4b41      	ldr	r3, [pc, #260]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	0c1b      	lsrs	r3, r3, #16
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	3301      	adds	r3, #1
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8007dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007dca:	e0eb      	b.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dcc:	4b38      	ldr	r3, [pc, #224]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dd8:	4b35      	ldr	r3, [pc, #212]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d06b      	beq.n	8007ebc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007de4:	4b32      	ldr	r3, [pc, #200]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	099b      	lsrs	r3, r3, #6
 8007dea:	2200      	movs	r2, #0
 8007dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007df0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007df8:	2300      	movs	r3, #0
 8007dfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8007dfc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007e00:	4622      	mov	r2, r4
 8007e02:	462b      	mov	r3, r5
 8007e04:	f04f 0000 	mov.w	r0, #0
 8007e08:	f04f 0100 	mov.w	r1, #0
 8007e0c:	0159      	lsls	r1, r3, #5
 8007e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e12:	0150      	lsls	r0, r2, #5
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4621      	mov	r1, r4
 8007e1a:	1a51      	subs	r1, r2, r1
 8007e1c:	61b9      	str	r1, [r7, #24]
 8007e1e:	4629      	mov	r1, r5
 8007e20:	eb63 0301 	sbc.w	r3, r3, r1
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	f04f 0200 	mov.w	r2, #0
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007e32:	4659      	mov	r1, fp
 8007e34:	018b      	lsls	r3, r1, #6
 8007e36:	4651      	mov	r1, sl
 8007e38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e3c:	4651      	mov	r1, sl
 8007e3e:	018a      	lsls	r2, r1, #6
 8007e40:	4651      	mov	r1, sl
 8007e42:	ebb2 0801 	subs.w	r8, r2, r1
 8007e46:	4659      	mov	r1, fp
 8007e48:	eb63 0901 	sbc.w	r9, r3, r1
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e60:	4690      	mov	r8, r2
 8007e62:	4699      	mov	r9, r3
 8007e64:	4623      	mov	r3, r4
 8007e66:	eb18 0303 	adds.w	r3, r8, r3
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	462b      	mov	r3, r5
 8007e6e:	eb49 0303 	adc.w	r3, r9, r3
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007e80:	4629      	mov	r1, r5
 8007e82:	024b      	lsls	r3, r1, #9
 8007e84:	4621      	mov	r1, r4
 8007e86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	024a      	lsls	r2, r1, #9
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4619      	mov	r1, r3
 8007e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e96:	2200      	movs	r2, #0
 8007e98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007e9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ea0:	f7f8 ff0c 	bl	8000cbc <__aeabi_uldivmod>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eae:	e065      	b.n	8007f7c <HAL_RCC_GetSysClockFreq+0x420>
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	00f42400 	.word	0x00f42400
 8007eb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8007fb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	099b      	lsrs	r3, r3, #6
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ecc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ece:	2300      	movs	r3, #0
 8007ed0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007ed6:	4642      	mov	r2, r8
 8007ed8:	464b      	mov	r3, r9
 8007eda:	f04f 0000 	mov.w	r0, #0
 8007ede:	f04f 0100 	mov.w	r1, #0
 8007ee2:	0159      	lsls	r1, r3, #5
 8007ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ee8:	0150      	lsls	r0, r2, #5
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4641      	mov	r1, r8
 8007ef0:	1a51      	subs	r1, r2, r1
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007f08:	4659      	mov	r1, fp
 8007f0a:	018b      	lsls	r3, r1, #6
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f12:	4651      	mov	r1, sl
 8007f14:	018a      	lsls	r2, r1, #6
 8007f16:	4651      	mov	r1, sl
 8007f18:	1a54      	subs	r4, r2, r1
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	eb63 0501 	sbc.w	r5, r3, r1
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	00eb      	lsls	r3, r5, #3
 8007f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f2e:	00e2      	lsls	r2, r4, #3
 8007f30:	4614      	mov	r4, r2
 8007f32:	461d      	mov	r5, r3
 8007f34:	4643      	mov	r3, r8
 8007f36:	18e3      	adds	r3, r4, r3
 8007f38:	603b      	str	r3, [r7, #0]
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	eb45 0303 	adc.w	r3, r5, r3
 8007f40:	607b      	str	r3, [r7, #4]
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f4e:	4629      	mov	r1, r5
 8007f50:	028b      	lsls	r3, r1, #10
 8007f52:	4621      	mov	r1, r4
 8007f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f58:	4621      	mov	r1, r4
 8007f5a:	028a      	lsls	r2, r1, #10
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f64:	2200      	movs	r2, #0
 8007f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f68:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007f6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f6e:	f7f8 fea5 	bl	8000cbc <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4613      	mov	r3, r2
 8007f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	0f1b      	lsrs	r3, r3, #28
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f9a:	e003      	b.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f9c:	4b06      	ldr	r3, [pc, #24]	@ (8007fb8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007fa2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	37b8      	adds	r7, #184	@ 0xb8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	00f42400 	.word	0x00f42400

08007fbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e28d      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8083 	beq.w	80080e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007fdc:	4b94      	ldr	r3, [pc, #592]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 030c 	and.w	r3, r3, #12
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d019      	beq.n	800801c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007fe8:	4b91      	ldr	r3, [pc, #580]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 030c 	and.w	r3, r3, #12
        || \
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d106      	bne.n	8008002 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007ff4:	4b8e      	ldr	r3, [pc, #568]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ffc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008000:	d00c      	beq.n	800801c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008002:	4b8b      	ldr	r3, [pc, #556]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800800a:	2b0c      	cmp	r3, #12
 800800c:	d112      	bne.n	8008034 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800800e:	4b88      	ldr	r3, [pc, #544]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800801a:	d10b      	bne.n	8008034 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800801c:	4b84      	ldr	r3, [pc, #528]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05b      	beq.n	80080e0 <HAL_RCC_OscConfig+0x124>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d157      	bne.n	80080e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e25a      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800803c:	d106      	bne.n	800804c <HAL_RCC_OscConfig+0x90>
 800803e:	4b7c      	ldr	r3, [pc, #496]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a7b      	ldr	r2, [pc, #492]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	e01d      	b.n	8008088 <HAL_RCC_OscConfig+0xcc>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008054:	d10c      	bne.n	8008070 <HAL_RCC_OscConfig+0xb4>
 8008056:	4b76      	ldr	r3, [pc, #472]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a75      	ldr	r2, [pc, #468]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 800805c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	4b73      	ldr	r3, [pc, #460]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a72      	ldr	r2, [pc, #456]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	e00b      	b.n	8008088 <HAL_RCC_OscConfig+0xcc>
 8008070:	4b6f      	ldr	r3, [pc, #444]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a6e      	ldr	r2, [pc, #440]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	4b6c      	ldr	r3, [pc, #432]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a6b      	ldr	r2, [pc, #428]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d013      	beq.n	80080b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008090:	f7fc f850 	bl	8004134 <HAL_GetTick>
 8008094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008096:	e008      	b.n	80080aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008098:	f7fc f84c 	bl	8004134 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b64      	cmp	r3, #100	@ 0x64
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e21f      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080aa:	4b61      	ldr	r3, [pc, #388]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0f0      	beq.n	8008098 <HAL_RCC_OscConfig+0xdc>
 80080b6:	e014      	b.n	80080e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b8:	f7fc f83c 	bl	8004134 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080c0:	f7fc f838 	bl	8004134 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b64      	cmp	r3, #100	@ 0x64
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e20b      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080d2:	4b57      	ldr	r3, [pc, #348]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f0      	bne.n	80080c0 <HAL_RCC_OscConfig+0x104>
 80080de:	e000      	b.n	80080e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d06f      	beq.n	80081ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80080ee:	4b50      	ldr	r3, [pc, #320]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 030c 	and.w	r3, r3, #12
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d017      	beq.n	800812a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80080fa:	4b4d      	ldr	r3, [pc, #308]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8008102:	2b08      	cmp	r3, #8
 8008104:	d105      	bne.n	8008112 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008106:	4b4a      	ldr	r3, [pc, #296]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008112:	4b47      	ldr	r3, [pc, #284]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800811a:	2b0c      	cmp	r3, #12
 800811c:	d11c      	bne.n	8008158 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800811e:	4b44      	ldr	r3, [pc, #272]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d116      	bne.n	8008158 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800812a:	4b41      	ldr	r3, [pc, #260]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <HAL_RCC_OscConfig+0x186>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d001      	beq.n	8008142 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e1d3      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008142:	4b3b      	ldr	r3, [pc, #236]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	4937      	ldr	r1, [pc, #220]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008152:	4313      	orrs	r3, r2
 8008154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008156:	e03a      	b.n	80081ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d020      	beq.n	80081a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008160:	4b34      	ldr	r3, [pc, #208]	@ (8008234 <HAL_RCC_OscConfig+0x278>)
 8008162:	2201      	movs	r2, #1
 8008164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008166:	f7fb ffe5 	bl	8004134 <HAL_GetTick>
 800816a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800816e:	f7fb ffe1 	bl	8004134 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e1b4      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008180:	4b2b      	ldr	r3, [pc, #172]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0f0      	beq.n	800816e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800818c:	4b28      	ldr	r3, [pc, #160]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	4925      	ldr	r1, [pc, #148]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 800819c:	4313      	orrs	r3, r2
 800819e:	600b      	str	r3, [r1, #0]
 80081a0:	e015      	b.n	80081ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081a2:	4b24      	ldr	r3, [pc, #144]	@ (8008234 <HAL_RCC_OscConfig+0x278>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a8:	f7fb ffc4 	bl	8004134 <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081b0:	f7fb ffc0 	bl	8004134 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e193      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f0      	bne.n	80081b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d036      	beq.n	8008248 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d016      	beq.n	8008210 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081e2:	4b15      	ldr	r3, [pc, #84]	@ (8008238 <HAL_RCC_OscConfig+0x27c>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e8:	f7fb ffa4 	bl	8004134 <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081f0:	f7fb ffa0 	bl	8004134 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e173      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008202:	4b0b      	ldr	r3, [pc, #44]	@ (8008230 <HAL_RCC_OscConfig+0x274>)
 8008204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0x234>
 800820e:	e01b      	b.n	8008248 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008210:	4b09      	ldr	r3, [pc, #36]	@ (8008238 <HAL_RCC_OscConfig+0x27c>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008216:	f7fb ff8d 	bl	8004134 <HAL_GetTick>
 800821a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800821c:	e00e      	b.n	800823c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800821e:	f7fb ff89 	bl	8004134 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d907      	bls.n	800823c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e15c      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
 8008230:	40023800 	.word	0x40023800
 8008234:	42470000 	.word	0x42470000
 8008238:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800823c:	4b8a      	ldr	r3, [pc, #552]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 800823e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ea      	bne.n	800821e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 8097 	beq.w	8008384 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800825a:	4b83      	ldr	r3, [pc, #524]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 800825c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10f      	bne.n	8008286 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]
 800826a:	4b7f      	ldr	r3, [pc, #508]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	4a7e      	ldr	r2, [pc, #504]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 8008270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008274:	6413      	str	r3, [r2, #64]	@ 0x40
 8008276:	4b7c      	ldr	r3, [pc, #496]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800827e:	60bb      	str	r3, [r7, #8]
 8008280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008282:	2301      	movs	r3, #1
 8008284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008286:	4b79      	ldr	r3, [pc, #484]	@ (800846c <HAL_RCC_OscConfig+0x4b0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800828e:	2b00      	cmp	r3, #0
 8008290:	d118      	bne.n	80082c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008292:	4b76      	ldr	r3, [pc, #472]	@ (800846c <HAL_RCC_OscConfig+0x4b0>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a75      	ldr	r2, [pc, #468]	@ (800846c <HAL_RCC_OscConfig+0x4b0>)
 8008298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800829c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800829e:	f7fb ff49 	bl	8004134 <HAL_GetTick>
 80082a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082a6:	f7fb ff45 	bl	8004134 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e118      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082b8:	4b6c      	ldr	r3, [pc, #432]	@ (800846c <HAL_RCC_OscConfig+0x4b0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0f0      	beq.n	80082a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d106      	bne.n	80082da <HAL_RCC_OscConfig+0x31e>
 80082cc:	4b66      	ldr	r3, [pc, #408]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80082ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d0:	4a65      	ldr	r2, [pc, #404]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80082d2:	f043 0301 	orr.w	r3, r3, #1
 80082d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082d8:	e01c      	b.n	8008314 <HAL_RCC_OscConfig+0x358>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d10c      	bne.n	80082fc <HAL_RCC_OscConfig+0x340>
 80082e2:	4b61      	ldr	r3, [pc, #388]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e6:	4a60      	ldr	r2, [pc, #384]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80082e8:	f043 0304 	orr.w	r3, r3, #4
 80082ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80082ee:	4b5e      	ldr	r3, [pc, #376]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80082f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f2:	4a5d      	ldr	r2, [pc, #372]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80082fa:	e00b      	b.n	8008314 <HAL_RCC_OscConfig+0x358>
 80082fc:	4b5a      	ldr	r3, [pc, #360]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80082fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008300:	4a59      	ldr	r2, [pc, #356]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	6713      	str	r3, [r2, #112]	@ 0x70
 8008308:	4b57      	ldr	r3, [pc, #348]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 800830a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830c:	4a56      	ldr	r2, [pc, #344]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 800830e:	f023 0304 	bic.w	r3, r3, #4
 8008312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d015      	beq.n	8008348 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800831c:	f7fb ff0a 	bl	8004134 <HAL_GetTick>
 8008320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008322:	e00a      	b.n	800833a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008324:	f7fb ff06 	bl	8004134 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e0d7      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800833a:	4b4b      	ldr	r3, [pc, #300]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 800833c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0ee      	beq.n	8008324 <HAL_RCC_OscConfig+0x368>
 8008346:	e014      	b.n	8008372 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008348:	f7fb fef4 	bl	8004134 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800834e:	e00a      	b.n	8008366 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008350:	f7fb fef0 	bl	8004134 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800835e:	4293      	cmp	r3, r2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e0c1      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008366:	4b40      	ldr	r3, [pc, #256]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1ee      	bne.n	8008350 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d105      	bne.n	8008384 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008378:	4b3b      	ldr	r3, [pc, #236]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 800837a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837c:	4a3a      	ldr	r2, [pc, #232]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 800837e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008382:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80ad 	beq.w	80084e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800838e:	4b36      	ldr	r3, [pc, #216]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 030c 	and.w	r3, r3, #12
 8008396:	2b08      	cmp	r3, #8
 8008398:	d060      	beq.n	800845c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d145      	bne.n	800842e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083a2:	4b33      	ldr	r3, [pc, #204]	@ (8008470 <HAL_RCC_OscConfig+0x4b4>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a8:	f7fb fec4 	bl	8004134 <HAL_GetTick>
 80083ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083b0:	f7fb fec0 	bl	8004134 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e093      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083c2:	4b29      	ldr	r3, [pc, #164]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1f0      	bne.n	80083b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69da      	ldr	r2, [r3, #28]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083dc:	019b      	lsls	r3, r3, #6
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e4:	085b      	lsrs	r3, r3, #1
 80083e6:	3b01      	subs	r3, #1
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f0:	061b      	lsls	r3, r3, #24
 80083f2:	431a      	orrs	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f8:	071b      	lsls	r3, r3, #28
 80083fa:	491b      	ldr	r1, [pc, #108]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008400:	4b1b      	ldr	r3, [pc, #108]	@ (8008470 <HAL_RCC_OscConfig+0x4b4>)
 8008402:	2201      	movs	r2, #1
 8008404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008406:	f7fb fe95 	bl	8004134 <HAL_GetTick>
 800840a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800840c:	e008      	b.n	8008420 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800840e:	f7fb fe91 	bl	8004134 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	d901      	bls.n	8008420 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e064      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008420:	4b11      	ldr	r3, [pc, #68]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0f0      	beq.n	800840e <HAL_RCC_OscConfig+0x452>
 800842c:	e05c      	b.n	80084e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800842e:	4b10      	ldr	r3, [pc, #64]	@ (8008470 <HAL_RCC_OscConfig+0x4b4>)
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008434:	f7fb fe7e 	bl	8004134 <HAL_GetTick>
 8008438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800843c:	f7fb fe7a 	bl	8004134 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b02      	cmp	r3, #2
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e04d      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800844e:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <HAL_RCC_OscConfig+0x4ac>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1f0      	bne.n	800843c <HAL_RCC_OscConfig+0x480>
 800845a:	e045      	b.n	80084e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d107      	bne.n	8008474 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e040      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
 8008468:	40023800 	.word	0x40023800
 800846c:	40007000 	.word	0x40007000
 8008470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008474:	4b1f      	ldr	r3, [pc, #124]	@ (80084f4 <HAL_RCC_OscConfig+0x538>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d030      	beq.n	80084e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800848c:	429a      	cmp	r2, r3
 800848e:	d129      	bne.n	80084e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800849a:	429a      	cmp	r2, r3
 800849c:	d122      	bne.n	80084e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80084a4:	4013      	ands	r3, r2
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80084aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d119      	bne.n	80084e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	3b01      	subs	r3, #1
 80084be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d10f      	bne.n	80084e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d107      	bne.n	80084e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d001      	beq.n	80084e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	40023800 	.word	0x40023800

080084f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e041      	b.n	800858e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d106      	bne.n	8008524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f839 	bl	8008596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3304      	adds	r3, #4
 8008534:	4619      	mov	r1, r3
 8008536:	4610      	mov	r0, r2
 8008538:	f000 fcce 	bl	8008ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800859e:	bf00      	nop
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
	...

080085ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d001      	beq.n	80085c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e04e      	b.n	8008662 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 0201 	orr.w	r2, r2, #1
 80085da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a23      	ldr	r2, [pc, #140]	@ (8008670 <HAL_TIM_Base_Start_IT+0xc4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d022      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x80>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ee:	d01d      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x80>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008674 <HAL_TIM_Base_Start_IT+0xc8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d018      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x80>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008678 <HAL_TIM_Base_Start_IT+0xcc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x80>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a1c      	ldr	r2, [pc, #112]	@ (800867c <HAL_TIM_Base_Start_IT+0xd0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00e      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x80>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a1b      	ldr	r2, [pc, #108]	@ (8008680 <HAL_TIM_Base_Start_IT+0xd4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d009      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x80>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a19      	ldr	r2, [pc, #100]	@ (8008684 <HAL_TIM_Base_Start_IT+0xd8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <HAL_TIM_Base_Start_IT+0x80>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a18      	ldr	r2, [pc, #96]	@ (8008688 <HAL_TIM_Base_Start_IT+0xdc>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d111      	bne.n	8008650 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b06      	cmp	r3, #6
 800863c:	d010      	beq.n	8008660 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 0201 	orr.w	r2, r2, #1
 800864c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800864e:	e007      	b.n	8008660 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	40010000 	.word	0x40010000
 8008674:	40000400 	.word	0x40000400
 8008678:	40000800 	.word	0x40000800
 800867c:	40000c00 	.word	0x40000c00
 8008680:	40010400 	.word	0x40010400
 8008684:	40014000 	.word	0x40014000
 8008688:	40001800 	.word	0x40001800

0800868c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e041      	b.n	8008722 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7fb fb70 	bl	8003d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3304      	adds	r3, #4
 80086c8:	4619      	mov	r1, r3
 80086ca:	4610      	mov	r0, r2
 80086cc:	f000 fc04 	bl	8008ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <HAL_TIM_PWM_Start+0x24>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b01      	cmp	r3, #1
 8008746:	bf14      	ite	ne
 8008748:	2301      	movne	r3, #1
 800874a:	2300      	moveq	r3, #0
 800874c:	b2db      	uxtb	r3, r3
 800874e:	e022      	b.n	8008796 <HAL_TIM_PWM_Start+0x6a>
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2b04      	cmp	r3, #4
 8008754:	d109      	bne.n	800876a <HAL_TIM_PWM_Start+0x3e>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b01      	cmp	r3, #1
 8008760:	bf14      	ite	ne
 8008762:	2301      	movne	r3, #1
 8008764:	2300      	moveq	r3, #0
 8008766:	b2db      	uxtb	r3, r3
 8008768:	e015      	b.n	8008796 <HAL_TIM_PWM_Start+0x6a>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b08      	cmp	r3, #8
 800876e:	d109      	bne.n	8008784 <HAL_TIM_PWM_Start+0x58>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	bf14      	ite	ne
 800877c:	2301      	movne	r3, #1
 800877e:	2300      	moveq	r3, #0
 8008780:	b2db      	uxtb	r3, r3
 8008782:	e008      	b.n	8008796 <HAL_TIM_PWM_Start+0x6a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b01      	cmp	r3, #1
 800878e:	bf14      	ite	ne
 8008790:	2301      	movne	r3, #1
 8008792:	2300      	moveq	r3, #0
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e07c      	b.n	8008898 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d104      	bne.n	80087ae <HAL_TIM_PWM_Start+0x82>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087ac:	e013      	b.n	80087d6 <HAL_TIM_PWM_Start+0xaa>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d104      	bne.n	80087be <HAL_TIM_PWM_Start+0x92>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087bc:	e00b      	b.n	80087d6 <HAL_TIM_PWM_Start+0xaa>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d104      	bne.n	80087ce <HAL_TIM_PWM_Start+0xa2>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087cc:	e003      	b.n	80087d6 <HAL_TIM_PWM_Start+0xaa>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2202      	movs	r2, #2
 80087d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2201      	movs	r2, #1
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fdd6 	bl	8009390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a2d      	ldr	r2, [pc, #180]	@ (80088a0 <HAL_TIM_PWM_Start+0x174>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <HAL_TIM_PWM_Start+0xcc>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a2c      	ldr	r2, [pc, #176]	@ (80088a4 <HAL_TIM_PWM_Start+0x178>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d101      	bne.n	80087fc <HAL_TIM_PWM_Start+0xd0>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <HAL_TIM_PWM_Start+0xd2>
 80087fc:	2300      	movs	r3, #0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d007      	beq.n	8008812 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008810:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a22      	ldr	r2, [pc, #136]	@ (80088a0 <HAL_TIM_PWM_Start+0x174>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d022      	beq.n	8008862 <HAL_TIM_PWM_Start+0x136>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008824:	d01d      	beq.n	8008862 <HAL_TIM_PWM_Start+0x136>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1f      	ldr	r2, [pc, #124]	@ (80088a8 <HAL_TIM_PWM_Start+0x17c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d018      	beq.n	8008862 <HAL_TIM_PWM_Start+0x136>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1d      	ldr	r2, [pc, #116]	@ (80088ac <HAL_TIM_PWM_Start+0x180>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d013      	beq.n	8008862 <HAL_TIM_PWM_Start+0x136>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a1c      	ldr	r2, [pc, #112]	@ (80088b0 <HAL_TIM_PWM_Start+0x184>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d00e      	beq.n	8008862 <HAL_TIM_PWM_Start+0x136>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a16      	ldr	r2, [pc, #88]	@ (80088a4 <HAL_TIM_PWM_Start+0x178>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d009      	beq.n	8008862 <HAL_TIM_PWM_Start+0x136>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a18      	ldr	r2, [pc, #96]	@ (80088b4 <HAL_TIM_PWM_Start+0x188>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d004      	beq.n	8008862 <HAL_TIM_PWM_Start+0x136>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a16      	ldr	r2, [pc, #88]	@ (80088b8 <HAL_TIM_PWM_Start+0x18c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d111      	bne.n	8008886 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f003 0307 	and.w	r3, r3, #7
 800886c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b06      	cmp	r3, #6
 8008872:	d010      	beq.n	8008896 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0201 	orr.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008884:	e007      	b.n	8008896 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f042 0201 	orr.w	r2, r2, #1
 8008894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40010400 	.word	0x40010400
 80088a8:	40000400 	.word	0x40000400
 80088ac:	40000800 	.word	0x40000800
 80088b0:	40000c00 	.word	0x40000c00
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40001800 	.word	0x40001800

080088bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e097      	b.n	8008a00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d106      	bne.n	80088ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7fb fa11 	bl	8003d0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2202      	movs	r2, #2
 80088ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008900:	f023 0307 	bic.w	r3, r3, #7
 8008904:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3304      	adds	r3, #4
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f000 fae1 	bl	8008ed8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800893e:	f023 0303 	bic.w	r3, r3, #3
 8008942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	4313      	orrs	r3, r2
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800895c:	f023 030c 	bic.w	r3, r3, #12
 8008960:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008968:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800896c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	4313      	orrs	r3, r2
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	4313      	orrs	r3, r2
 800897e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	011a      	lsls	r2, r3, #4
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	031b      	lsls	r3, r3, #12
 800898c:	4313      	orrs	r3, r2
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	4313      	orrs	r3, r2
 8008992:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800899a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80089a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	4313      	orrs	r3, r2
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d110      	bne.n	8008a5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d102      	bne.n	8008a44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a3e:	7b7b      	ldrb	r3, [r7, #13]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d001      	beq.n	8008a48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e069      	b.n	8008b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a58:	e031      	b.n	8008abe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d110      	bne.n	8008a82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d102      	bne.n	8008a6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a66:	7b3b      	ldrb	r3, [r7, #12]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d001      	beq.n	8008a70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e055      	b.n	8008b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a80:	e01d      	b.n	8008abe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d108      	bne.n	8008a9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d105      	bne.n	8008a9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a8e:	7b7b      	ldrb	r3, [r7, #13]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d102      	bne.n	8008a9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a94:	7b3b      	ldrb	r3, [r7, #12]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d001      	beq.n	8008a9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e03e      	b.n	8008b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_TIM_Encoder_Start+0xc4>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d008      	beq.n	8008adc <HAL_TIM_Encoder_Start+0xd4>
 8008aca:	e00f      	b.n	8008aec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fc5b 	bl	8009390 <TIM_CCxChannelCmd>
      break;
 8008ada:	e016      	b.n	8008b0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	2104      	movs	r1, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fc53 	bl	8009390 <TIM_CCxChannelCmd>
      break;
 8008aea:	e00e      	b.n	8008b0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2201      	movs	r2, #1
 8008af2:	2100      	movs	r1, #0
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fc4b 	bl	8009390 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2201      	movs	r2, #1
 8008b00:	2104      	movs	r1, #4
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fc44 	bl	8009390 <TIM_CCxChannelCmd>
      break;
 8008b08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f042 0201 	orr.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d020      	beq.n	8008b88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01b      	beq.n	8008b88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0202 	mvn.w	r2, #2
 8008b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f994 	bl	8008e9c <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f986 	bl	8008e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f997 	bl	8008eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d020      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01b      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0204 	mvn.w	r2, #4
 8008ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f96e 	bl	8008e9c <HAL_TIM_IC_CaptureCallback>
 8008bc0:	e005      	b.n	8008bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f960 	bl	8008e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f971 	bl	8008eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 0308 	and.w	r3, r3, #8
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d020      	beq.n	8008c20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01b      	beq.n	8008c20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0208 	mvn.w	r2, #8
 8008bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2204      	movs	r2, #4
 8008bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f948 	bl	8008e9c <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f93a 	bl	8008e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f94b 	bl	8008eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 0310 	and.w	r3, r3, #16
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d020      	beq.n	8008c6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01b      	beq.n	8008c6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0210 	mvn.w	r2, #16
 8008c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2208      	movs	r2, #8
 8008c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f922 	bl	8008e9c <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f914 	bl	8008e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f925 	bl	8008eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00c      	beq.n	8008c90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d007      	beq.n	8008c90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0201 	mvn.w	r2, #1
 8008c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7fa fd34 	bl	80036f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00c      	beq.n	8008cb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fc1a 	bl	80094e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00c      	beq.n	8008cd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d007      	beq.n	8008cd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f8f6 	bl	8008ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00c      	beq.n	8008cfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f06f 0220 	mvn.w	r2, #32
 8008cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fbec 	bl	80094d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e0ae      	b.n	8008e80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b0c      	cmp	r3, #12
 8008d2e:	f200 809f 	bhi.w	8008e70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008d32:	a201      	add	r2, pc, #4	@ (adr r2, 8008d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008e71 	.word	0x08008e71
 8008d40:	08008e71 	.word	0x08008e71
 8008d44:	08008e71 	.word	0x08008e71
 8008d48:	08008dad 	.word	0x08008dad
 8008d4c:	08008e71 	.word	0x08008e71
 8008d50:	08008e71 	.word	0x08008e71
 8008d54:	08008e71 	.word	0x08008e71
 8008d58:	08008def 	.word	0x08008def
 8008d5c:	08008e71 	.word	0x08008e71
 8008d60:	08008e71 	.word	0x08008e71
 8008d64:	08008e71 	.word	0x08008e71
 8008d68:	08008e2f 	.word	0x08008e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68b9      	ldr	r1, [r7, #8]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f95c 	bl	8009030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699a      	ldr	r2, [r3, #24]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0208 	orr.w	r2, r2, #8
 8008d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0204 	bic.w	r2, r2, #4
 8008d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6999      	ldr	r1, [r3, #24]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	691a      	ldr	r2, [r3, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	619a      	str	r2, [r3, #24]
      break;
 8008daa:	e064      	b.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f9ac 	bl	8009110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	699a      	ldr	r2, [r3, #24]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6999      	ldr	r1, [r3, #24]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	021a      	lsls	r2, r3, #8
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	619a      	str	r2, [r3, #24]
      break;
 8008dec:	e043      	b.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68b9      	ldr	r1, [r7, #8]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fa01 	bl	80091fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69da      	ldr	r2, [r3, #28]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f042 0208 	orr.w	r2, r2, #8
 8008e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69da      	ldr	r2, [r3, #28]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0204 	bic.w	r2, r2, #4
 8008e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	69d9      	ldr	r1, [r3, #28]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	61da      	str	r2, [r3, #28]
      break;
 8008e2c:	e023      	b.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fa55 	bl	80092e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69da      	ldr	r2, [r3, #28]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69d9      	ldr	r1, [r3, #28]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	021a      	lsls	r2, r3, #8
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	61da      	str	r2, [r3, #28]
      break;
 8008e6e:	e002      	b.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]
      break;
 8008e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a46      	ldr	r2, [pc, #280]	@ (8009004 <TIM_Base_SetConfig+0x12c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d013      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ef6:	d00f      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a43      	ldr	r2, [pc, #268]	@ (8009008 <TIM_Base_SetConfig+0x130>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00b      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a42      	ldr	r2, [pc, #264]	@ (800900c <TIM_Base_SetConfig+0x134>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d007      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a41      	ldr	r2, [pc, #260]	@ (8009010 <TIM_Base_SetConfig+0x138>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_Base_SetConfig+0x40>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a40      	ldr	r2, [pc, #256]	@ (8009014 <TIM_Base_SetConfig+0x13c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d108      	bne.n	8008f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a35      	ldr	r2, [pc, #212]	@ (8009004 <TIM_Base_SetConfig+0x12c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d02b      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f38:	d027      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a32      	ldr	r2, [pc, #200]	@ (8009008 <TIM_Base_SetConfig+0x130>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d023      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a31      	ldr	r2, [pc, #196]	@ (800900c <TIM_Base_SetConfig+0x134>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d01f      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a30      	ldr	r2, [pc, #192]	@ (8009010 <TIM_Base_SetConfig+0x138>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d01b      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a2f      	ldr	r2, [pc, #188]	@ (8009014 <TIM_Base_SetConfig+0x13c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d017      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8009018 <TIM_Base_SetConfig+0x140>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d013      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a2d      	ldr	r2, [pc, #180]	@ (800901c <TIM_Base_SetConfig+0x144>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00f      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8009020 <TIM_Base_SetConfig+0x148>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d00b      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2b      	ldr	r2, [pc, #172]	@ (8009024 <TIM_Base_SetConfig+0x14c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d007      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8009028 <TIM_Base_SetConfig+0x150>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d003      	beq.n	8008f8a <TIM_Base_SetConfig+0xb2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a29      	ldr	r2, [pc, #164]	@ (800902c <TIM_Base_SetConfig+0x154>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d108      	bne.n	8008f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a10      	ldr	r2, [pc, #64]	@ (8009004 <TIM_Base_SetConfig+0x12c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d003      	beq.n	8008fd0 <TIM_Base_SetConfig+0xf8>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a12      	ldr	r2, [pc, #72]	@ (8009014 <TIM_Base_SetConfig+0x13c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d103      	bne.n	8008fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d105      	bne.n	8008ff6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f023 0201 	bic.w	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	611a      	str	r2, [r3, #16]
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40010000 	.word	0x40010000
 8009008:	40000400 	.word	0x40000400
 800900c:	40000800 	.word	0x40000800
 8009010:	40000c00 	.word	0x40000c00
 8009014:	40010400 	.word	0x40010400
 8009018:	40014000 	.word	0x40014000
 800901c:	40014400 	.word	0x40014400
 8009020:	40014800 	.word	0x40014800
 8009024:	40001800 	.word	0x40001800
 8009028:	40001c00 	.word	0x40001c00
 800902c:	40002000 	.word	0x40002000

08009030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	f023 0201 	bic.w	r2, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0303 	bic.w	r3, r3, #3
 8009066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f023 0302 	bic.w	r3, r3, #2
 8009078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a20      	ldr	r2, [pc, #128]	@ (8009108 <TIM_OC1_SetConfig+0xd8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d003      	beq.n	8009094 <TIM_OC1_SetConfig+0x64>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a1f      	ldr	r2, [pc, #124]	@ (800910c <TIM_OC1_SetConfig+0xdc>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d10c      	bne.n	80090ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f023 0308 	bic.w	r3, r3, #8
 800909a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f023 0304 	bic.w	r3, r3, #4
 80090ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a15      	ldr	r2, [pc, #84]	@ (8009108 <TIM_OC1_SetConfig+0xd8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d003      	beq.n	80090be <TIM_OC1_SetConfig+0x8e>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a14      	ldr	r2, [pc, #80]	@ (800910c <TIM_OC1_SetConfig+0xdc>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d111      	bne.n	80090e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4313      	orrs	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	621a      	str	r2, [r3, #32]
}
 80090fc:	bf00      	nop
 80090fe:	371c      	adds	r7, #28
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	40010000 	.word	0x40010000
 800910c:	40010400 	.word	0x40010400

08009110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	f023 0210 	bic.w	r2, r3, #16
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800913e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f023 0320 	bic.w	r3, r3, #32
 800915a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a22      	ldr	r2, [pc, #136]	@ (80091f4 <TIM_OC2_SetConfig+0xe4>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d003      	beq.n	8009178 <TIM_OC2_SetConfig+0x68>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a21      	ldr	r2, [pc, #132]	@ (80091f8 <TIM_OC2_SetConfig+0xe8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d10d      	bne.n	8009194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800917e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	011b      	lsls	r3, r3, #4
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009192:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a17      	ldr	r2, [pc, #92]	@ (80091f4 <TIM_OC2_SetConfig+0xe4>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d003      	beq.n	80091a4 <TIM_OC2_SetConfig+0x94>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a16      	ldr	r2, [pc, #88]	@ (80091f8 <TIM_OC2_SetConfig+0xe8>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d113      	bne.n	80091cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	4313      	orrs	r3, r2
 80091be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	621a      	str	r2, [r3, #32]
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	40010000 	.word	0x40010000
 80091f8:	40010400 	.word	0x40010400

080091fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	021b      	lsls	r3, r3, #8
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a21      	ldr	r2, [pc, #132]	@ (80092dc <TIM_OC3_SetConfig+0xe0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d003      	beq.n	8009262 <TIM_OC3_SetConfig+0x66>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a20      	ldr	r2, [pc, #128]	@ (80092e0 <TIM_OC3_SetConfig+0xe4>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d10d      	bne.n	800927e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4313      	orrs	r3, r2
 8009274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800927c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a16      	ldr	r2, [pc, #88]	@ (80092dc <TIM_OC3_SetConfig+0xe0>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d003      	beq.n	800928e <TIM_OC3_SetConfig+0x92>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a15      	ldr	r2, [pc, #84]	@ (80092e0 <TIM_OC3_SetConfig+0xe4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d113      	bne.n	80092b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800929c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	621a      	str	r2, [r3, #32]
}
 80092d0:	bf00      	nop
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	40010000 	.word	0x40010000
 80092e0:	40010400 	.word	0x40010400

080092e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800931a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	4313      	orrs	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800932e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	031b      	lsls	r3, r3, #12
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	4313      	orrs	r3, r2
 800933a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a12      	ldr	r2, [pc, #72]	@ (8009388 <TIM_OC4_SetConfig+0xa4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_OC4_SetConfig+0x68>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a11      	ldr	r2, [pc, #68]	@ (800938c <TIM_OC4_SetConfig+0xa8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d109      	bne.n	8009360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	019b      	lsls	r3, r3, #6
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	621a      	str	r2, [r3, #32]
}
 800937a:	bf00      	nop
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	40010000 	.word	0x40010000
 800938c:	40010400 	.word	0x40010400

08009390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f003 031f 	and.w	r3, r3, #31
 80093a2:	2201      	movs	r2, #1
 80093a4:	fa02 f303 	lsl.w	r3, r2, r3
 80093a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6a1a      	ldr	r2, [r3, #32]
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	43db      	mvns	r3, r3
 80093b2:	401a      	ands	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6a1a      	ldr	r2, [r3, #32]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f003 031f 	and.w	r3, r3, #31
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	fa01 f303 	lsl.w	r3, r1, r3
 80093c8:	431a      	orrs	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	621a      	str	r2, [r3, #32]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
	...

080093dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e05a      	b.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800941a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a21      	ldr	r2, [pc, #132]	@ (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d022      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009440:	d01d      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a1d      	ldr	r2, [pc, #116]	@ (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d018      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a1b      	ldr	r2, [pc, #108]	@ (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d013      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a1a      	ldr	r2, [pc, #104]	@ (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00e      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a18      	ldr	r2, [pc, #96]	@ (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d009      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a17      	ldr	r2, [pc, #92]	@ (80094cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d004      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a15      	ldr	r2, [pc, #84]	@ (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d10c      	bne.n	8009498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4313      	orrs	r3, r2
 800948e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	40010000 	.word	0x40010000
 80094bc:	40000400 	.word	0x40000400
 80094c0:	40000800 	.word	0x40000800
 80094c4:	40000c00 	.word	0x40000c00
 80094c8:	40010400 	.word	0x40010400
 80094cc:	40014000 	.word	0x40014000
 80094d0:	40001800 	.word	0x40001800

080094d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e042      	b.n	8009594 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d106      	bne.n	8009528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7fa fcbe 	bl	8003ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2224      	movs	r2, #36	@ 0x24
 800952c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800953e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fdbf 	bl	800a0c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	695a      	ldr	r2, [r3, #20]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b08a      	sub	sp, #40	@ 0x28
 80095a0:	af02      	add	r7, sp, #8
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	4613      	mov	r3, r2
 80095aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	d175      	bne.n	80096a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <HAL_UART_Transmit+0x2c>
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e06e      	b.n	80096aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2221      	movs	r2, #33	@ 0x21
 80095d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095da:	f7fa fdab 	bl	8004134 <HAL_GetTick>
 80095de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	88fa      	ldrh	r2, [r7, #6]
 80095e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	88fa      	ldrh	r2, [r7, #6]
 80095ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095f4:	d108      	bne.n	8009608 <HAL_UART_Transmit+0x6c>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d104      	bne.n	8009608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	61bb      	str	r3, [r7, #24]
 8009606:	e003      	b.n	8009610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009610:	e02e      	b.n	8009670 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2200      	movs	r2, #0
 800961a:	2180      	movs	r1, #128	@ 0x80
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fb21 	bl	8009c64 <UART_WaitOnFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2220      	movs	r2, #32
 800962c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e03a      	b.n	80096aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10b      	bne.n	8009652 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009648:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	3302      	adds	r3, #2
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	e007      	b.n	8009662 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	781a      	ldrb	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	3301      	adds	r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009666:	b29b      	uxth	r3, r3
 8009668:	3b01      	subs	r3, #1
 800966a:	b29a      	uxth	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1cb      	bne.n	8009612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2200      	movs	r2, #0
 8009682:	2140      	movs	r1, #64	@ 0x40
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 faed 	bl	8009c64 <UART_WaitOnFlagUntilTimeout>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2220      	movs	r2, #32
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e006      	b.n	80096aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2220      	movs	r2, #32
 80096a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	e000      	b.n	80096aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80096a8:	2302      	movs	r3, #2
  }
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3720      	adds	r7, #32
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	4613      	mov	r3, r2
 80096be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b20      	cmp	r3, #32
 80096ca:	d112      	bne.n	80096f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <HAL_UART_Receive_IT+0x26>
 80096d2:	88fb      	ldrh	r3, [r7, #6]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e00b      	b.n	80096f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	461a      	mov	r2, r3
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 fb14 	bl	8009d16 <UART_Start_Receive_IT>
 80096ee:	4603      	mov	r3, r0
 80096f0:	e000      	b.n	80096f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80096f2:	2302      	movs	r3, #2
  }
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b0ba      	sub	sp, #232	@ 0xe8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009722:	2300      	movs	r3, #0
 8009724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009728:	2300      	movs	r3, #0
 800972a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800972e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800973a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10f      	bne.n	8009762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <HAL_UART_IRQHandler+0x66>
 800974e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fbf4 	bl	8009f48 <UART_Receive_IT>
      return;
 8009760:	e25b      	b.n	8009c1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 80de 	beq.w	8009928 <HAL_UART_IRQHandler+0x22c>
 800976c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d106      	bne.n	8009786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800977c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 80d1 	beq.w	8009928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00b      	beq.n	80097aa <HAL_UART_IRQHandler+0xae>
 8009792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a2:	f043 0201 	orr.w	r2, r3, #1
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ae:	f003 0304 	and.w	r3, r3, #4
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00b      	beq.n	80097ce <HAL_UART_IRQHandler+0xd2>
 80097b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d005      	beq.n	80097ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097c6:	f043 0202 	orr.w	r2, r3, #2
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00b      	beq.n	80097f2 <HAL_UART_IRQHandler+0xf6>
 80097da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ea:	f043 0204 	orr.w	r2, r3, #4
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80097f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d011      	beq.n	8009822 <HAL_UART_IRQHandler+0x126>
 80097fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009802:	f003 0320 	and.w	r3, r3, #32
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800980a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d005      	beq.n	8009822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800981a:	f043 0208 	orr.w	r2, r3, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 81f2 	beq.w	8009c10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800982c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009830:	f003 0320 	and.w	r3, r3, #32
 8009834:	2b00      	cmp	r3, #0
 8009836:	d008      	beq.n	800984a <HAL_UART_IRQHandler+0x14e>
 8009838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800983c:	f003 0320 	and.w	r3, r3, #32
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fb7f 	bl	8009f48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009854:	2b40      	cmp	r3, #64	@ 0x40
 8009856:	bf0c      	ite	eq
 8009858:	2301      	moveq	r3, #1
 800985a:	2300      	movne	r3, #0
 800985c:	b2db      	uxtb	r3, r3
 800985e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009866:	f003 0308 	and.w	r3, r3, #8
 800986a:	2b00      	cmp	r3, #0
 800986c:	d103      	bne.n	8009876 <HAL_UART_IRQHandler+0x17a>
 800986e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009872:	2b00      	cmp	r3, #0
 8009874:	d04f      	beq.n	8009916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fa87 	bl	8009d8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009886:	2b40      	cmp	r3, #64	@ 0x40
 8009888:	d141      	bne.n	800990e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3314      	adds	r3, #20
 8009890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098c6:	e841 2300 	strex	r3, r2, [r1]
 80098ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1d9      	bne.n	800988a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d013      	beq.n	8009906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e2:	4a7e      	ldr	r2, [pc, #504]	@ (8009adc <HAL_UART_IRQHandler+0x3e0>)
 80098e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fc f846 	bl	800597c <HAL_DMA_Abort_IT>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d016      	beq.n	8009924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009900:	4610      	mov	r0, r2
 8009902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009904:	e00e      	b.n	8009924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7f9 fe8e 	bl	8003628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990c:	e00a      	b.n	8009924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7f9 fe8a 	bl	8003628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009914:	e006      	b.n	8009924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7f9 fe86 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009922:	e175      	b.n	8009c10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009924:	bf00      	nop
    return;
 8009926:	e173      	b.n	8009c10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992c:	2b01      	cmp	r3, #1
 800992e:	f040 814f 	bne.w	8009bd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009936:	f003 0310 	and.w	r3, r3, #16
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 8148 	beq.w	8009bd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 8141 	beq.w	8009bd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800994e:	2300      	movs	r3, #0
 8009950:	60bb      	str	r3, [r7, #8]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60bb      	str	r3, [r7, #8]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	60bb      	str	r3, [r7, #8]
 8009962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800996e:	2b40      	cmp	r3, #64	@ 0x40
 8009970:	f040 80b6 	bne.w	8009ae0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 8145 	beq.w	8009c14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800998e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009992:	429a      	cmp	r2, r3
 8009994:	f080 813e 	bcs.w	8009c14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800999e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099aa:	f000 8088 	beq.w	8009abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	330c      	adds	r3, #12
 80099b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	330c      	adds	r3, #12
 80099d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80099da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80099de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099ea:	e841 2300 	strex	r3, r2, [r1]
 80099ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1d9      	bne.n	80099ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3314      	adds	r3, #20
 8009a00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a0c:	f023 0301 	bic.w	r3, r3, #1
 8009a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3314      	adds	r3, #20
 8009a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e1      	bne.n	80099fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3314      	adds	r3, #20
 8009a3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3314      	adds	r3, #20
 8009a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a62:	e841 2300 	strex	r3, r2, [r1]
 8009a66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1e3      	bne.n	8009a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	330c      	adds	r3, #12
 8009a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a86:	e853 3f00 	ldrex	r3, [r3]
 8009a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a8e:	f023 0310 	bic.w	r3, r3, #16
 8009a92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	330c      	adds	r3, #12
 8009a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009aa0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009aa2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009aa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009aa8:	e841 2300 	strex	r3, r2, [r1]
 8009aac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e3      	bne.n	8009a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fb feef 	bl	800589c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f8ad 	bl	8009c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ada:	e09b      	b.n	8009c14 <HAL_UART_IRQHandler+0x518>
 8009adc:	08009e51 	.word	0x08009e51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 808e 	beq.w	8009c18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 8089 	beq.w	8009c18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	330c      	adds	r3, #12
 8009b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	330c      	adds	r3, #12
 8009b26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009b2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b32:	e841 2300 	strex	r3, r2, [r1]
 8009b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e3      	bne.n	8009b06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3314      	adds	r3, #20
 8009b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3314      	adds	r3, #20
 8009b5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b62:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e3      	bne.n	8009b3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	330c      	adds	r3, #12
 8009b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0310 	bic.w	r3, r3, #16
 8009b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	330c      	adds	r3, #12
 8009ba4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009ba8:	61fa      	str	r2, [r7, #28]
 8009baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	69b9      	ldr	r1, [r7, #24]
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	e841 2300 	strex	r3, r2, [r1]
 8009bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e3      	bne.n	8009b84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f833 	bl	8009c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bce:	e023      	b.n	8009c18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d009      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x4f4>
 8009bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f945 	bl	8009e78 <UART_Transmit_IT>
    return;
 8009bee:	e014      	b.n	8009c1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00e      	beq.n	8009c1a <HAL_UART_IRQHandler+0x51e>
 8009bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d008      	beq.n	8009c1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f985 	bl	8009f18 <UART_EndTransmit_IT>
    return;
 8009c0e:	e004      	b.n	8009c1a <HAL_UART_IRQHandler+0x51e>
    return;
 8009c10:	bf00      	nop
 8009c12:	e002      	b.n	8009c1a <HAL_UART_IRQHandler+0x51e>
      return;
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <HAL_UART_IRQHandler+0x51e>
      return;
 8009c18:	bf00      	nop
  }
}
 8009c1a:	37e8      	adds	r7, #232	@ 0xe8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	4613      	mov	r3, r2
 8009c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c74:	e03b      	b.n	8009cee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7c:	d037      	beq.n	8009cee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c7e:	f7fa fa59 	bl	8004134 <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	6a3a      	ldr	r2, [r7, #32]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d302      	bcc.n	8009c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e03a      	b.n	8009d0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f003 0304 	and.w	r3, r3, #4
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d023      	beq.n	8009cee <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b80      	cmp	r3, #128	@ 0x80
 8009caa:	d020      	beq.n	8009cee <UART_WaitOnFlagUntilTimeout+0x8a>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b40      	cmp	r3, #64	@ 0x40
 8009cb0:	d01d      	beq.n	8009cee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0308 	and.w	r3, r3, #8
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d116      	bne.n	8009cee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	617b      	str	r3, [r7, #20]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f857 	bl	8009d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2208      	movs	r2, #8
 8009ce0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e00f      	b.n	8009d0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	bf0c      	ite	eq
 8009cfe:	2301      	moveq	r3, #1
 8009d00:	2300      	movne	r3, #0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	461a      	mov	r2, r3
 8009d06:	79fb      	ldrb	r3, [r7, #7]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d0b4      	beq.n	8009c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b085      	sub	sp, #20
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	4613      	mov	r3, r2
 8009d22:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	88fa      	ldrh	r2, [r7, #6]
 8009d2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	88fa      	ldrh	r2, [r7, #6]
 8009d34:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2222      	movs	r2, #34	@ 0x22
 8009d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d007      	beq.n	8009d5c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d5a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	695a      	ldr	r2, [r3, #20]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0201 	orr.w	r2, r2, #1
 8009d6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f042 0220 	orr.w	r2, r2, #32
 8009d7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b095      	sub	sp, #84	@ 0x54
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	330c      	adds	r3, #12
 8009d98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	330c      	adds	r3, #12
 8009db0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009db2:	643a      	str	r2, [r7, #64]	@ 0x40
 8009db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009db8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dba:	e841 2300 	strex	r3, r2, [r1]
 8009dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1e5      	bne.n	8009d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3314      	adds	r3, #20
 8009dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	f023 0301 	bic.w	r3, r3, #1
 8009ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3314      	adds	r3, #20
 8009de4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009de8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e5      	bne.n	8009dc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d119      	bne.n	8009e36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	330c      	adds	r3, #12
 8009e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f023 0310 	bic.w	r3, r3, #16
 8009e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	330c      	adds	r3, #12
 8009e20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e22:	61ba      	str	r2, [r7, #24]
 8009e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	6979      	ldr	r1, [r7, #20]
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e5      	bne.n	8009e02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009e44:	bf00      	nop
 8009e46:	3754      	adds	r7, #84	@ 0x54
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f7f9 fbdc 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b21      	cmp	r3, #33	@ 0x21
 8009e8a:	d13e      	bne.n	8009f0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e94:	d114      	bne.n	8009ec0 <UART_Transmit_IT+0x48>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d110      	bne.n	8009ec0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	1c9a      	adds	r2, r3, #2
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	621a      	str	r2, [r3, #32]
 8009ebe:	e008      	b.n	8009ed2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	1c59      	adds	r1, r3, #1
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6211      	str	r1, [r2, #32]
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10f      	bne.n	8009f06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	e000      	b.n	8009f0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f0a:	2302      	movs	r3, #2
  }
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2220      	movs	r2, #32
 8009f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff fe71 	bl	8009c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08c      	sub	sp, #48	@ 0x30
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b22      	cmp	r3, #34	@ 0x22
 8009f5a:	f040 80ae 	bne.w	800a0ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f66:	d117      	bne.n	8009f98 <UART_Receive_IT+0x50>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d113      	bne.n	8009f98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f90:	1c9a      	adds	r2, r3, #2
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f96:	e026      	b.n	8009fe6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009faa:	d007      	beq.n	8009fbc <UART_Receive_IT+0x74>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <UART_Receive_IT+0x82>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc6:	701a      	strb	r2, [r3, #0]
 8009fc8:	e008      	b.n	8009fdc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d15d      	bne.n	800a0b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68da      	ldr	r2, [r3, #12]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f022 0220 	bic.w	r2, r2, #32
 800a008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	695a      	ldr	r2, [r3, #20]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f022 0201 	bic.w	r2, r2, #1
 800a028:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d135      	bne.n	800a0ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	330c      	adds	r3, #12
 800a04c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	613b      	str	r3, [r7, #16]
   return(result);
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f023 0310 	bic.w	r3, r3, #16
 800a05c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	330c      	adds	r3, #12
 800a064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a066:	623a      	str	r2, [r7, #32]
 800a068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	69f9      	ldr	r1, [r7, #28]
 800a06c:	6a3a      	ldr	r2, [r7, #32]
 800a06e:	e841 2300 	strex	r3, r2, [r1]
 800a072:	61bb      	str	r3, [r7, #24]
   return(result);
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1e5      	bne.n	800a046 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b10      	cmp	r3, #16
 800a086:	d10a      	bne.n	800a09e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a088:	2300      	movs	r3, #0
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff fdc5 	bl	8009c34 <HAL_UARTEx_RxEventCallback>
 800a0aa:	e002      	b.n	800a0b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7f9 faa9 	bl	8003604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e002      	b.n	800a0bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e000      	b.n	800a0bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a0ba:	2302      	movs	r3, #2
  }
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3730      	adds	r7, #48	@ 0x30
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0c8:	b0c0      	sub	sp, #256	@ 0x100
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e0:	68d9      	ldr	r1, [r3, #12]
 800a0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	ea40 0301 	orr.w	r3, r0, r1
 800a0ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	431a      	orrs	r2, r3
 800a104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a11c:	f021 010c 	bic.w	r1, r1, #12
 800a120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a12a:	430b      	orrs	r3, r1
 800a12c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a13e:	6999      	ldr	r1, [r3, #24]
 800a140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	ea40 0301 	orr.w	r3, r0, r1
 800a14a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4b8f      	ldr	r3, [pc, #572]	@ (800a390 <UART_SetConfig+0x2cc>)
 800a154:	429a      	cmp	r2, r3
 800a156:	d005      	beq.n	800a164 <UART_SetConfig+0xa0>
 800a158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	4b8d      	ldr	r3, [pc, #564]	@ (800a394 <UART_SetConfig+0x2d0>)
 800a160:	429a      	cmp	r2, r3
 800a162:	d104      	bne.n	800a16e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a164:	f7fd f98a 	bl	800747c <HAL_RCC_GetPCLK2Freq>
 800a168:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a16c:	e003      	b.n	800a176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a16e:	f7fd f971 	bl	8007454 <HAL_RCC_GetPCLK1Freq>
 800a172:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a180:	f040 810c 	bne.w	800a39c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a18e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a196:	4622      	mov	r2, r4
 800a198:	462b      	mov	r3, r5
 800a19a:	1891      	adds	r1, r2, r2
 800a19c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a19e:	415b      	adcs	r3, r3
 800a1a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	eb12 0801 	adds.w	r8, r2, r1
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	eb43 0901 	adc.w	r9, r3, r1
 800a1b2:	f04f 0200 	mov.w	r2, #0
 800a1b6:	f04f 0300 	mov.w	r3, #0
 800a1ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1c6:	4690      	mov	r8, r2
 800a1c8:	4699      	mov	r9, r3
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	eb18 0303 	adds.w	r3, r8, r3
 800a1d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	eb49 0303 	adc.w	r3, r9, r3
 800a1da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a1ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	18db      	adds	r3, r3, r3
 800a1f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	eb42 0303 	adc.w	r3, r2, r3
 800a1fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800a200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a208:	f7f6 fd58 	bl	8000cbc <__aeabi_uldivmod>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4b61      	ldr	r3, [pc, #388]	@ (800a398 <UART_SetConfig+0x2d4>)
 800a212:	fba3 2302 	umull	r2, r3, r3, r2
 800a216:	095b      	lsrs	r3, r3, #5
 800a218:	011c      	lsls	r4, r3, #4
 800a21a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a224:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a22c:	4642      	mov	r2, r8
 800a22e:	464b      	mov	r3, r9
 800a230:	1891      	adds	r1, r2, r2
 800a232:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a234:	415b      	adcs	r3, r3
 800a236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a23c:	4641      	mov	r1, r8
 800a23e:	eb12 0a01 	adds.w	sl, r2, r1
 800a242:	4649      	mov	r1, r9
 800a244:	eb43 0b01 	adc.w	fp, r3, r1
 800a248:	f04f 0200 	mov.w	r2, #0
 800a24c:	f04f 0300 	mov.w	r3, #0
 800a250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a25c:	4692      	mov	sl, r2
 800a25e:	469b      	mov	fp, r3
 800a260:	4643      	mov	r3, r8
 800a262:	eb1a 0303 	adds.w	r3, sl, r3
 800a266:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a26a:	464b      	mov	r3, r9
 800a26c:	eb4b 0303 	adc.w	r3, fp, r3
 800a270:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a280:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a288:	460b      	mov	r3, r1
 800a28a:	18db      	adds	r3, r3, r3
 800a28c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a28e:	4613      	mov	r3, r2
 800a290:	eb42 0303 	adc.w	r3, r2, r3
 800a294:	647b      	str	r3, [r7, #68]	@ 0x44
 800a296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a29a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a29e:	f7f6 fd0d 	bl	8000cbc <__aeabi_uldivmod>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4b3b      	ldr	r3, [pc, #236]	@ (800a398 <UART_SetConfig+0x2d4>)
 800a2aa:	fba3 2301 	umull	r2, r3, r3, r1
 800a2ae:	095b      	lsrs	r3, r3, #5
 800a2b0:	2264      	movs	r2, #100	@ 0x64
 800a2b2:	fb02 f303 	mul.w	r3, r2, r3
 800a2b6:	1acb      	subs	r3, r1, r3
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a2be:	4b36      	ldr	r3, [pc, #216]	@ (800a398 <UART_SetConfig+0x2d4>)
 800a2c0:	fba3 2302 	umull	r2, r3, r3, r2
 800a2c4:	095b      	lsrs	r3, r3, #5
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a2cc:	441c      	add	r4, r3
 800a2ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a2d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a2dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a2e0:	4642      	mov	r2, r8
 800a2e2:	464b      	mov	r3, r9
 800a2e4:	1891      	adds	r1, r2, r2
 800a2e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a2e8:	415b      	adcs	r3, r3
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a2f0:	4641      	mov	r1, r8
 800a2f2:	1851      	adds	r1, r2, r1
 800a2f4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	414b      	adcs	r3, r1
 800a2fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2fc:	f04f 0200 	mov.w	r2, #0
 800a300:	f04f 0300 	mov.w	r3, #0
 800a304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a308:	4659      	mov	r1, fp
 800a30a:	00cb      	lsls	r3, r1, #3
 800a30c:	4651      	mov	r1, sl
 800a30e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a312:	4651      	mov	r1, sl
 800a314:	00ca      	lsls	r2, r1, #3
 800a316:	4610      	mov	r0, r2
 800a318:	4619      	mov	r1, r3
 800a31a:	4603      	mov	r3, r0
 800a31c:	4642      	mov	r2, r8
 800a31e:	189b      	adds	r3, r3, r2
 800a320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a324:	464b      	mov	r3, r9
 800a326:	460a      	mov	r2, r1
 800a328:	eb42 0303 	adc.w	r3, r2, r3
 800a32c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a33c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a344:	460b      	mov	r3, r1
 800a346:	18db      	adds	r3, r3, r3
 800a348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a34a:	4613      	mov	r3, r2
 800a34c:	eb42 0303 	adc.w	r3, r2, r3
 800a350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a35a:	f7f6 fcaf 	bl	8000cbc <__aeabi_uldivmod>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4b0d      	ldr	r3, [pc, #52]	@ (800a398 <UART_SetConfig+0x2d4>)
 800a364:	fba3 1302 	umull	r1, r3, r3, r2
 800a368:	095b      	lsrs	r3, r3, #5
 800a36a:	2164      	movs	r1, #100	@ 0x64
 800a36c:	fb01 f303 	mul.w	r3, r1, r3
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	3332      	adds	r3, #50	@ 0x32
 800a376:	4a08      	ldr	r2, [pc, #32]	@ (800a398 <UART_SetConfig+0x2d4>)
 800a378:	fba2 2303 	umull	r2, r3, r2, r3
 800a37c:	095b      	lsrs	r3, r3, #5
 800a37e:	f003 0207 	and.w	r2, r3, #7
 800a382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4422      	add	r2, r4
 800a38a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a38c:	e106      	b.n	800a59c <UART_SetConfig+0x4d8>
 800a38e:	bf00      	nop
 800a390:	40011000 	.word	0x40011000
 800a394:	40011400 	.word	0x40011400
 800a398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a39c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a3a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a3aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	464b      	mov	r3, r9
 800a3b2:	1891      	adds	r1, r2, r2
 800a3b4:	6239      	str	r1, [r7, #32]
 800a3b6:	415b      	adcs	r3, r3
 800a3b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a3be:	4641      	mov	r1, r8
 800a3c0:	1854      	adds	r4, r2, r1
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	eb43 0501 	adc.w	r5, r3, r1
 800a3c8:	f04f 0200 	mov.w	r2, #0
 800a3cc:	f04f 0300 	mov.w	r3, #0
 800a3d0:	00eb      	lsls	r3, r5, #3
 800a3d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3d6:	00e2      	lsls	r2, r4, #3
 800a3d8:	4614      	mov	r4, r2
 800a3da:	461d      	mov	r5, r3
 800a3dc:	4643      	mov	r3, r8
 800a3de:	18e3      	adds	r3, r4, r3
 800a3e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3e4:	464b      	mov	r3, r9
 800a3e6:	eb45 0303 	adc.w	r3, r5, r3
 800a3ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a3fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a3fe:	f04f 0200 	mov.w	r2, #0
 800a402:	f04f 0300 	mov.w	r3, #0
 800a406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a40a:	4629      	mov	r1, r5
 800a40c:	008b      	lsls	r3, r1, #2
 800a40e:	4621      	mov	r1, r4
 800a410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a414:	4621      	mov	r1, r4
 800a416:	008a      	lsls	r2, r1, #2
 800a418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a41c:	f7f6 fc4e 	bl	8000cbc <__aeabi_uldivmod>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4b60      	ldr	r3, [pc, #384]	@ (800a5a8 <UART_SetConfig+0x4e4>)
 800a426:	fba3 2302 	umull	r2, r3, r3, r2
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	011c      	lsls	r4, r3, #4
 800a42e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a432:	2200      	movs	r2, #0
 800a434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a438:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a43c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a440:	4642      	mov	r2, r8
 800a442:	464b      	mov	r3, r9
 800a444:	1891      	adds	r1, r2, r2
 800a446:	61b9      	str	r1, [r7, #24]
 800a448:	415b      	adcs	r3, r3
 800a44a:	61fb      	str	r3, [r7, #28]
 800a44c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a450:	4641      	mov	r1, r8
 800a452:	1851      	adds	r1, r2, r1
 800a454:	6139      	str	r1, [r7, #16]
 800a456:	4649      	mov	r1, r9
 800a458:	414b      	adcs	r3, r1
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	f04f 0200 	mov.w	r2, #0
 800a460:	f04f 0300 	mov.w	r3, #0
 800a464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a468:	4659      	mov	r1, fp
 800a46a:	00cb      	lsls	r3, r1, #3
 800a46c:	4651      	mov	r1, sl
 800a46e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a472:	4651      	mov	r1, sl
 800a474:	00ca      	lsls	r2, r1, #3
 800a476:	4610      	mov	r0, r2
 800a478:	4619      	mov	r1, r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	4642      	mov	r2, r8
 800a47e:	189b      	adds	r3, r3, r2
 800a480:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a484:	464b      	mov	r3, r9
 800a486:	460a      	mov	r2, r1
 800a488:	eb42 0303 	adc.w	r3, r2, r3
 800a48c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a49a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a49c:	f04f 0200 	mov.w	r2, #0
 800a4a0:	f04f 0300 	mov.w	r3, #0
 800a4a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	008b      	lsls	r3, r1, #2
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	008a      	lsls	r2, r1, #2
 800a4b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a4ba:	f7f6 fbff 	bl	8000cbc <__aeabi_uldivmod>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	4b38      	ldr	r3, [pc, #224]	@ (800a5a8 <UART_SetConfig+0x4e4>)
 800a4c6:	fba3 2301 	umull	r2, r3, r3, r1
 800a4ca:	095b      	lsrs	r3, r3, #5
 800a4cc:	2264      	movs	r2, #100	@ 0x64
 800a4ce:	fb02 f303 	mul.w	r3, r2, r3
 800a4d2:	1acb      	subs	r3, r1, r3
 800a4d4:	011b      	lsls	r3, r3, #4
 800a4d6:	3332      	adds	r3, #50	@ 0x32
 800a4d8:	4a33      	ldr	r2, [pc, #204]	@ (800a5a8 <UART_SetConfig+0x4e4>)
 800a4da:	fba2 2303 	umull	r2, r3, r2, r3
 800a4de:	095b      	lsrs	r3, r3, #5
 800a4e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4e4:	441c      	add	r4, r3
 800a4e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4ee:	677a      	str	r2, [r7, #116]	@ 0x74
 800a4f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a4f4:	4642      	mov	r2, r8
 800a4f6:	464b      	mov	r3, r9
 800a4f8:	1891      	adds	r1, r2, r2
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	415b      	adcs	r3, r3
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a504:	4641      	mov	r1, r8
 800a506:	1851      	adds	r1, r2, r1
 800a508:	6039      	str	r1, [r7, #0]
 800a50a:	4649      	mov	r1, r9
 800a50c:	414b      	adcs	r3, r1
 800a50e:	607b      	str	r3, [r7, #4]
 800a510:	f04f 0200 	mov.w	r2, #0
 800a514:	f04f 0300 	mov.w	r3, #0
 800a518:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a51c:	4659      	mov	r1, fp
 800a51e:	00cb      	lsls	r3, r1, #3
 800a520:	4651      	mov	r1, sl
 800a522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a526:	4651      	mov	r1, sl
 800a528:	00ca      	lsls	r2, r1, #3
 800a52a:	4610      	mov	r0, r2
 800a52c:	4619      	mov	r1, r3
 800a52e:	4603      	mov	r3, r0
 800a530:	4642      	mov	r2, r8
 800a532:	189b      	adds	r3, r3, r2
 800a534:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a536:	464b      	mov	r3, r9
 800a538:	460a      	mov	r2, r1
 800a53a:	eb42 0303 	adc.w	r3, r2, r3
 800a53e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	663b      	str	r3, [r7, #96]	@ 0x60
 800a54a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a54c:	f04f 0200 	mov.w	r2, #0
 800a550:	f04f 0300 	mov.w	r3, #0
 800a554:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a558:	4649      	mov	r1, r9
 800a55a:	008b      	lsls	r3, r1, #2
 800a55c:	4641      	mov	r1, r8
 800a55e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a562:	4641      	mov	r1, r8
 800a564:	008a      	lsls	r2, r1, #2
 800a566:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a56a:	f7f6 fba7 	bl	8000cbc <__aeabi_uldivmod>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a8 <UART_SetConfig+0x4e4>)
 800a574:	fba3 1302 	umull	r1, r3, r3, r2
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	2164      	movs	r1, #100	@ 0x64
 800a57c:	fb01 f303 	mul.w	r3, r1, r3
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	3332      	adds	r3, #50	@ 0x32
 800a586:	4a08      	ldr	r2, [pc, #32]	@ (800a5a8 <UART_SetConfig+0x4e4>)
 800a588:	fba2 2303 	umull	r2, r3, r2, r3
 800a58c:	095b      	lsrs	r3, r3, #5
 800a58e:	f003 020f 	and.w	r2, r3, #15
 800a592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4422      	add	r2, r4
 800a59a:	609a      	str	r2, [r3, #8]
}
 800a59c:	bf00      	nop
 800a59e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5a8:	51eb851f 	.word	0x51eb851f

0800a5ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	f107 001c 	add.w	r0, r7, #28
 800a5ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d123      	bne.n	800a60e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a5da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a5ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d105      	bne.n	800a602 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f001 fae2 	bl	800bbcc <USB_CoreReset>
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]
 800a60c:	e01b      	b.n	800a646 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 fad6 	bl	800bbcc <USB_CoreReset>
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a624:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a630:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	639a      	str	r2, [r3, #56]	@ 0x38
 800a638:	e005      	b.n	800a646 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a646:	7fbb      	ldrb	r3, [r7, #30]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d10b      	bne.n	800a664 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f043 0206 	orr.w	r2, r3, #6
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f043 0220 	orr.w	r2, r3, #32
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a670:	b004      	add	sp, #16
 800a672:	4770      	bx	lr

0800a674 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a674:	b480      	push	{r7}
 800a676:	b087      	sub	sp, #28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	4613      	mov	r3, r2
 800a680:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d165      	bne.n	800a754 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4a41      	ldr	r2, [pc, #260]	@ (800a790 <USB_SetTurnaroundTime+0x11c>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d906      	bls.n	800a69e <USB_SetTurnaroundTime+0x2a>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	4a40      	ldr	r2, [pc, #256]	@ (800a794 <USB_SetTurnaroundTime+0x120>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d202      	bcs.n	800a69e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a698:	230f      	movs	r3, #15
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	e062      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	4a3c      	ldr	r2, [pc, #240]	@ (800a794 <USB_SetTurnaroundTime+0x120>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d306      	bcc.n	800a6b4 <USB_SetTurnaroundTime+0x40>
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	4a3b      	ldr	r2, [pc, #236]	@ (800a798 <USB_SetTurnaroundTime+0x124>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d202      	bcs.n	800a6b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6ae:	230e      	movs	r3, #14
 800a6b0:	617b      	str	r3, [r7, #20]
 800a6b2:	e057      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	4a38      	ldr	r2, [pc, #224]	@ (800a798 <USB_SetTurnaroundTime+0x124>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d306      	bcc.n	800a6ca <USB_SetTurnaroundTime+0x56>
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	4a37      	ldr	r2, [pc, #220]	@ (800a79c <USB_SetTurnaroundTime+0x128>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d202      	bcs.n	800a6ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a6c4:	230d      	movs	r3, #13
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	e04c      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	4a33      	ldr	r2, [pc, #204]	@ (800a79c <USB_SetTurnaroundTime+0x128>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d306      	bcc.n	800a6e0 <USB_SetTurnaroundTime+0x6c>
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	4a32      	ldr	r2, [pc, #200]	@ (800a7a0 <USB_SetTurnaroundTime+0x12c>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d802      	bhi.n	800a6e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a6da:	230c      	movs	r3, #12
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	e041      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	4a2f      	ldr	r2, [pc, #188]	@ (800a7a0 <USB_SetTurnaroundTime+0x12c>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d906      	bls.n	800a6f6 <USB_SetTurnaroundTime+0x82>
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4a2e      	ldr	r2, [pc, #184]	@ (800a7a4 <USB_SetTurnaroundTime+0x130>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d802      	bhi.n	800a6f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a6f0:	230b      	movs	r3, #11
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	e036      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4a2a      	ldr	r2, [pc, #168]	@ (800a7a4 <USB_SetTurnaroundTime+0x130>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d906      	bls.n	800a70c <USB_SetTurnaroundTime+0x98>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	4a29      	ldr	r2, [pc, #164]	@ (800a7a8 <USB_SetTurnaroundTime+0x134>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d802      	bhi.n	800a70c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a706:	230a      	movs	r3, #10
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	e02b      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	4a26      	ldr	r2, [pc, #152]	@ (800a7a8 <USB_SetTurnaroundTime+0x134>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d906      	bls.n	800a722 <USB_SetTurnaroundTime+0xae>
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4a25      	ldr	r2, [pc, #148]	@ (800a7ac <USB_SetTurnaroundTime+0x138>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d202      	bcs.n	800a722 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a71c:	2309      	movs	r3, #9
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	e020      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4a21      	ldr	r2, [pc, #132]	@ (800a7ac <USB_SetTurnaroundTime+0x138>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d306      	bcc.n	800a738 <USB_SetTurnaroundTime+0xc4>
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	4a20      	ldr	r2, [pc, #128]	@ (800a7b0 <USB_SetTurnaroundTime+0x13c>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d802      	bhi.n	800a738 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a732:	2308      	movs	r3, #8
 800a734:	617b      	str	r3, [r7, #20]
 800a736:	e015      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4a1d      	ldr	r2, [pc, #116]	@ (800a7b0 <USB_SetTurnaroundTime+0x13c>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d906      	bls.n	800a74e <USB_SetTurnaroundTime+0xda>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4a1c      	ldr	r2, [pc, #112]	@ (800a7b4 <USB_SetTurnaroundTime+0x140>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d202      	bcs.n	800a74e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a748:	2307      	movs	r3, #7
 800a74a:	617b      	str	r3, [r7, #20]
 800a74c:	e00a      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a74e:	2306      	movs	r3, #6
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	e007      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a75a:	2309      	movs	r3, #9
 800a75c:	617b      	str	r3, [r7, #20]
 800a75e:	e001      	b.n	800a764 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a760:	2309      	movs	r3, #9
 800a762:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	029b      	lsls	r3, r3, #10
 800a778:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a77c:	431a      	orrs	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	00d8acbf 	.word	0x00d8acbf
 800a794:	00e4e1c0 	.word	0x00e4e1c0
 800a798:	00f42400 	.word	0x00f42400
 800a79c:	01067380 	.word	0x01067380
 800a7a0:	011a499f 	.word	0x011a499f
 800a7a4:	01312cff 	.word	0x01312cff
 800a7a8:	014ca43f 	.word	0x014ca43f
 800a7ac:	016e3600 	.word	0x016e3600
 800a7b0:	01a6ab1f 	.word	0x01a6ab1f
 800a7b4:	01e84800 	.word	0x01e84800

0800a7b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f043 0201 	orr.w	r2, r3, #1
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f023 0201 	bic.w	r2, r3, #1
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d115      	bne.n	800a84a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a82a:	200a      	movs	r0, #10
 800a82c:	f7f9 fc8e 	bl	800414c <HAL_Delay>
      ms += 10U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	330a      	adds	r3, #10
 800a834:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f001 f939 	bl	800baae <USB_GetMode>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d01e      	beq.n	800a880 <USB_SetCurrentMode+0x84>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2bc7      	cmp	r3, #199	@ 0xc7
 800a846:	d9f0      	bls.n	800a82a <USB_SetCurrentMode+0x2e>
 800a848:	e01a      	b.n	800a880 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d115      	bne.n	800a87c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a85c:	200a      	movs	r0, #10
 800a85e:	f7f9 fc75 	bl	800414c <HAL_Delay>
      ms += 10U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	330a      	adds	r3, #10
 800a866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f001 f920 	bl	800baae <USB_GetMode>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <USB_SetCurrentMode+0x84>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2bc7      	cmp	r3, #199	@ 0xc7
 800a878:	d9f0      	bls.n	800a85c <USB_SetCurrentMode+0x60>
 800a87a:	e001      	b.n	800a880 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e005      	b.n	800a88c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2bc8      	cmp	r3, #200	@ 0xc8
 800a884:	d101      	bne.n	800a88a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e000      	b.n	800a88c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a894:	b084      	sub	sp, #16
 800a896:	b580      	push	{r7, lr}
 800a898:	b086      	sub	sp, #24
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a8a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	613b      	str	r3, [r7, #16]
 800a8b2:	e009      	b.n	800a8c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	3340      	adds	r3, #64	@ 0x40
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	2200      	movs	r2, #0
 800a8c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	613b      	str	r3, [r7, #16]
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	2b0e      	cmp	r3, #14
 800a8cc:	d9f2      	bls.n	800a8b4 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d11c      	bne.n	800a910 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8e4:	f043 0302 	orr.w	r3, r3, #2
 800a8e8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	e005      	b.n	800a91c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a914:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a922:	461a      	mov	r2, r3
 800a924:	2300      	movs	r3, #0
 800a926:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a928:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d10d      	bne.n	800a94c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a934:	2b00      	cmp	r3, #0
 800a936:	d104      	bne.n	800a942 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a938:	2100      	movs	r1, #0
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f968 	bl	800ac10 <USB_SetDevSpeed>
 800a940:	e008      	b.n	800a954 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a942:	2101      	movs	r1, #1
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f963 	bl	800ac10 <USB_SetDevSpeed>
 800a94a:	e003      	b.n	800a954 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a94c:	2103      	movs	r1, #3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f95e 	bl	800ac10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a954:	2110      	movs	r1, #16
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f8fa 	bl	800ab50 <USB_FlushTxFifo>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f924 	bl	800abb4 <USB_FlushRxFifo>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a97c:	461a      	mov	r2, r3
 800a97e:	2300      	movs	r3, #0
 800a980:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a988:	461a      	mov	r2, r3
 800a98a:	2300      	movs	r3, #0
 800a98c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a994:	461a      	mov	r2, r3
 800a996:	2300      	movs	r3, #0
 800a998:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a99a:	2300      	movs	r3, #0
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	e043      	b.n	800aa28 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9b6:	d118      	bne.n	800a9ea <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10a      	bne.n	800a9d4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	e013      	b.n	800a9fc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	e008      	b.n	800a9fc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa08:	461a      	mov	r2, r3
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aa20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	3301      	adds	r3, #1
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d3b5      	bcc.n	800a9a0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa34:	2300      	movs	r3, #0
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	e043      	b.n	800aac2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa50:	d118      	bne.n	800aa84 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa64:	461a      	mov	r2, r3
 800aa66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	e013      	b.n	800aa96 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	e008      	b.n	800aa96 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa90:	461a      	mov	r2, r3
 800aa92:	2300      	movs	r3, #0
 800aa94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	015a      	lsls	r2, r3, #5
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab4:	461a      	mov	r2, r3
 800aab6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aaba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3301      	adds	r3, #1
 800aac0:	613b      	str	r3, [r7, #16]
 800aac2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aac6:	461a      	mov	r2, r3
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d3b5      	bcc.n	800aa3a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aadc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aae0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800aaee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aaf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d105      	bne.n	800ab04 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	f043 0210 	orr.w	r2, r3, #16
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	699a      	ldr	r2, [r3, #24]
 800ab08:	4b10      	ldr	r3, [pc, #64]	@ (800ab4c <USB_DevInit+0x2b8>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	f043 0208 	orr.w	r2, r3, #8
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d107      	bne.n	800ab3c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab34:	f043 0304 	orr.w	r3, r3, #4
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab48:	b004      	add	sp, #16
 800ab4a:	4770      	bx	lr
 800ab4c:	803c3800 	.word	0x803c3800

0800ab50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3301      	adds	r3, #1
 800ab62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab6a:	d901      	bls.n	800ab70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e01b      	b.n	800aba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	daf2      	bge.n	800ab5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	019b      	lsls	r3, r3, #6
 800ab80:	f043 0220 	orr.w	r2, r3, #32
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab94:	d901      	bls.n	800ab9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e006      	b.n	800aba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d0f0      	beq.n	800ab88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3301      	adds	r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abcc:	d901      	bls.n	800abd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abce:	2303      	movs	r3, #3
 800abd0:	e018      	b.n	800ac04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	daf2      	bge.n	800abc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2210      	movs	r2, #16
 800abe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3301      	adds	r3, #1
 800abe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abf0:	d901      	bls.n	800abf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e006      	b.n	800ac04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	f003 0310 	and.w	r3, r3, #16
 800abfe:	2b10      	cmp	r3, #16
 800ac00:	d0f0      	beq.n	800abe4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	78fb      	ldrb	r3, [r7, #3]
 800ac2a:	68f9      	ldr	r1, [r7, #12]
 800ac2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac30:	4313      	orrs	r3, r2
 800ac32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b087      	sub	sp, #28
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f003 0306 	and.w	r3, r3, #6
 800ac5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d102      	bne.n	800ac68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac62:	2300      	movs	r3, #0
 800ac64:	75fb      	strb	r3, [r7, #23]
 800ac66:	e00a      	b.n	800ac7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d002      	beq.n	800ac74 <USB_GetDevSpeed+0x32>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2b06      	cmp	r3, #6
 800ac72:	d102      	bne.n	800ac7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac74:	2302      	movs	r3, #2
 800ac76:	75fb      	strb	r3, [r7, #23]
 800ac78:	e001      	b.n	800ac7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac7a:	230f      	movs	r3, #15
 800ac7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	371c      	adds	r7, #28
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	785b      	ldrb	r3, [r3, #1]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d13a      	bne.n	800ad1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acae:	69da      	ldr	r2, [r3, #28]
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f003 030f 	and.w	r3, r3, #15
 800acb8:	2101      	movs	r1, #1
 800acba:	fa01 f303 	lsl.w	r3, r1, r3
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	68f9      	ldr	r1, [r7, #12]
 800acc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acc6:	4313      	orrs	r3, r2
 800acc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4413      	add	r3, r2
 800acd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d155      	bne.n	800ad8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	791b      	ldrb	r3, [r3, #4]
 800acfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	059b      	lsls	r3, r3, #22
 800ad02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad04:	4313      	orrs	r3, r2
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	0151      	lsls	r1, r2, #5
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	440a      	add	r2, r1
 800ad0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	e036      	b.n	800ad8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad24:	69da      	ldr	r2, [r3, #28]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	2101      	movs	r1, #1
 800ad30:	fa01 f303 	lsl.w	r3, r1, r3
 800ad34:	041b      	lsls	r3, r3, #16
 800ad36:	68f9      	ldr	r1, [r7, #12]
 800ad38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d11a      	bne.n	800ad8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	791b      	ldrb	r3, [r3, #4]
 800ad70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad72:	430b      	orrs	r3, r1
 800ad74:	4313      	orrs	r3, r2
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	0151      	lsls	r1, r2, #5
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	440a      	add	r2, r1
 800ad7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
	...

0800ad9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	785b      	ldrb	r3, [r3, #1]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d161      	bne.n	800ae7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adce:	d11f      	bne.n	800ae10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4413      	add	r3, r2
 800add8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	0151      	lsls	r1, r2, #5
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	440a      	add	r2, r1
 800ade6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800adee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	0151      	lsls	r1, r2, #5
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	440a      	add	r2, r1
 800ae06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	f003 030f 	and.w	r3, r3, #15
 800ae20:	2101      	movs	r1, #1
 800ae22:	fa01 f303 	lsl.w	r3, r1, r3
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	43db      	mvns	r3, r3
 800ae2a:	68f9      	ldr	r1, [r7, #12]
 800ae2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae30:	4013      	ands	r3, r2
 800ae32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	2101      	movs	r1, #1
 800ae46:	fa01 f303 	lsl.w	r3, r1, r3
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	43db      	mvns	r3, r3
 800ae4e:	68f9      	ldr	r1, [r7, #12]
 800ae50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae54:	4013      	ands	r3, r2
 800ae56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	0159      	lsls	r1, r3, #5
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	440b      	add	r3, r1
 800ae6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae72:	4619      	mov	r1, r3
 800ae74:	4b35      	ldr	r3, [pc, #212]	@ (800af4c <USB_DeactivateEndpoint+0x1b0>)
 800ae76:	4013      	ands	r3, r2
 800ae78:	600b      	str	r3, [r1, #0]
 800ae7a:	e060      	b.n	800af3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae92:	d11f      	bne.n	800aed4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	0151      	lsls	r1, r2, #5
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	440a      	add	r2, r1
 800aeaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aeae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aeb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	0151      	lsls	r1, r2, #5
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	440a      	add	r2, r1
 800aeca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aece:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aed2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	2101      	movs	r1, #1
 800aee6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeea:	041b      	lsls	r3, r3, #16
 800aeec:	43db      	mvns	r3, r3
 800aeee:	68f9      	ldr	r1, [r7, #12]
 800aef0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aef4:	4013      	ands	r3, r2
 800aef6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aefe:	69da      	ldr	r2, [r3, #28]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f003 030f 	and.w	r3, r3, #15
 800af08:	2101      	movs	r1, #1
 800af0a:	fa01 f303 	lsl.w	r3, r1, r3
 800af0e:	041b      	lsls	r3, r3, #16
 800af10:	43db      	mvns	r3, r3
 800af12:	68f9      	ldr	r1, [r7, #12]
 800af14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af18:	4013      	ands	r3, r2
 800af1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	015a      	lsls	r2, r3, #5
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4413      	add	r3, r2
 800af24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	0159      	lsls	r1, r3, #5
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	440b      	add	r3, r1
 800af32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af36:	4619      	mov	r1, r3
 800af38:	4b05      	ldr	r3, [pc, #20]	@ (800af50 <USB_DeactivateEndpoint+0x1b4>)
 800af3a:	4013      	ands	r3, r2
 800af3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	ec337800 	.word	0xec337800
 800af50:	eff37800 	.word	0xeff37800

0800af54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08a      	sub	sp, #40	@ 0x28
 800af58:	af02      	add	r7, sp, #8
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	4613      	mov	r3, r2
 800af60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	785b      	ldrb	r3, [r3, #1]
 800af70:	2b01      	cmp	r3, #1
 800af72:	f040 817f 	bne.w	800b274 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d132      	bne.n	800afe4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	015a      	lsls	r2, r3, #5
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	4413      	add	r3, r2
 800af86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	69ba      	ldr	r2, [r7, #24]
 800af8e:	0151      	lsls	r1, r2, #5
 800af90:	69fa      	ldr	r2, [r7, #28]
 800af92:	440a      	add	r2, r1
 800af94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af98:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800af9c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800afa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	69ba      	ldr	r2, [r7, #24]
 800afb2:	0151      	lsls	r1, r2, #5
 800afb4:	69fa      	ldr	r2, [r7, #28]
 800afb6:	440a      	add	r2, r1
 800afb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800afc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	0151      	lsls	r1, r2, #5
 800afd4:	69fa      	ldr	r2, [r7, #28]
 800afd6:	440a      	add	r2, r1
 800afd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afdc:	0cdb      	lsrs	r3, r3, #19
 800afde:	04db      	lsls	r3, r3, #19
 800afe0:	6113      	str	r3, [r2, #16]
 800afe2:	e097      	b.n	800b114 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	0151      	lsls	r1, r2, #5
 800aff6:	69fa      	ldr	r2, [r7, #28]
 800aff8:	440a      	add	r2, r1
 800affa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800affe:	0cdb      	lsrs	r3, r3, #19
 800b000:	04db      	lsls	r3, r3, #19
 800b002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	0151      	lsls	r1, r2, #5
 800b016:	69fa      	ldr	r2, [r7, #28]
 800b018:	440a      	add	r2, r1
 800b01a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b01e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b022:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b026:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d11a      	bne.n	800b064 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	691a      	ldr	r2, [r3, #16]
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	429a      	cmp	r2, r3
 800b038:	d903      	bls.n	800b042 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	015a      	lsls	r2, r3, #5
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	4413      	add	r3, r2
 800b04a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	69ba      	ldr	r2, [r7, #24]
 800b052:	0151      	lsls	r1, r2, #5
 800b054:	69fa      	ldr	r2, [r7, #28]
 800b056:	440a      	add	r2, r1
 800b058:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b05c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b060:	6113      	str	r3, [r2, #16]
 800b062:	e044      	b.n	800b0ee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	691a      	ldr	r2, [r3, #16]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	4413      	add	r3, r2
 800b06e:	1e5a      	subs	r2, r3, #1
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	fbb2 f3f3 	udiv	r3, r2, r3
 800b078:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b086:	691a      	ldr	r2, [r3, #16]
 800b088:	8afb      	ldrh	r3, [r7, #22]
 800b08a:	04d9      	lsls	r1, r3, #19
 800b08c:	4ba4      	ldr	r3, [pc, #656]	@ (800b320 <USB_EPStartXfer+0x3cc>)
 800b08e:	400b      	ands	r3, r1
 800b090:	69b9      	ldr	r1, [r7, #24]
 800b092:	0148      	lsls	r0, r1, #5
 800b094:	69f9      	ldr	r1, [r7, #28]
 800b096:	4401      	add	r1, r0
 800b098:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b09c:	4313      	orrs	r3, r2
 800b09e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	791b      	ldrb	r3, [r3, #4]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d122      	bne.n	800b0ee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	0151      	lsls	r1, r2, #5
 800b0ba:	69fa      	ldr	r2, [r7, #28]
 800b0bc:	440a      	add	r2, r1
 800b0be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0c2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b0c6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0d4:	691a      	ldr	r2, [r3, #16]
 800b0d6:	8afb      	ldrh	r3, [r7, #22]
 800b0d8:	075b      	lsls	r3, r3, #29
 800b0da:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b0de:	69b9      	ldr	r1, [r7, #24]
 800b0e0:	0148      	lsls	r0, r1, #5
 800b0e2:	69f9      	ldr	r1, [r7, #28]
 800b0e4:	4401      	add	r1, r0
 800b0e6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	015a      	lsls	r2, r3, #5
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0fa:	691a      	ldr	r2, [r3, #16]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b104:	69b9      	ldr	r1, [r7, #24]
 800b106:	0148      	lsls	r0, r1, #5
 800b108:	69f9      	ldr	r1, [r7, #28]
 800b10a:	4401      	add	r1, r0
 800b10c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b110:	4313      	orrs	r3, r2
 800b112:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b114:	79fb      	ldrb	r3, [r7, #7]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d14b      	bne.n	800b1b2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d009      	beq.n	800b136 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b12e:	461a      	mov	r2, r3
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	791b      	ldrb	r3, [r3, #4]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d128      	bne.n	800b190 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d110      	bne.n	800b170 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	015a      	lsls	r2, r3, #5
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	4413      	add	r3, r2
 800b156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69ba      	ldr	r2, [r7, #24]
 800b15e:	0151      	lsls	r1, r2, #5
 800b160:	69fa      	ldr	r2, [r7, #28]
 800b162:	440a      	add	r2, r1
 800b164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b168:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	e00f      	b.n	800b190 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	0151      	lsls	r1, r2, #5
 800b182:	69fa      	ldr	r2, [r7, #28]
 800b184:	440a      	add	r2, r1
 800b186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b18a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b18e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	69ba      	ldr	r2, [r7, #24]
 800b1a0:	0151      	lsls	r1, r2, #5
 800b1a2:	69fa      	ldr	r2, [r7, #28]
 800b1a4:	440a      	add	r2, r1
 800b1a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	e166      	b.n	800b480 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	0151      	lsls	r1, r2, #5
 800b1c4:	69fa      	ldr	r2, [r7, #28]
 800b1c6:	440a      	add	r2, r1
 800b1c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b1d0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	791b      	ldrb	r3, [r3, #4]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d015      	beq.n	800b206 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 814e 	beq.w	800b480 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	f003 030f 	and.w	r3, r3, #15
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1fa:	69f9      	ldr	r1, [r7, #28]
 800b1fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b200:	4313      	orrs	r3, r2
 800b202:	634b      	str	r3, [r1, #52]	@ 0x34
 800b204:	e13c      	b.n	800b480 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b212:	2b00      	cmp	r3, #0
 800b214:	d110      	bne.n	800b238 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	015a      	lsls	r2, r3, #5
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	4413      	add	r3, r2
 800b21e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	69ba      	ldr	r2, [r7, #24]
 800b226:	0151      	lsls	r1, r2, #5
 800b228:	69fa      	ldr	r2, [r7, #28]
 800b22a:	440a      	add	r2, r1
 800b22c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b230:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	e00f      	b.n	800b258 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	0151      	lsls	r1, r2, #5
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	440a      	add	r2, r1
 800b24e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b256:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	68d9      	ldr	r1, [r3, #12]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	781a      	ldrb	r2, [r3, #0]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	b298      	uxth	r0, r3
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	4603      	mov	r3, r0
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 f9b9 	bl	800b5e4 <USB_WritePacket>
 800b272:	e105      	b.n	800b480 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	0151      	lsls	r1, r2, #5
 800b286:	69fa      	ldr	r2, [r7, #28]
 800b288:	440a      	add	r2, r1
 800b28a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b28e:	0cdb      	lsrs	r3, r3, #19
 800b290:	04db      	lsls	r3, r3, #19
 800b292:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	0151      	lsls	r1, r2, #5
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	440a      	add	r2, r1
 800b2aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b2b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b2b6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d132      	bne.n	800b324 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	689a      	ldr	r2, [r3, #8]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	015a      	lsls	r2, r3, #5
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	4413      	add	r3, r2
 800b2de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2e2:	691a      	ldr	r2, [r3, #16]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2ec:	69b9      	ldr	r1, [r7, #24]
 800b2ee:	0148      	lsls	r0, r1, #5
 800b2f0:	69f9      	ldr	r1, [r7, #28]
 800b2f2:	4401      	add	r1, r0
 800b2f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	69ba      	ldr	r2, [r7, #24]
 800b30c:	0151      	lsls	r1, r2, #5
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	440a      	add	r2, r1
 800b312:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b316:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b31a:	6113      	str	r3, [r2, #16]
 800b31c:	e062      	b.n	800b3e4 <USB_EPStartXfer+0x490>
 800b31e:	bf00      	nop
 800b320:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d123      	bne.n	800b374 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	015a      	lsls	r2, r3, #5
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	4413      	add	r3, r2
 800b334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b338:	691a      	ldr	r2, [r3, #16]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b342:	69b9      	ldr	r1, [r7, #24]
 800b344:	0148      	lsls	r0, r1, #5
 800b346:	69f9      	ldr	r1, [r7, #28]
 800b348:	4401      	add	r1, r0
 800b34a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b34e:	4313      	orrs	r3, r2
 800b350:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	69ba      	ldr	r2, [r7, #24]
 800b362:	0151      	lsls	r1, r2, #5
 800b364:	69fa      	ldr	r2, [r7, #28]
 800b366:	440a      	add	r2, r1
 800b368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b36c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b370:	6113      	str	r3, [r2, #16]
 800b372:	e037      	b.n	800b3e4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	691a      	ldr	r2, [r3, #16]
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	4413      	add	r3, r2
 800b37e:	1e5a      	subs	r2, r3, #1
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	fbb2 f3f3 	udiv	r3, r2, r3
 800b388:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	8afa      	ldrh	r2, [r7, #22]
 800b390:	fb03 f202 	mul.w	r2, r3, r2
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3a4:	691a      	ldr	r2, [r3, #16]
 800b3a6:	8afb      	ldrh	r3, [r7, #22]
 800b3a8:	04d9      	lsls	r1, r3, #19
 800b3aa:	4b38      	ldr	r3, [pc, #224]	@ (800b48c <USB_EPStartXfer+0x538>)
 800b3ac:	400b      	ands	r3, r1
 800b3ae:	69b9      	ldr	r1, [r7, #24]
 800b3b0:	0148      	lsls	r0, r1, #5
 800b3b2:	69f9      	ldr	r1, [r7, #28]
 800b3b4:	4401      	add	r1, r0
 800b3b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	015a      	lsls	r2, r3, #5
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	6a1b      	ldr	r3, [r3, #32]
 800b3d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3d4:	69b9      	ldr	r1, [r7, #24]
 800b3d6:	0148      	lsls	r0, r1, #5
 800b3d8:	69f9      	ldr	r1, [r7, #28]
 800b3da:	4401      	add	r1, r0
 800b3dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b3e4:	79fb      	ldrb	r3, [r7, #7]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d10d      	bne.n	800b406 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d009      	beq.n	800b406 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	68d9      	ldr	r1, [r3, #12]
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	015a      	lsls	r2, r3, #5
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b402:	460a      	mov	r2, r1
 800b404:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	791b      	ldrb	r3, [r3, #4]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d128      	bne.n	800b460 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d110      	bne.n	800b440 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	0151      	lsls	r1, r2, #5
 800b430:	69fa      	ldr	r2, [r7, #28]
 800b432:	440a      	add	r2, r1
 800b434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b438:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	e00f      	b.n	800b460 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	69ba      	ldr	r2, [r7, #24]
 800b450:	0151      	lsls	r1, r2, #5
 800b452:	69fa      	ldr	r2, [r7, #28]
 800b454:	440a      	add	r2, r1
 800b456:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b45a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b45e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	4413      	add	r3, r2
 800b468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	69ba      	ldr	r2, [r7, #24]
 800b470:	0151      	lsls	r1, r2, #5
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	440a      	add	r2, r1
 800b476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b47a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b47e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3720      	adds	r7, #32
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	1ff80000 	.word	0x1ff80000

0800b490 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b490:	b480      	push	{r7}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	785b      	ldrb	r3, [r3, #1]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d14a      	bne.n	800b544 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4c6:	f040 8086 	bne.w	800b5d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	7812      	ldrb	r2, [r2, #0]
 800b4de:	0151      	lsls	r1, r2, #5
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	440a      	add	r2, r1
 800b4e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b4ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	7812      	ldrb	r2, [r2, #0]
 800b502:	0151      	lsls	r1, r2, #5
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	440a      	add	r2, r1
 800b508:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b50c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b510:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	3301      	adds	r3, #1
 800b516:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b51e:	4293      	cmp	r3, r2
 800b520:	d902      	bls.n	800b528 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	75fb      	strb	r3, [r7, #23]
          break;
 800b526:	e056      	b.n	800b5d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	015a      	lsls	r2, r3, #5
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	4413      	add	r3, r2
 800b532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b53c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b540:	d0e7      	beq.n	800b512 <USB_EPStopXfer+0x82>
 800b542:	e048      	b.n	800b5d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b55c:	d13b      	bne.n	800b5d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	7812      	ldrb	r2, [r2, #0]
 800b572:	0151      	lsls	r1, r2, #5
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	440a      	add	r2, r1
 800b578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b57c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b580:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	015a      	lsls	r2, r3, #5
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	4413      	add	r3, r2
 800b58c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	7812      	ldrb	r2, [r2, #0]
 800b596:	0151      	lsls	r1, r2, #5
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	440a      	add	r2, r1
 800b59c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d902      	bls.n	800b5bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b5ba:	e00c      	b.n	800b5d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5d4:	d0e7      	beq.n	800b5a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	371c      	adds	r7, #28
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b089      	sub	sp, #36	@ 0x24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	71fb      	strb	r3, [r7, #7]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b602:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b606:	2b00      	cmp	r3, #0
 800b608:	d123      	bne.n	800b652 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b60a:	88bb      	ldrh	r3, [r7, #4]
 800b60c:	3303      	adds	r3, #3
 800b60e:	089b      	lsrs	r3, r3, #2
 800b610:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b612:	2300      	movs	r3, #0
 800b614:	61bb      	str	r3, [r7, #24]
 800b616:	e018      	b.n	800b64a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	031a      	lsls	r2, r3, #12
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b624:	461a      	mov	r2, r3
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	3301      	adds	r3, #1
 800b630:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	3301      	adds	r3, #1
 800b636:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	3301      	adds	r3, #1
 800b63c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	3301      	adds	r3, #1
 800b642:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	3301      	adds	r3, #1
 800b648:	61bb      	str	r3, [r7, #24]
 800b64a:	69ba      	ldr	r2, [r7, #24]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d3e2      	bcc.n	800b618 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3724      	adds	r7, #36	@ 0x24
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b660:	b480      	push	{r7}
 800b662:	b08b      	sub	sp, #44	@ 0x2c
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	4613      	mov	r3, r2
 800b66c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b676:	88fb      	ldrh	r3, [r7, #6]
 800b678:	089b      	lsrs	r3, r3, #2
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b67e:	88fb      	ldrh	r3, [r7, #6]
 800b680:	f003 0303 	and.w	r3, r3, #3
 800b684:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b686:	2300      	movs	r3, #0
 800b688:	623b      	str	r3, [r7, #32]
 800b68a:	e014      	b.n	800b6b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b696:	601a      	str	r2, [r3, #0]
    pDest++;
 800b698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69a:	3301      	adds	r3, #1
 800b69c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b6b0:	6a3b      	ldr	r3, [r7, #32]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	623b      	str	r3, [r7, #32]
 800b6b6:	6a3a      	ldr	r2, [r7, #32]
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d3e6      	bcc.n	800b68c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b6be:	8bfb      	ldrh	r3, [r7, #30]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d01e      	beq.n	800b702 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f107 0310 	add.w	r3, r7, #16
 800b6d4:	6812      	ldr	r2, [r2, #0]
 800b6d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e8:	701a      	strb	r2, [r3, #0]
      i++;
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	623b      	str	r3, [r7, #32]
      pDest++;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b6f6:	8bfb      	ldrh	r3, [r7, #30]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b6fc:	8bfb      	ldrh	r3, [r7, #30]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1ea      	bne.n	800b6d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b704:	4618      	mov	r0, r3
 800b706:	372c      	adds	r7, #44	@ 0x2c
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	785b      	ldrb	r3, [r3, #1]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d12c      	bne.n	800b786 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	db12      	blt.n	800b764 <USB_EPSetStall+0x54>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00f      	beq.n	800b764 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	015a      	lsls	r2, r3, #5
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	4413      	add	r3, r2
 800b74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	0151      	lsls	r1, r2, #5
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	440a      	add	r2, r1
 800b75a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b75e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b762:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	0151      	lsls	r1, r2, #5
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	440a      	add	r2, r1
 800b77a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b77e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	e02b      	b.n	800b7de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	db12      	blt.n	800b7be <USB_EPSetStall+0xae>
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00f      	beq.n	800b7be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	015a      	lsls	r2, r3, #5
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	0151      	lsls	r1, r2, #5
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	440a      	add	r2, r1
 800b7b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b7bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	015a      	lsls	r2, r3, #5
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	0151      	lsls	r1, r2, #5
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	440a      	add	r2, r1
 800b7d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b7dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	785b      	ldrb	r3, [r3, #1]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d128      	bne.n	800b85a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	015a      	lsls	r2, r3, #5
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4413      	add	r3, r2
 800b810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	0151      	lsls	r1, r2, #5
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	440a      	add	r2, r1
 800b81e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b822:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b826:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	791b      	ldrb	r3, [r3, #4]
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d003      	beq.n	800b838 <USB_EPClearStall+0x4c>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	791b      	ldrb	r3, [r3, #4]
 800b834:	2b02      	cmp	r3, #2
 800b836:	d138      	bne.n	800b8aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	0151      	lsls	r1, r2, #5
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	440a      	add	r2, r1
 800b84e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b856:	6013      	str	r3, [r2, #0]
 800b858:	e027      	b.n	800b8aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	015a      	lsls	r2, r3, #5
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	4413      	add	r3, r2
 800b862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	0151      	lsls	r1, r2, #5
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	440a      	add	r2, r1
 800b870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b874:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b878:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	791b      	ldrb	r3, [r3, #4]
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d003      	beq.n	800b88a <USB_EPClearStall+0x9e>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	791b      	ldrb	r3, [r3, #4]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d10f      	bne.n	800b8aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	0151      	lsls	r1, r2, #5
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	440a      	add	r2, r1
 800b8a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b8da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	011b      	lsls	r3, r3, #4
 800b8e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b8ec:	68f9      	ldr	r1, [r7, #12]
 800b8ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b91e:	f023 0303 	bic.w	r3, r3, #3
 800b922:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b932:	f023 0302 	bic.w	r3, r3, #2
 800b936:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b946:	b480      	push	{r7}
 800b948:	b085      	sub	sp, #20
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b960:	f023 0303 	bic.w	r3, r3, #3
 800b964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b974:	f043 0302 	orr.w	r3, r3, #2
 800b978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4013      	ands	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b085      	sub	sp, #20
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9ca:	69db      	ldr	r3, [r3, #28]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	0c1b      	lsrs	r3, r3, #16
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b085      	sub	sp, #20
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9f4:	699b      	ldr	r3, [r3, #24]
 800b9f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	4013      	ands	r3, r2
 800ba04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	b29b      	uxth	r3, r3
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b085      	sub	sp, #20
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba26:	78fb      	ldrb	r3, [r7, #3]
 800ba28:	015a      	lsls	r2, r3, #5
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	4013      	ands	r3, r2
 800ba42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba44:	68bb      	ldr	r3, [r7, #8]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b087      	sub	sp, #28
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba76:	78fb      	ldrb	r3, [r7, #3]
 800ba78:	f003 030f 	and.w	r3, r3, #15
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba82:	01db      	lsls	r3, r3, #7
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba8c:	78fb      	ldrb	r3, [r7, #3]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800baa0:	68bb      	ldr	r3, [r7, #8]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	371c      	adds	r7, #28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	f003 0301 	and.w	r3, r3, #1
}
 800babe:	4618      	mov	r0, r3
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800baca:	b480      	push	{r7}
 800bacc:	b085      	sub	sp, #20
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bae4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bae8:	f023 0307 	bic.w	r3, r3, #7
 800baec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bafc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	333c      	adds	r3, #60	@ 0x3c
 800bb26:	3304      	adds	r3, #4
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	4a26      	ldr	r2, [pc, #152]	@ (800bbc8 <USB_EP0_OutStart+0xb8>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d90a      	bls.n	800bb4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb44:	d101      	bne.n	800bb4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e037      	b.n	800bbba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb50:	461a      	mov	r2, r3
 800bb52:	2300      	movs	r3, #0
 800bb54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	697a      	ldr	r2, [r7, #20]
 800bb74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb78:	f043 0318 	orr.w	r3, r3, #24
 800bb7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bb90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb92:	7afb      	ldrb	r3, [r7, #11]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d10f      	bne.n	800bbb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb9e:	461a      	mov	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbb2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bbb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	4f54300a 	.word	0x4f54300a

0800bbcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbe4:	d901      	bls.n	800bbea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	e01b      	b.n	800bc22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	daf2      	bge.n	800bbd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f043 0201 	orr.w	r2, r3, #1
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3301      	adds	r3, #1
 800bc06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc0e:	d901      	bls.n	800bc14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc10:	2303      	movs	r3, #3
 800bc12:	e006      	b.n	800bc22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d0f0      	beq.n	800bc02 <USB_CoreReset+0x36>

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
	...

0800bc30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800bc34:	f001 f978 	bl	800cf28 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	4917      	ldr	r1, [pc, #92]	@ (800bc98 <MX_USB_DEVICE_Init+0x68>)
 800bc3c:	4817      	ldr	r0, [pc, #92]	@ (800bc9c <MX_USB_DEVICE_Init+0x6c>)
 800bc3e:	f001 fd5d 	bl	800d6fc <USBD_Init>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800bc48:	f7f7 fd68 	bl	800371c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800bc4c:	4914      	ldr	r1, [pc, #80]	@ (800bca0 <MX_USB_DEVICE_Init+0x70>)
 800bc4e:	4813      	ldr	r0, [pc, #76]	@ (800bc9c <MX_USB_DEVICE_Init+0x6c>)
 800bc50:	f001 fd80 	bl	800d754 <USBD_RegisterClass>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800bc5a:	f7f7 fd5f 	bl	800371c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800bc5e:	4911      	ldr	r1, [pc, #68]	@ (800bca4 <MX_USB_DEVICE_Init+0x74>)
 800bc60:	480e      	ldr	r0, [pc, #56]	@ (800bc9c <MX_USB_DEVICE_Init+0x6c>)
 800bc62:	f000 fe3b 	bl	800c8dc <USBD_CDC_ACM_RegisterInterface>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800bc6c:	f7f7 fd56 	bl	800371c <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 800bc70:	490d      	ldr	r1, [pc, #52]	@ (800bca8 <MX_USB_DEVICE_Init+0x78>)
 800bc72:	480a      	ldr	r0, [pc, #40]	@ (800bc9c <MX_USB_DEVICE_Init+0x6c>)
 800bc74:	f001 fcf4 	bl	800d660 <USBD_CUSTOM_HID_RegisterInterface>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 800bc7e:	f7f7 fd4d 	bl	800371c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800bc82:	4806      	ldr	r0, [pc, #24]	@ (800bc9c <MX_USB_DEVICE_Init+0x6c>)
 800bc84:	f001 fda4 	bl	800d7d0 <USBD_Start>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 800bc8e:	f7f7 fd45 	bl	800371c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc92:	bf00      	nop
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20000030 	.word	0x20000030
 800bc9c:	20001074 	.word	0x20001074
 800bca0:	20000194 	.word	0x20000194
 800bca4:	2000001c 	.word	0x2000001c
 800bca8:	200000a4 	.word	0x200000a4

0800bcac <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	01db      	lsls	r3, r3, #7
 800bcba:	4a06      	ldr	r2, [pc, #24]	@ (800bcd4 <CDC_Init+0x28>)
 800bcbc:	441a      	add	r2, r3
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	4905      	ldr	r1, [pc, #20]	@ (800bcd8 <CDC_Init+0x2c>)
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 fe44 	bl	800c950 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 800bcc8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20001390 	.word	0x20001390
 800bcd8:	20001074 	.word	0x20001074

0800bcdc <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800bce6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	603a      	str	r2, [r7, #0]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	4603      	mov	r3, r0
 800bd00:	71fb      	strb	r3, [r7, #7]
 800bd02:	460b      	mov	r3, r1
 800bd04:	71bb      	strb	r3, [r7, #6]
 800bd06:	4613      	mov	r3, r2
 800bd08:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800bd0a:	79bb      	ldrb	r3, [r7, #6]
 800bd0c:	2b23      	cmp	r3, #35	@ 0x23
 800bd0e:	f200 80b6 	bhi.w	800be7e <CDC_Control+0x18a>
 800bd12:	a201      	add	r2, pc, #4	@ (adr r2, 800bd18 <CDC_Control+0x24>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800be7f 	.word	0x0800be7f
 800bd1c:	0800be7f 	.word	0x0800be7f
 800bd20:	0800be7f 	.word	0x0800be7f
 800bd24:	0800be7f 	.word	0x0800be7f
 800bd28:	0800be7f 	.word	0x0800be7f
 800bd2c:	0800be7f 	.word	0x0800be7f
 800bd30:	0800be7f 	.word	0x0800be7f
 800bd34:	0800be7f 	.word	0x0800be7f
 800bd38:	0800be7f 	.word	0x0800be7f
 800bd3c:	0800be7f 	.word	0x0800be7f
 800bd40:	0800be7f 	.word	0x0800be7f
 800bd44:	0800be7f 	.word	0x0800be7f
 800bd48:	0800be7f 	.word	0x0800be7f
 800bd4c:	0800be7f 	.word	0x0800be7f
 800bd50:	0800be7f 	.word	0x0800be7f
 800bd54:	0800be7f 	.word	0x0800be7f
 800bd58:	0800be7f 	.word	0x0800be7f
 800bd5c:	0800be7f 	.word	0x0800be7f
 800bd60:	0800be7f 	.word	0x0800be7f
 800bd64:	0800be7f 	.word	0x0800be7f
 800bd68:	0800be7f 	.word	0x0800be7f
 800bd6c:	0800be7f 	.word	0x0800be7f
 800bd70:	0800be7f 	.word	0x0800be7f
 800bd74:	0800be7f 	.word	0x0800be7f
 800bd78:	0800be7f 	.word	0x0800be7f
 800bd7c:	0800be7f 	.word	0x0800be7f
 800bd80:	0800be7f 	.word	0x0800be7f
 800bd84:	0800be7f 	.word	0x0800be7f
 800bd88:	0800be7f 	.word	0x0800be7f
 800bd8c:	0800be7f 	.word	0x0800be7f
 800bd90:	0800be7f 	.word	0x0800be7f
 800bd94:	0800be7f 	.word	0x0800be7f
 800bd98:	0800bda9 	.word	0x0800bda9
 800bd9c:	0800be09 	.word	0x0800be09
 800bda0:	0800be7f 	.word	0x0800be7f
 800bda4:	0800be7f 	.word	0x0800be7f
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	461a      	mov	r2, r3
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	021b      	lsls	r3, r3, #8
 800bdb6:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	3302      	adds	r3, #2
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800bdc0:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	3303      	adds	r3, #3
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	061b      	lsls	r3, r3, #24
 800bdca:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4a2f      	ldr	r2, [pc, #188]	@ (800be90 <CDC_Control+0x19c>)
 800bdd2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800bdd6:	79fb      	ldrb	r3, [r7, #7]
 800bdd8:	683a      	ldr	r2, [r7, #0]
 800bdda:	7911      	ldrb	r1, [r2, #4]
 800bddc:	4a2c      	ldr	r2, [pc, #176]	@ (800be90 <CDC_Control+0x19c>)
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	4413      	add	r3, r2
 800bde2:	460a      	mov	r2, r1
 800bde4:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	7951      	ldrb	r1, [r2, #5]
 800bdec:	4a28      	ldr	r2, [pc, #160]	@ (800be90 <CDC_Control+0x19c>)
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	4413      	add	r3, r2
 800bdf2:	460a      	mov	r2, r1
 800bdf4:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800bdf6:	79fb      	ldrb	r3, [r7, #7]
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	7991      	ldrb	r1, [r2, #6]
 800bdfc:	4a24      	ldr	r2, [pc, #144]	@ (800be90 <CDC_Control+0x19c>)
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	4413      	add	r3, r2
 800be02:	460a      	mov	r2, r1
 800be04:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800be06:	e03b      	b.n	800be80 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	4a21      	ldr	r2, [pc, #132]	@ (800be90 <CDC_Control+0x19c>)
 800be0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be10:	b2da      	uxtb	r2, r3
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800be16:	79fb      	ldrb	r3, [r7, #7]
 800be18:	4a1d      	ldr	r2, [pc, #116]	@ (800be90 <CDC_Control+0x19c>)
 800be1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be1e:	0a1a      	lsrs	r2, r3, #8
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	b2d2      	uxtb	r2, r2
 800be26:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	4a19      	ldr	r2, [pc, #100]	@ (800be90 <CDC_Control+0x19c>)
 800be2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be30:	0c1a      	lsrs	r2, r3, #16
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	3302      	adds	r3, #2
 800be36:	b2d2      	uxtb	r2, r2
 800be38:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800be3a:	79fb      	ldrb	r3, [r7, #7]
 800be3c:	4a14      	ldr	r2, [pc, #80]	@ (800be90 <CDC_Control+0x19c>)
 800be3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be42:	0e1a      	lsrs	r2, r3, #24
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	3303      	adds	r3, #3
 800be48:	b2d2      	uxtb	r2, r2
 800be4a:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800be4c:	79fb      	ldrb	r3, [r7, #7]
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	3204      	adds	r2, #4
 800be52:	490f      	ldr	r1, [pc, #60]	@ (800be90 <CDC_Control+0x19c>)
 800be54:	00db      	lsls	r3, r3, #3
 800be56:	440b      	add	r3, r1
 800be58:	791b      	ldrb	r3, [r3, #4]
 800be5a:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	3205      	adds	r2, #5
 800be62:	490b      	ldr	r1, [pc, #44]	@ (800be90 <CDC_Control+0x19c>)
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	440b      	add	r3, r1
 800be68:	795b      	ldrb	r3, [r3, #5]
 800be6a:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 800be6c:	79fb      	ldrb	r3, [r7, #7]
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	3206      	adds	r2, #6
 800be72:	4907      	ldr	r1, [pc, #28]	@ (800be90 <CDC_Control+0x19c>)
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	440b      	add	r3, r1
 800be78:	799b      	ldrb	r3, [r3, #6]
 800be7a:	7013      	strb	r3, [r2, #0]
    break;
 800be7c:	e000      	b.n	800be80 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800be7e:	bf00      	nop
  }

  return (USBD_OK);
 800be80:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800be82:	4618      	mov	r0, r3
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	20001410 	.word	0x20001410

0800be94 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 f825 	bl	800befc <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	4907      	ldr	r1, [pc, #28]	@ (800bed4 <CDC_Receive+0x40>)
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fd49 	bl	800c950 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	4904      	ldr	r1, [pc, #16]	@ (800bed4 <CDC_Receive+0x40>)
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 fda4 	bl	800ca10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bec8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20001074 	.word	0x20001074

0800bed8 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60b9      	str	r1, [r7, #8]
 800bee0:	607a      	str	r2, [r7, #4]
 800bee2:	461a      	mov	r2, r3
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
 800bee8:	4613      	mov	r3, r2
 800beea:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
	...

0800befc <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	6039      	str	r1, [r7, #0]
 800bf06:	71fb      	strb	r3, [r7, #7]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bf1a:	fb02 f303 	mul.w	r3, r2, r3
 800bf1e:	4a0e      	ldr	r2, [pc, #56]	@ (800bf58 <CDC_Transmit+0x5c>)
 800bf20:	4413      	add	r3, r2
 800bf22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e00d      	b.n	800bf4e <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800bf32:	88bb      	ldrh	r3, [r7, #4]
 800bf34:	79f8      	ldrb	r0, [r7, #7]
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	4908      	ldr	r1, [pc, #32]	@ (800bf5c <CDC_Transmit+0x60>)
 800bf3a:	f000 fce5 	bl	800c908 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	4906      	ldr	r1, [pc, #24]	@ (800bf5c <CDC_Transmit+0x60>)
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 fd22 	bl	800c98c <USBD_CDC_TransmitPacket>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20001630 	.word	0x20001630
 800bf5c:	20001074 	.word	0x20001074

0800bf60 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	6039      	str	r1, [r7, #0]
 800bf6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2212      	movs	r2, #18
 800bf70:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800bf72:	4b03      	ldr	r3, [pc, #12]	@ (800bf80 <USBD_DeviceDescriptor+0x20>)
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	2000004c 	.word	0x2000004c

0800bf84 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	6039      	str	r1, [r7, #0]
 800bf8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2204      	movs	r2, #4
 800bf94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bf96:	4b03      	ldr	r3, [pc, #12]	@ (800bfa4 <USBD_LangIDStrDescriptor+0x20>)
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	20000060 	.word	0x20000060

0800bfa8 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	4603      	mov	r3, r0
 800bfb0:	6039      	str	r1, [r7, #0]
 800bfb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d105      	bne.n	800bfc6 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	4907      	ldr	r1, [pc, #28]	@ (800bfdc <USBD_ProductStrDescriptor+0x34>)
 800bfbe:	4808      	ldr	r0, [pc, #32]	@ (800bfe0 <USBD_ProductStrDescriptor+0x38>)
 800bfc0:	f002 fc45 	bl	800e84e <USBD_GetString>
 800bfc4:	e004      	b.n	800bfd0 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	4904      	ldr	r1, [pc, #16]	@ (800bfdc <USBD_ProductStrDescriptor+0x34>)
 800bfca:	4805      	ldr	r0, [pc, #20]	@ (800bfe0 <USBD_ProductStrDescriptor+0x38>)
 800bfcc:	f002 fc3f 	bl	800e84e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfd0:	4b02      	ldr	r3, [pc, #8]	@ (800bfdc <USBD_ProductStrDescriptor+0x34>)
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20001418 	.word	0x20001418
 800bfe0:	08014be8 	.word	0x08014be8

0800bfe4 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4603      	mov	r3, r0
 800bfec:	6039      	str	r1, [r7, #0]
 800bfee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	4904      	ldr	r1, [pc, #16]	@ (800c004 <USBD_ManufacturerStrDescriptor+0x20>)
 800bff4:	4804      	ldr	r0, [pc, #16]	@ (800c008 <USBD_ManufacturerStrDescriptor+0x24>)
 800bff6:	f002 fc2a 	bl	800e84e <USBD_GetString>
  return USBD_StrDesc;
 800bffa:	4b02      	ldr	r3, [pc, #8]	@ (800c004 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20001418 	.word	0x20001418
 800c008:	08014c00 	.word	0x08014c00

0800c00c <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	6039      	str	r1, [r7, #0]
 800c016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	221a      	movs	r2, #26
 800c01c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c01e:	f000 f843 	bl	800c0a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c022:	4b02      	ldr	r3, [pc, #8]	@ (800c02c <USBD_SerialStrDescriptor+0x20>)
}
 800c024:	4618      	mov	r0, r3
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20000064 	.word	0x20000064

0800c030 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	6039      	str	r1, [r7, #0]
 800c03a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c03c:	79fb      	ldrb	r3, [r7, #7]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d105      	bne.n	800c04e <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	4907      	ldr	r1, [pc, #28]	@ (800c064 <USBD_ConfigStrDescriptor+0x34>)
 800c046:	4808      	ldr	r0, [pc, #32]	@ (800c068 <USBD_ConfigStrDescriptor+0x38>)
 800c048:	f002 fc01 	bl	800e84e <USBD_GetString>
 800c04c:	e004      	b.n	800c058 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	4904      	ldr	r1, [pc, #16]	@ (800c064 <USBD_ConfigStrDescriptor+0x34>)
 800c052:	4805      	ldr	r0, [pc, #20]	@ (800c068 <USBD_ConfigStrDescriptor+0x38>)
 800c054:	f002 fbfb 	bl	800e84e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c058:	4b02      	ldr	r3, [pc, #8]	@ (800c064 <USBD_ConfigStrDescriptor+0x34>)
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	20001418 	.word	0x20001418
 800c068:	08014c14 	.word	0x08014c14

0800c06c <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	6039      	str	r1, [r7, #0]
 800c076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c078:	79fb      	ldrb	r3, [r7, #7]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d105      	bne.n	800c08a <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	4907      	ldr	r1, [pc, #28]	@ (800c0a0 <USBD_InterfaceStrDescriptor+0x34>)
 800c082:	4808      	ldr	r0, [pc, #32]	@ (800c0a4 <USBD_InterfaceStrDescriptor+0x38>)
 800c084:	f002 fbe3 	bl	800e84e <USBD_GetString>
 800c088:	e004      	b.n	800c094 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	4904      	ldr	r1, [pc, #16]	@ (800c0a0 <USBD_InterfaceStrDescriptor+0x34>)
 800c08e:	4805      	ldr	r0, [pc, #20]	@ (800c0a4 <USBD_InterfaceStrDescriptor+0x38>)
 800c090:	f002 fbdd 	bl	800e84e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c094:	4b02      	ldr	r3, [pc, #8]	@ (800c0a0 <USBD_InterfaceStrDescriptor+0x34>)
}
 800c096:	4618      	mov	r0, r3
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20001418 	.word	0x20001418
 800c0a4:	08014c24 	.word	0x08014c24

0800c0a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c0ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c0ec <Get_SerialNum+0x44>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c0b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c0f0 <Get_SerialNum+0x48>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c0ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c0f4 <Get_SerialNum+0x4c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d009      	beq.n	800c0e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c0ce:	2208      	movs	r2, #8
 800c0d0:	4909      	ldr	r1, [pc, #36]	@ (800c0f8 <Get_SerialNum+0x50>)
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f000 f814 	bl	800c100 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c0d8:	2204      	movs	r2, #4
 800c0da:	4908      	ldr	r1, [pc, #32]	@ (800c0fc <Get_SerialNum+0x54>)
 800c0dc:	68b8      	ldr	r0, [r7, #8]
 800c0de:	f000 f80f 	bl	800c100 <IntToUnicode>
  }
}
 800c0e2:	bf00      	nop
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	1fff7a10 	.word	0x1fff7a10
 800c0f0:	1fff7a14 	.word	0x1fff7a14
 800c0f4:	1fff7a18 	.word	0x1fff7a18
 800c0f8:	20000066 	.word	0x20000066
 800c0fc:	20000076 	.word	0x20000076

0800c100 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c100:	b480      	push	{r7}
 800c102:	b087      	sub	sp, #28
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	4613      	mov	r3, r2
 800c10c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c112:	2300      	movs	r3, #0
 800c114:	75fb      	strb	r3, [r7, #23]
 800c116:	e027      	b.n	800c168 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	0f1b      	lsrs	r3, r3, #28
 800c11c:	2b09      	cmp	r3, #9
 800c11e:	d80b      	bhi.n	800c138 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	0f1b      	lsrs	r3, r3, #28
 800c124:	b2da      	uxtb	r2, r3
 800c126:	7dfb      	ldrb	r3, [r7, #23]
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	4619      	mov	r1, r3
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	440b      	add	r3, r1
 800c130:	3230      	adds	r2, #48	@ 0x30
 800c132:	b2d2      	uxtb	r2, r2
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	e00a      	b.n	800c14e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	0f1b      	lsrs	r3, r3, #28
 800c13c:	b2da      	uxtb	r2, r3
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	005b      	lsls	r3, r3, #1
 800c142:	4619      	mov	r1, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	440b      	add	r3, r1
 800c148:	3237      	adds	r2, #55	@ 0x37
 800c14a:	b2d2      	uxtb	r2, r2
 800c14c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	011b      	lsls	r3, r3, #4
 800c152:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	3301      	adds	r3, #1
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	4413      	add	r3, r2
 800c15e:	2200      	movs	r2, #0
 800c160:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c162:	7dfb      	ldrb	r3, [r7, #23]
 800c164:	3301      	adds	r3, #1
 800c166:	75fb      	strb	r3, [r7, #23]
 800c168:	7dfa      	ldrb	r2, [r7, #23]
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d3d3      	bcc.n	800c118 <IntToUnicode+0x18>
  }
}
 800c170:	bf00      	nop
 800c172:	bf00      	nop
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800c17e:	b480      	push	{r7}
 800c180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c182:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c184:	4618      	mov	r0, r3
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800c18e:	b480      	push	{r7}
 800c190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c192:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c194:	4618      	mov	r0, r3
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	460a      	mov	r2, r1
 800c1a8:	71fb      	strb	r3, [r7, #7]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800c1ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
 800c1d0:	e0c6      	b.n	800c360 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
 800c1d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c1d8:	fb02 f303 	mul.w	r3, r2, r3
 800c1dc:	4a65      	ldr	r2, [pc, #404]	@ (800c374 <USBD_CDC_Init+0x1b8>)
 800c1de:	4413      	add	r3, r2
 800c1e0:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	7c1b      	ldrb	r3, [r3, #16]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d13d      	bne.n	800c266 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	4a62      	ldr	r2, [pc, #392]	@ (800c378 <USBD_CDC_Init+0x1bc>)
 800c1ee:	5cd1      	ldrb	r1, [r2, r3]
 800c1f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f002 fd9b 	bl	800ed32 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	4a5e      	ldr	r2, [pc, #376]	@ (800c378 <USBD_CDC_Init+0x1bc>)
 800c200:	5cd3      	ldrb	r3, [r2, r3]
 800c202:	f003 020f 	and.w	r2, r3, #15
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	440b      	add	r3, r1
 800c212:	3324      	adds	r3, #36	@ 0x24
 800c214:	2201      	movs	r2, #1
 800c216:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800c218:	7bfb      	ldrb	r3, [r7, #15]
 800c21a:	4a58      	ldr	r2, [pc, #352]	@ (800c37c <USBD_CDC_Init+0x1c0>)
 800c21c:	5cd1      	ldrb	r1, [r2, r3]
 800c21e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c222:	2202      	movs	r2, #2
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f002 fd84 	bl	800ed32 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
 800c22c:	4a53      	ldr	r2, [pc, #332]	@ (800c37c <USBD_CDC_Init+0x1c0>)
 800c22e:	5cd3      	ldrb	r3, [r2, r3]
 800c230:	f003 020f 	and.w	r2, r3, #15
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	4613      	mov	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	440b      	add	r3, r1
 800c240:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c244:	2201      	movs	r2, #1
 800c246:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c248:	7bfb      	ldrb	r3, [r7, #15]
 800c24a:	4a4d      	ldr	r2, [pc, #308]	@ (800c380 <USBD_CDC_Init+0x1c4>)
 800c24c:	5cd3      	ldrb	r3, [r2, r3]
 800c24e:	f003 020f 	and.w	r2, r3, #15
 800c252:	6879      	ldr	r1, [r7, #4]
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	440b      	add	r3, r1
 800c25e:	3326      	adds	r3, #38	@ 0x26
 800c260:	2210      	movs	r2, #16
 800c262:	801a      	strh	r2, [r3, #0]
 800c264:	e03a      	b.n	800c2dc <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800c266:	7bfb      	ldrb	r3, [r7, #15]
 800c268:	4a43      	ldr	r2, [pc, #268]	@ (800c378 <USBD_CDC_Init+0x1bc>)
 800c26a:	5cd1      	ldrb	r1, [r2, r3]
 800c26c:	2340      	movs	r3, #64	@ 0x40
 800c26e:	2202      	movs	r2, #2
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f002 fd5e 	bl	800ed32 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	4a3f      	ldr	r2, [pc, #252]	@ (800c378 <USBD_CDC_Init+0x1bc>)
 800c27a:	5cd3      	ldrb	r3, [r2, r3]
 800c27c:	f003 020f 	and.w	r2, r3, #15
 800c280:	6879      	ldr	r1, [r7, #4]
 800c282:	4613      	mov	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	440b      	add	r3, r1
 800c28c:	3324      	adds	r3, #36	@ 0x24
 800c28e:	2201      	movs	r2, #1
 800c290:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800c292:	7bfb      	ldrb	r3, [r7, #15]
 800c294:	4a39      	ldr	r2, [pc, #228]	@ (800c37c <USBD_CDC_Init+0x1c0>)
 800c296:	5cd1      	ldrb	r1, [r2, r3]
 800c298:	2340      	movs	r3, #64	@ 0x40
 800c29a:	2202      	movs	r2, #2
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f002 fd48 	bl	800ed32 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
 800c2a4:	4a35      	ldr	r2, [pc, #212]	@ (800c37c <USBD_CDC_Init+0x1c0>)
 800c2a6:	5cd3      	ldrb	r3, [r2, r3]
 800c2a8:	f003 020f 	and.w	r2, r3, #15
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	440b      	add	r3, r1
 800c2b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c2bc:	2201      	movs	r2, #1
 800c2be:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	4a2f      	ldr	r2, [pc, #188]	@ (800c380 <USBD_CDC_Init+0x1c4>)
 800c2c4:	5cd3      	ldrb	r3, [r2, r3]
 800c2c6:	f003 020f 	and.w	r2, r3, #15
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	440b      	add	r3, r1
 800c2d6:	3326      	adds	r3, #38	@ 0x26
 800c2d8:	2210      	movs	r2, #16
 800c2da:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	4a28      	ldr	r2, [pc, #160]	@ (800c380 <USBD_CDC_Init+0x1c4>)
 800c2e0:	5cd1      	ldrb	r1, [r2, r3]
 800c2e2:	2308      	movs	r3, #8
 800c2e4:	2203      	movs	r2, #3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f002 fd23 	bl	800ed32 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4a24      	ldr	r2, [pc, #144]	@ (800c380 <USBD_CDC_Init+0x1c4>)
 800c2f0:	5cd3      	ldrb	r3, [r2, r3]
 800c2f2:	f003 020f 	and.w	r2, r3, #15
 800c2f6:	6879      	ldr	r1, [r7, #4]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4413      	add	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	440b      	add	r3, r1
 800c302:	3324      	adds	r3, #36	@ 0x24
 800c304:	2201      	movs	r2, #1
 800c306:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	7bfa      	ldrb	r2, [r7, #15]
 800c312:	4610      	mov	r0, r2
 800c314:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2200      	movs	r2, #0
 800c31a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2200      	movs	r2, #0
 800c322:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	7c1b      	ldrb	r3, [r3, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10b      	bne.n	800c346 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
 800c330:	4a12      	ldr	r2, [pc, #72]	@ (800c37c <USBD_CDC_Init+0x1c0>)
 800c332:	5cd1      	ldrb	r1, [r2, r3]
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c33a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f002 fde6 	bl	800ef10 <USBD_LL_PrepareReceive>
 800c344:	e009      	b.n	800c35a <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	4a0c      	ldr	r2, [pc, #48]	@ (800c37c <USBD_CDC_Init+0x1c0>)
 800c34a:	5cd1      	ldrb	r1, [r2, r3]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c352:	2340      	movs	r3, #64	@ 0x40
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f002 fddb 	bl	800ef10 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	3301      	adds	r3, #1
 800c35e:	73fb      	strb	r3, [r7, #15]
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	2b00      	cmp	r3, #0
 800c364:	f43f af35 	beq.w	800c1d2 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20001630 	.word	0x20001630
 800c378:	20001618 	.word	0x20001618
 800c37c:	2000161c 	.word	0x2000161c
 800c380:	20001620 	.word	0x20001620

0800c384 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c390:	2300      	movs	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]
 800c394:	e057      	b.n	800c446 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	4a2f      	ldr	r2, [pc, #188]	@ (800c458 <USBD_CDC_DeInit+0xd4>)
 800c39a:	5cd3      	ldrb	r3, [r2, r3]
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f002 fced 	bl	800ed7e <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
 800c3a6:	4a2c      	ldr	r2, [pc, #176]	@ (800c458 <USBD_CDC_DeInit+0xd4>)
 800c3a8:	5cd3      	ldrb	r3, [r2, r3]
 800c3aa:	f003 020f 	and.w	r2, r3, #15
 800c3ae:	6879      	ldr	r1, [r7, #4]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	440b      	add	r3, r1
 800c3ba:	3324      	adds	r3, #36	@ 0x24
 800c3bc:	2200      	movs	r2, #0
 800c3be:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800c3c0:	7bfb      	ldrb	r3, [r7, #15]
 800c3c2:	4a26      	ldr	r2, [pc, #152]	@ (800c45c <USBD_CDC_DeInit+0xd8>)
 800c3c4:	5cd3      	ldrb	r3, [r2, r3]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f002 fcd8 	bl	800ed7e <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	4a22      	ldr	r2, [pc, #136]	@ (800c45c <USBD_CDC_DeInit+0xd8>)
 800c3d2:	5cd3      	ldrb	r3, [r2, r3]
 800c3d4:	f003 020f 	and.w	r2, r3, #15
 800c3d8:	6879      	ldr	r1, [r7, #4]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
 800c3ee:	4a1c      	ldr	r2, [pc, #112]	@ (800c460 <USBD_CDC_DeInit+0xdc>)
 800c3f0:	5cd3      	ldrb	r3, [r2, r3]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f002 fcc2 	bl	800ed7e <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800c3fa:	7bfb      	ldrb	r3, [r7, #15]
 800c3fc:	4a18      	ldr	r2, [pc, #96]	@ (800c460 <USBD_CDC_DeInit+0xdc>)
 800c3fe:	5cd3      	ldrb	r3, [r2, r3]
 800c400:	f003 020f 	and.w	r2, r3, #15
 800c404:	6879      	ldr	r1, [r7, #4]
 800c406:	4613      	mov	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	440b      	add	r3, r1
 800c410:	3324      	adds	r3, #36	@ 0x24
 800c412:	2200      	movs	r2, #0
 800c414:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	4a11      	ldr	r2, [pc, #68]	@ (800c460 <USBD_CDC_DeInit+0xdc>)
 800c41a:	5cd3      	ldrb	r3, [r2, r3]
 800c41c:	f003 020f 	and.w	r2, r3, #15
 800c420:	6879      	ldr	r1, [r7, #4]
 800c422:	4613      	mov	r3, r2
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	440b      	add	r3, r1
 800c42c:	3326      	adds	r3, #38	@ 0x26
 800c42e:	2200      	movs	r2, #0
 800c430:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	7bfa      	ldrb	r2, [r7, #15]
 800c43c:	4610      	mov	r0, r2
 800c43e:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c440:	7bfb      	ldrb	r3, [r7, #15]
 800c442:	3301      	adds	r3, #1
 800c444:	73fb      	strb	r3, [r7, #15]
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d0a4      	beq.n	800c396 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	20001618 	.word	0x20001618
 800c45c:	2000161c 	.word	0x2000161c
 800c460:	20001620 	.word	0x20001620

0800c464 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c464:	b590      	push	{r4, r7, lr}
 800c466:	b087      	sub	sp, #28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800c46e:	2300      	movs	r3, #0
 800c470:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c472:	2300      	movs	r3, #0
 800c474:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c476:	2300      	movs	r3, #0
 800c478:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c482:	2300      	movs	r3, #0
 800c484:	757b      	strb	r3, [r7, #21]
 800c486:	e015      	b.n	800c4b4 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	889b      	ldrh	r3, [r3, #4]
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	7d7b      	ldrb	r3, [r7, #21]
 800c490:	496d      	ldr	r1, [pc, #436]	@ (800c648 <USBD_CDC_Setup+0x1e4>)
 800c492:	5ccb      	ldrb	r3, [r1, r3]
 800c494:	429a      	cmp	r2, r3
 800c496:	d007      	beq.n	800c4a8 <USBD_CDC_Setup+0x44>
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	889b      	ldrh	r3, [r3, #4]
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	7d7b      	ldrb	r3, [r7, #21]
 800c4a0:	496a      	ldr	r1, [pc, #424]	@ (800c64c <USBD_CDC_Setup+0x1e8>)
 800c4a2:	5ccb      	ldrb	r3, [r1, r3]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d102      	bne.n	800c4ae <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 800c4a8:	7d7b      	ldrb	r3, [r7, #21]
 800c4aa:	75bb      	strb	r3, [r7, #22]
      break;
 800c4ac:	e005      	b.n	800c4ba <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c4ae:	7d7b      	ldrb	r3, [r7, #21]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	757b      	strb	r3, [r7, #21]
 800c4b4:	7d7b      	ldrb	r3, [r7, #21]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d0e6      	beq.n	800c488 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800c4ba:	7dbb      	ldrb	r3, [r7, #22]
 800c4bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c4c0:	fb02 f303 	mul.w	r3, r2, r3
 800c4c4:	4a62      	ldr	r2, [pc, #392]	@ (800c650 <USBD_CDC_Setup+0x1ec>)
 800c4c6:	4413      	add	r3, r2
 800c4c8:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d04a      	beq.n	800c56c <USBD_CDC_Setup+0x108>
 800c4d6:	2b20      	cmp	r3, #32
 800c4d8:	f040 80aa 	bne.w	800c630 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	88db      	ldrh	r3, [r3, #6]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d038      	beq.n	800c556 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	b25b      	sxtb	r3, r3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	da1d      	bge.n	800c52a <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c4f4:	689c      	ldr	r4, [r3, #8]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	7859      	ldrb	r1, [r3, #1]
 800c4fa:	7dbb      	ldrb	r3, [r7, #22]
 800c4fc:	025b      	lsls	r3, r3, #9
 800c4fe:	693a      	ldr	r2, [r7, #16]
 800c500:	441a      	add	r2, r3
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	88db      	ldrh	r3, [r3, #6]
 800c506:	7db8      	ldrb	r0, [r7, #22]
 800c508:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	88db      	ldrh	r3, [r3, #6]
 800c50e:	2b07      	cmp	r3, #7
 800c510:	bf28      	it	cs
 800c512:	2307      	movcs	r3, #7
 800c514:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800c516:	7dbb      	ldrb	r3, [r7, #22]
 800c518:	025b      	lsls	r3, r3, #9
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	4413      	add	r3, r2
 800c51e:	89fa      	ldrh	r2, [r7, #14]
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f002 f9f3 	bl	800e90e <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800c528:	e089      	b.n	800c63e <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	785a      	ldrb	r2, [r3, #1]
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	88db      	ldrh	r3, [r3, #6]
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800c540:	7dbb      	ldrb	r3, [r7, #22]
 800c542:	025b      	lsls	r3, r3, #9
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	18d1      	adds	r1, r2, r3
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	88db      	ldrh	r3, [r3, #6]
 800c54c:	461a      	mov	r2, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f002 fa09 	bl	800e966 <USBD_CtlPrepareRx>
    break;
 800c554:	e073      	b.n	800c63e <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c55c:	689c      	ldr	r4, [r3, #8]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	7859      	ldrb	r1, [r3, #1]
 800c562:	7db8      	ldrb	r0, [r7, #22]
 800c564:	2300      	movs	r3, #0
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	47a0      	blx	r4
    break;
 800c56a:	e068      	b.n	800c63e <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	785b      	ldrb	r3, [r3, #1]
 800c570:	2b0b      	cmp	r3, #11
 800c572:	d852      	bhi.n	800c61a <USBD_CDC_Setup+0x1b6>
 800c574:	a201      	add	r2, pc, #4	@ (adr r2, 800c57c <USBD_CDC_Setup+0x118>)
 800c576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57a:	bf00      	nop
 800c57c:	0800c5ad 	.word	0x0800c5ad
 800c580:	0800c629 	.word	0x0800c629
 800c584:	0800c61b 	.word	0x0800c61b
 800c588:	0800c61b 	.word	0x0800c61b
 800c58c:	0800c61b 	.word	0x0800c61b
 800c590:	0800c61b 	.word	0x0800c61b
 800c594:	0800c61b 	.word	0x0800c61b
 800c598:	0800c61b 	.word	0x0800c61b
 800c59c:	0800c61b 	.word	0x0800c61b
 800c5a0:	0800c61b 	.word	0x0800c61b
 800c5a4:	0800c5d7 	.word	0x0800c5d7
 800c5a8:	0800c601 	.word	0x0800c601
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	d107      	bne.n	800c5c8 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c5b8:	f107 030a 	add.w	r3, r7, #10
 800c5bc:	2202      	movs	r2, #2
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f002 f9a4 	bl	800e90e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c5c6:	e032      	b.n	800c62e <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f002 f92e 	bl	800e82c <USBD_CtlError>
        ret = USBD_FAIL;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c5d4:	e02b      	b.n	800c62e <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d107      	bne.n	800c5f2 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c5e2:	f107 030d 	add.w	r3, r7, #13
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f002 f98f 	bl	800e90e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c5f0:	e01d      	b.n	800c62e <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f002 f919 	bl	800e82c <USBD_CtlError>
        ret = USBD_FAIL;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	75fb      	strb	r3, [r7, #23]
      break;
 800c5fe:	e016      	b.n	800c62e <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b03      	cmp	r3, #3
 800c60a:	d00f      	beq.n	800c62c <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f002 f90c 	bl	800e82c <USBD_CtlError>
        ret = USBD_FAIL;
 800c614:	2303      	movs	r3, #3
 800c616:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c618:	e008      	b.n	800c62c <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f002 f905 	bl	800e82c <USBD_CtlError>
      ret = USBD_FAIL;
 800c622:	2303      	movs	r3, #3
 800c624:	75fb      	strb	r3, [r7, #23]
      break;
 800c626:	e002      	b.n	800c62e <USBD_CDC_Setup+0x1ca>
      break;
 800c628:	bf00      	nop
 800c62a:	e008      	b.n	800c63e <USBD_CDC_Setup+0x1da>
      break;
 800c62c:	bf00      	nop
    }
    break;
 800c62e:	e006      	b.n	800c63e <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f002 f8fa 	bl	800e82c <USBD_CtlError>
    ret = USBD_FAIL;
 800c638:	2303      	movs	r3, #3
 800c63a:	75fb      	strb	r3, [r7, #23]
    break;
 800c63c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c640:	4618      	mov	r0, r3
 800c642:	371c      	adds	r7, #28
 800c644:	46bd      	mov	sp, r7
 800c646:	bd90      	pop	{r4, r7, pc}
 800c648:	20001624 	.word	0x20001624
 800c64c:	20001628 	.word	0x20001628
 800c650:	20001630 	.word	0x20001630

0800c654 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c654:	b590      	push	{r4, r7, lr}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800c660:	2300      	movs	r3, #0
 800c662:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c66a:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c670:	2300      	movs	r3, #0
 800c672:	75bb      	strb	r3, [r7, #22]
 800c674:	e00d      	b.n	800c692 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800c676:	78fa      	ldrb	r2, [r7, #3]
 800c678:	7dbb      	ldrb	r3, [r7, #22]
 800c67a:	4934      	ldr	r1, [pc, #208]	@ (800c74c <USBD_CDC_DataIn+0xf8>)
 800c67c:	5ccb      	ldrb	r3, [r1, r3]
 800c67e:	f003 030f 	and.w	r3, r3, #15
 800c682:	429a      	cmp	r2, r3
 800c684:	d102      	bne.n	800c68c <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800c686:	7dbb      	ldrb	r3, [r7, #22]
 800c688:	75fb      	strb	r3, [r7, #23]
      break;
 800c68a:	e005      	b.n	800c698 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c68c:	7dbb      	ldrb	r3, [r7, #22]
 800c68e:	3301      	adds	r3, #1
 800c690:	75bb      	strb	r3, [r7, #22]
 800c692:	7dbb      	ldrb	r3, [r7, #22]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0ee      	beq.n	800c676 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800c698:	7dfb      	ldrb	r3, [r7, #23]
 800c69a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c69e:	fb02 f303 	mul.w	r3, r2, r3
 800c6a2:	4a2b      	ldr	r2, [pc, #172]	@ (800c750 <USBD_CDC_DataIn+0xfc>)
 800c6a4:	4413      	add	r3, r2
 800c6a6:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c6a8:	78fa      	ldrb	r2, [r7, #3]
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4413      	add	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	440b      	add	r3, r1
 800c6b6:	3318      	adds	r3, #24
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d029      	beq.n	800c712 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c6be:	78fa      	ldrb	r2, [r7, #3]
 800c6c0:	6879      	ldr	r1, [r7, #4]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	440b      	add	r3, r1
 800c6cc:	3318      	adds	r3, #24
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	78f9      	ldrb	r1, [r7, #3]
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	440b      	add	r3, r1
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4403      	add	r3, r0
 800c6de:	331c      	adds	r3, #28
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	fbb2 f1f3 	udiv	r1, r2, r3
 800c6e6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ea:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d110      	bne.n	800c712 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c6f0:	78fa      	ldrb	r2, [r7, #3]
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	4413      	add	r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	440b      	add	r3, r1
 800c6fe:	3318      	adds	r3, #24
 800c700:	2200      	movs	r2, #0
 800c702:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c704:	78f9      	ldrb	r1, [r7, #3]
 800c706:	2300      	movs	r3, #0
 800c708:	2200      	movs	r2, #0
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f002 fbdf 	bl	800eece <USBD_LL_Transmit>
 800c710:	e016      	b.n	800c740 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	2200      	movs	r2, #0
 800c716:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00c      	beq.n	800c740 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c72c:	691c      	ldr	r4, [r3, #16]
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800c73a:	78fb      	ldrb	r3, [r7, #3]
 800c73c:	7df8      	ldrb	r0, [r7, #23]
 800c73e:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	371c      	adds	r7, #28
 800c746:	46bd      	mov	sp, r7
 800c748:	bd90      	pop	{r4, r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20001618 	.word	0x20001618
 800c750:	20001630 	.word	0x20001630

0800c754 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800c760:	2300      	movs	r3, #0
 800c762:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c768:	2300      	movs	r3, #0
 800c76a:	73bb      	strb	r3, [r7, #14]
 800c76c:	e00b      	b.n	800c786 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	4a17      	ldr	r2, [pc, #92]	@ (800c7d0 <USBD_CDC_DataOut+0x7c>)
 800c772:	5cd3      	ldrb	r3, [r2, r3]
 800c774:	78fa      	ldrb	r2, [r7, #3]
 800c776:	429a      	cmp	r2, r3
 800c778:	d102      	bne.n	800c780 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800c77a:	7bbb      	ldrb	r3, [r7, #14]
 800c77c:	73fb      	strb	r3, [r7, #15]
      break;
 800c77e:	e005      	b.n	800c78c <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c780:	7bbb      	ldrb	r3, [r7, #14]
 800c782:	3301      	adds	r3, #1
 800c784:	73bb      	strb	r3, [r7, #14]
 800c786:	7bbb      	ldrb	r3, [r7, #14]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0f0      	beq.n	800c76e <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
 800c78e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c792:	fb02 f303 	mul.w	r3, r2, r3
 800c796:	4a0f      	ldr	r2, [pc, #60]	@ (800c7d4 <USBD_CDC_DataOut+0x80>)
 800c798:	4413      	add	r3, r2
 800c79a:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c79c:	78fb      	ldrb	r3, [r7, #3]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f002 fbd6 	bl	800ef52 <USBD_LL_GetRxDataSize>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	68ba      	ldr	r2, [r7, #8]
 800c7b8:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c7c2:	7bf8      	ldrb	r0, [r7, #15]
 800c7c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	2000161c 	.word	0x2000161c
 800c7d4:	20001630 	.word	0x20001630

0800c7d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c7d8:	b590      	push	{r4, r7, lr}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73fb      	strb	r3, [r7, #15]
 800c7e8:	e02d      	b.n	800c846 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c7f0:	fb02 f303 	mul.w	r3, r2, r3
 800c7f4:	4a18      	ldr	r2, [pc, #96]	@ (800c858 <USBD_CDC_EP0_RxReady+0x80>)
 800c7f6:	4413      	add	r3, r2
 800c7f8:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d101      	bne.n	800c804 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 800c800:	2303      	movs	r3, #3
 800c802:	e024      	b.n	800c84e <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d018      	beq.n	800c840 <USBD_CDC_EP0_RxReady+0x68>
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c814:	2bff      	cmp	r3, #255	@ 0xff
 800c816:	d013      	beq.n	800c840 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c81e:	689c      	ldr	r4, [r3, #8]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800c826:	7bfb      	ldrb	r3, [r7, #15]
 800c828:	025b      	lsls	r3, r3, #9
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	441a      	add	r2, r3
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c834:	7bf8      	ldrb	r0, [r7, #15]
 800c836:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	22ff      	movs	r2, #255	@ 0xff
 800c83c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800c840:	7bfb      	ldrb	r3, [r7, #15]
 800c842:	3301      	adds	r3, #1
 800c844:	73fb      	strb	r3, [r7, #15]
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0ce      	beq.n	800c7ea <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3714      	adds	r7, #20
 800c852:	46bd      	mov	sp, r7
 800c854:	bd90      	pop	{r4, r7, pc}
 800c856:	bf00      	nop
 800c858:	20001630 	.word	0x20001630

0800c85c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	224b      	movs	r2, #75	@ 0x4b
 800c868:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c86a:	4b03      	ldr	r3, [pc, #12]	@ (800c878 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	20000148 	.word	0x20000148

0800c87c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	224b      	movs	r2, #75	@ 0x4b
 800c888:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c88a:	4b03      	ldr	r3, [pc, #12]	@ (800c898 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	200000fc 	.word	0x200000fc

0800c89c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	224b      	movs	r2, #75	@ 0x4b
 800c8a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c8aa:	4b03      	ldr	r3, [pc, #12]	@ (800c8b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	20000148 	.word	0x20000148

0800c8bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	220a      	movs	r2, #10
 800c8c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c8ca:	4b03      	ldr	r3, [pc, #12]	@ (800c8d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr
 800c8d8:	200000b4 	.word	0x200000b4

0800c8dc <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e004      	b.n	800c8fa <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	370c      	adds	r7, #12
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
	...

0800c908 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c908:	b480      	push	{r7}
 800c90a:	b087      	sub	sp, #28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	607a      	str	r2, [r7, #4]
 800c912:	603b      	str	r3, [r7, #0]
 800c914:	4603      	mov	r3, r0
 800c916:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800c918:	2300      	movs	r3, #0
 800c91a:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
 800c91e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c922:	fb02 f303 	mul.w	r3, r2, r3
 800c926:	4a09      	ldr	r2, [pc, #36]	@ (800c94c <USBD_CDC_SetTxBuffer+0x44>)
 800c928:	4413      	add	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	371c      	adds	r7, #28
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20001630 	.word	0x20001630

0800c950 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	4603      	mov	r3, r0
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800c962:	7bfb      	ldrb	r3, [r7, #15]
 800c964:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c968:	fb02 f303 	mul.w	r3, r2, r3
 800c96c:	4a06      	ldr	r2, [pc, #24]	@ (800c988 <USBD_CDC_SetRxBuffer+0x38>)
 800c96e:	4413      	add	r3, r2
 800c970:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	371c      	adds	r7, #28
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	20001630 	.word	0x20001630

0800c98c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	6039      	str	r1, [r7, #0]
 800c996:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c99c:	2301      	movs	r3, #1
 800c99e:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c9a6:	fb02 f303 	mul.w	r3, r2, r3
 800c9aa:	4a17      	ldr	r2, [pc, #92]	@ (800ca08 <USBD_CDC_TransmitPacket+0x7c>)
 800c9ac:	4413      	add	r3, r2
 800c9ae:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d121      	bne.n	800c9fe <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800c9c2:	79fb      	ldrb	r3, [r7, #7]
 800c9c4:	4a11      	ldr	r2, [pc, #68]	@ (800ca0c <USBD_CDC_TransmitPacket+0x80>)
 800c9c6:	5cd3      	ldrb	r3, [r2, r3]
 800c9c8:	f003 020f 	and.w	r2, r3, #15
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c9d2:	6838      	ldr	r0, [r7, #0]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4403      	add	r3, r0
 800c9de:	3318      	adds	r3, #24
 800c9e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800c9e2:	79fb      	ldrb	r3, [r7, #7]
 800c9e4:	4a09      	ldr	r2, [pc, #36]	@ (800ca0c <USBD_CDC_TransmitPacket+0x80>)
 800c9e6:	5cd1      	ldrb	r1, [r2, r3]
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c9f4:	6838      	ldr	r0, [r7, #0]
 800c9f6:	f002 fa6a 	bl	800eece <USBD_LL_Transmit>

    ret = USBD_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20001630 	.word	0x20001630
 800ca0c:	20001618 	.word	0x20001618

0800ca10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	6039      	str	r1, [r7, #0]
 800ca1a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ca26:	fb02 f303 	mul.w	r3, r2, r3
 800ca2a:	4a11      	ldr	r2, [pc, #68]	@ (800ca70 <USBD_CDC_ReceivePacket+0x60>)
 800ca2c:	4413      	add	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	7c1b      	ldrb	r3, [r3, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10b      	bne.n	800ca50 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	4a0e      	ldr	r2, [pc, #56]	@ (800ca74 <USBD_CDC_ReceivePacket+0x64>)
 800ca3c:	5cd1      	ldrb	r1, [r2, r3]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ca44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca48:	6838      	ldr	r0, [r7, #0]
 800ca4a:	f002 fa61 	bl	800ef10 <USBD_LL_PrepareReceive>
 800ca4e:	e009      	b.n	800ca64 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800ca50:	79fb      	ldrb	r3, [r7, #7]
 800ca52:	4a08      	ldr	r2, [pc, #32]	@ (800ca74 <USBD_CDC_ReceivePacket+0x64>)
 800ca54:	5cd1      	ldrb	r1, [r2, r3]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ca5c:	2340      	movs	r3, #64	@ 0x40
 800ca5e:	6838      	ldr	r0, [r7, #0]
 800ca60:	f002 fa56 	bl	800ef10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	20001630 	.word	0x20001630
 800ca74:	2000161c 	.word	0x2000161c

0800ca78 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	4608      	mov	r0, r1
 800ca82:	4611      	mov	r1, r2
 800ca84:	461a      	mov	r2, r3
 800ca86:	4603      	mov	r3, r0
 800ca88:	70fb      	strb	r3, [r7, #3]
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	70bb      	strb	r3, [r7, #2]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3309      	adds	r3, #9
 800ca96:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73fb      	strb	r3, [r7, #15]
 800ca9c:	e05b      	b.n	800cb56 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3302      	adds	r3, #2
 800caa2:	78fa      	ldrb	r2, [r7, #3]
 800caa4:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3310      	adds	r3, #16
 800caaa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800caae:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	330a      	adds	r3, #10
 800cab4:	78fa      	ldrb	r2, [r7, #3]
 800cab6:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	331a      	adds	r3, #26
 800cabc:	78ba      	ldrb	r2, [r7, #2]
 800cabe:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3322      	adds	r3, #34	@ 0x22
 800cac4:	78fa      	ldrb	r2, [r7, #3]
 800cac6:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	3323      	adds	r3, #35	@ 0x23
 800cacc:	78ba      	ldrb	r2, [r7, #2]
 800cace:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	3326      	adds	r3, #38	@ 0x26
 800cad4:	7e3a      	ldrb	r2, [r7, #24]
 800cad6:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	332d      	adds	r3, #45	@ 0x2d
 800cadc:	78ba      	ldrb	r2, [r7, #2]
 800cade:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	3336      	adds	r3, #54	@ 0x36
 800cae4:	7f3a      	ldrb	r2, [r7, #28]
 800cae6:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	333d      	adds	r3, #61	@ 0x3d
 800caec:	787a      	ldrb	r2, [r7, #1]
 800caee:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	3342      	adds	r3, #66	@ 0x42
 800caf4:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	491c      	ldr	r1, [pc, #112]	@ (800cb6c <USBD_Update_CDC_ACM_DESC+0xf4>)
 800cafa:	787a      	ldrb	r2, [r7, #1]
 800cafc:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	491b      	ldr	r1, [pc, #108]	@ (800cb70 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800cb02:	7f3a      	ldrb	r2, [r7, #28]
 800cb04:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
 800cb08:	491a      	ldr	r1, [pc, #104]	@ (800cb74 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800cb0a:	7e3a      	ldrb	r2, [r7, #24]
 800cb0c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
 800cb10:	4919      	ldr	r1, [pc, #100]	@ (800cb78 <USBD_Update_CDC_ACM_DESC+0x100>)
 800cb12:	78fa      	ldrb	r2, [r7, #3]
 800cb14:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800cb16:	7bfb      	ldrb	r3, [r7, #15]
 800cb18:	4918      	ldr	r1, [pc, #96]	@ (800cb7c <USBD_Update_CDC_ACM_DESC+0x104>)
 800cb1a:	78ba      	ldrb	r2, [r7, #2]
 800cb1c:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800cb1e:	7bfb      	ldrb	r3, [r7, #15]
 800cb20:	4917      	ldr	r1, [pc, #92]	@ (800cb80 <USBD_Update_CDC_ACM_DESC+0x108>)
 800cb22:	f897 2020 	ldrb.w	r2, [r7, #32]
 800cb26:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800cb28:	787b      	ldrb	r3, [r7, #1]
 800cb2a:	3302      	adds	r3, #2
 800cb2c:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800cb2e:	787b      	ldrb	r3, [r7, #1]
 800cb30:	3301      	adds	r3, #1
 800cb32:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800cb34:	7f3b      	ldrb	r3, [r7, #28]
 800cb36:	3301      	adds	r3, #1
 800cb38:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800cb3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800cb44:	78fb      	ldrb	r3, [r7, #3]
 800cb46:	3302      	adds	r3, #2
 800cb48:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800cb4a:	78fb      	ldrb	r3, [r7, #3]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	3301      	adds	r3, #1
 800cb54:	73fb      	strb	r3, [r7, #15]
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d0a0      	beq.n	800ca9e <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800cb5c:	bf00      	nop
 800cb5e:	bf00      	nop
 800cb60:	3714      	adds	r7, #20
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	20001618 	.word	0x20001618
 800cb70:	2000161c 	.word	0x2000161c
 800cb74:	20001620 	.word	0x20001620
 800cb78:	20001624 	.word	0x20001624
 800cb7c:	20001628 	.word	0x20001628
 800cb80:	2000162c 	.word	0x2000162c

0800cb84 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800cb90:	4b08      	ldr	r3, [pc, #32]	@ (800cbb4 <USBD_COMPOSITE_Init+0x30>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	78fa      	ldrb	r2, [r7, #3]
 800cb96:	4611      	mov	r1, r2
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800cb9c:	4b06      	ldr	r3, [pc, #24]	@ (800cbb8 <USBD_COMPOSITE_Init+0x34>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	78fa      	ldrb	r2, [r7, #3]
 800cba2:	4611      	mov	r1, r2
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	200000c0 	.word	0x200000c0
 800cbb8:	200001e0 	.word	0x200001e0

0800cbbc <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800cbc8:	4b08      	ldr	r3, [pc, #32]	@ (800cbec <USBD_COMPOSITE_DeInit+0x30>)
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	78fa      	ldrb	r2, [r7, #3]
 800cbce:	4611      	mov	r1, r2
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800cbd4:	4b06      	ldr	r3, [pc, #24]	@ (800cbf0 <USBD_COMPOSITE_DeInit+0x34>)
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	78fa      	ldrb	r2, [r7, #3]
 800cbda:	4611      	mov	r1, r2
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200000c0 	.word	0x200000c0
 800cbf0:	200001e0 	.word	0x200001e0

0800cbf4 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]
 800cc02:	e019      	b.n	800cc38 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	889b      	ldrh	r3, [r3, #4]
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	7bfb      	ldrb	r3, [r7, #15]
 800cc0c:	4915      	ldr	r1, [pc, #84]	@ (800cc64 <USBD_COMPOSITE_Setup+0x70>)
 800cc0e:	5ccb      	ldrb	r3, [r1, r3]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d007      	beq.n	800cc24 <USBD_COMPOSITE_Setup+0x30>
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	889b      	ldrh	r3, [r3, #4]
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
 800cc1c:	4912      	ldr	r1, [pc, #72]	@ (800cc68 <USBD_COMPOSITE_Setup+0x74>)
 800cc1e:	5ccb      	ldrb	r3, [r1, r3]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d106      	bne.n	800cc32 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800cc24:	4b11      	ldr	r3, [pc, #68]	@ (800cc6c <USBD_COMPOSITE_Setup+0x78>)
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	6839      	ldr	r1, [r7, #0]
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	4798      	blx	r3
 800cc2e:	4603      	mov	r3, r0
 800cc30:	e014      	b.n	800cc5c <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	3301      	adds	r3, #1
 800cc36:	73fb      	strb	r3, [r7, #15]
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d0e2      	beq.n	800cc04 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	889b      	ldrh	r3, [r3, #4]
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	4b0a      	ldr	r3, [pc, #40]	@ (800cc70 <USBD_COMPOSITE_Setup+0x7c>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d106      	bne.n	800cc5a <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800cc4c:	4b09      	ldr	r3, [pc, #36]	@ (800cc74 <USBD_COMPOSITE_Setup+0x80>)
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	4798      	blx	r3
 800cc56:	4603      	mov	r3, r0
 800cc58:	e000      	b.n	800cc5c <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800cc5a:	2303      	movs	r3, #3
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	20001624 	.word	0x20001624
 800cc68:	20001628 	.word	0x20001628
 800cc6c:	200000c0 	.word	0x200000c0
 800cc70:	20001964 	.word	0x20001964
 800cc74:	200001e0 	.word	0x200001e0

0800cc78 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	460b      	mov	r3, r1
 800cc82:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cc84:	2300      	movs	r3, #0
 800cc86:	73fb      	strb	r3, [r7, #15]
 800cc88:	e01a      	b.n	800ccc0 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800cc8a:	78fa      	ldrb	r2, [r7, #3]
 800cc8c:	7bfb      	ldrb	r3, [r7, #15]
 800cc8e:	4918      	ldr	r1, [pc, #96]	@ (800ccf0 <USBD_COMPOSITE_DataIn+0x78>)
 800cc90:	5ccb      	ldrb	r3, [r1, r3]
 800cc92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d007      	beq.n	800ccaa <USBD_COMPOSITE_DataIn+0x32>
 800cc9a:	78fa      	ldrb	r2, [r7, #3]
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	4915      	ldr	r1, [pc, #84]	@ (800ccf4 <USBD_COMPOSITE_DataIn+0x7c>)
 800cca0:	5ccb      	ldrb	r3, [r1, r3]
 800cca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d107      	bne.n	800ccba <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800ccaa:	4b13      	ldr	r3, [pc, #76]	@ (800ccf8 <USBD_COMPOSITE_DataIn+0x80>)
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	78fa      	ldrb	r2, [r7, #3]
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	4798      	blx	r3
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	e015      	b.n	800cce6 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	73fb      	strb	r3, [r7, #15]
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d0e1      	beq.n	800cc8a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800ccc6:	78fa      	ldrb	r2, [r7, #3]
 800ccc8:	4b0c      	ldr	r3, [pc, #48]	@ (800ccfc <USBD_COMPOSITE_DataIn+0x84>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d107      	bne.n	800cce4 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800ccd4:	4b0a      	ldr	r3, [pc, #40]	@ (800cd00 <USBD_COMPOSITE_DataIn+0x88>)
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	78fa      	ldrb	r2, [r7, #3]
 800ccda:	4611      	mov	r1, r2
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	4798      	blx	r3
 800cce0:	4603      	mov	r3, r0
 800cce2:	e000      	b.n	800cce6 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800cce4:	2303      	movs	r3, #3
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20001618 	.word	0x20001618
 800ccf4:	20001620 	.word	0x20001620
 800ccf8:	200000c0 	.word	0x200000c0
 800ccfc:	200001de 	.word	0x200001de
 800cd00:	200001e0 	.word	0x200001e0

0800cd04 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800cd0c:	4b06      	ldr	r3, [pc, #24]	@ (800cd28 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800cd14:	4b05      	ldr	r3, [pc, #20]	@ (800cd2c <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	200000c0 	.word	0x200000c0
 800cd2c:	200001e0 	.word	0x200001e0

0800cd30 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800cd38:	2300      	movs	r3, #0
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800cd46:	b480      	push	{r7}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd76:	b480      	push	{r7}
 800cd78:	b083      	sub	sp, #12
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	460b      	mov	r3, r1
 800cd80:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73fb      	strb	r3, [r7, #15]
 800cda0:	e010      	b.n	800cdc4 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
 800cda4:	4a12      	ldr	r2, [pc, #72]	@ (800cdf0 <USBD_COMPOSITE_DataOut+0x60>)
 800cda6:	5cd3      	ldrb	r3, [r2, r3]
 800cda8:	78fa      	ldrb	r2, [r7, #3]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d107      	bne.n	800cdbe <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800cdae:	4b11      	ldr	r3, [pc, #68]	@ (800cdf4 <USBD_COMPOSITE_DataOut+0x64>)
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	78fa      	ldrb	r2, [r7, #3]
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	4798      	blx	r3
 800cdba:	4603      	mov	r3, r0
 800cdbc:	e013      	b.n	800cde6 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	73fb      	strb	r3, [r7, #15]
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d0eb      	beq.n	800cda2 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800cdca:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf8 <USBD_COMPOSITE_DataOut+0x68>)
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	78fa      	ldrb	r2, [r7, #3]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d107      	bne.n	800cde4 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800cdd4:	4b09      	ldr	r3, [pc, #36]	@ (800cdfc <USBD_COMPOSITE_DataOut+0x6c>)
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	4611      	mov	r1, r2
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
 800cde0:	4603      	mov	r3, r0
 800cde2:	e000      	b.n	800cde6 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800cde4:	2303      	movs	r3, #3
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	2000161c 	.word	0x2000161c
 800cdf4:	200000c0 	.word	0x200000c0
 800cdf8:	200001df 	.word	0x200001df
 800cdfc:	200001e0 	.word	0x200001e0

0800ce00 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	226b      	movs	r2, #107	@ 0x6b
 800ce0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800ce0e:	4b03      	ldr	r3, [pc, #12]	@ (800ce1c <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	200018b8 	.word	0x200018b8

0800ce20 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	226b      	movs	r2, #107	@ 0x6b
 800ce2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800ce2e:	4b03      	ldr	r3, [pc, #12]	@ (800ce3c <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	2000184c 	.word	0x2000184c

0800ce40 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	226b      	movs	r2, #107	@ 0x6b
 800ce4c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800ce4e:	4b03      	ldr	r3, [pc, #12]	@ (800ce5c <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	200018b8 	.word	0x200018b8

0800ce60 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	220a      	movs	r2, #10
 800ce6c:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800ce6e:	4b03      	ldr	r3, [pc, #12]	@ (800ce7c <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	200001d4 	.word	0x200001d4

0800ce80 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08a      	sub	sp, #40	@ 0x28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800ce8e:	4b20      	ldr	r3, [pc, #128]	@ (800cf10 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	7afa      	ldrb	r2, [r7, #11]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d836      	bhi.n	800cf06 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800ce98:	2300      	movs	r3, #0
 800ce9a:	617b      	str	r3, [r7, #20]
 800ce9c:	f107 0318 	add.w	r3, r7, #24
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	605a      	str	r2, [r3, #4]
 800cea6:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ceae:	e01a      	b.n	800cee6 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800ceb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ceb4:	4a17      	ldr	r2, [pc, #92]	@ (800cf14 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800ceb6:	5cd3      	ldrb	r3, [r2, r3]
 800ceb8:	7afa      	ldrb	r2, [r7, #11]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d10e      	bne.n	800cedc <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800cebe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cec2:	f107 0014 	add.w	r0, r7, #20
 800cec6:	4a14      	ldr	r2, [pc, #80]	@ (800cf18 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800cec8:	2110      	movs	r1, #16
 800ceca:	f005 fcab 	bl	8012824 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800cece:	f107 0314 	add.w	r3, r7, #20
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	4911      	ldr	r1, [pc, #68]	@ (800cf1c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800ced6:	4618      	mov	r0, r3
 800ced8:	f001 fcb9 	bl	800e84e <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cedc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cee0:	3301      	adds	r3, #1
 800cee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0e0      	beq.n	800ceb0 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800ceee:	4b0c      	ldr	r3, [pc, #48]	@ (800cf20 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	7afa      	ldrb	r2, [r7, #11]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d104      	bne.n	800cf02 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	4908      	ldr	r1, [pc, #32]	@ (800cf1c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800cefc:	4809      	ldr	r0, [pc, #36]	@ (800cf24 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800cefe:	f001 fca6 	bl	800e84e <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800cf02:	4b06      	ldr	r3, [pc, #24]	@ (800cf1c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800cf04:	e000      	b.n	800cf08 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800cf06:	2300      	movs	r3, #0
  }
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3728      	adds	r7, #40	@ 0x28
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	200001d0 	.word	0x200001d0
 800cf14:	2000162c 	.word	0x2000162c
 800cf18:	08014c38 	.word	0x08014c38
 800cf1c:	20001924 	.word	0x20001924
 800cf20:	20001965 	.word	0x20001965
 800cf24:	08014c48 	.word	0x08014c48

0800cf28 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800cf28:	b590      	push	{r4, r7, lr}
 800cf2a:	b089      	sub	sp, #36	@ 0x24
 800cf2c:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800cf36:	2381      	movs	r3, #129	@ 0x81
 800cf38:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800cf42:	4b74      	ldr	r3, [pc, #464]	@ (800d114 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800cf44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf46:	1d3a      	adds	r2, r7, #4
 800cf48:	4610      	mov	r0, r2
 800cf4a:	4798      	blx	r3
 800cf4c:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800cf4e:	4b72      	ldr	r3, [pc, #456]	@ (800d118 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	7ab8      	ldrb	r0, [r7, #10]
 800cf54:	7afa      	ldrb	r2, [r7, #11]
 800cf56:	7a79      	ldrb	r1, [r7, #9]
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f000 fb95 	bl	800d68c <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	3309      	adds	r3, #9
 800cf66:	88ba      	ldrh	r2, [r7, #4]
 800cf68:	3a09      	subs	r2, #9
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	486b      	ldr	r0, [pc, #428]	@ (800d11c <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800cf6e:	f005 fe58 	bl	8012c22 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800cf72:	4b68      	ldr	r3, [pc, #416]	@ (800d114 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800cf74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf76:	1d3a      	adds	r2, r7, #4
 800cf78:	4610      	mov	r0, r2
 800cf7a:	4798      	blx	r3
 800cf7c:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800cf7e:	4b66      	ldr	r3, [pc, #408]	@ (800d118 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	7ab8      	ldrb	r0, [r7, #10]
 800cf84:	7afa      	ldrb	r2, [r7, #11]
 800cf86:	7a79      	ldrb	r1, [r7, #9]
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	68f8      	ldr	r0, [r7, #12]
 800cf8e:	f000 fb7d 	bl	800d68c <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	3309      	adds	r3, #9
 800cf96:	88ba      	ldrh	r2, [r7, #4]
 800cf98:	3a09      	subs	r2, #9
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	4860      	ldr	r0, [pc, #384]	@ (800d120 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800cf9e:	f005 fe40 	bl	8012c22 <memcpy>

  in_ep_track += 1;
 800cfa2:	7afb      	ldrb	r3, [r7, #11]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800cfa8:	7abb      	ldrb	r3, [r7, #10]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800cfae:	7a7b      	ldrb	r3, [r7, #9]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800cfb4:	4b58      	ldr	r3, [pc, #352]	@ (800d118 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	4b56      	ldr	r3, [pc, #344]	@ (800d118 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800cfbe:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800cfc0:	4b58      	ldr	r3, [pc, #352]	@ (800d124 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800cfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc4:	1d3a      	adds	r2, r7, #4
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	4798      	blx	r3
 800cfca:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800cfcc:	7a7b      	ldrb	r3, [r7, #9]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	b2d8      	uxtb	r0, r3
 800cfd2:	7afb      	ldrb	r3, [r7, #11]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	4a4f      	ldr	r2, [pc, #316]	@ (800d118 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800cfda:	7812      	ldrb	r2, [r2, #0]
 800cfdc:	7afc      	ldrb	r4, [r7, #11]
 800cfde:	7a79      	ldrb	r1, [r7, #9]
 800cfe0:	9202      	str	r2, [sp, #8]
 800cfe2:	7aba      	ldrb	r2, [r7, #10]
 800cfe4:	9201      	str	r2, [sp, #4]
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	4623      	mov	r3, r4
 800cfea:	4602      	mov	r2, r0
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f7ff fd43 	bl	800ca78 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	3309      	adds	r3, #9
 800cff6:	88ba      	ldrh	r2, [r7, #4]
 800cff8:	3a09      	subs	r2, #9
 800cffa:	4619      	mov	r1, r3
 800cffc:	484a      	ldr	r0, [pc, #296]	@ (800d128 <USBD_COMPOSITE_Mount_Class+0x200>)
 800cffe:	f005 fe10 	bl	8012c22 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800d002:	4b48      	ldr	r3, [pc, #288]	@ (800d124 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800d004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d006:	1d3a      	adds	r2, r7, #4
 800d008:	4610      	mov	r0, r2
 800d00a:	4798      	blx	r3
 800d00c:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800d00e:	7a7b      	ldrb	r3, [r7, #9]
 800d010:	3301      	adds	r3, #1
 800d012:	b2d8      	uxtb	r0, r3
 800d014:	7afb      	ldrb	r3, [r7, #11]
 800d016:	3301      	adds	r3, #1
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	4a3f      	ldr	r2, [pc, #252]	@ (800d118 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800d01c:	7812      	ldrb	r2, [r2, #0]
 800d01e:	7afc      	ldrb	r4, [r7, #11]
 800d020:	7a79      	ldrb	r1, [r7, #9]
 800d022:	9202      	str	r2, [sp, #8]
 800d024:	7aba      	ldrb	r2, [r7, #10]
 800d026:	9201      	str	r2, [sp, #4]
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	4623      	mov	r3, r4
 800d02c:	4602      	mov	r2, r0
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f7ff fd22 	bl	800ca78 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3309      	adds	r3, #9
 800d038:	88ba      	ldrh	r2, [r7, #4]
 800d03a:	3a09      	subs	r2, #9
 800d03c:	4619      	mov	r1, r3
 800d03e:	483b      	ldr	r0, [pc, #236]	@ (800d12c <USBD_COMPOSITE_Mount_Class+0x204>)
 800d040:	f005 fdef 	bl	8012c22 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800d044:	7afb      	ldrb	r3, [r7, #11]
 800d046:	3302      	adds	r3, #2
 800d048:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800d04a:	7abb      	ldrb	r3, [r7, #10]
 800d04c:	3301      	adds	r3, #1
 800d04e:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800d050:	7a7b      	ldrb	r3, [r7, #9]
 800d052:	3302      	adds	r3, #2
 800d054:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800d056:	4b30      	ldr	r3, [pc, #192]	@ (800d118 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	3301      	adds	r3, #1
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	4b2e      	ldr	r3, [pc, #184]	@ (800d118 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800d060:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800d062:	236b      	movs	r3, #107	@ 0x6b
 800d064:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800d066:	4b32      	ldr	r3, [pc, #200]	@ (800d130 <USBD_COMPOSITE_Mount_Class+0x208>)
 800d068:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2209      	movs	r2, #9
 800d06e:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3301      	adds	r3, #1
 800d074:	2202      	movs	r2, #2
 800d076:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	3302      	adds	r3, #2
 800d07c:	88fa      	ldrh	r2, [r7, #6]
 800d07e:	b2d2      	uxtb	r2, r2
 800d080:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800d082:	88fb      	ldrh	r3, [r7, #6]
 800d084:	0a1b      	lsrs	r3, r3, #8
 800d086:	b29a      	uxth	r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	3303      	adds	r3, #3
 800d08c:	b2d2      	uxtb	r2, r2
 800d08e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3304      	adds	r3, #4
 800d094:	7a7a      	ldrb	r2, [r7, #9]
 800d096:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	3305      	adds	r3, #5
 800d09c:	2201      	movs	r2, #1
 800d09e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	3306      	adds	r3, #6
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3307      	adds	r3, #7
 800d0ac:	22c0      	movs	r2, #192	@ 0xc0
 800d0ae:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3308      	adds	r3, #8
 800d0b4:	2232      	movs	r2, #50	@ 0x32
 800d0b6:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800d0b8:	4b1e      	ldr	r3, [pc, #120]	@ (800d134 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800d0ba:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2209      	movs	r2, #9
 800d0c0:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	3302      	adds	r3, #2
 800d0ce:	88fa      	ldrh	r2, [r7, #6]
 800d0d0:	b2d2      	uxtb	r2, r2
 800d0d2:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800d0d4:	88fb      	ldrh	r3, [r7, #6]
 800d0d6:	0a1b      	lsrs	r3, r3, #8
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3303      	adds	r3, #3
 800d0de:	b2d2      	uxtb	r2, r2
 800d0e0:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	7a7a      	ldrb	r2, [r7, #9]
 800d0e8:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3305      	adds	r3, #5
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3306      	adds	r3, #6
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3307      	adds	r3, #7
 800d0fe:	22c0      	movs	r2, #192	@ 0xc0
 800d100:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3308      	adds	r3, #8
 800d106:	2232      	movs	r2, #50	@ 0x32
 800d108:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800d10a:	bf00      	nop
 800d10c:	3714      	adds	r7, #20
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd90      	pop	{r4, r7, pc}
 800d112:	bf00      	nop
 800d114:	200001e0 	.word	0x200001e0
 800d118:	200001d0 	.word	0x200001d0
 800d11c:	20001855 	.word	0x20001855
 800d120:	200018c1 	.word	0x200018c1
 800d124:	200000c0 	.word	0x200000c0
 800d128:	20001875 	.word	0x20001875
 800d12c:	200018e1 	.word	0x200018e1
 800d130:	200018b8 	.word	0x200018b8
 800d134:	2000184c 	.word	0x2000184c

0800d138 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800d144:	4b43      	ldr	r3, [pc, #268]	@ (800d254 <USBD_CUSTOM_HID_Init+0x11c>)
 800d146:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d105      	bne.n	800d15a <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800d156:	2302      	movs	r3, #2
 800d158:	e077      	b.n	800d24a <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	7c1b      	ldrb	r3, [r3, #16]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d11b      	bne.n	800d1a2 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800d16a:	4b3b      	ldr	r3, [pc, #236]	@ (800d258 <USBD_CUSTOM_HID_Init+0x120>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	f003 020f 	and.w	r2, r3, #15
 800d172:	6879      	ldr	r1, [r7, #4]
 800d174:	4613      	mov	r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	4413      	add	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	440b      	add	r3, r1
 800d17e:	3326      	adds	r3, #38	@ 0x26
 800d180:	2205      	movs	r2, #5
 800d182:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800d184:	4b35      	ldr	r3, [pc, #212]	@ (800d25c <USBD_CUSTOM_HID_Init+0x124>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	f003 020f 	and.w	r2, r3, #15
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	4613      	mov	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4413      	add	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	440b      	add	r3, r1
 800d198:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800d19c:	2205      	movs	r2, #5
 800d19e:	801a      	strh	r2, [r3, #0]
 800d1a0:	e01a      	b.n	800d1d8 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800d1a2:	4b2d      	ldr	r3, [pc, #180]	@ (800d258 <USBD_CUSTOM_HID_Init+0x120>)
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	f003 020f 	and.w	r2, r3, #15
 800d1aa:	6879      	ldr	r1, [r7, #4]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	4413      	add	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	440b      	add	r3, r1
 800d1b6:	3326      	adds	r3, #38	@ 0x26
 800d1b8:	2205      	movs	r2, #5
 800d1ba:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800d1bc:	4b27      	ldr	r3, [pc, #156]	@ (800d25c <USBD_CUSTOM_HID_Init+0x124>)
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	f003 020f 	and.w	r2, r3, #15
 800d1c4:	6879      	ldr	r1, [r7, #4]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	440b      	add	r3, r1
 800d1d0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800d1d4:	2205      	movs	r2, #5
 800d1d6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800d1d8:	4b1f      	ldr	r3, [pc, #124]	@ (800d258 <USBD_CUSTOM_HID_Init+0x120>)
 800d1da:	7819      	ldrb	r1, [r3, #0]
 800d1dc:	2302      	movs	r3, #2
 800d1de:	2203      	movs	r2, #3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f001 fda6 	bl	800ed32 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800d1e6:	4b1c      	ldr	r3, [pc, #112]	@ (800d258 <USBD_CUSTOM_HID_Init+0x120>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	f003 020f 	and.w	r2, r3, #15
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	440b      	add	r3, r1
 800d1fa:	3324      	adds	r3, #36	@ 0x24
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800d200:	4b16      	ldr	r3, [pc, #88]	@ (800d25c <USBD_CUSTOM_HID_Init+0x124>)
 800d202:	7819      	ldrb	r1, [r3, #0]
 800d204:	2302      	movs	r3, #2
 800d206:	2203      	movs	r2, #3
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f001 fd92 	bl	800ed32 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800d20e:	4b13      	ldr	r3, [pc, #76]	@ (800d25c <USBD_CUSTOM_HID_Init+0x124>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	f003 020f 	and.w	r2, r3, #15
 800d216:	6879      	ldr	r1, [r7, #4]
 800d218:	4613      	mov	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	440b      	add	r3, r1
 800d222:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d226:	2201      	movs	r2, #1
 800d228:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800d23a:	4b08      	ldr	r3, [pc, #32]	@ (800d25c <USBD_CUSTOM_HID_Init+0x124>)
 800d23c:	7819      	ldrb	r1, [r3, #0]
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	2302      	movs	r3, #2
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f001 fe64 	bl	800ef10 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	20001968 	.word	0x20001968
 800d258:	200001de 	.word	0x200001de
 800d25c:	200001df 	.word	0x200001df

0800d260 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800d26c:	4b2a      	ldr	r3, [pc, #168]	@ (800d318 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f001 fd83 	bl	800ed7e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800d278:	4b27      	ldr	r3, [pc, #156]	@ (800d318 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	f003 020f 	and.w	r2, r3, #15
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	4613      	mov	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	440b      	add	r3, r1
 800d28c:	3324      	adds	r3, #36	@ 0x24
 800d28e:	2200      	movs	r2, #0
 800d290:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800d292:	4b21      	ldr	r3, [pc, #132]	@ (800d318 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	f003 020f 	and.w	r2, r3, #15
 800d29a:	6879      	ldr	r1, [r7, #4]
 800d29c:	4613      	mov	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	440b      	add	r3, r1
 800d2a6:	3326      	adds	r3, #38	@ 0x26
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800d2ac:	4b1b      	ldr	r3, [pc, #108]	@ (800d31c <USBD_CUSTOM_HID_DeInit+0xbc>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f001 fd63 	bl	800ed7e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800d2b8:	4b18      	ldr	r3, [pc, #96]	@ (800d31c <USBD_CUSTOM_HID_DeInit+0xbc>)
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	f003 020f 	and.w	r2, r3, #15
 800d2c0:	6879      	ldr	r1, [r7, #4]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	440b      	add	r3, r1
 800d2cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800d2d4:	4b11      	ldr	r3, [pc, #68]	@ (800d31c <USBD_CUSTOM_HID_DeInit+0xbc>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	f003 020f 	and.w	r2, r3, #15
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	440b      	add	r3, r1
 800d2e8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d008      	beq.n	800d30c <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	200001de 	.word	0x200001de
 800d31c:	200001df 	.word	0x200001df

0800d320 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b088      	sub	sp, #32
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d330:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800d332:	2300      	movs	r3, #0
 800d334:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800d336:	2300      	movs	r3, #0
 800d338:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800d33a:	2300      	movs	r3, #0
 800d33c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800d33e:	2300      	movs	r3, #0
 800d340:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d101      	bne.n	800d34c <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800d348:	2303      	movs	r3, #3
 800d34a:	e0ed      	b.n	800d528 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d354:	2b00      	cmp	r3, #0
 800d356:	d052      	beq.n	800d3fe <USBD_CUSTOM_HID_Setup+0xde>
 800d358:	2b20      	cmp	r3, #32
 800d35a:	f040 80dd 	bne.w	800d518 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	785b      	ldrb	r3, [r3, #1]
 800d362:	3b02      	subs	r3, #2
 800d364:	2b09      	cmp	r3, #9
 800d366:	d842      	bhi.n	800d3ee <USBD_CUSTOM_HID_Setup+0xce>
 800d368:	a201      	add	r2, pc, #4	@ (adr r2, 800d370 <USBD_CUSTOM_HID_Setup+0x50>)
 800d36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36e:	bf00      	nop
 800d370:	0800d3c9 	.word	0x0800d3c9
 800d374:	0800d3a7 	.word	0x0800d3a7
 800d378:	0800d3ef 	.word	0x0800d3ef
 800d37c:	0800d3ef 	.word	0x0800d3ef
 800d380:	0800d3ef 	.word	0x0800d3ef
 800d384:	0800d3ef 	.word	0x0800d3ef
 800d388:	0800d3ef 	.word	0x0800d3ef
 800d38c:	0800d3d9 	.word	0x0800d3d9
 800d390:	0800d3b7 	.word	0x0800d3b7
 800d394:	0800d399 	.word	0x0800d399
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	885b      	ldrh	r3, [r3, #2]
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	461a      	mov	r2, r3
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	605a      	str	r2, [r3, #4]
      break;
 800d3a4:	e02a      	b.n	800d3fc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f001 faad 	bl	800e90e <USBD_CtlSendData>
      break;
 800d3b4:	e022      	b.n	800d3fc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	885b      	ldrh	r3, [r3, #2]
 800d3ba:	0a1b      	lsrs	r3, r3, #8
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	609a      	str	r2, [r3, #8]
      break;
 800d3c6:	e019      	b.n	800d3fc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	3308      	adds	r3, #8
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f001 fa9c 	bl	800e90e <USBD_CtlSendData>
      break;
 800d3d6:	e011      	b.n	800d3fc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800d3de:	6939      	ldr	r1, [r7, #16]
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	88db      	ldrh	r3, [r3, #6]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f001 fabd 	bl	800e966 <USBD_CtlPrepareRx>
      break;
 800d3ec:	e006      	b.n	800d3fc <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f001 fa1b 	bl	800e82c <USBD_CtlError>
      ret = USBD_FAIL;
 800d3f6:	2303      	movs	r3, #3
 800d3f8:	75fb      	strb	r3, [r7, #23]
      break;
 800d3fa:	bf00      	nop
    }
    break;
 800d3fc:	e093      	b.n	800d526 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	785b      	ldrb	r3, [r3, #1]
 800d402:	2b0b      	cmp	r3, #11
 800d404:	d87f      	bhi.n	800d506 <USBD_CUSTOM_HID_Setup+0x1e6>
 800d406:	a201      	add	r2, pc, #4	@ (adr r2, 800d40c <USBD_CUSTOM_HID_Setup+0xec>)
 800d408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40c:	0800d43d 	.word	0x0800d43d
 800d410:	0800d515 	.word	0x0800d515
 800d414:	0800d507 	.word	0x0800d507
 800d418:	0800d507 	.word	0x0800d507
 800d41c:	0800d507 	.word	0x0800d507
 800d420:	0800d507 	.word	0x0800d507
 800d424:	0800d467 	.word	0x0800d467
 800d428:	0800d507 	.word	0x0800d507
 800d42c:	0800d507 	.word	0x0800d507
 800d430:	0800d507 	.word	0x0800d507
 800d434:	0800d4b5 	.word	0x0800d4b5
 800d438:	0800d4df 	.word	0x0800d4df
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b03      	cmp	r3, #3
 800d446:	d107      	bne.n	800d458 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d448:	f107 030e 	add.w	r3, r7, #14
 800d44c:	2202      	movs	r2, #2
 800d44e:	4619      	mov	r1, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 fa5c 	bl	800e90e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d456:	e05e      	b.n	800d516 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f001 f9e6 	bl	800e82c <USBD_CtlError>
        ret = USBD_FAIL;
 800d460:	2303      	movs	r3, #3
 800d462:	75fb      	strb	r3, [r7, #23]
      break;
 800d464:	e057      	b.n	800d516 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	885b      	ldrh	r3, [r3, #2]
 800d46a:	0a1b      	lsrs	r3, r3, #8
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	2b22      	cmp	r3, #34	@ 0x22
 800d470:	d10b      	bne.n	800d48a <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	88db      	ldrh	r3, [r3, #6]
 800d476:	2b21      	cmp	r3, #33	@ 0x21
 800d478:	bf28      	it	cs
 800d47a:	2321      	movcs	r3, #33	@ 0x21
 800d47c:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	61bb      	str	r3, [r7, #24]
 800d488:	e00d      	b.n	800d4a6 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	885b      	ldrh	r3, [r3, #2]
 800d48e:	0a1b      	lsrs	r3, r3, #8
 800d490:	b29b      	uxth	r3, r3
 800d492:	2b21      	cmp	r3, #33	@ 0x21
 800d494:	d107      	bne.n	800d4a6 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800d496:	4b26      	ldr	r3, [pc, #152]	@ (800d530 <USBD_CUSTOM_HID_Setup+0x210>)
 800d498:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	88db      	ldrh	r3, [r3, #6]
 800d49e:	2b09      	cmp	r3, #9
 800d4a0:	bf28      	it	cs
 800d4a2:	2309      	movcs	r3, #9
 800d4a4:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4a6:	8bfb      	ldrh	r3, [r7, #30]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	69b9      	ldr	r1, [r7, #24]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f001 fa2e 	bl	800e90e <USBD_CtlSendData>
      break;
 800d4b2:	e030      	b.n	800d516 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	2b03      	cmp	r3, #3
 800d4be:	d107      	bne.n	800d4d0 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	330c      	adds	r3, #12
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 fa20 	bl	800e90e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d4ce:	e022      	b.n	800d516 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800d4d0:	6839      	ldr	r1, [r7, #0]
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f001 f9aa 	bl	800e82c <USBD_CtlError>
        ret = USBD_FAIL;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	75fb      	strb	r3, [r7, #23]
      break;
 800d4dc:	e01b      	b.n	800d516 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d106      	bne.n	800d4f8 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	885b      	ldrh	r3, [r3, #2]
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d4f6:	e00e      	b.n	800d516 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800d4f8:	6839      	ldr	r1, [r7, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f001 f996 	bl	800e82c <USBD_CtlError>
        ret = USBD_FAIL;
 800d500:	2303      	movs	r3, #3
 800d502:	75fb      	strb	r3, [r7, #23]
      break;
 800d504:	e007      	b.n	800d516 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f001 f98f 	bl	800e82c <USBD_CtlError>
      ret = USBD_FAIL;
 800d50e:	2303      	movs	r3, #3
 800d510:	75fb      	strb	r3, [r7, #23]
      break;
 800d512:	e000      	b.n	800d516 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800d514:	bf00      	nop
    }
    break;
 800d516:	e006      	b.n	800d526 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800d518:	6839      	ldr	r1, [r7, #0]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f001 f986 	bl	800e82c <USBD_CtlError>
    ret = USBD_FAIL;
 800d520:	2303      	movs	r3, #3
 800d522:	75fb      	strb	r3, [r7, #23]
    break;
 800d524:	bf00      	nop
  }
  return (uint8_t)ret;
 800d526:	7dfb      	ldrb	r3, [r7, #23]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3720      	adds	r7, #32
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	200002a0 	.word	0x200002a0

0800d534 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2229      	movs	r2, #41	@ 0x29
 800d540:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800d542:	4b03      	ldr	r3, [pc, #12]	@ (800d550 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800d544:	4618      	mov	r0, r3
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	2000021c 	.word	0x2000021c

0800d554 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2229      	movs	r2, #41	@ 0x29
 800d560:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800d562:	4b03      	ldr	r3, [pc, #12]	@ (800d570 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr
 800d570:	20000248 	.word	0x20000248

0800d574 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2229      	movs	r2, #41	@ 0x29
 800d580:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800d582:	4b03      	ldr	r3, [pc, #12]	@ (800d590 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr
 800d590:	20000274 	.word	0x20000274

0800d594 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d5ce:	2303      	movs	r3, #3
 800d5d0:	e00e      	b.n	800d5f0 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d5d8:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	7810      	ldrb	r0, [r2, #0]
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	7852      	ldrb	r2, [r2, #1]
 800d5ea:	4611      	mov	r1, r2
 800d5ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d606:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d60e:	2303      	movs	r3, #3
 800d610:	e011      	b.n	800d636 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d10c      	bne.n	800d634 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	7810      	ldrb	r0, [r2, #0]
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	7852      	ldrb	r2, [r2, #1]
 800d62a:	4611      	mov	r1, r2
 800d62c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	220a      	movs	r2, #10
 800d64c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800d64e:	4b03      	ldr	r3, [pc, #12]	@ (800d65c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800d650:	4618      	mov	r0, r3
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	200002ac 	.word	0x200002ac

0800d660 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d101      	bne.n	800d674 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d670:	2303      	movs	r3, #3
 800d672:	e004      	b.n	800d67e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
	...

0800d68c <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	4608      	mov	r0, r1
 800d696:	4611      	mov	r1, r2
 800d698:	461a      	mov	r2, r3
 800d69a:	4603      	mov	r3, r0
 800d69c:	70fb      	strb	r3, [r7, #3]
 800d69e:	460b      	mov	r3, r1
 800d6a0:	70bb      	strb	r3, [r7, #2]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	330b      	adds	r3, #11
 800d6aa:	78fa      	ldrb	r2, [r7, #3]
 800d6ac:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	3311      	adds	r3, #17
 800d6b2:	7c3a      	ldrb	r2, [r7, #16]
 800d6b4:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	331d      	adds	r3, #29
 800d6ba:	78ba      	ldrb	r2, [r7, #2]
 800d6bc:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3324      	adds	r3, #36	@ 0x24
 800d6c2:	787a      	ldrb	r2, [r7, #1]
 800d6c4:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800d6c6:	4a09      	ldr	r2, [pc, #36]	@ (800d6ec <USBD_Update_HID_Custom_DESC+0x60>)
 800d6c8:	78bb      	ldrb	r3, [r7, #2]
 800d6ca:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800d6cc:	4a08      	ldr	r2, [pc, #32]	@ (800d6f0 <USBD_Update_HID_Custom_DESC+0x64>)
 800d6ce:	787b      	ldrb	r3, [r7, #1]
 800d6d0:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800d6d2:	4a08      	ldr	r2, [pc, #32]	@ (800d6f4 <USBD_Update_HID_Custom_DESC+0x68>)
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800d6d8:	4a07      	ldr	r2, [pc, #28]	@ (800d6f8 <USBD_Update_HID_Custom_DESC+0x6c>)
 800d6da:	7c3b      	ldrb	r3, [r7, #16]
 800d6dc:	7013      	strb	r3, [r2, #0]
}
 800d6de:	bf00      	nop
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	200001de 	.word	0x200001de
 800d6f0:	200001df 	.word	0x200001df
 800d6f4:	20001964 	.word	0x20001964
 800d6f8:	20001965 	.word	0x20001965

0800d6fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b086      	sub	sp, #24
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	4613      	mov	r3, r2
 800d708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d710:	2303      	movs	r3, #3
 800d712:	e01b      	b.n	800d74c <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2201      	movs	r2, #1
 800d736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	79fa      	ldrb	r2, [r7, #7]
 800d73e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f001 fa7d 	bl	800ec40 <USBD_LL_Init>
 800d746:	4603      	mov	r3, r0
 800d748:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d75e:	2300      	movs	r3, #0
 800d760:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d768:	2303      	movs	r3, #3
 800d76a:	e02d      	b.n	800d7c8 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	7c1b      	ldrb	r3, [r3, #16]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d112      	bne.n	800d7a2 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d784:	2b00      	cmp	r3, #0
 800d786:	d01e      	beq.n	800d7c6 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d790:	f107 020e 	add.w	r2, r7, #14
 800d794:	4610      	mov	r0, r2
 800d796:	4798      	blx	r3
 800d798:	4602      	mov	r2, r0
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800d7a0:	e011      	b.n	800d7c6 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00b      	beq.n	800d7c6 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7b6:	f107 020e 	add.w	r2, r7, #14
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4798      	blx	r3
 800d7be:	4602      	mov	r2, r0
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f001 fa8f 	bl	800ecfc <USBD_LL_Start>
 800d7de:	4603      	mov	r3, r0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	460b      	mov	r3, r1
 800d808:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d80a:	2303      	movs	r3, #3
 800d80c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d814:	2b00      	cmp	r3, #0
 800d816:	d009      	beq.n	800d82c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	78fa      	ldrb	r2, [r7, #3]
 800d822:	4611      	mov	r1, r2
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	4798      	blx	r3
 800d828:	4603      	mov	r3, r0
 800d82a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	460b      	mov	r3, r1
 800d840:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d007      	beq.n	800d85c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	78fa      	ldrb	r2, [r7, #3]
 800d856:	4611      	mov	r1, r2
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	4798      	blx	r3
  }

  return USBD_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b084      	sub	sp, #16
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d876:	6839      	ldr	r1, [r7, #0]
 800d878:	4618      	mov	r0, r3
 800d87a:	f000 ff9d 	bl	800e7b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d88c:	461a      	mov	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d89a:	f003 031f 	and.w	r3, r3, #31
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d01a      	beq.n	800d8d8 <USBD_LL_SetupStage+0x72>
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d822      	bhi.n	800d8ec <USBD_LL_SetupStage+0x86>
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d002      	beq.n	800d8b0 <USBD_LL_SetupStage+0x4a>
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d00a      	beq.n	800d8c4 <USBD_LL_SetupStage+0x5e>
 800d8ae:	e01d      	b.n	800d8ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 fa5d 	bl	800dd78 <USBD_StdDevReq>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8c2:	e020      	b.n	800d906 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 fac1 	bl	800de54 <USBD_StdItfReq>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800d8d6:	e016      	b.n	800d906 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 fb00 	bl	800dee6 <USBD_StdEPReq>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d8ea:	e00c      	b.n	800d906 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d8f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f001 fa5e 	bl	800edbc <USBD_LL_StallEP>
 800d900:	4603      	mov	r3, r0
 800d902:	73fb      	strb	r3, [r7, #15]
      break;
 800d904:	bf00      	nop
  }

  return ret;
 800d906:	7bfb      	ldrb	r3, [r7, #15]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	460b      	mov	r3, r1
 800d91a:	607a      	str	r2, [r7, #4]
 800d91c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d91e:	7afb      	ldrb	r3, [r7, #11]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d138      	bne.n	800d996 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d92a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d932:	2b03      	cmp	r3, #3
 800d934:	d14a      	bne.n	800d9cc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	689a      	ldr	r2, [r3, #8]
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d913      	bls.n	800d96a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	689a      	ldr	r2, [r3, #8]
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	1ad2      	subs	r2, r2, r3
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	4293      	cmp	r3, r2
 800d95a:	bf28      	it	cs
 800d95c:	4613      	movcs	r3, r2
 800d95e:	461a      	mov	r2, r3
 800d960:	6879      	ldr	r1, [r7, #4]
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f001 f81c 	bl	800e9a0 <USBD_CtlContinueRx>
 800d968:	e030      	b.n	800d9cc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d970:	b2db      	uxtb	r3, r3
 800d972:	2b03      	cmp	r3, #3
 800d974:	d10b      	bne.n	800d98e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d005      	beq.n	800d98e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d988:	691b      	ldr	r3, [r3, #16]
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f001 f817 	bl	800e9c2 <USBD_CtlSendStatus>
 800d994:	e01a      	b.n	800d9cc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d114      	bne.n	800d9cc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00e      	beq.n	800d9cc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9b4:	699b      	ldr	r3, [r3, #24]
 800d9b6:	7afa      	ldrb	r2, [r7, #11]
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	4798      	blx	r3
 800d9be:	4603      	mov	r3, r0
 800d9c0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d9c2:	7dfb      	ldrb	r3, [r7, #23]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d9c8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ca:	e000      	b.n	800d9ce <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b086      	sub	sp, #24
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	60f8      	str	r0, [r7, #12]
 800d9de:	460b      	mov	r3, r1
 800d9e0:	607a      	str	r2, [r7, #4]
 800d9e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d9e4:	7afb      	ldrb	r3, [r7, #11]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d16b      	bne.n	800dac2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	3314      	adds	r3, #20
 800d9ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d156      	bne.n	800daa8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	689a      	ldr	r2, [r3, #8]
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	429a      	cmp	r2, r3
 800da04:	d914      	bls.n	800da30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	689a      	ldr	r2, [r3, #8]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	1ad2      	subs	r2, r2, r3
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	461a      	mov	r2, r3
 800da1a:	6879      	ldr	r1, [r7, #4]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 ff91 	bl	800e944 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da22:	2300      	movs	r3, #0
 800da24:	2200      	movs	r2, #0
 800da26:	2100      	movs	r1, #0
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f001 fa71 	bl	800ef10 <USBD_LL_PrepareReceive>
 800da2e:	e03b      	b.n	800daa8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	68da      	ldr	r2, [r3, #12]
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d11c      	bne.n	800da76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	685a      	ldr	r2, [r3, #4]
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da44:	429a      	cmp	r2, r3
 800da46:	d316      	bcc.n	800da76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da52:	429a      	cmp	r2, r3
 800da54:	d20f      	bcs.n	800da76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da56:	2200      	movs	r2, #0
 800da58:	2100      	movs	r1, #0
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 ff72 	bl	800e944 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da68:	2300      	movs	r3, #0
 800da6a:	2200      	movs	r2, #0
 800da6c:	2100      	movs	r1, #0
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f001 fa4e 	bl	800ef10 <USBD_LL_PrepareReceive>
 800da74:	e018      	b.n	800daa8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	2b03      	cmp	r3, #3
 800da80:	d10b      	bne.n	800da9a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d005      	beq.n	800da9a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800da9a:	2180      	movs	r1, #128	@ 0x80
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f001 f98d 	bl	800edbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f000 ffa0 	bl	800e9e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d122      	bne.n	800daf8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f7ff fe98 	bl	800d7e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dac0:	e01a      	b.n	800daf8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	2b03      	cmp	r3, #3
 800dacc:	d114      	bne.n	800daf8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00e      	beq.n	800daf8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	7afa      	ldrb	r2, [r7, #11]
 800dae4:	4611      	mov	r1, r2
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	4798      	blx	r3
 800daea:	4603      	mov	r3, r0
 800daec:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800daee:	7dfb      	ldrb	r3, [r7, #23]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800daf4:	7dfb      	ldrb	r3, [r7, #23]
 800daf6:	e000      	b.n	800dafa <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b082      	sub	sp, #8
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800db32:	2303      	movs	r3, #3
 800db34:	e02a      	b.n	800db8c <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d009      	beq.n	800db56 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	6852      	ldr	r2, [r2, #4]
 800db4e:	b2d2      	uxtb	r2, r2
 800db50:	4611      	mov	r1, r2
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db56:	2340      	movs	r3, #64	@ 0x40
 800db58:	2200      	movs	r2, #0
 800db5a:	2100      	movs	r1, #0
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f001 f8e8 	bl	800ed32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2240      	movs	r2, #64	@ 0x40
 800db6e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db72:	2340      	movs	r3, #64	@ 0x40
 800db74:	2200      	movs	r2, #0
 800db76:	2180      	movs	r1, #128	@ 0x80
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f001 f8da 	bl	800ed32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2240      	movs	r2, #64	@ 0x40
 800db88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	460b      	mov	r3, r1
 800db9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	78fa      	ldrb	r2, [r7, #3]
 800dba4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2204      	movs	r2, #4
 800dbce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	370c      	adds	r7, #12
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr

0800dbe0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b04      	cmp	r3, #4
 800dbf2:	d106      	bne.n	800dc02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dbfa:	b2da      	uxtb	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d101      	bne.n	800dc26 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800dc22:	2303      	movs	r3, #3
 800dc24:	e012      	b.n	800dc4c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	d10b      	bne.n	800dc4a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc38:	69db      	ldr	r3, [r3, #28]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d005      	beq.n	800dc4a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc44:	69db      	ldr	r3, [r3, #28]
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d101      	bne.n	800dc6e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800dc6a:	2303      	movs	r3, #3
 800dc6c:	e014      	b.n	800dc98 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b03      	cmp	r3, #3
 800dc78:	d10d      	bne.n	800dc96 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc80:	6a1b      	ldr	r3, [r3, #32]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	78fa      	ldrb	r2, [r7, #3]
 800dc90:	4611      	mov	r1, r2
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d101      	bne.n	800dcba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800dcb6:	2303      	movs	r3, #3
 800dcb8:	e014      	b.n	800dce4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	2b03      	cmp	r3, #3
 800dcc4:	d10d      	bne.n	800dce2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcda:	78fa      	ldrb	r2, [r7, #3]
 800dcdc:	4611      	mov	r1, r2
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d009      	beq.n	800dd30 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	6852      	ldr	r2, [r2, #4]
 800dd28:	b2d2      	uxtb	r2, r2
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	4798      	blx	r3
  }

  return USBD_OK;
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3708      	adds	r7, #8
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b087      	sub	sp, #28
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dd58:	8a3b      	ldrh	r3, [r7, #16]
 800dd5a:	021b      	lsls	r3, r3, #8
 800dd5c:	b21a      	sxth	r2, r3
 800dd5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	b21b      	sxth	r3, r3
 800dd66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dd68:	89fb      	ldrh	r3, [r7, #14]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	371c      	adds	r7, #28
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
	...

0800dd78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd8e:	2b40      	cmp	r3, #64	@ 0x40
 800dd90:	d005      	beq.n	800dd9e <USBD_StdDevReq+0x26>
 800dd92:	2b40      	cmp	r3, #64	@ 0x40
 800dd94:	d853      	bhi.n	800de3e <USBD_StdDevReq+0xc6>
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00b      	beq.n	800ddb2 <USBD_StdDevReq+0x3a>
 800dd9a:	2b20      	cmp	r3, #32
 800dd9c:	d14f      	bne.n	800de3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	6839      	ldr	r1, [r7, #0]
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	4798      	blx	r3
 800ddac:	4603      	mov	r3, r0
 800ddae:	73fb      	strb	r3, [r7, #15]
      break;
 800ddb0:	e04a      	b.n	800de48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	785b      	ldrb	r3, [r3, #1]
 800ddb6:	2b09      	cmp	r3, #9
 800ddb8:	d83b      	bhi.n	800de32 <USBD_StdDevReq+0xba>
 800ddba:	a201      	add	r2, pc, #4	@ (adr r2, 800ddc0 <USBD_StdDevReq+0x48>)
 800ddbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc0:	0800de15 	.word	0x0800de15
 800ddc4:	0800de29 	.word	0x0800de29
 800ddc8:	0800de33 	.word	0x0800de33
 800ddcc:	0800de1f 	.word	0x0800de1f
 800ddd0:	0800de33 	.word	0x0800de33
 800ddd4:	0800ddf3 	.word	0x0800ddf3
 800ddd8:	0800dde9 	.word	0x0800dde9
 800dddc:	0800de33 	.word	0x0800de33
 800dde0:	0800de0b 	.word	0x0800de0b
 800dde4:	0800ddfd 	.word	0x0800ddfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dde8:	6839      	ldr	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 f9de 	bl	800e1ac <USBD_GetDescriptor>
          break;
 800ddf0:	e024      	b.n	800de3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 fb55 	bl	800e4a4 <USBD_SetAddress>
          break;
 800ddfa:	e01f      	b.n	800de3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fb94 	bl	800e52c <USBD_SetConfig>
 800de04:	4603      	mov	r3, r0
 800de06:	73fb      	strb	r3, [r7, #15]
          break;
 800de08:	e018      	b.n	800de3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fc33 	bl	800e678 <USBD_GetConfig>
          break;
 800de12:	e013      	b.n	800de3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 fc64 	bl	800e6e4 <USBD_GetStatus>
          break;
 800de1c:	e00e      	b.n	800de3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fc93 	bl	800e74c <USBD_SetFeature>
          break;
 800de26:	e009      	b.n	800de3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800de28:	6839      	ldr	r1, [r7, #0]
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fca2 	bl	800e774 <USBD_ClrFeature>
          break;
 800de30:	e004      	b.n	800de3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800de32:	6839      	ldr	r1, [r7, #0]
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fcf9 	bl	800e82c <USBD_CtlError>
          break;
 800de3a:	bf00      	nop
      }
      break;
 800de3c:	e004      	b.n	800de48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800de3e:	6839      	ldr	r1, [r7, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fcf3 	bl	800e82c <USBD_CtlError>
      break;
 800de46:	bf00      	nop
  }

  return ret;
 800de48:	7bfb      	ldrb	r3, [r7, #15]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop

0800de54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de5e:	2300      	movs	r3, #0
 800de60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de6a:	2b40      	cmp	r3, #64	@ 0x40
 800de6c:	d005      	beq.n	800de7a <USBD_StdItfReq+0x26>
 800de6e:	2b40      	cmp	r3, #64	@ 0x40
 800de70:	d82f      	bhi.n	800ded2 <USBD_StdItfReq+0x7e>
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <USBD_StdItfReq+0x26>
 800de76:	2b20      	cmp	r3, #32
 800de78:	d12b      	bne.n	800ded2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de80:	b2db      	uxtb	r3, r3
 800de82:	3b01      	subs	r3, #1
 800de84:	2b02      	cmp	r3, #2
 800de86:	d81d      	bhi.n	800dec4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	889b      	ldrh	r3, [r3, #4]
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b0f      	cmp	r3, #15
 800de90:	d813      	bhi.n	800deba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	6839      	ldr	r1, [r7, #0]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	4798      	blx	r3
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	88db      	ldrh	r3, [r3, #6]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d110      	bne.n	800dece <USBD_StdItfReq+0x7a>
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d10d      	bne.n	800dece <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fd85 	bl	800e9c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800deb8:	e009      	b.n	800dece <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800deba:	6839      	ldr	r1, [r7, #0]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 fcb5 	bl	800e82c <USBD_CtlError>
          break;
 800dec2:	e004      	b.n	800dece <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 fcb0 	bl	800e82c <USBD_CtlError>
          break;
 800decc:	e000      	b.n	800ded0 <USBD_StdItfReq+0x7c>
          break;
 800dece:	bf00      	nop
      }
      break;
 800ded0:	e004      	b.n	800dedc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 fca9 	bl	800e82c <USBD_CtlError>
      break;
 800deda:	bf00      	nop
  }

  return ret;
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b084      	sub	sp, #16
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	889b      	ldrh	r3, [r3, #4]
 800def8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df02:	2b40      	cmp	r3, #64	@ 0x40
 800df04:	d007      	beq.n	800df16 <USBD_StdEPReq+0x30>
 800df06:	2b40      	cmp	r3, #64	@ 0x40
 800df08:	f200 8145 	bhi.w	800e196 <USBD_StdEPReq+0x2b0>
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00c      	beq.n	800df2a <USBD_StdEPReq+0x44>
 800df10:	2b20      	cmp	r3, #32
 800df12:	f040 8140 	bne.w	800e196 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	6839      	ldr	r1, [r7, #0]
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	4798      	blx	r3
 800df24:	4603      	mov	r3, r0
 800df26:	73fb      	strb	r3, [r7, #15]
      break;
 800df28:	e13a      	b.n	800e1a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	785b      	ldrb	r3, [r3, #1]
 800df2e:	2b03      	cmp	r3, #3
 800df30:	d007      	beq.n	800df42 <USBD_StdEPReq+0x5c>
 800df32:	2b03      	cmp	r3, #3
 800df34:	f300 8129 	bgt.w	800e18a <USBD_StdEPReq+0x2a4>
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d07f      	beq.n	800e03c <USBD_StdEPReq+0x156>
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d03c      	beq.n	800dfba <USBD_StdEPReq+0xd4>
 800df40:	e123      	b.n	800e18a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	d002      	beq.n	800df54 <USBD_StdEPReq+0x6e>
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d016      	beq.n	800df80 <USBD_StdEPReq+0x9a>
 800df52:	e02c      	b.n	800dfae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df54:	7bbb      	ldrb	r3, [r7, #14]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00d      	beq.n	800df76 <USBD_StdEPReq+0x90>
 800df5a:	7bbb      	ldrb	r3, [r7, #14]
 800df5c:	2b80      	cmp	r3, #128	@ 0x80
 800df5e:	d00a      	beq.n	800df76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	4619      	mov	r1, r3
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 ff29 	bl	800edbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df6a:	2180      	movs	r1, #128	@ 0x80
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 ff25 	bl	800edbc <USBD_LL_StallEP>
 800df72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df74:	e020      	b.n	800dfb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800df76:	6839      	ldr	r1, [r7, #0]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 fc57 	bl	800e82c <USBD_CtlError>
              break;
 800df7e:	e01b      	b.n	800dfb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	885b      	ldrh	r3, [r3, #2]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d10e      	bne.n	800dfa6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800df88:	7bbb      	ldrb	r3, [r7, #14]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00b      	beq.n	800dfa6 <USBD_StdEPReq+0xc0>
 800df8e:	7bbb      	ldrb	r3, [r7, #14]
 800df90:	2b80      	cmp	r3, #128	@ 0x80
 800df92:	d008      	beq.n	800dfa6 <USBD_StdEPReq+0xc0>
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	88db      	ldrh	r3, [r3, #6]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d104      	bne.n	800dfa6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800df9c:	7bbb      	ldrb	r3, [r7, #14]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 ff0b 	bl	800edbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 fd0b 	bl	800e9c2 <USBD_CtlSendStatus>

              break;
 800dfac:	e004      	b.n	800dfb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fc3b 	bl	800e82c <USBD_CtlError>
              break;
 800dfb6:	bf00      	nop
          }
          break;
 800dfb8:	e0ec      	b.n	800e194 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	2b02      	cmp	r3, #2
 800dfc4:	d002      	beq.n	800dfcc <USBD_StdEPReq+0xe6>
 800dfc6:	2b03      	cmp	r3, #3
 800dfc8:	d016      	beq.n	800dff8 <USBD_StdEPReq+0x112>
 800dfca:	e030      	b.n	800e02e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dfcc:	7bbb      	ldrb	r3, [r7, #14]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00d      	beq.n	800dfee <USBD_StdEPReq+0x108>
 800dfd2:	7bbb      	ldrb	r3, [r7, #14]
 800dfd4:	2b80      	cmp	r3, #128	@ 0x80
 800dfd6:	d00a      	beq.n	800dfee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 feed 	bl	800edbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dfe2:	2180      	movs	r1, #128	@ 0x80
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 fee9 	bl	800edbc <USBD_LL_StallEP>
 800dfea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dfec:	e025      	b.n	800e03a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dfee:	6839      	ldr	r1, [r7, #0]
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fc1b 	bl	800e82c <USBD_CtlError>
              break;
 800dff6:	e020      	b.n	800e03a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	885b      	ldrh	r3, [r3, #2]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d11b      	bne.n	800e038 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e000:	7bbb      	ldrb	r3, [r7, #14]
 800e002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e006:	2b00      	cmp	r3, #0
 800e008:	d004      	beq.n	800e014 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e00a:	7bbb      	ldrb	r3, [r7, #14]
 800e00c:	4619      	mov	r1, r3
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 fef3 	bl	800edfa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fcd4 	bl	800e9c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	4798      	blx	r3
 800e028:	4603      	mov	r3, r0
 800e02a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e02c:	e004      	b.n	800e038 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fbfb 	bl	800e82c <USBD_CtlError>
              break;
 800e036:	e000      	b.n	800e03a <USBD_StdEPReq+0x154>
              break;
 800e038:	bf00      	nop
          }
          break;
 800e03a:	e0ab      	b.n	800e194 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2b02      	cmp	r3, #2
 800e046:	d002      	beq.n	800e04e <USBD_StdEPReq+0x168>
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d032      	beq.n	800e0b2 <USBD_StdEPReq+0x1cc>
 800e04c:	e097      	b.n	800e17e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e04e:	7bbb      	ldrb	r3, [r7, #14]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d007      	beq.n	800e064 <USBD_StdEPReq+0x17e>
 800e054:	7bbb      	ldrb	r3, [r7, #14]
 800e056:	2b80      	cmp	r3, #128	@ 0x80
 800e058:	d004      	beq.n	800e064 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f000 fbe5 	bl	800e82c <USBD_CtlError>
                break;
 800e062:	e091      	b.n	800e188 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	da0b      	bge.n	800e084 <USBD_StdEPReq+0x19e>
 800e06c:	7bbb      	ldrb	r3, [r7, #14]
 800e06e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e072:	4613      	mov	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4413      	add	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	3310      	adds	r3, #16
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	4413      	add	r3, r2
 800e080:	3304      	adds	r3, #4
 800e082:	e00b      	b.n	800e09c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e08a:	4613      	mov	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4413      	add	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	4413      	add	r3, r2
 800e09a:	3304      	adds	r3, #4
 800e09c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fc2f 	bl	800e90e <USBD_CtlSendData>
              break;
 800e0b0:	e06a      	b.n	800e188 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e0b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	da11      	bge.n	800e0de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e0ba:	7bbb      	ldrb	r3, [r7, #14]
 800e0bc:	f003 020f 	and.w	r2, r3, #15
 800e0c0:	6879      	ldr	r1, [r7, #4]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	4413      	add	r3, r2
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	440b      	add	r3, r1
 800e0cc:	3324      	adds	r3, #36	@ 0x24
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d117      	bne.n	800e104 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e0d4:	6839      	ldr	r1, [r7, #0]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fba8 	bl	800e82c <USBD_CtlError>
                  break;
 800e0dc:	e054      	b.n	800e188 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e0de:	7bbb      	ldrb	r3, [r7, #14]
 800e0e0:	f003 020f 	and.w	r2, r3, #15
 800e0e4:	6879      	ldr	r1, [r7, #4]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	440b      	add	r3, r1
 800e0f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d104      	bne.n	800e104 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 fb95 	bl	800e82c <USBD_CtlError>
                  break;
 800e102:	e041      	b.n	800e188 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	da0b      	bge.n	800e124 <USBD_StdEPReq+0x23e>
 800e10c:	7bbb      	ldrb	r3, [r7, #14]
 800e10e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e112:	4613      	mov	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	4413      	add	r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	3310      	adds	r3, #16
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	4413      	add	r3, r2
 800e120:	3304      	adds	r3, #4
 800e122:	e00b      	b.n	800e13c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e124:	7bbb      	ldrb	r3, [r7, #14]
 800e126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e12a:	4613      	mov	r3, r2
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	4413      	add	r3, r2
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	4413      	add	r3, r2
 800e13a:	3304      	adds	r3, #4
 800e13c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e13e:	7bbb      	ldrb	r3, [r7, #14]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <USBD_StdEPReq+0x264>
 800e144:	7bbb      	ldrb	r3, [r7, #14]
 800e146:	2b80      	cmp	r3, #128	@ 0x80
 800e148:	d103      	bne.n	800e152 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	2200      	movs	r2, #0
 800e14e:	601a      	str	r2, [r3, #0]
 800e150:	e00e      	b.n	800e170 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e152:	7bbb      	ldrb	r3, [r7, #14]
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fe6e 	bl	800ee38 <USBD_LL_IsStallEP>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d003      	beq.n	800e16a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	2201      	movs	r2, #1
 800e166:	601a      	str	r2, [r3, #0]
 800e168:	e002      	b.n	800e170 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	2200      	movs	r2, #0
 800e16e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	2202      	movs	r2, #2
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fbc9 	bl	800e90e <USBD_CtlSendData>
              break;
 800e17c:	e004      	b.n	800e188 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fb53 	bl	800e82c <USBD_CtlError>
              break;
 800e186:	bf00      	nop
          }
          break;
 800e188:	e004      	b.n	800e194 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fb4d 	bl	800e82c <USBD_CtlError>
          break;
 800e192:	bf00      	nop
      }
      break;
 800e194:	e004      	b.n	800e1a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e196:	6839      	ldr	r1, [r7, #0]
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 fb47 	bl	800e82c <USBD_CtlError>
      break;
 800e19e:	bf00      	nop
  }

  return ret;
 800e1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
	...

0800e1ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	885b      	ldrh	r3, [r3, #2]
 800e1c6:	0a1b      	lsrs	r3, r3, #8
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	2b06      	cmp	r3, #6
 800e1ce:	f200 813b 	bhi.w	800e448 <USBD_GetDescriptor+0x29c>
 800e1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d8 <USBD_GetDescriptor+0x2c>)
 800e1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d8:	0800e1f5 	.word	0x0800e1f5
 800e1dc:	0800e20d 	.word	0x0800e20d
 800e1e0:	0800e24d 	.word	0x0800e24d
 800e1e4:	0800e449 	.word	0x0800e449
 800e1e8:	0800e449 	.word	0x0800e449
 800e1ec:	0800e3e9 	.word	0x0800e3e9
 800e1f0:	0800e415 	.word	0x0800e415
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	7c12      	ldrb	r2, [r2, #16]
 800e200:	f107 0108 	add.w	r1, r7, #8
 800e204:	4610      	mov	r0, r2
 800e206:	4798      	blx	r3
 800e208:	60f8      	str	r0, [r7, #12]
      break;
 800e20a:	e125      	b.n	800e458 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	7c1b      	ldrb	r3, [r3, #16]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10d      	bne.n	800e230 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e21c:	f107 0208 	add.w	r2, r7, #8
 800e220:	4610      	mov	r0, r2
 800e222:	4798      	blx	r3
 800e224:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3301      	adds	r3, #1
 800e22a:	2202      	movs	r2, #2
 800e22c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e22e:	e113      	b.n	800e458 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e238:	f107 0208 	add.w	r2, r7, #8
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
 800e240:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3301      	adds	r3, #1
 800e246:	2202      	movs	r2, #2
 800e248:	701a      	strb	r2, [r3, #0]
      break;
 800e24a:	e105      	b.n	800e458 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	885b      	ldrh	r3, [r3, #2]
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b05      	cmp	r3, #5
 800e254:	f200 80ac 	bhi.w	800e3b0 <USBD_GetDescriptor+0x204>
 800e258:	a201      	add	r2, pc, #4	@ (adr r2, 800e260 <USBD_GetDescriptor+0xb4>)
 800e25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25e:	bf00      	nop
 800e260:	0800e279 	.word	0x0800e279
 800e264:	0800e2ad 	.word	0x0800e2ad
 800e268:	0800e2e1 	.word	0x0800e2e1
 800e26c:	0800e315 	.word	0x0800e315
 800e270:	0800e349 	.word	0x0800e349
 800e274:	0800e37d 	.word	0x0800e37d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00b      	beq.n	800e29c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	7c12      	ldrb	r2, [r2, #16]
 800e290:	f107 0108 	add.w	r1, r7, #8
 800e294:	4610      	mov	r0, r2
 800e296:	4798      	blx	r3
 800e298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e29a:	e0a4      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fac4 	bl	800e82c <USBD_CtlError>
            err++;
 800e2a4:	7afb      	ldrb	r3, [r7, #11]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2aa:	e09c      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00b      	beq.n	800e2d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	7c12      	ldrb	r2, [r2, #16]
 800e2c4:	f107 0108 	add.w	r1, r7, #8
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	4798      	blx	r3
 800e2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2ce:	e08a      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 faaa 	bl	800e82c <USBD_CtlError>
            err++;
 800e2d8:	7afb      	ldrb	r3, [r7, #11]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e2de:	e082      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00b      	beq.n	800e304 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	7c12      	ldrb	r2, [r2, #16]
 800e2f8:	f107 0108 	add.w	r1, r7, #8
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	4798      	blx	r3
 800e300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e302:	e070      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fa90 	bl	800e82c <USBD_CtlError>
            err++;
 800e30c:	7afb      	ldrb	r3, [r7, #11]
 800e30e:	3301      	adds	r3, #1
 800e310:	72fb      	strb	r3, [r7, #11]
          break;
 800e312:	e068      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00b      	beq.n	800e338 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	7c12      	ldrb	r2, [r2, #16]
 800e32c:	f107 0108 	add.w	r1, r7, #8
 800e330:	4610      	mov	r0, r2
 800e332:	4798      	blx	r3
 800e334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e336:	e056      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800e338:	6839      	ldr	r1, [r7, #0]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fa76 	bl	800e82c <USBD_CtlError>
            err++;
 800e340:	7afb      	ldrb	r3, [r7, #11]
 800e342:	3301      	adds	r3, #1
 800e344:	72fb      	strb	r3, [r7, #11]
          break;
 800e346:	e04e      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00b      	beq.n	800e36c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e35a:	695b      	ldr	r3, [r3, #20]
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	7c12      	ldrb	r2, [r2, #16]
 800e360:	f107 0108 	add.w	r1, r7, #8
 800e364:	4610      	mov	r0, r2
 800e366:	4798      	blx	r3
 800e368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e36a:	e03c      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800e36c:	6839      	ldr	r1, [r7, #0]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fa5c 	bl	800e82c <USBD_CtlError>
            err++;
 800e374:	7afb      	ldrb	r3, [r7, #11]
 800e376:	3301      	adds	r3, #1
 800e378:	72fb      	strb	r3, [r7, #11]
          break;
 800e37a:	e034      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00b      	beq.n	800e3a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	7c12      	ldrb	r2, [r2, #16]
 800e394:	f107 0108 	add.w	r1, r7, #8
 800e398:	4610      	mov	r0, r2
 800e39a:	4798      	blx	r3
 800e39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e39e:	e022      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fa42 	bl	800e82c <USBD_CtlError>
            err++;
 800e3a8:	7afb      	ldrb	r3, [r7, #11]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e3ae:	e01a      	b.n	800e3e6 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00c      	beq.n	800e3d6 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3c4:	683a      	ldr	r2, [r7, #0]
 800e3c6:	8852      	ldrh	r2, [r2, #2]
 800e3c8:	b2d1      	uxtb	r1, r2
 800e3ca:	f107 0208 	add.w	r2, r7, #8
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	4798      	blx	r3
 800e3d2:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800e3d4:	e006      	b.n	800e3e4 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800e3d6:	6839      	ldr	r1, [r7, #0]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 fa27 	bl	800e82c <USBD_CtlError>
            err++;
 800e3de:	7afb      	ldrb	r3, [r7, #11]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	72fb      	strb	r3, [r7, #11]
          break;
 800e3e4:	bf00      	nop
      }
      break;
 800e3e6:	e037      	b.n	800e458 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	7c1b      	ldrb	r3, [r3, #16]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d109      	bne.n	800e404 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3f8:	f107 0208 	add.w	r2, r7, #8
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	4798      	blx	r3
 800e400:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e402:	e029      	b.n	800e458 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 fa10 	bl	800e82c <USBD_CtlError>
        err++;
 800e40c:	7afb      	ldrb	r3, [r7, #11]
 800e40e:	3301      	adds	r3, #1
 800e410:	72fb      	strb	r3, [r7, #11]
      break;
 800e412:	e021      	b.n	800e458 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7c1b      	ldrb	r3, [r3, #16]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d10d      	bne.n	800e438 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e424:	f107 0208 	add.w	r2, r7, #8
 800e428:	4610      	mov	r0, r2
 800e42a:	4798      	blx	r3
 800e42c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	3301      	adds	r3, #1
 800e432:	2207      	movs	r2, #7
 800e434:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e436:	e00f      	b.n	800e458 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800e438:	6839      	ldr	r1, [r7, #0]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f9f6 	bl	800e82c <USBD_CtlError>
        err++;
 800e440:	7afb      	ldrb	r3, [r7, #11]
 800e442:	3301      	adds	r3, #1
 800e444:	72fb      	strb	r3, [r7, #11]
      break;
 800e446:	e007      	b.n	800e458 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800e448:	6839      	ldr	r1, [r7, #0]
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f9ee 	bl	800e82c <USBD_CtlError>
      err++;
 800e450:	7afb      	ldrb	r3, [r7, #11]
 800e452:	3301      	adds	r3, #1
 800e454:	72fb      	strb	r3, [r7, #11]
      break;
 800e456:	bf00      	nop
  }

  if (err != 0U)
 800e458:	7afb      	ldrb	r3, [r7, #11]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d11e      	bne.n	800e49c <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	88db      	ldrh	r3, [r3, #6]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d016      	beq.n	800e494 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800e466:	893b      	ldrh	r3, [r7, #8]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00e      	beq.n	800e48a <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	88da      	ldrh	r2, [r3, #6]
 800e470:	893b      	ldrh	r3, [r7, #8]
 800e472:	4293      	cmp	r3, r2
 800e474:	bf28      	it	cs
 800e476:	4613      	movcs	r3, r2
 800e478:	b29b      	uxth	r3, r3
 800e47a:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e47c:	893b      	ldrh	r3, [r7, #8]
 800e47e:	461a      	mov	r2, r3
 800e480:	68f9      	ldr	r1, [r7, #12]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 fa43 	bl	800e90e <USBD_CtlSendData>
 800e488:	e009      	b.n	800e49e <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f9cd 	bl	800e82c <USBD_CtlError>
 800e492:	e004      	b.n	800e49e <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 fa94 	bl	800e9c2 <USBD_CtlSendStatus>
 800e49a:	e000      	b.n	800e49e <USBD_GetDescriptor+0x2f2>
    return;
 800e49c:	bf00      	nop
  }
}
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	889b      	ldrh	r3, [r3, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d131      	bne.n	800e51a <USBD_SetAddress+0x76>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	88db      	ldrh	r3, [r3, #6]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d12d      	bne.n	800e51a <USBD_SetAddress+0x76>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	885b      	ldrh	r3, [r3, #2]
 800e4c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e4c4:	d829      	bhi.n	800e51a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	885b      	ldrh	r3, [r3, #2]
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d104      	bne.n	800e4e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e4de:	6839      	ldr	r1, [r7, #0]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 f9a3 	bl	800e82c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e6:	e01d      	b.n	800e524 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	7bfa      	ldrb	r2, [r7, #15]
 800e4ec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 fccb 	bl	800ee90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fa61 	bl	800e9c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e500:	7bfb      	ldrb	r3, [r7, #15]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d004      	beq.n	800e510 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2202      	movs	r2, #2
 800e50a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e50e:	e009      	b.n	800e524 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2201      	movs	r2, #1
 800e514:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e518:	e004      	b.n	800e524 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e51a:	6839      	ldr	r1, [r7, #0]
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f985 	bl	800e82c <USBD_CtlError>
  }
}
 800e522:	bf00      	nop
 800e524:	bf00      	nop
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e536:	2300      	movs	r3, #0
 800e538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	885b      	ldrh	r3, [r3, #2]
 800e53e:	b2da      	uxtb	r2, r3
 800e540:	4b4c      	ldr	r3, [pc, #304]	@ (800e674 <USBD_SetConfig+0x148>)
 800e542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e544:	4b4b      	ldr	r3, [pc, #300]	@ (800e674 <USBD_SetConfig+0x148>)
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d905      	bls.n	800e558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f96c 	bl	800e82c <USBD_CtlError>
    return USBD_FAIL;
 800e554:	2303      	movs	r3, #3
 800e556:	e088      	b.n	800e66a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	2b02      	cmp	r3, #2
 800e562:	d002      	beq.n	800e56a <USBD_SetConfig+0x3e>
 800e564:	2b03      	cmp	r3, #3
 800e566:	d025      	beq.n	800e5b4 <USBD_SetConfig+0x88>
 800e568:	e071      	b.n	800e64e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e56a:	4b42      	ldr	r3, [pc, #264]	@ (800e674 <USBD_SetConfig+0x148>)
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d01c      	beq.n	800e5ac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e572:	4b40      	ldr	r3, [pc, #256]	@ (800e674 <USBD_SetConfig+0x148>)
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e57c:	4b3d      	ldr	r3, [pc, #244]	@ (800e674 <USBD_SetConfig+0x148>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	4619      	mov	r1, r3
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f7ff f93b 	bl	800d7fe <USBD_SetClassConfig>
 800e588:	4603      	mov	r3, r0
 800e58a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e58c:	7bfb      	ldrb	r3, [r7, #15]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d004      	beq.n	800e59c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e592:	6839      	ldr	r1, [r7, #0]
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 f949 	bl	800e82c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e59a:	e065      	b.n	800e668 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 fa10 	bl	800e9c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2203      	movs	r2, #3
 800e5a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e5aa:	e05d      	b.n	800e668 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 fa08 	bl	800e9c2 <USBD_CtlSendStatus>
      break;
 800e5b2:	e059      	b.n	800e668 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e5b4:	4b2f      	ldr	r3, [pc, #188]	@ (800e674 <USBD_SetConfig+0x148>)
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d112      	bne.n	800e5e2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2202      	movs	r2, #2
 800e5c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e5c4:	4b2b      	ldr	r3, [pc, #172]	@ (800e674 <USBD_SetConfig+0x148>)
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5ce:	4b29      	ldr	r3, [pc, #164]	@ (800e674 <USBD_SetConfig+0x148>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff f92e 	bl	800d836 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f9f1 	bl	800e9c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e5e0:	e042      	b.n	800e668 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e5e2:	4b24      	ldr	r3, [pc, #144]	@ (800e674 <USBD_SetConfig+0x148>)
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d02a      	beq.n	800e646 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7ff f91c 	bl	800d836 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e5fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e674 <USBD_SetConfig+0x148>)
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	461a      	mov	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e608:	4b1a      	ldr	r3, [pc, #104]	@ (800e674 <USBD_SetConfig+0x148>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff f8f5 	bl	800d7fe <USBD_SetClassConfig>
 800e614:	4603      	mov	r3, r0
 800e616:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e618:	7bfb      	ldrb	r3, [r7, #15]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00f      	beq.n	800e63e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e61e:	6839      	ldr	r1, [r7, #0]
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f903 	bl	800e82c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	4619      	mov	r1, r3
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7ff f901 	bl	800d836 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2202      	movs	r2, #2
 800e638:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e63c:	e014      	b.n	800e668 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f9bf 	bl	800e9c2 <USBD_CtlSendStatus>
      break;
 800e644:	e010      	b.n	800e668 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f9bb 	bl	800e9c2 <USBD_CtlSendStatus>
      break;
 800e64c:	e00c      	b.n	800e668 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 f8eb 	bl	800e82c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e656:	4b07      	ldr	r3, [pc, #28]	@ (800e674 <USBD_SetConfig+0x148>)
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7ff f8ea 	bl	800d836 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e662:	2303      	movs	r3, #3
 800e664:	73fb      	strb	r3, [r7, #15]
      break;
 800e666:	bf00      	nop
  }

  return ret;
 800e668:	7bfb      	ldrb	r3, [r7, #15]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20001980 	.word	0x20001980

0800e678 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	88db      	ldrh	r3, [r3, #6]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d004      	beq.n	800e694 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 f8cd 	bl	800e82c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e692:	e023      	b.n	800e6dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	dc02      	bgt.n	800e6a6 <USBD_GetConfig+0x2e>
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	dc03      	bgt.n	800e6ac <USBD_GetConfig+0x34>
 800e6a4:	e015      	b.n	800e6d2 <USBD_GetConfig+0x5a>
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	d00b      	beq.n	800e6c2 <USBD_GetConfig+0x4a>
 800e6aa:	e012      	b.n	800e6d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f927 	bl	800e90e <USBD_CtlSendData>
        break;
 800e6c0:	e00c      	b.n	800e6dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 f91f 	bl	800e90e <USBD_CtlSendData>
        break;
 800e6d0:	e004      	b.n	800e6dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f8a9 	bl	800e82c <USBD_CtlError>
        break;
 800e6da:	bf00      	nop
}
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	3b01      	subs	r3, #1
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d81e      	bhi.n	800e73a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	88db      	ldrh	r3, [r3, #6]
 800e700:	2b02      	cmp	r3, #2
 800e702:	d004      	beq.n	800e70e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f890 	bl	800e82c <USBD_CtlError>
        break;
 800e70c:	e01a      	b.n	800e744 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d005      	beq.n	800e72a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	f043 0202 	orr.w	r2, r3, #2
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	330c      	adds	r3, #12
 800e72e:	2202      	movs	r2, #2
 800e730:	4619      	mov	r1, r3
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f8eb 	bl	800e90e <USBD_CtlSendData>
      break;
 800e738:	e004      	b.n	800e744 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f875 	bl	800e82c <USBD_CtlError>
      break;
 800e742:	bf00      	nop
  }
}
 800e744:	bf00      	nop
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	885b      	ldrh	r3, [r3, #2]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d106      	bne.n	800e76c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2201      	movs	r2, #1
 800e762:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f92b 	bl	800e9c2 <USBD_CtlSendStatus>
  }
}
 800e76c:	bf00      	nop
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e784:	b2db      	uxtb	r3, r3
 800e786:	3b01      	subs	r3, #1
 800e788:	2b02      	cmp	r3, #2
 800e78a:	d80b      	bhi.n	800e7a4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	885b      	ldrh	r3, [r3, #2]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d10c      	bne.n	800e7ae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2200      	movs	r2, #0
 800e798:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 f910 	bl	800e9c2 <USBD_CtlSendStatus>
      }
      break;
 800e7a2:	e004      	b.n	800e7ae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f840 	bl	800e82c <USBD_CtlError>
      break;
 800e7ac:	e000      	b.n	800e7b0 <USBD_ClrFeature+0x3c>
      break;
 800e7ae:	bf00      	nop
  }
}
 800e7b0:	bf00      	nop
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	781a      	ldrb	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	781a      	ldrb	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f7ff faa9 	bl	800dd3a <SWAPBYTE>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f7ff fa9c 	bl	800dd3a <SWAPBYTE>
 800e802:	4603      	mov	r3, r0
 800e804:	461a      	mov	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	3301      	adds	r3, #1
 800e80e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	3301      	adds	r3, #1
 800e814:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f7ff fa8f 	bl	800dd3a <SWAPBYTE>
 800e81c:	4603      	mov	r3, r0
 800e81e:	461a      	mov	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	80da      	strh	r2, [r3, #6]
}
 800e824:	bf00      	nop
 800e826:	3710      	adds	r7, #16
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e836:	2180      	movs	r1, #128	@ 0x80
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 fabf 	bl	800edbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e83e:	2100      	movs	r1, #0
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fabb 	bl	800edbc <USBD_LL_StallEP>
}
 800e846:	bf00      	nop
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b086      	sub	sp, #24
 800e852:	af00      	add	r7, sp, #0
 800e854:	60f8      	str	r0, [r7, #12]
 800e856:	60b9      	str	r1, [r7, #8]
 800e858:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d036      	beq.n	800e8d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e868:	6938      	ldr	r0, [r7, #16]
 800e86a:	f000 f836 	bl	800e8da <USBD_GetLen>
 800e86e:	4603      	mov	r3, r0
 800e870:	3301      	adds	r3, #1
 800e872:	b29b      	uxth	r3, r3
 800e874:	005b      	lsls	r3, r3, #1
 800e876:	b29a      	uxth	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	4413      	add	r3, r2
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	7812      	ldrb	r2, [r2, #0]
 800e886:	701a      	strb	r2, [r3, #0]
  idx++;
 800e888:	7dfb      	ldrb	r3, [r7, #23]
 800e88a:	3301      	adds	r3, #1
 800e88c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e88e:	7dfb      	ldrb	r3, [r7, #23]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	4413      	add	r3, r2
 800e894:	2203      	movs	r2, #3
 800e896:	701a      	strb	r2, [r3, #0]
  idx++;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	3301      	adds	r3, #1
 800e89c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e89e:	e013      	b.n	800e8c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e8a0:	7dfb      	ldrb	r3, [r7, #23]
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	7812      	ldrb	r2, [r2, #0]
 800e8aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	613b      	str	r3, [r7, #16]
    idx++;
 800e8b2:	7dfb      	ldrb	r3, [r7, #23]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e8b8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	4413      	add	r3, r2
 800e8be:	2200      	movs	r2, #0
 800e8c0:	701a      	strb	r2, [r3, #0]
    idx++;
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1e7      	bne.n	800e8a0 <USBD_GetString+0x52>
 800e8d0:	e000      	b.n	800e8d4 <USBD_GetString+0x86>
    return;
 800e8d2:	bf00      	nop
  }
}
 800e8d4:	3718      	adds	r7, #24
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e8da:	b480      	push	{r7}
 800e8dc:	b085      	sub	sp, #20
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e8ea:	e005      	b.n	800e8f8 <USBD_GetLen+0x1e>
  {
    len++;
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1f5      	bne.n	800e8ec <USBD_GetLen+0x12>
  }

  return len;
 800e900:	7bfb      	ldrb	r3, [r7, #15]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3714      	adds	r7, #20
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr

0800e90e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b084      	sub	sp, #16
 800e912:	af00      	add	r7, sp, #0
 800e914:	60f8      	str	r0, [r7, #12]
 800e916:	60b9      	str	r1, [r7, #8]
 800e918:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2202      	movs	r2, #2
 800e91e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	2100      	movs	r1, #0
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f000 faca 	bl	800eece <USBD_LL_Transmit>

  return USBD_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	2100      	movs	r1, #0
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f000 fab9 	bl	800eece <USBD_LL_Transmit>

  return USBD_OK;
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b084      	sub	sp, #16
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	60f8      	str	r0, [r7, #12]
 800e96e:	60b9      	str	r1, [r7, #8]
 800e970:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2203      	movs	r2, #3
 800e976:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	2100      	movs	r1, #0
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f000 fabd 	bl	800ef10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f000 faac 	bl	800ef10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2204      	movs	r2, #4
 800e9ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 fa78 	bl	800eece <USBD_LL_Transmit>

  return USBD_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2205      	movs	r2, #5
 800e9f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 fa86 	bl	800ef10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b082      	sub	sp, #8
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	70fb      	strb	r3, [r7, #3]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800ea1e:	883b      	ldrh	r3, [r7, #0]
 800ea20:	089b      	lsrs	r3, r3, #2
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	78fb      	ldrb	r3, [r7, #3]
 800ea26:	4619      	mov	r1, r3
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7f8 fb99 	bl	8007160 <HAL_PCDEx_SetTxFiFo>
 800ea2e:	4603      	mov	r3, r0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	460b      	mov	r3, r1
 800ea42:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800ea44:	887b      	ldrh	r3, [r7, #2]
 800ea46:	089b      	lsrs	r3, r3, #2
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7f8 fbce 	bl	80071ee <HAL_PCDEx_SetRxFiFo>
 800ea52:	4603      	mov	r3, r0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ea70:	4619      	mov	r1, r3
 800ea72:	4610      	mov	r0, r2
 800ea74:	f7fe fef7 	bl	800d866 <USBD_LL_SetupStage>
}
 800ea78:	bf00      	nop
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	460b      	mov	r3, r1
 800ea8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ea92:	78fa      	ldrb	r2, [r7, #3]
 800ea94:	6879      	ldr	r1, [r7, #4]
 800ea96:	4613      	mov	r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	4413      	add	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	440b      	add	r3, r1
 800eaa0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	78fb      	ldrb	r3, [r7, #3]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	f7fe ff31 	bl	800d910 <USBD_LL_DataOutStage>
}
 800eaae:	bf00      	nop
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b082      	sub	sp, #8
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
 800eabe:	460b      	mov	r3, r1
 800eac0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800eac8:	78fa      	ldrb	r2, [r7, #3]
 800eaca:	6879      	ldr	r1, [r7, #4]
 800eacc:	4613      	mov	r3, r2
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	4413      	add	r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	440b      	add	r3, r1
 800ead6:	3320      	adds	r3, #32
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	78fb      	ldrb	r3, [r7, #3]
 800eadc:	4619      	mov	r1, r3
 800eade:	f7fe ff7a 	bl	800d9d6 <USBD_LL_DataInStage>
}
 800eae2:	bf00      	nop
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b082      	sub	sp, #8
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7ff f889 	bl	800dc10 <USBD_LL_SOF>
}
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b084      	sub	sp, #16
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	79db      	ldrb	r3, [r3, #7]
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d102      	bne.n	800eb20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	73fb      	strb	r3, [r7, #15]
 800eb1e:	e008      	b.n	800eb32 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	79db      	ldrb	r3, [r3, #7]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	73fb      	strb	r3, [r7, #15]
 800eb2c:	e001      	b.n	800eb32 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800eb2e:	f7f4 fdf5 	bl	800371c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb38:	7bfa      	ldrb	r2, [r7, #15]
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff f829 	bl	800db94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe ffda 	bl	800db02 <USBD_LL_Reset>
}
 800eb4e:	bf00      	nop
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
	...

0800eb58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff f824 	bl	800dbb4 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	6812      	ldr	r2, [r2, #0]
 800eb7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eb7e:	f043 0301 	orr.w	r3, r3, #1
 800eb82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	7adb      	ldrb	r3, [r3, #11]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d005      	beq.n	800eb98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb8c:	4b04      	ldr	r3, [pc, #16]	@ (800eba0 <HAL_PCD_SuspendCallback+0x48>)
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	4a03      	ldr	r2, [pc, #12]	@ (800eba0 <HAL_PCD_SuspendCallback+0x48>)
 800eb92:	f043 0306 	orr.w	r3, r3, #6
 800eb96:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800eb98:	bf00      	nop
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	e000ed00 	.word	0xe000ed00

0800eba4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7ff f814 	bl	800dbe0 <USBD_LL_Resume>
}
 800ebb8:	bf00      	nop
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ebd2:	78fa      	ldrb	r2, [r7, #3]
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7ff f862 	bl	800dca0 <USBD_LL_IsoOUTIncomplete>
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	460b      	mov	r3, r1
 800ebee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ebf6:	78fa      	ldrb	r2, [r7, #3]
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7ff f82a 	bl	800dc54 <USBD_LL_IsoINIncomplete>
}
 800ec00:	bf00      	nop
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7ff f868 	bl	800dcec <USBD_LL_DevConnected>
}
 800ec1c:	bf00      	nop
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff f865 	bl	800dd02 <USBD_LL_DevDisconnected>
}
 800ec38:	bf00      	nop
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800ec48:	4b27      	ldr	r3, [pc, #156]	@ (800ece8 <USBD_LL_Init+0xa8>)
 800ec4a:	4a28      	ldr	r2, [pc, #160]	@ (800ecec <USBD_LL_Init+0xac>)
 800ec4c:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d143      	bne.n	800ecde <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800ec56:	4b24      	ldr	r3, [pc, #144]	@ (800ece8 <USBD_LL_Init+0xa8>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800ec60:	4b21      	ldr	r3, [pc, #132]	@ (800ece8 <USBD_LL_Init+0xa8>)
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800ec6a:	4b1f      	ldr	r3, [pc, #124]	@ (800ece8 <USBD_LL_Init+0xa8>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fee0 	bl	800ea38 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800ec78:	4b1b      	ldr	r3, [pc, #108]	@ (800ece8 <USBD_LL_Init+0xa8>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2240      	movs	r2, #64	@ 0x40
 800ec7e:	2100      	movs	r1, #0
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff fec4 	bl	800ea0e <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800ec86:	4b18      	ldr	r3, [pc, #96]	@ (800ece8 <USBD_LL_Init+0xa8>)
 800ec88:	6818      	ldr	r0, [r3, #0]
 800ec8a:	4b19      	ldr	r3, [pc, #100]	@ (800ecf0 <USBD_LL_Init+0xb0>)
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2240      	movs	r2, #64	@ 0x40
 800ec96:	4619      	mov	r1, r3
 800ec98:	f7ff feb9 	bl	800ea0e <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73fb      	strb	r3, [r7, #15]
 800eca0:	e01a      	b.n	800ecd8 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800eca2:	4b11      	ldr	r3, [pc, #68]	@ (800ece8 <USBD_LL_Init+0xa8>)
 800eca4:	6818      	ldr	r0, [r3, #0]
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
 800eca8:	4a12      	ldr	r2, [pc, #72]	@ (800ecf4 <USBD_LL_Init+0xb4>)
 800ecaa:	5cd3      	ldrb	r3, [r2, r3]
 800ecac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	2280      	movs	r2, #128	@ 0x80
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	f7ff feaa 	bl	800ea0e <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800ecba:	4b0b      	ldr	r3, [pc, #44]	@ (800ece8 <USBD_LL_Init+0xa8>)
 800ecbc:	6818      	ldr	r0, [r3, #0]
 800ecbe:	7bfb      	ldrb	r3, [r7, #15]
 800ecc0:	4a0d      	ldr	r2, [pc, #52]	@ (800ecf8 <USBD_LL_Init+0xb8>)
 800ecc2:	5cd3      	ldrb	r3, [r2, r3]
 800ecc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2240      	movs	r2, #64	@ 0x40
 800eccc:	4619      	mov	r1, r3
 800ecce:	f7ff fe9e 	bl	800ea0e <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ecd2:	7bfb      	ldrb	r3, [r7, #15]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	73fb      	strb	r3, [r7, #15]
 800ecd8:	7bfb      	ldrb	r3, [r7, #15]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d0e1      	beq.n	800eca2 <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	20001984 	.word	0x20001984
 800ecec:	20000b8c 	.word	0x20000b8c
 800ecf0:	200001de 	.word	0x200001de
 800ecf4:	20001618 	.word	0x20001618
 800ecf8:	20001620 	.word	0x20001620

0800ecfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed04:	2300      	movs	r3, #0
 800ed06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7f7 f917 	bl	8005f46 <HAL_PCD_Start>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ed1c:	7bfb      	ldrb	r3, [r7, #15]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 f92a 	bl	800ef78 <USBD_Get_USB_Status>
 800ed24:	4603      	mov	r3, r0
 800ed26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b084      	sub	sp, #16
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
 800ed3a:	4608      	mov	r0, r1
 800ed3c:	4611      	mov	r1, r2
 800ed3e:	461a      	mov	r2, r3
 800ed40:	4603      	mov	r3, r0
 800ed42:	70fb      	strb	r3, [r7, #3]
 800ed44:	460b      	mov	r3, r1
 800ed46:	70bb      	strb	r3, [r7, #2]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed50:	2300      	movs	r3, #0
 800ed52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800ed5a:	78bb      	ldrb	r3, [r7, #2]
 800ed5c:	883a      	ldrh	r2, [r7, #0]
 800ed5e:	78f9      	ldrb	r1, [r7, #3]
 800ed60:	f7f7 fe18 	bl	8006994 <HAL_PCD_EP_Open>
 800ed64:	4603      	mov	r3, r0
 800ed66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f000 f904 	bl	800ef78 <USBD_Get_USB_Status>
 800ed70:	4603      	mov	r3, r0
 800ed72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b084      	sub	sp, #16
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
 800ed86:	460b      	mov	r3, r1
 800ed88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800ed98:	78fa      	ldrb	r2, [r7, #3]
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7f7 fe63 	bl	8006a68 <HAL_PCD_EP_Close>
 800eda2:	4603      	mov	r3, r0
 800eda4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 f8e5 	bl	800ef78 <USBD_Get_USB_Status>
 800edae:	4603      	mov	r3, r0
 800edb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	460b      	mov	r3, r1
 800edc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edc8:	2300      	movs	r3, #0
 800edca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edcc:	2300      	movs	r3, #0
 800edce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800edd6:	78fa      	ldrb	r2, [r7, #3]
 800edd8:	4611      	mov	r1, r2
 800edda:	4618      	mov	r0, r3
 800eddc:	f7f7 ff1b 	bl	8006c16 <HAL_PCD_EP_SetStall>
 800ede0:	4603      	mov	r3, r0
 800ede2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f000 f8c6 	bl	800ef78 <USBD_Get_USB_Status>
 800edec:	4603      	mov	r3, r0
 800edee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
 800ee02:	460b      	mov	r3, r1
 800ee04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800ee14:	78fa      	ldrb	r2, [r7, #3]
 800ee16:	4611      	mov	r1, r2
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7f7 ff5f 	bl	8006cdc <HAL_PCD_EP_ClrStall>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ee22:	7bfb      	ldrb	r3, [r7, #15]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f000 f8a7 	bl	800ef78 <USBD_Get_USB_Status>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3710      	adds	r7, #16
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800ee4a:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800ee4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	da0b      	bge.n	800ee6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee5a:	68f9      	ldr	r1, [r7, #12]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	00db      	lsls	r3, r3, #3
 800ee60:	4413      	add	r3, r2
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	440b      	add	r3, r1
 800ee66:	3316      	adds	r3, #22
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	e00b      	b.n	800ee84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ee6c:	78fb      	ldrb	r3, [r7, #3]
 800ee6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee72:	68f9      	ldr	r1, [r7, #12]
 800ee74:	4613      	mov	r3, r2
 800ee76:	00db      	lsls	r3, r3, #3
 800ee78:	4413      	add	r3, r2
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	440b      	add	r3, r1
 800ee7e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ee82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3714      	adds	r7, #20
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b084      	sub	sp, #16
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eea0:	2300      	movs	r3, #0
 800eea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800eeaa:	78fa      	ldrb	r2, [r7, #3]
 800eeac:	4611      	mov	r1, r2
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f7 fd4c 	bl	800694c <HAL_PCD_SetAddress>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
 800eeba:	4618      	mov	r0, r3
 800eebc:	f000 f85c 	bl	800ef78 <USBD_Get_USB_Status>
 800eec0:	4603      	mov	r3, r0
 800eec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eec4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}

0800eece <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eece:	b580      	push	{r7, lr}
 800eed0:	b086      	sub	sp, #24
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	60f8      	str	r0, [r7, #12]
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	603b      	str	r3, [r7, #0]
 800eeda:	460b      	mov	r3, r1
 800eedc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eee2:	2300      	movs	r3, #0
 800eee4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800eeec:	7af9      	ldrb	r1, [r7, #11]
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	f7f7 fe56 	bl	8006ba2 <HAL_PCD_EP_Transmit>
 800eef6:	4603      	mov	r3, r0
 800eef8:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800eefa:	7dfb      	ldrb	r3, [r7, #23]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f000 f83b 	bl	800ef78 <USBD_Get_USB_Status>
 800ef02:	4603      	mov	r3, r0
 800ef04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef06:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3718      	adds	r7, #24
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b086      	sub	sp, #24
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	607a      	str	r2, [r7, #4]
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800ef2e:	7af9      	ldrb	r1, [r7, #11]
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	f7f7 fde2 	bl	8006afc <HAL_PCD_EP_Receive>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ef3c:	7dfb      	ldrb	r3, [r7, #23]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f000 f81a 	bl	800ef78 <USBD_Get_USB_Status>
 800ef44:	4603      	mov	r3, r0
 800ef46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef48:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b082      	sub	sp, #8
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800ef64:	78fa      	ldrb	r2, [r7, #3]
 800ef66:	4611      	mov	r1, r2
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7f7 fe02 	bl	8006b72 <HAL_PCD_EP_GetRxCount>
 800ef6e:	4603      	mov	r3, r0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef82:	2300      	movs	r3, #0
 800ef84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d817      	bhi.n	800efbc <USBD_Get_USB_Status+0x44>
 800ef8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ef94 <USBD_Get_USB_Status+0x1c>)
 800ef8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef92:	bf00      	nop
 800ef94:	0800efa5 	.word	0x0800efa5
 800ef98:	0800efab 	.word	0x0800efab
 800ef9c:	0800efb1 	.word	0x0800efb1
 800efa0:	0800efb7 	.word	0x0800efb7
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
    break;
 800efa8:	e00b      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800efaa:	2303      	movs	r3, #3
 800efac:	73fb      	strb	r3, [r7, #15]
    break;
 800efae:	e008      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800efb0:	2301      	movs	r3, #1
 800efb2:	73fb      	strb	r3, [r7, #15]
    break;
 800efb4:	e005      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800efb6:	2303      	movs	r3, #3
 800efb8:	73fb      	strb	r3, [r7, #15]
    break;
 800efba:	e002      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800efbc:	2303      	movs	r3, #3
 800efbe:	73fb      	strb	r3, [r7, #15]
    break;
 800efc0:	bf00      	nop
  }
  return usb_status;
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4603      	mov	r3, r0
 800efd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800efda:	2300      	movs	r3, #0
 800efdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800efde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efe2:	2b84      	cmp	r3, #132	@ 0x84
 800efe4:	d005      	beq.n	800eff2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800efe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	4413      	add	r3, r2
 800efee:	3303      	adds	r3, #3
 800eff0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800eff2:	68fb      	ldr	r3, [r7, #12]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f006:	f3ef 8305 	mrs	r3, IPSR
 800f00a:	607b      	str	r3, [r7, #4]
  return(result);
 800f00c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f00e:	2b00      	cmp	r3, #0
 800f010:	bf14      	ite	ne
 800f012:	2301      	movne	r3, #1
 800f014:	2300      	moveq	r3, #0
 800f016:	b2db      	uxtb	r3, r3
}
 800f018:	4618      	mov	r0, r3
 800f01a:	370c      	adds	r7, #12
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f028:	f001 f942 	bl	80102b0 <vTaskStartScheduler>
  
  return osOK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	bd80      	pop	{r7, pc}

0800f032 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f032:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f034:	b089      	sub	sp, #36	@ 0x24
 800f036:	af04      	add	r7, sp, #16
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	695b      	ldr	r3, [r3, #20]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d020      	beq.n	800f086 <osThreadCreate+0x54>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	699b      	ldr	r3, [r3, #24]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d01c      	beq.n	800f086 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685c      	ldr	r4, [r3, #4]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	691e      	ldr	r6, [r3, #16]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff ffb6 	bl	800efd0 <makeFreeRtosPriority>
 800f064:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	695b      	ldr	r3, [r3, #20]
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f06e:	9202      	str	r2, [sp, #8]
 800f070:	9301      	str	r3, [sp, #4]
 800f072:	9100      	str	r1, [sp, #0]
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	4632      	mov	r2, r6
 800f078:	4629      	mov	r1, r5
 800f07a:	4620      	mov	r0, r4
 800f07c:	f000 ff32 	bl	800fee4 <xTaskCreateStatic>
 800f080:	4603      	mov	r3, r0
 800f082:	60fb      	str	r3, [r7, #12]
 800f084:	e01c      	b.n	800f0c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	685c      	ldr	r4, [r3, #4]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f092:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7ff ff98 	bl	800efd0 <makeFreeRtosPriority>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	f107 030c 	add.w	r3, r7, #12
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	9200      	str	r2, [sp, #0]
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	4632      	mov	r2, r6
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f000 ff77 	bl	800ffa4 <xTaskCreate>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d001      	beq.n	800f0c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	e000      	b.n	800f0c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3714      	adds	r7, #20
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <osDelay+0x16>
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	e000      	b.n	800f0e2 <osDelay+0x18>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f001 f8ae 	bl	8010244 <vTaskDelay>
  
  return osOK;
 800f0e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b086      	sub	sp, #24
 800f0f6:	af02      	add	r7, sp, #8
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00f      	beq.n	800f124 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	2b01      	cmp	r3, #1
 800f108:	d10a      	bne.n	800f120 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	2203      	movs	r2, #3
 800f110:	9200      	str	r2, [sp, #0]
 800f112:	2200      	movs	r2, #0
 800f114:	2100      	movs	r1, #0
 800f116:	2001      	movs	r0, #1
 800f118:	f000 f9c0 	bl	800f49c <xQueueGenericCreateStatic>
 800f11c:	4603      	mov	r3, r0
 800f11e:	e016      	b.n	800f14e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f120:	2300      	movs	r3, #0
 800f122:	e014      	b.n	800f14e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	2b01      	cmp	r3, #1
 800f128:	d110      	bne.n	800f14c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800f12a:	2203      	movs	r2, #3
 800f12c:	2100      	movs	r1, #0
 800f12e:	2001      	movs	r0, #1
 800f130:	f000 fa31 	bl	800f596 <xQueueGenericCreate>
 800f134:	60f8      	str	r0, [r7, #12]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d005      	beq.n	800f148 <osSemaphoreCreate+0x56>
 800f13c:	2300      	movs	r3, #0
 800f13e:	2200      	movs	r2, #0
 800f140:	2100      	movs	r1, #0
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f000 fa82 	bl	800f64c <xQueueGenericSend>
      return sema;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	e000      	b.n	800f14e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f14c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
	...

0800f158 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f162:	2300      	movs	r3, #0
 800f164:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d101      	bne.n	800f170 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f16c:	2380      	movs	r3, #128	@ 0x80
 800f16e:	e03a      	b.n	800f1e6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f170:	2300      	movs	r3, #0
 800f172:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f17a:	d103      	bne.n	800f184 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f17c:	f04f 33ff 	mov.w	r3, #4294967295
 800f180:	60fb      	str	r3, [r7, #12]
 800f182:	e009      	b.n	800f198 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d006      	beq.n	800f198 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d101      	bne.n	800f198 <osSemaphoreWait+0x40>
      ticks = 1;
 800f194:	2301      	movs	r3, #1
 800f196:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f198:	f7ff ff32 	bl	800f000 <inHandlerMode>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d017      	beq.n	800f1d2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f1a2:	f107 0308 	add.w	r3, r7, #8
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fcf0 	bl	800fb90 <xQueueReceiveFromISR>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b01      	cmp	r3, #1
 800f1b4:	d001      	beq.n	800f1ba <osSemaphoreWait+0x62>
      return osErrorOS;
 800f1b6:	23ff      	movs	r3, #255	@ 0xff
 800f1b8:	e015      	b.n	800f1e6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d011      	beq.n	800f1e4 <osSemaphoreWait+0x8c>
 800f1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f1f0 <osSemaphoreWait+0x98>)
 800f1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1c6:	601a      	str	r2, [r3, #0]
 800f1c8:	f3bf 8f4f 	dsb	sy
 800f1cc:	f3bf 8f6f 	isb	sy
 800f1d0:	e008      	b.n	800f1e4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f1d2:	68f9      	ldr	r1, [r7, #12]
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 fbcb 	bl	800f970 <xQueueSemaphoreTake>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d001      	beq.n	800f1e4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f1e0:	23ff      	movs	r3, #255	@ 0xff
 800f1e2:	e000      	b.n	800f1e6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	e000ed04 	.word	0xe000ed04

0800f1f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f200:	2300      	movs	r3, #0
 800f202:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f204:	f7ff fefc 	bl	800f000 <inHandlerMode>
 800f208:	4603      	mov	r3, r0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d016      	beq.n	800f23c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f20e:	f107 0308 	add.w	r3, r7, #8
 800f212:	4619      	mov	r1, r3
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fb1b 	bl	800f850 <xQueueGiveFromISR>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d001      	beq.n	800f224 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f220:	23ff      	movs	r3, #255	@ 0xff
 800f222:	e017      	b.n	800f254 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d013      	beq.n	800f252 <osSemaphoreRelease+0x5e>
 800f22a:	4b0c      	ldr	r3, [pc, #48]	@ (800f25c <osSemaphoreRelease+0x68>)
 800f22c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	f3bf 8f4f 	dsb	sy
 800f236:	f3bf 8f6f 	isb	sy
 800f23a:	e00a      	b.n	800f252 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f23c:	2300      	movs	r3, #0
 800f23e:	2200      	movs	r2, #0
 800f240:	2100      	movs	r1, #0
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 fa02 	bl	800f64c <xQueueGenericSend>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d001      	beq.n	800f252 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f24e:	23ff      	movs	r3, #255	@ 0xff
 800f250:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f252:	68fb      	ldr	r3, [r7, #12]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	e000ed04 	.word	0xe000ed04

0800f260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f103 0208 	add.w	r2, r3, #8
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f04f 32ff 	mov.w	r2, #4294967295
 800f278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f103 0208 	add.w	r2, r3, #8
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f103 0208 	add.w	r2, r3, #8
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2200      	movs	r2, #0
 800f292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f294:	bf00      	nop
 800f296:	370c      	adds	r7, #12
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f2ae:	bf00      	nop
 800f2b0:	370c      	adds	r7, #12
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	b085      	sub	sp, #20
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	689a      	ldr	r2, [r3, #8]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	683a      	ldr	r2, [r7, #0]
 800f2de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	683a      	ldr	r2, [r7, #0]
 800f2e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	1c5a      	adds	r2, r3, #1
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	601a      	str	r2, [r3, #0]
}
 800f2f6:	bf00      	nop
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr

0800f302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f302:	b480      	push	{r7}
 800f304:	b085      	sub	sp, #20
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f318:	d103      	bne.n	800f322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	691b      	ldr	r3, [r3, #16]
 800f31e:	60fb      	str	r3, [r7, #12]
 800f320:	e00c      	b.n	800f33c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3308      	adds	r3, #8
 800f326:	60fb      	str	r3, [r7, #12]
 800f328:	e002      	b.n	800f330 <vListInsert+0x2e>
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68ba      	ldr	r2, [r7, #8]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d2f6      	bcs.n	800f32a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	685a      	ldr	r2, [r3, #4]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	683a      	ldr	r2, [r7, #0]
 800f34a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	683a      	ldr	r2, [r7, #0]
 800f356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	1c5a      	adds	r2, r3, #1
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	601a      	str	r2, [r3, #0]
}
 800f368:	bf00      	nop
 800f36a:	3714      	adds	r7, #20
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f374:	b480      	push	{r7}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	691b      	ldr	r3, [r3, #16]
 800f380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	6892      	ldr	r2, [r2, #8]
 800f38a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	6852      	ldr	r2, [r2, #4]
 800f394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d103      	bne.n	800f3a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	689a      	ldr	r2, [r3, #8]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	1e5a      	subs	r2, r3, #1
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d10b      	bne.n	800f3f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e0:	f383 8811 	msr	BASEPRI, r3
 800f3e4:	f3bf 8f6f 	isb	sy
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f3ee:	bf00      	nop
 800f3f0:	bf00      	nop
 800f3f2:	e7fd      	b.n	800f3f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f3f4:	f001 fed0 	bl	8011198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f400:	68f9      	ldr	r1, [r7, #12]
 800f402:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f404:	fb01 f303 	mul.w	r3, r1, r3
 800f408:	441a      	add	r2, r3
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2200      	movs	r2, #0
 800f412:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f424:	3b01      	subs	r3, #1
 800f426:	68f9      	ldr	r1, [r7, #12]
 800f428:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f42a:	fb01 f303 	mul.w	r3, r1, r3
 800f42e:	441a      	add	r2, r3
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	22ff      	movs	r2, #255	@ 0xff
 800f438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	22ff      	movs	r2, #255	@ 0xff
 800f440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d114      	bne.n	800f474 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	691b      	ldr	r3, [r3, #16]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d01a      	beq.n	800f488 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	3310      	adds	r3, #16
 800f456:	4618      	mov	r0, r3
 800f458:	f001 f984 	bl	8010764 <xTaskRemoveFromEventList>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d012      	beq.n	800f488 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f462:	4b0d      	ldr	r3, [pc, #52]	@ (800f498 <xQueueGenericReset+0xd0>)
 800f464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f468:	601a      	str	r2, [r3, #0]
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	e009      	b.n	800f488 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3310      	adds	r3, #16
 800f478:	4618      	mov	r0, r3
 800f47a:	f7ff fef1 	bl	800f260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	3324      	adds	r3, #36	@ 0x24
 800f482:	4618      	mov	r0, r3
 800f484:	f7ff feec 	bl	800f260 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f488:	f001 feb8 	bl	80111fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f48c:	2301      	movs	r3, #1
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	e000ed04 	.word	0xe000ed04

0800f49c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b08e      	sub	sp, #56	@ 0x38
 800f4a0:	af02      	add	r7, sp, #8
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
 800f4a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d10b      	bne.n	800f4c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b4:	f383 8811 	msr	BASEPRI, r3
 800f4b8:	f3bf 8f6f 	isb	sy
 800f4bc:	f3bf 8f4f 	dsb	sy
 800f4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f4c2:	bf00      	nop
 800f4c4:	bf00      	nop
 800f4c6:	e7fd      	b.n	800f4c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d10b      	bne.n	800f4e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f4e0:	bf00      	nop
 800f4e2:	bf00      	nop
 800f4e4:	e7fd      	b.n	800f4e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <xQueueGenericCreateStatic+0x56>
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <xQueueGenericCreateStatic+0x5a>
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e000      	b.n	800f4f8 <xQueueGenericCreateStatic+0x5c>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10b      	bne.n	800f514 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f500:	f383 8811 	msr	BASEPRI, r3
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	f3bf 8f4f 	dsb	sy
 800f50c:	623b      	str	r3, [r7, #32]
}
 800f50e:	bf00      	nop
 800f510:	bf00      	nop
 800f512:	e7fd      	b.n	800f510 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d102      	bne.n	800f520 <xQueueGenericCreateStatic+0x84>
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d101      	bne.n	800f524 <xQueueGenericCreateStatic+0x88>
 800f520:	2301      	movs	r3, #1
 800f522:	e000      	b.n	800f526 <xQueueGenericCreateStatic+0x8a>
 800f524:	2300      	movs	r3, #0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d10b      	bne.n	800f542 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f52e:	f383 8811 	msr	BASEPRI, r3
 800f532:	f3bf 8f6f 	isb	sy
 800f536:	f3bf 8f4f 	dsb	sy
 800f53a:	61fb      	str	r3, [r7, #28]
}
 800f53c:	bf00      	nop
 800f53e:	bf00      	nop
 800f540:	e7fd      	b.n	800f53e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f542:	2348      	movs	r3, #72	@ 0x48
 800f544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2b48      	cmp	r3, #72	@ 0x48
 800f54a:	d00b      	beq.n	800f564 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f550:	f383 8811 	msr	BASEPRI, r3
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	61bb      	str	r3, [r7, #24]
}
 800f55e:	bf00      	nop
 800f560:	bf00      	nop
 800f562:	e7fd      	b.n	800f560 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f564:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00d      	beq.n	800f58c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f578:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f57e:	9300      	str	r3, [sp, #0]
 800f580:	4613      	mov	r3, r2
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	68b9      	ldr	r1, [r7, #8]
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f000 f840 	bl	800f60c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f58e:	4618      	mov	r0, r3
 800f590:	3730      	adds	r7, #48	@ 0x30
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f596:	b580      	push	{r7, lr}
 800f598:	b08a      	sub	sp, #40	@ 0x28
 800f59a:	af02      	add	r7, sp, #8
 800f59c:	60f8      	str	r0, [r7, #12]
 800f59e:	60b9      	str	r1, [r7, #8]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10b      	bne.n	800f5c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	613b      	str	r3, [r7, #16]
}
 800f5bc:	bf00      	nop
 800f5be:	bf00      	nop
 800f5c0:	e7fd      	b.n	800f5be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	fb02 f303 	mul.w	r3, r2, r3
 800f5ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	3348      	adds	r3, #72	@ 0x48
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f001 ff03 	bl	80113dc <pvPortMalloc>
 800f5d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d011      	beq.n	800f602 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	3348      	adds	r3, #72	@ 0x48
 800f5e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f5f0:	79fa      	ldrb	r2, [r7, #7]
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	697a      	ldr	r2, [r7, #20]
 800f5fa:	68b9      	ldr	r1, [r7, #8]
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f000 f805 	bl	800f60c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f602:	69bb      	ldr	r3, [r7, #24]
	}
 800f604:	4618      	mov	r0, r3
 800f606:	3720      	adds	r7, #32
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
 800f618:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d103      	bne.n	800f628 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f620:	69bb      	ldr	r3, [r7, #24]
 800f622:	69ba      	ldr	r2, [r7, #24]
 800f624:	601a      	str	r2, [r3, #0]
 800f626:	e002      	b.n	800f62e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f63a:	2101      	movs	r1, #1
 800f63c:	69b8      	ldr	r0, [r7, #24]
 800f63e:	f7ff fec3 	bl	800f3c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f642:	bf00      	nop
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
	...

0800f64c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b08e      	sub	sp, #56	@ 0x38
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f65a:	2300      	movs	r3, #0
 800f65c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f664:	2b00      	cmp	r3, #0
 800f666:	d10b      	bne.n	800f680 <xQueueGenericSend+0x34>
	__asm volatile
 800f668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f66c:	f383 8811 	msr	BASEPRI, r3
 800f670:	f3bf 8f6f 	isb	sy
 800f674:	f3bf 8f4f 	dsb	sy
 800f678:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f67a:	bf00      	nop
 800f67c:	bf00      	nop
 800f67e:	e7fd      	b.n	800f67c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d103      	bne.n	800f68e <xQueueGenericSend+0x42>
 800f686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d101      	bne.n	800f692 <xQueueGenericSend+0x46>
 800f68e:	2301      	movs	r3, #1
 800f690:	e000      	b.n	800f694 <xQueueGenericSend+0x48>
 800f692:	2300      	movs	r3, #0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d10b      	bne.n	800f6b0 <xQueueGenericSend+0x64>
	__asm volatile
 800f698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f69c:	f383 8811 	msr	BASEPRI, r3
 800f6a0:	f3bf 8f6f 	isb	sy
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f6aa:	bf00      	nop
 800f6ac:	bf00      	nop
 800f6ae:	e7fd      	b.n	800f6ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	2b02      	cmp	r3, #2
 800f6b4:	d103      	bne.n	800f6be <xQueueGenericSend+0x72>
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d101      	bne.n	800f6c2 <xQueueGenericSend+0x76>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e000      	b.n	800f6c4 <xQueueGenericSend+0x78>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d10b      	bne.n	800f6e0 <xQueueGenericSend+0x94>
	__asm volatile
 800f6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6cc:	f383 8811 	msr	BASEPRI, r3
 800f6d0:	f3bf 8f6f 	isb	sy
 800f6d4:	f3bf 8f4f 	dsb	sy
 800f6d8:	623b      	str	r3, [r7, #32]
}
 800f6da:	bf00      	nop
 800f6dc:	bf00      	nop
 800f6de:	e7fd      	b.n	800f6dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6e0:	f001 fa06 	bl	8010af0 <xTaskGetSchedulerState>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d102      	bne.n	800f6f0 <xQueueGenericSend+0xa4>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d101      	bne.n	800f6f4 <xQueueGenericSend+0xa8>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e000      	b.n	800f6f6 <xQueueGenericSend+0xaa>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d10b      	bne.n	800f712 <xQueueGenericSend+0xc6>
	__asm volatile
 800f6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6fe:	f383 8811 	msr	BASEPRI, r3
 800f702:	f3bf 8f6f 	isb	sy
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	61fb      	str	r3, [r7, #28]
}
 800f70c:	bf00      	nop
 800f70e:	bf00      	nop
 800f710:	e7fd      	b.n	800f70e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f712:	f001 fd41 	bl	8011198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f71c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f71e:	429a      	cmp	r2, r3
 800f720:	d302      	bcc.n	800f728 <xQueueGenericSend+0xdc>
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	2b02      	cmp	r3, #2
 800f726:	d129      	bne.n	800f77c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f728:	683a      	ldr	r2, [r7, #0]
 800f72a:	68b9      	ldr	r1, [r7, #8]
 800f72c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f72e:	f000 fac9 	bl	800fcc4 <prvCopyDataToQueue>
 800f732:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d010      	beq.n	800f75e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f73e:	3324      	adds	r3, #36	@ 0x24
 800f740:	4618      	mov	r0, r3
 800f742:	f001 f80f 	bl	8010764 <xTaskRemoveFromEventList>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d013      	beq.n	800f774 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f74c:	4b3f      	ldr	r3, [pc, #252]	@ (800f84c <xQueueGenericSend+0x200>)
 800f74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f752:	601a      	str	r2, [r3, #0]
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	f3bf 8f6f 	isb	sy
 800f75c:	e00a      	b.n	800f774 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f760:	2b00      	cmp	r3, #0
 800f762:	d007      	beq.n	800f774 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f764:	4b39      	ldr	r3, [pc, #228]	@ (800f84c <xQueueGenericSend+0x200>)
 800f766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f76a:	601a      	str	r2, [r3, #0]
 800f76c:	f3bf 8f4f 	dsb	sy
 800f770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f774:	f001 fd42 	bl	80111fc <vPortExitCritical>
				return pdPASS;
 800f778:	2301      	movs	r3, #1
 800f77a:	e063      	b.n	800f844 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d103      	bne.n	800f78a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f782:	f001 fd3b 	bl	80111fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f786:	2300      	movs	r3, #0
 800f788:	e05c      	b.n	800f844 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d106      	bne.n	800f79e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f790:	f107 0314 	add.w	r3, r7, #20
 800f794:	4618      	mov	r0, r3
 800f796:	f001 f849 	bl	801082c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f79a:	2301      	movs	r3, #1
 800f79c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f79e:	f001 fd2d 	bl	80111fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7a2:	f000 fdef 	bl	8010384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7a6:	f001 fcf7 	bl	8011198 <vPortEnterCritical>
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f7b0:	b25b      	sxtb	r3, r3
 800f7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b6:	d103      	bne.n	800f7c0 <xQueueGenericSend+0x174>
 800f7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7c6:	b25b      	sxtb	r3, r3
 800f7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7cc:	d103      	bne.n	800f7d6 <xQueueGenericSend+0x18a>
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7d6:	f001 fd11 	bl	80111fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7da:	1d3a      	adds	r2, r7, #4
 800f7dc:	f107 0314 	add.w	r3, r7, #20
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f001 f838 	bl	8010858 <xTaskCheckForTimeOut>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d124      	bne.n	800f838 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f7ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f7f0:	f000 fb60 	bl	800feb4 <prvIsQueueFull>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d018      	beq.n	800f82c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fc:	3310      	adds	r3, #16
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	4611      	mov	r1, r2
 800f802:	4618      	mov	r0, r3
 800f804:	f000 ff88 	bl	8010718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f80a:	f000 faeb 	bl	800fde4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f80e:	f000 fdc7 	bl	80103a0 <xTaskResumeAll>
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	f47f af7c 	bne.w	800f712 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f81a:	4b0c      	ldr	r3, [pc, #48]	@ (800f84c <xQueueGenericSend+0x200>)
 800f81c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f820:	601a      	str	r2, [r3, #0]
 800f822:	f3bf 8f4f 	dsb	sy
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	e772      	b.n	800f712 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f82c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f82e:	f000 fad9 	bl	800fde4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f832:	f000 fdb5 	bl	80103a0 <xTaskResumeAll>
 800f836:	e76c      	b.n	800f712 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f838:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f83a:	f000 fad3 	bl	800fde4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f83e:	f000 fdaf 	bl	80103a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f842:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f844:	4618      	mov	r0, r3
 800f846:	3738      	adds	r7, #56	@ 0x38
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	e000ed04 	.word	0xe000ed04

0800f850 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b08e      	sub	sp, #56	@ 0x38
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10b      	bne.n	800f87c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f868:	f383 8811 	msr	BASEPRI, r3
 800f86c:	f3bf 8f6f 	isb	sy
 800f870:	f3bf 8f4f 	dsb	sy
 800f874:	623b      	str	r3, [r7, #32]
}
 800f876:	bf00      	nop
 800f878:	bf00      	nop
 800f87a:	e7fd      	b.n	800f878 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00b      	beq.n	800f89c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f888:	f383 8811 	msr	BASEPRI, r3
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	61fb      	str	r3, [r7, #28]
}
 800f896:	bf00      	nop
 800f898:	bf00      	nop
 800f89a:	e7fd      	b.n	800f898 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d103      	bne.n	800f8ac <xQueueGiveFromISR+0x5c>
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d101      	bne.n	800f8b0 <xQueueGiveFromISR+0x60>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e000      	b.n	800f8b2 <xQueueGiveFromISR+0x62>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d10b      	bne.n	800f8ce <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ba:	f383 8811 	msr	BASEPRI, r3
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	61bb      	str	r3, [r7, #24]
}
 800f8c8:	bf00      	nop
 800f8ca:	bf00      	nop
 800f8cc:	e7fd      	b.n	800f8ca <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8ce:	f001 fd43 	bl	8011358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f8d2:	f3ef 8211 	mrs	r2, BASEPRI
 800f8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8da:	f383 8811 	msr	BASEPRI, r3
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f3bf 8f4f 	dsb	sy
 800f8e6:	617a      	str	r2, [r7, #20]
 800f8e8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f8ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d22b      	bcs.n	800f956 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f900:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90a:	1c5a      	adds	r2, r3, #1
 800f90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f910:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f918:	d112      	bne.n	800f940 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d016      	beq.n	800f950 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f924:	3324      	adds	r3, #36	@ 0x24
 800f926:	4618      	mov	r0, r3
 800f928:	f000 ff1c 	bl	8010764 <xTaskRemoveFromEventList>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00e      	beq.n	800f950 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00b      	beq.n	800f950 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	2201      	movs	r2, #1
 800f93c:	601a      	str	r2, [r3, #0]
 800f93e:	e007      	b.n	800f950 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f944:	3301      	adds	r3, #1
 800f946:	b2db      	uxtb	r3, r3
 800f948:	b25a      	sxtb	r2, r3
 800f94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f94c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f950:	2301      	movs	r3, #1
 800f952:	637b      	str	r3, [r7, #52]	@ 0x34
 800f954:	e001      	b.n	800f95a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f956:	2300      	movs	r3, #0
 800f958:	637b      	str	r3, [r7, #52]	@ 0x34
 800f95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f95c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f964:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3738      	adds	r7, #56	@ 0x38
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b08e      	sub	sp, #56	@ 0x38
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f97a:	2300      	movs	r3, #0
 800f97c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f982:	2300      	movs	r3, #0
 800f984:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d10b      	bne.n	800f9a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f990:	f383 8811 	msr	BASEPRI, r3
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	f3bf 8f4f 	dsb	sy
 800f99c:	623b      	str	r3, [r7, #32]
}
 800f99e:	bf00      	nop
 800f9a0:	bf00      	nop
 800f9a2:	e7fd      	b.n	800f9a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d00b      	beq.n	800f9c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b0:	f383 8811 	msr	BASEPRI, r3
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	61fb      	str	r3, [r7, #28]
}
 800f9be:	bf00      	nop
 800f9c0:	bf00      	nop
 800f9c2:	e7fd      	b.n	800f9c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9c4:	f001 f894 	bl	8010af0 <xTaskGetSchedulerState>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d102      	bne.n	800f9d4 <xQueueSemaphoreTake+0x64>
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d101      	bne.n	800f9d8 <xQueueSemaphoreTake+0x68>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	e000      	b.n	800f9da <xQueueSemaphoreTake+0x6a>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d10b      	bne.n	800f9f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	61bb      	str	r3, [r7, #24]
}
 800f9f0:	bf00      	nop
 800f9f2:	bf00      	nop
 800f9f4:	e7fd      	b.n	800f9f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f9f6:	f001 fbcf 	bl	8011198 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fa00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d024      	beq.n	800fa50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fa06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa08:	1e5a      	subs	r2, r3, #1
 800fa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d104      	bne.n	800fa20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fa16:	f001 fa17 	bl	8010e48 <pvTaskIncrementMutexHeldCount>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa22:	691b      	ldr	r3, [r3, #16]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00f      	beq.n	800fa48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa2a:	3310      	adds	r3, #16
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f000 fe99 	bl	8010764 <xTaskRemoveFromEventList>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d007      	beq.n	800fa48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fa38:	4b54      	ldr	r3, [pc, #336]	@ (800fb8c <xQueueSemaphoreTake+0x21c>)
 800fa3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa3e:	601a      	str	r2, [r3, #0]
 800fa40:	f3bf 8f4f 	dsb	sy
 800fa44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fa48:	f001 fbd8 	bl	80111fc <vPortExitCritical>
				return pdPASS;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	e098      	b.n	800fb82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d112      	bne.n	800fa7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00b      	beq.n	800fa74 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fa5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa60:	f383 8811 	msr	BASEPRI, r3
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	f3bf 8f4f 	dsb	sy
 800fa6c:	617b      	str	r3, [r7, #20]
}
 800fa6e:	bf00      	nop
 800fa70:	bf00      	nop
 800fa72:	e7fd      	b.n	800fa70 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fa74:	f001 fbc2 	bl	80111fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	e082      	b.n	800fb82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d106      	bne.n	800fa90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa82:	f107 030c 	add.w	r3, r7, #12
 800fa86:	4618      	mov	r0, r3
 800fa88:	f000 fed0 	bl	801082c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa90:	f001 fbb4 	bl	80111fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa94:	f000 fc76 	bl	8010384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa98:	f001 fb7e 	bl	8011198 <vPortEnterCritical>
 800fa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800faa2:	b25b      	sxtb	r3, r3
 800faa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa8:	d103      	bne.n	800fab2 <xQueueSemaphoreTake+0x142>
 800faaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faac:	2200      	movs	r2, #0
 800faae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fab8:	b25b      	sxtb	r3, r3
 800faba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fabe:	d103      	bne.n	800fac8 <xQueueSemaphoreTake+0x158>
 800fac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fac8:	f001 fb98 	bl	80111fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800facc:	463a      	mov	r2, r7
 800face:	f107 030c 	add.w	r3, r7, #12
 800fad2:	4611      	mov	r1, r2
 800fad4:	4618      	mov	r0, r3
 800fad6:	f000 febf 	bl	8010858 <xTaskCheckForTimeOut>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d132      	bne.n	800fb46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fae0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fae2:	f000 f9d1 	bl	800fe88 <prvIsQueueEmpty>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d026      	beq.n	800fb3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800faec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d109      	bne.n	800fb08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800faf4:	f001 fb50 	bl	8011198 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800faf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f001 f815 	bl	8010b2c <xTaskPriorityInherit>
 800fb02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fb04:	f001 fb7a 	bl	80111fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb0a:	3324      	adds	r3, #36	@ 0x24
 800fb0c:	683a      	ldr	r2, [r7, #0]
 800fb0e:	4611      	mov	r1, r2
 800fb10:	4618      	mov	r0, r3
 800fb12:	f000 fe01 	bl	8010718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fb16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb18:	f000 f964 	bl	800fde4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fb1c:	f000 fc40 	bl	80103a0 <xTaskResumeAll>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f47f af67 	bne.w	800f9f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fb28:	4b18      	ldr	r3, [pc, #96]	@ (800fb8c <xQueueSemaphoreTake+0x21c>)
 800fb2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	f3bf 8f6f 	isb	sy
 800fb38:	e75d      	b.n	800f9f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fb3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb3c:	f000 f952 	bl	800fde4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb40:	f000 fc2e 	bl	80103a0 <xTaskResumeAll>
 800fb44:	e757      	b.n	800f9f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fb46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb48:	f000 f94c 	bl	800fde4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb4c:	f000 fc28 	bl	80103a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb52:	f000 f999 	bl	800fe88 <prvIsQueueEmpty>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f43f af4c 	beq.w	800f9f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00d      	beq.n	800fb80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fb64:	f001 fb18 	bl	8011198 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fb68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb6a:	f000 f893 	bl	800fc94 <prvGetDisinheritPriorityAfterTimeout>
 800fb6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fb76:	4618      	mov	r0, r3
 800fb78:	f001 f8d6 	bl	8010d28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fb7c:	f001 fb3e 	bl	80111fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fb80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3738      	adds	r7, #56	@ 0x38
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	e000ed04 	.word	0xe000ed04

0800fb90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b08e      	sub	sp, #56	@ 0x38
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d10b      	bne.n	800fbbe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	623b      	str	r3, [r7, #32]
}
 800fbb8:	bf00      	nop
 800fbba:	bf00      	nop
 800fbbc:	e7fd      	b.n	800fbba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d103      	bne.n	800fbcc <xQueueReceiveFromISR+0x3c>
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d101      	bne.n	800fbd0 <xQueueReceiveFromISR+0x40>
 800fbcc:	2301      	movs	r3, #1
 800fbce:	e000      	b.n	800fbd2 <xQueueReceiveFromISR+0x42>
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d10b      	bne.n	800fbee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbda:	f383 8811 	msr	BASEPRI, r3
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	61fb      	str	r3, [r7, #28]
}
 800fbe8:	bf00      	nop
 800fbea:	bf00      	nop
 800fbec:	e7fd      	b.n	800fbea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbee:	f001 fbb3 	bl	8011358 <vPortValidateInterruptPriority>
	__asm volatile
 800fbf2:	f3ef 8211 	mrs	r2, BASEPRI
 800fbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbfa:	f383 8811 	msr	BASEPRI, r3
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f3bf 8f4f 	dsb	sy
 800fc06:	61ba      	str	r2, [r7, #24]
 800fc08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fc0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d02f      	beq.n	800fc7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fc24:	68b9      	ldr	r1, [r7, #8]
 800fc26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc28:	f000 f8b6 	bl	800fd98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc2e:	1e5a      	subs	r2, r3, #1
 800fc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fc34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc3c:	d112      	bne.n	800fc64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d016      	beq.n	800fc74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc48:	3310      	adds	r3, #16
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 fd8a 	bl	8010764 <xTaskRemoveFromEventList>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00e      	beq.n	800fc74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00b      	beq.n	800fc74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	601a      	str	r2, [r3, #0]
 800fc62:	e007      	b.n	800fc74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fc64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc68:	3301      	adds	r3, #1
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	b25a      	sxtb	r2, r3
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fc74:	2301      	movs	r3, #1
 800fc76:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc78:	e001      	b.n	800fc7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc80:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	f383 8811 	msr	BASEPRI, r3
}
 800fc88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3738      	adds	r7, #56	@ 0x38
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fc94:	b480      	push	{r7}
 800fc96:	b085      	sub	sp, #20
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d006      	beq.n	800fcb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f1c3 0307 	rsb	r3, r3, #7
 800fcae:	60fb      	str	r3, [r7, #12]
 800fcb0:	e001      	b.n	800fcb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
	}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3714      	adds	r7, #20
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d10d      	bne.n	800fcfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d14d      	bne.n	800fd86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f000 ff92 	bl	8010c18 <xTaskPriorityDisinherit>
 800fcf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	609a      	str	r2, [r3, #8]
 800fcfc:	e043      	b.n	800fd86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d119      	bne.n	800fd38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	6858      	ldr	r0, [r3, #4]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	68b9      	ldr	r1, [r7, #8]
 800fd10:	f002 ff87 	bl	8012c22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	685a      	ldr	r2, [r3, #4]
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd1c:	441a      	add	r2, r3
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	685a      	ldr	r2, [r3, #4]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d32b      	bcc.n	800fd86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	605a      	str	r2, [r3, #4]
 800fd36:	e026      	b.n	800fd86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	68d8      	ldr	r0, [r3, #12]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd40:	461a      	mov	r2, r3
 800fd42:	68b9      	ldr	r1, [r7, #8]
 800fd44:	f002 ff6d 	bl	8012c22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	68da      	ldr	r2, [r3, #12]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd50:	425b      	negs	r3, r3
 800fd52:	441a      	add	r2, r3
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	68da      	ldr	r2, [r3, #12]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d207      	bcs.n	800fd74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	689a      	ldr	r2, [r3, #8]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd6c:	425b      	negs	r3, r3
 800fd6e:	441a      	add	r2, r3
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	d105      	bne.n	800fd86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	3b01      	subs	r3, #1
 800fd84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	1c5a      	adds	r2, r3, #1
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fd8e:	697b      	ldr	r3, [r7, #20]
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3718      	adds	r7, #24
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d018      	beq.n	800fddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	68da      	ldr	r2, [r3, #12]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdb2:	441a      	add	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	68da      	ldr	r2, [r3, #12]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d303      	bcc.n	800fdcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	68d9      	ldr	r1, [r3, #12]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	6838      	ldr	r0, [r7, #0]
 800fdd8:	f002 ff23 	bl	8012c22 <memcpy>
	}
}
 800fddc:	bf00      	nop
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fdec:	f001 f9d4 	bl	8011198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fdf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fdf8:	e011      	b.n	800fe1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d012      	beq.n	800fe28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	3324      	adds	r3, #36	@ 0x24
 800fe06:	4618      	mov	r0, r3
 800fe08:	f000 fcac 	bl	8010764 <xTaskRemoveFromEventList>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fe12:	f000 fd85 	bl	8010920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fe16:	7bfb      	ldrb	r3, [r7, #15]
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	dce9      	bgt.n	800fdfa <prvUnlockQueue+0x16>
 800fe26:	e000      	b.n	800fe2a <prvUnlockQueue+0x46>
					break;
 800fe28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	22ff      	movs	r2, #255	@ 0xff
 800fe2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800fe32:	f001 f9e3 	bl	80111fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fe36:	f001 f9af 	bl	8011198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fe40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe42:	e011      	b.n	800fe68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d012      	beq.n	800fe72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	3310      	adds	r3, #16
 800fe50:	4618      	mov	r0, r3
 800fe52:	f000 fc87 	bl	8010764 <xTaskRemoveFromEventList>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d001      	beq.n	800fe60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fe5c:	f000 fd60 	bl	8010920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fe60:	7bbb      	ldrb	r3, [r7, #14]
 800fe62:	3b01      	subs	r3, #1
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	dce9      	bgt.n	800fe44 <prvUnlockQueue+0x60>
 800fe70:	e000      	b.n	800fe74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fe72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	22ff      	movs	r2, #255	@ 0xff
 800fe78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800fe7c:	f001 f9be 	bl	80111fc <vPortExitCritical>
}
 800fe80:	bf00      	nop
 800fe82:	3710      	adds	r7, #16
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fe90:	f001 f982 	bl	8011198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d102      	bne.n	800fea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	60fb      	str	r3, [r7, #12]
 800fea0:	e001      	b.n	800fea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fea2:	2300      	movs	r3, #0
 800fea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fea6:	f001 f9a9 	bl	80111fc <vPortExitCritical>

	return xReturn;
 800feaa:	68fb      	ldr	r3, [r7, #12]
}
 800feac:	4618      	mov	r0, r3
 800feae:	3710      	adds	r7, #16
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800febc:	f001 f96c 	bl	8011198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fec8:	429a      	cmp	r2, r3
 800feca:	d102      	bne.n	800fed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fecc:	2301      	movs	r3, #1
 800fece:	60fb      	str	r3, [r7, #12]
 800fed0:	e001      	b.n	800fed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fed2:	2300      	movs	r3, #0
 800fed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fed6:	f001 f991 	bl	80111fc <vPortExitCritical>

	return xReturn;
 800feda:	68fb      	ldr	r3, [r7, #12]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b08e      	sub	sp, #56	@ 0x38
 800fee8:	af04      	add	r7, sp, #16
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	607a      	str	r2, [r7, #4]
 800fef0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d10b      	bne.n	800ff10 <xTaskCreateStatic+0x2c>
	__asm volatile
 800fef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fefc:	f383 8811 	msr	BASEPRI, r3
 800ff00:	f3bf 8f6f 	isb	sy
 800ff04:	f3bf 8f4f 	dsb	sy
 800ff08:	623b      	str	r3, [r7, #32]
}
 800ff0a:	bf00      	nop
 800ff0c:	bf00      	nop
 800ff0e:	e7fd      	b.n	800ff0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ff10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10b      	bne.n	800ff2e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	61fb      	str	r3, [r7, #28]
}
 800ff28:	bf00      	nop
 800ff2a:	bf00      	nop
 800ff2c:	e7fd      	b.n	800ff2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ff2e:	23a0      	movs	r3, #160	@ 0xa0
 800ff30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	2ba0      	cmp	r3, #160	@ 0xa0
 800ff36:	d00b      	beq.n	800ff50 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ff38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff3c:	f383 8811 	msr	BASEPRI, r3
 800ff40:	f3bf 8f6f 	isb	sy
 800ff44:	f3bf 8f4f 	dsb	sy
 800ff48:	61bb      	str	r3, [r7, #24]
}
 800ff4a:	bf00      	nop
 800ff4c:	bf00      	nop
 800ff4e:	e7fd      	b.n	800ff4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ff50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ff52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d01e      	beq.n	800ff96 <xTaskCreateStatic+0xb2>
 800ff58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d01b      	beq.n	800ff96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ff62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ff68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ff70:	2300      	movs	r3, #0
 800ff72:	9303      	str	r3, [sp, #12]
 800ff74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff76:	9302      	str	r3, [sp, #8]
 800ff78:	f107 0314 	add.w	r3, r7, #20
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	68b9      	ldr	r1, [r7, #8]
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f000 f851 	bl	8010030 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ff8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff90:	f000 f8ee 	bl	8010170 <prvAddNewTaskToReadyList>
 800ff94:	e001      	b.n	800ff9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ff96:	2300      	movs	r3, #0
 800ff98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ff9a:	697b      	ldr	r3, [r7, #20]
	}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3728      	adds	r7, #40	@ 0x28
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b08c      	sub	sp, #48	@ 0x30
 800ffa8:	af04      	add	r7, sp, #16
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	603b      	str	r3, [r7, #0]
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ffb4:	88fb      	ldrh	r3, [r7, #6]
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f001 fa0f 	bl	80113dc <pvPortMalloc>
 800ffbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d00e      	beq.n	800ffe4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ffc6:	20a0      	movs	r0, #160	@ 0xa0
 800ffc8:	f001 fa08 	bl	80113dc <pvPortMalloc>
 800ffcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d003      	beq.n	800ffdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	697a      	ldr	r2, [r7, #20]
 800ffd8:	631a      	str	r2, [r3, #48]	@ 0x30
 800ffda:	e005      	b.n	800ffe8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ffdc:	6978      	ldr	r0, [r7, #20]
 800ffde:	f001 facb 	bl	8011578 <vPortFree>
 800ffe2:	e001      	b.n	800ffe8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d017      	beq.n	801001e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fff6:	88fa      	ldrh	r2, [r7, #6]
 800fff8:	2300      	movs	r3, #0
 800fffa:	9303      	str	r3, [sp, #12]
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	9302      	str	r3, [sp, #8]
 8010000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010002:	9301      	str	r3, [sp, #4]
 8010004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	68b9      	ldr	r1, [r7, #8]
 801000c:	68f8      	ldr	r0, [r7, #12]
 801000e:	f000 f80f 	bl	8010030 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010012:	69f8      	ldr	r0, [r7, #28]
 8010014:	f000 f8ac 	bl	8010170 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010018:	2301      	movs	r3, #1
 801001a:	61bb      	str	r3, [r7, #24]
 801001c:	e002      	b.n	8010024 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801001e:	f04f 33ff 	mov.w	r3, #4294967295
 8010022:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010024:	69bb      	ldr	r3, [r7, #24]
	}
 8010026:	4618      	mov	r0, r3
 8010028:	3720      	adds	r7, #32
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
	...

08010030 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
 801003c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801003e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010048:	3b01      	subs	r3, #1
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	4413      	add	r3, r2
 801004e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	f023 0307 	bic.w	r3, r3, #7
 8010056:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010058:	69bb      	ldr	r3, [r7, #24]
 801005a:	f003 0307 	and.w	r3, r3, #7
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00b      	beq.n	801007a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8010062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010066:	f383 8811 	msr	BASEPRI, r3
 801006a:	f3bf 8f6f 	isb	sy
 801006e:	f3bf 8f4f 	dsb	sy
 8010072:	617b      	str	r3, [r7, #20]
}
 8010074:	bf00      	nop
 8010076:	bf00      	nop
 8010078:	e7fd      	b.n	8010076 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d01f      	beq.n	80100c0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010080:	2300      	movs	r3, #0
 8010082:	61fb      	str	r3, [r7, #28]
 8010084:	e012      	b.n	80100ac <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010086:	68ba      	ldr	r2, [r7, #8]
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	4413      	add	r3, r2
 801008c:	7819      	ldrb	r1, [r3, #0]
 801008e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	4413      	add	r3, r2
 8010094:	3334      	adds	r3, #52	@ 0x34
 8010096:	460a      	mov	r2, r1
 8010098:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	4413      	add	r3, r2
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d006      	beq.n	80100b4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	3301      	adds	r3, #1
 80100aa:	61fb      	str	r3, [r7, #28]
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	2b0f      	cmp	r3, #15
 80100b0:	d9e9      	bls.n	8010086 <prvInitialiseNewTask+0x56>
 80100b2:	e000      	b.n	80100b6 <prvInitialiseNewTask+0x86>
			{
				break;
 80100b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80100b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80100be:	e003      	b.n	80100c8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80100c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80100c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ca:	2b06      	cmp	r3, #6
 80100cc:	d901      	bls.n	80100d2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80100ce:	2306      	movs	r3, #6
 80100d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80100d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80100d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100dc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80100de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e0:	2200      	movs	r2, #0
 80100e2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80100e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e6:	3304      	adds	r3, #4
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7ff f8d9 	bl	800f2a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80100ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f0:	3318      	adds	r3, #24
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7ff f8d4 	bl	800f2a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80100f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010100:	f1c3 0207 	rsb	r2, r3, #7
 8010104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010106:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801010a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801010c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801010e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010110:	2200      	movs	r2, #0
 8010112:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010118:	2200      	movs	r2, #0
 801011a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801011e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010120:	334c      	adds	r3, #76	@ 0x4c
 8010122:	224c      	movs	r2, #76	@ 0x4c
 8010124:	2100      	movs	r1, #0
 8010126:	4618      	mov	r0, r3
 8010128:	f002 fc88 	bl	8012a3c <memset>
 801012c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801012e:	4a0d      	ldr	r2, [pc, #52]	@ (8010164 <prvInitialiseNewTask+0x134>)
 8010130:	651a      	str	r2, [r3, #80]	@ 0x50
 8010132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010134:	4a0c      	ldr	r2, [pc, #48]	@ (8010168 <prvInitialiseNewTask+0x138>)
 8010136:	655a      	str	r2, [r3, #84]	@ 0x54
 8010138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013a:	4a0c      	ldr	r2, [pc, #48]	@ (801016c <prvInitialiseNewTask+0x13c>)
 801013c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	68f9      	ldr	r1, [r7, #12]
 8010142:	69b8      	ldr	r0, [r7, #24]
 8010144:	f000 fefa 	bl	8010f3c <pxPortInitialiseStack>
 8010148:	4602      	mov	r2, r0
 801014a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801014c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801014e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801015a:	bf00      	nop
 801015c:	3720      	adds	r7, #32
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	200056e4 	.word	0x200056e4
 8010168:	2000574c 	.word	0x2000574c
 801016c:	200057b4 	.word	0x200057b4

08010170 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010178:	f001 f80e 	bl	8011198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801017c:	4b2a      	ldr	r3, [pc, #168]	@ (8010228 <prvAddNewTaskToReadyList+0xb8>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	3301      	adds	r3, #1
 8010182:	4a29      	ldr	r2, [pc, #164]	@ (8010228 <prvAddNewTaskToReadyList+0xb8>)
 8010184:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010186:	4b29      	ldr	r3, [pc, #164]	@ (801022c <prvAddNewTaskToReadyList+0xbc>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d109      	bne.n	80101a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801018e:	4a27      	ldr	r2, [pc, #156]	@ (801022c <prvAddNewTaskToReadyList+0xbc>)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010194:	4b24      	ldr	r3, [pc, #144]	@ (8010228 <prvAddNewTaskToReadyList+0xb8>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	2b01      	cmp	r3, #1
 801019a:	d110      	bne.n	80101be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801019c:	f000 fbe4 	bl	8010968 <prvInitialiseTaskLists>
 80101a0:	e00d      	b.n	80101be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80101a2:	4b23      	ldr	r3, [pc, #140]	@ (8010230 <prvAddNewTaskToReadyList+0xc0>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d109      	bne.n	80101be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80101aa:	4b20      	ldr	r3, [pc, #128]	@ (801022c <prvAddNewTaskToReadyList+0xbc>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d802      	bhi.n	80101be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80101b8:	4a1c      	ldr	r2, [pc, #112]	@ (801022c <prvAddNewTaskToReadyList+0xbc>)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80101be:	4b1d      	ldr	r3, [pc, #116]	@ (8010234 <prvAddNewTaskToReadyList+0xc4>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3301      	adds	r3, #1
 80101c4:	4a1b      	ldr	r2, [pc, #108]	@ (8010234 <prvAddNewTaskToReadyList+0xc4>)
 80101c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101cc:	2201      	movs	r2, #1
 80101ce:	409a      	lsls	r2, r3
 80101d0:	4b19      	ldr	r3, [pc, #100]	@ (8010238 <prvAddNewTaskToReadyList+0xc8>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4313      	orrs	r3, r2
 80101d6:	4a18      	ldr	r2, [pc, #96]	@ (8010238 <prvAddNewTaskToReadyList+0xc8>)
 80101d8:	6013      	str	r3, [r2, #0]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101de:	4613      	mov	r3, r2
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	4a15      	ldr	r2, [pc, #84]	@ (801023c <prvAddNewTaskToReadyList+0xcc>)
 80101e8:	441a      	add	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	3304      	adds	r3, #4
 80101ee:	4619      	mov	r1, r3
 80101f0:	4610      	mov	r0, r2
 80101f2:	f7ff f862 	bl	800f2ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80101f6:	f001 f801 	bl	80111fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80101fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010230 <prvAddNewTaskToReadyList+0xc0>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00e      	beq.n	8010220 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010202:	4b0a      	ldr	r3, [pc, #40]	@ (801022c <prvAddNewTaskToReadyList+0xbc>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801020c:	429a      	cmp	r2, r3
 801020e:	d207      	bcs.n	8010220 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010210:	4b0b      	ldr	r3, [pc, #44]	@ (8010240 <prvAddNewTaskToReadyList+0xd0>)
 8010212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010216:	601a      	str	r2, [r3, #0]
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010220:	bf00      	nop
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	20001a88 	.word	0x20001a88
 801022c:	20001988 	.word	0x20001988
 8010230:	20001a94 	.word	0x20001a94
 8010234:	20001aa4 	.word	0x20001aa4
 8010238:	20001a90 	.word	0x20001a90
 801023c:	2000198c 	.word	0x2000198c
 8010240:	e000ed04 	.word	0xe000ed04

08010244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801024c:	2300      	movs	r3, #0
 801024e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d018      	beq.n	8010288 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010256:	4b14      	ldr	r3, [pc, #80]	@ (80102a8 <vTaskDelay+0x64>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00b      	beq.n	8010276 <vTaskDelay+0x32>
	__asm volatile
 801025e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010262:	f383 8811 	msr	BASEPRI, r3
 8010266:	f3bf 8f6f 	isb	sy
 801026a:	f3bf 8f4f 	dsb	sy
 801026e:	60bb      	str	r3, [r7, #8]
}
 8010270:	bf00      	nop
 8010272:	bf00      	nop
 8010274:	e7fd      	b.n	8010272 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010276:	f000 f885 	bl	8010384 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801027a:	2100      	movs	r1, #0
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fdf7 	bl	8010e70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010282:	f000 f88d 	bl	80103a0 <xTaskResumeAll>
 8010286:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d107      	bne.n	801029e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801028e:	4b07      	ldr	r3, [pc, #28]	@ (80102ac <vTaskDelay+0x68>)
 8010290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010294:	601a      	str	r2, [r3, #0]
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801029e:	bf00      	nop
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	20001ab0 	.word	0x20001ab0
 80102ac:	e000ed04 	.word	0xe000ed04

080102b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b08a      	sub	sp, #40	@ 0x28
 80102b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80102b6:	2300      	movs	r3, #0
 80102b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80102ba:	2300      	movs	r3, #0
 80102bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80102be:	463a      	mov	r2, r7
 80102c0:	1d39      	adds	r1, r7, #4
 80102c2:	f107 0308 	add.w	r3, r7, #8
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f2 f894 	bl	80023f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80102cc:	6839      	ldr	r1, [r7, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	9202      	str	r2, [sp, #8]
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	2300      	movs	r3, #0
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	2300      	movs	r3, #0
 80102dc:	460a      	mov	r2, r1
 80102de:	4921      	ldr	r1, [pc, #132]	@ (8010364 <vTaskStartScheduler+0xb4>)
 80102e0:	4821      	ldr	r0, [pc, #132]	@ (8010368 <vTaskStartScheduler+0xb8>)
 80102e2:	f7ff fdff 	bl	800fee4 <xTaskCreateStatic>
 80102e6:	4603      	mov	r3, r0
 80102e8:	4a20      	ldr	r2, [pc, #128]	@ (801036c <vTaskStartScheduler+0xbc>)
 80102ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80102ec:	4b1f      	ldr	r3, [pc, #124]	@ (801036c <vTaskStartScheduler+0xbc>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80102f4:	2301      	movs	r3, #1
 80102f6:	617b      	str	r3, [r7, #20]
 80102f8:	e001      	b.n	80102fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80102fa:	2300      	movs	r3, #0
 80102fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	2b01      	cmp	r3, #1
 8010302:	d11b      	bne.n	801033c <vTaskStartScheduler+0x8c>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	613b      	str	r3, [r7, #16]
}
 8010316:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010318:	4b15      	ldr	r3, [pc, #84]	@ (8010370 <vTaskStartScheduler+0xc0>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	334c      	adds	r3, #76	@ 0x4c
 801031e:	4a15      	ldr	r2, [pc, #84]	@ (8010374 <vTaskStartScheduler+0xc4>)
 8010320:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010322:	4b15      	ldr	r3, [pc, #84]	@ (8010378 <vTaskStartScheduler+0xc8>)
 8010324:	f04f 32ff 	mov.w	r2, #4294967295
 8010328:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801032a:	4b14      	ldr	r3, [pc, #80]	@ (801037c <vTaskStartScheduler+0xcc>)
 801032c:	2201      	movs	r2, #1
 801032e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010330:	4b13      	ldr	r3, [pc, #76]	@ (8010380 <vTaskStartScheduler+0xd0>)
 8010332:	2200      	movs	r2, #0
 8010334:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010336:	f000 fe8b 	bl	8011050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801033a:	e00f      	b.n	801035c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010342:	d10b      	bne.n	801035c <vTaskStartScheduler+0xac>
	__asm volatile
 8010344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	60fb      	str	r3, [r7, #12]
}
 8010356:	bf00      	nop
 8010358:	bf00      	nop
 801035a:	e7fd      	b.n	8010358 <vTaskStartScheduler+0xa8>
}
 801035c:	bf00      	nop
 801035e:	3718      	adds	r7, #24
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}
 8010364:	08014c5c 	.word	0x08014c5c
 8010368:	08010939 	.word	0x08010939
 801036c:	20001aac 	.word	0x20001aac
 8010370:	20001988 	.word	0x20001988
 8010374:	20000434 	.word	0x20000434
 8010378:	20001aa8 	.word	0x20001aa8
 801037c:	20001a94 	.word	0x20001a94
 8010380:	20001a8c 	.word	0x20001a8c

08010384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010384:	b480      	push	{r7}
 8010386:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010388:	4b04      	ldr	r3, [pc, #16]	@ (801039c <vTaskSuspendAll+0x18>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3301      	adds	r3, #1
 801038e:	4a03      	ldr	r2, [pc, #12]	@ (801039c <vTaskSuspendAll+0x18>)
 8010390:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010392:	bf00      	nop
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr
 801039c:	20001ab0 	.word	0x20001ab0

080103a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b084      	sub	sp, #16
 80103a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80103a6:	2300      	movs	r3, #0
 80103a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80103aa:	2300      	movs	r3, #0
 80103ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80103ae:	4b42      	ldr	r3, [pc, #264]	@ (80104b8 <xTaskResumeAll+0x118>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d10b      	bne.n	80103ce <xTaskResumeAll+0x2e>
	__asm volatile
 80103b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ba:	f383 8811 	msr	BASEPRI, r3
 80103be:	f3bf 8f6f 	isb	sy
 80103c2:	f3bf 8f4f 	dsb	sy
 80103c6:	603b      	str	r3, [r7, #0]
}
 80103c8:	bf00      	nop
 80103ca:	bf00      	nop
 80103cc:	e7fd      	b.n	80103ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80103ce:	f000 fee3 	bl	8011198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80103d2:	4b39      	ldr	r3, [pc, #228]	@ (80104b8 <xTaskResumeAll+0x118>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	3b01      	subs	r3, #1
 80103d8:	4a37      	ldr	r2, [pc, #220]	@ (80104b8 <xTaskResumeAll+0x118>)
 80103da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103dc:	4b36      	ldr	r3, [pc, #216]	@ (80104b8 <xTaskResumeAll+0x118>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d161      	bne.n	80104a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80103e4:	4b35      	ldr	r3, [pc, #212]	@ (80104bc <xTaskResumeAll+0x11c>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d05d      	beq.n	80104a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103ec:	e02e      	b.n	801044c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103ee:	4b34      	ldr	r3, [pc, #208]	@ (80104c0 <xTaskResumeAll+0x120>)
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	3318      	adds	r3, #24
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fe ffba 	bl	800f374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	3304      	adds	r3, #4
 8010404:	4618      	mov	r0, r3
 8010406:	f7fe ffb5 	bl	800f374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801040e:	2201      	movs	r2, #1
 8010410:	409a      	lsls	r2, r3
 8010412:	4b2c      	ldr	r3, [pc, #176]	@ (80104c4 <xTaskResumeAll+0x124>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4313      	orrs	r3, r2
 8010418:	4a2a      	ldr	r2, [pc, #168]	@ (80104c4 <xTaskResumeAll+0x124>)
 801041a:	6013      	str	r3, [r2, #0]
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010420:	4613      	mov	r3, r2
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	4413      	add	r3, r2
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	4a27      	ldr	r2, [pc, #156]	@ (80104c8 <xTaskResumeAll+0x128>)
 801042a:	441a      	add	r2, r3
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	3304      	adds	r3, #4
 8010430:	4619      	mov	r1, r3
 8010432:	4610      	mov	r0, r2
 8010434:	f7fe ff41 	bl	800f2ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801043c:	4b23      	ldr	r3, [pc, #140]	@ (80104cc <xTaskResumeAll+0x12c>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010442:	429a      	cmp	r2, r3
 8010444:	d302      	bcc.n	801044c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010446:	4b22      	ldr	r3, [pc, #136]	@ (80104d0 <xTaskResumeAll+0x130>)
 8010448:	2201      	movs	r2, #1
 801044a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801044c:	4b1c      	ldr	r3, [pc, #112]	@ (80104c0 <xTaskResumeAll+0x120>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1cc      	bne.n	80103ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d001      	beq.n	801045e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801045a:	f000 fb29 	bl	8010ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801045e:	4b1d      	ldr	r3, [pc, #116]	@ (80104d4 <xTaskResumeAll+0x134>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d010      	beq.n	801048c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801046a:	f000 f837 	bl	80104dc <xTaskIncrementTick>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d002      	beq.n	801047a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010474:	4b16      	ldr	r3, [pc, #88]	@ (80104d0 <xTaskResumeAll+0x130>)
 8010476:	2201      	movs	r2, #1
 8010478:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	3b01      	subs	r3, #1
 801047e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1f1      	bne.n	801046a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010486:	4b13      	ldr	r3, [pc, #76]	@ (80104d4 <xTaskResumeAll+0x134>)
 8010488:	2200      	movs	r2, #0
 801048a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801048c:	4b10      	ldr	r3, [pc, #64]	@ (80104d0 <xTaskResumeAll+0x130>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d009      	beq.n	80104a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010494:	2301      	movs	r3, #1
 8010496:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010498:	4b0f      	ldr	r3, [pc, #60]	@ (80104d8 <xTaskResumeAll+0x138>)
 801049a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801049e:	601a      	str	r2, [r3, #0]
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104a8:	f000 fea8 	bl	80111fc <vPortExitCritical>

	return xAlreadyYielded;
 80104ac:	68bb      	ldr	r3, [r7, #8]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20001ab0 	.word	0x20001ab0
 80104bc:	20001a88 	.word	0x20001a88
 80104c0:	20001a48 	.word	0x20001a48
 80104c4:	20001a90 	.word	0x20001a90
 80104c8:	2000198c 	.word	0x2000198c
 80104cc:	20001988 	.word	0x20001988
 80104d0:	20001a9c 	.word	0x20001a9c
 80104d4:	20001a98 	.word	0x20001a98
 80104d8:	e000ed04 	.word	0xe000ed04

080104dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80104e2:	2300      	movs	r3, #0
 80104e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104e6:	4b4f      	ldr	r3, [pc, #316]	@ (8010624 <xTaskIncrementTick+0x148>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f040 808f 	bne.w	801060e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80104f0:	4b4d      	ldr	r3, [pc, #308]	@ (8010628 <xTaskIncrementTick+0x14c>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	3301      	adds	r3, #1
 80104f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80104f8:	4a4b      	ldr	r2, [pc, #300]	@ (8010628 <xTaskIncrementTick+0x14c>)
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d121      	bne.n	8010548 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010504:	4b49      	ldr	r3, [pc, #292]	@ (801062c <xTaskIncrementTick+0x150>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00b      	beq.n	8010526 <xTaskIncrementTick+0x4a>
	__asm volatile
 801050e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010512:	f383 8811 	msr	BASEPRI, r3
 8010516:	f3bf 8f6f 	isb	sy
 801051a:	f3bf 8f4f 	dsb	sy
 801051e:	603b      	str	r3, [r7, #0]
}
 8010520:	bf00      	nop
 8010522:	bf00      	nop
 8010524:	e7fd      	b.n	8010522 <xTaskIncrementTick+0x46>
 8010526:	4b41      	ldr	r3, [pc, #260]	@ (801062c <xTaskIncrementTick+0x150>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	60fb      	str	r3, [r7, #12]
 801052c:	4b40      	ldr	r3, [pc, #256]	@ (8010630 <xTaskIncrementTick+0x154>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a3e      	ldr	r2, [pc, #248]	@ (801062c <xTaskIncrementTick+0x150>)
 8010532:	6013      	str	r3, [r2, #0]
 8010534:	4a3e      	ldr	r2, [pc, #248]	@ (8010630 <xTaskIncrementTick+0x154>)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	6013      	str	r3, [r2, #0]
 801053a:	4b3e      	ldr	r3, [pc, #248]	@ (8010634 <xTaskIncrementTick+0x158>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	3301      	adds	r3, #1
 8010540:	4a3c      	ldr	r2, [pc, #240]	@ (8010634 <xTaskIncrementTick+0x158>)
 8010542:	6013      	str	r3, [r2, #0]
 8010544:	f000 fab4 	bl	8010ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010548:	4b3b      	ldr	r3, [pc, #236]	@ (8010638 <xTaskIncrementTick+0x15c>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	693a      	ldr	r2, [r7, #16]
 801054e:	429a      	cmp	r2, r3
 8010550:	d348      	bcc.n	80105e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010552:	4b36      	ldr	r3, [pc, #216]	@ (801062c <xTaskIncrementTick+0x150>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d104      	bne.n	8010566 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801055c:	4b36      	ldr	r3, [pc, #216]	@ (8010638 <xTaskIncrementTick+0x15c>)
 801055e:	f04f 32ff 	mov.w	r2, #4294967295
 8010562:	601a      	str	r2, [r3, #0]
					break;
 8010564:	e03e      	b.n	80105e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010566:	4b31      	ldr	r3, [pc, #196]	@ (801062c <xTaskIncrementTick+0x150>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010576:	693a      	ldr	r2, [r7, #16]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	429a      	cmp	r2, r3
 801057c:	d203      	bcs.n	8010586 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801057e:	4a2e      	ldr	r2, [pc, #184]	@ (8010638 <xTaskIncrementTick+0x15c>)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010584:	e02e      	b.n	80105e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	3304      	adds	r3, #4
 801058a:	4618      	mov	r0, r3
 801058c:	f7fe fef2 	bl	800f374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010594:	2b00      	cmp	r3, #0
 8010596:	d004      	beq.n	80105a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	3318      	adds	r3, #24
 801059c:	4618      	mov	r0, r3
 801059e:	f7fe fee9 	bl	800f374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105a6:	2201      	movs	r2, #1
 80105a8:	409a      	lsls	r2, r3
 80105aa:	4b24      	ldr	r3, [pc, #144]	@ (801063c <xTaskIncrementTick+0x160>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4313      	orrs	r3, r2
 80105b0:	4a22      	ldr	r2, [pc, #136]	@ (801063c <xTaskIncrementTick+0x160>)
 80105b2:	6013      	str	r3, [r2, #0]
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105b8:	4613      	mov	r3, r2
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4413      	add	r3, r2
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	4a1f      	ldr	r2, [pc, #124]	@ (8010640 <xTaskIncrementTick+0x164>)
 80105c2:	441a      	add	r2, r3
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	3304      	adds	r3, #4
 80105c8:	4619      	mov	r1, r3
 80105ca:	4610      	mov	r0, r2
 80105cc:	f7fe fe75 	bl	800f2ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105d4:	4b1b      	ldr	r3, [pc, #108]	@ (8010644 <xTaskIncrementTick+0x168>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105da:	429a      	cmp	r2, r3
 80105dc:	d3b9      	bcc.n	8010552 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80105de:	2301      	movs	r3, #1
 80105e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105e2:	e7b6      	b.n	8010552 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80105e4:	4b17      	ldr	r3, [pc, #92]	@ (8010644 <xTaskIncrementTick+0x168>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ea:	4915      	ldr	r1, [pc, #84]	@ (8010640 <xTaskIncrementTick+0x164>)
 80105ec:	4613      	mov	r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	4413      	add	r3, r2
 80105f2:	009b      	lsls	r3, r3, #2
 80105f4:	440b      	add	r3, r1
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	d901      	bls.n	8010600 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80105fc:	2301      	movs	r3, #1
 80105fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010600:	4b11      	ldr	r3, [pc, #68]	@ (8010648 <xTaskIncrementTick+0x16c>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d007      	beq.n	8010618 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010608:	2301      	movs	r3, #1
 801060a:	617b      	str	r3, [r7, #20]
 801060c:	e004      	b.n	8010618 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801060e:	4b0f      	ldr	r3, [pc, #60]	@ (801064c <xTaskIncrementTick+0x170>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3301      	adds	r3, #1
 8010614:	4a0d      	ldr	r2, [pc, #52]	@ (801064c <xTaskIncrementTick+0x170>)
 8010616:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010618:	697b      	ldr	r3, [r7, #20]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3718      	adds	r7, #24
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	20001ab0 	.word	0x20001ab0
 8010628:	20001a8c 	.word	0x20001a8c
 801062c:	20001a40 	.word	0x20001a40
 8010630:	20001a44 	.word	0x20001a44
 8010634:	20001aa0 	.word	0x20001aa0
 8010638:	20001aa8 	.word	0x20001aa8
 801063c:	20001a90 	.word	0x20001a90
 8010640:	2000198c 	.word	0x2000198c
 8010644:	20001988 	.word	0x20001988
 8010648:	20001a9c 	.word	0x20001a9c
 801064c:	20001a98 	.word	0x20001a98

08010650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010650:	b480      	push	{r7}
 8010652:	b087      	sub	sp, #28
 8010654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010656:	4b2a      	ldr	r3, [pc, #168]	@ (8010700 <vTaskSwitchContext+0xb0>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d003      	beq.n	8010666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801065e:	4b29      	ldr	r3, [pc, #164]	@ (8010704 <vTaskSwitchContext+0xb4>)
 8010660:	2201      	movs	r2, #1
 8010662:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010664:	e045      	b.n	80106f2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8010666:	4b27      	ldr	r3, [pc, #156]	@ (8010704 <vTaskSwitchContext+0xb4>)
 8010668:	2200      	movs	r2, #0
 801066a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801066c:	4b26      	ldr	r3, [pc, #152]	@ (8010708 <vTaskSwitchContext+0xb8>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	fab3 f383 	clz	r3, r3
 8010678:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801067a:	7afb      	ldrb	r3, [r7, #11]
 801067c:	f1c3 031f 	rsb	r3, r3, #31
 8010680:	617b      	str	r3, [r7, #20]
 8010682:	4922      	ldr	r1, [pc, #136]	@ (801070c <vTaskSwitchContext+0xbc>)
 8010684:	697a      	ldr	r2, [r7, #20]
 8010686:	4613      	mov	r3, r2
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	4413      	add	r3, r2
 801068c:	009b      	lsls	r3, r3, #2
 801068e:	440b      	add	r3, r1
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d10b      	bne.n	80106ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8010696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801069a:	f383 8811 	msr	BASEPRI, r3
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	f3bf 8f4f 	dsb	sy
 80106a6:	607b      	str	r3, [r7, #4]
}
 80106a8:	bf00      	nop
 80106aa:	bf00      	nop
 80106ac:	e7fd      	b.n	80106aa <vTaskSwitchContext+0x5a>
 80106ae:	697a      	ldr	r2, [r7, #20]
 80106b0:	4613      	mov	r3, r2
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	4413      	add	r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	4a14      	ldr	r2, [pc, #80]	@ (801070c <vTaskSwitchContext+0xbc>)
 80106ba:	4413      	add	r3, r2
 80106bc:	613b      	str	r3, [r7, #16]
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	685a      	ldr	r2, [r3, #4]
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	605a      	str	r2, [r3, #4]
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	685a      	ldr	r2, [r3, #4]
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	3308      	adds	r3, #8
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d104      	bne.n	80106de <vTaskSwitchContext+0x8e>
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	685a      	ldr	r2, [r3, #4]
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	605a      	str	r2, [r3, #4]
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	4a0a      	ldr	r2, [pc, #40]	@ (8010710 <vTaskSwitchContext+0xc0>)
 80106e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80106e8:	4b09      	ldr	r3, [pc, #36]	@ (8010710 <vTaskSwitchContext+0xc0>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	334c      	adds	r3, #76	@ 0x4c
 80106ee:	4a09      	ldr	r2, [pc, #36]	@ (8010714 <vTaskSwitchContext+0xc4>)
 80106f0:	6013      	str	r3, [r2, #0]
}
 80106f2:	bf00      	nop
 80106f4:	371c      	adds	r7, #28
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	20001ab0 	.word	0x20001ab0
 8010704:	20001a9c 	.word	0x20001a9c
 8010708:	20001a90 	.word	0x20001a90
 801070c:	2000198c 	.word	0x2000198c
 8010710:	20001988 	.word	0x20001988
 8010714:	20000434 	.word	0x20000434

08010718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d10b      	bne.n	8010740 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801072c:	f383 8811 	msr	BASEPRI, r3
 8010730:	f3bf 8f6f 	isb	sy
 8010734:	f3bf 8f4f 	dsb	sy
 8010738:	60fb      	str	r3, [r7, #12]
}
 801073a:	bf00      	nop
 801073c:	bf00      	nop
 801073e:	e7fd      	b.n	801073c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010740:	4b07      	ldr	r3, [pc, #28]	@ (8010760 <vTaskPlaceOnEventList+0x48>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	3318      	adds	r3, #24
 8010746:	4619      	mov	r1, r3
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7fe fdda 	bl	800f302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801074e:	2101      	movs	r1, #1
 8010750:	6838      	ldr	r0, [r7, #0]
 8010752:	f000 fb8d 	bl	8010e70 <prvAddCurrentTaskToDelayedList>
}
 8010756:	bf00      	nop
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20001988 	.word	0x20001988

08010764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d10b      	bne.n	8010792 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801077a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801077e:	f383 8811 	msr	BASEPRI, r3
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	f3bf 8f4f 	dsb	sy
 801078a:	60fb      	str	r3, [r7, #12]
}
 801078c:	bf00      	nop
 801078e:	bf00      	nop
 8010790:	e7fd      	b.n	801078e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	3318      	adds	r3, #24
 8010796:	4618      	mov	r0, r3
 8010798:	f7fe fdec 	bl	800f374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801079c:	4b1d      	ldr	r3, [pc, #116]	@ (8010814 <xTaskRemoveFromEventList+0xb0>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d11c      	bne.n	80107de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	3304      	adds	r3, #4
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fe fde3 	bl	800f374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107b2:	2201      	movs	r2, #1
 80107b4:	409a      	lsls	r2, r3
 80107b6:	4b18      	ldr	r3, [pc, #96]	@ (8010818 <xTaskRemoveFromEventList+0xb4>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4313      	orrs	r3, r2
 80107bc:	4a16      	ldr	r2, [pc, #88]	@ (8010818 <xTaskRemoveFromEventList+0xb4>)
 80107be:	6013      	str	r3, [r2, #0]
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107c4:	4613      	mov	r3, r2
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	4413      	add	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	4a13      	ldr	r2, [pc, #76]	@ (801081c <xTaskRemoveFromEventList+0xb8>)
 80107ce:	441a      	add	r2, r3
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	3304      	adds	r3, #4
 80107d4:	4619      	mov	r1, r3
 80107d6:	4610      	mov	r0, r2
 80107d8:	f7fe fd6f 	bl	800f2ba <vListInsertEnd>
 80107dc:	e005      	b.n	80107ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	3318      	adds	r3, #24
 80107e2:	4619      	mov	r1, r3
 80107e4:	480e      	ldr	r0, [pc, #56]	@ (8010820 <xTaskRemoveFromEventList+0xbc>)
 80107e6:	f7fe fd68 	bl	800f2ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010824 <xTaskRemoveFromEventList+0xc0>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d905      	bls.n	8010804 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80107f8:	2301      	movs	r3, #1
 80107fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80107fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010828 <xTaskRemoveFromEventList+0xc4>)
 80107fe:	2201      	movs	r2, #1
 8010800:	601a      	str	r2, [r3, #0]
 8010802:	e001      	b.n	8010808 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010804:	2300      	movs	r3, #0
 8010806:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010808:	697b      	ldr	r3, [r7, #20]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3718      	adds	r7, #24
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	20001ab0 	.word	0x20001ab0
 8010818:	20001a90 	.word	0x20001a90
 801081c:	2000198c 	.word	0x2000198c
 8010820:	20001a48 	.word	0x20001a48
 8010824:	20001988 	.word	0x20001988
 8010828:	20001a9c 	.word	0x20001a9c

0801082c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010834:	4b06      	ldr	r3, [pc, #24]	@ (8010850 <vTaskInternalSetTimeOutState+0x24>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801083c:	4b05      	ldr	r3, [pc, #20]	@ (8010854 <vTaskInternalSetTimeOutState+0x28>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	605a      	str	r2, [r3, #4]
}
 8010844:	bf00      	nop
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr
 8010850:	20001aa0 	.word	0x20001aa0
 8010854:	20001a8c 	.word	0x20001a8c

08010858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b088      	sub	sp, #32
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d10b      	bne.n	8010880 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	613b      	str	r3, [r7, #16]
}
 801087a:	bf00      	nop
 801087c:	bf00      	nop
 801087e:	e7fd      	b.n	801087c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d10b      	bne.n	801089e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801088a:	f383 8811 	msr	BASEPRI, r3
 801088e:	f3bf 8f6f 	isb	sy
 8010892:	f3bf 8f4f 	dsb	sy
 8010896:	60fb      	str	r3, [r7, #12]
}
 8010898:	bf00      	nop
 801089a:	bf00      	nop
 801089c:	e7fd      	b.n	801089a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801089e:	f000 fc7b 	bl	8011198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80108a2:	4b1d      	ldr	r3, [pc, #116]	@ (8010918 <xTaskCheckForTimeOut+0xc0>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	69ba      	ldr	r2, [r7, #24]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ba:	d102      	bne.n	80108c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108bc:	2300      	movs	r3, #0
 80108be:	61fb      	str	r3, [r7, #28]
 80108c0:	e023      	b.n	801090a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	4b15      	ldr	r3, [pc, #84]	@ (801091c <xTaskCheckForTimeOut+0xc4>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d007      	beq.n	80108de <xTaskCheckForTimeOut+0x86>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	69ba      	ldr	r2, [r7, #24]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d302      	bcc.n	80108de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80108d8:	2301      	movs	r3, #1
 80108da:	61fb      	str	r3, [r7, #28]
 80108dc:	e015      	b.n	801090a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	697a      	ldr	r2, [r7, #20]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d20b      	bcs.n	8010900 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	1ad2      	subs	r2, r2, r3
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff ff99 	bl	801082c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80108fa:	2300      	movs	r3, #0
 80108fc:	61fb      	str	r3, [r7, #28]
 80108fe:	e004      	b.n	801090a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	2200      	movs	r2, #0
 8010904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010906:	2301      	movs	r3, #1
 8010908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801090a:	f000 fc77 	bl	80111fc <vPortExitCritical>

	return xReturn;
 801090e:	69fb      	ldr	r3, [r7, #28]
}
 8010910:	4618      	mov	r0, r3
 8010912:	3720      	adds	r7, #32
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	20001a8c 	.word	0x20001a8c
 801091c:	20001aa0 	.word	0x20001aa0

08010920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010920:	b480      	push	{r7}
 8010922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010924:	4b03      	ldr	r3, [pc, #12]	@ (8010934 <vTaskMissedYield+0x14>)
 8010926:	2201      	movs	r2, #1
 8010928:	601a      	str	r2, [r3, #0]
}
 801092a:	bf00      	nop
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr
 8010934:	20001a9c 	.word	0x20001a9c

08010938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010940:	f000 f852 	bl	80109e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010944:	4b06      	ldr	r3, [pc, #24]	@ (8010960 <prvIdleTask+0x28>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d9f9      	bls.n	8010940 <prvIdleTask+0x8>
			{
				taskYIELD();
 801094c:	4b05      	ldr	r3, [pc, #20]	@ (8010964 <prvIdleTask+0x2c>)
 801094e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	f3bf 8f4f 	dsb	sy
 8010958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801095c:	e7f0      	b.n	8010940 <prvIdleTask+0x8>
 801095e:	bf00      	nop
 8010960:	2000198c 	.word	0x2000198c
 8010964:	e000ed04 	.word	0xe000ed04

08010968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801096e:	2300      	movs	r3, #0
 8010970:	607b      	str	r3, [r7, #4]
 8010972:	e00c      	b.n	801098e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	4613      	mov	r3, r2
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	4413      	add	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	4a12      	ldr	r2, [pc, #72]	@ (80109c8 <prvInitialiseTaskLists+0x60>)
 8010980:	4413      	add	r3, r2
 8010982:	4618      	mov	r0, r3
 8010984:	f7fe fc6c 	bl	800f260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3301      	adds	r3, #1
 801098c:	607b      	str	r3, [r7, #4]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b06      	cmp	r3, #6
 8010992:	d9ef      	bls.n	8010974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010994:	480d      	ldr	r0, [pc, #52]	@ (80109cc <prvInitialiseTaskLists+0x64>)
 8010996:	f7fe fc63 	bl	800f260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801099a:	480d      	ldr	r0, [pc, #52]	@ (80109d0 <prvInitialiseTaskLists+0x68>)
 801099c:	f7fe fc60 	bl	800f260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80109a0:	480c      	ldr	r0, [pc, #48]	@ (80109d4 <prvInitialiseTaskLists+0x6c>)
 80109a2:	f7fe fc5d 	bl	800f260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80109a6:	480c      	ldr	r0, [pc, #48]	@ (80109d8 <prvInitialiseTaskLists+0x70>)
 80109a8:	f7fe fc5a 	bl	800f260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80109ac:	480b      	ldr	r0, [pc, #44]	@ (80109dc <prvInitialiseTaskLists+0x74>)
 80109ae:	f7fe fc57 	bl	800f260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80109b2:	4b0b      	ldr	r3, [pc, #44]	@ (80109e0 <prvInitialiseTaskLists+0x78>)
 80109b4:	4a05      	ldr	r2, [pc, #20]	@ (80109cc <prvInitialiseTaskLists+0x64>)
 80109b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80109b8:	4b0a      	ldr	r3, [pc, #40]	@ (80109e4 <prvInitialiseTaskLists+0x7c>)
 80109ba:	4a05      	ldr	r2, [pc, #20]	@ (80109d0 <prvInitialiseTaskLists+0x68>)
 80109bc:	601a      	str	r2, [r3, #0]
}
 80109be:	bf00      	nop
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	2000198c 	.word	0x2000198c
 80109cc:	20001a18 	.word	0x20001a18
 80109d0:	20001a2c 	.word	0x20001a2c
 80109d4:	20001a48 	.word	0x20001a48
 80109d8:	20001a5c 	.word	0x20001a5c
 80109dc:	20001a74 	.word	0x20001a74
 80109e0:	20001a40 	.word	0x20001a40
 80109e4:	20001a44 	.word	0x20001a44

080109e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109ee:	e019      	b.n	8010a24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80109f0:	f000 fbd2 	bl	8011198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109f4:	4b10      	ldr	r3, [pc, #64]	@ (8010a38 <prvCheckTasksWaitingTermination+0x50>)
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	3304      	adds	r3, #4
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fe fcb7 	bl	800f374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a06:	4b0d      	ldr	r3, [pc, #52]	@ (8010a3c <prvCheckTasksWaitingTermination+0x54>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3b01      	subs	r3, #1
 8010a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8010a3c <prvCheckTasksWaitingTermination+0x54>)
 8010a0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010a10:	4b0b      	ldr	r3, [pc, #44]	@ (8010a40 <prvCheckTasksWaitingTermination+0x58>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	4a0a      	ldr	r2, [pc, #40]	@ (8010a40 <prvCheckTasksWaitingTermination+0x58>)
 8010a18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010a1a:	f000 fbef 	bl	80111fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 f810 	bl	8010a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a24:	4b06      	ldr	r3, [pc, #24]	@ (8010a40 <prvCheckTasksWaitingTermination+0x58>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1e1      	bne.n	80109f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a2c:	bf00      	nop
 8010a2e:	bf00      	nop
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	20001a5c 	.word	0x20001a5c
 8010a3c:	20001a88 	.word	0x20001a88
 8010a40:	20001a70 	.word	0x20001a70

08010a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	334c      	adds	r3, #76	@ 0x4c
 8010a50:	4618      	mov	r0, r3
 8010a52:	f002 f81d 	bl	8012a90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d108      	bne.n	8010a72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 fd87 	bl	8011578 <vPortFree>
				vPortFree( pxTCB );
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f000 fd84 	bl	8011578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010a70:	e019      	b.n	8010aa6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d103      	bne.n	8010a84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fd7b 	bl	8011578 <vPortFree>
	}
 8010a82:	e010      	b.n	8010aa6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010a8a:	2b02      	cmp	r3, #2
 8010a8c:	d00b      	beq.n	8010aa6 <prvDeleteTCB+0x62>
	__asm volatile
 8010a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a92:	f383 8811 	msr	BASEPRI, r3
 8010a96:	f3bf 8f6f 	isb	sy
 8010a9a:	f3bf 8f4f 	dsb	sy
 8010a9e:	60fb      	str	r3, [r7, #12]
}
 8010aa0:	bf00      	nop
 8010aa2:	bf00      	nop
 8010aa4:	e7fd      	b.n	8010aa2 <prvDeleteTCB+0x5e>
	}
 8010aa6:	bf00      	nop
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
	...

08010ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8010ae8 <prvResetNextTaskUnblockTime+0x38>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d104      	bne.n	8010aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8010aec <prvResetNextTaskUnblockTime+0x3c>)
 8010ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ac8:	e008      	b.n	8010adc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010aca:	4b07      	ldr	r3, [pc, #28]	@ (8010ae8 <prvResetNextTaskUnblockTime+0x38>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4a04      	ldr	r2, [pc, #16]	@ (8010aec <prvResetNextTaskUnblockTime+0x3c>)
 8010ada:	6013      	str	r3, [r2, #0]
}
 8010adc:	bf00      	nop
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr
 8010ae8:	20001a40 	.word	0x20001a40
 8010aec:	20001aa8 	.word	0x20001aa8

08010af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010af6:	4b0b      	ldr	r3, [pc, #44]	@ (8010b24 <xTaskGetSchedulerState+0x34>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d102      	bne.n	8010b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010afe:	2301      	movs	r3, #1
 8010b00:	607b      	str	r3, [r7, #4]
 8010b02:	e008      	b.n	8010b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b04:	4b08      	ldr	r3, [pc, #32]	@ (8010b28 <xTaskGetSchedulerState+0x38>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d102      	bne.n	8010b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	607b      	str	r3, [r7, #4]
 8010b10:	e001      	b.n	8010b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b12:	2300      	movs	r3, #0
 8010b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b16:	687b      	ldr	r3, [r7, #4]
	}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr
 8010b24:	20001a94 	.word	0x20001a94
 8010b28:	20001ab0 	.word	0x20001ab0

08010b2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d05e      	beq.n	8010c00 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b46:	4b31      	ldr	r3, [pc, #196]	@ (8010c0c <xTaskPriorityInherit+0xe0>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d24e      	bcs.n	8010bee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	699b      	ldr	r3, [r3, #24]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	db06      	blt.n	8010b66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b58:	4b2c      	ldr	r3, [pc, #176]	@ (8010c0c <xTaskPriorityInherit+0xe0>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b5e:	f1c3 0207 	rsb	r2, r3, #7
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	6959      	ldr	r1, [r3, #20]
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b6e:	4613      	mov	r3, r2
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	4413      	add	r3, r2
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	4a26      	ldr	r2, [pc, #152]	@ (8010c10 <xTaskPriorityInherit+0xe4>)
 8010b78:	4413      	add	r3, r2
 8010b7a:	4299      	cmp	r1, r3
 8010b7c:	d12f      	bne.n	8010bde <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	3304      	adds	r3, #4
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fe fbf6 	bl	800f374 <uxListRemove>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d10a      	bne.n	8010ba4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b92:	2201      	movs	r2, #1
 8010b94:	fa02 f303 	lsl.w	r3, r2, r3
 8010b98:	43da      	mvns	r2, r3
 8010b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8010c14 <xTaskPriorityInherit+0xe8>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	4013      	ands	r3, r2
 8010ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8010c14 <xTaskPriorityInherit+0xe8>)
 8010ba2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ba4:	4b19      	ldr	r3, [pc, #100]	@ (8010c0c <xTaskPriorityInherit+0xe0>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	409a      	lsls	r2, r3
 8010bb6:	4b17      	ldr	r3, [pc, #92]	@ (8010c14 <xTaskPriorityInherit+0xe8>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4313      	orrs	r3, r2
 8010bbc:	4a15      	ldr	r2, [pc, #84]	@ (8010c14 <xTaskPriorityInherit+0xe8>)
 8010bbe:	6013      	str	r3, [r2, #0]
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	4413      	add	r3, r2
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	4a10      	ldr	r2, [pc, #64]	@ (8010c10 <xTaskPriorityInherit+0xe4>)
 8010bce:	441a      	add	r2, r3
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	3304      	adds	r3, #4
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	4610      	mov	r0, r2
 8010bd8:	f7fe fb6f 	bl	800f2ba <vListInsertEnd>
 8010bdc:	e004      	b.n	8010be8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010bde:	4b0b      	ldr	r3, [pc, #44]	@ (8010c0c <xTaskPriorityInherit+0xe0>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010be8:	2301      	movs	r3, #1
 8010bea:	60fb      	str	r3, [r7, #12]
 8010bec:	e008      	b.n	8010c00 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010bf2:	4b06      	ldr	r3, [pc, #24]	@ (8010c0c <xTaskPriorityInherit+0xe0>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d201      	bcs.n	8010c00 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010c00:	68fb      	ldr	r3, [r7, #12]
	}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20001988 	.word	0x20001988
 8010c10:	2000198c 	.word	0x2000198c
 8010c14:	20001a90 	.word	0x20001a90

08010c18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010c24:	2300      	movs	r3, #0
 8010c26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d070      	beq.n	8010d10 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8010d1c <xTaskPriorityDisinherit+0x104>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	693a      	ldr	r2, [r7, #16]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d00b      	beq.n	8010c50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c3c:	f383 8811 	msr	BASEPRI, r3
 8010c40:	f3bf 8f6f 	isb	sy
 8010c44:	f3bf 8f4f 	dsb	sy
 8010c48:	60fb      	str	r3, [r7, #12]
}
 8010c4a:	bf00      	nop
 8010c4c:	bf00      	nop
 8010c4e:	e7fd      	b.n	8010c4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d10b      	bne.n	8010c70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c5c:	f383 8811 	msr	BASEPRI, r3
 8010c60:	f3bf 8f6f 	isb	sy
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	60bb      	str	r3, [r7, #8]
}
 8010c6a:	bf00      	nop
 8010c6c:	bf00      	nop
 8010c6e:	e7fd      	b.n	8010c6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c74:	1e5a      	subs	r2, r3, #1
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d044      	beq.n	8010d10 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d140      	bne.n	8010d10 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	3304      	adds	r3, #4
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fe fb6e 	bl	800f374 <uxListRemove>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d115      	bne.n	8010cca <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ca2:	491f      	ldr	r1, [pc, #124]	@ (8010d20 <xTaskPriorityDisinherit+0x108>)
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	4413      	add	r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	440b      	add	r3, r1
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d10a      	bne.n	8010cca <xTaskPriorityDisinherit+0xb2>
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cb8:	2201      	movs	r2, #1
 8010cba:	fa02 f303 	lsl.w	r3, r2, r3
 8010cbe:	43da      	mvns	r2, r3
 8010cc0:	4b18      	ldr	r3, [pc, #96]	@ (8010d24 <xTaskPriorityDisinherit+0x10c>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	4a17      	ldr	r2, [pc, #92]	@ (8010d24 <xTaskPriorityDisinherit+0x10c>)
 8010cc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cd6:	f1c3 0207 	rsb	r2, r3, #7
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	409a      	lsls	r2, r3
 8010ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8010d24 <xTaskPriorityDisinherit+0x10c>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4313      	orrs	r3, r2
 8010cec:	4a0d      	ldr	r2, [pc, #52]	@ (8010d24 <xTaskPriorityDisinherit+0x10c>)
 8010cee:	6013      	str	r3, [r2, #0]
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	009b      	lsls	r3, r3, #2
 8010cf8:	4413      	add	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4a08      	ldr	r2, [pc, #32]	@ (8010d20 <xTaskPriorityDisinherit+0x108>)
 8010cfe:	441a      	add	r2, r3
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	3304      	adds	r3, #4
 8010d04:	4619      	mov	r1, r3
 8010d06:	4610      	mov	r0, r2
 8010d08:	f7fe fad7 	bl	800f2ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d10:	697b      	ldr	r3, [r7, #20]
	}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3718      	adds	r7, #24
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	20001988 	.word	0x20001988
 8010d20:	2000198c 	.word	0x2000198c
 8010d24:	20001a90 	.word	0x20001a90

08010d28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b088      	sub	sp, #32
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010d36:	2301      	movs	r3, #1
 8010d38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d079      	beq.n	8010e34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010d40:	69bb      	ldr	r3, [r7, #24]
 8010d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10b      	bne.n	8010d60 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d4c:	f383 8811 	msr	BASEPRI, r3
 8010d50:	f3bf 8f6f 	isb	sy
 8010d54:	f3bf 8f4f 	dsb	sy
 8010d58:	60fb      	str	r3, [r7, #12]
}
 8010d5a:	bf00      	nop
 8010d5c:	bf00      	nop
 8010d5e:	e7fd      	b.n	8010d5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010d60:	69bb      	ldr	r3, [r7, #24]
 8010d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d64:	683a      	ldr	r2, [r7, #0]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d902      	bls.n	8010d70 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	61fb      	str	r3, [r7, #28]
 8010d6e:	e002      	b.n	8010d76 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010d70:	69bb      	ldr	r3, [r7, #24]
 8010d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d7a:	69fa      	ldr	r2, [r7, #28]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d059      	beq.n	8010e34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010d80:	69bb      	ldr	r3, [r7, #24]
 8010d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d154      	bne.n	8010e34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8010e3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	69ba      	ldr	r2, [r7, #24]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d10b      	bne.n	8010dac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	60bb      	str	r3, [r7, #8]
}
 8010da6:	bf00      	nop
 8010da8:	bf00      	nop
 8010daa:	e7fd      	b.n	8010da8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010db0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	69fa      	ldr	r2, [r7, #28]
 8010db6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	699b      	ldr	r3, [r3, #24]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	db04      	blt.n	8010dca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	f1c3 0207 	rsb	r2, r3, #7
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	6959      	ldr	r1, [r3, #20]
 8010dce:	693a      	ldr	r2, [r7, #16]
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4413      	add	r3, r2
 8010dd6:	009b      	lsls	r3, r3, #2
 8010dd8:	4a19      	ldr	r2, [pc, #100]	@ (8010e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010dda:	4413      	add	r3, r2
 8010ddc:	4299      	cmp	r1, r3
 8010dde:	d129      	bne.n	8010e34 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	3304      	adds	r3, #4
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7fe fac5 	bl	800f374 <uxListRemove>
 8010dea:	4603      	mov	r3, r0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d10a      	bne.n	8010e06 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010df0:	69bb      	ldr	r3, [r7, #24]
 8010df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010df4:	2201      	movs	r2, #1
 8010df6:	fa02 f303 	lsl.w	r3, r2, r3
 8010dfa:	43da      	mvns	r2, r3
 8010dfc:	4b11      	ldr	r3, [pc, #68]	@ (8010e44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4013      	ands	r3, r2
 8010e02:	4a10      	ldr	r2, [pc, #64]	@ (8010e44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010e04:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	409a      	lsls	r2, r3
 8010e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4313      	orrs	r3, r2
 8010e14:	4a0b      	ldr	r2, [pc, #44]	@ (8010e44 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010e16:	6013      	str	r3, [r2, #0]
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	4413      	add	r3, r2
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	4a06      	ldr	r2, [pc, #24]	@ (8010e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010e26:	441a      	add	r2, r3
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	3304      	adds	r3, #4
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4610      	mov	r0, r2
 8010e30:	f7fe fa43 	bl	800f2ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e34:	bf00      	nop
 8010e36:	3720      	adds	r7, #32
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	20001988 	.word	0x20001988
 8010e40:	2000198c 	.word	0x2000198c
 8010e44:	20001a90 	.word	0x20001a90

08010e48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010e48:	b480      	push	{r7}
 8010e4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010e4c:	4b07      	ldr	r3, [pc, #28]	@ (8010e6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d004      	beq.n	8010e5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010e54:	4b05      	ldr	r3, [pc, #20]	@ (8010e6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010e5a:	3201      	adds	r2, #1
 8010e5c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8010e5e:	4b03      	ldr	r3, [pc, #12]	@ (8010e6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010e60:	681b      	ldr	r3, [r3, #0]
	}
 8010e62:	4618      	mov	r0, r3
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr
 8010e6c:	20001988 	.word	0x20001988

08010e70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010e7a:	4b29      	ldr	r3, [pc, #164]	@ (8010f20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e80:	4b28      	ldr	r3, [pc, #160]	@ (8010f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	3304      	adds	r3, #4
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7fe fa74 	bl	800f374 <uxListRemove>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d10b      	bne.n	8010eaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010e92:	4b24      	ldr	r3, [pc, #144]	@ (8010f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e98:	2201      	movs	r2, #1
 8010e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e9e:	43da      	mvns	r2, r3
 8010ea0:	4b21      	ldr	r3, [pc, #132]	@ (8010f28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	4013      	ands	r3, r2
 8010ea6:	4a20      	ldr	r2, [pc, #128]	@ (8010f28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ea8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eb0:	d10a      	bne.n	8010ec8 <prvAddCurrentTaskToDelayedList+0x58>
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d007      	beq.n	8010ec8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8010f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	3304      	adds	r3, #4
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	481a      	ldr	r0, [pc, #104]	@ (8010f2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010ec2:	f7fe f9fa 	bl	800f2ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ec6:	e026      	b.n	8010f16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	4413      	add	r3, r2
 8010ece:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010ed0:	4b14      	ldr	r3, [pc, #80]	@ (8010f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	68ba      	ldr	r2, [r7, #8]
 8010ed6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d209      	bcs.n	8010ef4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ee0:	4b13      	ldr	r3, [pc, #76]	@ (8010f30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8010f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	3304      	adds	r3, #4
 8010eea:	4619      	mov	r1, r3
 8010eec:	4610      	mov	r0, r2
 8010eee:	f7fe fa08 	bl	800f302 <vListInsert>
}
 8010ef2:	e010      	b.n	8010f16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8010f34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8010f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	3304      	adds	r3, #4
 8010efe:	4619      	mov	r1, r3
 8010f00:	4610      	mov	r0, r2
 8010f02:	f7fe f9fe 	bl	800f302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010f06:	4b0c      	ldr	r3, [pc, #48]	@ (8010f38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	68ba      	ldr	r2, [r7, #8]
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d202      	bcs.n	8010f16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010f10:	4a09      	ldr	r2, [pc, #36]	@ (8010f38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	6013      	str	r3, [r2, #0]
}
 8010f16:	bf00      	nop
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	20001a8c 	.word	0x20001a8c
 8010f24:	20001988 	.word	0x20001988
 8010f28:	20001a90 	.word	0x20001a90
 8010f2c:	20001a74 	.word	0x20001a74
 8010f30:	20001a44 	.word	0x20001a44
 8010f34:	20001a40 	.word	0x20001a40
 8010f38:	20001aa8 	.word	0x20001aa8

08010f3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b085      	sub	sp, #20
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	3b04      	subs	r3, #4
 8010f4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	3b04      	subs	r3, #4
 8010f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	f023 0201 	bic.w	r2, r3, #1
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	3b04      	subs	r3, #4
 8010f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8010fa0 <pxPortInitialiseStack+0x64>)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	3b14      	subs	r3, #20
 8010f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	3b04      	subs	r3, #4
 8010f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f06f 0202 	mvn.w	r2, #2
 8010f8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	3b20      	subs	r3, #32
 8010f90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010f92:	68fb      	ldr	r3, [r7, #12]
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	08010fa5 	.word	0x08010fa5

08010fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010fae:	4b13      	ldr	r3, [pc, #76]	@ (8010ffc <prvTaskExitError+0x58>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fb6:	d00b      	beq.n	8010fd0 <prvTaskExitError+0x2c>
	__asm volatile
 8010fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fbc:	f383 8811 	msr	BASEPRI, r3
 8010fc0:	f3bf 8f6f 	isb	sy
 8010fc4:	f3bf 8f4f 	dsb	sy
 8010fc8:	60fb      	str	r3, [r7, #12]
}
 8010fca:	bf00      	nop
 8010fcc:	bf00      	nop
 8010fce:	e7fd      	b.n	8010fcc <prvTaskExitError+0x28>
	__asm volatile
 8010fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fd4:	f383 8811 	msr	BASEPRI, r3
 8010fd8:	f3bf 8f6f 	isb	sy
 8010fdc:	f3bf 8f4f 	dsb	sy
 8010fe0:	60bb      	str	r3, [r7, #8]
}
 8010fe2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010fe4:	bf00      	nop
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d0fc      	beq.n	8010fe6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010fec:	bf00      	nop
 8010fee:	bf00      	nop
 8010ff0:	3714      	adds	r7, #20
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	200002b8 	.word	0x200002b8

08011000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011000:	4b07      	ldr	r3, [pc, #28]	@ (8011020 <pxCurrentTCBConst2>)
 8011002:	6819      	ldr	r1, [r3, #0]
 8011004:	6808      	ldr	r0, [r1, #0]
 8011006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100a:	f380 8809 	msr	PSP, r0
 801100e:	f3bf 8f6f 	isb	sy
 8011012:	f04f 0000 	mov.w	r0, #0
 8011016:	f380 8811 	msr	BASEPRI, r0
 801101a:	4770      	bx	lr
 801101c:	f3af 8000 	nop.w

08011020 <pxCurrentTCBConst2>:
 8011020:	20001988 	.word	0x20001988
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011024:	bf00      	nop
 8011026:	bf00      	nop

08011028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011028:	4808      	ldr	r0, [pc, #32]	@ (801104c <prvPortStartFirstTask+0x24>)
 801102a:	6800      	ldr	r0, [r0, #0]
 801102c:	6800      	ldr	r0, [r0, #0]
 801102e:	f380 8808 	msr	MSP, r0
 8011032:	f04f 0000 	mov.w	r0, #0
 8011036:	f380 8814 	msr	CONTROL, r0
 801103a:	b662      	cpsie	i
 801103c:	b661      	cpsie	f
 801103e:	f3bf 8f4f 	dsb	sy
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	df00      	svc	0
 8011048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801104a:	bf00      	nop
 801104c:	e000ed08 	.word	0xe000ed08

08011050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011056:	4b47      	ldr	r3, [pc, #284]	@ (8011174 <xPortStartScheduler+0x124>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	4a47      	ldr	r2, [pc, #284]	@ (8011178 <xPortStartScheduler+0x128>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d10b      	bne.n	8011078 <xPortStartScheduler+0x28>
	__asm volatile
 8011060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011064:	f383 8811 	msr	BASEPRI, r3
 8011068:	f3bf 8f6f 	isb	sy
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	613b      	str	r3, [r7, #16]
}
 8011072:	bf00      	nop
 8011074:	bf00      	nop
 8011076:	e7fd      	b.n	8011074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011078:	4b3e      	ldr	r3, [pc, #248]	@ (8011174 <xPortStartScheduler+0x124>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4a3f      	ldr	r2, [pc, #252]	@ (801117c <xPortStartScheduler+0x12c>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d10b      	bne.n	801109a <xPortStartScheduler+0x4a>
	__asm volatile
 8011082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011086:	f383 8811 	msr	BASEPRI, r3
 801108a:	f3bf 8f6f 	isb	sy
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	60fb      	str	r3, [r7, #12]
}
 8011094:	bf00      	nop
 8011096:	bf00      	nop
 8011098:	e7fd      	b.n	8011096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801109a:	4b39      	ldr	r3, [pc, #228]	@ (8011180 <xPortStartScheduler+0x130>)
 801109c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	22ff      	movs	r2, #255	@ 0xff
 80110aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	b2db      	uxtb	r3, r3
 80110b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80110b4:	78fb      	ldrb	r3, [r7, #3]
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80110bc:	b2da      	uxtb	r2, r3
 80110be:	4b31      	ldr	r3, [pc, #196]	@ (8011184 <xPortStartScheduler+0x134>)
 80110c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80110c2:	4b31      	ldr	r3, [pc, #196]	@ (8011188 <xPortStartScheduler+0x138>)
 80110c4:	2207      	movs	r2, #7
 80110c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110c8:	e009      	b.n	80110de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80110ca:	4b2f      	ldr	r3, [pc, #188]	@ (8011188 <xPortStartScheduler+0x138>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	3b01      	subs	r3, #1
 80110d0:	4a2d      	ldr	r2, [pc, #180]	@ (8011188 <xPortStartScheduler+0x138>)
 80110d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80110d4:	78fb      	ldrb	r3, [r7, #3]
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	005b      	lsls	r3, r3, #1
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110de:	78fb      	ldrb	r3, [r7, #3]
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110e6:	2b80      	cmp	r3, #128	@ 0x80
 80110e8:	d0ef      	beq.n	80110ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80110ea:	4b27      	ldr	r3, [pc, #156]	@ (8011188 <xPortStartScheduler+0x138>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	f1c3 0307 	rsb	r3, r3, #7
 80110f2:	2b04      	cmp	r3, #4
 80110f4:	d00b      	beq.n	801110e <xPortStartScheduler+0xbe>
	__asm volatile
 80110f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110fa:	f383 8811 	msr	BASEPRI, r3
 80110fe:	f3bf 8f6f 	isb	sy
 8011102:	f3bf 8f4f 	dsb	sy
 8011106:	60bb      	str	r3, [r7, #8]
}
 8011108:	bf00      	nop
 801110a:	bf00      	nop
 801110c:	e7fd      	b.n	801110a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801110e:	4b1e      	ldr	r3, [pc, #120]	@ (8011188 <xPortStartScheduler+0x138>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	021b      	lsls	r3, r3, #8
 8011114:	4a1c      	ldr	r2, [pc, #112]	@ (8011188 <xPortStartScheduler+0x138>)
 8011116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011118:	4b1b      	ldr	r3, [pc, #108]	@ (8011188 <xPortStartScheduler+0x138>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011120:	4a19      	ldr	r2, [pc, #100]	@ (8011188 <xPortStartScheduler+0x138>)
 8011122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	b2da      	uxtb	r2, r3
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801112c:	4b17      	ldr	r3, [pc, #92]	@ (801118c <xPortStartScheduler+0x13c>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a16      	ldr	r2, [pc, #88]	@ (801118c <xPortStartScheduler+0x13c>)
 8011132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011138:	4b14      	ldr	r3, [pc, #80]	@ (801118c <xPortStartScheduler+0x13c>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a13      	ldr	r2, [pc, #76]	@ (801118c <xPortStartScheduler+0x13c>)
 801113e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011144:	f000 f8da 	bl	80112fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011148:	4b11      	ldr	r3, [pc, #68]	@ (8011190 <xPortStartScheduler+0x140>)
 801114a:	2200      	movs	r2, #0
 801114c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801114e:	f000 f8f9 	bl	8011344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011152:	4b10      	ldr	r3, [pc, #64]	@ (8011194 <xPortStartScheduler+0x144>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4a0f      	ldr	r2, [pc, #60]	@ (8011194 <xPortStartScheduler+0x144>)
 8011158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801115c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801115e:	f7ff ff63 	bl	8011028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011162:	f7ff fa75 	bl	8010650 <vTaskSwitchContext>
	prvTaskExitError();
 8011166:	f7ff ff1d 	bl	8010fa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801116a:	2300      	movs	r3, #0
}
 801116c:	4618      	mov	r0, r3
 801116e:	3718      	adds	r7, #24
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	e000ed00 	.word	0xe000ed00
 8011178:	410fc271 	.word	0x410fc271
 801117c:	410fc270 	.word	0x410fc270
 8011180:	e000e400 	.word	0xe000e400
 8011184:	20001ab4 	.word	0x20001ab4
 8011188:	20001ab8 	.word	0x20001ab8
 801118c:	e000ed20 	.word	0xe000ed20
 8011190:	200002b8 	.word	0x200002b8
 8011194:	e000ef34 	.word	0xe000ef34

08011198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
	__asm volatile
 801119e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a2:	f383 8811 	msr	BASEPRI, r3
 80111a6:	f3bf 8f6f 	isb	sy
 80111aa:	f3bf 8f4f 	dsb	sy
 80111ae:	607b      	str	r3, [r7, #4]
}
 80111b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80111b2:	4b10      	ldr	r3, [pc, #64]	@ (80111f4 <vPortEnterCritical+0x5c>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	3301      	adds	r3, #1
 80111b8:	4a0e      	ldr	r2, [pc, #56]	@ (80111f4 <vPortEnterCritical+0x5c>)
 80111ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80111bc:	4b0d      	ldr	r3, [pc, #52]	@ (80111f4 <vPortEnterCritical+0x5c>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d110      	bne.n	80111e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80111c4:	4b0c      	ldr	r3, [pc, #48]	@ (80111f8 <vPortEnterCritical+0x60>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00b      	beq.n	80111e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80111ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111d2:	f383 8811 	msr	BASEPRI, r3
 80111d6:	f3bf 8f6f 	isb	sy
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	603b      	str	r3, [r7, #0]
}
 80111e0:	bf00      	nop
 80111e2:	bf00      	nop
 80111e4:	e7fd      	b.n	80111e2 <vPortEnterCritical+0x4a>
	}
}
 80111e6:	bf00      	nop
 80111e8:	370c      	adds	r7, #12
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	200002b8 	.word	0x200002b8
 80111f8:	e000ed04 	.word	0xe000ed04

080111fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011202:	4b12      	ldr	r3, [pc, #72]	@ (801124c <vPortExitCritical+0x50>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d10b      	bne.n	8011222 <vPortExitCritical+0x26>
	__asm volatile
 801120a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801120e:	f383 8811 	msr	BASEPRI, r3
 8011212:	f3bf 8f6f 	isb	sy
 8011216:	f3bf 8f4f 	dsb	sy
 801121a:	607b      	str	r3, [r7, #4]
}
 801121c:	bf00      	nop
 801121e:	bf00      	nop
 8011220:	e7fd      	b.n	801121e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011222:	4b0a      	ldr	r3, [pc, #40]	@ (801124c <vPortExitCritical+0x50>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	3b01      	subs	r3, #1
 8011228:	4a08      	ldr	r2, [pc, #32]	@ (801124c <vPortExitCritical+0x50>)
 801122a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801122c:	4b07      	ldr	r3, [pc, #28]	@ (801124c <vPortExitCritical+0x50>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d105      	bne.n	8011240 <vPortExitCritical+0x44>
 8011234:	2300      	movs	r3, #0
 8011236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	f383 8811 	msr	BASEPRI, r3
}
 801123e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011240:	bf00      	nop
 8011242:	370c      	adds	r7, #12
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr
 801124c:	200002b8 	.word	0x200002b8

08011250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011250:	f3ef 8009 	mrs	r0, PSP
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	4b15      	ldr	r3, [pc, #84]	@ (80112b0 <pxCurrentTCBConst>)
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	f01e 0f10 	tst.w	lr, #16
 8011260:	bf08      	it	eq
 8011262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801126a:	6010      	str	r0, [r2, #0]
 801126c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011274:	f380 8811 	msr	BASEPRI, r0
 8011278:	f3bf 8f4f 	dsb	sy
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f7ff f9e6 	bl	8010650 <vTaskSwitchContext>
 8011284:	f04f 0000 	mov.w	r0, #0
 8011288:	f380 8811 	msr	BASEPRI, r0
 801128c:	bc09      	pop	{r0, r3}
 801128e:	6819      	ldr	r1, [r3, #0]
 8011290:	6808      	ldr	r0, [r1, #0]
 8011292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011296:	f01e 0f10 	tst.w	lr, #16
 801129a:	bf08      	it	eq
 801129c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80112a0:	f380 8809 	msr	PSP, r0
 80112a4:	f3bf 8f6f 	isb	sy
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop
 80112ac:	f3af 8000 	nop.w

080112b0 <pxCurrentTCBConst>:
 80112b0:	20001988 	.word	0x20001988
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80112b4:	bf00      	nop
 80112b6:	bf00      	nop

080112b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
	__asm volatile
 80112be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112c2:	f383 8811 	msr	BASEPRI, r3
 80112c6:	f3bf 8f6f 	isb	sy
 80112ca:	f3bf 8f4f 	dsb	sy
 80112ce:	607b      	str	r3, [r7, #4]
}
 80112d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80112d2:	f7ff f903 	bl	80104dc <xTaskIncrementTick>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d003      	beq.n	80112e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80112dc:	4b06      	ldr	r3, [pc, #24]	@ (80112f8 <SysTick_Handler+0x40>)
 80112de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112e2:	601a      	str	r2, [r3, #0]
 80112e4:	2300      	movs	r3, #0
 80112e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	f383 8811 	msr	BASEPRI, r3
}
 80112ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80112f0:	bf00      	nop
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	e000ed04 	.word	0xe000ed04

080112fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80112fc:	b480      	push	{r7}
 80112fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011300:	4b0b      	ldr	r3, [pc, #44]	@ (8011330 <vPortSetupTimerInterrupt+0x34>)
 8011302:	2200      	movs	r2, #0
 8011304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011306:	4b0b      	ldr	r3, [pc, #44]	@ (8011334 <vPortSetupTimerInterrupt+0x38>)
 8011308:	2200      	movs	r2, #0
 801130a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801130c:	4b0a      	ldr	r3, [pc, #40]	@ (8011338 <vPortSetupTimerInterrupt+0x3c>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4a0a      	ldr	r2, [pc, #40]	@ (801133c <vPortSetupTimerInterrupt+0x40>)
 8011312:	fba2 2303 	umull	r2, r3, r2, r3
 8011316:	099b      	lsrs	r3, r3, #6
 8011318:	4a09      	ldr	r2, [pc, #36]	@ (8011340 <vPortSetupTimerInterrupt+0x44>)
 801131a:	3b01      	subs	r3, #1
 801131c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801131e:	4b04      	ldr	r3, [pc, #16]	@ (8011330 <vPortSetupTimerInterrupt+0x34>)
 8011320:	2207      	movs	r2, #7
 8011322:	601a      	str	r2, [r3, #0]
}
 8011324:	bf00      	nop
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	e000e010 	.word	0xe000e010
 8011334:	e000e018 	.word	0xe000e018
 8011338:	20000010 	.word	0x20000010
 801133c:	10624dd3 	.word	0x10624dd3
 8011340:	e000e014 	.word	0xe000e014

08011344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011354 <vPortEnableVFP+0x10>
 8011348:	6801      	ldr	r1, [r0, #0]
 801134a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801134e:	6001      	str	r1, [r0, #0]
 8011350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011352:	bf00      	nop
 8011354:	e000ed88 	.word	0xe000ed88

08011358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011358:	b480      	push	{r7}
 801135a:	b085      	sub	sp, #20
 801135c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801135e:	f3ef 8305 	mrs	r3, IPSR
 8011362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2b0f      	cmp	r3, #15
 8011368:	d915      	bls.n	8011396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801136a:	4a18      	ldr	r2, [pc, #96]	@ (80113cc <vPortValidateInterruptPriority+0x74>)
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	4413      	add	r3, r2
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011374:	4b16      	ldr	r3, [pc, #88]	@ (80113d0 <vPortValidateInterruptPriority+0x78>)
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	7afa      	ldrb	r2, [r7, #11]
 801137a:	429a      	cmp	r2, r3
 801137c:	d20b      	bcs.n	8011396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801137e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	607b      	str	r3, [r7, #4]
}
 8011390:	bf00      	nop
 8011392:	bf00      	nop
 8011394:	e7fd      	b.n	8011392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011396:	4b0f      	ldr	r3, [pc, #60]	@ (80113d4 <vPortValidateInterruptPriority+0x7c>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801139e:	4b0e      	ldr	r3, [pc, #56]	@ (80113d8 <vPortValidateInterruptPriority+0x80>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d90b      	bls.n	80113be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80113a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113aa:	f383 8811 	msr	BASEPRI, r3
 80113ae:	f3bf 8f6f 	isb	sy
 80113b2:	f3bf 8f4f 	dsb	sy
 80113b6:	603b      	str	r3, [r7, #0]
}
 80113b8:	bf00      	nop
 80113ba:	bf00      	nop
 80113bc:	e7fd      	b.n	80113ba <vPortValidateInterruptPriority+0x62>
	}
 80113be:	bf00      	nop
 80113c0:	3714      	adds	r7, #20
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr
 80113ca:	bf00      	nop
 80113cc:	e000e3f0 	.word	0xe000e3f0
 80113d0:	20001ab4 	.word	0x20001ab4
 80113d4:	e000ed0c 	.word	0xe000ed0c
 80113d8:	20001ab8 	.word	0x20001ab8

080113dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b08a      	sub	sp, #40	@ 0x28
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80113e4:	2300      	movs	r3, #0
 80113e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80113e8:	f7fe ffcc 	bl	8010384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80113ec:	4b5c      	ldr	r3, [pc, #368]	@ (8011560 <pvPortMalloc+0x184>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d101      	bne.n	80113f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80113f4:	f000 f924 	bl	8011640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80113f8:	4b5a      	ldr	r3, [pc, #360]	@ (8011564 <pvPortMalloc+0x188>)
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4013      	ands	r3, r2
 8011400:	2b00      	cmp	r3, #0
 8011402:	f040 8095 	bne.w	8011530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d01e      	beq.n	801144a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801140c:	2208      	movs	r2, #8
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4413      	add	r3, r2
 8011412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f003 0307 	and.w	r3, r3, #7
 801141a:	2b00      	cmp	r3, #0
 801141c:	d015      	beq.n	801144a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f023 0307 	bic.w	r3, r3, #7
 8011424:	3308      	adds	r3, #8
 8011426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f003 0307 	and.w	r3, r3, #7
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00b      	beq.n	801144a <pvPortMalloc+0x6e>
	__asm volatile
 8011432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011436:	f383 8811 	msr	BASEPRI, r3
 801143a:	f3bf 8f6f 	isb	sy
 801143e:	f3bf 8f4f 	dsb	sy
 8011442:	617b      	str	r3, [r7, #20]
}
 8011444:	bf00      	nop
 8011446:	bf00      	nop
 8011448:	e7fd      	b.n	8011446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d06f      	beq.n	8011530 <pvPortMalloc+0x154>
 8011450:	4b45      	ldr	r3, [pc, #276]	@ (8011568 <pvPortMalloc+0x18c>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	429a      	cmp	r2, r3
 8011458:	d86a      	bhi.n	8011530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801145a:	4b44      	ldr	r3, [pc, #272]	@ (801156c <pvPortMalloc+0x190>)
 801145c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801145e:	4b43      	ldr	r3, [pc, #268]	@ (801156c <pvPortMalloc+0x190>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011464:	e004      	b.n	8011470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	429a      	cmp	r2, r3
 8011478:	d903      	bls.n	8011482 <pvPortMalloc+0xa6>
 801147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1f1      	bne.n	8011466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011482:	4b37      	ldr	r3, [pc, #220]	@ (8011560 <pvPortMalloc+0x184>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011488:	429a      	cmp	r2, r3
 801148a:	d051      	beq.n	8011530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801148c:	6a3b      	ldr	r3, [r7, #32]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2208      	movs	r2, #8
 8011492:	4413      	add	r3, r2
 8011494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a0:	685a      	ldr	r2, [r3, #4]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	1ad2      	subs	r2, r2, r3
 80114a6:	2308      	movs	r3, #8
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d920      	bls.n	80114f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80114ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	4413      	add	r3, r2
 80114b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	f003 0307 	and.w	r3, r3, #7
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d00b      	beq.n	80114d8 <pvPortMalloc+0xfc>
	__asm volatile
 80114c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114c4:	f383 8811 	msr	BASEPRI, r3
 80114c8:	f3bf 8f6f 	isb	sy
 80114cc:	f3bf 8f4f 	dsb	sy
 80114d0:	613b      	str	r3, [r7, #16]
}
 80114d2:	bf00      	nop
 80114d4:	bf00      	nop
 80114d6:	e7fd      	b.n	80114d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80114d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	1ad2      	subs	r2, r2, r3
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80114e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80114ea:	69b8      	ldr	r0, [r7, #24]
 80114ec:	f000 f90a 	bl	8011704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80114f0:	4b1d      	ldr	r3, [pc, #116]	@ (8011568 <pvPortMalloc+0x18c>)
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	1ad3      	subs	r3, r2, r3
 80114fa:	4a1b      	ldr	r2, [pc, #108]	@ (8011568 <pvPortMalloc+0x18c>)
 80114fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114fe:	4b1a      	ldr	r3, [pc, #104]	@ (8011568 <pvPortMalloc+0x18c>)
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	4b1b      	ldr	r3, [pc, #108]	@ (8011570 <pvPortMalloc+0x194>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	429a      	cmp	r2, r3
 8011508:	d203      	bcs.n	8011512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801150a:	4b17      	ldr	r3, [pc, #92]	@ (8011568 <pvPortMalloc+0x18c>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	4a18      	ldr	r2, [pc, #96]	@ (8011570 <pvPortMalloc+0x194>)
 8011510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011514:	685a      	ldr	r2, [r3, #4]
 8011516:	4b13      	ldr	r3, [pc, #76]	@ (8011564 <pvPortMalloc+0x188>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	431a      	orrs	r2, r3
 801151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011522:	2200      	movs	r2, #0
 8011524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011526:	4b13      	ldr	r3, [pc, #76]	@ (8011574 <pvPortMalloc+0x198>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	3301      	adds	r3, #1
 801152c:	4a11      	ldr	r2, [pc, #68]	@ (8011574 <pvPortMalloc+0x198>)
 801152e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011530:	f7fe ff36 	bl	80103a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	f003 0307 	and.w	r3, r3, #7
 801153a:	2b00      	cmp	r3, #0
 801153c:	d00b      	beq.n	8011556 <pvPortMalloc+0x17a>
	__asm volatile
 801153e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011542:	f383 8811 	msr	BASEPRI, r3
 8011546:	f3bf 8f6f 	isb	sy
 801154a:	f3bf 8f4f 	dsb	sy
 801154e:	60fb      	str	r3, [r7, #12]
}
 8011550:	bf00      	nop
 8011552:	bf00      	nop
 8011554:	e7fd      	b.n	8011552 <pvPortMalloc+0x176>
	return pvReturn;
 8011556:	69fb      	ldr	r3, [r7, #28]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3728      	adds	r7, #40	@ 0x28
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}
 8011560:	200056c4 	.word	0x200056c4
 8011564:	200056d8 	.word	0x200056d8
 8011568:	200056c8 	.word	0x200056c8
 801156c:	200056bc 	.word	0x200056bc
 8011570:	200056cc 	.word	0x200056cc
 8011574:	200056d0 	.word	0x200056d0

08011578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b086      	sub	sp, #24
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d04f      	beq.n	801162a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801158a:	2308      	movs	r3, #8
 801158c:	425b      	negs	r3, r3
 801158e:	697a      	ldr	r2, [r7, #20]
 8011590:	4413      	add	r3, r2
 8011592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	685a      	ldr	r2, [r3, #4]
 801159c:	4b25      	ldr	r3, [pc, #148]	@ (8011634 <vPortFree+0xbc>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4013      	ands	r3, r2
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d10b      	bne.n	80115be <vPortFree+0x46>
	__asm volatile
 80115a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115aa:	f383 8811 	msr	BASEPRI, r3
 80115ae:	f3bf 8f6f 	isb	sy
 80115b2:	f3bf 8f4f 	dsb	sy
 80115b6:	60fb      	str	r3, [r7, #12]
}
 80115b8:	bf00      	nop
 80115ba:	bf00      	nop
 80115bc:	e7fd      	b.n	80115ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00b      	beq.n	80115de <vPortFree+0x66>
	__asm volatile
 80115c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115ca:	f383 8811 	msr	BASEPRI, r3
 80115ce:	f3bf 8f6f 	isb	sy
 80115d2:	f3bf 8f4f 	dsb	sy
 80115d6:	60bb      	str	r3, [r7, #8]
}
 80115d8:	bf00      	nop
 80115da:	bf00      	nop
 80115dc:	e7fd      	b.n	80115da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	685a      	ldr	r2, [r3, #4]
 80115e2:	4b14      	ldr	r3, [pc, #80]	@ (8011634 <vPortFree+0xbc>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4013      	ands	r3, r2
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d01e      	beq.n	801162a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d11a      	bne.n	801162a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	685a      	ldr	r2, [r3, #4]
 80115f8:	4b0e      	ldr	r3, [pc, #56]	@ (8011634 <vPortFree+0xbc>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	43db      	mvns	r3, r3
 80115fe:	401a      	ands	r2, r3
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011604:	f7fe febe 	bl	8010384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	4b0a      	ldr	r3, [pc, #40]	@ (8011638 <vPortFree+0xc0>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4413      	add	r3, r2
 8011612:	4a09      	ldr	r2, [pc, #36]	@ (8011638 <vPortFree+0xc0>)
 8011614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011616:	6938      	ldr	r0, [r7, #16]
 8011618:	f000 f874 	bl	8011704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801161c:	4b07      	ldr	r3, [pc, #28]	@ (801163c <vPortFree+0xc4>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	3301      	adds	r3, #1
 8011622:	4a06      	ldr	r2, [pc, #24]	@ (801163c <vPortFree+0xc4>)
 8011624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011626:	f7fe febb 	bl	80103a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801162a:	bf00      	nop
 801162c:	3718      	adds	r7, #24
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	200056d8 	.word	0x200056d8
 8011638:	200056c8 	.word	0x200056c8
 801163c:	200056d4 	.word	0x200056d4

08011640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011640:	b480      	push	{r7}
 8011642:	b085      	sub	sp, #20
 8011644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011646:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801164a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801164c:	4b27      	ldr	r3, [pc, #156]	@ (80116ec <prvHeapInit+0xac>)
 801164e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	f003 0307 	and.w	r3, r3, #7
 8011656:	2b00      	cmp	r3, #0
 8011658:	d00c      	beq.n	8011674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	3307      	adds	r3, #7
 801165e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f023 0307 	bic.w	r3, r3, #7
 8011666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011668:	68ba      	ldr	r2, [r7, #8]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	1ad3      	subs	r3, r2, r3
 801166e:	4a1f      	ldr	r2, [pc, #124]	@ (80116ec <prvHeapInit+0xac>)
 8011670:	4413      	add	r3, r2
 8011672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011678:	4a1d      	ldr	r2, [pc, #116]	@ (80116f0 <prvHeapInit+0xb0>)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801167e:	4b1c      	ldr	r3, [pc, #112]	@ (80116f0 <prvHeapInit+0xb0>)
 8011680:	2200      	movs	r2, #0
 8011682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	4413      	add	r3, r2
 801168a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801168c:	2208      	movs	r2, #8
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	1a9b      	subs	r3, r3, r2
 8011692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f023 0307 	bic.w	r3, r3, #7
 801169a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	4a15      	ldr	r2, [pc, #84]	@ (80116f4 <prvHeapInit+0xb4>)
 80116a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80116a2:	4b14      	ldr	r3, [pc, #80]	@ (80116f4 <prvHeapInit+0xb4>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	2200      	movs	r2, #0
 80116a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80116aa:	4b12      	ldr	r3, [pc, #72]	@ (80116f4 <prvHeapInit+0xb4>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2200      	movs	r2, #0
 80116b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	68fa      	ldr	r2, [r7, #12]
 80116ba:	1ad2      	subs	r2, r2, r3
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80116c0:	4b0c      	ldr	r3, [pc, #48]	@ (80116f4 <prvHeapInit+0xb4>)
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	4a0a      	ldr	r2, [pc, #40]	@ (80116f8 <prvHeapInit+0xb8>)
 80116ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	4a09      	ldr	r2, [pc, #36]	@ (80116fc <prvHeapInit+0xbc>)
 80116d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80116d8:	4b09      	ldr	r3, [pc, #36]	@ (8011700 <prvHeapInit+0xc0>)
 80116da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80116de:	601a      	str	r2, [r3, #0]
}
 80116e0:	bf00      	nop
 80116e2:	3714      	adds	r7, #20
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr
 80116ec:	20001abc 	.word	0x20001abc
 80116f0:	200056bc 	.word	0x200056bc
 80116f4:	200056c4 	.word	0x200056c4
 80116f8:	200056cc 	.word	0x200056cc
 80116fc:	200056c8 	.word	0x200056c8
 8011700:	200056d8 	.word	0x200056d8

08011704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801170c:	4b28      	ldr	r3, [pc, #160]	@ (80117b0 <prvInsertBlockIntoFreeList+0xac>)
 801170e:	60fb      	str	r3, [r7, #12]
 8011710:	e002      	b.n	8011718 <prvInsertBlockIntoFreeList+0x14>
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	60fb      	str	r3, [r7, #12]
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	429a      	cmp	r2, r3
 8011720:	d8f7      	bhi.n	8011712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	68ba      	ldr	r2, [r7, #8]
 801172c:	4413      	add	r3, r2
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	429a      	cmp	r2, r3
 8011732:	d108      	bne.n	8011746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	685a      	ldr	r2, [r3, #4]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	441a      	add	r2, r3
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	68ba      	ldr	r2, [r7, #8]
 8011750:	441a      	add	r2, r3
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	429a      	cmp	r2, r3
 8011758:	d118      	bne.n	801178c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681a      	ldr	r2, [r3, #0]
 801175e:	4b15      	ldr	r3, [pc, #84]	@ (80117b4 <prvInsertBlockIntoFreeList+0xb0>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	429a      	cmp	r2, r3
 8011764:	d00d      	beq.n	8011782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	685a      	ldr	r2, [r3, #4]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	441a      	add	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	601a      	str	r2, [r3, #0]
 8011780:	e008      	b.n	8011794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011782:	4b0c      	ldr	r3, [pc, #48]	@ (80117b4 <prvInsertBlockIntoFreeList+0xb0>)
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	601a      	str	r2, [r3, #0]
 801178a:	e003      	b.n	8011794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011794:	68fa      	ldr	r2, [r7, #12]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	429a      	cmp	r2, r3
 801179a:	d002      	beq.n	80117a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117a2:	bf00      	nop
 80117a4:	3714      	adds	r7, #20
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop
 80117b0:	200056bc 	.word	0x200056bc
 80117b4:	200056c4 	.word	0x200056c4

080117b8 <malloc>:
 80117b8:	4b02      	ldr	r3, [pc, #8]	@ (80117c4 <malloc+0xc>)
 80117ba:	4601      	mov	r1, r0
 80117bc:	6818      	ldr	r0, [r3, #0]
 80117be:	f000 b82d 	b.w	801181c <_malloc_r>
 80117c2:	bf00      	nop
 80117c4:	20000434 	.word	0x20000434

080117c8 <free>:
 80117c8:	4b02      	ldr	r3, [pc, #8]	@ (80117d4 <free+0xc>)
 80117ca:	4601      	mov	r1, r0
 80117cc:	6818      	ldr	r0, [r3, #0]
 80117ce:	f001 ba3f 	b.w	8012c50 <_free_r>
 80117d2:	bf00      	nop
 80117d4:	20000434 	.word	0x20000434

080117d8 <sbrk_aligned>:
 80117d8:	b570      	push	{r4, r5, r6, lr}
 80117da:	4e0f      	ldr	r6, [pc, #60]	@ (8011818 <sbrk_aligned+0x40>)
 80117dc:	460c      	mov	r4, r1
 80117de:	6831      	ldr	r1, [r6, #0]
 80117e0:	4605      	mov	r5, r0
 80117e2:	b911      	cbnz	r1, 80117ea <sbrk_aligned+0x12>
 80117e4:	f001 f9ce 	bl	8012b84 <_sbrk_r>
 80117e8:	6030      	str	r0, [r6, #0]
 80117ea:	4621      	mov	r1, r4
 80117ec:	4628      	mov	r0, r5
 80117ee:	f001 f9c9 	bl	8012b84 <_sbrk_r>
 80117f2:	1c43      	adds	r3, r0, #1
 80117f4:	d103      	bne.n	80117fe <sbrk_aligned+0x26>
 80117f6:	f04f 34ff 	mov.w	r4, #4294967295
 80117fa:	4620      	mov	r0, r4
 80117fc:	bd70      	pop	{r4, r5, r6, pc}
 80117fe:	1cc4      	adds	r4, r0, #3
 8011800:	f024 0403 	bic.w	r4, r4, #3
 8011804:	42a0      	cmp	r0, r4
 8011806:	d0f8      	beq.n	80117fa <sbrk_aligned+0x22>
 8011808:	1a21      	subs	r1, r4, r0
 801180a:	4628      	mov	r0, r5
 801180c:	f001 f9ba 	bl	8012b84 <_sbrk_r>
 8011810:	3001      	adds	r0, #1
 8011812:	d1f2      	bne.n	80117fa <sbrk_aligned+0x22>
 8011814:	e7ef      	b.n	80117f6 <sbrk_aligned+0x1e>
 8011816:	bf00      	nop
 8011818:	200056dc 	.word	0x200056dc

0801181c <_malloc_r>:
 801181c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011820:	1ccd      	adds	r5, r1, #3
 8011822:	f025 0503 	bic.w	r5, r5, #3
 8011826:	3508      	adds	r5, #8
 8011828:	2d0c      	cmp	r5, #12
 801182a:	bf38      	it	cc
 801182c:	250c      	movcc	r5, #12
 801182e:	2d00      	cmp	r5, #0
 8011830:	4606      	mov	r6, r0
 8011832:	db01      	blt.n	8011838 <_malloc_r+0x1c>
 8011834:	42a9      	cmp	r1, r5
 8011836:	d904      	bls.n	8011842 <_malloc_r+0x26>
 8011838:	230c      	movs	r3, #12
 801183a:	6033      	str	r3, [r6, #0]
 801183c:	2000      	movs	r0, #0
 801183e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011918 <_malloc_r+0xfc>
 8011846:	f000 f869 	bl	801191c <__malloc_lock>
 801184a:	f8d8 3000 	ldr.w	r3, [r8]
 801184e:	461c      	mov	r4, r3
 8011850:	bb44      	cbnz	r4, 80118a4 <_malloc_r+0x88>
 8011852:	4629      	mov	r1, r5
 8011854:	4630      	mov	r0, r6
 8011856:	f7ff ffbf 	bl	80117d8 <sbrk_aligned>
 801185a:	1c43      	adds	r3, r0, #1
 801185c:	4604      	mov	r4, r0
 801185e:	d158      	bne.n	8011912 <_malloc_r+0xf6>
 8011860:	f8d8 4000 	ldr.w	r4, [r8]
 8011864:	4627      	mov	r7, r4
 8011866:	2f00      	cmp	r7, #0
 8011868:	d143      	bne.n	80118f2 <_malloc_r+0xd6>
 801186a:	2c00      	cmp	r4, #0
 801186c:	d04b      	beq.n	8011906 <_malloc_r+0xea>
 801186e:	6823      	ldr	r3, [r4, #0]
 8011870:	4639      	mov	r1, r7
 8011872:	4630      	mov	r0, r6
 8011874:	eb04 0903 	add.w	r9, r4, r3
 8011878:	f001 f984 	bl	8012b84 <_sbrk_r>
 801187c:	4581      	cmp	r9, r0
 801187e:	d142      	bne.n	8011906 <_malloc_r+0xea>
 8011880:	6821      	ldr	r1, [r4, #0]
 8011882:	1a6d      	subs	r5, r5, r1
 8011884:	4629      	mov	r1, r5
 8011886:	4630      	mov	r0, r6
 8011888:	f7ff ffa6 	bl	80117d8 <sbrk_aligned>
 801188c:	3001      	adds	r0, #1
 801188e:	d03a      	beq.n	8011906 <_malloc_r+0xea>
 8011890:	6823      	ldr	r3, [r4, #0]
 8011892:	442b      	add	r3, r5
 8011894:	6023      	str	r3, [r4, #0]
 8011896:	f8d8 3000 	ldr.w	r3, [r8]
 801189a:	685a      	ldr	r2, [r3, #4]
 801189c:	bb62      	cbnz	r2, 80118f8 <_malloc_r+0xdc>
 801189e:	f8c8 7000 	str.w	r7, [r8]
 80118a2:	e00f      	b.n	80118c4 <_malloc_r+0xa8>
 80118a4:	6822      	ldr	r2, [r4, #0]
 80118a6:	1b52      	subs	r2, r2, r5
 80118a8:	d420      	bmi.n	80118ec <_malloc_r+0xd0>
 80118aa:	2a0b      	cmp	r2, #11
 80118ac:	d917      	bls.n	80118de <_malloc_r+0xc2>
 80118ae:	1961      	adds	r1, r4, r5
 80118b0:	42a3      	cmp	r3, r4
 80118b2:	6025      	str	r5, [r4, #0]
 80118b4:	bf18      	it	ne
 80118b6:	6059      	strne	r1, [r3, #4]
 80118b8:	6863      	ldr	r3, [r4, #4]
 80118ba:	bf08      	it	eq
 80118bc:	f8c8 1000 	streq.w	r1, [r8]
 80118c0:	5162      	str	r2, [r4, r5]
 80118c2:	604b      	str	r3, [r1, #4]
 80118c4:	4630      	mov	r0, r6
 80118c6:	f000 f82f 	bl	8011928 <__malloc_unlock>
 80118ca:	f104 000b 	add.w	r0, r4, #11
 80118ce:	1d23      	adds	r3, r4, #4
 80118d0:	f020 0007 	bic.w	r0, r0, #7
 80118d4:	1ac2      	subs	r2, r0, r3
 80118d6:	bf1c      	itt	ne
 80118d8:	1a1b      	subne	r3, r3, r0
 80118da:	50a3      	strne	r3, [r4, r2]
 80118dc:	e7af      	b.n	801183e <_malloc_r+0x22>
 80118de:	6862      	ldr	r2, [r4, #4]
 80118e0:	42a3      	cmp	r3, r4
 80118e2:	bf0c      	ite	eq
 80118e4:	f8c8 2000 	streq.w	r2, [r8]
 80118e8:	605a      	strne	r2, [r3, #4]
 80118ea:	e7eb      	b.n	80118c4 <_malloc_r+0xa8>
 80118ec:	4623      	mov	r3, r4
 80118ee:	6864      	ldr	r4, [r4, #4]
 80118f0:	e7ae      	b.n	8011850 <_malloc_r+0x34>
 80118f2:	463c      	mov	r4, r7
 80118f4:	687f      	ldr	r7, [r7, #4]
 80118f6:	e7b6      	b.n	8011866 <_malloc_r+0x4a>
 80118f8:	461a      	mov	r2, r3
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	42a3      	cmp	r3, r4
 80118fe:	d1fb      	bne.n	80118f8 <_malloc_r+0xdc>
 8011900:	2300      	movs	r3, #0
 8011902:	6053      	str	r3, [r2, #4]
 8011904:	e7de      	b.n	80118c4 <_malloc_r+0xa8>
 8011906:	230c      	movs	r3, #12
 8011908:	6033      	str	r3, [r6, #0]
 801190a:	4630      	mov	r0, r6
 801190c:	f000 f80c 	bl	8011928 <__malloc_unlock>
 8011910:	e794      	b.n	801183c <_malloc_r+0x20>
 8011912:	6005      	str	r5, [r0, #0]
 8011914:	e7d6      	b.n	80118c4 <_malloc_r+0xa8>
 8011916:	bf00      	nop
 8011918:	200056e0 	.word	0x200056e0

0801191c <__malloc_lock>:
 801191c:	4801      	ldr	r0, [pc, #4]	@ (8011924 <__malloc_lock+0x8>)
 801191e:	f001 b97e 	b.w	8012c1e <__retarget_lock_acquire_recursive>
 8011922:	bf00      	nop
 8011924:	20005824 	.word	0x20005824

08011928 <__malloc_unlock>:
 8011928:	4801      	ldr	r0, [pc, #4]	@ (8011930 <__malloc_unlock+0x8>)
 801192a:	f001 b979 	b.w	8012c20 <__retarget_lock_release_recursive>
 801192e:	bf00      	nop
 8011930:	20005824 	.word	0x20005824

08011934 <realloc>:
 8011934:	4b02      	ldr	r3, [pc, #8]	@ (8011940 <realloc+0xc>)
 8011936:	460a      	mov	r2, r1
 8011938:	4601      	mov	r1, r0
 801193a:	6818      	ldr	r0, [r3, #0]
 801193c:	f000 b802 	b.w	8011944 <_realloc_r>
 8011940:	20000434 	.word	0x20000434

08011944 <_realloc_r>:
 8011944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011948:	4680      	mov	r8, r0
 801194a:	4615      	mov	r5, r2
 801194c:	460c      	mov	r4, r1
 801194e:	b921      	cbnz	r1, 801195a <_realloc_r+0x16>
 8011950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011954:	4611      	mov	r1, r2
 8011956:	f7ff bf61 	b.w	801181c <_malloc_r>
 801195a:	b92a      	cbnz	r2, 8011968 <_realloc_r+0x24>
 801195c:	f001 f978 	bl	8012c50 <_free_r>
 8011960:	2400      	movs	r4, #0
 8011962:	4620      	mov	r0, r4
 8011964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011968:	f002 f9ba 	bl	8013ce0 <_malloc_usable_size_r>
 801196c:	4285      	cmp	r5, r0
 801196e:	4606      	mov	r6, r0
 8011970:	d802      	bhi.n	8011978 <_realloc_r+0x34>
 8011972:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011976:	d8f4      	bhi.n	8011962 <_realloc_r+0x1e>
 8011978:	4629      	mov	r1, r5
 801197a:	4640      	mov	r0, r8
 801197c:	f7ff ff4e 	bl	801181c <_malloc_r>
 8011980:	4607      	mov	r7, r0
 8011982:	2800      	cmp	r0, #0
 8011984:	d0ec      	beq.n	8011960 <_realloc_r+0x1c>
 8011986:	42b5      	cmp	r5, r6
 8011988:	462a      	mov	r2, r5
 801198a:	4621      	mov	r1, r4
 801198c:	bf28      	it	cs
 801198e:	4632      	movcs	r2, r6
 8011990:	f001 f947 	bl	8012c22 <memcpy>
 8011994:	4621      	mov	r1, r4
 8011996:	4640      	mov	r0, r8
 8011998:	f001 f95a 	bl	8012c50 <_free_r>
 801199c:	463c      	mov	r4, r7
 801199e:	e7e0      	b.n	8011962 <_realloc_r+0x1e>

080119a0 <sulp>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	4604      	mov	r4, r0
 80119a4:	460d      	mov	r5, r1
 80119a6:	ec45 4b10 	vmov	d0, r4, r5
 80119aa:	4616      	mov	r6, r2
 80119ac:	f002 f85a 	bl	8013a64 <__ulp>
 80119b0:	ec51 0b10 	vmov	r0, r1, d0
 80119b4:	b17e      	cbz	r6, 80119d6 <sulp+0x36>
 80119b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80119ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80119be:	2b00      	cmp	r3, #0
 80119c0:	dd09      	ble.n	80119d6 <sulp+0x36>
 80119c2:	051b      	lsls	r3, r3, #20
 80119c4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80119c8:	2400      	movs	r4, #0
 80119ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80119ce:	4622      	mov	r2, r4
 80119d0:	462b      	mov	r3, r5
 80119d2:	f7ee fe41 	bl	8000658 <__aeabi_dmul>
 80119d6:	ec41 0b10 	vmov	d0, r0, r1
 80119da:	bd70      	pop	{r4, r5, r6, pc}
 80119dc:	0000      	movs	r0, r0
	...

080119e0 <_strtod_l>:
 80119e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e4:	b09f      	sub	sp, #124	@ 0x7c
 80119e6:	460c      	mov	r4, r1
 80119e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80119ea:	2200      	movs	r2, #0
 80119ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80119ee:	9005      	str	r0, [sp, #20]
 80119f0:	f04f 0a00 	mov.w	sl, #0
 80119f4:	f04f 0b00 	mov.w	fp, #0
 80119f8:	460a      	mov	r2, r1
 80119fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80119fc:	7811      	ldrb	r1, [r2, #0]
 80119fe:	292b      	cmp	r1, #43	@ 0x2b
 8011a00:	d04a      	beq.n	8011a98 <_strtod_l+0xb8>
 8011a02:	d838      	bhi.n	8011a76 <_strtod_l+0x96>
 8011a04:	290d      	cmp	r1, #13
 8011a06:	d832      	bhi.n	8011a6e <_strtod_l+0x8e>
 8011a08:	2908      	cmp	r1, #8
 8011a0a:	d832      	bhi.n	8011a72 <_strtod_l+0x92>
 8011a0c:	2900      	cmp	r1, #0
 8011a0e:	d03b      	beq.n	8011a88 <_strtod_l+0xa8>
 8011a10:	2200      	movs	r2, #0
 8011a12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011a14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011a16:	782a      	ldrb	r2, [r5, #0]
 8011a18:	2a30      	cmp	r2, #48	@ 0x30
 8011a1a:	f040 80b3 	bne.w	8011b84 <_strtod_l+0x1a4>
 8011a1e:	786a      	ldrb	r2, [r5, #1]
 8011a20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011a24:	2a58      	cmp	r2, #88	@ 0x58
 8011a26:	d16e      	bne.n	8011b06 <_strtod_l+0x126>
 8011a28:	9302      	str	r3, [sp, #8]
 8011a2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a2c:	9301      	str	r3, [sp, #4]
 8011a2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8011a30:	9300      	str	r3, [sp, #0]
 8011a32:	4a8e      	ldr	r2, [pc, #568]	@ (8011c6c <_strtod_l+0x28c>)
 8011a34:	9805      	ldr	r0, [sp, #20]
 8011a36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011a38:	a919      	add	r1, sp, #100	@ 0x64
 8011a3a:	f001 f9bb 	bl	8012db4 <__gethex>
 8011a3e:	f010 060f 	ands.w	r6, r0, #15
 8011a42:	4604      	mov	r4, r0
 8011a44:	d005      	beq.n	8011a52 <_strtod_l+0x72>
 8011a46:	2e06      	cmp	r6, #6
 8011a48:	d128      	bne.n	8011a9c <_strtod_l+0xbc>
 8011a4a:	3501      	adds	r5, #1
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8011a50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	f040 858e 	bne.w	8012576 <_strtod_l+0xb96>
 8011a5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a5c:	b1cb      	cbz	r3, 8011a92 <_strtod_l+0xb2>
 8011a5e:	4652      	mov	r2, sl
 8011a60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011a64:	ec43 2b10 	vmov	d0, r2, r3
 8011a68:	b01f      	add	sp, #124	@ 0x7c
 8011a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a6e:	2920      	cmp	r1, #32
 8011a70:	d1ce      	bne.n	8011a10 <_strtod_l+0x30>
 8011a72:	3201      	adds	r2, #1
 8011a74:	e7c1      	b.n	80119fa <_strtod_l+0x1a>
 8011a76:	292d      	cmp	r1, #45	@ 0x2d
 8011a78:	d1ca      	bne.n	8011a10 <_strtod_l+0x30>
 8011a7a:	2101      	movs	r1, #1
 8011a7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011a7e:	1c51      	adds	r1, r2, #1
 8011a80:	9119      	str	r1, [sp, #100]	@ 0x64
 8011a82:	7852      	ldrb	r2, [r2, #1]
 8011a84:	2a00      	cmp	r2, #0
 8011a86:	d1c5      	bne.n	8011a14 <_strtod_l+0x34>
 8011a88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011a8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f040 8570 	bne.w	8012572 <_strtod_l+0xb92>
 8011a92:	4652      	mov	r2, sl
 8011a94:	465b      	mov	r3, fp
 8011a96:	e7e5      	b.n	8011a64 <_strtod_l+0x84>
 8011a98:	2100      	movs	r1, #0
 8011a9a:	e7ef      	b.n	8011a7c <_strtod_l+0x9c>
 8011a9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011a9e:	b13a      	cbz	r2, 8011ab0 <_strtod_l+0xd0>
 8011aa0:	2135      	movs	r1, #53	@ 0x35
 8011aa2:	a81c      	add	r0, sp, #112	@ 0x70
 8011aa4:	f002 f8d8 	bl	8013c58 <__copybits>
 8011aa8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011aaa:	9805      	ldr	r0, [sp, #20]
 8011aac:	f001 fca6 	bl	80133fc <_Bfree>
 8011ab0:	3e01      	subs	r6, #1
 8011ab2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011ab4:	2e04      	cmp	r6, #4
 8011ab6:	d806      	bhi.n	8011ac6 <_strtod_l+0xe6>
 8011ab8:	e8df f006 	tbb	[pc, r6]
 8011abc:	201d0314 	.word	0x201d0314
 8011ac0:	14          	.byte	0x14
 8011ac1:	00          	.byte	0x00
 8011ac2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011ac6:	05e1      	lsls	r1, r4, #23
 8011ac8:	bf48      	it	mi
 8011aca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011ace:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011ad2:	0d1b      	lsrs	r3, r3, #20
 8011ad4:	051b      	lsls	r3, r3, #20
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d1bb      	bne.n	8011a52 <_strtod_l+0x72>
 8011ada:	f001 f875 	bl	8012bc8 <__errno>
 8011ade:	2322      	movs	r3, #34	@ 0x22
 8011ae0:	6003      	str	r3, [r0, #0]
 8011ae2:	e7b6      	b.n	8011a52 <_strtod_l+0x72>
 8011ae4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011ae8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011aec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011af0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011af4:	e7e7      	b.n	8011ac6 <_strtod_l+0xe6>
 8011af6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011c74 <_strtod_l+0x294>
 8011afa:	e7e4      	b.n	8011ac6 <_strtod_l+0xe6>
 8011afc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011b00:	f04f 3aff 	mov.w	sl, #4294967295
 8011b04:	e7df      	b.n	8011ac6 <_strtod_l+0xe6>
 8011b06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b08:	1c5a      	adds	r2, r3, #1
 8011b0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b0c:	785b      	ldrb	r3, [r3, #1]
 8011b0e:	2b30      	cmp	r3, #48	@ 0x30
 8011b10:	d0f9      	beq.n	8011b06 <_strtod_l+0x126>
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d09d      	beq.n	8011a52 <_strtod_l+0x72>
 8011b16:	2301      	movs	r3, #1
 8011b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8011b1e:	2300      	movs	r3, #0
 8011b20:	9308      	str	r3, [sp, #32]
 8011b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b24:	461f      	mov	r7, r3
 8011b26:	220a      	movs	r2, #10
 8011b28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011b2a:	7805      	ldrb	r5, [r0, #0]
 8011b2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011b30:	b2d9      	uxtb	r1, r3
 8011b32:	2909      	cmp	r1, #9
 8011b34:	d928      	bls.n	8011b88 <_strtod_l+0x1a8>
 8011b36:	494e      	ldr	r1, [pc, #312]	@ (8011c70 <_strtod_l+0x290>)
 8011b38:	2201      	movs	r2, #1
 8011b3a:	f000 ff87 	bl	8012a4c <strncmp>
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	d032      	beq.n	8011ba8 <_strtod_l+0x1c8>
 8011b42:	2000      	movs	r0, #0
 8011b44:	462a      	mov	r2, r5
 8011b46:	4681      	mov	r9, r0
 8011b48:	463d      	mov	r5, r7
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2a65      	cmp	r2, #101	@ 0x65
 8011b4e:	d001      	beq.n	8011b54 <_strtod_l+0x174>
 8011b50:	2a45      	cmp	r2, #69	@ 0x45
 8011b52:	d114      	bne.n	8011b7e <_strtod_l+0x19e>
 8011b54:	b91d      	cbnz	r5, 8011b5e <_strtod_l+0x17e>
 8011b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b58:	4302      	orrs	r2, r0
 8011b5a:	d095      	beq.n	8011a88 <_strtod_l+0xa8>
 8011b5c:	2500      	movs	r5, #0
 8011b5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011b60:	1c62      	adds	r2, r4, #1
 8011b62:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b64:	7862      	ldrb	r2, [r4, #1]
 8011b66:	2a2b      	cmp	r2, #43	@ 0x2b
 8011b68:	d077      	beq.n	8011c5a <_strtod_l+0x27a>
 8011b6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8011b6c:	d07b      	beq.n	8011c66 <_strtod_l+0x286>
 8011b6e:	f04f 0c00 	mov.w	ip, #0
 8011b72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011b76:	2909      	cmp	r1, #9
 8011b78:	f240 8082 	bls.w	8011c80 <_strtod_l+0x2a0>
 8011b7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8011b7e:	f04f 0800 	mov.w	r8, #0
 8011b82:	e0a2      	b.n	8011cca <_strtod_l+0x2ea>
 8011b84:	2300      	movs	r3, #0
 8011b86:	e7c7      	b.n	8011b18 <_strtod_l+0x138>
 8011b88:	2f08      	cmp	r7, #8
 8011b8a:	bfd5      	itete	le
 8011b8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011b8e:	9908      	ldrgt	r1, [sp, #32]
 8011b90:	fb02 3301 	mlale	r3, r2, r1, r3
 8011b94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011b98:	f100 0001 	add.w	r0, r0, #1
 8011b9c:	bfd4      	ite	le
 8011b9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011ba0:	9308      	strgt	r3, [sp, #32]
 8011ba2:	3701      	adds	r7, #1
 8011ba4:	9019      	str	r0, [sp, #100]	@ 0x64
 8011ba6:	e7bf      	b.n	8011b28 <_strtod_l+0x148>
 8011ba8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011baa:	1c5a      	adds	r2, r3, #1
 8011bac:	9219      	str	r2, [sp, #100]	@ 0x64
 8011bae:	785a      	ldrb	r2, [r3, #1]
 8011bb0:	b37f      	cbz	r7, 8011c12 <_strtod_l+0x232>
 8011bb2:	4681      	mov	r9, r0
 8011bb4:	463d      	mov	r5, r7
 8011bb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011bba:	2b09      	cmp	r3, #9
 8011bbc:	d912      	bls.n	8011be4 <_strtod_l+0x204>
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	e7c4      	b.n	8011b4c <_strtod_l+0x16c>
 8011bc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011bc4:	1c5a      	adds	r2, r3, #1
 8011bc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8011bc8:	785a      	ldrb	r2, [r3, #1]
 8011bca:	3001      	adds	r0, #1
 8011bcc:	2a30      	cmp	r2, #48	@ 0x30
 8011bce:	d0f8      	beq.n	8011bc2 <_strtod_l+0x1e2>
 8011bd0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011bd4:	2b08      	cmp	r3, #8
 8011bd6:	f200 84d3 	bhi.w	8012580 <_strtod_l+0xba0>
 8011bda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011bdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8011bde:	4681      	mov	r9, r0
 8011be0:	2000      	movs	r0, #0
 8011be2:	4605      	mov	r5, r0
 8011be4:	3a30      	subs	r2, #48	@ 0x30
 8011be6:	f100 0301 	add.w	r3, r0, #1
 8011bea:	d02a      	beq.n	8011c42 <_strtod_l+0x262>
 8011bec:	4499      	add	r9, r3
 8011bee:	eb00 0c05 	add.w	ip, r0, r5
 8011bf2:	462b      	mov	r3, r5
 8011bf4:	210a      	movs	r1, #10
 8011bf6:	4563      	cmp	r3, ip
 8011bf8:	d10d      	bne.n	8011c16 <_strtod_l+0x236>
 8011bfa:	1c69      	adds	r1, r5, #1
 8011bfc:	4401      	add	r1, r0
 8011bfe:	4428      	add	r0, r5
 8011c00:	2808      	cmp	r0, #8
 8011c02:	dc16      	bgt.n	8011c32 <_strtod_l+0x252>
 8011c04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011c06:	230a      	movs	r3, #10
 8011c08:	fb03 2300 	mla	r3, r3, r0, r2
 8011c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c0e:	2300      	movs	r3, #0
 8011c10:	e018      	b.n	8011c44 <_strtod_l+0x264>
 8011c12:	4638      	mov	r0, r7
 8011c14:	e7da      	b.n	8011bcc <_strtod_l+0x1ec>
 8011c16:	2b08      	cmp	r3, #8
 8011c18:	f103 0301 	add.w	r3, r3, #1
 8011c1c:	dc03      	bgt.n	8011c26 <_strtod_l+0x246>
 8011c1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011c20:	434e      	muls	r6, r1
 8011c22:	960a      	str	r6, [sp, #40]	@ 0x28
 8011c24:	e7e7      	b.n	8011bf6 <_strtod_l+0x216>
 8011c26:	2b10      	cmp	r3, #16
 8011c28:	bfde      	ittt	le
 8011c2a:	9e08      	ldrle	r6, [sp, #32]
 8011c2c:	434e      	mulle	r6, r1
 8011c2e:	9608      	strle	r6, [sp, #32]
 8011c30:	e7e1      	b.n	8011bf6 <_strtod_l+0x216>
 8011c32:	280f      	cmp	r0, #15
 8011c34:	dceb      	bgt.n	8011c0e <_strtod_l+0x22e>
 8011c36:	9808      	ldr	r0, [sp, #32]
 8011c38:	230a      	movs	r3, #10
 8011c3a:	fb03 2300 	mla	r3, r3, r0, r2
 8011c3e:	9308      	str	r3, [sp, #32]
 8011c40:	e7e5      	b.n	8011c0e <_strtod_l+0x22e>
 8011c42:	4629      	mov	r1, r5
 8011c44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c46:	1c50      	adds	r0, r2, #1
 8011c48:	9019      	str	r0, [sp, #100]	@ 0x64
 8011c4a:	7852      	ldrb	r2, [r2, #1]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	460d      	mov	r5, r1
 8011c50:	e7b1      	b.n	8011bb6 <_strtod_l+0x1d6>
 8011c52:	f04f 0900 	mov.w	r9, #0
 8011c56:	2301      	movs	r3, #1
 8011c58:	e77d      	b.n	8011b56 <_strtod_l+0x176>
 8011c5a:	f04f 0c00 	mov.w	ip, #0
 8011c5e:	1ca2      	adds	r2, r4, #2
 8011c60:	9219      	str	r2, [sp, #100]	@ 0x64
 8011c62:	78a2      	ldrb	r2, [r4, #2]
 8011c64:	e785      	b.n	8011b72 <_strtod_l+0x192>
 8011c66:	f04f 0c01 	mov.w	ip, #1
 8011c6a:	e7f8      	b.n	8011c5e <_strtod_l+0x27e>
 8011c6c:	08014ca0 	.word	0x08014ca0
 8011c70:	08014c7c 	.word	0x08014c7c
 8011c74:	7ff00000 	.word	0x7ff00000
 8011c78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c7a:	1c51      	adds	r1, r2, #1
 8011c7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8011c7e:	7852      	ldrb	r2, [r2, #1]
 8011c80:	2a30      	cmp	r2, #48	@ 0x30
 8011c82:	d0f9      	beq.n	8011c78 <_strtod_l+0x298>
 8011c84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011c88:	2908      	cmp	r1, #8
 8011c8a:	f63f af78 	bhi.w	8011b7e <_strtod_l+0x19e>
 8011c8e:	3a30      	subs	r2, #48	@ 0x30
 8011c90:	920e      	str	r2, [sp, #56]	@ 0x38
 8011c92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011c96:	f04f 080a 	mov.w	r8, #10
 8011c9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c9c:	1c56      	adds	r6, r2, #1
 8011c9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8011ca0:	7852      	ldrb	r2, [r2, #1]
 8011ca2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011ca6:	f1be 0f09 	cmp.w	lr, #9
 8011caa:	d939      	bls.n	8011d20 <_strtod_l+0x340>
 8011cac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011cae:	1a76      	subs	r6, r6, r1
 8011cb0:	2e08      	cmp	r6, #8
 8011cb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011cb6:	dc03      	bgt.n	8011cc0 <_strtod_l+0x2e0>
 8011cb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011cba:	4588      	cmp	r8, r1
 8011cbc:	bfa8      	it	ge
 8011cbe:	4688      	movge	r8, r1
 8011cc0:	f1bc 0f00 	cmp.w	ip, #0
 8011cc4:	d001      	beq.n	8011cca <_strtod_l+0x2ea>
 8011cc6:	f1c8 0800 	rsb	r8, r8, #0
 8011cca:	2d00      	cmp	r5, #0
 8011ccc:	d14e      	bne.n	8011d6c <_strtod_l+0x38c>
 8011cce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011cd0:	4308      	orrs	r0, r1
 8011cd2:	f47f aebe 	bne.w	8011a52 <_strtod_l+0x72>
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	f47f aed6 	bne.w	8011a88 <_strtod_l+0xa8>
 8011cdc:	2a69      	cmp	r2, #105	@ 0x69
 8011cde:	d028      	beq.n	8011d32 <_strtod_l+0x352>
 8011ce0:	dc25      	bgt.n	8011d2e <_strtod_l+0x34e>
 8011ce2:	2a49      	cmp	r2, #73	@ 0x49
 8011ce4:	d025      	beq.n	8011d32 <_strtod_l+0x352>
 8011ce6:	2a4e      	cmp	r2, #78	@ 0x4e
 8011ce8:	f47f aece 	bne.w	8011a88 <_strtod_l+0xa8>
 8011cec:	499b      	ldr	r1, [pc, #620]	@ (8011f5c <_strtod_l+0x57c>)
 8011cee:	a819      	add	r0, sp, #100	@ 0x64
 8011cf0:	f001 fa82 	bl	80131f8 <__match>
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	f43f aec7 	beq.w	8011a88 <_strtod_l+0xa8>
 8011cfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	2b28      	cmp	r3, #40	@ 0x28
 8011d00:	d12e      	bne.n	8011d60 <_strtod_l+0x380>
 8011d02:	4997      	ldr	r1, [pc, #604]	@ (8011f60 <_strtod_l+0x580>)
 8011d04:	aa1c      	add	r2, sp, #112	@ 0x70
 8011d06:	a819      	add	r0, sp, #100	@ 0x64
 8011d08:	f001 fa8a 	bl	8013220 <__hexnan>
 8011d0c:	2805      	cmp	r0, #5
 8011d0e:	d127      	bne.n	8011d60 <_strtod_l+0x380>
 8011d10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011d12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011d16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011d1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011d1e:	e698      	b.n	8011a52 <_strtod_l+0x72>
 8011d20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011d22:	fb08 2101 	mla	r1, r8, r1, r2
 8011d26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011d2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d2c:	e7b5      	b.n	8011c9a <_strtod_l+0x2ba>
 8011d2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8011d30:	e7da      	b.n	8011ce8 <_strtod_l+0x308>
 8011d32:	498c      	ldr	r1, [pc, #560]	@ (8011f64 <_strtod_l+0x584>)
 8011d34:	a819      	add	r0, sp, #100	@ 0x64
 8011d36:	f001 fa5f 	bl	80131f8 <__match>
 8011d3a:	2800      	cmp	r0, #0
 8011d3c:	f43f aea4 	beq.w	8011a88 <_strtod_l+0xa8>
 8011d40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d42:	4989      	ldr	r1, [pc, #548]	@ (8011f68 <_strtod_l+0x588>)
 8011d44:	3b01      	subs	r3, #1
 8011d46:	a819      	add	r0, sp, #100	@ 0x64
 8011d48:	9319      	str	r3, [sp, #100]	@ 0x64
 8011d4a:	f001 fa55 	bl	80131f8 <__match>
 8011d4e:	b910      	cbnz	r0, 8011d56 <_strtod_l+0x376>
 8011d50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d52:	3301      	adds	r3, #1
 8011d54:	9319      	str	r3, [sp, #100]	@ 0x64
 8011d56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011f78 <_strtod_l+0x598>
 8011d5a:	f04f 0a00 	mov.w	sl, #0
 8011d5e:	e678      	b.n	8011a52 <_strtod_l+0x72>
 8011d60:	4882      	ldr	r0, [pc, #520]	@ (8011f6c <_strtod_l+0x58c>)
 8011d62:	f000 ff6d 	bl	8012c40 <nan>
 8011d66:	ec5b ab10 	vmov	sl, fp, d0
 8011d6a:	e672      	b.n	8011a52 <_strtod_l+0x72>
 8011d6c:	eba8 0309 	sub.w	r3, r8, r9
 8011d70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d74:	2f00      	cmp	r7, #0
 8011d76:	bf08      	it	eq
 8011d78:	462f      	moveq	r7, r5
 8011d7a:	2d10      	cmp	r5, #16
 8011d7c:	462c      	mov	r4, r5
 8011d7e:	bfa8      	it	ge
 8011d80:	2410      	movge	r4, #16
 8011d82:	f7ee fbef 	bl	8000564 <__aeabi_ui2d>
 8011d86:	2d09      	cmp	r5, #9
 8011d88:	4682      	mov	sl, r0
 8011d8a:	468b      	mov	fp, r1
 8011d8c:	dc13      	bgt.n	8011db6 <_strtod_l+0x3d6>
 8011d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f43f ae5e 	beq.w	8011a52 <_strtod_l+0x72>
 8011d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d98:	dd78      	ble.n	8011e8c <_strtod_l+0x4ac>
 8011d9a:	2b16      	cmp	r3, #22
 8011d9c:	dc5f      	bgt.n	8011e5e <_strtod_l+0x47e>
 8011d9e:	4974      	ldr	r1, [pc, #464]	@ (8011f70 <_strtod_l+0x590>)
 8011da0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011da8:	4652      	mov	r2, sl
 8011daa:	465b      	mov	r3, fp
 8011dac:	f7ee fc54 	bl	8000658 <__aeabi_dmul>
 8011db0:	4682      	mov	sl, r0
 8011db2:	468b      	mov	fp, r1
 8011db4:	e64d      	b.n	8011a52 <_strtod_l+0x72>
 8011db6:	4b6e      	ldr	r3, [pc, #440]	@ (8011f70 <_strtod_l+0x590>)
 8011db8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011dbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011dc0:	f7ee fc4a 	bl	8000658 <__aeabi_dmul>
 8011dc4:	4682      	mov	sl, r0
 8011dc6:	9808      	ldr	r0, [sp, #32]
 8011dc8:	468b      	mov	fp, r1
 8011dca:	f7ee fbcb 	bl	8000564 <__aeabi_ui2d>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	4650      	mov	r0, sl
 8011dd4:	4659      	mov	r1, fp
 8011dd6:	f7ee fa89 	bl	80002ec <__adddf3>
 8011dda:	2d0f      	cmp	r5, #15
 8011ddc:	4682      	mov	sl, r0
 8011dde:	468b      	mov	fp, r1
 8011de0:	ddd5      	ble.n	8011d8e <_strtod_l+0x3ae>
 8011de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011de4:	1b2c      	subs	r4, r5, r4
 8011de6:	441c      	add	r4, r3
 8011de8:	2c00      	cmp	r4, #0
 8011dea:	f340 8096 	ble.w	8011f1a <_strtod_l+0x53a>
 8011dee:	f014 030f 	ands.w	r3, r4, #15
 8011df2:	d00a      	beq.n	8011e0a <_strtod_l+0x42a>
 8011df4:	495e      	ldr	r1, [pc, #376]	@ (8011f70 <_strtod_l+0x590>)
 8011df6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011dfa:	4652      	mov	r2, sl
 8011dfc:	465b      	mov	r3, fp
 8011dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e02:	f7ee fc29 	bl	8000658 <__aeabi_dmul>
 8011e06:	4682      	mov	sl, r0
 8011e08:	468b      	mov	fp, r1
 8011e0a:	f034 040f 	bics.w	r4, r4, #15
 8011e0e:	d073      	beq.n	8011ef8 <_strtod_l+0x518>
 8011e10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011e14:	dd48      	ble.n	8011ea8 <_strtod_l+0x4c8>
 8011e16:	2400      	movs	r4, #0
 8011e18:	46a0      	mov	r8, r4
 8011e1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8011e1c:	46a1      	mov	r9, r4
 8011e1e:	9a05      	ldr	r2, [sp, #20]
 8011e20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011f78 <_strtod_l+0x598>
 8011e24:	2322      	movs	r3, #34	@ 0x22
 8011e26:	6013      	str	r3, [r2, #0]
 8011e28:	f04f 0a00 	mov.w	sl, #0
 8011e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f43f ae0f 	beq.w	8011a52 <_strtod_l+0x72>
 8011e34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011e36:	9805      	ldr	r0, [sp, #20]
 8011e38:	f001 fae0 	bl	80133fc <_Bfree>
 8011e3c:	9805      	ldr	r0, [sp, #20]
 8011e3e:	4649      	mov	r1, r9
 8011e40:	f001 fadc 	bl	80133fc <_Bfree>
 8011e44:	9805      	ldr	r0, [sp, #20]
 8011e46:	4641      	mov	r1, r8
 8011e48:	f001 fad8 	bl	80133fc <_Bfree>
 8011e4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011e4e:	9805      	ldr	r0, [sp, #20]
 8011e50:	f001 fad4 	bl	80133fc <_Bfree>
 8011e54:	9805      	ldr	r0, [sp, #20]
 8011e56:	4621      	mov	r1, r4
 8011e58:	f001 fad0 	bl	80133fc <_Bfree>
 8011e5c:	e5f9      	b.n	8011a52 <_strtod_l+0x72>
 8011e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011e64:	4293      	cmp	r3, r2
 8011e66:	dbbc      	blt.n	8011de2 <_strtod_l+0x402>
 8011e68:	4c41      	ldr	r4, [pc, #260]	@ (8011f70 <_strtod_l+0x590>)
 8011e6a:	f1c5 050f 	rsb	r5, r5, #15
 8011e6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011e72:	4652      	mov	r2, sl
 8011e74:	465b      	mov	r3, fp
 8011e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e7a:	f7ee fbed 	bl	8000658 <__aeabi_dmul>
 8011e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e80:	1b5d      	subs	r5, r3, r5
 8011e82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011e86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011e8a:	e78f      	b.n	8011dac <_strtod_l+0x3cc>
 8011e8c:	3316      	adds	r3, #22
 8011e8e:	dba8      	blt.n	8011de2 <_strtod_l+0x402>
 8011e90:	4b37      	ldr	r3, [pc, #220]	@ (8011f70 <_strtod_l+0x590>)
 8011e92:	eba9 0808 	sub.w	r8, r9, r8
 8011e96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011e9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011e9e:	4650      	mov	r0, sl
 8011ea0:	4659      	mov	r1, fp
 8011ea2:	f7ee fd03 	bl	80008ac <__aeabi_ddiv>
 8011ea6:	e783      	b.n	8011db0 <_strtod_l+0x3d0>
 8011ea8:	4b32      	ldr	r3, [pc, #200]	@ (8011f74 <_strtod_l+0x594>)
 8011eaa:	9308      	str	r3, [sp, #32]
 8011eac:	2300      	movs	r3, #0
 8011eae:	1124      	asrs	r4, r4, #4
 8011eb0:	4650      	mov	r0, sl
 8011eb2:	4659      	mov	r1, fp
 8011eb4:	461e      	mov	r6, r3
 8011eb6:	2c01      	cmp	r4, #1
 8011eb8:	dc21      	bgt.n	8011efe <_strtod_l+0x51e>
 8011eba:	b10b      	cbz	r3, 8011ec0 <_strtod_l+0x4e0>
 8011ebc:	4682      	mov	sl, r0
 8011ebe:	468b      	mov	fp, r1
 8011ec0:	492c      	ldr	r1, [pc, #176]	@ (8011f74 <_strtod_l+0x594>)
 8011ec2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011ec6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011eca:	4652      	mov	r2, sl
 8011ecc:	465b      	mov	r3, fp
 8011ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ed2:	f7ee fbc1 	bl	8000658 <__aeabi_dmul>
 8011ed6:	4b28      	ldr	r3, [pc, #160]	@ (8011f78 <_strtod_l+0x598>)
 8011ed8:	460a      	mov	r2, r1
 8011eda:	400b      	ands	r3, r1
 8011edc:	4927      	ldr	r1, [pc, #156]	@ (8011f7c <_strtod_l+0x59c>)
 8011ede:	428b      	cmp	r3, r1
 8011ee0:	4682      	mov	sl, r0
 8011ee2:	d898      	bhi.n	8011e16 <_strtod_l+0x436>
 8011ee4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011ee8:	428b      	cmp	r3, r1
 8011eea:	bf86      	itte	hi
 8011eec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011f80 <_strtod_l+0x5a0>
 8011ef0:	f04f 3aff 	movhi.w	sl, #4294967295
 8011ef4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011ef8:	2300      	movs	r3, #0
 8011efa:	9308      	str	r3, [sp, #32]
 8011efc:	e07a      	b.n	8011ff4 <_strtod_l+0x614>
 8011efe:	07e2      	lsls	r2, r4, #31
 8011f00:	d505      	bpl.n	8011f0e <_strtod_l+0x52e>
 8011f02:	9b08      	ldr	r3, [sp, #32]
 8011f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f08:	f7ee fba6 	bl	8000658 <__aeabi_dmul>
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	9a08      	ldr	r2, [sp, #32]
 8011f10:	3208      	adds	r2, #8
 8011f12:	3601      	adds	r6, #1
 8011f14:	1064      	asrs	r4, r4, #1
 8011f16:	9208      	str	r2, [sp, #32]
 8011f18:	e7cd      	b.n	8011eb6 <_strtod_l+0x4d6>
 8011f1a:	d0ed      	beq.n	8011ef8 <_strtod_l+0x518>
 8011f1c:	4264      	negs	r4, r4
 8011f1e:	f014 020f 	ands.w	r2, r4, #15
 8011f22:	d00a      	beq.n	8011f3a <_strtod_l+0x55a>
 8011f24:	4b12      	ldr	r3, [pc, #72]	@ (8011f70 <_strtod_l+0x590>)
 8011f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f2a:	4650      	mov	r0, sl
 8011f2c:	4659      	mov	r1, fp
 8011f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f32:	f7ee fcbb 	bl	80008ac <__aeabi_ddiv>
 8011f36:	4682      	mov	sl, r0
 8011f38:	468b      	mov	fp, r1
 8011f3a:	1124      	asrs	r4, r4, #4
 8011f3c:	d0dc      	beq.n	8011ef8 <_strtod_l+0x518>
 8011f3e:	2c1f      	cmp	r4, #31
 8011f40:	dd20      	ble.n	8011f84 <_strtod_l+0x5a4>
 8011f42:	2400      	movs	r4, #0
 8011f44:	46a0      	mov	r8, r4
 8011f46:	940a      	str	r4, [sp, #40]	@ 0x28
 8011f48:	46a1      	mov	r9, r4
 8011f4a:	9a05      	ldr	r2, [sp, #20]
 8011f4c:	2322      	movs	r3, #34	@ 0x22
 8011f4e:	f04f 0a00 	mov.w	sl, #0
 8011f52:	f04f 0b00 	mov.w	fp, #0
 8011f56:	6013      	str	r3, [r2, #0]
 8011f58:	e768      	b.n	8011e2c <_strtod_l+0x44c>
 8011f5a:	bf00      	nop
 8011f5c:	08014c87 	.word	0x08014c87
 8011f60:	08014c8c 	.word	0x08014c8c
 8011f64:	08014c7e 	.word	0x08014c7e
 8011f68:	08014c81 	.word	0x08014c81
 8011f6c:	08015036 	.word	0x08015036
 8011f70:	08014f00 	.word	0x08014f00
 8011f74:	08014ed8 	.word	0x08014ed8
 8011f78:	7ff00000 	.word	0x7ff00000
 8011f7c:	7ca00000 	.word	0x7ca00000
 8011f80:	7fefffff 	.word	0x7fefffff
 8011f84:	f014 0310 	ands.w	r3, r4, #16
 8011f88:	bf18      	it	ne
 8011f8a:	236a      	movne	r3, #106	@ 0x6a
 8011f8c:	4ea9      	ldr	r6, [pc, #676]	@ (8012234 <_strtod_l+0x854>)
 8011f8e:	9308      	str	r3, [sp, #32]
 8011f90:	4650      	mov	r0, sl
 8011f92:	4659      	mov	r1, fp
 8011f94:	2300      	movs	r3, #0
 8011f96:	07e2      	lsls	r2, r4, #31
 8011f98:	d504      	bpl.n	8011fa4 <_strtod_l+0x5c4>
 8011f9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011f9e:	f7ee fb5b 	bl	8000658 <__aeabi_dmul>
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	1064      	asrs	r4, r4, #1
 8011fa6:	f106 0608 	add.w	r6, r6, #8
 8011faa:	d1f4      	bne.n	8011f96 <_strtod_l+0x5b6>
 8011fac:	b10b      	cbz	r3, 8011fb2 <_strtod_l+0x5d2>
 8011fae:	4682      	mov	sl, r0
 8011fb0:	468b      	mov	fp, r1
 8011fb2:	9b08      	ldr	r3, [sp, #32]
 8011fb4:	b1b3      	cbz	r3, 8011fe4 <_strtod_l+0x604>
 8011fb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011fba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	4659      	mov	r1, fp
 8011fc2:	dd0f      	ble.n	8011fe4 <_strtod_l+0x604>
 8011fc4:	2b1f      	cmp	r3, #31
 8011fc6:	dd55      	ble.n	8012074 <_strtod_l+0x694>
 8011fc8:	2b34      	cmp	r3, #52	@ 0x34
 8011fca:	bfde      	ittt	le
 8011fcc:	f04f 33ff 	movle.w	r3, #4294967295
 8011fd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011fd4:	4093      	lslle	r3, r2
 8011fd6:	f04f 0a00 	mov.w	sl, #0
 8011fda:	bfcc      	ite	gt
 8011fdc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011fe0:	ea03 0b01 	andle.w	fp, r3, r1
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	4650      	mov	r0, sl
 8011fea:	4659      	mov	r1, fp
 8011fec:	f7ee fd9c 	bl	8000b28 <__aeabi_dcmpeq>
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	d1a6      	bne.n	8011f42 <_strtod_l+0x562>
 8011ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011ffa:	9805      	ldr	r0, [sp, #20]
 8011ffc:	462b      	mov	r3, r5
 8011ffe:	463a      	mov	r2, r7
 8012000:	f001 fa64 	bl	80134cc <__s2b>
 8012004:	900a      	str	r0, [sp, #40]	@ 0x28
 8012006:	2800      	cmp	r0, #0
 8012008:	f43f af05 	beq.w	8011e16 <_strtod_l+0x436>
 801200c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801200e:	2a00      	cmp	r2, #0
 8012010:	eba9 0308 	sub.w	r3, r9, r8
 8012014:	bfa8      	it	ge
 8012016:	2300      	movge	r3, #0
 8012018:	9312      	str	r3, [sp, #72]	@ 0x48
 801201a:	2400      	movs	r4, #0
 801201c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012020:	9316      	str	r3, [sp, #88]	@ 0x58
 8012022:	46a0      	mov	r8, r4
 8012024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012026:	9805      	ldr	r0, [sp, #20]
 8012028:	6859      	ldr	r1, [r3, #4]
 801202a:	f001 f9a7 	bl	801337c <_Balloc>
 801202e:	4681      	mov	r9, r0
 8012030:	2800      	cmp	r0, #0
 8012032:	f43f aef4 	beq.w	8011e1e <_strtod_l+0x43e>
 8012036:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012038:	691a      	ldr	r2, [r3, #16]
 801203a:	3202      	adds	r2, #2
 801203c:	f103 010c 	add.w	r1, r3, #12
 8012040:	0092      	lsls	r2, r2, #2
 8012042:	300c      	adds	r0, #12
 8012044:	f000 fded 	bl	8012c22 <memcpy>
 8012048:	ec4b ab10 	vmov	d0, sl, fp
 801204c:	9805      	ldr	r0, [sp, #20]
 801204e:	aa1c      	add	r2, sp, #112	@ 0x70
 8012050:	a91b      	add	r1, sp, #108	@ 0x6c
 8012052:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012056:	f001 fd75 	bl	8013b44 <__d2b>
 801205a:	901a      	str	r0, [sp, #104]	@ 0x68
 801205c:	2800      	cmp	r0, #0
 801205e:	f43f aede 	beq.w	8011e1e <_strtod_l+0x43e>
 8012062:	9805      	ldr	r0, [sp, #20]
 8012064:	2101      	movs	r1, #1
 8012066:	f001 fac7 	bl	80135f8 <__i2b>
 801206a:	4680      	mov	r8, r0
 801206c:	b948      	cbnz	r0, 8012082 <_strtod_l+0x6a2>
 801206e:	f04f 0800 	mov.w	r8, #0
 8012072:	e6d4      	b.n	8011e1e <_strtod_l+0x43e>
 8012074:	f04f 32ff 	mov.w	r2, #4294967295
 8012078:	fa02 f303 	lsl.w	r3, r2, r3
 801207c:	ea03 0a0a 	and.w	sl, r3, sl
 8012080:	e7b0      	b.n	8011fe4 <_strtod_l+0x604>
 8012082:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012084:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012086:	2d00      	cmp	r5, #0
 8012088:	bfab      	itete	ge
 801208a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801208c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801208e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012090:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012092:	bfac      	ite	ge
 8012094:	18ef      	addge	r7, r5, r3
 8012096:	1b5e      	sublt	r6, r3, r5
 8012098:	9b08      	ldr	r3, [sp, #32]
 801209a:	1aed      	subs	r5, r5, r3
 801209c:	4415      	add	r5, r2
 801209e:	4b66      	ldr	r3, [pc, #408]	@ (8012238 <_strtod_l+0x858>)
 80120a0:	3d01      	subs	r5, #1
 80120a2:	429d      	cmp	r5, r3
 80120a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80120a8:	da50      	bge.n	801214c <_strtod_l+0x76c>
 80120aa:	1b5b      	subs	r3, r3, r5
 80120ac:	2b1f      	cmp	r3, #31
 80120ae:	eba2 0203 	sub.w	r2, r2, r3
 80120b2:	f04f 0101 	mov.w	r1, #1
 80120b6:	dc3d      	bgt.n	8012134 <_strtod_l+0x754>
 80120b8:	fa01 f303 	lsl.w	r3, r1, r3
 80120bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80120be:	2300      	movs	r3, #0
 80120c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80120c2:	18bd      	adds	r5, r7, r2
 80120c4:	9b08      	ldr	r3, [sp, #32]
 80120c6:	42af      	cmp	r7, r5
 80120c8:	4416      	add	r6, r2
 80120ca:	441e      	add	r6, r3
 80120cc:	463b      	mov	r3, r7
 80120ce:	bfa8      	it	ge
 80120d0:	462b      	movge	r3, r5
 80120d2:	42b3      	cmp	r3, r6
 80120d4:	bfa8      	it	ge
 80120d6:	4633      	movge	r3, r6
 80120d8:	2b00      	cmp	r3, #0
 80120da:	bfc2      	ittt	gt
 80120dc:	1aed      	subgt	r5, r5, r3
 80120de:	1af6      	subgt	r6, r6, r3
 80120e0:	1aff      	subgt	r7, r7, r3
 80120e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	dd16      	ble.n	8012116 <_strtod_l+0x736>
 80120e8:	4641      	mov	r1, r8
 80120ea:	9805      	ldr	r0, [sp, #20]
 80120ec:	461a      	mov	r2, r3
 80120ee:	f001 fb43 	bl	8013778 <__pow5mult>
 80120f2:	4680      	mov	r8, r0
 80120f4:	2800      	cmp	r0, #0
 80120f6:	d0ba      	beq.n	801206e <_strtod_l+0x68e>
 80120f8:	4601      	mov	r1, r0
 80120fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80120fc:	9805      	ldr	r0, [sp, #20]
 80120fe:	f001 fa91 	bl	8013624 <__multiply>
 8012102:	900e      	str	r0, [sp, #56]	@ 0x38
 8012104:	2800      	cmp	r0, #0
 8012106:	f43f ae8a 	beq.w	8011e1e <_strtod_l+0x43e>
 801210a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801210c:	9805      	ldr	r0, [sp, #20]
 801210e:	f001 f975 	bl	80133fc <_Bfree>
 8012112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012114:	931a      	str	r3, [sp, #104]	@ 0x68
 8012116:	2d00      	cmp	r5, #0
 8012118:	dc1d      	bgt.n	8012156 <_strtod_l+0x776>
 801211a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801211c:	2b00      	cmp	r3, #0
 801211e:	dd23      	ble.n	8012168 <_strtod_l+0x788>
 8012120:	4649      	mov	r1, r9
 8012122:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012124:	9805      	ldr	r0, [sp, #20]
 8012126:	f001 fb27 	bl	8013778 <__pow5mult>
 801212a:	4681      	mov	r9, r0
 801212c:	b9e0      	cbnz	r0, 8012168 <_strtod_l+0x788>
 801212e:	f04f 0900 	mov.w	r9, #0
 8012132:	e674      	b.n	8011e1e <_strtod_l+0x43e>
 8012134:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012138:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801213c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012140:	35e2      	adds	r5, #226	@ 0xe2
 8012142:	fa01 f305 	lsl.w	r3, r1, r5
 8012146:	9310      	str	r3, [sp, #64]	@ 0x40
 8012148:	9113      	str	r1, [sp, #76]	@ 0x4c
 801214a:	e7ba      	b.n	80120c2 <_strtod_l+0x6e2>
 801214c:	2300      	movs	r3, #0
 801214e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012150:	2301      	movs	r3, #1
 8012152:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012154:	e7b5      	b.n	80120c2 <_strtod_l+0x6e2>
 8012156:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012158:	9805      	ldr	r0, [sp, #20]
 801215a:	462a      	mov	r2, r5
 801215c:	f001 fb66 	bl	801382c <__lshift>
 8012160:	901a      	str	r0, [sp, #104]	@ 0x68
 8012162:	2800      	cmp	r0, #0
 8012164:	d1d9      	bne.n	801211a <_strtod_l+0x73a>
 8012166:	e65a      	b.n	8011e1e <_strtod_l+0x43e>
 8012168:	2e00      	cmp	r6, #0
 801216a:	dd07      	ble.n	801217c <_strtod_l+0x79c>
 801216c:	4649      	mov	r1, r9
 801216e:	9805      	ldr	r0, [sp, #20]
 8012170:	4632      	mov	r2, r6
 8012172:	f001 fb5b 	bl	801382c <__lshift>
 8012176:	4681      	mov	r9, r0
 8012178:	2800      	cmp	r0, #0
 801217a:	d0d8      	beq.n	801212e <_strtod_l+0x74e>
 801217c:	2f00      	cmp	r7, #0
 801217e:	dd08      	ble.n	8012192 <_strtod_l+0x7b2>
 8012180:	4641      	mov	r1, r8
 8012182:	9805      	ldr	r0, [sp, #20]
 8012184:	463a      	mov	r2, r7
 8012186:	f001 fb51 	bl	801382c <__lshift>
 801218a:	4680      	mov	r8, r0
 801218c:	2800      	cmp	r0, #0
 801218e:	f43f ae46 	beq.w	8011e1e <_strtod_l+0x43e>
 8012192:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012194:	9805      	ldr	r0, [sp, #20]
 8012196:	464a      	mov	r2, r9
 8012198:	f001 fbd0 	bl	801393c <__mdiff>
 801219c:	4604      	mov	r4, r0
 801219e:	2800      	cmp	r0, #0
 80121a0:	f43f ae3d 	beq.w	8011e1e <_strtod_l+0x43e>
 80121a4:	68c3      	ldr	r3, [r0, #12]
 80121a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80121a8:	2300      	movs	r3, #0
 80121aa:	60c3      	str	r3, [r0, #12]
 80121ac:	4641      	mov	r1, r8
 80121ae:	f001 fba9 	bl	8013904 <__mcmp>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	da46      	bge.n	8012244 <_strtod_l+0x864>
 80121b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121b8:	ea53 030a 	orrs.w	r3, r3, sl
 80121bc:	d16c      	bne.n	8012298 <_strtod_l+0x8b8>
 80121be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d168      	bne.n	8012298 <_strtod_l+0x8b8>
 80121c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80121ca:	0d1b      	lsrs	r3, r3, #20
 80121cc:	051b      	lsls	r3, r3, #20
 80121ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80121d2:	d961      	bls.n	8012298 <_strtod_l+0x8b8>
 80121d4:	6963      	ldr	r3, [r4, #20]
 80121d6:	b913      	cbnz	r3, 80121de <_strtod_l+0x7fe>
 80121d8:	6923      	ldr	r3, [r4, #16]
 80121da:	2b01      	cmp	r3, #1
 80121dc:	dd5c      	ble.n	8012298 <_strtod_l+0x8b8>
 80121de:	4621      	mov	r1, r4
 80121e0:	2201      	movs	r2, #1
 80121e2:	9805      	ldr	r0, [sp, #20]
 80121e4:	f001 fb22 	bl	801382c <__lshift>
 80121e8:	4641      	mov	r1, r8
 80121ea:	4604      	mov	r4, r0
 80121ec:	f001 fb8a 	bl	8013904 <__mcmp>
 80121f0:	2800      	cmp	r0, #0
 80121f2:	dd51      	ble.n	8012298 <_strtod_l+0x8b8>
 80121f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80121f8:	9a08      	ldr	r2, [sp, #32]
 80121fa:	0d1b      	lsrs	r3, r3, #20
 80121fc:	051b      	lsls	r3, r3, #20
 80121fe:	2a00      	cmp	r2, #0
 8012200:	d06b      	beq.n	80122da <_strtod_l+0x8fa>
 8012202:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012206:	d868      	bhi.n	80122da <_strtod_l+0x8fa>
 8012208:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801220c:	f67f ae9d 	bls.w	8011f4a <_strtod_l+0x56a>
 8012210:	4b0a      	ldr	r3, [pc, #40]	@ (801223c <_strtod_l+0x85c>)
 8012212:	4650      	mov	r0, sl
 8012214:	4659      	mov	r1, fp
 8012216:	2200      	movs	r2, #0
 8012218:	f7ee fa1e 	bl	8000658 <__aeabi_dmul>
 801221c:	4b08      	ldr	r3, [pc, #32]	@ (8012240 <_strtod_l+0x860>)
 801221e:	400b      	ands	r3, r1
 8012220:	4682      	mov	sl, r0
 8012222:	468b      	mov	fp, r1
 8012224:	2b00      	cmp	r3, #0
 8012226:	f47f ae05 	bne.w	8011e34 <_strtod_l+0x454>
 801222a:	9a05      	ldr	r2, [sp, #20]
 801222c:	2322      	movs	r3, #34	@ 0x22
 801222e:	6013      	str	r3, [r2, #0]
 8012230:	e600      	b.n	8011e34 <_strtod_l+0x454>
 8012232:	bf00      	nop
 8012234:	08014cb8 	.word	0x08014cb8
 8012238:	fffffc02 	.word	0xfffffc02
 801223c:	39500000 	.word	0x39500000
 8012240:	7ff00000 	.word	0x7ff00000
 8012244:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012248:	d165      	bne.n	8012316 <_strtod_l+0x936>
 801224a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801224c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012250:	b35a      	cbz	r2, 80122aa <_strtod_l+0x8ca>
 8012252:	4a9f      	ldr	r2, [pc, #636]	@ (80124d0 <_strtod_l+0xaf0>)
 8012254:	4293      	cmp	r3, r2
 8012256:	d12b      	bne.n	80122b0 <_strtod_l+0x8d0>
 8012258:	9b08      	ldr	r3, [sp, #32]
 801225a:	4651      	mov	r1, sl
 801225c:	b303      	cbz	r3, 80122a0 <_strtod_l+0x8c0>
 801225e:	4b9d      	ldr	r3, [pc, #628]	@ (80124d4 <_strtod_l+0xaf4>)
 8012260:	465a      	mov	r2, fp
 8012262:	4013      	ands	r3, r2
 8012264:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012268:	f04f 32ff 	mov.w	r2, #4294967295
 801226c:	d81b      	bhi.n	80122a6 <_strtod_l+0x8c6>
 801226e:	0d1b      	lsrs	r3, r3, #20
 8012270:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012274:	fa02 f303 	lsl.w	r3, r2, r3
 8012278:	4299      	cmp	r1, r3
 801227a:	d119      	bne.n	80122b0 <_strtod_l+0x8d0>
 801227c:	4b96      	ldr	r3, [pc, #600]	@ (80124d8 <_strtod_l+0xaf8>)
 801227e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012280:	429a      	cmp	r2, r3
 8012282:	d102      	bne.n	801228a <_strtod_l+0x8aa>
 8012284:	3101      	adds	r1, #1
 8012286:	f43f adca 	beq.w	8011e1e <_strtod_l+0x43e>
 801228a:	4b92      	ldr	r3, [pc, #584]	@ (80124d4 <_strtod_l+0xaf4>)
 801228c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801228e:	401a      	ands	r2, r3
 8012290:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012294:	f04f 0a00 	mov.w	sl, #0
 8012298:	9b08      	ldr	r3, [sp, #32]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d1b8      	bne.n	8012210 <_strtod_l+0x830>
 801229e:	e5c9      	b.n	8011e34 <_strtod_l+0x454>
 80122a0:	f04f 33ff 	mov.w	r3, #4294967295
 80122a4:	e7e8      	b.n	8012278 <_strtod_l+0x898>
 80122a6:	4613      	mov	r3, r2
 80122a8:	e7e6      	b.n	8012278 <_strtod_l+0x898>
 80122aa:	ea53 030a 	orrs.w	r3, r3, sl
 80122ae:	d0a1      	beq.n	80121f4 <_strtod_l+0x814>
 80122b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80122b2:	b1db      	cbz	r3, 80122ec <_strtod_l+0x90c>
 80122b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80122b6:	4213      	tst	r3, r2
 80122b8:	d0ee      	beq.n	8012298 <_strtod_l+0x8b8>
 80122ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122bc:	9a08      	ldr	r2, [sp, #32]
 80122be:	4650      	mov	r0, sl
 80122c0:	4659      	mov	r1, fp
 80122c2:	b1bb      	cbz	r3, 80122f4 <_strtod_l+0x914>
 80122c4:	f7ff fb6c 	bl	80119a0 <sulp>
 80122c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122cc:	ec53 2b10 	vmov	r2, r3, d0
 80122d0:	f7ee f80c 	bl	80002ec <__adddf3>
 80122d4:	4682      	mov	sl, r0
 80122d6:	468b      	mov	fp, r1
 80122d8:	e7de      	b.n	8012298 <_strtod_l+0x8b8>
 80122da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80122de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80122e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80122e6:	f04f 3aff 	mov.w	sl, #4294967295
 80122ea:	e7d5      	b.n	8012298 <_strtod_l+0x8b8>
 80122ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80122ee:	ea13 0f0a 	tst.w	r3, sl
 80122f2:	e7e1      	b.n	80122b8 <_strtod_l+0x8d8>
 80122f4:	f7ff fb54 	bl	80119a0 <sulp>
 80122f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122fc:	ec53 2b10 	vmov	r2, r3, d0
 8012300:	f7ed fff2 	bl	80002e8 <__aeabi_dsub>
 8012304:	2200      	movs	r2, #0
 8012306:	2300      	movs	r3, #0
 8012308:	4682      	mov	sl, r0
 801230a:	468b      	mov	fp, r1
 801230c:	f7ee fc0c 	bl	8000b28 <__aeabi_dcmpeq>
 8012310:	2800      	cmp	r0, #0
 8012312:	d0c1      	beq.n	8012298 <_strtod_l+0x8b8>
 8012314:	e619      	b.n	8011f4a <_strtod_l+0x56a>
 8012316:	4641      	mov	r1, r8
 8012318:	4620      	mov	r0, r4
 801231a:	f001 fc6b 	bl	8013bf4 <__ratio>
 801231e:	ec57 6b10 	vmov	r6, r7, d0
 8012322:	2200      	movs	r2, #0
 8012324:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012328:	4630      	mov	r0, r6
 801232a:	4639      	mov	r1, r7
 801232c:	f7ee fc10 	bl	8000b50 <__aeabi_dcmple>
 8012330:	2800      	cmp	r0, #0
 8012332:	d06f      	beq.n	8012414 <_strtod_l+0xa34>
 8012334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012336:	2b00      	cmp	r3, #0
 8012338:	d17a      	bne.n	8012430 <_strtod_l+0xa50>
 801233a:	f1ba 0f00 	cmp.w	sl, #0
 801233e:	d158      	bne.n	80123f2 <_strtod_l+0xa12>
 8012340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012346:	2b00      	cmp	r3, #0
 8012348:	d15a      	bne.n	8012400 <_strtod_l+0xa20>
 801234a:	4b64      	ldr	r3, [pc, #400]	@ (80124dc <_strtod_l+0xafc>)
 801234c:	2200      	movs	r2, #0
 801234e:	4630      	mov	r0, r6
 8012350:	4639      	mov	r1, r7
 8012352:	f7ee fbf3 	bl	8000b3c <__aeabi_dcmplt>
 8012356:	2800      	cmp	r0, #0
 8012358:	d159      	bne.n	801240e <_strtod_l+0xa2e>
 801235a:	4630      	mov	r0, r6
 801235c:	4639      	mov	r1, r7
 801235e:	4b60      	ldr	r3, [pc, #384]	@ (80124e0 <_strtod_l+0xb00>)
 8012360:	2200      	movs	r2, #0
 8012362:	f7ee f979 	bl	8000658 <__aeabi_dmul>
 8012366:	4606      	mov	r6, r0
 8012368:	460f      	mov	r7, r1
 801236a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801236e:	9606      	str	r6, [sp, #24]
 8012370:	9307      	str	r3, [sp, #28]
 8012372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012376:	4d57      	ldr	r5, [pc, #348]	@ (80124d4 <_strtod_l+0xaf4>)
 8012378:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801237c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801237e:	401d      	ands	r5, r3
 8012380:	4b58      	ldr	r3, [pc, #352]	@ (80124e4 <_strtod_l+0xb04>)
 8012382:	429d      	cmp	r5, r3
 8012384:	f040 80b2 	bne.w	80124ec <_strtod_l+0xb0c>
 8012388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801238a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801238e:	ec4b ab10 	vmov	d0, sl, fp
 8012392:	f001 fb67 	bl	8013a64 <__ulp>
 8012396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801239a:	ec51 0b10 	vmov	r0, r1, d0
 801239e:	f7ee f95b 	bl	8000658 <__aeabi_dmul>
 80123a2:	4652      	mov	r2, sl
 80123a4:	465b      	mov	r3, fp
 80123a6:	f7ed ffa1 	bl	80002ec <__adddf3>
 80123aa:	460b      	mov	r3, r1
 80123ac:	4949      	ldr	r1, [pc, #292]	@ (80124d4 <_strtod_l+0xaf4>)
 80123ae:	4a4e      	ldr	r2, [pc, #312]	@ (80124e8 <_strtod_l+0xb08>)
 80123b0:	4019      	ands	r1, r3
 80123b2:	4291      	cmp	r1, r2
 80123b4:	4682      	mov	sl, r0
 80123b6:	d942      	bls.n	801243e <_strtod_l+0xa5e>
 80123b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123ba:	4b47      	ldr	r3, [pc, #284]	@ (80124d8 <_strtod_l+0xaf8>)
 80123bc:	429a      	cmp	r2, r3
 80123be:	d103      	bne.n	80123c8 <_strtod_l+0x9e8>
 80123c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123c2:	3301      	adds	r3, #1
 80123c4:	f43f ad2b 	beq.w	8011e1e <_strtod_l+0x43e>
 80123c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80124d8 <_strtod_l+0xaf8>
 80123cc:	f04f 3aff 	mov.w	sl, #4294967295
 80123d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80123d2:	9805      	ldr	r0, [sp, #20]
 80123d4:	f001 f812 	bl	80133fc <_Bfree>
 80123d8:	9805      	ldr	r0, [sp, #20]
 80123da:	4649      	mov	r1, r9
 80123dc:	f001 f80e 	bl	80133fc <_Bfree>
 80123e0:	9805      	ldr	r0, [sp, #20]
 80123e2:	4641      	mov	r1, r8
 80123e4:	f001 f80a 	bl	80133fc <_Bfree>
 80123e8:	9805      	ldr	r0, [sp, #20]
 80123ea:	4621      	mov	r1, r4
 80123ec:	f001 f806 	bl	80133fc <_Bfree>
 80123f0:	e618      	b.n	8012024 <_strtod_l+0x644>
 80123f2:	f1ba 0f01 	cmp.w	sl, #1
 80123f6:	d103      	bne.n	8012400 <_strtod_l+0xa20>
 80123f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	f43f ada5 	beq.w	8011f4a <_strtod_l+0x56a>
 8012400:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80124b0 <_strtod_l+0xad0>
 8012404:	4f35      	ldr	r7, [pc, #212]	@ (80124dc <_strtod_l+0xafc>)
 8012406:	ed8d 7b06 	vstr	d7, [sp, #24]
 801240a:	2600      	movs	r6, #0
 801240c:	e7b1      	b.n	8012372 <_strtod_l+0x992>
 801240e:	4f34      	ldr	r7, [pc, #208]	@ (80124e0 <_strtod_l+0xb00>)
 8012410:	2600      	movs	r6, #0
 8012412:	e7aa      	b.n	801236a <_strtod_l+0x98a>
 8012414:	4b32      	ldr	r3, [pc, #200]	@ (80124e0 <_strtod_l+0xb00>)
 8012416:	4630      	mov	r0, r6
 8012418:	4639      	mov	r1, r7
 801241a:	2200      	movs	r2, #0
 801241c:	f7ee f91c 	bl	8000658 <__aeabi_dmul>
 8012420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012422:	4606      	mov	r6, r0
 8012424:	460f      	mov	r7, r1
 8012426:	2b00      	cmp	r3, #0
 8012428:	d09f      	beq.n	801236a <_strtod_l+0x98a>
 801242a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801242e:	e7a0      	b.n	8012372 <_strtod_l+0x992>
 8012430:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80124b8 <_strtod_l+0xad8>
 8012434:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012438:	ec57 6b17 	vmov	r6, r7, d7
 801243c:	e799      	b.n	8012372 <_strtod_l+0x992>
 801243e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012442:	9b08      	ldr	r3, [sp, #32]
 8012444:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012448:	2b00      	cmp	r3, #0
 801244a:	d1c1      	bne.n	80123d0 <_strtod_l+0x9f0>
 801244c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012450:	0d1b      	lsrs	r3, r3, #20
 8012452:	051b      	lsls	r3, r3, #20
 8012454:	429d      	cmp	r5, r3
 8012456:	d1bb      	bne.n	80123d0 <_strtod_l+0x9f0>
 8012458:	4630      	mov	r0, r6
 801245a:	4639      	mov	r1, r7
 801245c:	f7ee fc46 	bl	8000cec <__aeabi_d2lz>
 8012460:	f7ee f8cc 	bl	80005fc <__aeabi_l2d>
 8012464:	4602      	mov	r2, r0
 8012466:	460b      	mov	r3, r1
 8012468:	4630      	mov	r0, r6
 801246a:	4639      	mov	r1, r7
 801246c:	f7ed ff3c 	bl	80002e8 <__aeabi_dsub>
 8012470:	460b      	mov	r3, r1
 8012472:	4602      	mov	r2, r0
 8012474:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012478:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801247c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801247e:	ea46 060a 	orr.w	r6, r6, sl
 8012482:	431e      	orrs	r6, r3
 8012484:	d06f      	beq.n	8012566 <_strtod_l+0xb86>
 8012486:	a30e      	add	r3, pc, #56	@ (adr r3, 80124c0 <_strtod_l+0xae0>)
 8012488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248c:	f7ee fb56 	bl	8000b3c <__aeabi_dcmplt>
 8012490:	2800      	cmp	r0, #0
 8012492:	f47f accf 	bne.w	8011e34 <_strtod_l+0x454>
 8012496:	a30c      	add	r3, pc, #48	@ (adr r3, 80124c8 <_strtod_l+0xae8>)
 8012498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80124a0:	f7ee fb6a 	bl	8000b78 <__aeabi_dcmpgt>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d093      	beq.n	80123d0 <_strtod_l+0x9f0>
 80124a8:	e4c4      	b.n	8011e34 <_strtod_l+0x454>
 80124aa:	bf00      	nop
 80124ac:	f3af 8000 	nop.w
 80124b0:	00000000 	.word	0x00000000
 80124b4:	bff00000 	.word	0xbff00000
 80124b8:	00000000 	.word	0x00000000
 80124bc:	3ff00000 	.word	0x3ff00000
 80124c0:	94a03595 	.word	0x94a03595
 80124c4:	3fdfffff 	.word	0x3fdfffff
 80124c8:	35afe535 	.word	0x35afe535
 80124cc:	3fe00000 	.word	0x3fe00000
 80124d0:	000fffff 	.word	0x000fffff
 80124d4:	7ff00000 	.word	0x7ff00000
 80124d8:	7fefffff 	.word	0x7fefffff
 80124dc:	3ff00000 	.word	0x3ff00000
 80124e0:	3fe00000 	.word	0x3fe00000
 80124e4:	7fe00000 	.word	0x7fe00000
 80124e8:	7c9fffff 	.word	0x7c9fffff
 80124ec:	9b08      	ldr	r3, [sp, #32]
 80124ee:	b323      	cbz	r3, 801253a <_strtod_l+0xb5a>
 80124f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80124f4:	d821      	bhi.n	801253a <_strtod_l+0xb5a>
 80124f6:	a328      	add	r3, pc, #160	@ (adr r3, 8012598 <_strtod_l+0xbb8>)
 80124f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fc:	4630      	mov	r0, r6
 80124fe:	4639      	mov	r1, r7
 8012500:	f7ee fb26 	bl	8000b50 <__aeabi_dcmple>
 8012504:	b1a0      	cbz	r0, 8012530 <_strtod_l+0xb50>
 8012506:	4639      	mov	r1, r7
 8012508:	4630      	mov	r0, r6
 801250a:	f7ee fb67 	bl	8000bdc <__aeabi_d2uiz>
 801250e:	2801      	cmp	r0, #1
 8012510:	bf38      	it	cc
 8012512:	2001      	movcc	r0, #1
 8012514:	f7ee f826 	bl	8000564 <__aeabi_ui2d>
 8012518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801251a:	4606      	mov	r6, r0
 801251c:	460f      	mov	r7, r1
 801251e:	b9fb      	cbnz	r3, 8012560 <_strtod_l+0xb80>
 8012520:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012524:	9014      	str	r0, [sp, #80]	@ 0x50
 8012526:	9315      	str	r3, [sp, #84]	@ 0x54
 8012528:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801252c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012530:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012532:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012536:	1b5b      	subs	r3, r3, r5
 8012538:	9311      	str	r3, [sp, #68]	@ 0x44
 801253a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801253e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012542:	f001 fa8f 	bl	8013a64 <__ulp>
 8012546:	4650      	mov	r0, sl
 8012548:	ec53 2b10 	vmov	r2, r3, d0
 801254c:	4659      	mov	r1, fp
 801254e:	f7ee f883 	bl	8000658 <__aeabi_dmul>
 8012552:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012556:	f7ed fec9 	bl	80002ec <__adddf3>
 801255a:	4682      	mov	sl, r0
 801255c:	468b      	mov	fp, r1
 801255e:	e770      	b.n	8012442 <_strtod_l+0xa62>
 8012560:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012564:	e7e0      	b.n	8012528 <_strtod_l+0xb48>
 8012566:	a30e      	add	r3, pc, #56	@ (adr r3, 80125a0 <_strtod_l+0xbc0>)
 8012568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256c:	f7ee fae6 	bl	8000b3c <__aeabi_dcmplt>
 8012570:	e798      	b.n	80124a4 <_strtod_l+0xac4>
 8012572:	2300      	movs	r3, #0
 8012574:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012576:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801257a:	6013      	str	r3, [r2, #0]
 801257c:	f7ff ba6d 	b.w	8011a5a <_strtod_l+0x7a>
 8012580:	2a65      	cmp	r2, #101	@ 0x65
 8012582:	f43f ab66 	beq.w	8011c52 <_strtod_l+0x272>
 8012586:	2a45      	cmp	r2, #69	@ 0x45
 8012588:	f43f ab63 	beq.w	8011c52 <_strtod_l+0x272>
 801258c:	2301      	movs	r3, #1
 801258e:	f7ff bb9e 	b.w	8011cce <_strtod_l+0x2ee>
 8012592:	bf00      	nop
 8012594:	f3af 8000 	nop.w
 8012598:	ffc00000 	.word	0xffc00000
 801259c:	41dfffff 	.word	0x41dfffff
 80125a0:	94a03595 	.word	0x94a03595
 80125a4:	3fcfffff 	.word	0x3fcfffff

080125a8 <strtod>:
 80125a8:	460a      	mov	r2, r1
 80125aa:	4601      	mov	r1, r0
 80125ac:	4802      	ldr	r0, [pc, #8]	@ (80125b8 <strtod+0x10>)
 80125ae:	4b03      	ldr	r3, [pc, #12]	@ (80125bc <strtod+0x14>)
 80125b0:	6800      	ldr	r0, [r0, #0]
 80125b2:	f7ff ba15 	b.w	80119e0 <_strtod_l>
 80125b6:	bf00      	nop
 80125b8:	20000434 	.word	0x20000434
 80125bc:	200002c8 	.word	0x200002c8

080125c0 <std>:
 80125c0:	2300      	movs	r3, #0
 80125c2:	b510      	push	{r4, lr}
 80125c4:	4604      	mov	r4, r0
 80125c6:	e9c0 3300 	strd	r3, r3, [r0]
 80125ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125ce:	6083      	str	r3, [r0, #8]
 80125d0:	8181      	strh	r1, [r0, #12]
 80125d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80125d4:	81c2      	strh	r2, [r0, #14]
 80125d6:	6183      	str	r3, [r0, #24]
 80125d8:	4619      	mov	r1, r3
 80125da:	2208      	movs	r2, #8
 80125dc:	305c      	adds	r0, #92	@ 0x5c
 80125de:	f000 fa2d 	bl	8012a3c <memset>
 80125e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012618 <std+0x58>)
 80125e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80125e6:	4b0d      	ldr	r3, [pc, #52]	@ (801261c <std+0x5c>)
 80125e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80125ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012620 <std+0x60>)
 80125ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80125ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012624 <std+0x64>)
 80125f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80125f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012628 <std+0x68>)
 80125f4:	6224      	str	r4, [r4, #32]
 80125f6:	429c      	cmp	r4, r3
 80125f8:	d006      	beq.n	8012608 <std+0x48>
 80125fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80125fe:	4294      	cmp	r4, r2
 8012600:	d002      	beq.n	8012608 <std+0x48>
 8012602:	33d0      	adds	r3, #208	@ 0xd0
 8012604:	429c      	cmp	r4, r3
 8012606:	d105      	bne.n	8012614 <std+0x54>
 8012608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801260c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012610:	f000 bb04 	b.w	8012c1c <__retarget_lock_init_recursive>
 8012614:	bd10      	pop	{r4, pc}
 8012616:	bf00      	nop
 8012618:	0801288d 	.word	0x0801288d
 801261c:	080128af 	.word	0x080128af
 8012620:	080128e7 	.word	0x080128e7
 8012624:	0801290b 	.word	0x0801290b
 8012628:	200056e4 	.word	0x200056e4

0801262c <stdio_exit_handler>:
 801262c:	4a02      	ldr	r2, [pc, #8]	@ (8012638 <stdio_exit_handler+0xc>)
 801262e:	4903      	ldr	r1, [pc, #12]	@ (801263c <stdio_exit_handler+0x10>)
 8012630:	4803      	ldr	r0, [pc, #12]	@ (8012640 <stdio_exit_handler+0x14>)
 8012632:	f000 b869 	b.w	8012708 <_fwalk_sglue>
 8012636:	bf00      	nop
 8012638:	200002bc 	.word	0x200002bc
 801263c:	08014661 	.word	0x08014661
 8012640:	20000438 	.word	0x20000438

08012644 <cleanup_stdio>:
 8012644:	6841      	ldr	r1, [r0, #4]
 8012646:	4b0c      	ldr	r3, [pc, #48]	@ (8012678 <cleanup_stdio+0x34>)
 8012648:	4299      	cmp	r1, r3
 801264a:	b510      	push	{r4, lr}
 801264c:	4604      	mov	r4, r0
 801264e:	d001      	beq.n	8012654 <cleanup_stdio+0x10>
 8012650:	f002 f806 	bl	8014660 <_fflush_r>
 8012654:	68a1      	ldr	r1, [r4, #8]
 8012656:	4b09      	ldr	r3, [pc, #36]	@ (801267c <cleanup_stdio+0x38>)
 8012658:	4299      	cmp	r1, r3
 801265a:	d002      	beq.n	8012662 <cleanup_stdio+0x1e>
 801265c:	4620      	mov	r0, r4
 801265e:	f001 ffff 	bl	8014660 <_fflush_r>
 8012662:	68e1      	ldr	r1, [r4, #12]
 8012664:	4b06      	ldr	r3, [pc, #24]	@ (8012680 <cleanup_stdio+0x3c>)
 8012666:	4299      	cmp	r1, r3
 8012668:	d004      	beq.n	8012674 <cleanup_stdio+0x30>
 801266a:	4620      	mov	r0, r4
 801266c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012670:	f001 bff6 	b.w	8014660 <_fflush_r>
 8012674:	bd10      	pop	{r4, pc}
 8012676:	bf00      	nop
 8012678:	200056e4 	.word	0x200056e4
 801267c:	2000574c 	.word	0x2000574c
 8012680:	200057b4 	.word	0x200057b4

08012684 <global_stdio_init.part.0>:
 8012684:	b510      	push	{r4, lr}
 8012686:	4b0b      	ldr	r3, [pc, #44]	@ (80126b4 <global_stdio_init.part.0+0x30>)
 8012688:	4c0b      	ldr	r4, [pc, #44]	@ (80126b8 <global_stdio_init.part.0+0x34>)
 801268a:	4a0c      	ldr	r2, [pc, #48]	@ (80126bc <global_stdio_init.part.0+0x38>)
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	4620      	mov	r0, r4
 8012690:	2200      	movs	r2, #0
 8012692:	2104      	movs	r1, #4
 8012694:	f7ff ff94 	bl	80125c0 <std>
 8012698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801269c:	2201      	movs	r2, #1
 801269e:	2109      	movs	r1, #9
 80126a0:	f7ff ff8e 	bl	80125c0 <std>
 80126a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80126a8:	2202      	movs	r2, #2
 80126aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126ae:	2112      	movs	r1, #18
 80126b0:	f7ff bf86 	b.w	80125c0 <std>
 80126b4:	2000581c 	.word	0x2000581c
 80126b8:	200056e4 	.word	0x200056e4
 80126bc:	0801262d 	.word	0x0801262d

080126c0 <__sfp_lock_acquire>:
 80126c0:	4801      	ldr	r0, [pc, #4]	@ (80126c8 <__sfp_lock_acquire+0x8>)
 80126c2:	f000 baac 	b.w	8012c1e <__retarget_lock_acquire_recursive>
 80126c6:	bf00      	nop
 80126c8:	20005825 	.word	0x20005825

080126cc <__sfp_lock_release>:
 80126cc:	4801      	ldr	r0, [pc, #4]	@ (80126d4 <__sfp_lock_release+0x8>)
 80126ce:	f000 baa7 	b.w	8012c20 <__retarget_lock_release_recursive>
 80126d2:	bf00      	nop
 80126d4:	20005825 	.word	0x20005825

080126d8 <__sinit>:
 80126d8:	b510      	push	{r4, lr}
 80126da:	4604      	mov	r4, r0
 80126dc:	f7ff fff0 	bl	80126c0 <__sfp_lock_acquire>
 80126e0:	6a23      	ldr	r3, [r4, #32]
 80126e2:	b11b      	cbz	r3, 80126ec <__sinit+0x14>
 80126e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126e8:	f7ff bff0 	b.w	80126cc <__sfp_lock_release>
 80126ec:	4b04      	ldr	r3, [pc, #16]	@ (8012700 <__sinit+0x28>)
 80126ee:	6223      	str	r3, [r4, #32]
 80126f0:	4b04      	ldr	r3, [pc, #16]	@ (8012704 <__sinit+0x2c>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d1f5      	bne.n	80126e4 <__sinit+0xc>
 80126f8:	f7ff ffc4 	bl	8012684 <global_stdio_init.part.0>
 80126fc:	e7f2      	b.n	80126e4 <__sinit+0xc>
 80126fe:	bf00      	nop
 8012700:	08012645 	.word	0x08012645
 8012704:	2000581c 	.word	0x2000581c

08012708 <_fwalk_sglue>:
 8012708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801270c:	4607      	mov	r7, r0
 801270e:	4688      	mov	r8, r1
 8012710:	4614      	mov	r4, r2
 8012712:	2600      	movs	r6, #0
 8012714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012718:	f1b9 0901 	subs.w	r9, r9, #1
 801271c:	d505      	bpl.n	801272a <_fwalk_sglue+0x22>
 801271e:	6824      	ldr	r4, [r4, #0]
 8012720:	2c00      	cmp	r4, #0
 8012722:	d1f7      	bne.n	8012714 <_fwalk_sglue+0xc>
 8012724:	4630      	mov	r0, r6
 8012726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801272a:	89ab      	ldrh	r3, [r5, #12]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d907      	bls.n	8012740 <_fwalk_sglue+0x38>
 8012730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012734:	3301      	adds	r3, #1
 8012736:	d003      	beq.n	8012740 <_fwalk_sglue+0x38>
 8012738:	4629      	mov	r1, r5
 801273a:	4638      	mov	r0, r7
 801273c:	47c0      	blx	r8
 801273e:	4306      	orrs	r6, r0
 8012740:	3568      	adds	r5, #104	@ 0x68
 8012742:	e7e9      	b.n	8012718 <_fwalk_sglue+0x10>

08012744 <iprintf>:
 8012744:	b40f      	push	{r0, r1, r2, r3}
 8012746:	b507      	push	{r0, r1, r2, lr}
 8012748:	4906      	ldr	r1, [pc, #24]	@ (8012764 <iprintf+0x20>)
 801274a:	ab04      	add	r3, sp, #16
 801274c:	6808      	ldr	r0, [r1, #0]
 801274e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012752:	6881      	ldr	r1, [r0, #8]
 8012754:	9301      	str	r3, [sp, #4]
 8012756:	f001 fc59 	bl	801400c <_vfiprintf_r>
 801275a:	b003      	add	sp, #12
 801275c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012760:	b004      	add	sp, #16
 8012762:	4770      	bx	lr
 8012764:	20000434 	.word	0x20000434

08012768 <_puts_r>:
 8012768:	6a03      	ldr	r3, [r0, #32]
 801276a:	b570      	push	{r4, r5, r6, lr}
 801276c:	6884      	ldr	r4, [r0, #8]
 801276e:	4605      	mov	r5, r0
 8012770:	460e      	mov	r6, r1
 8012772:	b90b      	cbnz	r3, 8012778 <_puts_r+0x10>
 8012774:	f7ff ffb0 	bl	80126d8 <__sinit>
 8012778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801277a:	07db      	lsls	r3, r3, #31
 801277c:	d405      	bmi.n	801278a <_puts_r+0x22>
 801277e:	89a3      	ldrh	r3, [r4, #12]
 8012780:	0598      	lsls	r0, r3, #22
 8012782:	d402      	bmi.n	801278a <_puts_r+0x22>
 8012784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012786:	f000 fa4a 	bl	8012c1e <__retarget_lock_acquire_recursive>
 801278a:	89a3      	ldrh	r3, [r4, #12]
 801278c:	0719      	lsls	r1, r3, #28
 801278e:	d502      	bpl.n	8012796 <_puts_r+0x2e>
 8012790:	6923      	ldr	r3, [r4, #16]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d135      	bne.n	8012802 <_puts_r+0x9a>
 8012796:	4621      	mov	r1, r4
 8012798:	4628      	mov	r0, r5
 801279a:	f000 f8f9 	bl	8012990 <__swsetup_r>
 801279e:	b380      	cbz	r0, 8012802 <_puts_r+0x9a>
 80127a0:	f04f 35ff 	mov.w	r5, #4294967295
 80127a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127a6:	07da      	lsls	r2, r3, #31
 80127a8:	d405      	bmi.n	80127b6 <_puts_r+0x4e>
 80127aa:	89a3      	ldrh	r3, [r4, #12]
 80127ac:	059b      	lsls	r3, r3, #22
 80127ae:	d402      	bmi.n	80127b6 <_puts_r+0x4e>
 80127b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127b2:	f000 fa35 	bl	8012c20 <__retarget_lock_release_recursive>
 80127b6:	4628      	mov	r0, r5
 80127b8:	bd70      	pop	{r4, r5, r6, pc}
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	da04      	bge.n	80127c8 <_puts_r+0x60>
 80127be:	69a2      	ldr	r2, [r4, #24]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	dc17      	bgt.n	80127f4 <_puts_r+0x8c>
 80127c4:	290a      	cmp	r1, #10
 80127c6:	d015      	beq.n	80127f4 <_puts_r+0x8c>
 80127c8:	6823      	ldr	r3, [r4, #0]
 80127ca:	1c5a      	adds	r2, r3, #1
 80127cc:	6022      	str	r2, [r4, #0]
 80127ce:	7019      	strb	r1, [r3, #0]
 80127d0:	68a3      	ldr	r3, [r4, #8]
 80127d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80127d6:	3b01      	subs	r3, #1
 80127d8:	60a3      	str	r3, [r4, #8]
 80127da:	2900      	cmp	r1, #0
 80127dc:	d1ed      	bne.n	80127ba <_puts_r+0x52>
 80127de:	2b00      	cmp	r3, #0
 80127e0:	da11      	bge.n	8012806 <_puts_r+0x9e>
 80127e2:	4622      	mov	r2, r4
 80127e4:	210a      	movs	r1, #10
 80127e6:	4628      	mov	r0, r5
 80127e8:	f000 f893 	bl	8012912 <__swbuf_r>
 80127ec:	3001      	adds	r0, #1
 80127ee:	d0d7      	beq.n	80127a0 <_puts_r+0x38>
 80127f0:	250a      	movs	r5, #10
 80127f2:	e7d7      	b.n	80127a4 <_puts_r+0x3c>
 80127f4:	4622      	mov	r2, r4
 80127f6:	4628      	mov	r0, r5
 80127f8:	f000 f88b 	bl	8012912 <__swbuf_r>
 80127fc:	3001      	adds	r0, #1
 80127fe:	d1e7      	bne.n	80127d0 <_puts_r+0x68>
 8012800:	e7ce      	b.n	80127a0 <_puts_r+0x38>
 8012802:	3e01      	subs	r6, #1
 8012804:	e7e4      	b.n	80127d0 <_puts_r+0x68>
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	1c5a      	adds	r2, r3, #1
 801280a:	6022      	str	r2, [r4, #0]
 801280c:	220a      	movs	r2, #10
 801280e:	701a      	strb	r2, [r3, #0]
 8012810:	e7ee      	b.n	80127f0 <_puts_r+0x88>
	...

08012814 <puts>:
 8012814:	4b02      	ldr	r3, [pc, #8]	@ (8012820 <puts+0xc>)
 8012816:	4601      	mov	r1, r0
 8012818:	6818      	ldr	r0, [r3, #0]
 801281a:	f7ff bfa5 	b.w	8012768 <_puts_r>
 801281e:	bf00      	nop
 8012820:	20000434 	.word	0x20000434

08012824 <sniprintf>:
 8012824:	b40c      	push	{r2, r3}
 8012826:	b530      	push	{r4, r5, lr}
 8012828:	4b17      	ldr	r3, [pc, #92]	@ (8012888 <sniprintf+0x64>)
 801282a:	1e0c      	subs	r4, r1, #0
 801282c:	681d      	ldr	r5, [r3, #0]
 801282e:	b09d      	sub	sp, #116	@ 0x74
 8012830:	da08      	bge.n	8012844 <sniprintf+0x20>
 8012832:	238b      	movs	r3, #139	@ 0x8b
 8012834:	602b      	str	r3, [r5, #0]
 8012836:	f04f 30ff 	mov.w	r0, #4294967295
 801283a:	b01d      	add	sp, #116	@ 0x74
 801283c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012840:	b002      	add	sp, #8
 8012842:	4770      	bx	lr
 8012844:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012848:	f8ad 3014 	strh.w	r3, [sp, #20]
 801284c:	bf14      	ite	ne
 801284e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012852:	4623      	moveq	r3, r4
 8012854:	9304      	str	r3, [sp, #16]
 8012856:	9307      	str	r3, [sp, #28]
 8012858:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801285c:	9002      	str	r0, [sp, #8]
 801285e:	9006      	str	r0, [sp, #24]
 8012860:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012864:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012866:	ab21      	add	r3, sp, #132	@ 0x84
 8012868:	a902      	add	r1, sp, #8
 801286a:	4628      	mov	r0, r5
 801286c:	9301      	str	r3, [sp, #4]
 801286e:	f001 faa7 	bl	8013dc0 <_svfiprintf_r>
 8012872:	1c43      	adds	r3, r0, #1
 8012874:	bfbc      	itt	lt
 8012876:	238b      	movlt	r3, #139	@ 0x8b
 8012878:	602b      	strlt	r3, [r5, #0]
 801287a:	2c00      	cmp	r4, #0
 801287c:	d0dd      	beq.n	801283a <sniprintf+0x16>
 801287e:	9b02      	ldr	r3, [sp, #8]
 8012880:	2200      	movs	r2, #0
 8012882:	701a      	strb	r2, [r3, #0]
 8012884:	e7d9      	b.n	801283a <sniprintf+0x16>
 8012886:	bf00      	nop
 8012888:	20000434 	.word	0x20000434

0801288c <__sread>:
 801288c:	b510      	push	{r4, lr}
 801288e:	460c      	mov	r4, r1
 8012890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012894:	f000 f964 	bl	8012b60 <_read_r>
 8012898:	2800      	cmp	r0, #0
 801289a:	bfab      	itete	ge
 801289c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801289e:	89a3      	ldrhlt	r3, [r4, #12]
 80128a0:	181b      	addge	r3, r3, r0
 80128a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80128a6:	bfac      	ite	ge
 80128a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80128aa:	81a3      	strhlt	r3, [r4, #12]
 80128ac:	bd10      	pop	{r4, pc}

080128ae <__swrite>:
 80128ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b2:	461f      	mov	r7, r3
 80128b4:	898b      	ldrh	r3, [r1, #12]
 80128b6:	05db      	lsls	r3, r3, #23
 80128b8:	4605      	mov	r5, r0
 80128ba:	460c      	mov	r4, r1
 80128bc:	4616      	mov	r6, r2
 80128be:	d505      	bpl.n	80128cc <__swrite+0x1e>
 80128c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128c4:	2302      	movs	r3, #2
 80128c6:	2200      	movs	r2, #0
 80128c8:	f000 f938 	bl	8012b3c <_lseek_r>
 80128cc:	89a3      	ldrh	r3, [r4, #12]
 80128ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80128d6:	81a3      	strh	r3, [r4, #12]
 80128d8:	4632      	mov	r2, r6
 80128da:	463b      	mov	r3, r7
 80128dc:	4628      	mov	r0, r5
 80128de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128e2:	f000 b95f 	b.w	8012ba4 <_write_r>

080128e6 <__sseek>:
 80128e6:	b510      	push	{r4, lr}
 80128e8:	460c      	mov	r4, r1
 80128ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ee:	f000 f925 	bl	8012b3c <_lseek_r>
 80128f2:	1c43      	adds	r3, r0, #1
 80128f4:	89a3      	ldrh	r3, [r4, #12]
 80128f6:	bf15      	itete	ne
 80128f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80128fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80128fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012902:	81a3      	strheq	r3, [r4, #12]
 8012904:	bf18      	it	ne
 8012906:	81a3      	strhne	r3, [r4, #12]
 8012908:	bd10      	pop	{r4, pc}

0801290a <__sclose>:
 801290a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801290e:	f000 b8af 	b.w	8012a70 <_close_r>

08012912 <__swbuf_r>:
 8012912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012914:	460e      	mov	r6, r1
 8012916:	4614      	mov	r4, r2
 8012918:	4605      	mov	r5, r0
 801291a:	b118      	cbz	r0, 8012924 <__swbuf_r+0x12>
 801291c:	6a03      	ldr	r3, [r0, #32]
 801291e:	b90b      	cbnz	r3, 8012924 <__swbuf_r+0x12>
 8012920:	f7ff feda 	bl	80126d8 <__sinit>
 8012924:	69a3      	ldr	r3, [r4, #24]
 8012926:	60a3      	str	r3, [r4, #8]
 8012928:	89a3      	ldrh	r3, [r4, #12]
 801292a:	071a      	lsls	r2, r3, #28
 801292c:	d501      	bpl.n	8012932 <__swbuf_r+0x20>
 801292e:	6923      	ldr	r3, [r4, #16]
 8012930:	b943      	cbnz	r3, 8012944 <__swbuf_r+0x32>
 8012932:	4621      	mov	r1, r4
 8012934:	4628      	mov	r0, r5
 8012936:	f000 f82b 	bl	8012990 <__swsetup_r>
 801293a:	b118      	cbz	r0, 8012944 <__swbuf_r+0x32>
 801293c:	f04f 37ff 	mov.w	r7, #4294967295
 8012940:	4638      	mov	r0, r7
 8012942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012944:	6823      	ldr	r3, [r4, #0]
 8012946:	6922      	ldr	r2, [r4, #16]
 8012948:	1a98      	subs	r0, r3, r2
 801294a:	6963      	ldr	r3, [r4, #20]
 801294c:	b2f6      	uxtb	r6, r6
 801294e:	4283      	cmp	r3, r0
 8012950:	4637      	mov	r7, r6
 8012952:	dc05      	bgt.n	8012960 <__swbuf_r+0x4e>
 8012954:	4621      	mov	r1, r4
 8012956:	4628      	mov	r0, r5
 8012958:	f001 fe82 	bl	8014660 <_fflush_r>
 801295c:	2800      	cmp	r0, #0
 801295e:	d1ed      	bne.n	801293c <__swbuf_r+0x2a>
 8012960:	68a3      	ldr	r3, [r4, #8]
 8012962:	3b01      	subs	r3, #1
 8012964:	60a3      	str	r3, [r4, #8]
 8012966:	6823      	ldr	r3, [r4, #0]
 8012968:	1c5a      	adds	r2, r3, #1
 801296a:	6022      	str	r2, [r4, #0]
 801296c:	701e      	strb	r6, [r3, #0]
 801296e:	6962      	ldr	r2, [r4, #20]
 8012970:	1c43      	adds	r3, r0, #1
 8012972:	429a      	cmp	r2, r3
 8012974:	d004      	beq.n	8012980 <__swbuf_r+0x6e>
 8012976:	89a3      	ldrh	r3, [r4, #12]
 8012978:	07db      	lsls	r3, r3, #31
 801297a:	d5e1      	bpl.n	8012940 <__swbuf_r+0x2e>
 801297c:	2e0a      	cmp	r6, #10
 801297e:	d1df      	bne.n	8012940 <__swbuf_r+0x2e>
 8012980:	4621      	mov	r1, r4
 8012982:	4628      	mov	r0, r5
 8012984:	f001 fe6c 	bl	8014660 <_fflush_r>
 8012988:	2800      	cmp	r0, #0
 801298a:	d0d9      	beq.n	8012940 <__swbuf_r+0x2e>
 801298c:	e7d6      	b.n	801293c <__swbuf_r+0x2a>
	...

08012990 <__swsetup_r>:
 8012990:	b538      	push	{r3, r4, r5, lr}
 8012992:	4b29      	ldr	r3, [pc, #164]	@ (8012a38 <__swsetup_r+0xa8>)
 8012994:	4605      	mov	r5, r0
 8012996:	6818      	ldr	r0, [r3, #0]
 8012998:	460c      	mov	r4, r1
 801299a:	b118      	cbz	r0, 80129a4 <__swsetup_r+0x14>
 801299c:	6a03      	ldr	r3, [r0, #32]
 801299e:	b90b      	cbnz	r3, 80129a4 <__swsetup_r+0x14>
 80129a0:	f7ff fe9a 	bl	80126d8 <__sinit>
 80129a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129a8:	0719      	lsls	r1, r3, #28
 80129aa:	d422      	bmi.n	80129f2 <__swsetup_r+0x62>
 80129ac:	06da      	lsls	r2, r3, #27
 80129ae:	d407      	bmi.n	80129c0 <__swsetup_r+0x30>
 80129b0:	2209      	movs	r2, #9
 80129b2:	602a      	str	r2, [r5, #0]
 80129b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129b8:	81a3      	strh	r3, [r4, #12]
 80129ba:	f04f 30ff 	mov.w	r0, #4294967295
 80129be:	e033      	b.n	8012a28 <__swsetup_r+0x98>
 80129c0:	0758      	lsls	r0, r3, #29
 80129c2:	d512      	bpl.n	80129ea <__swsetup_r+0x5a>
 80129c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80129c6:	b141      	cbz	r1, 80129da <__swsetup_r+0x4a>
 80129c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129cc:	4299      	cmp	r1, r3
 80129ce:	d002      	beq.n	80129d6 <__swsetup_r+0x46>
 80129d0:	4628      	mov	r0, r5
 80129d2:	f000 f93d 	bl	8012c50 <_free_r>
 80129d6:	2300      	movs	r3, #0
 80129d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80129da:	89a3      	ldrh	r3, [r4, #12]
 80129dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80129e0:	81a3      	strh	r3, [r4, #12]
 80129e2:	2300      	movs	r3, #0
 80129e4:	6063      	str	r3, [r4, #4]
 80129e6:	6923      	ldr	r3, [r4, #16]
 80129e8:	6023      	str	r3, [r4, #0]
 80129ea:	89a3      	ldrh	r3, [r4, #12]
 80129ec:	f043 0308 	orr.w	r3, r3, #8
 80129f0:	81a3      	strh	r3, [r4, #12]
 80129f2:	6923      	ldr	r3, [r4, #16]
 80129f4:	b94b      	cbnz	r3, 8012a0a <__swsetup_r+0x7a>
 80129f6:	89a3      	ldrh	r3, [r4, #12]
 80129f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80129fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a00:	d003      	beq.n	8012a0a <__swsetup_r+0x7a>
 8012a02:	4621      	mov	r1, r4
 8012a04:	4628      	mov	r0, r5
 8012a06:	f001 fe79 	bl	80146fc <__smakebuf_r>
 8012a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a0e:	f013 0201 	ands.w	r2, r3, #1
 8012a12:	d00a      	beq.n	8012a2a <__swsetup_r+0x9a>
 8012a14:	2200      	movs	r2, #0
 8012a16:	60a2      	str	r2, [r4, #8]
 8012a18:	6962      	ldr	r2, [r4, #20]
 8012a1a:	4252      	negs	r2, r2
 8012a1c:	61a2      	str	r2, [r4, #24]
 8012a1e:	6922      	ldr	r2, [r4, #16]
 8012a20:	b942      	cbnz	r2, 8012a34 <__swsetup_r+0xa4>
 8012a22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012a26:	d1c5      	bne.n	80129b4 <__swsetup_r+0x24>
 8012a28:	bd38      	pop	{r3, r4, r5, pc}
 8012a2a:	0799      	lsls	r1, r3, #30
 8012a2c:	bf58      	it	pl
 8012a2e:	6962      	ldrpl	r2, [r4, #20]
 8012a30:	60a2      	str	r2, [r4, #8]
 8012a32:	e7f4      	b.n	8012a1e <__swsetup_r+0x8e>
 8012a34:	2000      	movs	r0, #0
 8012a36:	e7f7      	b.n	8012a28 <__swsetup_r+0x98>
 8012a38:	20000434 	.word	0x20000434

08012a3c <memset>:
 8012a3c:	4402      	add	r2, r0
 8012a3e:	4603      	mov	r3, r0
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d100      	bne.n	8012a46 <memset+0xa>
 8012a44:	4770      	bx	lr
 8012a46:	f803 1b01 	strb.w	r1, [r3], #1
 8012a4a:	e7f9      	b.n	8012a40 <memset+0x4>

08012a4c <strncmp>:
 8012a4c:	b510      	push	{r4, lr}
 8012a4e:	b16a      	cbz	r2, 8012a6c <strncmp+0x20>
 8012a50:	3901      	subs	r1, #1
 8012a52:	1884      	adds	r4, r0, r2
 8012a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d103      	bne.n	8012a68 <strncmp+0x1c>
 8012a60:	42a0      	cmp	r0, r4
 8012a62:	d001      	beq.n	8012a68 <strncmp+0x1c>
 8012a64:	2a00      	cmp	r2, #0
 8012a66:	d1f5      	bne.n	8012a54 <strncmp+0x8>
 8012a68:	1ad0      	subs	r0, r2, r3
 8012a6a:	bd10      	pop	{r4, pc}
 8012a6c:	4610      	mov	r0, r2
 8012a6e:	e7fc      	b.n	8012a6a <strncmp+0x1e>

08012a70 <_close_r>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	4d06      	ldr	r5, [pc, #24]	@ (8012a8c <_close_r+0x1c>)
 8012a74:	2300      	movs	r3, #0
 8012a76:	4604      	mov	r4, r0
 8012a78:	4608      	mov	r0, r1
 8012a7a:	602b      	str	r3, [r5, #0]
 8012a7c:	f7f1 f81c 	bl	8003ab8 <_close>
 8012a80:	1c43      	adds	r3, r0, #1
 8012a82:	d102      	bne.n	8012a8a <_close_r+0x1a>
 8012a84:	682b      	ldr	r3, [r5, #0]
 8012a86:	b103      	cbz	r3, 8012a8a <_close_r+0x1a>
 8012a88:	6023      	str	r3, [r4, #0]
 8012a8a:	bd38      	pop	{r3, r4, r5, pc}
 8012a8c:	20005820 	.word	0x20005820

08012a90 <_reclaim_reent>:
 8012a90:	4b29      	ldr	r3, [pc, #164]	@ (8012b38 <_reclaim_reent+0xa8>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	4283      	cmp	r3, r0
 8012a96:	b570      	push	{r4, r5, r6, lr}
 8012a98:	4604      	mov	r4, r0
 8012a9a:	d04b      	beq.n	8012b34 <_reclaim_reent+0xa4>
 8012a9c:	69c3      	ldr	r3, [r0, #28]
 8012a9e:	b1ab      	cbz	r3, 8012acc <_reclaim_reent+0x3c>
 8012aa0:	68db      	ldr	r3, [r3, #12]
 8012aa2:	b16b      	cbz	r3, 8012ac0 <_reclaim_reent+0x30>
 8012aa4:	2500      	movs	r5, #0
 8012aa6:	69e3      	ldr	r3, [r4, #28]
 8012aa8:	68db      	ldr	r3, [r3, #12]
 8012aaa:	5959      	ldr	r1, [r3, r5]
 8012aac:	2900      	cmp	r1, #0
 8012aae:	d13b      	bne.n	8012b28 <_reclaim_reent+0x98>
 8012ab0:	3504      	adds	r5, #4
 8012ab2:	2d80      	cmp	r5, #128	@ 0x80
 8012ab4:	d1f7      	bne.n	8012aa6 <_reclaim_reent+0x16>
 8012ab6:	69e3      	ldr	r3, [r4, #28]
 8012ab8:	4620      	mov	r0, r4
 8012aba:	68d9      	ldr	r1, [r3, #12]
 8012abc:	f000 f8c8 	bl	8012c50 <_free_r>
 8012ac0:	69e3      	ldr	r3, [r4, #28]
 8012ac2:	6819      	ldr	r1, [r3, #0]
 8012ac4:	b111      	cbz	r1, 8012acc <_reclaim_reent+0x3c>
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f000 f8c2 	bl	8012c50 <_free_r>
 8012acc:	6961      	ldr	r1, [r4, #20]
 8012ace:	b111      	cbz	r1, 8012ad6 <_reclaim_reent+0x46>
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f000 f8bd 	bl	8012c50 <_free_r>
 8012ad6:	69e1      	ldr	r1, [r4, #28]
 8012ad8:	b111      	cbz	r1, 8012ae0 <_reclaim_reent+0x50>
 8012ada:	4620      	mov	r0, r4
 8012adc:	f000 f8b8 	bl	8012c50 <_free_r>
 8012ae0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012ae2:	b111      	cbz	r1, 8012aea <_reclaim_reent+0x5a>
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f000 f8b3 	bl	8012c50 <_free_r>
 8012aea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012aec:	b111      	cbz	r1, 8012af4 <_reclaim_reent+0x64>
 8012aee:	4620      	mov	r0, r4
 8012af0:	f000 f8ae 	bl	8012c50 <_free_r>
 8012af4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012af6:	b111      	cbz	r1, 8012afe <_reclaim_reent+0x6e>
 8012af8:	4620      	mov	r0, r4
 8012afa:	f000 f8a9 	bl	8012c50 <_free_r>
 8012afe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012b00:	b111      	cbz	r1, 8012b08 <_reclaim_reent+0x78>
 8012b02:	4620      	mov	r0, r4
 8012b04:	f000 f8a4 	bl	8012c50 <_free_r>
 8012b08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012b0a:	b111      	cbz	r1, 8012b12 <_reclaim_reent+0x82>
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f000 f89f 	bl	8012c50 <_free_r>
 8012b12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012b14:	b111      	cbz	r1, 8012b1c <_reclaim_reent+0x8c>
 8012b16:	4620      	mov	r0, r4
 8012b18:	f000 f89a 	bl	8012c50 <_free_r>
 8012b1c:	6a23      	ldr	r3, [r4, #32]
 8012b1e:	b14b      	cbz	r3, 8012b34 <_reclaim_reent+0xa4>
 8012b20:	4620      	mov	r0, r4
 8012b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b26:	4718      	bx	r3
 8012b28:	680e      	ldr	r6, [r1, #0]
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f000 f890 	bl	8012c50 <_free_r>
 8012b30:	4631      	mov	r1, r6
 8012b32:	e7bb      	b.n	8012aac <_reclaim_reent+0x1c>
 8012b34:	bd70      	pop	{r4, r5, r6, pc}
 8012b36:	bf00      	nop
 8012b38:	20000434 	.word	0x20000434

08012b3c <_lseek_r>:
 8012b3c:	b538      	push	{r3, r4, r5, lr}
 8012b3e:	4d07      	ldr	r5, [pc, #28]	@ (8012b5c <_lseek_r+0x20>)
 8012b40:	4604      	mov	r4, r0
 8012b42:	4608      	mov	r0, r1
 8012b44:	4611      	mov	r1, r2
 8012b46:	2200      	movs	r2, #0
 8012b48:	602a      	str	r2, [r5, #0]
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	f7f0 ffdb 	bl	8003b06 <_lseek>
 8012b50:	1c43      	adds	r3, r0, #1
 8012b52:	d102      	bne.n	8012b5a <_lseek_r+0x1e>
 8012b54:	682b      	ldr	r3, [r5, #0]
 8012b56:	b103      	cbz	r3, 8012b5a <_lseek_r+0x1e>
 8012b58:	6023      	str	r3, [r4, #0]
 8012b5a:	bd38      	pop	{r3, r4, r5, pc}
 8012b5c:	20005820 	.word	0x20005820

08012b60 <_read_r>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4d07      	ldr	r5, [pc, #28]	@ (8012b80 <_read_r+0x20>)
 8012b64:	4604      	mov	r4, r0
 8012b66:	4608      	mov	r0, r1
 8012b68:	4611      	mov	r1, r2
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	602a      	str	r2, [r5, #0]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	f7f0 ff85 	bl	8003a7e <_read>
 8012b74:	1c43      	adds	r3, r0, #1
 8012b76:	d102      	bne.n	8012b7e <_read_r+0x1e>
 8012b78:	682b      	ldr	r3, [r5, #0]
 8012b7a:	b103      	cbz	r3, 8012b7e <_read_r+0x1e>
 8012b7c:	6023      	str	r3, [r4, #0]
 8012b7e:	bd38      	pop	{r3, r4, r5, pc}
 8012b80:	20005820 	.word	0x20005820

08012b84 <_sbrk_r>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	4d06      	ldr	r5, [pc, #24]	@ (8012ba0 <_sbrk_r+0x1c>)
 8012b88:	2300      	movs	r3, #0
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	4608      	mov	r0, r1
 8012b8e:	602b      	str	r3, [r5, #0]
 8012b90:	f7f0 ffc6 	bl	8003b20 <_sbrk>
 8012b94:	1c43      	adds	r3, r0, #1
 8012b96:	d102      	bne.n	8012b9e <_sbrk_r+0x1a>
 8012b98:	682b      	ldr	r3, [r5, #0]
 8012b9a:	b103      	cbz	r3, 8012b9e <_sbrk_r+0x1a>
 8012b9c:	6023      	str	r3, [r4, #0]
 8012b9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ba0:	20005820 	.word	0x20005820

08012ba4 <_write_r>:
 8012ba4:	b538      	push	{r3, r4, r5, lr}
 8012ba6:	4d07      	ldr	r5, [pc, #28]	@ (8012bc4 <_write_r+0x20>)
 8012ba8:	4604      	mov	r4, r0
 8012baa:	4608      	mov	r0, r1
 8012bac:	4611      	mov	r1, r2
 8012bae:	2200      	movs	r2, #0
 8012bb0:	602a      	str	r2, [r5, #0]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	f7f0 fc6e 	bl	8003494 <_write>
 8012bb8:	1c43      	adds	r3, r0, #1
 8012bba:	d102      	bne.n	8012bc2 <_write_r+0x1e>
 8012bbc:	682b      	ldr	r3, [r5, #0]
 8012bbe:	b103      	cbz	r3, 8012bc2 <_write_r+0x1e>
 8012bc0:	6023      	str	r3, [r4, #0]
 8012bc2:	bd38      	pop	{r3, r4, r5, pc}
 8012bc4:	20005820 	.word	0x20005820

08012bc8 <__errno>:
 8012bc8:	4b01      	ldr	r3, [pc, #4]	@ (8012bd0 <__errno+0x8>)
 8012bca:	6818      	ldr	r0, [r3, #0]
 8012bcc:	4770      	bx	lr
 8012bce:	bf00      	nop
 8012bd0:	20000434 	.word	0x20000434

08012bd4 <__libc_init_array>:
 8012bd4:	b570      	push	{r4, r5, r6, lr}
 8012bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8012c0c <__libc_init_array+0x38>)
 8012bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8012c10 <__libc_init_array+0x3c>)
 8012bda:	1b64      	subs	r4, r4, r5
 8012bdc:	10a4      	asrs	r4, r4, #2
 8012bde:	2600      	movs	r6, #0
 8012be0:	42a6      	cmp	r6, r4
 8012be2:	d109      	bne.n	8012bf8 <__libc_init_array+0x24>
 8012be4:	4d0b      	ldr	r5, [pc, #44]	@ (8012c14 <__libc_init_array+0x40>)
 8012be6:	4c0c      	ldr	r4, [pc, #48]	@ (8012c18 <__libc_init_array+0x44>)
 8012be8:	f001 fe90 	bl	801490c <_init>
 8012bec:	1b64      	subs	r4, r4, r5
 8012bee:	10a4      	asrs	r4, r4, #2
 8012bf0:	2600      	movs	r6, #0
 8012bf2:	42a6      	cmp	r6, r4
 8012bf4:	d105      	bne.n	8012c02 <__libc_init_array+0x2e>
 8012bf6:	bd70      	pop	{r4, r5, r6, pc}
 8012bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bfc:	4798      	blx	r3
 8012bfe:	3601      	adds	r6, #1
 8012c00:	e7ee      	b.n	8012be0 <__libc_init_array+0xc>
 8012c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c06:	4798      	blx	r3
 8012c08:	3601      	adds	r6, #1
 8012c0a:	e7f2      	b.n	8012bf2 <__libc_init_array+0x1e>
 8012c0c:	08015040 	.word	0x08015040
 8012c10:	08015040 	.word	0x08015040
 8012c14:	08015040 	.word	0x08015040
 8012c18:	08015044 	.word	0x08015044

08012c1c <__retarget_lock_init_recursive>:
 8012c1c:	4770      	bx	lr

08012c1e <__retarget_lock_acquire_recursive>:
 8012c1e:	4770      	bx	lr

08012c20 <__retarget_lock_release_recursive>:
 8012c20:	4770      	bx	lr

08012c22 <memcpy>:
 8012c22:	440a      	add	r2, r1
 8012c24:	4291      	cmp	r1, r2
 8012c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c2a:	d100      	bne.n	8012c2e <memcpy+0xc>
 8012c2c:	4770      	bx	lr
 8012c2e:	b510      	push	{r4, lr}
 8012c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c38:	4291      	cmp	r1, r2
 8012c3a:	d1f9      	bne.n	8012c30 <memcpy+0xe>
 8012c3c:	bd10      	pop	{r4, pc}
	...

08012c40 <nan>:
 8012c40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012c48 <nan+0x8>
 8012c44:	4770      	bx	lr
 8012c46:	bf00      	nop
 8012c48:	00000000 	.word	0x00000000
 8012c4c:	7ff80000 	.word	0x7ff80000

08012c50 <_free_r>:
 8012c50:	b538      	push	{r3, r4, r5, lr}
 8012c52:	4605      	mov	r5, r0
 8012c54:	2900      	cmp	r1, #0
 8012c56:	d041      	beq.n	8012cdc <_free_r+0x8c>
 8012c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c5c:	1f0c      	subs	r4, r1, #4
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	bfb8      	it	lt
 8012c62:	18e4      	addlt	r4, r4, r3
 8012c64:	f7fe fe5a 	bl	801191c <__malloc_lock>
 8012c68:	4a1d      	ldr	r2, [pc, #116]	@ (8012ce0 <_free_r+0x90>)
 8012c6a:	6813      	ldr	r3, [r2, #0]
 8012c6c:	b933      	cbnz	r3, 8012c7c <_free_r+0x2c>
 8012c6e:	6063      	str	r3, [r4, #4]
 8012c70:	6014      	str	r4, [r2, #0]
 8012c72:	4628      	mov	r0, r5
 8012c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c78:	f7fe be56 	b.w	8011928 <__malloc_unlock>
 8012c7c:	42a3      	cmp	r3, r4
 8012c7e:	d908      	bls.n	8012c92 <_free_r+0x42>
 8012c80:	6820      	ldr	r0, [r4, #0]
 8012c82:	1821      	adds	r1, r4, r0
 8012c84:	428b      	cmp	r3, r1
 8012c86:	bf01      	itttt	eq
 8012c88:	6819      	ldreq	r1, [r3, #0]
 8012c8a:	685b      	ldreq	r3, [r3, #4]
 8012c8c:	1809      	addeq	r1, r1, r0
 8012c8e:	6021      	streq	r1, [r4, #0]
 8012c90:	e7ed      	b.n	8012c6e <_free_r+0x1e>
 8012c92:	461a      	mov	r2, r3
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	b10b      	cbz	r3, 8012c9c <_free_r+0x4c>
 8012c98:	42a3      	cmp	r3, r4
 8012c9a:	d9fa      	bls.n	8012c92 <_free_r+0x42>
 8012c9c:	6811      	ldr	r1, [r2, #0]
 8012c9e:	1850      	adds	r0, r2, r1
 8012ca0:	42a0      	cmp	r0, r4
 8012ca2:	d10b      	bne.n	8012cbc <_free_r+0x6c>
 8012ca4:	6820      	ldr	r0, [r4, #0]
 8012ca6:	4401      	add	r1, r0
 8012ca8:	1850      	adds	r0, r2, r1
 8012caa:	4283      	cmp	r3, r0
 8012cac:	6011      	str	r1, [r2, #0]
 8012cae:	d1e0      	bne.n	8012c72 <_free_r+0x22>
 8012cb0:	6818      	ldr	r0, [r3, #0]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	6053      	str	r3, [r2, #4]
 8012cb6:	4408      	add	r0, r1
 8012cb8:	6010      	str	r0, [r2, #0]
 8012cba:	e7da      	b.n	8012c72 <_free_r+0x22>
 8012cbc:	d902      	bls.n	8012cc4 <_free_r+0x74>
 8012cbe:	230c      	movs	r3, #12
 8012cc0:	602b      	str	r3, [r5, #0]
 8012cc2:	e7d6      	b.n	8012c72 <_free_r+0x22>
 8012cc4:	6820      	ldr	r0, [r4, #0]
 8012cc6:	1821      	adds	r1, r4, r0
 8012cc8:	428b      	cmp	r3, r1
 8012cca:	bf04      	itt	eq
 8012ccc:	6819      	ldreq	r1, [r3, #0]
 8012cce:	685b      	ldreq	r3, [r3, #4]
 8012cd0:	6063      	str	r3, [r4, #4]
 8012cd2:	bf04      	itt	eq
 8012cd4:	1809      	addeq	r1, r1, r0
 8012cd6:	6021      	streq	r1, [r4, #0]
 8012cd8:	6054      	str	r4, [r2, #4]
 8012cda:	e7ca      	b.n	8012c72 <_free_r+0x22>
 8012cdc:	bd38      	pop	{r3, r4, r5, pc}
 8012cde:	bf00      	nop
 8012ce0:	200056e0 	.word	0x200056e0

08012ce4 <rshift>:
 8012ce4:	6903      	ldr	r3, [r0, #16]
 8012ce6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012cf2:	f100 0414 	add.w	r4, r0, #20
 8012cf6:	dd45      	ble.n	8012d84 <rshift+0xa0>
 8012cf8:	f011 011f 	ands.w	r1, r1, #31
 8012cfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012d00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012d04:	d10c      	bne.n	8012d20 <rshift+0x3c>
 8012d06:	f100 0710 	add.w	r7, r0, #16
 8012d0a:	4629      	mov	r1, r5
 8012d0c:	42b1      	cmp	r1, r6
 8012d0e:	d334      	bcc.n	8012d7a <rshift+0x96>
 8012d10:	1a9b      	subs	r3, r3, r2
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	1eea      	subs	r2, r5, #3
 8012d16:	4296      	cmp	r6, r2
 8012d18:	bf38      	it	cc
 8012d1a:	2300      	movcc	r3, #0
 8012d1c:	4423      	add	r3, r4
 8012d1e:	e015      	b.n	8012d4c <rshift+0x68>
 8012d20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012d24:	f1c1 0820 	rsb	r8, r1, #32
 8012d28:	40cf      	lsrs	r7, r1
 8012d2a:	f105 0e04 	add.w	lr, r5, #4
 8012d2e:	46a1      	mov	r9, r4
 8012d30:	4576      	cmp	r6, lr
 8012d32:	46f4      	mov	ip, lr
 8012d34:	d815      	bhi.n	8012d62 <rshift+0x7e>
 8012d36:	1a9a      	subs	r2, r3, r2
 8012d38:	0092      	lsls	r2, r2, #2
 8012d3a:	3a04      	subs	r2, #4
 8012d3c:	3501      	adds	r5, #1
 8012d3e:	42ae      	cmp	r6, r5
 8012d40:	bf38      	it	cc
 8012d42:	2200      	movcc	r2, #0
 8012d44:	18a3      	adds	r3, r4, r2
 8012d46:	50a7      	str	r7, [r4, r2]
 8012d48:	b107      	cbz	r7, 8012d4c <rshift+0x68>
 8012d4a:	3304      	adds	r3, #4
 8012d4c:	1b1a      	subs	r2, r3, r4
 8012d4e:	42a3      	cmp	r3, r4
 8012d50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012d54:	bf08      	it	eq
 8012d56:	2300      	moveq	r3, #0
 8012d58:	6102      	str	r2, [r0, #16]
 8012d5a:	bf08      	it	eq
 8012d5c:	6143      	streq	r3, [r0, #20]
 8012d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d62:	f8dc c000 	ldr.w	ip, [ip]
 8012d66:	fa0c fc08 	lsl.w	ip, ip, r8
 8012d6a:	ea4c 0707 	orr.w	r7, ip, r7
 8012d6e:	f849 7b04 	str.w	r7, [r9], #4
 8012d72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012d76:	40cf      	lsrs	r7, r1
 8012d78:	e7da      	b.n	8012d30 <rshift+0x4c>
 8012d7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8012d7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012d82:	e7c3      	b.n	8012d0c <rshift+0x28>
 8012d84:	4623      	mov	r3, r4
 8012d86:	e7e1      	b.n	8012d4c <rshift+0x68>

08012d88 <__hexdig_fun>:
 8012d88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012d8c:	2b09      	cmp	r3, #9
 8012d8e:	d802      	bhi.n	8012d96 <__hexdig_fun+0xe>
 8012d90:	3820      	subs	r0, #32
 8012d92:	b2c0      	uxtb	r0, r0
 8012d94:	4770      	bx	lr
 8012d96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012d9a:	2b05      	cmp	r3, #5
 8012d9c:	d801      	bhi.n	8012da2 <__hexdig_fun+0x1a>
 8012d9e:	3847      	subs	r0, #71	@ 0x47
 8012da0:	e7f7      	b.n	8012d92 <__hexdig_fun+0xa>
 8012da2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012da6:	2b05      	cmp	r3, #5
 8012da8:	d801      	bhi.n	8012dae <__hexdig_fun+0x26>
 8012daa:	3827      	subs	r0, #39	@ 0x27
 8012dac:	e7f1      	b.n	8012d92 <__hexdig_fun+0xa>
 8012dae:	2000      	movs	r0, #0
 8012db0:	4770      	bx	lr
	...

08012db4 <__gethex>:
 8012db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db8:	b085      	sub	sp, #20
 8012dba:	468a      	mov	sl, r1
 8012dbc:	9302      	str	r3, [sp, #8]
 8012dbe:	680b      	ldr	r3, [r1, #0]
 8012dc0:	9001      	str	r0, [sp, #4]
 8012dc2:	4690      	mov	r8, r2
 8012dc4:	1c9c      	adds	r4, r3, #2
 8012dc6:	46a1      	mov	r9, r4
 8012dc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012dcc:	2830      	cmp	r0, #48	@ 0x30
 8012dce:	d0fa      	beq.n	8012dc6 <__gethex+0x12>
 8012dd0:	eba9 0303 	sub.w	r3, r9, r3
 8012dd4:	f1a3 0b02 	sub.w	fp, r3, #2
 8012dd8:	f7ff ffd6 	bl	8012d88 <__hexdig_fun>
 8012ddc:	4605      	mov	r5, r0
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d168      	bne.n	8012eb4 <__gethex+0x100>
 8012de2:	49a0      	ldr	r1, [pc, #640]	@ (8013064 <__gethex+0x2b0>)
 8012de4:	2201      	movs	r2, #1
 8012de6:	4648      	mov	r0, r9
 8012de8:	f7ff fe30 	bl	8012a4c <strncmp>
 8012dec:	4607      	mov	r7, r0
 8012dee:	2800      	cmp	r0, #0
 8012df0:	d167      	bne.n	8012ec2 <__gethex+0x10e>
 8012df2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012df6:	4626      	mov	r6, r4
 8012df8:	f7ff ffc6 	bl	8012d88 <__hexdig_fun>
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d062      	beq.n	8012ec6 <__gethex+0x112>
 8012e00:	4623      	mov	r3, r4
 8012e02:	7818      	ldrb	r0, [r3, #0]
 8012e04:	2830      	cmp	r0, #48	@ 0x30
 8012e06:	4699      	mov	r9, r3
 8012e08:	f103 0301 	add.w	r3, r3, #1
 8012e0c:	d0f9      	beq.n	8012e02 <__gethex+0x4e>
 8012e0e:	f7ff ffbb 	bl	8012d88 <__hexdig_fun>
 8012e12:	fab0 f580 	clz	r5, r0
 8012e16:	096d      	lsrs	r5, r5, #5
 8012e18:	f04f 0b01 	mov.w	fp, #1
 8012e1c:	464a      	mov	r2, r9
 8012e1e:	4616      	mov	r6, r2
 8012e20:	3201      	adds	r2, #1
 8012e22:	7830      	ldrb	r0, [r6, #0]
 8012e24:	f7ff ffb0 	bl	8012d88 <__hexdig_fun>
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	d1f8      	bne.n	8012e1e <__gethex+0x6a>
 8012e2c:	498d      	ldr	r1, [pc, #564]	@ (8013064 <__gethex+0x2b0>)
 8012e2e:	2201      	movs	r2, #1
 8012e30:	4630      	mov	r0, r6
 8012e32:	f7ff fe0b 	bl	8012a4c <strncmp>
 8012e36:	2800      	cmp	r0, #0
 8012e38:	d13f      	bne.n	8012eba <__gethex+0x106>
 8012e3a:	b944      	cbnz	r4, 8012e4e <__gethex+0x9a>
 8012e3c:	1c74      	adds	r4, r6, #1
 8012e3e:	4622      	mov	r2, r4
 8012e40:	4616      	mov	r6, r2
 8012e42:	3201      	adds	r2, #1
 8012e44:	7830      	ldrb	r0, [r6, #0]
 8012e46:	f7ff ff9f 	bl	8012d88 <__hexdig_fun>
 8012e4a:	2800      	cmp	r0, #0
 8012e4c:	d1f8      	bne.n	8012e40 <__gethex+0x8c>
 8012e4e:	1ba4      	subs	r4, r4, r6
 8012e50:	00a7      	lsls	r7, r4, #2
 8012e52:	7833      	ldrb	r3, [r6, #0]
 8012e54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012e58:	2b50      	cmp	r3, #80	@ 0x50
 8012e5a:	d13e      	bne.n	8012eda <__gethex+0x126>
 8012e5c:	7873      	ldrb	r3, [r6, #1]
 8012e5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012e60:	d033      	beq.n	8012eca <__gethex+0x116>
 8012e62:	2b2d      	cmp	r3, #45	@ 0x2d
 8012e64:	d034      	beq.n	8012ed0 <__gethex+0x11c>
 8012e66:	1c71      	adds	r1, r6, #1
 8012e68:	2400      	movs	r4, #0
 8012e6a:	7808      	ldrb	r0, [r1, #0]
 8012e6c:	f7ff ff8c 	bl	8012d88 <__hexdig_fun>
 8012e70:	1e43      	subs	r3, r0, #1
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	2b18      	cmp	r3, #24
 8012e76:	d830      	bhi.n	8012eda <__gethex+0x126>
 8012e78:	f1a0 0210 	sub.w	r2, r0, #16
 8012e7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012e80:	f7ff ff82 	bl	8012d88 <__hexdig_fun>
 8012e84:	f100 3cff 	add.w	ip, r0, #4294967295
 8012e88:	fa5f fc8c 	uxtb.w	ip, ip
 8012e8c:	f1bc 0f18 	cmp.w	ip, #24
 8012e90:	f04f 030a 	mov.w	r3, #10
 8012e94:	d91e      	bls.n	8012ed4 <__gethex+0x120>
 8012e96:	b104      	cbz	r4, 8012e9a <__gethex+0xe6>
 8012e98:	4252      	negs	r2, r2
 8012e9a:	4417      	add	r7, r2
 8012e9c:	f8ca 1000 	str.w	r1, [sl]
 8012ea0:	b1ed      	cbz	r5, 8012ede <__gethex+0x12a>
 8012ea2:	f1bb 0f00 	cmp.w	fp, #0
 8012ea6:	bf0c      	ite	eq
 8012ea8:	2506      	moveq	r5, #6
 8012eaa:	2500      	movne	r5, #0
 8012eac:	4628      	mov	r0, r5
 8012eae:	b005      	add	sp, #20
 8012eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eb4:	2500      	movs	r5, #0
 8012eb6:	462c      	mov	r4, r5
 8012eb8:	e7b0      	b.n	8012e1c <__gethex+0x68>
 8012eba:	2c00      	cmp	r4, #0
 8012ebc:	d1c7      	bne.n	8012e4e <__gethex+0x9a>
 8012ebe:	4627      	mov	r7, r4
 8012ec0:	e7c7      	b.n	8012e52 <__gethex+0x9e>
 8012ec2:	464e      	mov	r6, r9
 8012ec4:	462f      	mov	r7, r5
 8012ec6:	2501      	movs	r5, #1
 8012ec8:	e7c3      	b.n	8012e52 <__gethex+0x9e>
 8012eca:	2400      	movs	r4, #0
 8012ecc:	1cb1      	adds	r1, r6, #2
 8012ece:	e7cc      	b.n	8012e6a <__gethex+0xb6>
 8012ed0:	2401      	movs	r4, #1
 8012ed2:	e7fb      	b.n	8012ecc <__gethex+0x118>
 8012ed4:	fb03 0002 	mla	r0, r3, r2, r0
 8012ed8:	e7ce      	b.n	8012e78 <__gethex+0xc4>
 8012eda:	4631      	mov	r1, r6
 8012edc:	e7de      	b.n	8012e9c <__gethex+0xe8>
 8012ede:	eba6 0309 	sub.w	r3, r6, r9
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	4629      	mov	r1, r5
 8012ee6:	2b07      	cmp	r3, #7
 8012ee8:	dc0a      	bgt.n	8012f00 <__gethex+0x14c>
 8012eea:	9801      	ldr	r0, [sp, #4]
 8012eec:	f000 fa46 	bl	801337c <_Balloc>
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	b940      	cbnz	r0, 8012f06 <__gethex+0x152>
 8012ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8013068 <__gethex+0x2b4>)
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	21e4      	movs	r1, #228	@ 0xe4
 8012efa:	485c      	ldr	r0, [pc, #368]	@ (801306c <__gethex+0x2b8>)
 8012efc:	f001 fc76 	bl	80147ec <__assert_func>
 8012f00:	3101      	adds	r1, #1
 8012f02:	105b      	asrs	r3, r3, #1
 8012f04:	e7ef      	b.n	8012ee6 <__gethex+0x132>
 8012f06:	f100 0a14 	add.w	sl, r0, #20
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	4655      	mov	r5, sl
 8012f0e:	469b      	mov	fp, r3
 8012f10:	45b1      	cmp	r9, r6
 8012f12:	d337      	bcc.n	8012f84 <__gethex+0x1d0>
 8012f14:	f845 bb04 	str.w	fp, [r5], #4
 8012f18:	eba5 050a 	sub.w	r5, r5, sl
 8012f1c:	10ad      	asrs	r5, r5, #2
 8012f1e:	6125      	str	r5, [r4, #16]
 8012f20:	4658      	mov	r0, fp
 8012f22:	f000 fb1d 	bl	8013560 <__hi0bits>
 8012f26:	016d      	lsls	r5, r5, #5
 8012f28:	f8d8 6000 	ldr.w	r6, [r8]
 8012f2c:	1a2d      	subs	r5, r5, r0
 8012f2e:	42b5      	cmp	r5, r6
 8012f30:	dd54      	ble.n	8012fdc <__gethex+0x228>
 8012f32:	1bad      	subs	r5, r5, r6
 8012f34:	4629      	mov	r1, r5
 8012f36:	4620      	mov	r0, r4
 8012f38:	f000 feb1 	bl	8013c9e <__any_on>
 8012f3c:	4681      	mov	r9, r0
 8012f3e:	b178      	cbz	r0, 8012f60 <__gethex+0x1ac>
 8012f40:	1e6b      	subs	r3, r5, #1
 8012f42:	1159      	asrs	r1, r3, #5
 8012f44:	f003 021f 	and.w	r2, r3, #31
 8012f48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012f4c:	f04f 0901 	mov.w	r9, #1
 8012f50:	fa09 f202 	lsl.w	r2, r9, r2
 8012f54:	420a      	tst	r2, r1
 8012f56:	d003      	beq.n	8012f60 <__gethex+0x1ac>
 8012f58:	454b      	cmp	r3, r9
 8012f5a:	dc36      	bgt.n	8012fca <__gethex+0x216>
 8012f5c:	f04f 0902 	mov.w	r9, #2
 8012f60:	4629      	mov	r1, r5
 8012f62:	4620      	mov	r0, r4
 8012f64:	f7ff febe 	bl	8012ce4 <rshift>
 8012f68:	442f      	add	r7, r5
 8012f6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012f6e:	42bb      	cmp	r3, r7
 8012f70:	da42      	bge.n	8012ff8 <__gethex+0x244>
 8012f72:	9801      	ldr	r0, [sp, #4]
 8012f74:	4621      	mov	r1, r4
 8012f76:	f000 fa41 	bl	80133fc <_Bfree>
 8012f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	6013      	str	r3, [r2, #0]
 8012f80:	25a3      	movs	r5, #163	@ 0xa3
 8012f82:	e793      	b.n	8012eac <__gethex+0xf8>
 8012f84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012f88:	2a2e      	cmp	r2, #46	@ 0x2e
 8012f8a:	d012      	beq.n	8012fb2 <__gethex+0x1fe>
 8012f8c:	2b20      	cmp	r3, #32
 8012f8e:	d104      	bne.n	8012f9a <__gethex+0x1e6>
 8012f90:	f845 bb04 	str.w	fp, [r5], #4
 8012f94:	f04f 0b00 	mov.w	fp, #0
 8012f98:	465b      	mov	r3, fp
 8012f9a:	7830      	ldrb	r0, [r6, #0]
 8012f9c:	9303      	str	r3, [sp, #12]
 8012f9e:	f7ff fef3 	bl	8012d88 <__hexdig_fun>
 8012fa2:	9b03      	ldr	r3, [sp, #12]
 8012fa4:	f000 000f 	and.w	r0, r0, #15
 8012fa8:	4098      	lsls	r0, r3
 8012faa:	ea4b 0b00 	orr.w	fp, fp, r0
 8012fae:	3304      	adds	r3, #4
 8012fb0:	e7ae      	b.n	8012f10 <__gethex+0x15c>
 8012fb2:	45b1      	cmp	r9, r6
 8012fb4:	d8ea      	bhi.n	8012f8c <__gethex+0x1d8>
 8012fb6:	492b      	ldr	r1, [pc, #172]	@ (8013064 <__gethex+0x2b0>)
 8012fb8:	9303      	str	r3, [sp, #12]
 8012fba:	2201      	movs	r2, #1
 8012fbc:	4630      	mov	r0, r6
 8012fbe:	f7ff fd45 	bl	8012a4c <strncmp>
 8012fc2:	9b03      	ldr	r3, [sp, #12]
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	d1e1      	bne.n	8012f8c <__gethex+0x1d8>
 8012fc8:	e7a2      	b.n	8012f10 <__gethex+0x15c>
 8012fca:	1ea9      	subs	r1, r5, #2
 8012fcc:	4620      	mov	r0, r4
 8012fce:	f000 fe66 	bl	8013c9e <__any_on>
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d0c2      	beq.n	8012f5c <__gethex+0x1a8>
 8012fd6:	f04f 0903 	mov.w	r9, #3
 8012fda:	e7c1      	b.n	8012f60 <__gethex+0x1ac>
 8012fdc:	da09      	bge.n	8012ff2 <__gethex+0x23e>
 8012fde:	1b75      	subs	r5, r6, r5
 8012fe0:	4621      	mov	r1, r4
 8012fe2:	9801      	ldr	r0, [sp, #4]
 8012fe4:	462a      	mov	r2, r5
 8012fe6:	f000 fc21 	bl	801382c <__lshift>
 8012fea:	1b7f      	subs	r7, r7, r5
 8012fec:	4604      	mov	r4, r0
 8012fee:	f100 0a14 	add.w	sl, r0, #20
 8012ff2:	f04f 0900 	mov.w	r9, #0
 8012ff6:	e7b8      	b.n	8012f6a <__gethex+0x1b6>
 8012ff8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012ffc:	42bd      	cmp	r5, r7
 8012ffe:	dd6f      	ble.n	80130e0 <__gethex+0x32c>
 8013000:	1bed      	subs	r5, r5, r7
 8013002:	42ae      	cmp	r6, r5
 8013004:	dc34      	bgt.n	8013070 <__gethex+0x2bc>
 8013006:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801300a:	2b02      	cmp	r3, #2
 801300c:	d022      	beq.n	8013054 <__gethex+0x2a0>
 801300e:	2b03      	cmp	r3, #3
 8013010:	d024      	beq.n	801305c <__gethex+0x2a8>
 8013012:	2b01      	cmp	r3, #1
 8013014:	d115      	bne.n	8013042 <__gethex+0x28e>
 8013016:	42ae      	cmp	r6, r5
 8013018:	d113      	bne.n	8013042 <__gethex+0x28e>
 801301a:	2e01      	cmp	r6, #1
 801301c:	d10b      	bne.n	8013036 <__gethex+0x282>
 801301e:	9a02      	ldr	r2, [sp, #8]
 8013020:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013024:	6013      	str	r3, [r2, #0]
 8013026:	2301      	movs	r3, #1
 8013028:	6123      	str	r3, [r4, #16]
 801302a:	f8ca 3000 	str.w	r3, [sl]
 801302e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013030:	2562      	movs	r5, #98	@ 0x62
 8013032:	601c      	str	r4, [r3, #0]
 8013034:	e73a      	b.n	8012eac <__gethex+0xf8>
 8013036:	1e71      	subs	r1, r6, #1
 8013038:	4620      	mov	r0, r4
 801303a:	f000 fe30 	bl	8013c9e <__any_on>
 801303e:	2800      	cmp	r0, #0
 8013040:	d1ed      	bne.n	801301e <__gethex+0x26a>
 8013042:	9801      	ldr	r0, [sp, #4]
 8013044:	4621      	mov	r1, r4
 8013046:	f000 f9d9 	bl	80133fc <_Bfree>
 801304a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801304c:	2300      	movs	r3, #0
 801304e:	6013      	str	r3, [r2, #0]
 8013050:	2550      	movs	r5, #80	@ 0x50
 8013052:	e72b      	b.n	8012eac <__gethex+0xf8>
 8013054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013056:	2b00      	cmp	r3, #0
 8013058:	d1f3      	bne.n	8013042 <__gethex+0x28e>
 801305a:	e7e0      	b.n	801301e <__gethex+0x26a>
 801305c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801305e:	2b00      	cmp	r3, #0
 8013060:	d1dd      	bne.n	801301e <__gethex+0x26a>
 8013062:	e7ee      	b.n	8013042 <__gethex+0x28e>
 8013064:	08014c7c 	.word	0x08014c7c
 8013068:	08014de9 	.word	0x08014de9
 801306c:	08014dfa 	.word	0x08014dfa
 8013070:	1e6f      	subs	r7, r5, #1
 8013072:	f1b9 0f00 	cmp.w	r9, #0
 8013076:	d130      	bne.n	80130da <__gethex+0x326>
 8013078:	b127      	cbz	r7, 8013084 <__gethex+0x2d0>
 801307a:	4639      	mov	r1, r7
 801307c:	4620      	mov	r0, r4
 801307e:	f000 fe0e 	bl	8013c9e <__any_on>
 8013082:	4681      	mov	r9, r0
 8013084:	117a      	asrs	r2, r7, #5
 8013086:	2301      	movs	r3, #1
 8013088:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801308c:	f007 071f 	and.w	r7, r7, #31
 8013090:	40bb      	lsls	r3, r7
 8013092:	4213      	tst	r3, r2
 8013094:	4629      	mov	r1, r5
 8013096:	4620      	mov	r0, r4
 8013098:	bf18      	it	ne
 801309a:	f049 0902 	orrne.w	r9, r9, #2
 801309e:	f7ff fe21 	bl	8012ce4 <rshift>
 80130a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80130a6:	1b76      	subs	r6, r6, r5
 80130a8:	2502      	movs	r5, #2
 80130aa:	f1b9 0f00 	cmp.w	r9, #0
 80130ae:	d047      	beq.n	8013140 <__gethex+0x38c>
 80130b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d015      	beq.n	80130e4 <__gethex+0x330>
 80130b8:	2b03      	cmp	r3, #3
 80130ba:	d017      	beq.n	80130ec <__gethex+0x338>
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d109      	bne.n	80130d4 <__gethex+0x320>
 80130c0:	f019 0f02 	tst.w	r9, #2
 80130c4:	d006      	beq.n	80130d4 <__gethex+0x320>
 80130c6:	f8da 3000 	ldr.w	r3, [sl]
 80130ca:	ea49 0903 	orr.w	r9, r9, r3
 80130ce:	f019 0f01 	tst.w	r9, #1
 80130d2:	d10e      	bne.n	80130f2 <__gethex+0x33e>
 80130d4:	f045 0510 	orr.w	r5, r5, #16
 80130d8:	e032      	b.n	8013140 <__gethex+0x38c>
 80130da:	f04f 0901 	mov.w	r9, #1
 80130de:	e7d1      	b.n	8013084 <__gethex+0x2d0>
 80130e0:	2501      	movs	r5, #1
 80130e2:	e7e2      	b.n	80130aa <__gethex+0x2f6>
 80130e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130e6:	f1c3 0301 	rsb	r3, r3, #1
 80130ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80130ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d0f0      	beq.n	80130d4 <__gethex+0x320>
 80130f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80130f6:	f104 0314 	add.w	r3, r4, #20
 80130fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80130fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013102:	f04f 0c00 	mov.w	ip, #0
 8013106:	4618      	mov	r0, r3
 8013108:	f853 2b04 	ldr.w	r2, [r3], #4
 801310c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013110:	d01b      	beq.n	801314a <__gethex+0x396>
 8013112:	3201      	adds	r2, #1
 8013114:	6002      	str	r2, [r0, #0]
 8013116:	2d02      	cmp	r5, #2
 8013118:	f104 0314 	add.w	r3, r4, #20
 801311c:	d13c      	bne.n	8013198 <__gethex+0x3e4>
 801311e:	f8d8 2000 	ldr.w	r2, [r8]
 8013122:	3a01      	subs	r2, #1
 8013124:	42b2      	cmp	r2, r6
 8013126:	d109      	bne.n	801313c <__gethex+0x388>
 8013128:	1171      	asrs	r1, r6, #5
 801312a:	2201      	movs	r2, #1
 801312c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013130:	f006 061f 	and.w	r6, r6, #31
 8013134:	fa02 f606 	lsl.w	r6, r2, r6
 8013138:	421e      	tst	r6, r3
 801313a:	d13a      	bne.n	80131b2 <__gethex+0x3fe>
 801313c:	f045 0520 	orr.w	r5, r5, #32
 8013140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013142:	601c      	str	r4, [r3, #0]
 8013144:	9b02      	ldr	r3, [sp, #8]
 8013146:	601f      	str	r7, [r3, #0]
 8013148:	e6b0      	b.n	8012eac <__gethex+0xf8>
 801314a:	4299      	cmp	r1, r3
 801314c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013150:	d8d9      	bhi.n	8013106 <__gethex+0x352>
 8013152:	68a3      	ldr	r3, [r4, #8]
 8013154:	459b      	cmp	fp, r3
 8013156:	db17      	blt.n	8013188 <__gethex+0x3d4>
 8013158:	6861      	ldr	r1, [r4, #4]
 801315a:	9801      	ldr	r0, [sp, #4]
 801315c:	3101      	adds	r1, #1
 801315e:	f000 f90d 	bl	801337c <_Balloc>
 8013162:	4681      	mov	r9, r0
 8013164:	b918      	cbnz	r0, 801316e <__gethex+0x3ba>
 8013166:	4b1a      	ldr	r3, [pc, #104]	@ (80131d0 <__gethex+0x41c>)
 8013168:	4602      	mov	r2, r0
 801316a:	2184      	movs	r1, #132	@ 0x84
 801316c:	e6c5      	b.n	8012efa <__gethex+0x146>
 801316e:	6922      	ldr	r2, [r4, #16]
 8013170:	3202      	adds	r2, #2
 8013172:	f104 010c 	add.w	r1, r4, #12
 8013176:	0092      	lsls	r2, r2, #2
 8013178:	300c      	adds	r0, #12
 801317a:	f7ff fd52 	bl	8012c22 <memcpy>
 801317e:	4621      	mov	r1, r4
 8013180:	9801      	ldr	r0, [sp, #4]
 8013182:	f000 f93b 	bl	80133fc <_Bfree>
 8013186:	464c      	mov	r4, r9
 8013188:	6923      	ldr	r3, [r4, #16]
 801318a:	1c5a      	adds	r2, r3, #1
 801318c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013190:	6122      	str	r2, [r4, #16]
 8013192:	2201      	movs	r2, #1
 8013194:	615a      	str	r2, [r3, #20]
 8013196:	e7be      	b.n	8013116 <__gethex+0x362>
 8013198:	6922      	ldr	r2, [r4, #16]
 801319a:	455a      	cmp	r2, fp
 801319c:	dd0b      	ble.n	80131b6 <__gethex+0x402>
 801319e:	2101      	movs	r1, #1
 80131a0:	4620      	mov	r0, r4
 80131a2:	f7ff fd9f 	bl	8012ce4 <rshift>
 80131a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131aa:	3701      	adds	r7, #1
 80131ac:	42bb      	cmp	r3, r7
 80131ae:	f6ff aee0 	blt.w	8012f72 <__gethex+0x1be>
 80131b2:	2501      	movs	r5, #1
 80131b4:	e7c2      	b.n	801313c <__gethex+0x388>
 80131b6:	f016 061f 	ands.w	r6, r6, #31
 80131ba:	d0fa      	beq.n	80131b2 <__gethex+0x3fe>
 80131bc:	4453      	add	r3, sl
 80131be:	f1c6 0620 	rsb	r6, r6, #32
 80131c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80131c6:	f000 f9cb 	bl	8013560 <__hi0bits>
 80131ca:	42b0      	cmp	r0, r6
 80131cc:	dbe7      	blt.n	801319e <__gethex+0x3ea>
 80131ce:	e7f0      	b.n	80131b2 <__gethex+0x3fe>
 80131d0:	08014de9 	.word	0x08014de9

080131d4 <L_shift>:
 80131d4:	f1c2 0208 	rsb	r2, r2, #8
 80131d8:	0092      	lsls	r2, r2, #2
 80131da:	b570      	push	{r4, r5, r6, lr}
 80131dc:	f1c2 0620 	rsb	r6, r2, #32
 80131e0:	6843      	ldr	r3, [r0, #4]
 80131e2:	6804      	ldr	r4, [r0, #0]
 80131e4:	fa03 f506 	lsl.w	r5, r3, r6
 80131e8:	432c      	orrs	r4, r5
 80131ea:	40d3      	lsrs	r3, r2
 80131ec:	6004      	str	r4, [r0, #0]
 80131ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80131f2:	4288      	cmp	r0, r1
 80131f4:	d3f4      	bcc.n	80131e0 <L_shift+0xc>
 80131f6:	bd70      	pop	{r4, r5, r6, pc}

080131f8 <__match>:
 80131f8:	b530      	push	{r4, r5, lr}
 80131fa:	6803      	ldr	r3, [r0, #0]
 80131fc:	3301      	adds	r3, #1
 80131fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013202:	b914      	cbnz	r4, 801320a <__match+0x12>
 8013204:	6003      	str	r3, [r0, #0]
 8013206:	2001      	movs	r0, #1
 8013208:	bd30      	pop	{r4, r5, pc}
 801320a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801320e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013212:	2d19      	cmp	r5, #25
 8013214:	bf98      	it	ls
 8013216:	3220      	addls	r2, #32
 8013218:	42a2      	cmp	r2, r4
 801321a:	d0f0      	beq.n	80131fe <__match+0x6>
 801321c:	2000      	movs	r0, #0
 801321e:	e7f3      	b.n	8013208 <__match+0x10>

08013220 <__hexnan>:
 8013220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013224:	680b      	ldr	r3, [r1, #0]
 8013226:	6801      	ldr	r1, [r0, #0]
 8013228:	115e      	asrs	r6, r3, #5
 801322a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801322e:	f013 031f 	ands.w	r3, r3, #31
 8013232:	b087      	sub	sp, #28
 8013234:	bf18      	it	ne
 8013236:	3604      	addne	r6, #4
 8013238:	2500      	movs	r5, #0
 801323a:	1f37      	subs	r7, r6, #4
 801323c:	4682      	mov	sl, r0
 801323e:	4690      	mov	r8, r2
 8013240:	9301      	str	r3, [sp, #4]
 8013242:	f846 5c04 	str.w	r5, [r6, #-4]
 8013246:	46b9      	mov	r9, r7
 8013248:	463c      	mov	r4, r7
 801324a:	9502      	str	r5, [sp, #8]
 801324c:	46ab      	mov	fp, r5
 801324e:	784a      	ldrb	r2, [r1, #1]
 8013250:	1c4b      	adds	r3, r1, #1
 8013252:	9303      	str	r3, [sp, #12]
 8013254:	b342      	cbz	r2, 80132a8 <__hexnan+0x88>
 8013256:	4610      	mov	r0, r2
 8013258:	9105      	str	r1, [sp, #20]
 801325a:	9204      	str	r2, [sp, #16]
 801325c:	f7ff fd94 	bl	8012d88 <__hexdig_fun>
 8013260:	2800      	cmp	r0, #0
 8013262:	d151      	bne.n	8013308 <__hexnan+0xe8>
 8013264:	9a04      	ldr	r2, [sp, #16]
 8013266:	9905      	ldr	r1, [sp, #20]
 8013268:	2a20      	cmp	r2, #32
 801326a:	d818      	bhi.n	801329e <__hexnan+0x7e>
 801326c:	9b02      	ldr	r3, [sp, #8]
 801326e:	459b      	cmp	fp, r3
 8013270:	dd13      	ble.n	801329a <__hexnan+0x7a>
 8013272:	454c      	cmp	r4, r9
 8013274:	d206      	bcs.n	8013284 <__hexnan+0x64>
 8013276:	2d07      	cmp	r5, #7
 8013278:	dc04      	bgt.n	8013284 <__hexnan+0x64>
 801327a:	462a      	mov	r2, r5
 801327c:	4649      	mov	r1, r9
 801327e:	4620      	mov	r0, r4
 8013280:	f7ff ffa8 	bl	80131d4 <L_shift>
 8013284:	4544      	cmp	r4, r8
 8013286:	d952      	bls.n	801332e <__hexnan+0x10e>
 8013288:	2300      	movs	r3, #0
 801328a:	f1a4 0904 	sub.w	r9, r4, #4
 801328e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013292:	f8cd b008 	str.w	fp, [sp, #8]
 8013296:	464c      	mov	r4, r9
 8013298:	461d      	mov	r5, r3
 801329a:	9903      	ldr	r1, [sp, #12]
 801329c:	e7d7      	b.n	801324e <__hexnan+0x2e>
 801329e:	2a29      	cmp	r2, #41	@ 0x29
 80132a0:	d157      	bne.n	8013352 <__hexnan+0x132>
 80132a2:	3102      	adds	r1, #2
 80132a4:	f8ca 1000 	str.w	r1, [sl]
 80132a8:	f1bb 0f00 	cmp.w	fp, #0
 80132ac:	d051      	beq.n	8013352 <__hexnan+0x132>
 80132ae:	454c      	cmp	r4, r9
 80132b0:	d206      	bcs.n	80132c0 <__hexnan+0xa0>
 80132b2:	2d07      	cmp	r5, #7
 80132b4:	dc04      	bgt.n	80132c0 <__hexnan+0xa0>
 80132b6:	462a      	mov	r2, r5
 80132b8:	4649      	mov	r1, r9
 80132ba:	4620      	mov	r0, r4
 80132bc:	f7ff ff8a 	bl	80131d4 <L_shift>
 80132c0:	4544      	cmp	r4, r8
 80132c2:	d936      	bls.n	8013332 <__hexnan+0x112>
 80132c4:	f1a8 0204 	sub.w	r2, r8, #4
 80132c8:	4623      	mov	r3, r4
 80132ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80132ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80132d2:	429f      	cmp	r7, r3
 80132d4:	d2f9      	bcs.n	80132ca <__hexnan+0xaa>
 80132d6:	1b3b      	subs	r3, r7, r4
 80132d8:	f023 0303 	bic.w	r3, r3, #3
 80132dc:	3304      	adds	r3, #4
 80132de:	3401      	adds	r4, #1
 80132e0:	3e03      	subs	r6, #3
 80132e2:	42b4      	cmp	r4, r6
 80132e4:	bf88      	it	hi
 80132e6:	2304      	movhi	r3, #4
 80132e8:	4443      	add	r3, r8
 80132ea:	2200      	movs	r2, #0
 80132ec:	f843 2b04 	str.w	r2, [r3], #4
 80132f0:	429f      	cmp	r7, r3
 80132f2:	d2fb      	bcs.n	80132ec <__hexnan+0xcc>
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	b91b      	cbnz	r3, 8013300 <__hexnan+0xe0>
 80132f8:	4547      	cmp	r7, r8
 80132fa:	d128      	bne.n	801334e <__hexnan+0x12e>
 80132fc:	2301      	movs	r3, #1
 80132fe:	603b      	str	r3, [r7, #0]
 8013300:	2005      	movs	r0, #5
 8013302:	b007      	add	sp, #28
 8013304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013308:	3501      	adds	r5, #1
 801330a:	2d08      	cmp	r5, #8
 801330c:	f10b 0b01 	add.w	fp, fp, #1
 8013310:	dd06      	ble.n	8013320 <__hexnan+0x100>
 8013312:	4544      	cmp	r4, r8
 8013314:	d9c1      	bls.n	801329a <__hexnan+0x7a>
 8013316:	2300      	movs	r3, #0
 8013318:	f844 3c04 	str.w	r3, [r4, #-4]
 801331c:	2501      	movs	r5, #1
 801331e:	3c04      	subs	r4, #4
 8013320:	6822      	ldr	r2, [r4, #0]
 8013322:	f000 000f 	and.w	r0, r0, #15
 8013326:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801332a:	6020      	str	r0, [r4, #0]
 801332c:	e7b5      	b.n	801329a <__hexnan+0x7a>
 801332e:	2508      	movs	r5, #8
 8013330:	e7b3      	b.n	801329a <__hexnan+0x7a>
 8013332:	9b01      	ldr	r3, [sp, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d0dd      	beq.n	80132f4 <__hexnan+0xd4>
 8013338:	f1c3 0320 	rsb	r3, r3, #32
 801333c:	f04f 32ff 	mov.w	r2, #4294967295
 8013340:	40da      	lsrs	r2, r3
 8013342:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013346:	4013      	ands	r3, r2
 8013348:	f846 3c04 	str.w	r3, [r6, #-4]
 801334c:	e7d2      	b.n	80132f4 <__hexnan+0xd4>
 801334e:	3f04      	subs	r7, #4
 8013350:	e7d0      	b.n	80132f4 <__hexnan+0xd4>
 8013352:	2004      	movs	r0, #4
 8013354:	e7d5      	b.n	8013302 <__hexnan+0xe2>

08013356 <__ascii_mbtowc>:
 8013356:	b082      	sub	sp, #8
 8013358:	b901      	cbnz	r1, 801335c <__ascii_mbtowc+0x6>
 801335a:	a901      	add	r1, sp, #4
 801335c:	b142      	cbz	r2, 8013370 <__ascii_mbtowc+0x1a>
 801335e:	b14b      	cbz	r3, 8013374 <__ascii_mbtowc+0x1e>
 8013360:	7813      	ldrb	r3, [r2, #0]
 8013362:	600b      	str	r3, [r1, #0]
 8013364:	7812      	ldrb	r2, [r2, #0]
 8013366:	1e10      	subs	r0, r2, #0
 8013368:	bf18      	it	ne
 801336a:	2001      	movne	r0, #1
 801336c:	b002      	add	sp, #8
 801336e:	4770      	bx	lr
 8013370:	4610      	mov	r0, r2
 8013372:	e7fb      	b.n	801336c <__ascii_mbtowc+0x16>
 8013374:	f06f 0001 	mvn.w	r0, #1
 8013378:	e7f8      	b.n	801336c <__ascii_mbtowc+0x16>
	...

0801337c <_Balloc>:
 801337c:	b570      	push	{r4, r5, r6, lr}
 801337e:	69c6      	ldr	r6, [r0, #28]
 8013380:	4604      	mov	r4, r0
 8013382:	460d      	mov	r5, r1
 8013384:	b976      	cbnz	r6, 80133a4 <_Balloc+0x28>
 8013386:	2010      	movs	r0, #16
 8013388:	f7fe fa16 	bl	80117b8 <malloc>
 801338c:	4602      	mov	r2, r0
 801338e:	61e0      	str	r0, [r4, #28]
 8013390:	b920      	cbnz	r0, 801339c <_Balloc+0x20>
 8013392:	4b18      	ldr	r3, [pc, #96]	@ (80133f4 <_Balloc+0x78>)
 8013394:	4818      	ldr	r0, [pc, #96]	@ (80133f8 <_Balloc+0x7c>)
 8013396:	216b      	movs	r1, #107	@ 0x6b
 8013398:	f001 fa28 	bl	80147ec <__assert_func>
 801339c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133a0:	6006      	str	r6, [r0, #0]
 80133a2:	60c6      	str	r6, [r0, #12]
 80133a4:	69e6      	ldr	r6, [r4, #28]
 80133a6:	68f3      	ldr	r3, [r6, #12]
 80133a8:	b183      	cbz	r3, 80133cc <_Balloc+0x50>
 80133aa:	69e3      	ldr	r3, [r4, #28]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80133b2:	b9b8      	cbnz	r0, 80133e4 <_Balloc+0x68>
 80133b4:	2101      	movs	r1, #1
 80133b6:	fa01 f605 	lsl.w	r6, r1, r5
 80133ba:	1d72      	adds	r2, r6, #5
 80133bc:	0092      	lsls	r2, r2, #2
 80133be:	4620      	mov	r0, r4
 80133c0:	f001 fa32 	bl	8014828 <_calloc_r>
 80133c4:	b160      	cbz	r0, 80133e0 <_Balloc+0x64>
 80133c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80133ca:	e00e      	b.n	80133ea <_Balloc+0x6e>
 80133cc:	2221      	movs	r2, #33	@ 0x21
 80133ce:	2104      	movs	r1, #4
 80133d0:	4620      	mov	r0, r4
 80133d2:	f001 fa29 	bl	8014828 <_calloc_r>
 80133d6:	69e3      	ldr	r3, [r4, #28]
 80133d8:	60f0      	str	r0, [r6, #12]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d1e4      	bne.n	80133aa <_Balloc+0x2e>
 80133e0:	2000      	movs	r0, #0
 80133e2:	bd70      	pop	{r4, r5, r6, pc}
 80133e4:	6802      	ldr	r2, [r0, #0]
 80133e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80133ea:	2300      	movs	r3, #0
 80133ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80133f0:	e7f7      	b.n	80133e2 <_Balloc+0x66>
 80133f2:	bf00      	nop
 80133f4:	08014e5a 	.word	0x08014e5a
 80133f8:	08014e71 	.word	0x08014e71

080133fc <_Bfree>:
 80133fc:	b570      	push	{r4, r5, r6, lr}
 80133fe:	69c6      	ldr	r6, [r0, #28]
 8013400:	4605      	mov	r5, r0
 8013402:	460c      	mov	r4, r1
 8013404:	b976      	cbnz	r6, 8013424 <_Bfree+0x28>
 8013406:	2010      	movs	r0, #16
 8013408:	f7fe f9d6 	bl	80117b8 <malloc>
 801340c:	4602      	mov	r2, r0
 801340e:	61e8      	str	r0, [r5, #28]
 8013410:	b920      	cbnz	r0, 801341c <_Bfree+0x20>
 8013412:	4b09      	ldr	r3, [pc, #36]	@ (8013438 <_Bfree+0x3c>)
 8013414:	4809      	ldr	r0, [pc, #36]	@ (801343c <_Bfree+0x40>)
 8013416:	218f      	movs	r1, #143	@ 0x8f
 8013418:	f001 f9e8 	bl	80147ec <__assert_func>
 801341c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013420:	6006      	str	r6, [r0, #0]
 8013422:	60c6      	str	r6, [r0, #12]
 8013424:	b13c      	cbz	r4, 8013436 <_Bfree+0x3a>
 8013426:	69eb      	ldr	r3, [r5, #28]
 8013428:	6862      	ldr	r2, [r4, #4]
 801342a:	68db      	ldr	r3, [r3, #12]
 801342c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013430:	6021      	str	r1, [r4, #0]
 8013432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013436:	bd70      	pop	{r4, r5, r6, pc}
 8013438:	08014e5a 	.word	0x08014e5a
 801343c:	08014e71 	.word	0x08014e71

08013440 <__multadd>:
 8013440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013444:	690d      	ldr	r5, [r1, #16]
 8013446:	4607      	mov	r7, r0
 8013448:	460c      	mov	r4, r1
 801344a:	461e      	mov	r6, r3
 801344c:	f101 0c14 	add.w	ip, r1, #20
 8013450:	2000      	movs	r0, #0
 8013452:	f8dc 3000 	ldr.w	r3, [ip]
 8013456:	b299      	uxth	r1, r3
 8013458:	fb02 6101 	mla	r1, r2, r1, r6
 801345c:	0c1e      	lsrs	r6, r3, #16
 801345e:	0c0b      	lsrs	r3, r1, #16
 8013460:	fb02 3306 	mla	r3, r2, r6, r3
 8013464:	b289      	uxth	r1, r1
 8013466:	3001      	adds	r0, #1
 8013468:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801346c:	4285      	cmp	r5, r0
 801346e:	f84c 1b04 	str.w	r1, [ip], #4
 8013472:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013476:	dcec      	bgt.n	8013452 <__multadd+0x12>
 8013478:	b30e      	cbz	r6, 80134be <__multadd+0x7e>
 801347a:	68a3      	ldr	r3, [r4, #8]
 801347c:	42ab      	cmp	r3, r5
 801347e:	dc19      	bgt.n	80134b4 <__multadd+0x74>
 8013480:	6861      	ldr	r1, [r4, #4]
 8013482:	4638      	mov	r0, r7
 8013484:	3101      	adds	r1, #1
 8013486:	f7ff ff79 	bl	801337c <_Balloc>
 801348a:	4680      	mov	r8, r0
 801348c:	b928      	cbnz	r0, 801349a <__multadd+0x5a>
 801348e:	4602      	mov	r2, r0
 8013490:	4b0c      	ldr	r3, [pc, #48]	@ (80134c4 <__multadd+0x84>)
 8013492:	480d      	ldr	r0, [pc, #52]	@ (80134c8 <__multadd+0x88>)
 8013494:	21ba      	movs	r1, #186	@ 0xba
 8013496:	f001 f9a9 	bl	80147ec <__assert_func>
 801349a:	6922      	ldr	r2, [r4, #16]
 801349c:	3202      	adds	r2, #2
 801349e:	f104 010c 	add.w	r1, r4, #12
 80134a2:	0092      	lsls	r2, r2, #2
 80134a4:	300c      	adds	r0, #12
 80134a6:	f7ff fbbc 	bl	8012c22 <memcpy>
 80134aa:	4621      	mov	r1, r4
 80134ac:	4638      	mov	r0, r7
 80134ae:	f7ff ffa5 	bl	80133fc <_Bfree>
 80134b2:	4644      	mov	r4, r8
 80134b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80134b8:	3501      	adds	r5, #1
 80134ba:	615e      	str	r6, [r3, #20]
 80134bc:	6125      	str	r5, [r4, #16]
 80134be:	4620      	mov	r0, r4
 80134c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c4:	08014de9 	.word	0x08014de9
 80134c8:	08014e71 	.word	0x08014e71

080134cc <__s2b>:
 80134cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134d0:	460c      	mov	r4, r1
 80134d2:	4615      	mov	r5, r2
 80134d4:	461f      	mov	r7, r3
 80134d6:	2209      	movs	r2, #9
 80134d8:	3308      	adds	r3, #8
 80134da:	4606      	mov	r6, r0
 80134dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80134e0:	2100      	movs	r1, #0
 80134e2:	2201      	movs	r2, #1
 80134e4:	429a      	cmp	r2, r3
 80134e6:	db09      	blt.n	80134fc <__s2b+0x30>
 80134e8:	4630      	mov	r0, r6
 80134ea:	f7ff ff47 	bl	801337c <_Balloc>
 80134ee:	b940      	cbnz	r0, 8013502 <__s2b+0x36>
 80134f0:	4602      	mov	r2, r0
 80134f2:	4b19      	ldr	r3, [pc, #100]	@ (8013558 <__s2b+0x8c>)
 80134f4:	4819      	ldr	r0, [pc, #100]	@ (801355c <__s2b+0x90>)
 80134f6:	21d3      	movs	r1, #211	@ 0xd3
 80134f8:	f001 f978 	bl	80147ec <__assert_func>
 80134fc:	0052      	lsls	r2, r2, #1
 80134fe:	3101      	adds	r1, #1
 8013500:	e7f0      	b.n	80134e4 <__s2b+0x18>
 8013502:	9b08      	ldr	r3, [sp, #32]
 8013504:	6143      	str	r3, [r0, #20]
 8013506:	2d09      	cmp	r5, #9
 8013508:	f04f 0301 	mov.w	r3, #1
 801350c:	6103      	str	r3, [r0, #16]
 801350e:	dd16      	ble.n	801353e <__s2b+0x72>
 8013510:	f104 0909 	add.w	r9, r4, #9
 8013514:	46c8      	mov	r8, r9
 8013516:	442c      	add	r4, r5
 8013518:	f818 3b01 	ldrb.w	r3, [r8], #1
 801351c:	4601      	mov	r1, r0
 801351e:	3b30      	subs	r3, #48	@ 0x30
 8013520:	220a      	movs	r2, #10
 8013522:	4630      	mov	r0, r6
 8013524:	f7ff ff8c 	bl	8013440 <__multadd>
 8013528:	45a0      	cmp	r8, r4
 801352a:	d1f5      	bne.n	8013518 <__s2b+0x4c>
 801352c:	f1a5 0408 	sub.w	r4, r5, #8
 8013530:	444c      	add	r4, r9
 8013532:	1b2d      	subs	r5, r5, r4
 8013534:	1963      	adds	r3, r4, r5
 8013536:	42bb      	cmp	r3, r7
 8013538:	db04      	blt.n	8013544 <__s2b+0x78>
 801353a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801353e:	340a      	adds	r4, #10
 8013540:	2509      	movs	r5, #9
 8013542:	e7f6      	b.n	8013532 <__s2b+0x66>
 8013544:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013548:	4601      	mov	r1, r0
 801354a:	3b30      	subs	r3, #48	@ 0x30
 801354c:	220a      	movs	r2, #10
 801354e:	4630      	mov	r0, r6
 8013550:	f7ff ff76 	bl	8013440 <__multadd>
 8013554:	e7ee      	b.n	8013534 <__s2b+0x68>
 8013556:	bf00      	nop
 8013558:	08014de9 	.word	0x08014de9
 801355c:	08014e71 	.word	0x08014e71

08013560 <__hi0bits>:
 8013560:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013564:	4603      	mov	r3, r0
 8013566:	bf36      	itet	cc
 8013568:	0403      	lslcc	r3, r0, #16
 801356a:	2000      	movcs	r0, #0
 801356c:	2010      	movcc	r0, #16
 801356e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013572:	bf3c      	itt	cc
 8013574:	021b      	lslcc	r3, r3, #8
 8013576:	3008      	addcc	r0, #8
 8013578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801357c:	bf3c      	itt	cc
 801357e:	011b      	lslcc	r3, r3, #4
 8013580:	3004      	addcc	r0, #4
 8013582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013586:	bf3c      	itt	cc
 8013588:	009b      	lslcc	r3, r3, #2
 801358a:	3002      	addcc	r0, #2
 801358c:	2b00      	cmp	r3, #0
 801358e:	db05      	blt.n	801359c <__hi0bits+0x3c>
 8013590:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013594:	f100 0001 	add.w	r0, r0, #1
 8013598:	bf08      	it	eq
 801359a:	2020      	moveq	r0, #32
 801359c:	4770      	bx	lr

0801359e <__lo0bits>:
 801359e:	6803      	ldr	r3, [r0, #0]
 80135a0:	4602      	mov	r2, r0
 80135a2:	f013 0007 	ands.w	r0, r3, #7
 80135a6:	d00b      	beq.n	80135c0 <__lo0bits+0x22>
 80135a8:	07d9      	lsls	r1, r3, #31
 80135aa:	d421      	bmi.n	80135f0 <__lo0bits+0x52>
 80135ac:	0798      	lsls	r0, r3, #30
 80135ae:	bf49      	itett	mi
 80135b0:	085b      	lsrmi	r3, r3, #1
 80135b2:	089b      	lsrpl	r3, r3, #2
 80135b4:	2001      	movmi	r0, #1
 80135b6:	6013      	strmi	r3, [r2, #0]
 80135b8:	bf5c      	itt	pl
 80135ba:	6013      	strpl	r3, [r2, #0]
 80135bc:	2002      	movpl	r0, #2
 80135be:	4770      	bx	lr
 80135c0:	b299      	uxth	r1, r3
 80135c2:	b909      	cbnz	r1, 80135c8 <__lo0bits+0x2a>
 80135c4:	0c1b      	lsrs	r3, r3, #16
 80135c6:	2010      	movs	r0, #16
 80135c8:	b2d9      	uxtb	r1, r3
 80135ca:	b909      	cbnz	r1, 80135d0 <__lo0bits+0x32>
 80135cc:	3008      	adds	r0, #8
 80135ce:	0a1b      	lsrs	r3, r3, #8
 80135d0:	0719      	lsls	r1, r3, #28
 80135d2:	bf04      	itt	eq
 80135d4:	091b      	lsreq	r3, r3, #4
 80135d6:	3004      	addeq	r0, #4
 80135d8:	0799      	lsls	r1, r3, #30
 80135da:	bf04      	itt	eq
 80135dc:	089b      	lsreq	r3, r3, #2
 80135de:	3002      	addeq	r0, #2
 80135e0:	07d9      	lsls	r1, r3, #31
 80135e2:	d403      	bmi.n	80135ec <__lo0bits+0x4e>
 80135e4:	085b      	lsrs	r3, r3, #1
 80135e6:	f100 0001 	add.w	r0, r0, #1
 80135ea:	d003      	beq.n	80135f4 <__lo0bits+0x56>
 80135ec:	6013      	str	r3, [r2, #0]
 80135ee:	4770      	bx	lr
 80135f0:	2000      	movs	r0, #0
 80135f2:	4770      	bx	lr
 80135f4:	2020      	movs	r0, #32
 80135f6:	4770      	bx	lr

080135f8 <__i2b>:
 80135f8:	b510      	push	{r4, lr}
 80135fa:	460c      	mov	r4, r1
 80135fc:	2101      	movs	r1, #1
 80135fe:	f7ff febd 	bl	801337c <_Balloc>
 8013602:	4602      	mov	r2, r0
 8013604:	b928      	cbnz	r0, 8013612 <__i2b+0x1a>
 8013606:	4b05      	ldr	r3, [pc, #20]	@ (801361c <__i2b+0x24>)
 8013608:	4805      	ldr	r0, [pc, #20]	@ (8013620 <__i2b+0x28>)
 801360a:	f240 1145 	movw	r1, #325	@ 0x145
 801360e:	f001 f8ed 	bl	80147ec <__assert_func>
 8013612:	2301      	movs	r3, #1
 8013614:	6144      	str	r4, [r0, #20]
 8013616:	6103      	str	r3, [r0, #16]
 8013618:	bd10      	pop	{r4, pc}
 801361a:	bf00      	nop
 801361c:	08014de9 	.word	0x08014de9
 8013620:	08014e71 	.word	0x08014e71

08013624 <__multiply>:
 8013624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013628:	4614      	mov	r4, r2
 801362a:	690a      	ldr	r2, [r1, #16]
 801362c:	6923      	ldr	r3, [r4, #16]
 801362e:	429a      	cmp	r2, r3
 8013630:	bfa8      	it	ge
 8013632:	4623      	movge	r3, r4
 8013634:	460f      	mov	r7, r1
 8013636:	bfa4      	itt	ge
 8013638:	460c      	movge	r4, r1
 801363a:	461f      	movge	r7, r3
 801363c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013640:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013644:	68a3      	ldr	r3, [r4, #8]
 8013646:	6861      	ldr	r1, [r4, #4]
 8013648:	eb0a 0609 	add.w	r6, sl, r9
 801364c:	42b3      	cmp	r3, r6
 801364e:	b085      	sub	sp, #20
 8013650:	bfb8      	it	lt
 8013652:	3101      	addlt	r1, #1
 8013654:	f7ff fe92 	bl	801337c <_Balloc>
 8013658:	b930      	cbnz	r0, 8013668 <__multiply+0x44>
 801365a:	4602      	mov	r2, r0
 801365c:	4b44      	ldr	r3, [pc, #272]	@ (8013770 <__multiply+0x14c>)
 801365e:	4845      	ldr	r0, [pc, #276]	@ (8013774 <__multiply+0x150>)
 8013660:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013664:	f001 f8c2 	bl	80147ec <__assert_func>
 8013668:	f100 0514 	add.w	r5, r0, #20
 801366c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013670:	462b      	mov	r3, r5
 8013672:	2200      	movs	r2, #0
 8013674:	4543      	cmp	r3, r8
 8013676:	d321      	bcc.n	80136bc <__multiply+0x98>
 8013678:	f107 0114 	add.w	r1, r7, #20
 801367c:	f104 0214 	add.w	r2, r4, #20
 8013680:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013684:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013688:	9302      	str	r3, [sp, #8]
 801368a:	1b13      	subs	r3, r2, r4
 801368c:	3b15      	subs	r3, #21
 801368e:	f023 0303 	bic.w	r3, r3, #3
 8013692:	3304      	adds	r3, #4
 8013694:	f104 0715 	add.w	r7, r4, #21
 8013698:	42ba      	cmp	r2, r7
 801369a:	bf38      	it	cc
 801369c:	2304      	movcc	r3, #4
 801369e:	9301      	str	r3, [sp, #4]
 80136a0:	9b02      	ldr	r3, [sp, #8]
 80136a2:	9103      	str	r1, [sp, #12]
 80136a4:	428b      	cmp	r3, r1
 80136a6:	d80c      	bhi.n	80136c2 <__multiply+0x9e>
 80136a8:	2e00      	cmp	r6, #0
 80136aa:	dd03      	ble.n	80136b4 <__multiply+0x90>
 80136ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d05b      	beq.n	801376c <__multiply+0x148>
 80136b4:	6106      	str	r6, [r0, #16]
 80136b6:	b005      	add	sp, #20
 80136b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136bc:	f843 2b04 	str.w	r2, [r3], #4
 80136c0:	e7d8      	b.n	8013674 <__multiply+0x50>
 80136c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80136c6:	f1ba 0f00 	cmp.w	sl, #0
 80136ca:	d024      	beq.n	8013716 <__multiply+0xf2>
 80136cc:	f104 0e14 	add.w	lr, r4, #20
 80136d0:	46a9      	mov	r9, r5
 80136d2:	f04f 0c00 	mov.w	ip, #0
 80136d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80136da:	f8d9 3000 	ldr.w	r3, [r9]
 80136de:	fa1f fb87 	uxth.w	fp, r7
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80136e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80136ec:	f8d9 7000 	ldr.w	r7, [r9]
 80136f0:	4463      	add	r3, ip
 80136f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80136f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80136fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80136fe:	b29b      	uxth	r3, r3
 8013700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013704:	4572      	cmp	r2, lr
 8013706:	f849 3b04 	str.w	r3, [r9], #4
 801370a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801370e:	d8e2      	bhi.n	80136d6 <__multiply+0xb2>
 8013710:	9b01      	ldr	r3, [sp, #4]
 8013712:	f845 c003 	str.w	ip, [r5, r3]
 8013716:	9b03      	ldr	r3, [sp, #12]
 8013718:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801371c:	3104      	adds	r1, #4
 801371e:	f1b9 0f00 	cmp.w	r9, #0
 8013722:	d021      	beq.n	8013768 <__multiply+0x144>
 8013724:	682b      	ldr	r3, [r5, #0]
 8013726:	f104 0c14 	add.w	ip, r4, #20
 801372a:	46ae      	mov	lr, r5
 801372c:	f04f 0a00 	mov.w	sl, #0
 8013730:	f8bc b000 	ldrh.w	fp, [ip]
 8013734:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013738:	fb09 770b 	mla	r7, r9, fp, r7
 801373c:	4457      	add	r7, sl
 801373e:	b29b      	uxth	r3, r3
 8013740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013744:	f84e 3b04 	str.w	r3, [lr], #4
 8013748:	f85c 3b04 	ldr.w	r3, [ip], #4
 801374c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013750:	f8be 3000 	ldrh.w	r3, [lr]
 8013754:	fb09 330a 	mla	r3, r9, sl, r3
 8013758:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801375c:	4562      	cmp	r2, ip
 801375e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013762:	d8e5      	bhi.n	8013730 <__multiply+0x10c>
 8013764:	9f01      	ldr	r7, [sp, #4]
 8013766:	51eb      	str	r3, [r5, r7]
 8013768:	3504      	adds	r5, #4
 801376a:	e799      	b.n	80136a0 <__multiply+0x7c>
 801376c:	3e01      	subs	r6, #1
 801376e:	e79b      	b.n	80136a8 <__multiply+0x84>
 8013770:	08014de9 	.word	0x08014de9
 8013774:	08014e71 	.word	0x08014e71

08013778 <__pow5mult>:
 8013778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801377c:	4615      	mov	r5, r2
 801377e:	f012 0203 	ands.w	r2, r2, #3
 8013782:	4607      	mov	r7, r0
 8013784:	460e      	mov	r6, r1
 8013786:	d007      	beq.n	8013798 <__pow5mult+0x20>
 8013788:	4c25      	ldr	r4, [pc, #148]	@ (8013820 <__pow5mult+0xa8>)
 801378a:	3a01      	subs	r2, #1
 801378c:	2300      	movs	r3, #0
 801378e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013792:	f7ff fe55 	bl	8013440 <__multadd>
 8013796:	4606      	mov	r6, r0
 8013798:	10ad      	asrs	r5, r5, #2
 801379a:	d03d      	beq.n	8013818 <__pow5mult+0xa0>
 801379c:	69fc      	ldr	r4, [r7, #28]
 801379e:	b97c      	cbnz	r4, 80137c0 <__pow5mult+0x48>
 80137a0:	2010      	movs	r0, #16
 80137a2:	f7fe f809 	bl	80117b8 <malloc>
 80137a6:	4602      	mov	r2, r0
 80137a8:	61f8      	str	r0, [r7, #28]
 80137aa:	b928      	cbnz	r0, 80137b8 <__pow5mult+0x40>
 80137ac:	4b1d      	ldr	r3, [pc, #116]	@ (8013824 <__pow5mult+0xac>)
 80137ae:	481e      	ldr	r0, [pc, #120]	@ (8013828 <__pow5mult+0xb0>)
 80137b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80137b4:	f001 f81a 	bl	80147ec <__assert_func>
 80137b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80137bc:	6004      	str	r4, [r0, #0]
 80137be:	60c4      	str	r4, [r0, #12]
 80137c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80137c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80137c8:	b94c      	cbnz	r4, 80137de <__pow5mult+0x66>
 80137ca:	f240 2171 	movw	r1, #625	@ 0x271
 80137ce:	4638      	mov	r0, r7
 80137d0:	f7ff ff12 	bl	80135f8 <__i2b>
 80137d4:	2300      	movs	r3, #0
 80137d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80137da:	4604      	mov	r4, r0
 80137dc:	6003      	str	r3, [r0, #0]
 80137de:	f04f 0900 	mov.w	r9, #0
 80137e2:	07eb      	lsls	r3, r5, #31
 80137e4:	d50a      	bpl.n	80137fc <__pow5mult+0x84>
 80137e6:	4631      	mov	r1, r6
 80137e8:	4622      	mov	r2, r4
 80137ea:	4638      	mov	r0, r7
 80137ec:	f7ff ff1a 	bl	8013624 <__multiply>
 80137f0:	4631      	mov	r1, r6
 80137f2:	4680      	mov	r8, r0
 80137f4:	4638      	mov	r0, r7
 80137f6:	f7ff fe01 	bl	80133fc <_Bfree>
 80137fa:	4646      	mov	r6, r8
 80137fc:	106d      	asrs	r5, r5, #1
 80137fe:	d00b      	beq.n	8013818 <__pow5mult+0xa0>
 8013800:	6820      	ldr	r0, [r4, #0]
 8013802:	b938      	cbnz	r0, 8013814 <__pow5mult+0x9c>
 8013804:	4622      	mov	r2, r4
 8013806:	4621      	mov	r1, r4
 8013808:	4638      	mov	r0, r7
 801380a:	f7ff ff0b 	bl	8013624 <__multiply>
 801380e:	6020      	str	r0, [r4, #0]
 8013810:	f8c0 9000 	str.w	r9, [r0]
 8013814:	4604      	mov	r4, r0
 8013816:	e7e4      	b.n	80137e2 <__pow5mult+0x6a>
 8013818:	4630      	mov	r0, r6
 801381a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801381e:	bf00      	nop
 8013820:	08014ecc 	.word	0x08014ecc
 8013824:	08014e5a 	.word	0x08014e5a
 8013828:	08014e71 	.word	0x08014e71

0801382c <__lshift>:
 801382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013830:	460c      	mov	r4, r1
 8013832:	6849      	ldr	r1, [r1, #4]
 8013834:	6923      	ldr	r3, [r4, #16]
 8013836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801383a:	68a3      	ldr	r3, [r4, #8]
 801383c:	4607      	mov	r7, r0
 801383e:	4691      	mov	r9, r2
 8013840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013844:	f108 0601 	add.w	r6, r8, #1
 8013848:	42b3      	cmp	r3, r6
 801384a:	db0b      	blt.n	8013864 <__lshift+0x38>
 801384c:	4638      	mov	r0, r7
 801384e:	f7ff fd95 	bl	801337c <_Balloc>
 8013852:	4605      	mov	r5, r0
 8013854:	b948      	cbnz	r0, 801386a <__lshift+0x3e>
 8013856:	4602      	mov	r2, r0
 8013858:	4b28      	ldr	r3, [pc, #160]	@ (80138fc <__lshift+0xd0>)
 801385a:	4829      	ldr	r0, [pc, #164]	@ (8013900 <__lshift+0xd4>)
 801385c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013860:	f000 ffc4 	bl	80147ec <__assert_func>
 8013864:	3101      	adds	r1, #1
 8013866:	005b      	lsls	r3, r3, #1
 8013868:	e7ee      	b.n	8013848 <__lshift+0x1c>
 801386a:	2300      	movs	r3, #0
 801386c:	f100 0114 	add.w	r1, r0, #20
 8013870:	f100 0210 	add.w	r2, r0, #16
 8013874:	4618      	mov	r0, r3
 8013876:	4553      	cmp	r3, sl
 8013878:	db33      	blt.n	80138e2 <__lshift+0xb6>
 801387a:	6920      	ldr	r0, [r4, #16]
 801387c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013880:	f104 0314 	add.w	r3, r4, #20
 8013884:	f019 091f 	ands.w	r9, r9, #31
 8013888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801388c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013890:	d02b      	beq.n	80138ea <__lshift+0xbe>
 8013892:	f1c9 0e20 	rsb	lr, r9, #32
 8013896:	468a      	mov	sl, r1
 8013898:	2200      	movs	r2, #0
 801389a:	6818      	ldr	r0, [r3, #0]
 801389c:	fa00 f009 	lsl.w	r0, r0, r9
 80138a0:	4310      	orrs	r0, r2
 80138a2:	f84a 0b04 	str.w	r0, [sl], #4
 80138a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80138aa:	459c      	cmp	ip, r3
 80138ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80138b0:	d8f3      	bhi.n	801389a <__lshift+0x6e>
 80138b2:	ebac 0304 	sub.w	r3, ip, r4
 80138b6:	3b15      	subs	r3, #21
 80138b8:	f023 0303 	bic.w	r3, r3, #3
 80138bc:	3304      	adds	r3, #4
 80138be:	f104 0015 	add.w	r0, r4, #21
 80138c2:	4584      	cmp	ip, r0
 80138c4:	bf38      	it	cc
 80138c6:	2304      	movcc	r3, #4
 80138c8:	50ca      	str	r2, [r1, r3]
 80138ca:	b10a      	cbz	r2, 80138d0 <__lshift+0xa4>
 80138cc:	f108 0602 	add.w	r6, r8, #2
 80138d0:	3e01      	subs	r6, #1
 80138d2:	4638      	mov	r0, r7
 80138d4:	612e      	str	r6, [r5, #16]
 80138d6:	4621      	mov	r1, r4
 80138d8:	f7ff fd90 	bl	80133fc <_Bfree>
 80138dc:	4628      	mov	r0, r5
 80138de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80138e6:	3301      	adds	r3, #1
 80138e8:	e7c5      	b.n	8013876 <__lshift+0x4a>
 80138ea:	3904      	subs	r1, #4
 80138ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80138f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80138f4:	459c      	cmp	ip, r3
 80138f6:	d8f9      	bhi.n	80138ec <__lshift+0xc0>
 80138f8:	e7ea      	b.n	80138d0 <__lshift+0xa4>
 80138fa:	bf00      	nop
 80138fc:	08014de9 	.word	0x08014de9
 8013900:	08014e71 	.word	0x08014e71

08013904 <__mcmp>:
 8013904:	690a      	ldr	r2, [r1, #16]
 8013906:	4603      	mov	r3, r0
 8013908:	6900      	ldr	r0, [r0, #16]
 801390a:	1a80      	subs	r0, r0, r2
 801390c:	b530      	push	{r4, r5, lr}
 801390e:	d10e      	bne.n	801392e <__mcmp+0x2a>
 8013910:	3314      	adds	r3, #20
 8013912:	3114      	adds	r1, #20
 8013914:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013918:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801391c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013920:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013924:	4295      	cmp	r5, r2
 8013926:	d003      	beq.n	8013930 <__mcmp+0x2c>
 8013928:	d205      	bcs.n	8013936 <__mcmp+0x32>
 801392a:	f04f 30ff 	mov.w	r0, #4294967295
 801392e:	bd30      	pop	{r4, r5, pc}
 8013930:	42a3      	cmp	r3, r4
 8013932:	d3f3      	bcc.n	801391c <__mcmp+0x18>
 8013934:	e7fb      	b.n	801392e <__mcmp+0x2a>
 8013936:	2001      	movs	r0, #1
 8013938:	e7f9      	b.n	801392e <__mcmp+0x2a>
	...

0801393c <__mdiff>:
 801393c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013940:	4689      	mov	r9, r1
 8013942:	4606      	mov	r6, r0
 8013944:	4611      	mov	r1, r2
 8013946:	4648      	mov	r0, r9
 8013948:	4614      	mov	r4, r2
 801394a:	f7ff ffdb 	bl	8013904 <__mcmp>
 801394e:	1e05      	subs	r5, r0, #0
 8013950:	d112      	bne.n	8013978 <__mdiff+0x3c>
 8013952:	4629      	mov	r1, r5
 8013954:	4630      	mov	r0, r6
 8013956:	f7ff fd11 	bl	801337c <_Balloc>
 801395a:	4602      	mov	r2, r0
 801395c:	b928      	cbnz	r0, 801396a <__mdiff+0x2e>
 801395e:	4b3f      	ldr	r3, [pc, #252]	@ (8013a5c <__mdiff+0x120>)
 8013960:	f240 2137 	movw	r1, #567	@ 0x237
 8013964:	483e      	ldr	r0, [pc, #248]	@ (8013a60 <__mdiff+0x124>)
 8013966:	f000 ff41 	bl	80147ec <__assert_func>
 801396a:	2301      	movs	r3, #1
 801396c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013970:	4610      	mov	r0, r2
 8013972:	b003      	add	sp, #12
 8013974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013978:	bfbc      	itt	lt
 801397a:	464b      	movlt	r3, r9
 801397c:	46a1      	movlt	r9, r4
 801397e:	4630      	mov	r0, r6
 8013980:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013984:	bfba      	itte	lt
 8013986:	461c      	movlt	r4, r3
 8013988:	2501      	movlt	r5, #1
 801398a:	2500      	movge	r5, #0
 801398c:	f7ff fcf6 	bl	801337c <_Balloc>
 8013990:	4602      	mov	r2, r0
 8013992:	b918      	cbnz	r0, 801399c <__mdiff+0x60>
 8013994:	4b31      	ldr	r3, [pc, #196]	@ (8013a5c <__mdiff+0x120>)
 8013996:	f240 2145 	movw	r1, #581	@ 0x245
 801399a:	e7e3      	b.n	8013964 <__mdiff+0x28>
 801399c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80139a0:	6926      	ldr	r6, [r4, #16]
 80139a2:	60c5      	str	r5, [r0, #12]
 80139a4:	f109 0310 	add.w	r3, r9, #16
 80139a8:	f109 0514 	add.w	r5, r9, #20
 80139ac:	f104 0e14 	add.w	lr, r4, #20
 80139b0:	f100 0b14 	add.w	fp, r0, #20
 80139b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80139b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80139bc:	9301      	str	r3, [sp, #4]
 80139be:	46d9      	mov	r9, fp
 80139c0:	f04f 0c00 	mov.w	ip, #0
 80139c4:	9b01      	ldr	r3, [sp, #4]
 80139c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80139ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80139ce:	9301      	str	r3, [sp, #4]
 80139d0:	fa1f f38a 	uxth.w	r3, sl
 80139d4:	4619      	mov	r1, r3
 80139d6:	b283      	uxth	r3, r0
 80139d8:	1acb      	subs	r3, r1, r3
 80139da:	0c00      	lsrs	r0, r0, #16
 80139dc:	4463      	add	r3, ip
 80139de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80139e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80139ec:	4576      	cmp	r6, lr
 80139ee:	f849 3b04 	str.w	r3, [r9], #4
 80139f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80139f6:	d8e5      	bhi.n	80139c4 <__mdiff+0x88>
 80139f8:	1b33      	subs	r3, r6, r4
 80139fa:	3b15      	subs	r3, #21
 80139fc:	f023 0303 	bic.w	r3, r3, #3
 8013a00:	3415      	adds	r4, #21
 8013a02:	3304      	adds	r3, #4
 8013a04:	42a6      	cmp	r6, r4
 8013a06:	bf38      	it	cc
 8013a08:	2304      	movcc	r3, #4
 8013a0a:	441d      	add	r5, r3
 8013a0c:	445b      	add	r3, fp
 8013a0e:	461e      	mov	r6, r3
 8013a10:	462c      	mov	r4, r5
 8013a12:	4544      	cmp	r4, r8
 8013a14:	d30e      	bcc.n	8013a34 <__mdiff+0xf8>
 8013a16:	f108 0103 	add.w	r1, r8, #3
 8013a1a:	1b49      	subs	r1, r1, r5
 8013a1c:	f021 0103 	bic.w	r1, r1, #3
 8013a20:	3d03      	subs	r5, #3
 8013a22:	45a8      	cmp	r8, r5
 8013a24:	bf38      	it	cc
 8013a26:	2100      	movcc	r1, #0
 8013a28:	440b      	add	r3, r1
 8013a2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013a2e:	b191      	cbz	r1, 8013a56 <__mdiff+0x11a>
 8013a30:	6117      	str	r7, [r2, #16]
 8013a32:	e79d      	b.n	8013970 <__mdiff+0x34>
 8013a34:	f854 1b04 	ldr.w	r1, [r4], #4
 8013a38:	46e6      	mov	lr, ip
 8013a3a:	0c08      	lsrs	r0, r1, #16
 8013a3c:	fa1c fc81 	uxtah	ip, ip, r1
 8013a40:	4471      	add	r1, lr
 8013a42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013a46:	b289      	uxth	r1, r1
 8013a48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013a4c:	f846 1b04 	str.w	r1, [r6], #4
 8013a50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013a54:	e7dd      	b.n	8013a12 <__mdiff+0xd6>
 8013a56:	3f01      	subs	r7, #1
 8013a58:	e7e7      	b.n	8013a2a <__mdiff+0xee>
 8013a5a:	bf00      	nop
 8013a5c:	08014de9 	.word	0x08014de9
 8013a60:	08014e71 	.word	0x08014e71

08013a64 <__ulp>:
 8013a64:	b082      	sub	sp, #8
 8013a66:	ed8d 0b00 	vstr	d0, [sp]
 8013a6a:	9a01      	ldr	r2, [sp, #4]
 8013a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8013aac <__ulp+0x48>)
 8013a6e:	4013      	ands	r3, r2
 8013a70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	dc08      	bgt.n	8013a8a <__ulp+0x26>
 8013a78:	425b      	negs	r3, r3
 8013a7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013a7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013a82:	da04      	bge.n	8013a8e <__ulp+0x2a>
 8013a84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013a88:	4113      	asrs	r3, r2
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	e008      	b.n	8013aa0 <__ulp+0x3c>
 8013a8e:	f1a2 0314 	sub.w	r3, r2, #20
 8013a92:	2b1e      	cmp	r3, #30
 8013a94:	bfda      	itte	le
 8013a96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013a9a:	40da      	lsrle	r2, r3
 8013a9c:	2201      	movgt	r2, #1
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	4619      	mov	r1, r3
 8013aa2:	4610      	mov	r0, r2
 8013aa4:	ec41 0b10 	vmov	d0, r0, r1
 8013aa8:	b002      	add	sp, #8
 8013aaa:	4770      	bx	lr
 8013aac:	7ff00000 	.word	0x7ff00000

08013ab0 <__b2d>:
 8013ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ab4:	6906      	ldr	r6, [r0, #16]
 8013ab6:	f100 0814 	add.w	r8, r0, #20
 8013aba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013abe:	1f37      	subs	r7, r6, #4
 8013ac0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013ac4:	4610      	mov	r0, r2
 8013ac6:	f7ff fd4b 	bl	8013560 <__hi0bits>
 8013aca:	f1c0 0320 	rsb	r3, r0, #32
 8013ace:	280a      	cmp	r0, #10
 8013ad0:	600b      	str	r3, [r1, #0]
 8013ad2:	491b      	ldr	r1, [pc, #108]	@ (8013b40 <__b2d+0x90>)
 8013ad4:	dc15      	bgt.n	8013b02 <__b2d+0x52>
 8013ad6:	f1c0 0c0b 	rsb	ip, r0, #11
 8013ada:	fa22 f30c 	lsr.w	r3, r2, ip
 8013ade:	45b8      	cmp	r8, r7
 8013ae0:	ea43 0501 	orr.w	r5, r3, r1
 8013ae4:	bf34      	ite	cc
 8013ae6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013aea:	2300      	movcs	r3, #0
 8013aec:	3015      	adds	r0, #21
 8013aee:	fa02 f000 	lsl.w	r0, r2, r0
 8013af2:	fa23 f30c 	lsr.w	r3, r3, ip
 8013af6:	4303      	orrs	r3, r0
 8013af8:	461c      	mov	r4, r3
 8013afa:	ec45 4b10 	vmov	d0, r4, r5
 8013afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b02:	45b8      	cmp	r8, r7
 8013b04:	bf3a      	itte	cc
 8013b06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013b0a:	f1a6 0708 	subcc.w	r7, r6, #8
 8013b0e:	2300      	movcs	r3, #0
 8013b10:	380b      	subs	r0, #11
 8013b12:	d012      	beq.n	8013b3a <__b2d+0x8a>
 8013b14:	f1c0 0120 	rsb	r1, r0, #32
 8013b18:	fa23 f401 	lsr.w	r4, r3, r1
 8013b1c:	4082      	lsls	r2, r0
 8013b1e:	4322      	orrs	r2, r4
 8013b20:	4547      	cmp	r7, r8
 8013b22:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013b26:	bf8c      	ite	hi
 8013b28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013b2c:	2200      	movls	r2, #0
 8013b2e:	4083      	lsls	r3, r0
 8013b30:	40ca      	lsrs	r2, r1
 8013b32:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013b36:	4313      	orrs	r3, r2
 8013b38:	e7de      	b.n	8013af8 <__b2d+0x48>
 8013b3a:	ea42 0501 	orr.w	r5, r2, r1
 8013b3e:	e7db      	b.n	8013af8 <__b2d+0x48>
 8013b40:	3ff00000 	.word	0x3ff00000

08013b44 <__d2b>:
 8013b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013b48:	460f      	mov	r7, r1
 8013b4a:	2101      	movs	r1, #1
 8013b4c:	ec59 8b10 	vmov	r8, r9, d0
 8013b50:	4616      	mov	r6, r2
 8013b52:	f7ff fc13 	bl	801337c <_Balloc>
 8013b56:	4604      	mov	r4, r0
 8013b58:	b930      	cbnz	r0, 8013b68 <__d2b+0x24>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	4b23      	ldr	r3, [pc, #140]	@ (8013bec <__d2b+0xa8>)
 8013b5e:	4824      	ldr	r0, [pc, #144]	@ (8013bf0 <__d2b+0xac>)
 8013b60:	f240 310f 	movw	r1, #783	@ 0x30f
 8013b64:	f000 fe42 	bl	80147ec <__assert_func>
 8013b68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013b6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b70:	b10d      	cbz	r5, 8013b76 <__d2b+0x32>
 8013b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013b76:	9301      	str	r3, [sp, #4]
 8013b78:	f1b8 0300 	subs.w	r3, r8, #0
 8013b7c:	d023      	beq.n	8013bc6 <__d2b+0x82>
 8013b7e:	4668      	mov	r0, sp
 8013b80:	9300      	str	r3, [sp, #0]
 8013b82:	f7ff fd0c 	bl	801359e <__lo0bits>
 8013b86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013b8a:	b1d0      	cbz	r0, 8013bc2 <__d2b+0x7e>
 8013b8c:	f1c0 0320 	rsb	r3, r0, #32
 8013b90:	fa02 f303 	lsl.w	r3, r2, r3
 8013b94:	430b      	orrs	r3, r1
 8013b96:	40c2      	lsrs	r2, r0
 8013b98:	6163      	str	r3, [r4, #20]
 8013b9a:	9201      	str	r2, [sp, #4]
 8013b9c:	9b01      	ldr	r3, [sp, #4]
 8013b9e:	61a3      	str	r3, [r4, #24]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	bf0c      	ite	eq
 8013ba4:	2201      	moveq	r2, #1
 8013ba6:	2202      	movne	r2, #2
 8013ba8:	6122      	str	r2, [r4, #16]
 8013baa:	b1a5      	cbz	r5, 8013bd6 <__d2b+0x92>
 8013bac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013bb0:	4405      	add	r5, r0
 8013bb2:	603d      	str	r5, [r7, #0]
 8013bb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013bb8:	6030      	str	r0, [r6, #0]
 8013bba:	4620      	mov	r0, r4
 8013bbc:	b003      	add	sp, #12
 8013bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bc2:	6161      	str	r1, [r4, #20]
 8013bc4:	e7ea      	b.n	8013b9c <__d2b+0x58>
 8013bc6:	a801      	add	r0, sp, #4
 8013bc8:	f7ff fce9 	bl	801359e <__lo0bits>
 8013bcc:	9b01      	ldr	r3, [sp, #4]
 8013bce:	6163      	str	r3, [r4, #20]
 8013bd0:	3020      	adds	r0, #32
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	e7e8      	b.n	8013ba8 <__d2b+0x64>
 8013bd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013bda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013bde:	6038      	str	r0, [r7, #0]
 8013be0:	6918      	ldr	r0, [r3, #16]
 8013be2:	f7ff fcbd 	bl	8013560 <__hi0bits>
 8013be6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013bea:	e7e5      	b.n	8013bb8 <__d2b+0x74>
 8013bec:	08014de9 	.word	0x08014de9
 8013bf0:	08014e71 	.word	0x08014e71

08013bf4 <__ratio>:
 8013bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf8:	b085      	sub	sp, #20
 8013bfa:	e9cd 1000 	strd	r1, r0, [sp]
 8013bfe:	a902      	add	r1, sp, #8
 8013c00:	f7ff ff56 	bl	8013ab0 <__b2d>
 8013c04:	9800      	ldr	r0, [sp, #0]
 8013c06:	a903      	add	r1, sp, #12
 8013c08:	ec55 4b10 	vmov	r4, r5, d0
 8013c0c:	f7ff ff50 	bl	8013ab0 <__b2d>
 8013c10:	9b01      	ldr	r3, [sp, #4]
 8013c12:	6919      	ldr	r1, [r3, #16]
 8013c14:	9b00      	ldr	r3, [sp, #0]
 8013c16:	691b      	ldr	r3, [r3, #16]
 8013c18:	1ac9      	subs	r1, r1, r3
 8013c1a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013c1e:	1a9b      	subs	r3, r3, r2
 8013c20:	ec5b ab10 	vmov	sl, fp, d0
 8013c24:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	bfce      	itee	gt
 8013c2c:	462a      	movgt	r2, r5
 8013c2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013c32:	465a      	movle	r2, fp
 8013c34:	462f      	mov	r7, r5
 8013c36:	46d9      	mov	r9, fp
 8013c38:	bfcc      	ite	gt
 8013c3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013c3e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013c42:	464b      	mov	r3, r9
 8013c44:	4652      	mov	r2, sl
 8013c46:	4620      	mov	r0, r4
 8013c48:	4639      	mov	r1, r7
 8013c4a:	f7ec fe2f 	bl	80008ac <__aeabi_ddiv>
 8013c4e:	ec41 0b10 	vmov	d0, r0, r1
 8013c52:	b005      	add	sp, #20
 8013c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c58 <__copybits>:
 8013c58:	3901      	subs	r1, #1
 8013c5a:	b570      	push	{r4, r5, r6, lr}
 8013c5c:	1149      	asrs	r1, r1, #5
 8013c5e:	6914      	ldr	r4, [r2, #16]
 8013c60:	3101      	adds	r1, #1
 8013c62:	f102 0314 	add.w	r3, r2, #20
 8013c66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013c6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013c6e:	1f05      	subs	r5, r0, #4
 8013c70:	42a3      	cmp	r3, r4
 8013c72:	d30c      	bcc.n	8013c8e <__copybits+0x36>
 8013c74:	1aa3      	subs	r3, r4, r2
 8013c76:	3b11      	subs	r3, #17
 8013c78:	f023 0303 	bic.w	r3, r3, #3
 8013c7c:	3211      	adds	r2, #17
 8013c7e:	42a2      	cmp	r2, r4
 8013c80:	bf88      	it	hi
 8013c82:	2300      	movhi	r3, #0
 8013c84:	4418      	add	r0, r3
 8013c86:	2300      	movs	r3, #0
 8013c88:	4288      	cmp	r0, r1
 8013c8a:	d305      	bcc.n	8013c98 <__copybits+0x40>
 8013c8c:	bd70      	pop	{r4, r5, r6, pc}
 8013c8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8013c92:	f845 6f04 	str.w	r6, [r5, #4]!
 8013c96:	e7eb      	b.n	8013c70 <__copybits+0x18>
 8013c98:	f840 3b04 	str.w	r3, [r0], #4
 8013c9c:	e7f4      	b.n	8013c88 <__copybits+0x30>

08013c9e <__any_on>:
 8013c9e:	f100 0214 	add.w	r2, r0, #20
 8013ca2:	6900      	ldr	r0, [r0, #16]
 8013ca4:	114b      	asrs	r3, r1, #5
 8013ca6:	4298      	cmp	r0, r3
 8013ca8:	b510      	push	{r4, lr}
 8013caa:	db11      	blt.n	8013cd0 <__any_on+0x32>
 8013cac:	dd0a      	ble.n	8013cc4 <__any_on+0x26>
 8013cae:	f011 011f 	ands.w	r1, r1, #31
 8013cb2:	d007      	beq.n	8013cc4 <__any_on+0x26>
 8013cb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013cb8:	fa24 f001 	lsr.w	r0, r4, r1
 8013cbc:	fa00 f101 	lsl.w	r1, r0, r1
 8013cc0:	428c      	cmp	r4, r1
 8013cc2:	d10b      	bne.n	8013cdc <__any_on+0x3e>
 8013cc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013cc8:	4293      	cmp	r3, r2
 8013cca:	d803      	bhi.n	8013cd4 <__any_on+0x36>
 8013ccc:	2000      	movs	r0, #0
 8013cce:	bd10      	pop	{r4, pc}
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	e7f7      	b.n	8013cc4 <__any_on+0x26>
 8013cd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013cd8:	2900      	cmp	r1, #0
 8013cda:	d0f5      	beq.n	8013cc8 <__any_on+0x2a>
 8013cdc:	2001      	movs	r0, #1
 8013cde:	e7f6      	b.n	8013cce <__any_on+0x30>

08013ce0 <_malloc_usable_size_r>:
 8013ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ce4:	1f18      	subs	r0, r3, #4
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	bfbc      	itt	lt
 8013cea:	580b      	ldrlt	r3, [r1, r0]
 8013cec:	18c0      	addlt	r0, r0, r3
 8013cee:	4770      	bx	lr

08013cf0 <__ascii_wctomb>:
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	4608      	mov	r0, r1
 8013cf4:	b141      	cbz	r1, 8013d08 <__ascii_wctomb+0x18>
 8013cf6:	2aff      	cmp	r2, #255	@ 0xff
 8013cf8:	d904      	bls.n	8013d04 <__ascii_wctomb+0x14>
 8013cfa:	228a      	movs	r2, #138	@ 0x8a
 8013cfc:	601a      	str	r2, [r3, #0]
 8013cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8013d02:	4770      	bx	lr
 8013d04:	700a      	strb	r2, [r1, #0]
 8013d06:	2001      	movs	r0, #1
 8013d08:	4770      	bx	lr

08013d0a <__ssputs_r>:
 8013d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d0e:	688e      	ldr	r6, [r1, #8]
 8013d10:	461f      	mov	r7, r3
 8013d12:	42be      	cmp	r6, r7
 8013d14:	680b      	ldr	r3, [r1, #0]
 8013d16:	4682      	mov	sl, r0
 8013d18:	460c      	mov	r4, r1
 8013d1a:	4690      	mov	r8, r2
 8013d1c:	d82d      	bhi.n	8013d7a <__ssputs_r+0x70>
 8013d1e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d22:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013d26:	d026      	beq.n	8013d76 <__ssputs_r+0x6c>
 8013d28:	6965      	ldr	r5, [r4, #20]
 8013d2a:	6909      	ldr	r1, [r1, #16]
 8013d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d30:	eba3 0901 	sub.w	r9, r3, r1
 8013d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d38:	1c7b      	adds	r3, r7, #1
 8013d3a:	444b      	add	r3, r9
 8013d3c:	106d      	asrs	r5, r5, #1
 8013d3e:	429d      	cmp	r5, r3
 8013d40:	bf38      	it	cc
 8013d42:	461d      	movcc	r5, r3
 8013d44:	0553      	lsls	r3, r2, #21
 8013d46:	d527      	bpl.n	8013d98 <__ssputs_r+0x8e>
 8013d48:	4629      	mov	r1, r5
 8013d4a:	f7fd fd67 	bl	801181c <_malloc_r>
 8013d4e:	4606      	mov	r6, r0
 8013d50:	b360      	cbz	r0, 8013dac <__ssputs_r+0xa2>
 8013d52:	6921      	ldr	r1, [r4, #16]
 8013d54:	464a      	mov	r2, r9
 8013d56:	f7fe ff64 	bl	8012c22 <memcpy>
 8013d5a:	89a3      	ldrh	r3, [r4, #12]
 8013d5c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d64:	81a3      	strh	r3, [r4, #12]
 8013d66:	6126      	str	r6, [r4, #16]
 8013d68:	6165      	str	r5, [r4, #20]
 8013d6a:	444e      	add	r6, r9
 8013d6c:	eba5 0509 	sub.w	r5, r5, r9
 8013d70:	6026      	str	r6, [r4, #0]
 8013d72:	60a5      	str	r5, [r4, #8]
 8013d74:	463e      	mov	r6, r7
 8013d76:	42be      	cmp	r6, r7
 8013d78:	d900      	bls.n	8013d7c <__ssputs_r+0x72>
 8013d7a:	463e      	mov	r6, r7
 8013d7c:	6820      	ldr	r0, [r4, #0]
 8013d7e:	4632      	mov	r2, r6
 8013d80:	4641      	mov	r1, r8
 8013d82:	f000 fcf7 	bl	8014774 <memmove>
 8013d86:	68a3      	ldr	r3, [r4, #8]
 8013d88:	1b9b      	subs	r3, r3, r6
 8013d8a:	60a3      	str	r3, [r4, #8]
 8013d8c:	6823      	ldr	r3, [r4, #0]
 8013d8e:	4433      	add	r3, r6
 8013d90:	6023      	str	r3, [r4, #0]
 8013d92:	2000      	movs	r0, #0
 8013d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d98:	462a      	mov	r2, r5
 8013d9a:	f7fd fdd3 	bl	8011944 <_realloc_r>
 8013d9e:	4606      	mov	r6, r0
 8013da0:	2800      	cmp	r0, #0
 8013da2:	d1e0      	bne.n	8013d66 <__ssputs_r+0x5c>
 8013da4:	6921      	ldr	r1, [r4, #16]
 8013da6:	4650      	mov	r0, sl
 8013da8:	f7fe ff52 	bl	8012c50 <_free_r>
 8013dac:	230c      	movs	r3, #12
 8013dae:	f8ca 3000 	str.w	r3, [sl]
 8013db2:	89a3      	ldrh	r3, [r4, #12]
 8013db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013db8:	81a3      	strh	r3, [r4, #12]
 8013dba:	f04f 30ff 	mov.w	r0, #4294967295
 8013dbe:	e7e9      	b.n	8013d94 <__ssputs_r+0x8a>

08013dc0 <_svfiprintf_r>:
 8013dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc4:	4698      	mov	r8, r3
 8013dc6:	898b      	ldrh	r3, [r1, #12]
 8013dc8:	061b      	lsls	r3, r3, #24
 8013dca:	b09d      	sub	sp, #116	@ 0x74
 8013dcc:	4607      	mov	r7, r0
 8013dce:	460d      	mov	r5, r1
 8013dd0:	4614      	mov	r4, r2
 8013dd2:	d510      	bpl.n	8013df6 <_svfiprintf_r+0x36>
 8013dd4:	690b      	ldr	r3, [r1, #16]
 8013dd6:	b973      	cbnz	r3, 8013df6 <_svfiprintf_r+0x36>
 8013dd8:	2140      	movs	r1, #64	@ 0x40
 8013dda:	f7fd fd1f 	bl	801181c <_malloc_r>
 8013dde:	6028      	str	r0, [r5, #0]
 8013de0:	6128      	str	r0, [r5, #16]
 8013de2:	b930      	cbnz	r0, 8013df2 <_svfiprintf_r+0x32>
 8013de4:	230c      	movs	r3, #12
 8013de6:	603b      	str	r3, [r7, #0]
 8013de8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dec:	b01d      	add	sp, #116	@ 0x74
 8013dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013df2:	2340      	movs	r3, #64	@ 0x40
 8013df4:	616b      	str	r3, [r5, #20]
 8013df6:	2300      	movs	r3, #0
 8013df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013dfa:	2320      	movs	r3, #32
 8013dfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e04:	2330      	movs	r3, #48	@ 0x30
 8013e06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013fa4 <_svfiprintf_r+0x1e4>
 8013e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e0e:	f04f 0901 	mov.w	r9, #1
 8013e12:	4623      	mov	r3, r4
 8013e14:	469a      	mov	sl, r3
 8013e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e1a:	b10a      	cbz	r2, 8013e20 <_svfiprintf_r+0x60>
 8013e1c:	2a25      	cmp	r2, #37	@ 0x25
 8013e1e:	d1f9      	bne.n	8013e14 <_svfiprintf_r+0x54>
 8013e20:	ebba 0b04 	subs.w	fp, sl, r4
 8013e24:	d00b      	beq.n	8013e3e <_svfiprintf_r+0x7e>
 8013e26:	465b      	mov	r3, fp
 8013e28:	4622      	mov	r2, r4
 8013e2a:	4629      	mov	r1, r5
 8013e2c:	4638      	mov	r0, r7
 8013e2e:	f7ff ff6c 	bl	8013d0a <__ssputs_r>
 8013e32:	3001      	adds	r0, #1
 8013e34:	f000 80a7 	beq.w	8013f86 <_svfiprintf_r+0x1c6>
 8013e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e3a:	445a      	add	r2, fp
 8013e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	f000 809f 	beq.w	8013f86 <_svfiprintf_r+0x1c6>
 8013e48:	2300      	movs	r3, #0
 8013e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e52:	f10a 0a01 	add.w	sl, sl, #1
 8013e56:	9304      	str	r3, [sp, #16]
 8013e58:	9307      	str	r3, [sp, #28]
 8013e5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e60:	4654      	mov	r4, sl
 8013e62:	2205      	movs	r2, #5
 8013e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e68:	484e      	ldr	r0, [pc, #312]	@ (8013fa4 <_svfiprintf_r+0x1e4>)
 8013e6a:	f7ec f9e9 	bl	8000240 <memchr>
 8013e6e:	9a04      	ldr	r2, [sp, #16]
 8013e70:	b9d8      	cbnz	r0, 8013eaa <_svfiprintf_r+0xea>
 8013e72:	06d0      	lsls	r0, r2, #27
 8013e74:	bf44      	itt	mi
 8013e76:	2320      	movmi	r3, #32
 8013e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e7c:	0711      	lsls	r1, r2, #28
 8013e7e:	bf44      	itt	mi
 8013e80:	232b      	movmi	r3, #43	@ 0x2b
 8013e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e86:	f89a 3000 	ldrb.w	r3, [sl]
 8013e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e8c:	d015      	beq.n	8013eba <_svfiprintf_r+0xfa>
 8013e8e:	9a07      	ldr	r2, [sp, #28]
 8013e90:	4654      	mov	r4, sl
 8013e92:	2000      	movs	r0, #0
 8013e94:	f04f 0c0a 	mov.w	ip, #10
 8013e98:	4621      	mov	r1, r4
 8013e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e9e:	3b30      	subs	r3, #48	@ 0x30
 8013ea0:	2b09      	cmp	r3, #9
 8013ea2:	d94b      	bls.n	8013f3c <_svfiprintf_r+0x17c>
 8013ea4:	b1b0      	cbz	r0, 8013ed4 <_svfiprintf_r+0x114>
 8013ea6:	9207      	str	r2, [sp, #28]
 8013ea8:	e014      	b.n	8013ed4 <_svfiprintf_r+0x114>
 8013eaa:	eba0 0308 	sub.w	r3, r0, r8
 8013eae:	fa09 f303 	lsl.w	r3, r9, r3
 8013eb2:	4313      	orrs	r3, r2
 8013eb4:	9304      	str	r3, [sp, #16]
 8013eb6:	46a2      	mov	sl, r4
 8013eb8:	e7d2      	b.n	8013e60 <_svfiprintf_r+0xa0>
 8013eba:	9b03      	ldr	r3, [sp, #12]
 8013ebc:	1d19      	adds	r1, r3, #4
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	9103      	str	r1, [sp, #12]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	bfbb      	ittet	lt
 8013ec6:	425b      	neglt	r3, r3
 8013ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8013ecc:	9307      	strge	r3, [sp, #28]
 8013ece:	9307      	strlt	r3, [sp, #28]
 8013ed0:	bfb8      	it	lt
 8013ed2:	9204      	strlt	r2, [sp, #16]
 8013ed4:	7823      	ldrb	r3, [r4, #0]
 8013ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ed8:	d10a      	bne.n	8013ef0 <_svfiprintf_r+0x130>
 8013eda:	7863      	ldrb	r3, [r4, #1]
 8013edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ede:	d132      	bne.n	8013f46 <_svfiprintf_r+0x186>
 8013ee0:	9b03      	ldr	r3, [sp, #12]
 8013ee2:	1d1a      	adds	r2, r3, #4
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	9203      	str	r2, [sp, #12]
 8013ee8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013eec:	3402      	adds	r4, #2
 8013eee:	9305      	str	r3, [sp, #20]
 8013ef0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013fb4 <_svfiprintf_r+0x1f4>
 8013ef4:	7821      	ldrb	r1, [r4, #0]
 8013ef6:	2203      	movs	r2, #3
 8013ef8:	4650      	mov	r0, sl
 8013efa:	f7ec f9a1 	bl	8000240 <memchr>
 8013efe:	b138      	cbz	r0, 8013f10 <_svfiprintf_r+0x150>
 8013f00:	9b04      	ldr	r3, [sp, #16]
 8013f02:	eba0 000a 	sub.w	r0, r0, sl
 8013f06:	2240      	movs	r2, #64	@ 0x40
 8013f08:	4082      	lsls	r2, r0
 8013f0a:	4313      	orrs	r3, r2
 8013f0c:	3401      	adds	r4, #1
 8013f0e:	9304      	str	r3, [sp, #16]
 8013f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f14:	4824      	ldr	r0, [pc, #144]	@ (8013fa8 <_svfiprintf_r+0x1e8>)
 8013f16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f1a:	2206      	movs	r2, #6
 8013f1c:	f7ec f990 	bl	8000240 <memchr>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	d036      	beq.n	8013f92 <_svfiprintf_r+0x1d2>
 8013f24:	4b21      	ldr	r3, [pc, #132]	@ (8013fac <_svfiprintf_r+0x1ec>)
 8013f26:	bb1b      	cbnz	r3, 8013f70 <_svfiprintf_r+0x1b0>
 8013f28:	9b03      	ldr	r3, [sp, #12]
 8013f2a:	3307      	adds	r3, #7
 8013f2c:	f023 0307 	bic.w	r3, r3, #7
 8013f30:	3308      	adds	r3, #8
 8013f32:	9303      	str	r3, [sp, #12]
 8013f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f36:	4433      	add	r3, r6
 8013f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f3a:	e76a      	b.n	8013e12 <_svfiprintf_r+0x52>
 8013f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f40:	460c      	mov	r4, r1
 8013f42:	2001      	movs	r0, #1
 8013f44:	e7a8      	b.n	8013e98 <_svfiprintf_r+0xd8>
 8013f46:	2300      	movs	r3, #0
 8013f48:	3401      	adds	r4, #1
 8013f4a:	9305      	str	r3, [sp, #20]
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	f04f 0c0a 	mov.w	ip, #10
 8013f52:	4620      	mov	r0, r4
 8013f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f58:	3a30      	subs	r2, #48	@ 0x30
 8013f5a:	2a09      	cmp	r2, #9
 8013f5c:	d903      	bls.n	8013f66 <_svfiprintf_r+0x1a6>
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d0c6      	beq.n	8013ef0 <_svfiprintf_r+0x130>
 8013f62:	9105      	str	r1, [sp, #20]
 8013f64:	e7c4      	b.n	8013ef0 <_svfiprintf_r+0x130>
 8013f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	e7f0      	b.n	8013f52 <_svfiprintf_r+0x192>
 8013f70:	ab03      	add	r3, sp, #12
 8013f72:	9300      	str	r3, [sp, #0]
 8013f74:	462a      	mov	r2, r5
 8013f76:	4b0e      	ldr	r3, [pc, #56]	@ (8013fb0 <_svfiprintf_r+0x1f0>)
 8013f78:	a904      	add	r1, sp, #16
 8013f7a:	4638      	mov	r0, r7
 8013f7c:	f3af 8000 	nop.w
 8013f80:	1c42      	adds	r2, r0, #1
 8013f82:	4606      	mov	r6, r0
 8013f84:	d1d6      	bne.n	8013f34 <_svfiprintf_r+0x174>
 8013f86:	89ab      	ldrh	r3, [r5, #12]
 8013f88:	065b      	lsls	r3, r3, #25
 8013f8a:	f53f af2d 	bmi.w	8013de8 <_svfiprintf_r+0x28>
 8013f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f90:	e72c      	b.n	8013dec <_svfiprintf_r+0x2c>
 8013f92:	ab03      	add	r3, sp, #12
 8013f94:	9300      	str	r3, [sp, #0]
 8013f96:	462a      	mov	r2, r5
 8013f98:	4b05      	ldr	r3, [pc, #20]	@ (8013fb0 <_svfiprintf_r+0x1f0>)
 8013f9a:	a904      	add	r1, sp, #16
 8013f9c:	4638      	mov	r0, r7
 8013f9e:	f000 f9bb 	bl	8014318 <_printf_i>
 8013fa2:	e7ed      	b.n	8013f80 <_svfiprintf_r+0x1c0>
 8013fa4:	08014fc8 	.word	0x08014fc8
 8013fa8:	08014fd2 	.word	0x08014fd2
 8013fac:	00000000 	.word	0x00000000
 8013fb0:	08013d0b 	.word	0x08013d0b
 8013fb4:	08014fce 	.word	0x08014fce

08013fb8 <__sfputc_r>:
 8013fb8:	6893      	ldr	r3, [r2, #8]
 8013fba:	3b01      	subs	r3, #1
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	b410      	push	{r4}
 8013fc0:	6093      	str	r3, [r2, #8]
 8013fc2:	da08      	bge.n	8013fd6 <__sfputc_r+0x1e>
 8013fc4:	6994      	ldr	r4, [r2, #24]
 8013fc6:	42a3      	cmp	r3, r4
 8013fc8:	db01      	blt.n	8013fce <__sfputc_r+0x16>
 8013fca:	290a      	cmp	r1, #10
 8013fcc:	d103      	bne.n	8013fd6 <__sfputc_r+0x1e>
 8013fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fd2:	f7fe bc9e 	b.w	8012912 <__swbuf_r>
 8013fd6:	6813      	ldr	r3, [r2, #0]
 8013fd8:	1c58      	adds	r0, r3, #1
 8013fda:	6010      	str	r0, [r2, #0]
 8013fdc:	7019      	strb	r1, [r3, #0]
 8013fde:	4608      	mov	r0, r1
 8013fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fe4:	4770      	bx	lr

08013fe6 <__sfputs_r>:
 8013fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fe8:	4606      	mov	r6, r0
 8013fea:	460f      	mov	r7, r1
 8013fec:	4614      	mov	r4, r2
 8013fee:	18d5      	adds	r5, r2, r3
 8013ff0:	42ac      	cmp	r4, r5
 8013ff2:	d101      	bne.n	8013ff8 <__sfputs_r+0x12>
 8013ff4:	2000      	movs	r0, #0
 8013ff6:	e007      	b.n	8014008 <__sfputs_r+0x22>
 8013ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ffc:	463a      	mov	r2, r7
 8013ffe:	4630      	mov	r0, r6
 8014000:	f7ff ffda 	bl	8013fb8 <__sfputc_r>
 8014004:	1c43      	adds	r3, r0, #1
 8014006:	d1f3      	bne.n	8013ff0 <__sfputs_r+0xa>
 8014008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801400c <_vfiprintf_r>:
 801400c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014010:	460d      	mov	r5, r1
 8014012:	b09d      	sub	sp, #116	@ 0x74
 8014014:	4614      	mov	r4, r2
 8014016:	4698      	mov	r8, r3
 8014018:	4606      	mov	r6, r0
 801401a:	b118      	cbz	r0, 8014024 <_vfiprintf_r+0x18>
 801401c:	6a03      	ldr	r3, [r0, #32]
 801401e:	b90b      	cbnz	r3, 8014024 <_vfiprintf_r+0x18>
 8014020:	f7fe fb5a 	bl	80126d8 <__sinit>
 8014024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014026:	07d9      	lsls	r1, r3, #31
 8014028:	d405      	bmi.n	8014036 <_vfiprintf_r+0x2a>
 801402a:	89ab      	ldrh	r3, [r5, #12]
 801402c:	059a      	lsls	r2, r3, #22
 801402e:	d402      	bmi.n	8014036 <_vfiprintf_r+0x2a>
 8014030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014032:	f7fe fdf4 	bl	8012c1e <__retarget_lock_acquire_recursive>
 8014036:	89ab      	ldrh	r3, [r5, #12]
 8014038:	071b      	lsls	r3, r3, #28
 801403a:	d501      	bpl.n	8014040 <_vfiprintf_r+0x34>
 801403c:	692b      	ldr	r3, [r5, #16]
 801403e:	b99b      	cbnz	r3, 8014068 <_vfiprintf_r+0x5c>
 8014040:	4629      	mov	r1, r5
 8014042:	4630      	mov	r0, r6
 8014044:	f7fe fca4 	bl	8012990 <__swsetup_r>
 8014048:	b170      	cbz	r0, 8014068 <_vfiprintf_r+0x5c>
 801404a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801404c:	07dc      	lsls	r4, r3, #31
 801404e:	d504      	bpl.n	801405a <_vfiprintf_r+0x4e>
 8014050:	f04f 30ff 	mov.w	r0, #4294967295
 8014054:	b01d      	add	sp, #116	@ 0x74
 8014056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801405a:	89ab      	ldrh	r3, [r5, #12]
 801405c:	0598      	lsls	r0, r3, #22
 801405e:	d4f7      	bmi.n	8014050 <_vfiprintf_r+0x44>
 8014060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014062:	f7fe fddd 	bl	8012c20 <__retarget_lock_release_recursive>
 8014066:	e7f3      	b.n	8014050 <_vfiprintf_r+0x44>
 8014068:	2300      	movs	r3, #0
 801406a:	9309      	str	r3, [sp, #36]	@ 0x24
 801406c:	2320      	movs	r3, #32
 801406e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014072:	f8cd 800c 	str.w	r8, [sp, #12]
 8014076:	2330      	movs	r3, #48	@ 0x30
 8014078:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014228 <_vfiprintf_r+0x21c>
 801407c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014080:	f04f 0901 	mov.w	r9, #1
 8014084:	4623      	mov	r3, r4
 8014086:	469a      	mov	sl, r3
 8014088:	f813 2b01 	ldrb.w	r2, [r3], #1
 801408c:	b10a      	cbz	r2, 8014092 <_vfiprintf_r+0x86>
 801408e:	2a25      	cmp	r2, #37	@ 0x25
 8014090:	d1f9      	bne.n	8014086 <_vfiprintf_r+0x7a>
 8014092:	ebba 0b04 	subs.w	fp, sl, r4
 8014096:	d00b      	beq.n	80140b0 <_vfiprintf_r+0xa4>
 8014098:	465b      	mov	r3, fp
 801409a:	4622      	mov	r2, r4
 801409c:	4629      	mov	r1, r5
 801409e:	4630      	mov	r0, r6
 80140a0:	f7ff ffa1 	bl	8013fe6 <__sfputs_r>
 80140a4:	3001      	adds	r0, #1
 80140a6:	f000 80a7 	beq.w	80141f8 <_vfiprintf_r+0x1ec>
 80140aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140ac:	445a      	add	r2, fp
 80140ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80140b0:	f89a 3000 	ldrb.w	r3, [sl]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f000 809f 	beq.w	80141f8 <_vfiprintf_r+0x1ec>
 80140ba:	2300      	movs	r3, #0
 80140bc:	f04f 32ff 	mov.w	r2, #4294967295
 80140c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140c4:	f10a 0a01 	add.w	sl, sl, #1
 80140c8:	9304      	str	r3, [sp, #16]
 80140ca:	9307      	str	r3, [sp, #28]
 80140cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80140d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80140d2:	4654      	mov	r4, sl
 80140d4:	2205      	movs	r2, #5
 80140d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140da:	4853      	ldr	r0, [pc, #332]	@ (8014228 <_vfiprintf_r+0x21c>)
 80140dc:	f7ec f8b0 	bl	8000240 <memchr>
 80140e0:	9a04      	ldr	r2, [sp, #16]
 80140e2:	b9d8      	cbnz	r0, 801411c <_vfiprintf_r+0x110>
 80140e4:	06d1      	lsls	r1, r2, #27
 80140e6:	bf44      	itt	mi
 80140e8:	2320      	movmi	r3, #32
 80140ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140ee:	0713      	lsls	r3, r2, #28
 80140f0:	bf44      	itt	mi
 80140f2:	232b      	movmi	r3, #43	@ 0x2b
 80140f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140f8:	f89a 3000 	ldrb.w	r3, [sl]
 80140fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80140fe:	d015      	beq.n	801412c <_vfiprintf_r+0x120>
 8014100:	9a07      	ldr	r2, [sp, #28]
 8014102:	4654      	mov	r4, sl
 8014104:	2000      	movs	r0, #0
 8014106:	f04f 0c0a 	mov.w	ip, #10
 801410a:	4621      	mov	r1, r4
 801410c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014110:	3b30      	subs	r3, #48	@ 0x30
 8014112:	2b09      	cmp	r3, #9
 8014114:	d94b      	bls.n	80141ae <_vfiprintf_r+0x1a2>
 8014116:	b1b0      	cbz	r0, 8014146 <_vfiprintf_r+0x13a>
 8014118:	9207      	str	r2, [sp, #28]
 801411a:	e014      	b.n	8014146 <_vfiprintf_r+0x13a>
 801411c:	eba0 0308 	sub.w	r3, r0, r8
 8014120:	fa09 f303 	lsl.w	r3, r9, r3
 8014124:	4313      	orrs	r3, r2
 8014126:	9304      	str	r3, [sp, #16]
 8014128:	46a2      	mov	sl, r4
 801412a:	e7d2      	b.n	80140d2 <_vfiprintf_r+0xc6>
 801412c:	9b03      	ldr	r3, [sp, #12]
 801412e:	1d19      	adds	r1, r3, #4
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	9103      	str	r1, [sp, #12]
 8014134:	2b00      	cmp	r3, #0
 8014136:	bfbb      	ittet	lt
 8014138:	425b      	neglt	r3, r3
 801413a:	f042 0202 	orrlt.w	r2, r2, #2
 801413e:	9307      	strge	r3, [sp, #28]
 8014140:	9307      	strlt	r3, [sp, #28]
 8014142:	bfb8      	it	lt
 8014144:	9204      	strlt	r2, [sp, #16]
 8014146:	7823      	ldrb	r3, [r4, #0]
 8014148:	2b2e      	cmp	r3, #46	@ 0x2e
 801414a:	d10a      	bne.n	8014162 <_vfiprintf_r+0x156>
 801414c:	7863      	ldrb	r3, [r4, #1]
 801414e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014150:	d132      	bne.n	80141b8 <_vfiprintf_r+0x1ac>
 8014152:	9b03      	ldr	r3, [sp, #12]
 8014154:	1d1a      	adds	r2, r3, #4
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	9203      	str	r2, [sp, #12]
 801415a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801415e:	3402      	adds	r4, #2
 8014160:	9305      	str	r3, [sp, #20]
 8014162:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014238 <_vfiprintf_r+0x22c>
 8014166:	7821      	ldrb	r1, [r4, #0]
 8014168:	2203      	movs	r2, #3
 801416a:	4650      	mov	r0, sl
 801416c:	f7ec f868 	bl	8000240 <memchr>
 8014170:	b138      	cbz	r0, 8014182 <_vfiprintf_r+0x176>
 8014172:	9b04      	ldr	r3, [sp, #16]
 8014174:	eba0 000a 	sub.w	r0, r0, sl
 8014178:	2240      	movs	r2, #64	@ 0x40
 801417a:	4082      	lsls	r2, r0
 801417c:	4313      	orrs	r3, r2
 801417e:	3401      	adds	r4, #1
 8014180:	9304      	str	r3, [sp, #16]
 8014182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014186:	4829      	ldr	r0, [pc, #164]	@ (801422c <_vfiprintf_r+0x220>)
 8014188:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801418c:	2206      	movs	r2, #6
 801418e:	f7ec f857 	bl	8000240 <memchr>
 8014192:	2800      	cmp	r0, #0
 8014194:	d03f      	beq.n	8014216 <_vfiprintf_r+0x20a>
 8014196:	4b26      	ldr	r3, [pc, #152]	@ (8014230 <_vfiprintf_r+0x224>)
 8014198:	bb1b      	cbnz	r3, 80141e2 <_vfiprintf_r+0x1d6>
 801419a:	9b03      	ldr	r3, [sp, #12]
 801419c:	3307      	adds	r3, #7
 801419e:	f023 0307 	bic.w	r3, r3, #7
 80141a2:	3308      	adds	r3, #8
 80141a4:	9303      	str	r3, [sp, #12]
 80141a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a8:	443b      	add	r3, r7
 80141aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80141ac:	e76a      	b.n	8014084 <_vfiprintf_r+0x78>
 80141ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80141b2:	460c      	mov	r4, r1
 80141b4:	2001      	movs	r0, #1
 80141b6:	e7a8      	b.n	801410a <_vfiprintf_r+0xfe>
 80141b8:	2300      	movs	r3, #0
 80141ba:	3401      	adds	r4, #1
 80141bc:	9305      	str	r3, [sp, #20]
 80141be:	4619      	mov	r1, r3
 80141c0:	f04f 0c0a 	mov.w	ip, #10
 80141c4:	4620      	mov	r0, r4
 80141c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141ca:	3a30      	subs	r2, #48	@ 0x30
 80141cc:	2a09      	cmp	r2, #9
 80141ce:	d903      	bls.n	80141d8 <_vfiprintf_r+0x1cc>
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d0c6      	beq.n	8014162 <_vfiprintf_r+0x156>
 80141d4:	9105      	str	r1, [sp, #20]
 80141d6:	e7c4      	b.n	8014162 <_vfiprintf_r+0x156>
 80141d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80141dc:	4604      	mov	r4, r0
 80141de:	2301      	movs	r3, #1
 80141e0:	e7f0      	b.n	80141c4 <_vfiprintf_r+0x1b8>
 80141e2:	ab03      	add	r3, sp, #12
 80141e4:	9300      	str	r3, [sp, #0]
 80141e6:	462a      	mov	r2, r5
 80141e8:	4b12      	ldr	r3, [pc, #72]	@ (8014234 <_vfiprintf_r+0x228>)
 80141ea:	a904      	add	r1, sp, #16
 80141ec:	4630      	mov	r0, r6
 80141ee:	f3af 8000 	nop.w
 80141f2:	4607      	mov	r7, r0
 80141f4:	1c78      	adds	r0, r7, #1
 80141f6:	d1d6      	bne.n	80141a6 <_vfiprintf_r+0x19a>
 80141f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141fa:	07d9      	lsls	r1, r3, #31
 80141fc:	d405      	bmi.n	801420a <_vfiprintf_r+0x1fe>
 80141fe:	89ab      	ldrh	r3, [r5, #12]
 8014200:	059a      	lsls	r2, r3, #22
 8014202:	d402      	bmi.n	801420a <_vfiprintf_r+0x1fe>
 8014204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014206:	f7fe fd0b 	bl	8012c20 <__retarget_lock_release_recursive>
 801420a:	89ab      	ldrh	r3, [r5, #12]
 801420c:	065b      	lsls	r3, r3, #25
 801420e:	f53f af1f 	bmi.w	8014050 <_vfiprintf_r+0x44>
 8014212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014214:	e71e      	b.n	8014054 <_vfiprintf_r+0x48>
 8014216:	ab03      	add	r3, sp, #12
 8014218:	9300      	str	r3, [sp, #0]
 801421a:	462a      	mov	r2, r5
 801421c:	4b05      	ldr	r3, [pc, #20]	@ (8014234 <_vfiprintf_r+0x228>)
 801421e:	a904      	add	r1, sp, #16
 8014220:	4630      	mov	r0, r6
 8014222:	f000 f879 	bl	8014318 <_printf_i>
 8014226:	e7e4      	b.n	80141f2 <_vfiprintf_r+0x1e6>
 8014228:	08014fc8 	.word	0x08014fc8
 801422c:	08014fd2 	.word	0x08014fd2
 8014230:	00000000 	.word	0x00000000
 8014234:	08013fe7 	.word	0x08013fe7
 8014238:	08014fce 	.word	0x08014fce

0801423c <_printf_common>:
 801423c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014240:	4616      	mov	r6, r2
 8014242:	4698      	mov	r8, r3
 8014244:	688a      	ldr	r2, [r1, #8]
 8014246:	690b      	ldr	r3, [r1, #16]
 8014248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801424c:	4293      	cmp	r3, r2
 801424e:	bfb8      	it	lt
 8014250:	4613      	movlt	r3, r2
 8014252:	6033      	str	r3, [r6, #0]
 8014254:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014258:	4607      	mov	r7, r0
 801425a:	460c      	mov	r4, r1
 801425c:	b10a      	cbz	r2, 8014262 <_printf_common+0x26>
 801425e:	3301      	adds	r3, #1
 8014260:	6033      	str	r3, [r6, #0]
 8014262:	6823      	ldr	r3, [r4, #0]
 8014264:	0699      	lsls	r1, r3, #26
 8014266:	bf42      	ittt	mi
 8014268:	6833      	ldrmi	r3, [r6, #0]
 801426a:	3302      	addmi	r3, #2
 801426c:	6033      	strmi	r3, [r6, #0]
 801426e:	6825      	ldr	r5, [r4, #0]
 8014270:	f015 0506 	ands.w	r5, r5, #6
 8014274:	d106      	bne.n	8014284 <_printf_common+0x48>
 8014276:	f104 0a19 	add.w	sl, r4, #25
 801427a:	68e3      	ldr	r3, [r4, #12]
 801427c:	6832      	ldr	r2, [r6, #0]
 801427e:	1a9b      	subs	r3, r3, r2
 8014280:	42ab      	cmp	r3, r5
 8014282:	dc26      	bgt.n	80142d2 <_printf_common+0x96>
 8014284:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014288:	6822      	ldr	r2, [r4, #0]
 801428a:	3b00      	subs	r3, #0
 801428c:	bf18      	it	ne
 801428e:	2301      	movne	r3, #1
 8014290:	0692      	lsls	r2, r2, #26
 8014292:	d42b      	bmi.n	80142ec <_printf_common+0xb0>
 8014294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014298:	4641      	mov	r1, r8
 801429a:	4638      	mov	r0, r7
 801429c:	47c8      	blx	r9
 801429e:	3001      	adds	r0, #1
 80142a0:	d01e      	beq.n	80142e0 <_printf_common+0xa4>
 80142a2:	6823      	ldr	r3, [r4, #0]
 80142a4:	6922      	ldr	r2, [r4, #16]
 80142a6:	f003 0306 	and.w	r3, r3, #6
 80142aa:	2b04      	cmp	r3, #4
 80142ac:	bf02      	ittt	eq
 80142ae:	68e5      	ldreq	r5, [r4, #12]
 80142b0:	6833      	ldreq	r3, [r6, #0]
 80142b2:	1aed      	subeq	r5, r5, r3
 80142b4:	68a3      	ldr	r3, [r4, #8]
 80142b6:	bf0c      	ite	eq
 80142b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80142bc:	2500      	movne	r5, #0
 80142be:	4293      	cmp	r3, r2
 80142c0:	bfc4      	itt	gt
 80142c2:	1a9b      	subgt	r3, r3, r2
 80142c4:	18ed      	addgt	r5, r5, r3
 80142c6:	2600      	movs	r6, #0
 80142c8:	341a      	adds	r4, #26
 80142ca:	42b5      	cmp	r5, r6
 80142cc:	d11a      	bne.n	8014304 <_printf_common+0xc8>
 80142ce:	2000      	movs	r0, #0
 80142d0:	e008      	b.n	80142e4 <_printf_common+0xa8>
 80142d2:	2301      	movs	r3, #1
 80142d4:	4652      	mov	r2, sl
 80142d6:	4641      	mov	r1, r8
 80142d8:	4638      	mov	r0, r7
 80142da:	47c8      	blx	r9
 80142dc:	3001      	adds	r0, #1
 80142de:	d103      	bne.n	80142e8 <_printf_common+0xac>
 80142e0:	f04f 30ff 	mov.w	r0, #4294967295
 80142e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e8:	3501      	adds	r5, #1
 80142ea:	e7c6      	b.n	801427a <_printf_common+0x3e>
 80142ec:	18e1      	adds	r1, r4, r3
 80142ee:	1c5a      	adds	r2, r3, #1
 80142f0:	2030      	movs	r0, #48	@ 0x30
 80142f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80142f6:	4422      	add	r2, r4
 80142f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80142fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014300:	3302      	adds	r3, #2
 8014302:	e7c7      	b.n	8014294 <_printf_common+0x58>
 8014304:	2301      	movs	r3, #1
 8014306:	4622      	mov	r2, r4
 8014308:	4641      	mov	r1, r8
 801430a:	4638      	mov	r0, r7
 801430c:	47c8      	blx	r9
 801430e:	3001      	adds	r0, #1
 8014310:	d0e6      	beq.n	80142e0 <_printf_common+0xa4>
 8014312:	3601      	adds	r6, #1
 8014314:	e7d9      	b.n	80142ca <_printf_common+0x8e>
	...

08014318 <_printf_i>:
 8014318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801431c:	7e0f      	ldrb	r7, [r1, #24]
 801431e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014320:	2f78      	cmp	r7, #120	@ 0x78
 8014322:	4691      	mov	r9, r2
 8014324:	4680      	mov	r8, r0
 8014326:	460c      	mov	r4, r1
 8014328:	469a      	mov	sl, r3
 801432a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801432e:	d807      	bhi.n	8014340 <_printf_i+0x28>
 8014330:	2f62      	cmp	r7, #98	@ 0x62
 8014332:	d80a      	bhi.n	801434a <_printf_i+0x32>
 8014334:	2f00      	cmp	r7, #0
 8014336:	f000 80d2 	beq.w	80144de <_printf_i+0x1c6>
 801433a:	2f58      	cmp	r7, #88	@ 0x58
 801433c:	f000 80b9 	beq.w	80144b2 <_printf_i+0x19a>
 8014340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014344:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014348:	e03a      	b.n	80143c0 <_printf_i+0xa8>
 801434a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801434e:	2b15      	cmp	r3, #21
 8014350:	d8f6      	bhi.n	8014340 <_printf_i+0x28>
 8014352:	a101      	add	r1, pc, #4	@ (adr r1, 8014358 <_printf_i+0x40>)
 8014354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014358:	080143b1 	.word	0x080143b1
 801435c:	080143c5 	.word	0x080143c5
 8014360:	08014341 	.word	0x08014341
 8014364:	08014341 	.word	0x08014341
 8014368:	08014341 	.word	0x08014341
 801436c:	08014341 	.word	0x08014341
 8014370:	080143c5 	.word	0x080143c5
 8014374:	08014341 	.word	0x08014341
 8014378:	08014341 	.word	0x08014341
 801437c:	08014341 	.word	0x08014341
 8014380:	08014341 	.word	0x08014341
 8014384:	080144c5 	.word	0x080144c5
 8014388:	080143ef 	.word	0x080143ef
 801438c:	0801447f 	.word	0x0801447f
 8014390:	08014341 	.word	0x08014341
 8014394:	08014341 	.word	0x08014341
 8014398:	080144e7 	.word	0x080144e7
 801439c:	08014341 	.word	0x08014341
 80143a0:	080143ef 	.word	0x080143ef
 80143a4:	08014341 	.word	0x08014341
 80143a8:	08014341 	.word	0x08014341
 80143ac:	08014487 	.word	0x08014487
 80143b0:	6833      	ldr	r3, [r6, #0]
 80143b2:	1d1a      	adds	r2, r3, #4
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	6032      	str	r2, [r6, #0]
 80143b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80143bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80143c0:	2301      	movs	r3, #1
 80143c2:	e09d      	b.n	8014500 <_printf_i+0x1e8>
 80143c4:	6833      	ldr	r3, [r6, #0]
 80143c6:	6820      	ldr	r0, [r4, #0]
 80143c8:	1d19      	adds	r1, r3, #4
 80143ca:	6031      	str	r1, [r6, #0]
 80143cc:	0606      	lsls	r6, r0, #24
 80143ce:	d501      	bpl.n	80143d4 <_printf_i+0xbc>
 80143d0:	681d      	ldr	r5, [r3, #0]
 80143d2:	e003      	b.n	80143dc <_printf_i+0xc4>
 80143d4:	0645      	lsls	r5, r0, #25
 80143d6:	d5fb      	bpl.n	80143d0 <_printf_i+0xb8>
 80143d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80143dc:	2d00      	cmp	r5, #0
 80143de:	da03      	bge.n	80143e8 <_printf_i+0xd0>
 80143e0:	232d      	movs	r3, #45	@ 0x2d
 80143e2:	426d      	negs	r5, r5
 80143e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143e8:	4859      	ldr	r0, [pc, #356]	@ (8014550 <_printf_i+0x238>)
 80143ea:	230a      	movs	r3, #10
 80143ec:	e011      	b.n	8014412 <_printf_i+0xfa>
 80143ee:	6821      	ldr	r1, [r4, #0]
 80143f0:	6833      	ldr	r3, [r6, #0]
 80143f2:	0608      	lsls	r0, r1, #24
 80143f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80143f8:	d402      	bmi.n	8014400 <_printf_i+0xe8>
 80143fa:	0649      	lsls	r1, r1, #25
 80143fc:	bf48      	it	mi
 80143fe:	b2ad      	uxthmi	r5, r5
 8014400:	2f6f      	cmp	r7, #111	@ 0x6f
 8014402:	4853      	ldr	r0, [pc, #332]	@ (8014550 <_printf_i+0x238>)
 8014404:	6033      	str	r3, [r6, #0]
 8014406:	bf14      	ite	ne
 8014408:	230a      	movne	r3, #10
 801440a:	2308      	moveq	r3, #8
 801440c:	2100      	movs	r1, #0
 801440e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014412:	6866      	ldr	r6, [r4, #4]
 8014414:	60a6      	str	r6, [r4, #8]
 8014416:	2e00      	cmp	r6, #0
 8014418:	bfa2      	ittt	ge
 801441a:	6821      	ldrge	r1, [r4, #0]
 801441c:	f021 0104 	bicge.w	r1, r1, #4
 8014420:	6021      	strge	r1, [r4, #0]
 8014422:	b90d      	cbnz	r5, 8014428 <_printf_i+0x110>
 8014424:	2e00      	cmp	r6, #0
 8014426:	d04b      	beq.n	80144c0 <_printf_i+0x1a8>
 8014428:	4616      	mov	r6, r2
 801442a:	fbb5 f1f3 	udiv	r1, r5, r3
 801442e:	fb03 5711 	mls	r7, r3, r1, r5
 8014432:	5dc7      	ldrb	r7, [r0, r7]
 8014434:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014438:	462f      	mov	r7, r5
 801443a:	42bb      	cmp	r3, r7
 801443c:	460d      	mov	r5, r1
 801443e:	d9f4      	bls.n	801442a <_printf_i+0x112>
 8014440:	2b08      	cmp	r3, #8
 8014442:	d10b      	bne.n	801445c <_printf_i+0x144>
 8014444:	6823      	ldr	r3, [r4, #0]
 8014446:	07df      	lsls	r7, r3, #31
 8014448:	d508      	bpl.n	801445c <_printf_i+0x144>
 801444a:	6923      	ldr	r3, [r4, #16]
 801444c:	6861      	ldr	r1, [r4, #4]
 801444e:	4299      	cmp	r1, r3
 8014450:	bfde      	ittt	le
 8014452:	2330      	movle	r3, #48	@ 0x30
 8014454:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014458:	f106 36ff 	addle.w	r6, r6, #4294967295
 801445c:	1b92      	subs	r2, r2, r6
 801445e:	6122      	str	r2, [r4, #16]
 8014460:	f8cd a000 	str.w	sl, [sp]
 8014464:	464b      	mov	r3, r9
 8014466:	aa03      	add	r2, sp, #12
 8014468:	4621      	mov	r1, r4
 801446a:	4640      	mov	r0, r8
 801446c:	f7ff fee6 	bl	801423c <_printf_common>
 8014470:	3001      	adds	r0, #1
 8014472:	d14a      	bne.n	801450a <_printf_i+0x1f2>
 8014474:	f04f 30ff 	mov.w	r0, #4294967295
 8014478:	b004      	add	sp, #16
 801447a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801447e:	6823      	ldr	r3, [r4, #0]
 8014480:	f043 0320 	orr.w	r3, r3, #32
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	4833      	ldr	r0, [pc, #204]	@ (8014554 <_printf_i+0x23c>)
 8014488:	2778      	movs	r7, #120	@ 0x78
 801448a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801448e:	6823      	ldr	r3, [r4, #0]
 8014490:	6831      	ldr	r1, [r6, #0]
 8014492:	061f      	lsls	r7, r3, #24
 8014494:	f851 5b04 	ldr.w	r5, [r1], #4
 8014498:	d402      	bmi.n	80144a0 <_printf_i+0x188>
 801449a:	065f      	lsls	r7, r3, #25
 801449c:	bf48      	it	mi
 801449e:	b2ad      	uxthmi	r5, r5
 80144a0:	6031      	str	r1, [r6, #0]
 80144a2:	07d9      	lsls	r1, r3, #31
 80144a4:	bf44      	itt	mi
 80144a6:	f043 0320 	orrmi.w	r3, r3, #32
 80144aa:	6023      	strmi	r3, [r4, #0]
 80144ac:	b11d      	cbz	r5, 80144b6 <_printf_i+0x19e>
 80144ae:	2310      	movs	r3, #16
 80144b0:	e7ac      	b.n	801440c <_printf_i+0xf4>
 80144b2:	4827      	ldr	r0, [pc, #156]	@ (8014550 <_printf_i+0x238>)
 80144b4:	e7e9      	b.n	801448a <_printf_i+0x172>
 80144b6:	6823      	ldr	r3, [r4, #0]
 80144b8:	f023 0320 	bic.w	r3, r3, #32
 80144bc:	6023      	str	r3, [r4, #0]
 80144be:	e7f6      	b.n	80144ae <_printf_i+0x196>
 80144c0:	4616      	mov	r6, r2
 80144c2:	e7bd      	b.n	8014440 <_printf_i+0x128>
 80144c4:	6833      	ldr	r3, [r6, #0]
 80144c6:	6825      	ldr	r5, [r4, #0]
 80144c8:	6961      	ldr	r1, [r4, #20]
 80144ca:	1d18      	adds	r0, r3, #4
 80144cc:	6030      	str	r0, [r6, #0]
 80144ce:	062e      	lsls	r6, r5, #24
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	d501      	bpl.n	80144d8 <_printf_i+0x1c0>
 80144d4:	6019      	str	r1, [r3, #0]
 80144d6:	e002      	b.n	80144de <_printf_i+0x1c6>
 80144d8:	0668      	lsls	r0, r5, #25
 80144da:	d5fb      	bpl.n	80144d4 <_printf_i+0x1bc>
 80144dc:	8019      	strh	r1, [r3, #0]
 80144de:	2300      	movs	r3, #0
 80144e0:	6123      	str	r3, [r4, #16]
 80144e2:	4616      	mov	r6, r2
 80144e4:	e7bc      	b.n	8014460 <_printf_i+0x148>
 80144e6:	6833      	ldr	r3, [r6, #0]
 80144e8:	1d1a      	adds	r2, r3, #4
 80144ea:	6032      	str	r2, [r6, #0]
 80144ec:	681e      	ldr	r6, [r3, #0]
 80144ee:	6862      	ldr	r2, [r4, #4]
 80144f0:	2100      	movs	r1, #0
 80144f2:	4630      	mov	r0, r6
 80144f4:	f7eb fea4 	bl	8000240 <memchr>
 80144f8:	b108      	cbz	r0, 80144fe <_printf_i+0x1e6>
 80144fa:	1b80      	subs	r0, r0, r6
 80144fc:	6060      	str	r0, [r4, #4]
 80144fe:	6863      	ldr	r3, [r4, #4]
 8014500:	6123      	str	r3, [r4, #16]
 8014502:	2300      	movs	r3, #0
 8014504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014508:	e7aa      	b.n	8014460 <_printf_i+0x148>
 801450a:	6923      	ldr	r3, [r4, #16]
 801450c:	4632      	mov	r2, r6
 801450e:	4649      	mov	r1, r9
 8014510:	4640      	mov	r0, r8
 8014512:	47d0      	blx	sl
 8014514:	3001      	adds	r0, #1
 8014516:	d0ad      	beq.n	8014474 <_printf_i+0x15c>
 8014518:	6823      	ldr	r3, [r4, #0]
 801451a:	079b      	lsls	r3, r3, #30
 801451c:	d413      	bmi.n	8014546 <_printf_i+0x22e>
 801451e:	68e0      	ldr	r0, [r4, #12]
 8014520:	9b03      	ldr	r3, [sp, #12]
 8014522:	4298      	cmp	r0, r3
 8014524:	bfb8      	it	lt
 8014526:	4618      	movlt	r0, r3
 8014528:	e7a6      	b.n	8014478 <_printf_i+0x160>
 801452a:	2301      	movs	r3, #1
 801452c:	4632      	mov	r2, r6
 801452e:	4649      	mov	r1, r9
 8014530:	4640      	mov	r0, r8
 8014532:	47d0      	blx	sl
 8014534:	3001      	adds	r0, #1
 8014536:	d09d      	beq.n	8014474 <_printf_i+0x15c>
 8014538:	3501      	adds	r5, #1
 801453a:	68e3      	ldr	r3, [r4, #12]
 801453c:	9903      	ldr	r1, [sp, #12]
 801453e:	1a5b      	subs	r3, r3, r1
 8014540:	42ab      	cmp	r3, r5
 8014542:	dcf2      	bgt.n	801452a <_printf_i+0x212>
 8014544:	e7eb      	b.n	801451e <_printf_i+0x206>
 8014546:	2500      	movs	r5, #0
 8014548:	f104 0619 	add.w	r6, r4, #25
 801454c:	e7f5      	b.n	801453a <_printf_i+0x222>
 801454e:	bf00      	nop
 8014550:	08014fd9 	.word	0x08014fd9
 8014554:	08014fea 	.word	0x08014fea

08014558 <__sflush_r>:
 8014558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014560:	0716      	lsls	r6, r2, #28
 8014562:	4605      	mov	r5, r0
 8014564:	460c      	mov	r4, r1
 8014566:	d454      	bmi.n	8014612 <__sflush_r+0xba>
 8014568:	684b      	ldr	r3, [r1, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	dc02      	bgt.n	8014574 <__sflush_r+0x1c>
 801456e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014570:	2b00      	cmp	r3, #0
 8014572:	dd48      	ble.n	8014606 <__sflush_r+0xae>
 8014574:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014576:	2e00      	cmp	r6, #0
 8014578:	d045      	beq.n	8014606 <__sflush_r+0xae>
 801457a:	2300      	movs	r3, #0
 801457c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014580:	682f      	ldr	r7, [r5, #0]
 8014582:	6a21      	ldr	r1, [r4, #32]
 8014584:	602b      	str	r3, [r5, #0]
 8014586:	d030      	beq.n	80145ea <__sflush_r+0x92>
 8014588:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801458a:	89a3      	ldrh	r3, [r4, #12]
 801458c:	0759      	lsls	r1, r3, #29
 801458e:	d505      	bpl.n	801459c <__sflush_r+0x44>
 8014590:	6863      	ldr	r3, [r4, #4]
 8014592:	1ad2      	subs	r2, r2, r3
 8014594:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014596:	b10b      	cbz	r3, 801459c <__sflush_r+0x44>
 8014598:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801459a:	1ad2      	subs	r2, r2, r3
 801459c:	2300      	movs	r3, #0
 801459e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80145a0:	6a21      	ldr	r1, [r4, #32]
 80145a2:	4628      	mov	r0, r5
 80145a4:	47b0      	blx	r6
 80145a6:	1c43      	adds	r3, r0, #1
 80145a8:	89a3      	ldrh	r3, [r4, #12]
 80145aa:	d106      	bne.n	80145ba <__sflush_r+0x62>
 80145ac:	6829      	ldr	r1, [r5, #0]
 80145ae:	291d      	cmp	r1, #29
 80145b0:	d82b      	bhi.n	801460a <__sflush_r+0xb2>
 80145b2:	4a2a      	ldr	r2, [pc, #168]	@ (801465c <__sflush_r+0x104>)
 80145b4:	410a      	asrs	r2, r1
 80145b6:	07d6      	lsls	r6, r2, #31
 80145b8:	d427      	bmi.n	801460a <__sflush_r+0xb2>
 80145ba:	2200      	movs	r2, #0
 80145bc:	6062      	str	r2, [r4, #4]
 80145be:	04d9      	lsls	r1, r3, #19
 80145c0:	6922      	ldr	r2, [r4, #16]
 80145c2:	6022      	str	r2, [r4, #0]
 80145c4:	d504      	bpl.n	80145d0 <__sflush_r+0x78>
 80145c6:	1c42      	adds	r2, r0, #1
 80145c8:	d101      	bne.n	80145ce <__sflush_r+0x76>
 80145ca:	682b      	ldr	r3, [r5, #0]
 80145cc:	b903      	cbnz	r3, 80145d0 <__sflush_r+0x78>
 80145ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80145d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145d2:	602f      	str	r7, [r5, #0]
 80145d4:	b1b9      	cbz	r1, 8014606 <__sflush_r+0xae>
 80145d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145da:	4299      	cmp	r1, r3
 80145dc:	d002      	beq.n	80145e4 <__sflush_r+0x8c>
 80145de:	4628      	mov	r0, r5
 80145e0:	f7fe fb36 	bl	8012c50 <_free_r>
 80145e4:	2300      	movs	r3, #0
 80145e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80145e8:	e00d      	b.n	8014606 <__sflush_r+0xae>
 80145ea:	2301      	movs	r3, #1
 80145ec:	4628      	mov	r0, r5
 80145ee:	47b0      	blx	r6
 80145f0:	4602      	mov	r2, r0
 80145f2:	1c50      	adds	r0, r2, #1
 80145f4:	d1c9      	bne.n	801458a <__sflush_r+0x32>
 80145f6:	682b      	ldr	r3, [r5, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d0c6      	beq.n	801458a <__sflush_r+0x32>
 80145fc:	2b1d      	cmp	r3, #29
 80145fe:	d001      	beq.n	8014604 <__sflush_r+0xac>
 8014600:	2b16      	cmp	r3, #22
 8014602:	d11e      	bne.n	8014642 <__sflush_r+0xea>
 8014604:	602f      	str	r7, [r5, #0]
 8014606:	2000      	movs	r0, #0
 8014608:	e022      	b.n	8014650 <__sflush_r+0xf8>
 801460a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801460e:	b21b      	sxth	r3, r3
 8014610:	e01b      	b.n	801464a <__sflush_r+0xf2>
 8014612:	690f      	ldr	r7, [r1, #16]
 8014614:	2f00      	cmp	r7, #0
 8014616:	d0f6      	beq.n	8014606 <__sflush_r+0xae>
 8014618:	0793      	lsls	r3, r2, #30
 801461a:	680e      	ldr	r6, [r1, #0]
 801461c:	bf08      	it	eq
 801461e:	694b      	ldreq	r3, [r1, #20]
 8014620:	600f      	str	r7, [r1, #0]
 8014622:	bf18      	it	ne
 8014624:	2300      	movne	r3, #0
 8014626:	eba6 0807 	sub.w	r8, r6, r7
 801462a:	608b      	str	r3, [r1, #8]
 801462c:	f1b8 0f00 	cmp.w	r8, #0
 8014630:	dde9      	ble.n	8014606 <__sflush_r+0xae>
 8014632:	6a21      	ldr	r1, [r4, #32]
 8014634:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014636:	4643      	mov	r3, r8
 8014638:	463a      	mov	r2, r7
 801463a:	4628      	mov	r0, r5
 801463c:	47b0      	blx	r6
 801463e:	2800      	cmp	r0, #0
 8014640:	dc08      	bgt.n	8014654 <__sflush_r+0xfc>
 8014642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801464a:	81a3      	strh	r3, [r4, #12]
 801464c:	f04f 30ff 	mov.w	r0, #4294967295
 8014650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014654:	4407      	add	r7, r0
 8014656:	eba8 0800 	sub.w	r8, r8, r0
 801465a:	e7e7      	b.n	801462c <__sflush_r+0xd4>
 801465c:	dfbffffe 	.word	0xdfbffffe

08014660 <_fflush_r>:
 8014660:	b538      	push	{r3, r4, r5, lr}
 8014662:	690b      	ldr	r3, [r1, #16]
 8014664:	4605      	mov	r5, r0
 8014666:	460c      	mov	r4, r1
 8014668:	b913      	cbnz	r3, 8014670 <_fflush_r+0x10>
 801466a:	2500      	movs	r5, #0
 801466c:	4628      	mov	r0, r5
 801466e:	bd38      	pop	{r3, r4, r5, pc}
 8014670:	b118      	cbz	r0, 801467a <_fflush_r+0x1a>
 8014672:	6a03      	ldr	r3, [r0, #32]
 8014674:	b90b      	cbnz	r3, 801467a <_fflush_r+0x1a>
 8014676:	f7fe f82f 	bl	80126d8 <__sinit>
 801467a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d0f3      	beq.n	801466a <_fflush_r+0xa>
 8014682:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014684:	07d0      	lsls	r0, r2, #31
 8014686:	d404      	bmi.n	8014692 <_fflush_r+0x32>
 8014688:	0599      	lsls	r1, r3, #22
 801468a:	d402      	bmi.n	8014692 <_fflush_r+0x32>
 801468c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801468e:	f7fe fac6 	bl	8012c1e <__retarget_lock_acquire_recursive>
 8014692:	4628      	mov	r0, r5
 8014694:	4621      	mov	r1, r4
 8014696:	f7ff ff5f 	bl	8014558 <__sflush_r>
 801469a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801469c:	07da      	lsls	r2, r3, #31
 801469e:	4605      	mov	r5, r0
 80146a0:	d4e4      	bmi.n	801466c <_fflush_r+0xc>
 80146a2:	89a3      	ldrh	r3, [r4, #12]
 80146a4:	059b      	lsls	r3, r3, #22
 80146a6:	d4e1      	bmi.n	801466c <_fflush_r+0xc>
 80146a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146aa:	f7fe fab9 	bl	8012c20 <__retarget_lock_release_recursive>
 80146ae:	e7dd      	b.n	801466c <_fflush_r+0xc>

080146b0 <__swhatbuf_r>:
 80146b0:	b570      	push	{r4, r5, r6, lr}
 80146b2:	460c      	mov	r4, r1
 80146b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146b8:	2900      	cmp	r1, #0
 80146ba:	b096      	sub	sp, #88	@ 0x58
 80146bc:	4615      	mov	r5, r2
 80146be:	461e      	mov	r6, r3
 80146c0:	da0d      	bge.n	80146de <__swhatbuf_r+0x2e>
 80146c2:	89a3      	ldrh	r3, [r4, #12]
 80146c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80146c8:	f04f 0100 	mov.w	r1, #0
 80146cc:	bf14      	ite	ne
 80146ce:	2340      	movne	r3, #64	@ 0x40
 80146d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80146d4:	2000      	movs	r0, #0
 80146d6:	6031      	str	r1, [r6, #0]
 80146d8:	602b      	str	r3, [r5, #0]
 80146da:	b016      	add	sp, #88	@ 0x58
 80146dc:	bd70      	pop	{r4, r5, r6, pc}
 80146de:	466a      	mov	r2, sp
 80146e0:	f000 f862 	bl	80147a8 <_fstat_r>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	dbec      	blt.n	80146c2 <__swhatbuf_r+0x12>
 80146e8:	9901      	ldr	r1, [sp, #4]
 80146ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80146ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80146f2:	4259      	negs	r1, r3
 80146f4:	4159      	adcs	r1, r3
 80146f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80146fa:	e7eb      	b.n	80146d4 <__swhatbuf_r+0x24>

080146fc <__smakebuf_r>:
 80146fc:	898b      	ldrh	r3, [r1, #12]
 80146fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014700:	079d      	lsls	r5, r3, #30
 8014702:	4606      	mov	r6, r0
 8014704:	460c      	mov	r4, r1
 8014706:	d507      	bpl.n	8014718 <__smakebuf_r+0x1c>
 8014708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801470c:	6023      	str	r3, [r4, #0]
 801470e:	6123      	str	r3, [r4, #16]
 8014710:	2301      	movs	r3, #1
 8014712:	6163      	str	r3, [r4, #20]
 8014714:	b003      	add	sp, #12
 8014716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014718:	ab01      	add	r3, sp, #4
 801471a:	466a      	mov	r2, sp
 801471c:	f7ff ffc8 	bl	80146b0 <__swhatbuf_r>
 8014720:	9f00      	ldr	r7, [sp, #0]
 8014722:	4605      	mov	r5, r0
 8014724:	4639      	mov	r1, r7
 8014726:	4630      	mov	r0, r6
 8014728:	f7fd f878 	bl	801181c <_malloc_r>
 801472c:	b948      	cbnz	r0, 8014742 <__smakebuf_r+0x46>
 801472e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014732:	059a      	lsls	r2, r3, #22
 8014734:	d4ee      	bmi.n	8014714 <__smakebuf_r+0x18>
 8014736:	f023 0303 	bic.w	r3, r3, #3
 801473a:	f043 0302 	orr.w	r3, r3, #2
 801473e:	81a3      	strh	r3, [r4, #12]
 8014740:	e7e2      	b.n	8014708 <__smakebuf_r+0xc>
 8014742:	89a3      	ldrh	r3, [r4, #12]
 8014744:	6020      	str	r0, [r4, #0]
 8014746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801474a:	81a3      	strh	r3, [r4, #12]
 801474c:	9b01      	ldr	r3, [sp, #4]
 801474e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014752:	b15b      	cbz	r3, 801476c <__smakebuf_r+0x70>
 8014754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014758:	4630      	mov	r0, r6
 801475a:	f000 f837 	bl	80147cc <_isatty_r>
 801475e:	b128      	cbz	r0, 801476c <__smakebuf_r+0x70>
 8014760:	89a3      	ldrh	r3, [r4, #12]
 8014762:	f023 0303 	bic.w	r3, r3, #3
 8014766:	f043 0301 	orr.w	r3, r3, #1
 801476a:	81a3      	strh	r3, [r4, #12]
 801476c:	89a3      	ldrh	r3, [r4, #12]
 801476e:	431d      	orrs	r5, r3
 8014770:	81a5      	strh	r5, [r4, #12]
 8014772:	e7cf      	b.n	8014714 <__smakebuf_r+0x18>

08014774 <memmove>:
 8014774:	4288      	cmp	r0, r1
 8014776:	b510      	push	{r4, lr}
 8014778:	eb01 0402 	add.w	r4, r1, r2
 801477c:	d902      	bls.n	8014784 <memmove+0x10>
 801477e:	4284      	cmp	r4, r0
 8014780:	4623      	mov	r3, r4
 8014782:	d807      	bhi.n	8014794 <memmove+0x20>
 8014784:	1e43      	subs	r3, r0, #1
 8014786:	42a1      	cmp	r1, r4
 8014788:	d008      	beq.n	801479c <memmove+0x28>
 801478a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801478e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014792:	e7f8      	b.n	8014786 <memmove+0x12>
 8014794:	4402      	add	r2, r0
 8014796:	4601      	mov	r1, r0
 8014798:	428a      	cmp	r2, r1
 801479a:	d100      	bne.n	801479e <memmove+0x2a>
 801479c:	bd10      	pop	{r4, pc}
 801479e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147a6:	e7f7      	b.n	8014798 <memmove+0x24>

080147a8 <_fstat_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	4d07      	ldr	r5, [pc, #28]	@ (80147c8 <_fstat_r+0x20>)
 80147ac:	2300      	movs	r3, #0
 80147ae:	4604      	mov	r4, r0
 80147b0:	4608      	mov	r0, r1
 80147b2:	4611      	mov	r1, r2
 80147b4:	602b      	str	r3, [r5, #0]
 80147b6:	f7ef f98b 	bl	8003ad0 <_fstat>
 80147ba:	1c43      	adds	r3, r0, #1
 80147bc:	d102      	bne.n	80147c4 <_fstat_r+0x1c>
 80147be:	682b      	ldr	r3, [r5, #0]
 80147c0:	b103      	cbz	r3, 80147c4 <_fstat_r+0x1c>
 80147c2:	6023      	str	r3, [r4, #0]
 80147c4:	bd38      	pop	{r3, r4, r5, pc}
 80147c6:	bf00      	nop
 80147c8:	20005820 	.word	0x20005820

080147cc <_isatty_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4d06      	ldr	r5, [pc, #24]	@ (80147e8 <_isatty_r+0x1c>)
 80147d0:	2300      	movs	r3, #0
 80147d2:	4604      	mov	r4, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	602b      	str	r3, [r5, #0]
 80147d8:	f7ef f98a 	bl	8003af0 <_isatty>
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d102      	bne.n	80147e6 <_isatty_r+0x1a>
 80147e0:	682b      	ldr	r3, [r5, #0]
 80147e2:	b103      	cbz	r3, 80147e6 <_isatty_r+0x1a>
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	20005820 	.word	0x20005820

080147ec <__assert_func>:
 80147ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147ee:	4614      	mov	r4, r2
 80147f0:	461a      	mov	r2, r3
 80147f2:	4b09      	ldr	r3, [pc, #36]	@ (8014818 <__assert_func+0x2c>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	4605      	mov	r5, r0
 80147f8:	68d8      	ldr	r0, [r3, #12]
 80147fa:	b954      	cbnz	r4, 8014812 <__assert_func+0x26>
 80147fc:	4b07      	ldr	r3, [pc, #28]	@ (801481c <__assert_func+0x30>)
 80147fe:	461c      	mov	r4, r3
 8014800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014804:	9100      	str	r1, [sp, #0]
 8014806:	462b      	mov	r3, r5
 8014808:	4905      	ldr	r1, [pc, #20]	@ (8014820 <__assert_func+0x34>)
 801480a:	f000 f821 	bl	8014850 <fiprintf>
 801480e:	f000 f831 	bl	8014874 <abort>
 8014812:	4b04      	ldr	r3, [pc, #16]	@ (8014824 <__assert_func+0x38>)
 8014814:	e7f4      	b.n	8014800 <__assert_func+0x14>
 8014816:	bf00      	nop
 8014818:	20000434 	.word	0x20000434
 801481c:	08015036 	.word	0x08015036
 8014820:	08015008 	.word	0x08015008
 8014824:	08014ffb 	.word	0x08014ffb

08014828 <_calloc_r>:
 8014828:	b570      	push	{r4, r5, r6, lr}
 801482a:	fba1 5402 	umull	r5, r4, r1, r2
 801482e:	b93c      	cbnz	r4, 8014840 <_calloc_r+0x18>
 8014830:	4629      	mov	r1, r5
 8014832:	f7fc fff3 	bl	801181c <_malloc_r>
 8014836:	4606      	mov	r6, r0
 8014838:	b928      	cbnz	r0, 8014846 <_calloc_r+0x1e>
 801483a:	2600      	movs	r6, #0
 801483c:	4630      	mov	r0, r6
 801483e:	bd70      	pop	{r4, r5, r6, pc}
 8014840:	220c      	movs	r2, #12
 8014842:	6002      	str	r2, [r0, #0]
 8014844:	e7f9      	b.n	801483a <_calloc_r+0x12>
 8014846:	462a      	mov	r2, r5
 8014848:	4621      	mov	r1, r4
 801484a:	f7fe f8f7 	bl	8012a3c <memset>
 801484e:	e7f5      	b.n	801483c <_calloc_r+0x14>

08014850 <fiprintf>:
 8014850:	b40e      	push	{r1, r2, r3}
 8014852:	b503      	push	{r0, r1, lr}
 8014854:	4601      	mov	r1, r0
 8014856:	ab03      	add	r3, sp, #12
 8014858:	4805      	ldr	r0, [pc, #20]	@ (8014870 <fiprintf+0x20>)
 801485a:	f853 2b04 	ldr.w	r2, [r3], #4
 801485e:	6800      	ldr	r0, [r0, #0]
 8014860:	9301      	str	r3, [sp, #4]
 8014862:	f7ff fbd3 	bl	801400c <_vfiprintf_r>
 8014866:	b002      	add	sp, #8
 8014868:	f85d eb04 	ldr.w	lr, [sp], #4
 801486c:	b003      	add	sp, #12
 801486e:	4770      	bx	lr
 8014870:	20000434 	.word	0x20000434

08014874 <abort>:
 8014874:	b508      	push	{r3, lr}
 8014876:	2006      	movs	r0, #6
 8014878:	f000 f82c 	bl	80148d4 <raise>
 801487c:	2001      	movs	r0, #1
 801487e:	f7ef f8f3 	bl	8003a68 <_exit>

08014882 <_raise_r>:
 8014882:	291f      	cmp	r1, #31
 8014884:	b538      	push	{r3, r4, r5, lr}
 8014886:	4605      	mov	r5, r0
 8014888:	460c      	mov	r4, r1
 801488a:	d904      	bls.n	8014896 <_raise_r+0x14>
 801488c:	2316      	movs	r3, #22
 801488e:	6003      	str	r3, [r0, #0]
 8014890:	f04f 30ff 	mov.w	r0, #4294967295
 8014894:	bd38      	pop	{r3, r4, r5, pc}
 8014896:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014898:	b112      	cbz	r2, 80148a0 <_raise_r+0x1e>
 801489a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801489e:	b94b      	cbnz	r3, 80148b4 <_raise_r+0x32>
 80148a0:	4628      	mov	r0, r5
 80148a2:	f000 f831 	bl	8014908 <_getpid_r>
 80148a6:	4622      	mov	r2, r4
 80148a8:	4601      	mov	r1, r0
 80148aa:	4628      	mov	r0, r5
 80148ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148b0:	f000 b818 	b.w	80148e4 <_kill_r>
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d00a      	beq.n	80148ce <_raise_r+0x4c>
 80148b8:	1c59      	adds	r1, r3, #1
 80148ba:	d103      	bne.n	80148c4 <_raise_r+0x42>
 80148bc:	2316      	movs	r3, #22
 80148be:	6003      	str	r3, [r0, #0]
 80148c0:	2001      	movs	r0, #1
 80148c2:	e7e7      	b.n	8014894 <_raise_r+0x12>
 80148c4:	2100      	movs	r1, #0
 80148c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80148ca:	4620      	mov	r0, r4
 80148cc:	4798      	blx	r3
 80148ce:	2000      	movs	r0, #0
 80148d0:	e7e0      	b.n	8014894 <_raise_r+0x12>
	...

080148d4 <raise>:
 80148d4:	4b02      	ldr	r3, [pc, #8]	@ (80148e0 <raise+0xc>)
 80148d6:	4601      	mov	r1, r0
 80148d8:	6818      	ldr	r0, [r3, #0]
 80148da:	f7ff bfd2 	b.w	8014882 <_raise_r>
 80148de:	bf00      	nop
 80148e0:	20000434 	.word	0x20000434

080148e4 <_kill_r>:
 80148e4:	b538      	push	{r3, r4, r5, lr}
 80148e6:	4d07      	ldr	r5, [pc, #28]	@ (8014904 <_kill_r+0x20>)
 80148e8:	2300      	movs	r3, #0
 80148ea:	4604      	mov	r4, r0
 80148ec:	4608      	mov	r0, r1
 80148ee:	4611      	mov	r1, r2
 80148f0:	602b      	str	r3, [r5, #0]
 80148f2:	f7ef f8a9 	bl	8003a48 <_kill>
 80148f6:	1c43      	adds	r3, r0, #1
 80148f8:	d102      	bne.n	8014900 <_kill_r+0x1c>
 80148fa:	682b      	ldr	r3, [r5, #0]
 80148fc:	b103      	cbz	r3, 8014900 <_kill_r+0x1c>
 80148fe:	6023      	str	r3, [r4, #0]
 8014900:	bd38      	pop	{r3, r4, r5, pc}
 8014902:	bf00      	nop
 8014904:	20005820 	.word	0x20005820

08014908 <_getpid_r>:
 8014908:	f7ef b896 	b.w	8003a38 <_getpid>

0801490c <_init>:
 801490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801490e:	bf00      	nop
 8014910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014912:	bc08      	pop	{r3}
 8014914:	469e      	mov	lr, r3
 8014916:	4770      	bx	lr

08014918 <_fini>:
 8014918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801491a:	bf00      	nop
 801491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801491e:	bc08      	pop	{r3}
 8014920:	469e      	mov	lr, r3
 8014922:	4770      	bx	lr
