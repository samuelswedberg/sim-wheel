
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001017c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0801034c  0801034c  0001134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010600  08010600  00012330  2**0
                  CONTENTS
  4 .ARM          00000008  08010600  08010600  00011600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010608  08010608  00012330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010608  08010608  00011608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801060c  0801060c  0001160c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000330  20000000  08010610  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051e4  20000330  08010940  00012330  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005514  08010940  00012514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025630  00000000  00000000  00012360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006329  00000000  00000000  00037990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d38  00000000  00000000  0003dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001625  00000000  00000000  0003f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002996b  00000000  00000000  0004101d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027358  00000000  00000000  0006a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef052  00000000  00000000  00091ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082b0  00000000  00000000  00180d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00189028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000330 	.word	0x20000330
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010334 	.word	0x08010334

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000334 	.word	0x20000334
 800020c:	08010334 	.word	0x08010334

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e30:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e54:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e5c:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <MX_ADC1_Init+0xa0>)
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e7c:	f001 fde0 	bl	8002a40 <HAL_ADC_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f001 f943 	bl	8002110 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <MX_ADC1_Init+0x98>)
 8000e9c:	f001 ffb2 	bl	8002e04 <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ea6:	f001 f933 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000034c 	.word	0x2000034c
 8000eb8:	40012000 	.word	0x40012000
 8000ebc:	0f000001 	.word	0x0f000001

08000ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <HAL_ADC_MspInit+0x7c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d127      	bne.n	8000f32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a15      	ldr	r2, [pc, #84]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <HAL_ADC_MspInit+0x80>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <HAL_ADC_MspInit+0x84>)
 8000f2e:	f003 f953 	bl	80041d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	@ 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40012000 	.word	0x40012000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000

08000f48 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f50:	4a25      	ldr	r2, [pc, #148]	@ (8000fe8 <MX_CAN1_Init+0xa0>)
 8000f52:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f68:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000f6c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f70:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f74:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4812      	ldr	r0, [pc, #72]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000f9c:	f002 f960 	bl	8003260 <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000fa6:	f001 f8b3 	bl	8002110 <Error_Handler>
//  filterConfig.FilterMaskIdLow = 0x0000;            // Not used in standard ID
//  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // Assign to FIFO0
//  filterConfig.FilterActivation = ENABLE;           // Enable the filter


  filterConfig.FilterBank = 0;                      // Use Filter Bank 0
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // 32-bit scale
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;           // Base ID to match (0x100 << 5)
 8000fb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fba:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;                // Not used in standard ID
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x7FC << 5;       // Mask to allow 0x101 and 0x102
 8000fc0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000fc4:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;            // Not used in standard ID
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign to FIFO0
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <MX_CAN1_Init+0x9c>)
 8000fd8:	f002 fa3e 	bl	8003458 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	@ 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000394 	.word	0x20000394
 8000fe8:	40006400 	.word	0x40006400

08000fec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2a      	ldr	r2, [pc, #168]	@ (80010b4 <HAL_CAN_MspInit+0xc8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d14d      	bne.n	80010aa <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <HAL_CAN_MspInit+0xcc>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a28      	ldr	r2, [pc, #160]	@ (80010b8 <HAL_CAN_MspInit+0xcc>)
 8001018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <HAL_CAN_MspInit+0xcc>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <HAL_CAN_MspInit+0xcc>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a21      	ldr	r2, [pc, #132]	@ (80010b8 <HAL_CAN_MspInit+0xcc>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <HAL_CAN_MspInit+0xcc>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001058:	2309      	movs	r3, #9
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4816      	ldr	r0, [pc, #88]	@ (80010bc <HAL_CAN_MspInit+0xd0>)
 8001064:	f003 f8b8 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800107a:	2309      	movs	r3, #9
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	480d      	ldr	r0, [pc, #52]	@ (80010bc <HAL_CAN_MspInit+0xd0>)
 8001086:	f003 f8a7 	bl	80041d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2105      	movs	r1, #5
 800108e:	2014      	movs	r0, #20
 8001090:	f003 f878 	bl	8004184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001094:	2014      	movs	r0, #20
 8001096:	f003 f891 	bl	80041bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	2015      	movs	r0, #21
 80010a0:	f003 f870 	bl	8004184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010a4:	2015      	movs	r0, #21
 80010a6:	f003 f889 	bl	80041bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40006400 	.word	0x40006400
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020400 	.word	0x40020400

080010c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <vApplicationGetIdleTaskMemory+0x2c>)
 80010d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <vApplicationGetIdleTaskMemory+0x30>)
 80010d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000454 	.word	0x20000454
 80010f0:	200004f4 	.word	0x200004f4

080010f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b09a      	sub	sp, #104	@ 0x68
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	telemetry_data.tRpm = 0;
 80010fa:	4b45      	ldr	r3, [pc, #276]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8001100:	4b43      	ldr	r3, [pc, #268]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 8001106:	4b42      	ldr	r3, [pc, #264]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 800110c:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 8001112:	4b3f      	ldr	r3, [pc, #252]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 8001118:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 800111e:	4b3c      	ldr	r3, [pc, #240]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 8001124:	4b3a      	ldr	r3, [pc, #232]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
	gFfbSignal = 0;
 800112a:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <MX_FREERTOS_Init+0x120>)
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	601a      	str	r2, [r3, #0]

	HIDReport.steering = 0;        // Steering data (0-255)
 8001132:	4b39      	ldr	r3, [pc, #228]	@ (8001218 <MX_FREERTOS_Init+0x124>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = 0;        // Throttle data (0-255)
 8001138:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <MX_FREERTOS_Init+0x124>)
 800113a:	2200      	movs	r2, #0
 800113c:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = 0;           // Brake data (0-255)
 800113e:	4b36      	ldr	r3, [pc, #216]	@ (8001218 <MX_FREERTOS_Init+0x124>)
 8001140:	2200      	movs	r2, #0
 8001142:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 8001144:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <MX_FREERTOS_Init+0x124>)
 8001146:	2200      	movs	r2, #0
 8001148:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 800114a:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <MX_FREERTOS_Init+0x124>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 8001150:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <MX_FREERTOS_Init+0x124>)
 8001152:	2200      	movs	r2, #0
 8001154:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 8001156:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <MX_FREERTOS_Init+0x124>)
 8001158:	2200      	movs	r2, #0
 800115a:	725a      	strb	r2, [r3, #9]
	memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 800115c:	2228      	movs	r2, #40	@ 0x28
 800115e:	2100      	movs	r1, #0
 8001160:	482b      	ldr	r0, [pc, #172]	@ (8001210 <MX_FREERTOS_Init+0x11c>)
 8001162:	f00e fa33 	bl	800f5cc <memset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 8001166:	2300      	movs	r3, #0
 8001168:	663b      	str	r3, [r7, #96]	@ 0x60
 800116a:	2300      	movs	r3, #0
 800116c:	667b      	str	r3, [r7, #100]	@ 0x64
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 800116e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001172:	2101      	movs	r1, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f00b fba6 	bl	800c8c6 <osSemaphoreCreate>
 800117a:	4603      	mov	r3, r0
 800117c:	4a27      	ldr	r2, [pc, #156]	@ (800121c <MX_FREERTOS_Init+0x128>)
 800117e:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartMutex */
  osSemaphoreDef(uartMutex);
 8001180:	2300      	movs	r3, #0
 8001182:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001184:	2300      	movs	r3, #0
 8001186:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uartMutexHandle = osSemaphoreCreate(osSemaphore(uartMutex), 1);
 8001188:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800118c:	2101      	movs	r1, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f00b fb99 	bl	800c8c6 <osSemaphoreCreate>
 8001194:	4603      	mov	r3, r0
 8001196:	4a22      	ldr	r2, [pc, #136]	@ (8001220 <MX_FREERTOS_Init+0x12c>)
 8001198:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_FREERTOS_Init+0x130>)
 800119c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80011a0:	461d      	mov	r5, r3
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00b fb26 	bl	800c806 <osThreadCreate>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001228 <MX_FREERTOS_Init+0x134>)
 80011be:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlLoopTask */
  osThreadDef(ControlLoopTask, StartControlLoop, osPriorityHigh, 0, 512);
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_FREERTOS_Init+0x138>)
 80011c2:	f107 0420 	add.w	r4, r7, #32
 80011c6:	461d      	mov	r5, r3
 80011c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLoopTaskHandle = osThreadCreate(osThread(ControlLoopTask), NULL);
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f00b fb13 	bl	800c806 <osThreadCreate>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a13      	ldr	r2, [pc, #76]	@ (8001230 <MX_FREERTOS_Init+0x13c>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommLoopTask */
  osThreadDef(CommLoopTask, StartCommLoopTask, osPriorityNormal, 0, 512);
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_FREERTOS_Init+0x140>)
 80011e8:	1d3c      	adds	r4, r7, #4
 80011ea:	461d      	mov	r5, r3
 80011ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommLoopTaskHandle = osThreadCreate(osThread(CommLoopTask), NULL);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00b fb02 	bl	800c806 <osThreadCreate>
 8001202:	4603      	mov	r3, r0
 8001204:	4a0c      	ldr	r2, [pc, #48]	@ (8001238 <MX_FREERTOS_Init+0x144>)
 8001206:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001208:	bf00      	nop
 800120a:	3768      	adds	r7, #104	@ 0x68
 800120c:	46bd      	mov	sp, r7
 800120e:	bdb0      	pop	{r4, r5, r7, pc}
 8001210:	200003bc 	.word	0x200003bc
 8001214:	20000434 	.word	0x20000434
 8001218:	200003e4 	.word	0x200003e4
 800121c:	2000044c 	.word	0x2000044c
 8001220:	20000450 	.word	0x20000450
 8001224:	08010358 	.word	0x08010358
 8001228:	20000440 	.word	0x20000440
 800122c:	08010384 	.word	0x08010384
 8001230:	20000444 	.word	0x20000444
 8001234:	080103b0 	.word	0x080103b0
 8001238:	20000448 	.word	0x20000448

0800123c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <StartDefaultTask+0x8>

08001248 <StartControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	@ 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlLoop */
  /* Infinite loop */
  for(;;)
  {
	  float total_force = 0.0;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	637b      	str	r3, [r7, #52]	@ 0x34
	  const float Kp = 1.0f;
 8001256:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30

	  for (;;) {
		  // Step 1: Retrieve current force feedback signal (e.g., from game data).
		  float force_feedback_signal = gFfbSignal;
 800125c:	4b57      	ldr	r3, [pc, #348]	@ (80013bc <StartControlLoop+0x174>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  // Step 2: Calculate individual forces based on physics:
		  float inertia_force = calculate_inertia(force_feedback_signal, angular_velocity);
 8001262:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <StartControlLoop+0x178>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	eef0 0a67 	vmov.f32	s1, s15
 800126c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001270:	f000 fa00 	bl	8001674 <calculate_inertia>
 8001274:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		  float damping_force = calculate_damping(angular_velocity);
 8001278:	4b51      	ldr	r3, [pc, #324]	@ (80013c0 <StartControlLoop+0x178>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	eeb0 0a67 	vmov.f32	s0, s15
 8001282:	f000 fa27 	bl	80016d4 <calculate_damping>
 8001286:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		  float friction_force = calculate_friction(angular_velocity);
 800128a:	4b4d      	ldr	r3, [pc, #308]	@ (80013c0 <StartControlLoop+0x178>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	f000 fa36 	bl	8001704 <calculate_friction>
 8001298:	ed87 0a08 	vstr	s0, [r7, #32]
		  float lock_force = calculate_lock(wheel_angle);
 800129c:	4b49      	ldr	r3, [pc, #292]	@ (80013c4 <StartControlLoop+0x17c>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eeb0 0a67 	vmov.f32	s0, s15
 80012a6:	f000 fa57 	bl	8001758 <calculate_lock>
 80012aa:	ed87 0a07 	vstr	s0, [r7, #28]

		  // Step 3: Sum all forces and scale to PWM range:
		  total_force = force_feedback_signal + inertia_force + damping_force + friction_force + lock_force;
 80012ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80012b2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80012ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  // Strength gain
		  total_force *= gStrength;
 80012d6:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <StartControlLoop+0x180>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  total_force = constrain(total_force, -1.0, 1.0);
 80012e8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80012ec:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80012f0:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80012f4:	f000 f994 	bl	8001620 <constrain>
 80012f8:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		  // Deadband
		  const float FORCE_DEADBAND_THRESHOLD = 0.05f; // Adjust as needed
 80012fc:	4b33      	ldr	r3, [pc, #204]	@ (80013cc <StartControlLoop+0x184>)
 80012fe:	61bb      	str	r3, [r7, #24]
		  const float ANGLE_DEADBAND_THRESHOLD = 50.0f; // Adjust as needed
 8001300:	4b33      	ldr	r3, [pc, #204]	@ (80013d0 <StartControlLoop+0x188>)
 8001302:	617b      	str	r3, [r7, #20]
		  float error = wheel_angle;
 8001304:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <StartControlLoop+0x17c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	613b      	str	r3, [r7, #16]
		  if (fabsf(error) < ANGLE_DEADBAND_THRESHOLD)  {
 800130a:	edd7 7a04 	vldr	s15, [r7, #16]
 800130e:	eef0 7ae7 	vabs.f32	s15, s15
 8001312:	ed97 7a05 	vldr	s14, [r7, #20]
 8001316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	dd03      	ble.n	8001328 <StartControlLoop+0xe0>
			  total_force = 0.0f;
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
 8001326:	e017      	b.n	8001358 <StartControlLoop+0x110>
		  } else { // TEST CODE: gives increasing feedback farther away from center
			  total_force = -Kp * (error / WHEEL_MAX_ANGLE);
 8001328:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800132c:	eeb1 7a67 	vneg.f32	s14, s15
 8001330:	edd7 6a04 	vldr	s13, [r7, #16]
 8001334:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 80013d4 <StartControlLoop+0x18c>
 8001338:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			  total_force = constrain(total_force, -1.0f, 1.0f);
 8001344:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001348:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800134c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001350:	f000 f966 	bl	8001620 <constrain>
 8001354:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		  }

		  // Step 4: Map total_force to PWM and determine direction
		  float pwm_output = scale_to_pwm(total_force);
 8001358:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800135c:	f000 fa42 	bl	80017e4 <scale_to_pwm>
 8001360:	ed87 0a03 	vstr	s0, [r7, #12]
		  // 0 is negative direction; 1 is positive direction
		  uint8_t motor_direction = (total_force >= 0) ? 1 : 0;
 8001364:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	bfac      	ite	ge
 8001372:	2301      	movge	r3, #1
 8001374:	2300      	movlt	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	72fb      	strb	r3, [r7, #11]

		  // Debug
		  gDir = motor_direction;
 800137a:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <StartControlLoop+0x190>)
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	7013      	strb	r3, [r2, #0]
		  gTotalforce = total_force;
 8001380:	4a16      	ldr	r2, [pc, #88]	@ (80013dc <StartControlLoop+0x194>)
 8001382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001384:	6013      	str	r3, [r2, #0]
		  gPWMConst = pwm_output;
 8001386:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <StartControlLoop+0x198>)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6013      	str	r3, [r2, #0]

		  // Step 5: Send PWM signal to H-bridge for motor control:
		  set_motor_direction(motor_direction);
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fbf0 	bl	8001b74 <set_motor_direction>
		  set_motor_pwm(pwm_output);
 8001394:	ed97 0a03 	vldr	s0, [r7, #12]
 8001398:	f000 fbba 	bl	8001b10 <set_motor_pwm>

		  // Step 6: Update wheel position and velocity for next loop:
		  update_wheel_position_and_velocity(&wheel_angle, &angular_velocity);
 800139c:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <StartControlLoop+0x178>)
 800139e:	4809      	ldr	r0, [pc, #36]	@ (80013c4 <StartControlLoop+0x17c>)
 80013a0:	f000 fb0e 	bl	80019c0 <update_wheel_position_and_velocity>



		  gHall = read_hall_sensor();
 80013a4:	f000 fc44 	bl	8001c30 <read_hall_sensor>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <StartControlLoop+0x19c>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]
		  // Run this task periodically (every 10ms):
		  osDelay(5);
 80013b2:	2005      	movs	r0, #5
 80013b4:	f00b fa73 	bl	800c89e <osDelay>
	  for (;;) {
 80013b8:	e750      	b.n	800125c <StartControlLoop+0x14>
 80013ba:	bf00      	nop
 80013bc:	20000434 	.word	0x20000434
 80013c0:	20000418 	.word	0x20000418
 80013c4:	20000414 	.word	0x20000414
 80013c8:	20000000 	.word	0x20000000
 80013cc:	3d4ccccd 	.word	0x3d4ccccd
 80013d0:	42480000 	.word	0x42480000
 80013d4:	43e10000 	.word	0x43e10000
 80013d8:	20000412 	.word	0x20000412
 80013dc:	2000040c 	.word	0x2000040c
 80013e0:	20000408 	.word	0x20000408
 80013e4:	20000424 	.word	0x20000424

080013e8 <StartCommLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommLoopTask */
void StartCommLoopTask(void const * argument)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommLoopTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <StartCommLoopTask+0x2c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	210a      	movs	r1, #10
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00b fa98 	bl	800c92c <osSemaphoreWait>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <StartCommLoopTask+0x1e>
		  runCAN();
 8001402:	f000 f883 	bl	800150c <runCAN>
	  }

	  runReport();
 8001406:	f000 f827 	bl	8001458 <runReport>
    osDelay(10);
 800140a:	200a      	movs	r0, #10
 800140c:	f00b fa47 	bl	800c89e <osDelay>
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 8001410:	e7ee      	b.n	80013f0 <StartCommLoopTask+0x8>
 8001412:	bf00      	nop
 8001414:	2000044c 	.word	0x2000044c

08001418 <DWT_Init>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Initialize DWT for cycle counting
void DWT_Init(void) {
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <DWT_Init+0x38>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <DWT_Init+0x38>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <DWT_Init+0x38>)
 800142e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001432:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <DWT_Init+0x3c>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <DWT_Init+0x3c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <DWT_Init+0x3c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000edf0 	.word	0xe000edf0
 8001454:	e0001000 	.word	0xe0001000

08001458 <runReport>:
    while ((DWT->CYCCNT - startTick) < delayTicks) {
        // Wait until the required delay has passed
    }
}

void runReport() {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
	memset(&HIDReport, 0, sizeof(HIDReport_t));
 800145e:	220a      	movs	r2, #10
 8001460:	2100      	movs	r1, #0
 8001462:	4826      	ldr	r0, [pc, #152]	@ (80014fc <runReport+0xa4>)
 8001464:	f00e f8b2 	bl	800f5cc <memset>

	uint16_t max_clutch = pedal_data.encoder_3;
 8001468:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <runReport+0xa8>)
 800146a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800146e:	81fb      	strh	r3, [r7, #14]

	if (user_input_data.hall_analog_1 > max_clutch) {
 8001470:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <runReport+0xac>)
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	461a      	mov	r2, r3
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	4293      	cmp	r3, r2
 800147a:	d202      	bcs.n	8001482 <runReport+0x2a>
		max_clutch = user_input_data.hall_analog_1;
 800147c:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <runReport+0xac>)
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	81fb      	strh	r3, [r7, #14]
	}
	if (user_input_data.hall_analog_1 > max_clutch) {
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <runReport+0xac>)
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	461a      	mov	r2, r3
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	4293      	cmp	r3, r2
 800148c:	d202      	bcs.n	8001494 <runReport+0x3c>
		max_clutch = user_input_data.hall_analog_1;
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <runReport+0xac>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	81fb      	strh	r3, [r7, #14]
	}

	HIDReport.steering = gSteering;
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <runReport+0xb0>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149e:	edc7 7a01 	vstr	s15, [r7, #4]
 80014a2:	793b      	ldrb	r3, [r7, #4]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <runReport+0xa4>)
 80014a8:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = pedal_data.encoder_1;
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <runReport+0xa8>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <runReport+0xa4>)
 80014b4:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = pedal_data.encoder_2;
 80014b6:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <runReport+0xa8>)
 80014b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <runReport+0xa4>)
 80014c0:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = max_clutch;
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <runReport+0xa4>)
 80014c8:	70da      	strb	r2, [r3, #3]

	HIDReport.buttons = user_input_data.buttons;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <runReport+0xac>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <runReport+0xa4>)
 80014d2:	605a      	str	r2, [r3, #4]

	HIDReport.rz = (uint8_t) (user_input_data.encoder_1 & 0xFF);
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <runReport+0xac>)
 80014d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <runReport+0xa4>)
 80014de:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = (uint8_t) (user_input_data.encoder_2 & 0xFF);
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <runReport+0xac>)
 80014e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <runReport+0xa4>)
 80014ea:	725a      	strb	r2, [r3, #9]

	USBD_CUSTOM_HID_SendCustomReport((uint8_t *)&HIDReport, sizeof(HIDReport));
 80014ec:	210a      	movs	r1, #10
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <runReport+0xa4>)
 80014f0:	f008 fa0a 	bl	8009908 <USBD_CUSTOM_HID_SendCustomReport>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200003e4 	.word	0x200003e4
 8001500:	200003fc 	.word	0x200003fc
 8001504:	200003f0 	.word	0x200003f0
 8001508:	20000420 	.word	0x20000420

0800150c <runCAN>:

void runCAN() {
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b098      	sub	sp, #96	@ 0x60
 8001510:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	// Create a telemetry_packet instance and initialize its fields
//	telemetry_packet dataToSend = {3600, 1, 120, 0, 0, 0, 45, 0}; DEBUG CODE
	telemetry_packet dataToSend = telemetry_data;
 8001512:	4b3c      	ldr	r3, [pc, #240]	@ (8001604 <runCAN+0xf8>)
 8001514:	f107 0408 	add.w	r4, r7, #8
 8001518:	461d      	mov	r5, r3
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001522:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001526:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t* rawData = (uint8_t*)&dataToSend;
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Initialize CAN Header
	TxHeader.StdId = 0x100;           // CAN ID for the message
 8001530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001534:	637b      	str	r3, [r7, #52]	@ 0x34
	TxHeader.ExtId = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	63bb      	str	r3, [r7, #56]	@ 0x38
	TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 800153a:	2300      	movs	r3, #0
 800153c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 800153e:	2300      	movs	r3, #0
 8001540:	643b      	str	r3, [r7, #64]	@ 0x40
	TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 8001542:	2308      	movs	r3, #8
 8001544:	647b      	str	r3, [r7, #68]	@ 0x44

	uint8_t frameData[8];             // Temporary buffer for each CAN frame

	// Calculate the size of the telemetry_packet struct
	int totalSize = sizeof(telemetry_packet);
 8001546:	2328      	movs	r3, #40	@ 0x28
 8001548:	657b      	str	r3, [r7, #84]	@ 0x54

	// Split the telemetry_packet into CAN frames
	for (int i = 0; i < totalSize; i += 8) {
 800154a:	2300      	movs	r3, #0
 800154c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800154e:	e04c      	b.n	80015ea <runCAN+0xde>
	    // Calculate the size of the current chunk (for the last frame)
	    int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 8001550:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001552:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b08      	cmp	r3, #8
 8001558:	bfa8      	it	ge
 800155a:	2308      	movge	r3, #8
 800155c:	653b      	str	r3, [r7, #80]	@ 0x50

	    // Copy the next chunk of data into the frame buffer
	    memcpy(frameData, &rawData[i], chunkSize);
 800155e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001560:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001562:	18d1      	adds	r1, r2, r3
 8001564:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001566:	463b      	mov	r3, r7
 8001568:	4618      	mov	r0, r3
 800156a:	f00e f910 	bl	800f78e <memcpy>

	    // Adjust DLC for the last frame
	    TxHeader.DLC = chunkSize;
 800156e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001570:	647b      	str	r3, [r7, #68]	@ 0x44

	    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, frameData, &TxMailbox);
 8001572:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001576:	463a      	mov	r2, r7
 8001578:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800157c:	4822      	ldr	r0, [pc, #136]	@ (8001608 <runCAN+0xfc>)
 800157e:	f002 f8d8 	bl	8003732 <HAL_CAN_AddTxMessage>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	    if (status != HAL_OK) {
 8001588:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800158c:	2b00      	cmp	r3, #0
 800158e:	d026      	beq.n	80015de <runCAN+0xd2>
	        // Inspect the error
	        if (status == HAL_ERROR) {
 8001590:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001594:	2b01      	cmp	r3, #1
 8001596:	d103      	bne.n	80015a0 <runCAN+0x94>
	            printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 8001598:	481c      	ldr	r0, [pc, #112]	@ (800160c <runCAN+0x100>)
 800159a:	f00d ff03 	bl	800f3a4 <puts>
 800159e:	e00e      	b.n	80015be <runCAN+0xb2>
	        } else if (status == HAL_BUSY) {
 80015a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d103      	bne.n	80015b0 <runCAN+0xa4>
	            printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 80015a8:	4819      	ldr	r0, [pc, #100]	@ (8001610 <runCAN+0x104>)
 80015aa:	f00d fefb 	bl	800f3a4 <puts>
 80015ae:	e006      	b.n	80015be <runCAN+0xb2>
	        } else if (status == HAL_TIMEOUT) {
 80015b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d102      	bne.n	80015be <runCAN+0xb2>
	            printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 80015b8:	4816      	ldr	r0, [pc, #88]	@ (8001614 <runCAN+0x108>)
 80015ba:	f00d fef3 	bl	800f3a4 <puts>
	        }

	        // Optionally log the state of CAN error counters
	        can_error = HAL_CAN_GetError(&hcan1);
 80015be:	4812      	ldr	r0, [pc, #72]	@ (8001608 <runCAN+0xfc>)
 80015c0:	f002 fd1c 	bl	8003ffc <HAL_CAN_GetError>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <runCAN+0x10c>)
 80015c8:	6013      	str	r3, [r2, #0]

	        HAL_CAN_Stop(&hcan1);  // Stop CAN
 80015ca:	480f      	ldr	r0, [pc, #60]	@ (8001608 <runCAN+0xfc>)
 80015cc:	f002 f868 	bl	80036a0 <HAL_CAN_Stop>
	        HAL_CAN_Start(&hcan1); // Restart CAN
 80015d0:	480d      	ldr	r0, [pc, #52]	@ (8001608 <runCAN+0xfc>)
 80015d2:	f002 f821 	bl	8003618 <HAL_CAN_Start>

	        // Optional: Clear error flags
	        __HAL_CAN_CLEAR_FLAG(&hcan1, CAN_FLAG_ERRI);
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <runCAN+0xfc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2204      	movs	r2, #4
 80015dc:	605a      	str	r2, [r3, #4]
	    }
	    HAL_Delay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f001 fa0a 	bl	80029f8 <HAL_Delay>
	for (int i = 0; i < totalSize; i += 8) {
 80015e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015e6:	3308      	adds	r3, #8
 80015e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80015ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbae      	blt.n	8001550 <runCAN+0x44>
	}

	osSemaphoreRelease(spiSendMutexHandle);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <runCAN+0x110>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00b f9e6 	bl	800c9c8 <osSemaphoreRelease>
}
 80015fc:	bf00      	nop
 80015fe:	3760      	adds	r7, #96	@ 0x60
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}
 8001604:	200003bc 	.word	0x200003bc
 8001608:	20000394 	.word	0x20000394
 800160c:	080103cc 	.word	0x080103cc
 8001610:	080103f4 	.word	0x080103f4
 8001614:	0801041c 	.word	0x0801041c
 8001618:	20000430 	.word	0x20000430
 800161c:	2000044c 	.word	0x2000044c

08001620 <constrain>:

    // Calculate the oscillation value using a sine wave
    return sin((2 * M_PI * elapsed_time) / period);
}

float constrain(float x, float lower, float upper) {
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	ed87 0a03 	vstr	s0, [r7, #12]
 800162a:	edc7 0a02 	vstr	s1, [r7, #8]
 800162e:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < lower) return lower;
 8001632:	ed97 7a03 	vldr	s14, [r7, #12]
 8001636:	edd7 7a02 	vldr	s15, [r7, #8]
 800163a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d501      	bpl.n	8001648 <constrain+0x28>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	e00b      	b.n	8001660 <constrain+0x40>
    if (x > upper) return upper;
 8001648:	ed97 7a03 	vldr	s14, [r7, #12]
 800164c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001658:	dd01      	ble.n	800165e <constrain+0x3e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	e000      	b.n	8001660 <constrain+0x40>
    return x;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb0 0a67 	vmov.f32	s0, s15
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <calculate_inertia>:

float calculate_inertia(float force_feedback, float angular_velocity) {
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	ed87 0a01 	vstr	s0, [r7, #4]
 800167e:	edc7 0a00 	vstr	s1, [r7]
    static float previous_output = 0;
    float inertia_coefficient = 0.1; // Fine-tune for feel
 8001682:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <calculate_inertia+0x58>)
 8001684:	60fb      	str	r3, [r7, #12]
    float inertia_force = inertia_coefficient * previous_output + (1 - inertia_coefficient) * force_feedback;
 8001686:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <calculate_inertia+0x5c>)
 8001688:	ed93 7a00 	vldr	s14, [r3]
 800168c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001698:	edd7 7a03 	vldr	s15, [r7, #12]
 800169c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_output = inertia_force;
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <calculate_inertia+0x5c>)
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	6013      	str	r3, [r2, #0]
    return inertia_force;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	ee07 3a90 	vmov	s15, r3
}
 80016bc:	eeb0 0a67 	vmov.f32	s0, s15
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	3dcccccd 	.word	0x3dcccccd
 80016d0:	200006f4 	.word	0x200006f4

080016d4 <calculate_damping>:

float calculate_damping(float angular_velocity) {
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	ed87 0a01 	vstr	s0, [r7, #4]
    float damping_coefficient = 0.05;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <calculate_damping+0x2c>)
 80016e0:	60fb      	str	r3, [r7, #12]
    return -damping_coefficient * angular_velocity;
 80016e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e6:	eeb1 7a67 	vneg.f32	s14, s15
 80016ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ee:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80016f2:	eeb0 0a67 	vmov.f32	s0, s15
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	3d4ccccd 	.word	0x3d4ccccd

08001704 <calculate_friction>:

float calculate_friction(float angular_velocity) {
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	ed87 0a01 	vstr	s0, [r7, #4]
    float friction_coefficient = 0.02;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <calculate_friction+0x4c>)
 8001710:	60fb      	str	r3, [r7, #12]
    if (angular_velocity > 0) {
 8001712:	edd7 7a01 	vldr	s15, [r7, #4]
 8001716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	dd04      	ble.n	800172a <calculate_friction+0x26>
        return -friction_coefficient;
 8001720:	edd7 7a03 	vldr	s15, [r7, #12]
 8001724:	eef1 7a67 	vneg.f32	s15, s15
 8001728:	e00b      	b.n	8001742 <calculate_friction+0x3e>
    } else if (angular_velocity < 0) {
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d502      	bpl.n	800173e <calculate_friction+0x3a>
        return friction_coefficient;
 8001738:	edd7 7a03 	vldr	s15, [r7, #12]
 800173c:	e001      	b.n	8001742 <calculate_friction+0x3e>
    } else {
        return 0;
 800173e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8001754 <calculate_friction+0x50>
    }
}
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	3ca3d70a 	.word	0x3ca3d70a
 8001754:	00000000 	.word	0x00000000

08001758 <calculate_lock>:

float calculate_lock(float angle) {
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	ed87 0a01 	vstr	s0, [r7, #4]
    float lock_coefficient = 1.0;
 8001762:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001766:	60fb      	str	r3, [r7, #12]
    float max_angle = 450.0;
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <calculate_lock+0x84>)
 800176a:	60bb      	str	r3, [r7, #8]
    if (angle > max_angle) {
 800176c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001770:	edd7 7a02 	vldr	s15, [r7, #8]
 8001774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	dd0c      	ble.n	8001798 <calculate_lock+0x40>
        return -lock_coefficient * (angle - max_angle);
 800177e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001782:	eeb1 7a67 	vneg.f32	s14, s15
 8001786:	edd7 6a01 	vldr	s13, [r7, #4]
 800178a:	edd7 7a02 	vldr	s15, [r7, #8]
 800178e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001796:	e019      	b.n	80017cc <calculate_lock+0x74>
    } else if (angle < -max_angle) {
 8001798:	edd7 7a02 	vldr	s15, [r7, #8]
 800179c:	eef1 7a67 	vneg.f32	s15, s15
 80017a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80017a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	d50c      	bpl.n	80017c8 <calculate_lock+0x70>
        return -lock_coefficient * (angle + max_angle);
 80017ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b2:	eeb1 7a67 	vneg.f32	s14, s15
 80017b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80017ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80017be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c6:	e001      	b.n	80017cc <calculate_lock+0x74>
    }
    return 0;
 80017c8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80017e0 <calculate_lock+0x88>
}
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	43e10000 	.word	0x43e10000
 80017e0:	00000000 	.word	0x00000000

080017e4 <scale_to_pwm>:

float scale_to_pwm(float total_force) {
 80017e4:	b5b0      	push	{r4, r5, r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	ed87 0a01 	vstr	s0, [r7, #4]
    const float MIN_PWM = 50.0f;    // Minimum PWM value for the motor to start moving
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <scale_to_pwm+0xb8>)
 80017f0:	617b      	str	r3, [r7, #20]
    const float MAX_PWM = 255.0f;   // Maximum PWM value
 80017f2:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <scale_to_pwm+0xbc>)
 80017f4:	613b      	str	r3, [r7, #16]

    // If total_force is zero, return zero PWM output
    if (total_force == 0.0f) {
 80017f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	d106      	bne.n	8001812 <scale_to_pwm+0x2e>
        gPWM = 0.0f;
 8001804:	4b27      	ldr	r3, [pc, #156]	@ (80018a4 <scale_to_pwm+0xc0>)
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
        return 0.0f;
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e03c      	b.n	800188c <scale_to_pwm+0xa8>
    }

    // Calculate PWM output
    float pwm_output = fabs(total_force) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 8001812:	edd7 7a01 	vldr	s15, [r7, #4]
 8001816:	eef0 7ae7 	vabs.f32	s15, s15
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe feab 	bl	8000578 <__aeabi_f2d>
 8001822:	4604      	mov	r4, r0
 8001824:	460d      	mov	r5, r1
 8001826:	ed97 7a04 	vldr	s14, [r7, #16]
 800182a:	edd7 7a05 	vldr	s15, [r7, #20]
 800182e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001832:	ee17 0a90 	vmov	r0, s15
 8001836:	f7fe fe9f 	bl	8000578 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fef1 	bl	8000628 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4614      	mov	r4, r2
 800184c:	461d      	mov	r5, r3
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7fe fe92 	bl	8000578 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fd2e 	bl	80002bc <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f910 	bl	8000a8c <__aeabi_d2f>
 800186c:	4603      	mov	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]

    // Constrain PWM output to valid range
    pwm_output = constrain(pwm_output, MIN_PWM, MAX_PWM);
 8001870:	ed97 1a04 	vldr	s2, [r7, #16]
 8001874:	edd7 0a05 	vldr	s1, [r7, #20]
 8001878:	ed97 0a03 	vldr	s0, [r7, #12]
 800187c:	f7ff fed0 	bl	8001620 <constrain>
 8001880:	ed87 0a03 	vstr	s0, [r7, #12]

    // Update debug variable
    gPWM = pwm_output;
 8001884:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <scale_to_pwm+0xc0>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6013      	str	r3, [r2, #0]

    return pwm_output;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	42480000 	.word	0x42480000
 80018a0:	437f0000 	.word	0x437f0000
 80018a4:	20000404 	.word	0x20000404

080018a8 <map_wheel_position_to_axis>:

uint8_t map_wheel_position_to_axis(int32_t position) {
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    int32_t min_position = -450;
 80018b0:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <map_wheel_position_to_axis+0x60>)
 80018b2:	60fb      	str	r3, [r7, #12]
    int32_t max_position = 450;
 80018b4:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80018b8:	60bb      	str	r3, [r7, #8]

    // Clamp the position to the valid range
	if (position < min_position) {
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	429a      	cmp	r2, r3
 80018c0:	da02      	bge.n	80018c8 <map_wheel_position_to_axis+0x20>
		position = min_position;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	e005      	b.n	80018d4 <map_wheel_position_to_axis+0x2c>
	} else if (position > max_position) {
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dd01      	ble.n	80018d4 <map_wheel_position_to_axis+0x2c>
		position = max_position;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	607b      	str	r3, [r7, #4]
	}

	// Reverse the mapping
	return (uint8_t)((((max_position - position) * 255) + (max_position - min_position) / 2) / (max_position - min_position));
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	1ad2      	subs	r2, r2, r3
 80018da:	4613      	mov	r3, r2
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	1a9a      	subs	r2, r3, r2
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1acb      	subs	r3, r1, r3
 80018e6:	0fd9      	lsrs	r1, r3, #31
 80018e8:	440b      	add	r3, r1
 80018ea:	105b      	asrs	r3, r3, #1
 80018ec:	441a      	add	r2, r3
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1acb      	subs	r3, r1, r3
 80018f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f8:	b2db      	uxtb	r3, r3
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	fffffe3e 	.word	0xfffffe3e

0800190c <init_encoder>:

extern void init_encoder() {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001910:	213c      	movs	r1, #60	@ 0x3c
 8001912:	4803      	ldr	r0, [pc, #12]	@ (8001920 <init_encoder+0x14>)
 8001914:	f005 fc70 	bl	80071f8 <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 8001918:	f000 f812 	bl	8001940 <reset_encoder_position>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000768 	.word	0x20000768

08001924 <read_encoder_position>:

int16_t read_encoder_position() {
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <read_encoder_position+0x18>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	b21b      	sxth	r3, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000768 	.word	0x20000768

08001940 <reset_encoder_position>:

void reset_encoder_position() {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <reset_encoder_position+0x18>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000768 	.word	0x20000768

0800195c <get_angle_degrees>:

float get_angle_degrees() {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
    int16_t position = read_encoder_position();
 8001962:	f7ff ffdf 	bl	8001924 <read_encoder_position>
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
    gPosition = position;
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <get_angle_degrees+0x58>)
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	8013      	strh	r3, [r2, #0]
    return (position * 360.0) / ENCODER_RESOLUTION;
 8001970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fded 	bl	8000554 <__aeabi_i2d>
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <get_angle_degrees+0x5c>)
 8001980:	f7fe fe52 	bl	8000628 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <get_angle_degrees+0x60>)
 8001992:	f7fe ff73 	bl	800087c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f875 	bl	8000a8c <__aeabi_d2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	ee07 3a90 	vmov	s15, r3
}
 80019a8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000410 	.word	0x20000410
 80019b8:	40768000 	.word	0x40768000
 80019bc:	40a2c000 	.word	0x40a2c000

080019c0 <update_wheel_position_and_velocity>:

void update_wheel_position_and_velocity(float *wheel_angle, float *angular_velocity) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    // Get the current encoder count
    float current_angle = get_angle_degrees();
 80019ca:	f7ff ffc7 	bl	800195c <get_angle_degrees>
 80019ce:	ed87 0a04 	vstr	s0, [r7, #16]

    // Calculate time difference (in seconds) since the last update
    uint32_t current_time = HAL_GetTick();  // In milliseconds
 80019d2:	f001 f805 	bl	80029e0 <HAL_GetTick>
 80019d6:	60f8      	str	r0, [r7, #12]
    float dt = (current_time - last_update_time) / 1000.0f;  // Convert ms to seconds
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019e2:	4b40      	ldr	r3, [pc, #256]	@ (8001ae4 <update_wheel_position_and_velocity+0x124>)
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ec:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001ae8 <update_wheel_position_and_velocity+0x128>
 80019f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f4:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the change in angle
    float delta_angle = current_angle - last_encoder_count;
 80019f8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aec <update_wheel_position_and_velocity+0x12c>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a06:	edc7 7a05 	vstr	s15, [r7, #20]

    // Implement a threshold to ignore small changes
    if (fabs(delta_angle) < 0.25f) {  // Adjust the threshold as needed
 8001a0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0e:	eef0 7ae7 	vabs.f32	s15, s15
 8001a12:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	d502      	bpl.n	8001a26 <update_wheel_position_and_velocity+0x66>
        delta_angle = 0.0f;
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
    }

    // Update the wheel angle, keeping within the lock limit
    *wheel_angle += delta_angle;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edc3 7a00 	vstr	s15, [r3]
    if (*wheel_angle > WHEEL_MAX_ANGLE) *wheel_angle = WHEEL_MAX_ANGLE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001af0 <update_wheel_position_and_velocity+0x130>
 8001a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	dd02      	ble.n	8001a54 <update_wheel_position_and_velocity+0x94>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a28      	ldr	r2, [pc, #160]	@ (8001af4 <update_wheel_position_and_velocity+0x134>)
 8001a52:	601a      	str	r2, [r3, #0]
    if (*wheel_angle < -WHEEL_MAX_ANGLE) *wheel_angle = -WHEEL_MAX_ANGLE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001af8 <update_wheel_position_and_velocity+0x138>
 8001a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a66:	d502      	bpl.n	8001a6e <update_wheel_position_and_velocity+0xae>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a24      	ldr	r2, [pc, #144]	@ (8001afc <update_wheel_position_and_velocity+0x13c>)
 8001a6c:	601a      	str	r2, [r3, #0]

    gDelta = delta_angle;
 8001a6e:	4a24      	ldr	r2, [pc, #144]	@ (8001b00 <update_wheel_position_and_velocity+0x140>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	6013      	str	r3, [r2, #0]
    // Calculate angular velocity (degrees per second)
    if (dt > 0.0001f) {  // Avoid division by zero
 8001a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a78:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001b04 <update_wheel_position_and_velocity+0x144>
 8001a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd09      	ble.n	8001a9a <update_wheel_position_and_velocity+0xda>
        *angular_velocity = delta_angle / dt;
 8001a86:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	edc3 7a00 	vstr	s15, [r3]
 8001a98:	e003      	b.n	8001aa2 <update_wheel_position_and_velocity+0xe2>
    } else {
        *angular_velocity = 0.0f;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
    }

    // Store the current values for the next update
    last_encoder_count = current_angle;
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <update_wheel_position_and_velocity+0x12c>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6013      	str	r3, [r2, #0]
    last_update_time = current_time;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <update_wheel_position_and_velocity+0x124>)
 8001ab4:	edc3 7a00 	vstr	s15, [r3]

    gSteering = map_wheel_position_to_axis(*wheel_angle);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 0a90 	vmov	r0, s15
 8001ac6:	f7ff feef 	bl	80018a8 <map_wheel_position_to_axis>
 8001aca:	4603      	mov	r3, r0
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <update_wheel_position_and_velocity+0x148>)
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000043c 	.word	0x2000043c
 8001ae8:	447a0000 	.word	0x447a0000
 8001aec:	20000438 	.word	0x20000438
 8001af0:	43e10000 	.word	0x43e10000
 8001af4:	43e10000 	.word	0x43e10000
 8001af8:	c3e10000 	.word	0xc3e10000
 8001afc:	c3e10000 	.word	0xc3e10000
 8001b00:	2000041c 	.word	0x2000041c
 8001b04:	38d1b717 	.word	0x38d1b717
 8001b08:	20000420 	.word	0x20000420
 8001b0c:	00000000 	.word	0x00000000

08001b10 <set_motor_pwm>:


void set_motor_pwm(float pwm_value) {
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	ed87 0a01 	vstr	s0, [r7, #4]
    // Assuming pwm_value ranges from 0 to 255
    uint32_t pulse = (uint32_t)((pwm_value / 255.0) * htim3.Init.Period);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe fd2c 	bl	8000578 <__aeabi_f2d>
 8001b20:	a312      	add	r3, pc, #72	@ (adr r3, 8001b6c <set_motor_pwm+0x5c>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fea9 	bl	800087c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4614      	mov	r4, r2
 8001b30:	461d      	mov	r5, r3
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <set_motor_pwm+0x58>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcfc 	bl	8000534 <__aeabi_ui2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fd70 	bl	8000628 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7fe ff7c 	bl	8000a4c <__aeabi_d2uiz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <set_motor_pwm+0x58>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	200007b0 	.word	0x200007b0
 8001b6c:	00000000 	.word	0x00000000
 8001b70:	406fe000 	.word	0x406fe000

08001b74 <set_motor_direction>:

void set_motor_direction(uint8_t direction) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
    if (direction == 1) { // Forward
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10a      	bne.n	8001b9a <set_motor_direction+0x26>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // IN1 = HIGH
 8001b84:	2201      	movs	r2, #1
 8001b86:	2102      	movs	r1, #2
 8001b88:	4812      	ldr	r0, [pc, #72]	@ (8001bd4 <set_motor_direction+0x60>)
 8001b8a:	f002 fcb9 	bl	8004500 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // IN2 = LOW
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2104      	movs	r1, #4
 8001b92:	4810      	ldr	r0, [pc, #64]	@ (8001bd4 <set_motor_direction+0x60>)
 8001b94:	f002 fcb4 	bl	8004500 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
    } else { // Stop
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
    }
}
 8001b98:	e017      	b.n	8001bca <set_motor_direction+0x56>
    } else if (direction == 0) { // Reverse
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10a      	bne.n	8001bb6 <set_motor_direction+0x42>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // IN1 = LOW
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <set_motor_direction+0x60>)
 8001ba6:	f002 fcab 	bl	8004500 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
 8001baa:	2201      	movs	r2, #1
 8001bac:	2104      	movs	r1, #4
 8001bae:	4809      	ldr	r0, [pc, #36]	@ (8001bd4 <set_motor_direction+0x60>)
 8001bb0:	f002 fca6 	bl	8004500 <HAL_GPIO_WritePin>
}
 8001bb4:	e009      	b.n	8001bca <set_motor_direction+0x56>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4806      	ldr	r0, [pc, #24]	@ (8001bd4 <set_motor_direction+0x60>)
 8001bbc:	f002 fca0 	bl	8004500 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <set_motor_direction+0x60>)
 8001bc6:	f002 fc9b 	bl	8004500 <HAL_GPIO_WritePin>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <signalTelemetryTask>:

extern void signalTelemetryTask(uint8_t *Buf, uint32_t Len) {
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
	if (Len == sizeof(telemetry_packet))  // Verify the data size matches the struct size
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b28      	cmp	r3, #40	@ 0x28
 8001be6:	d11a      	bne.n	8001c1e <signalTelemetryTask+0x46>
	{
		// Process the received data (rx_buffer)
		memcpy(&telemetry_data, Buf, sizeof(telemetry_data));
 8001be8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <signalTelemetryTask+0x50>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	461c      	mov	r4, r3
 8001bee:	4616      	mov	r6, r2
 8001bf0:	f104 0c20 	add.w	ip, r4, #32
 8001bf4:	4635      	mov	r5, r6
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c02:	3410      	adds	r4, #16
 8001c04:	3610      	adds	r6, #16
 8001c06:	4564      	cmp	r4, ip
 8001c08:	d1f4      	bne.n	8001bf4 <signalTelemetryTask+0x1c>
 8001c0a:	4633      	mov	r3, r6
 8001c0c:	4622      	mov	r2, r4
 8001c0e:	6810      	ldr	r0, [r2, #0]
 8001c10:	6851      	ldr	r1, [r2, #4]
 8001c12:	c303      	stmia	r3!, {r0, r1}
		osSemaphoreRelease(uartMutexHandle);
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <signalTelemetryTask+0x54>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00a fed5 	bl	800c9c8 <osSemaphoreRelease>
	}
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200003bc 	.word	0x200003bc
 8001c2c:	20000450 	.word	0x20000450

08001c30 <read_hall_sensor>:

    // Stop Motor
    set_motor_pwm(0);
}

float read_hall_sensor() {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8001c3a:	481b      	ldr	r0, [pc, #108]	@ (8001ca8 <read_hall_sensor+0x78>)
 8001c3c:	f000 ff44 	bl	8002ac8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	4818      	ldr	r0, [pc, #96]	@ (8001ca8 <read_hall_sensor+0x78>)
 8001c46:	f001 f844 	bl	8002cd2 <HAL_ADC_PollForConversion>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <read_hall_sensor+0x28>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8001c50:	4815      	ldr	r0, [pc, #84]	@ (8001ca8 <read_hall_sensor+0x78>)
 8001c52:	f001 f8c9 	bl	8002de8 <HAL_ADC_GetValue>
 8001c56:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 8001c58:	4813      	ldr	r0, [pc, #76]	@ (8001ca8 <read_hall_sensor+0x78>)
 8001c5a:	f001 f807 	bl	8002c6c <HAL_ADC_Stop>
    return (adc_value * ADC_MAX_VOLTAGE) / ADC_RESOLUTION;
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fc68 	bl	8000534 <__aeabi_ui2d>
 8001c64:	a30e      	add	r3, pc, #56	@ (adr r3, 8001ca0 <read_hall_sensor+0x70>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fcdd 	bl	8000628 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <read_hall_sensor+0x7c>)
 8001c7c:	f7fe fdfe 	bl	800087c <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ff00 	bl	8000a8c <__aeabi_d2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	ee07 3a90 	vmov	s15, r3
}
 8001c92:	eeb0 0a67 	vmov.f32	s0, s15
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	9999999a 	.word	0x9999999a
 8001ca4:	40139999 	.word	0x40139999
 8001ca8:	2000034c 	.word	0x2000034c
 8001cac:	40b00000 	.word	0x40b00000

08001cb0 <processCAN>:

    // Stop Motor
    set_motor_pwm(0);
}

void processCAN() {
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b08d      	sub	sp, #52	@ 0x34
 8001cb4:	af02      	add	r7, sp, #8
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];  // Buffer to store the received data
    static uint32_t last_receive_time_1 = 0;
    static uint32_t last_receive_time_2 = 0;
    // Optional: Check FIFO1 if used
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001cb6:	e0ac      	b.n	8001e12 <processCAN+0x162>
        if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 8001cb8:	463b      	mov	r3, r7
 8001cba:	f107 0208 	add.w	r2, r7, #8
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	485a      	ldr	r0, [pc, #360]	@ (8001e2c <processCAN+0x17c>)
 8001cc2:	f001 fe06 	bl	80038d2 <HAL_CAN_GetRxMessage>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f040 809f 	bne.w	8001e0c <processCAN+0x15c>
            // Process the received message
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8001cce:	68b9      	ldr	r1, [r7, #8]
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 8001cd0:	783b      	ldrb	r3, [r7, #0]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8001cd2:	4618      	mov	r0, r3
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 8001cd4:	787b      	ldrb	r3, [r7, #1]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8001cd6:	461c      	mov	r4, r3
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 8001cd8:	78bb      	ldrb	r3, [r7, #2]
 8001cda:	78fa      	ldrb	r2, [r7, #3]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8001cdc:	9201      	str	r2, [sp, #4]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4852      	ldr	r0, [pc, #328]	@ (8001e30 <processCAN+0x180>)
 8001ce6:	f00d faf5 	bl	800f2d4 <iprintf>
            if (rxHeader.StdId == 0x101) {
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f240 1201 	movw	r2, #257	@ 0x101
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d142      	bne.n	8001d7a <processCAN+0xca>
				static uint8_t buffer[sizeof(user_input_data_t)];
				static uint8_t offset = 0;

				// Copy received data into buffer
				uint8_t bytesToCopy = (rxHeader.DLC < sizeof(user_input_data_t) - offset) ? rxHeader.DLC : sizeof(user_input_data_t) - offset;
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e34 <processCAN+0x184>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f1c3 020a 	rsb	r2, r3, #10
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	bf28      	it	cs
 8001d02:	4613      	movcs	r3, r2
 8001d04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				memcpy(&buffer[offset], rxData, bytesToCopy);
 8001d08:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <processCAN+0x184>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e38 <processCAN+0x188>)
 8001d10:	4413      	add	r3, r2
 8001d12:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001d16:	4639      	mov	r1, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f00d fd38 	bl	800f78e <memcpy>
				offset += bytesToCopy;
 8001d1e:	4b45      	ldr	r3, [pc, #276]	@ (8001e34 <processCAN+0x184>)
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d26:	4413      	add	r3, r2
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b42      	ldr	r3, [pc, #264]	@ (8001e34 <processCAN+0x184>)
 8001d2c:	701a      	strb	r2, [r3, #0]

				// Check if the entire packet has been received
				if (offset >= sizeof(user_input_data_t)) {
 8001d2e:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <processCAN+0x184>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	d911      	bls.n	8001d5a <processCAN+0xaa>
					// Copy buffer into the telemetry_packet struct
					memcpy(&user_input_data, buffer, sizeof(user_input_data_t));
 8001d36:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <processCAN+0x18c>)
 8001d38:	4a3f      	ldr	r2, [pc, #252]	@ (8001e38 <processCAN+0x188>)
 8001d3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d3c:	c303      	stmia	r3!, {r0, r1}
 8001d3e:	801a      	strh	r2, [r3, #0]
					offset = 0; // Reset offset for the next packet
 8001d40:	4b3c      	ldr	r3, [pc, #240]	@ (8001e34 <processCAN+0x184>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
					gDebugCounter1++;
 8001d46:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <processCAN+0x190>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e40 <processCAN+0x190>)
 8001d4e:	6013      	str	r3, [r2, #0]
					last_receive_time_1 = HAL_GetTick();
 8001d50:	f000 fe46 	bl	80029e0 <HAL_GetTick>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a3b      	ldr	r2, [pc, #236]	@ (8001e44 <processCAN+0x194>)
 8001d58:	6013      	str	r3, [r2, #0]
				}
				if (HAL_GetTick() - last_receive_time_1 > 500) {
 8001d5a:	f000 fe41 	bl	80029e0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <processCAN+0x194>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d6a:	d952      	bls.n	8001e12 <processCAN+0x162>
					printf("CAN data timeout: Resetting buffer!\n");
 8001d6c:	4836      	ldr	r0, [pc, #216]	@ (8001e48 <processCAN+0x198>)
 8001d6e:	f00d fb19 	bl	800f3a4 <puts>
					offset = 0;  // Prevent infinite accumulation
 8001d72:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <processCAN+0x184>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e04b      	b.n	8001e12 <processCAN+0x162>
				}
			}
            else if (rxHeader.StdId == 0x102) {
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001d80:	d147      	bne.n	8001e12 <processCAN+0x162>
				static uint8_t buffer[sizeof(pedal_data_t)];
				static uint8_t offset = 0;

				// Copy received data into buffer
				uint8_t bytesToCopy = (rxHeader.DLC < sizeof(pedal_data_t) - offset) ? rxHeader.DLC : sizeof(pedal_data_t) - offset;
 8001d82:	4b32      	ldr	r3, [pc, #200]	@ (8001e4c <processCAN+0x19c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f1c3 0206 	rsb	r2, r3, #6
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	bf28      	it	cs
 8001d90:	4613      	movcs	r3, r2
 8001d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				memcpy(&buffer[offset], rxData, bytesToCopy);
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <processCAN+0x19c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e50 <processCAN+0x1a0>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001da4:	4639      	mov	r1, r7
 8001da6:	4618      	mov	r0, r3
 8001da8:	f00d fcf1 	bl	800f78e <memcpy>
				offset += bytesToCopy;
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <processCAN+0x19c>)
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001db4:	4413      	add	r3, r2
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <processCAN+0x19c>)
 8001dba:	701a      	strb	r2, [r3, #0]

				// Check if the entire packet has been received
				if (offset >= sizeof(pedal_data_t)) {
 8001dbc:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <processCAN+0x19c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d913      	bls.n	8001dec <processCAN+0x13c>
					// Copy buffer into the telemetry_packet struct
					memcpy(&pedal_data, buffer, sizeof(pedal_data_t));
 8001dc4:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <processCAN+0x1a4>)
 8001dc6:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <processCAN+0x1a0>)
 8001dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dcc:	6018      	str	r0, [r3, #0]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	8019      	strh	r1, [r3, #0]
					offset = 0; // Reset offset for the next packet
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <processCAN+0x19c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
					gDebugCounter2++;
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <processCAN+0x1a8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <processCAN+0x1a8>)
 8001de0:	6013      	str	r3, [r2, #0]
					last_receive_time_2 = HAL_GetTick();
 8001de2:	f000 fdfd 	bl	80029e0 <HAL_GetTick>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e5c <processCAN+0x1ac>)
 8001dea:	6013      	str	r3, [r2, #0]
				}
				if (HAL_GetTick() - last_receive_time_2 > 500) {
 8001dec:	f000 fdf8 	bl	80029e0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <processCAN+0x1ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001dfc:	d909      	bls.n	8001e12 <processCAN+0x162>
					printf("CAN data timeout: Resetting buffer!\n");
 8001dfe:	4812      	ldr	r0, [pc, #72]	@ (8001e48 <processCAN+0x198>)
 8001e00:	f00d fad0 	bl	800f3a4 <puts>
					offset = 0;  // Prevent infinite accumulation
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <processCAN+0x19c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e002      	b.n	8001e12 <processCAN+0x162>
				}
			}

        } else {
            printf("Failed to retrieve CAN message\n");
 8001e0c:	4814      	ldr	r0, [pc, #80]	@ (8001e60 <processCAN+0x1b0>)
 8001e0e:	f00d fac9 	bl	800f3a4 <puts>
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001e12:	2101      	movs	r1, #1
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <processCAN+0x17c>)
 8001e16:	f001 fe7e 	bl	8003b16 <HAL_CAN_GetRxFifoFillLevel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f47f af4b 	bne.w	8001cb8 <processCAN+0x8>
        }
    }
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	372c      	adds	r7, #44	@ 0x2c
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}
 8001e2c:	20000394 	.word	0x20000394
 8001e30:	08010448 	.word	0x08010448
 8001e34:	200006f8 	.word	0x200006f8
 8001e38:	200006fc 	.word	0x200006fc
 8001e3c:	200003f0 	.word	0x200003f0
 8001e40:	20000428 	.word	0x20000428
 8001e44:	20000708 	.word	0x20000708
 8001e48:	08010488 	.word	0x08010488
 8001e4c:	2000070c 	.word	0x2000070c
 8001e50:	20000710 	.word	0x20000710
 8001e54:	200003fc 	.word	0x200003fc
 8001e58:	2000042c 	.word	0x2000042c
 8001e5c:	20000718 	.word	0x20000718
 8001e60:	080104ac 	.word	0x080104ac

08001e64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b37      	ldr	r3, [pc, #220]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a36      	ldr	r2, [pc, #216]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b30      	ldr	r3, [pc, #192]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b1f      	ldr	r3, [pc, #124]	@ (8001f5c <MX_GPIO_Init+0xf8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2130      	movs	r1, #48	@ 0x30
 8001eee:	481c      	ldr	r0, [pc, #112]	@ (8001f60 <MX_GPIO_Init+0xfc>)
 8001ef0:	f002 fb06 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2106      	movs	r1, #6
 8001ef8:	481a      	ldr	r0, [pc, #104]	@ (8001f64 <MX_GPIO_Init+0x100>)
 8001efa:	f002 fb01 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4814      	ldr	r0, [pc, #80]	@ (8001f68 <MX_GPIO_Init+0x104>)
 8001f16:	f002 f95f 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001f1a:	2330      	movs	r3, #48	@ 0x30
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480b      	ldr	r0, [pc, #44]	@ (8001f60 <MX_GPIO_Init+0xfc>)
 8001f32:	f002 f951 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001f36:	2306      	movs	r3, #6
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_GPIO_Init+0x100>)
 8001f4e:	f002 f943 	bl	80041d8 <HAL_GPIO_Init>

}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	@ 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020800 	.word	0x40020800

08001f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f70:	f000 fd00 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f74:	f000 f82a 	bl	8001fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f78:	f7ff ff74 	bl	8001e64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f7c:	f000 fae8 	bl	8002550 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f80:	f000 fb3a 	bl	80025f8 <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f84:	f000 fc34 	bl	80027f0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001f88:	f7fe ff48 	bl	8000e1c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001f8c:	f7fe ffdc 	bl	8000f48 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */



  init_encoder();
 8001f90:	f7ff fcbc 	bl	800190c <init_encoder>
  DWT_Init();
 8001f94:	f7ff fa40 	bl	8001418 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	480a      	ldr	r0, [pc, #40]	@ (8001fc4 <main+0x58>)
 8001f9c:	f004 ffbe 	bl	8006f1c <HAL_TIM_PWM_Start>

  MX_USB_DEVICE_Init();
 8001fa0:	f007 f9e6 	bl	8009370 <MX_USB_DEVICE_Init>

  HAL_CAN_Start(&hcan1);
 8001fa4:	4808      	ldr	r0, [pc, #32]	@ (8001fc8 <main+0x5c>)
 8001fa6:	f001 fb37 	bl	8003618 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001faa:	2110      	movs	r1, #16
 8001fac:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <main+0x5c>)
 8001fae:	f001 fdda 	bl	8003b66 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001fb2:	f7ff f89f 	bl	80010f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fb6:	f00a fc1f 	bl	800c7f8 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 8001fba:	f00b fd63 	bl	800da84 <vTaskStartScheduler>

  while (1)
 8001fbe:	bf00      	nop
 8001fc0:	e7fd      	b.n	8001fbe <main+0x52>
 8001fc2:	bf00      	nop
 8001fc4:	200007b0 	.word	0x200007b0
 8001fc8:	20000394 	.word	0x20000394

08001fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b094      	sub	sp, #80	@ 0x50
 8001fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	2234      	movs	r2, #52	@ 0x34
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00d faf6 	bl	800f5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	4b29      	ldr	r3, [pc, #164]	@ (800209c <SystemClock_Config+0xd0>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	4a28      	ldr	r2, [pc, #160]	@ (800209c <SystemClock_Config+0xd0>)
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002000:	4b26      	ldr	r3, [pc, #152]	@ (800209c <SystemClock_Config+0xd0>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800200c:	2300      	movs	r3, #0
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <SystemClock_Config+0xd4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002018:	4a21      	ldr	r2, [pc, #132]	@ (80020a0 <SystemClock_Config+0xd4>)
 800201a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b1f      	ldr	r3, [pc, #124]	@ (80020a0 <SystemClock_Config+0xd4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800202c:	2301      	movs	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002034:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002036:	2302      	movs	r3, #2
 8002038:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800203a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800203e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002040:	2304      	movs	r3, #4
 8002042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002044:	2348      	movs	r3, #72	@ 0x48
 8002046:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002048:	2302      	movs	r3, #2
 800204a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800204c:	2303      	movs	r3, #3
 800204e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002050:	2302      	movs	r3, #2
 8002052:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4618      	mov	r0, r3
 800205a:	f004 fba7 	bl	80067ac <HAL_RCC_OscConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002064:	f000 f854 	bl	8002110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002068:	230f      	movs	r3, #15
 800206a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800206c:	2302      	movs	r3, #2
 800206e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002078:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2102      	movs	r1, #2
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fcff 	bl	8005a88 <HAL_RCC_ClockConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002090:	f000 f83e 	bl	8002110 <Error_Handler>
  }
}
 8002094:	bf00      	nop
 8002096:	3750      	adds	r7, #80	@ 0x50
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	40007000 	.word	0x40007000

080020a4 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
	{
		processCAN();
 80020b6:	f7ff fdfb 	bl	8001cb0 <processCAN>
	}
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40006400 	.word	0x40006400

080020c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
	{
		processCAN();
 80020da:	f7ff fde9 	bl	8001cb0 <processCAN>
	}
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40006400 	.word	0x40006400

080020ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a04      	ldr	r2, [pc, #16]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020fe:	f000 fc5b 	bl	80029b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40001000 	.word	0x40001000

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <Error_Handler+0x8>

0800211c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_MspInit+0x54>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	4a11      	ldr	r2, [pc, #68]	@ (8002170 <HAL_MspInit+0x54>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002130:	6453      	str	r3, [r2, #68]	@ 0x44
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_MspInit+0x54>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_MspInit+0x54>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <HAL_MspInit+0x54>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	@ 0x40
 800214e:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_MspInit+0x54>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	210f      	movs	r1, #15
 800215e:	f06f 0001 	mvn.w	r0, #1
 8002162:	f002 f80f 	bl	8004184 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08e      	sub	sp, #56	@ 0x38
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <HAL_InitTick+0xe4>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	4a32      	ldr	r2, [pc, #200]	@ (8002258 <HAL_InitTick+0xe4>)
 800218e:	f043 0310 	orr.w	r3, r3, #16
 8002192:	6413      	str	r3, [r2, #64]	@ 0x40
 8002194:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <HAL_InitTick+0xe4>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a0:	f107 0210 	add.w	r2, r7, #16
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fd72 	bl	8005c94 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021ba:	f003 fd57 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80021be:	6378      	str	r0, [r7, #52]	@ 0x34
 80021c0:	e004      	b.n	80021cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021c2:	f003 fd53 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80021c6:	4603      	mov	r3, r0
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ce:	4a23      	ldr	r2, [pc, #140]	@ (800225c <HAL_InitTick+0xe8>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	0c9b      	lsrs	r3, r3, #18
 80021d6:	3b01      	subs	r3, #1
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021da:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <HAL_InitTick+0xec>)
 80021dc:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <HAL_InitTick+0xf0>)
 80021de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <HAL_InitTick+0xec>)
 80021e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002260 <HAL_InitTick+0xec>)
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <HAL_InitTick+0xec>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <HAL_InitTick+0xec>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <HAL_InitTick+0xec>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002200:	4817      	ldr	r0, [pc, #92]	@ (8002260 <HAL_InitTick+0xec>)
 8002202:	f004 fd71 	bl	8006ce8 <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800220c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002210:	2b00      	cmp	r3, #0
 8002212:	d11b      	bne.n	800224c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002214:	4812      	ldr	r0, [pc, #72]	@ (8002260 <HAL_InitTick+0xec>)
 8002216:	f004 fdc1 	bl	8006d9c <HAL_TIM_Base_Start_IT>
 800221a:	4603      	mov	r3, r0
 800221c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002220:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002224:	2b00      	cmp	r3, #0
 8002226:	d111      	bne.n	800224c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002228:	2036      	movs	r0, #54	@ 0x36
 800222a:	f001 ffc7 	bl	80041bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d808      	bhi.n	8002246 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	2036      	movs	r0, #54	@ 0x36
 800223a:	f001 ffa3 	bl	8004184 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <HAL_InitTick+0xf4>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e002      	b.n	800224c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800224c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002250:	4618      	mov	r0, r3
 8002252:	3738      	adds	r7, #56	@ 0x38
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	431bde83 	.word	0x431bde83
 8002260:	2000071c 	.word	0x2000071c
 8002264:	40001000 	.word	0x40001000
 8002268:	20000008 	.word	0x20000008

0800226c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002270:	f3bf 8f4f 	dsb	sy
}
 8002274:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <__NVIC_SystemReset+0x24>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800227e:	4904      	ldr	r1, [pc, #16]	@ (8002290 <__NVIC_SystemReset+0x24>)
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <__NVIC_SystemReset+0x28>)
 8002282:	4313      	orrs	r3, r2
 8002284:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002286:	f3bf 8f4f 	dsb	sy
}
 800228a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <__NVIC_SystemReset+0x20>
 8002290:	e000ed00 	.word	0xe000ed00
 8002294:	05fa0004 	.word	0x05fa0004

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <NMI_Handler+0x4>

080022a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0d6      	sub	sp, #344	@ 0x158
 80022a4:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 80022a6:	f01e 0f04 	tst.w	lr, #4
 80022aa:	bf0c      	ite	eq
 80022ac:	f3ef 8308 	mrseq	r3, MSP
 80022b0:	f3ef 8309 	mrsne	r3, PSP
 80022b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 80022b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 80022c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 80022cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 80022d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 80022e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 80022ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 80022f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 80022fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 8002308:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <HardFault_Handler+0xc4>)
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 8002310:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HardFault_Handler+0xc4>)
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 8002318:	1d38      	adds	r0, r7, #4
 800231a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800231e:	9308      	str	r3, [sp, #32]
 8002320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002324:	9307      	str	r3, [sp, #28]
 8002326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800232a:	9306      	str	r3, [sp, #24]
 800232c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002330:	9305      	str	r3, [sp, #20]
 8002332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002336:	9304      	str	r3, [sp, #16]
 8002338:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800233c:	9303      	str	r3, [sp, #12]
 800233e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002354:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <HardFault_Handler+0xc8>)
 8002356:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800235a:	f00d f82b 	bl	800f3b4 <sniprintf>
	);

	// Log the message
//	log_message(log_buffer);

	NVIC_SystemReset();
 800235e:	f7ff ff85 	bl	800226c <__NVIC_SystemReset>
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00
 8002368:	080104cc 	.word	0x080104cc

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <MemManage_Handler+0x4>

08002374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <BusFault_Handler+0x4>

0800237c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <UsageFault_Handler+0x4>

08002384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <CAN1_RX0_IRQHandler+0x10>)
 800239a:	f001 fc0a 	bl	8003bb2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000394 	.word	0x20000394

080023a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023ac:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <CAN1_RX1_IRQHandler+0x10>)
 80023ae:	f001 fc00 	bl	8003bb2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000394 	.word	0x20000394

080023bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023c0:	4802      	ldr	r0, [pc, #8]	@ (80023cc <TIM6_DAC_IRQHandler+0x10>)
 80023c2:	f004 ffa7 	bl	8007314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000071c 	.word	0x2000071c

080023d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023d4:	4802      	ldr	r0, [pc, #8]	@ (80023e0 <OTG_FS_IRQHandler+0x10>)
 80023d6:	f002 f9f7 	bl	80047c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200007f8 	.word	0x200007f8

080023e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e00a      	b.n	800240c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f6:	f3af 8000 	nop.w
 80023fa:	4601      	mov	r1, r0
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	60ba      	str	r2, [r7, #8]
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	dbf0      	blt.n	80023f6 <_read+0x12>
  }

  return len;
 8002414:	687b      	ldr	r3, [r7, #4]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e009      	b.n	8002444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	60ba      	str	r2, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	dbf1      	blt.n	8002430 <_write+0x12>
  }
  return len;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_close>:

int _close(int file)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247e:	605a      	str	r2, [r3, #4]
  return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_isatty>:

int _isatty(int file)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c8:	4a14      	ldr	r2, [pc, #80]	@ (800251c <_sbrk+0x5c>)
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <_sbrk+0x60>)
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d4:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <_sbrk+0x64>)
 80024de:	4a12      	ldr	r2, [pc, #72]	@ (8002528 <_sbrk+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d207      	bcs.n	8002500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f0:	f00d f920 	bl	800f734 <__errno>
 80024f4:	4603      	mov	r3, r0
 80024f6:	220c      	movs	r2, #12
 80024f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	e009      	b.n	8002514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <_sbrk+0x64>)
 8002510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20020000 	.word	0x20020000
 8002520:	00000400 	.word	0x00000400
 8002524:	20000764 	.word	0x20000764
 8002528:	20005518 	.word	0x20005518

0800252c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <SystemInit+0x20>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	4a05      	ldr	r2, [pc, #20]	@ (800254c <SystemInit+0x20>)
 8002538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800253c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	@ 0x30
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2224      	movs	r2, #36	@ 0x24
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f00d f834 	bl	800f5cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800256c:	4b21      	ldr	r3, [pc, #132]	@ (80025f4 <MX_TIM2_Init+0xa4>)
 800256e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <MX_TIM2_Init+0xa4>)
 8002576:	2200      	movs	r2, #0
 8002578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <MX_TIM2_Init+0xa4>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002580:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <MX_TIM2_Init+0xa4>)
 8002582:	f04f 32ff 	mov.w	r2, #4294967295
 8002586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002588:	4b1a      	ldr	r3, [pc, #104]	@ (80025f4 <MX_TIM2_Init+0xa4>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <MX_TIM2_Init+0xa4>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002594:	2303      	movs	r3, #3
 8002596:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800259c:	2301      	movs	r3, #1
 800259e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025ac:	2301      	movs	r3, #1
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	4619      	mov	r1, r3
 80025be:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <MX_TIM2_Init+0xa4>)
 80025c0:	f004 fd74 	bl	80070ac <HAL_TIM_Encoder_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80025ca:	f7ff fda1 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	4619      	mov	r1, r3
 80025da:	4806      	ldr	r0, [pc, #24]	@ (80025f4 <MX_TIM2_Init+0xa4>)
 80025dc:	f005 faf6 	bl	8007bcc <HAL_TIMEx_MasterConfigSynchronization>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80025e6:	f7ff fd93 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	3730      	adds	r7, #48	@ 0x30
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000768 	.word	0x20000768

080025f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fe:	f107 0320 	add.w	r3, r7, #32
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	611a      	str	r2, [r3, #16]
 8002616:	615a      	str	r2, [r3, #20]
 8002618:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800261a:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <MX_TIM3_Init+0xac>)
 800261c:	4a22      	ldr	r2, [pc, #136]	@ (80026a8 <MX_TIM3_Init+0xb0>)
 800261e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 -1;
 8002620:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <MX_TIM3_Init+0xac>)
 8002622:	2253      	movs	r2, #83	@ 0x53
 8002624:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002626:	4b1f      	ldr	r3, [pc, #124]	@ (80026a4 <MX_TIM3_Init+0xac>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 800262c:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <MX_TIM3_Init+0xac>)
 800262e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002632:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <MX_TIM3_Init+0xac>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263a:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <MX_TIM3_Init+0xac>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002640:	4818      	ldr	r0, [pc, #96]	@ (80026a4 <MX_TIM3_Init+0xac>)
 8002642:	f004 fc1b 	bl	8006e7c <HAL_TIM_PWM_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800264c:	f7ff fd60 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002658:	f107 0320 	add.w	r3, r7, #32
 800265c:	4619      	mov	r1, r3
 800265e:	4811      	ldr	r0, [pc, #68]	@ (80026a4 <MX_TIM3_Init+0xac>)
 8002660:	f005 fab4 	bl	8007bcc <HAL_TIMEx_MasterConfigSynchronization>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800266a:	f7ff fd51 	bl	8002110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800266e:	2360      	movs	r3, #96	@ 0x60
 8002670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002672:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	2200      	movs	r2, #0
 8002684:	4619      	mov	r1, r3
 8002686:	4807      	ldr	r0, [pc, #28]	@ (80026a4 <MX_TIM3_Init+0xac>)
 8002688:	f004 ff34 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002692:	f7ff fd3d 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002696:	4803      	ldr	r0, [pc, #12]	@ (80026a4 <MX_TIM3_Init+0xac>)
 8002698:	f000 f870 	bl	800277c <HAL_TIM_MspPostInit>

}
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	@ 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200007b0 	.word	0x200007b0
 80026a8:	40000400 	.word	0x40000400

080026ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026cc:	d12b      	bne.n	8002726 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <HAL_TIM_Encoder_MspInit+0x84>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <HAL_TIM_Encoder_MspInit+0x84>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <HAL_TIM_Encoder_MspInit+0x84>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_TIM_Encoder_MspInit+0x84>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002730 <HAL_TIM_Encoder_MspInit+0x84>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_TIM_Encoder_MspInit+0x84>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002706:	2303      	movs	r3, #3
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002716:	2301      	movs	r3, #1
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4804      	ldr	r0, [pc, #16]	@ (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 8002722:	f001 fd59 	bl	80041d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_TIM_PWM_MspInit+0x3c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10d      	bne.n	8002766 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_TIM_PWM_MspInit+0x40>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <HAL_TIM_PWM_MspInit+0x40>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <HAL_TIM_PWM_MspInit+0x40>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40000400 	.word	0x40000400
 8002778:	40023800 	.word	0x40023800

0800277c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <HAL_TIM_MspPostInit+0x68>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d11d      	bne.n	80027da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	4a10      	ldr	r2, [pc, #64]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ae:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027ba:	2340      	movs	r3, #64	@ 0x40
 80027bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	@ (80027ec <HAL_TIM_MspPostInit+0x70>)
 80027d6:	f001 fcff 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000

080027f0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80027f4:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80027fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027fe:	2206      	movs	r2, #6
 8002800:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002802:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002804:	2202      	movs	r2, #2
 8002806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800280a:	2200      	movs	r2, #0
 800280c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002810:	2202      	movs	r2, #2
 8002812:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002816:	2200      	movs	r2, #0
 8002818:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800281c:	2200      	movs	r2, #0
 800281e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002822:	2200      	movs	r2, #0
 8002824:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002826:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002828:	2200      	movs	r2, #0
 800282a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800282e:	2200      	movs	r2, #0
 8002830:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002832:	4805      	ldr	r0, [pc, #20]	@ (8002848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002834:	f001 fe7d 	bl	8004532 <HAL_PCD_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800283e:	f7ff fc67 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200007f8 	.word	0x200007f8

0800284c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0a0      	sub	sp, #128	@ 0x80
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	225c      	movs	r2, #92	@ 0x5c
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f00c fead 	bl	800f5cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800287a:	d149      	bne.n	8002910 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800287c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002880:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002882:	2300      	movs	r3, #0
 8002884:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fa34 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8002896:	f7ff fc3b 	bl	8002110 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <HAL_PCD_MspInit+0xcc>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002918 <HAL_PCD_MspInit+0xcc>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <HAL_PCD_MspInit+0xcc>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80028ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80028c8:	230a      	movs	r3, #10
 80028ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80028d0:	4619      	mov	r1, r3
 80028d2:	4812      	ldr	r0, [pc, #72]	@ (800291c <HAL_PCD_MspInit+0xd0>)
 80028d4:	f001 fc80 	bl	80041d8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80028d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <HAL_PCD_MspInit+0xcc>)
 80028da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002918 <HAL_PCD_MspInit+0xcc>)
 80028de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_PCD_MspInit+0xcc>)
 80028ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <HAL_PCD_MspInit+0xcc>)
 80028ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f4:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_PCD_MspInit+0xcc>)
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2106      	movs	r1, #6
 8002904:	2043      	movs	r0, #67	@ 0x43
 8002906:	f001 fc3d 	bl	8004184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800290a:	2043      	movs	r0, #67	@ 0x43
 800290c:	f001 fc56 	bl	80041bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002910:	bf00      	nop
 8002912:	3780      	adds	r7, #128	@ 0x80
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	40020000 	.word	0x40020000

08002920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002958 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002924:	f7ff fe02 	bl	800252c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800294e:	f00c fef7 	bl	800f740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002952:	f7ff fb0b 	bl	8001f6c <main>
  bx  lr    
 8002956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8002964:	08010610 	.word	0x08010610
  ldr r2, =_sbss
 8002968:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 800296c:	20005514 	.word	0x20005514

08002970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC_IRQHandler>
	...

08002974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <HAL_Init+0x40>)
 800297e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <HAL_Init+0x40>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800298e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <HAL_Init+0x40>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f001 fbe6 	bl	800416e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	200f      	movs	r0, #15
 80029a4:	f7ff fbe6 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fbb8 	bl	800211c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_IncTick+0x20>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_IncTick+0x24>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <HAL_IncTick+0x24>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000000c 	.word	0x2000000c
 80029dc:	20000cdc 	.word	0x20000cdc

080029e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <HAL_GetTick+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000cdc 	.word	0x20000cdc

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff ffee 	bl	80029e0 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_Delay+0x44>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffde 	bl	80029e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000000c 	.word	0x2000000c

08002a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e033      	b.n	8002abe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fa2e 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a86:	f023 0302 	bic.w	r3, r3, #2
 8002a8a:	f043 0202 	orr.w	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fae8 	bl	8003068 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
 8002aae:	e001      	b.n	8002ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_Start+0x1a>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0b2      	b.n	8002c48 <HAL_ADC_Start+0x180>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d018      	beq.n	8002b2a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b08:	4b52      	ldr	r3, [pc, #328]	@ (8002c54 <HAL_ADC_Start+0x18c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_ADC_Start+0x190>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9a      	lsrs	r2, r3, #18
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d17a      	bne.n	8002c2e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b62:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b76:	d106      	bne.n	8002b86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	f023 0206 	bic.w	r2, r3, #6
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b84:	e002      	b.n	8002b8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b94:	4b31      	ldr	r3, [pc, #196]	@ (8002c5c <HAL_ADC_Start+0x194>)
 8002b96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d12a      	bne.n	8002c04 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c60 <HAL_ADC_Start+0x198>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d015      	beq.n	8002be4 <HAL_ADC_Start+0x11c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a29      	ldr	r2, [pc, #164]	@ (8002c64 <HAL_ADC_Start+0x19c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d105      	bne.n	8002bce <HAL_ADC_Start+0x106>
 8002bc2:	4b26      	ldr	r3, [pc, #152]	@ (8002c5c <HAL_ADC_Start+0x194>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <HAL_ADC_Start+0x1a0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d136      	bne.n	8002c46 <HAL_ADC_Start+0x17e>
 8002bd8:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <HAL_ADC_Start+0x194>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d130      	bne.n	8002c46 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d129      	bne.n	8002c46 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	e020      	b.n	8002c46 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <HAL_ADC_Start+0x198>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d11b      	bne.n	8002c46 <HAL_ADC_Start+0x17e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d114      	bne.n	8002c46 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e00b      	b.n	8002c46 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f043 0210 	orr.w	r2, r3, #16
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	20000004 	.word	0x20000004
 8002c58:	431bde83 	.word	0x431bde83
 8002c5c:	40012300 	.word	0x40012300
 8002c60:	40012000 	.word	0x40012000
 8002c64:	40012100 	.word	0x40012100
 8002c68:	40012200 	.word	0x40012200

08002c6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Stop+0x16>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e021      	b.n	8002cc6 <HAL_ADC_Stop+0x5a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cee:	d113      	bne.n	8002d18 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cfe:	d10b      	bne.n	8002d18 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e063      	b.n	8002de0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d18:	f7ff fe62 	bl	80029e0 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d1e:	e021      	b.n	8002d64 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d01d      	beq.n	8002d64 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <HAL_ADC_PollForConversion+0x6c>
 8002d2e:	f7ff fe57 	bl	80029e0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d212      	bcs.n	8002d64 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d00b      	beq.n	8002d64 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	f043 0204 	orr.w	r2, r3, #4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e03d      	b.n	8002de0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d1d6      	bne.n	8002d20 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f06f 0212 	mvn.w	r2, #18
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d123      	bne.n	8002dde <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11f      	bne.n	8002dde <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d111      	bne.n	8002dde <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1c>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e113      	b.n	8003048 <HAL_ADC_ConfigChannel+0x244>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	d925      	bls.n	8002e7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68d9      	ldr	r1, [r3, #12]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	3b1e      	subs	r3, #30
 8002e46:	2207      	movs	r2, #7
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	400a      	ands	r2, r1
 8002e54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68d9      	ldr	r1, [r3, #12]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	4603      	mov	r3, r0
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4403      	add	r3, r0
 8002e6e:	3b1e      	subs	r3, #30
 8002e70:	409a      	lsls	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	e022      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6919      	ldr	r1, [r3, #16]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	2207      	movs	r2, #7
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6919      	ldr	r1, [r3, #16]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4403      	add	r3, r0
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d824      	bhi.n	8002f14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	3b05      	subs	r3, #5
 8002edc:	221f      	movs	r2, #31
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	400a      	ands	r2, r1
 8002eea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	4618      	mov	r0, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	3b05      	subs	r3, #5
 8002f06:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f12:	e04c      	b.n	8002fae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	d824      	bhi.n	8002f66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b23      	subs	r3, #35	@ 0x23
 8002f2e:	221f      	movs	r2, #31
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43da      	mvns	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	3b23      	subs	r3, #35	@ 0x23
 8002f58:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f64:	e023      	b.n	8002fae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	3b41      	subs	r3, #65	@ 0x41
 8002f78:	221f      	movs	r2, #31
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	400a      	ands	r2, r1
 8002f86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4618      	mov	r0, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3b41      	subs	r3, #65	@ 0x41
 8002fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fae:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <HAL_ADC_ConfigChannel+0x250>)
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a28      	ldr	r2, [pc, #160]	@ (8003058 <HAL_ADC_ConfigChannel+0x254>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d10f      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1d8>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b12      	cmp	r3, #18
 8002fc2:	d10b      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8003058 <HAL_ADC_ConfigChannel+0x254>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d12b      	bne.n	800303e <HAL_ADC_ConfigChannel+0x23a>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	@ (800305c <HAL_ADC_ConfigChannel+0x258>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b11      	cmp	r3, #17
 8002ff6:	d122      	bne.n	800303e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a11      	ldr	r2, [pc, #68]	@ (800305c <HAL_ADC_ConfigChannel+0x258>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d111      	bne.n	800303e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_ADC_ConfigChannel+0x25c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a11      	ldr	r2, [pc, #68]	@ (8003064 <HAL_ADC_ConfigChannel+0x260>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	0c9a      	lsrs	r2, r3, #18
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003030:	e002      	b.n	8003038 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3b01      	subs	r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f9      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40012300 	.word	0x40012300
 8003058:	40012000 	.word	0x40012000
 800305c:	10000012 	.word	0x10000012
 8003060:	20000004 	.word	0x20000004
 8003064:	431bde83 	.word	0x431bde83

08003068 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003070:	4b79      	ldr	r3, [pc, #484]	@ (8003258 <ADC_Init+0x1f0>)
 8003072:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800309c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	021a      	lsls	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	4a58      	ldr	r2, [pc, #352]	@ (800325c <ADC_Init+0x1f4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800310e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6899      	ldr	r1, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6899      	ldr	r1, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e00f      	b.n	8003166 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003164:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0202 	bic.w	r2, r2, #2
 8003174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7e1b      	ldrb	r3, [r3, #24]
 8003180:	005a      	lsls	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01b      	beq.n	80031cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	3b01      	subs	r3, #1
 80031c0:	035a      	lsls	r2, r3, #13
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	e007      	b.n	80031dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	051a      	lsls	r2, r3, #20
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800321e:	025a      	lsls	r2, r3, #9
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	029a      	lsls	r2, r3, #10
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40012300 	.word	0x40012300
 800325c:	0f000001 	.word	0x0f000001

08003260 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0ed      	b.n	800344e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd feb4 	bl	8000fec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003294:	f7ff fba4 	bl	80029e0 <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800329a:	e012      	b.n	80032c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800329c:	f7ff fba0 	bl	80029e0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b0a      	cmp	r3, #10
 80032a8:	d90b      	bls.n	80032c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2205      	movs	r2, #5
 80032ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0c5      	b.n	800344e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0e5      	beq.n	800329c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0202 	bic.w	r2, r2, #2
 80032de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e0:	f7ff fb7e 	bl	80029e0 <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032e6:	e012      	b.n	800330e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032e8:	f7ff fb7a 	bl	80029e0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b0a      	cmp	r3, #10
 80032f4:	d90b      	bls.n	800330e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2205      	movs	r2, #5
 8003306:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e09f      	b.n	800344e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e5      	bne.n	80032e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7e1b      	ldrb	r3, [r3, #24]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d108      	bne.n	8003336 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e007      	b.n	8003346 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7e5b      	ldrb	r3, [r3, #25]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d108      	bne.n	8003360 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e007      	b.n	8003370 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800336e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e9b      	ldrb	r3, [r3, #26]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d108      	bne.n	800338a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e007      	b.n	800339a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0220 	bic.w	r2, r2, #32
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7edb      	ldrb	r3, [r3, #27]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d108      	bne.n	80033b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0210 	bic.w	r2, r2, #16
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e007      	b.n	80033c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0210 	orr.w	r2, r2, #16
 80033c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7f1b      	ldrb	r3, [r3, #28]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d108      	bne.n	80033de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0208 	orr.w	r2, r2, #8
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e007      	b.n	80033ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0208 	bic.w	r2, r2, #8
 80033ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7f5b      	ldrb	r3, [r3, #29]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d108      	bne.n	8003408 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0204 	orr.w	r2, r2, #4
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e007      	b.n	8003418 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	ea42 0103 	orr.w	r1, r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d003      	beq.n	800347e <HAL_CAN_ConfigFilter+0x26>
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	2b02      	cmp	r3, #2
 800347a:	f040 80be 	bne.w	80035fa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800347e:	4b65      	ldr	r3, [pc, #404]	@ (8003614 <HAL_CAN_ConfigFilter+0x1bc>)
 8003480:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003498:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	431a      	orrs	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2201      	movs	r2, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	401a      	ands	r2, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d123      	bne.n	8003528 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	401a      	ands	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003502:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3248      	adds	r2, #72	@ 0x48
 8003508:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800351c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800351e:	6979      	ldr	r1, [r7, #20]
 8003520:	3348      	adds	r3, #72	@ 0x48
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d122      	bne.n	8003576 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	431a      	orrs	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003550:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3248      	adds	r2, #72	@ 0x48
 8003556:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800356a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800356c:	6979      	ldr	r1, [r7, #20]
 800356e:	3348      	adds	r3, #72	@ 0x48
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	440b      	add	r3, r1
 8003574:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	401a      	ands	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003590:	e007      	b.n	80035a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	431a      	orrs	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	401a      	ands	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80035bc:	e007      	b.n	80035ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	431a      	orrs	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035ec:	f023 0201 	bic.w	r2, r3, #1
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e006      	b.n	8003608 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40006400 	.word	0x40006400

08003618 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d12e      	bne.n	800368a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003644:	f7ff f9cc 	bl	80029e0 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800364a:	e012      	b.n	8003672 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800364c:	f7ff f9c8 	bl	80029e0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b0a      	cmp	r3, #10
 8003658:	d90b      	bls.n	8003672 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2205      	movs	r2, #5
 800366a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e012      	b.n	8003698 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e006      	b.n	8003698 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d133      	bne.n	800371c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036c4:	f7ff f98c 	bl	80029e0 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036ca:	e012      	b.n	80036f2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036cc:	f7ff f988 	bl	80029e0 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b0a      	cmp	r3, #10
 80036d8:	d90b      	bls.n	80036f2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2205      	movs	r2, #5
 80036ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e01b      	b.n	800372a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0e5      	beq.n	80036cc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0202 	bic.w	r2, r2, #2
 800370e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e006      	b.n	800372a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003732:	b480      	push	{r7}
 8003734:	b089      	sub	sp, #36	@ 0x24
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003746:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003750:	7ffb      	ldrb	r3, [r7, #31]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d003      	beq.n	800375e <HAL_CAN_AddTxMessage+0x2c>
 8003756:	7ffb      	ldrb	r3, [r7, #31]
 8003758:	2b02      	cmp	r3, #2
 800375a:	f040 80ad 	bne.w	80038b8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8095 	beq.w	80038a8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	0e1b      	lsrs	r3, r3, #24
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003788:	2201      	movs	r2, #1
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	409a      	lsls	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80037a4:	68f9      	ldr	r1, [r7, #12]
 80037a6:	6809      	ldr	r1, [r1, #0]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3318      	adds	r3, #24
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	440b      	add	r3, r1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e00f      	b.n	80037d6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037c0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037c6:	68f9      	ldr	r1, [r7, #12]
 80037c8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80037ca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3318      	adds	r3, #24
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	440b      	add	r3, r1
 80037d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	3318      	adds	r3, #24
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	440b      	add	r3, r1
 80037e6:	3304      	adds	r3, #4
 80037e8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	7d1b      	ldrb	r3, [r3, #20]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d111      	bne.n	8003816 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	3318      	adds	r3, #24
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3318      	adds	r3, #24
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	440b      	add	r3, r1
 8003812:	3304      	adds	r3, #4
 8003814:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3307      	adds	r3, #7
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	061a      	lsls	r2, r3, #24
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3306      	adds	r3, #6
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3305      	adds	r3, #5
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4313      	orrs	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	3204      	adds	r2, #4
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	4610      	mov	r0, r2
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	6811      	ldr	r1, [r2, #0]
 800383e:	ea43 0200 	orr.w	r2, r3, r0
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	440b      	add	r3, r1
 8003848:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800384c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3303      	adds	r3, #3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	061a      	lsls	r2, r3, #24
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3302      	adds	r3, #2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3301      	adds	r3, #1
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	4313      	orrs	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	4610      	mov	r0, r2
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	6811      	ldr	r1, [r2, #0]
 8003874:	ea43 0200 	orr.w	r2, r3, r0
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	440b      	add	r3, r1
 800387e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003882:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3318      	adds	r3, #24
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	4413      	add	r3, r2
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	6811      	ldr	r1, [r2, #0]
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3318      	adds	r3, #24
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	440b      	add	r3, r1
 80038a2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e00e      	b.n	80038c6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e006      	b.n	80038c6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	@ 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80038d2:	b480      	push	{r7}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d003      	beq.n	80038f6 <HAL_CAN_GetRxMessage+0x24>
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	f040 8103 	bne.w	8003afc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10e      	bne.n	800391a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d116      	bne.n	8003938 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0f7      	b.n	8003b0a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0e8      	b.n	8003b0a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	331b      	adds	r3, #27
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0204 	and.w	r2, r3, #4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	331b      	adds	r3, #27
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4413      	add	r3, r2
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0d5b      	lsrs	r3, r3, #21
 8003966:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e00b      	b.n	8003988 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	331b      	adds	r3, #27
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	4413      	add	r3, r2
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	08db      	lsrs	r3, r3, #3
 8003980:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	331b      	adds	r3, #27
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	4413      	add	r3, r2
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0202 	and.w	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	331b      	adds	r3, #27
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	4413      	add	r3, r2
 80039aa:	3304      	adds	r3, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2208      	movs	r2, #8
 80039ba:	611a      	str	r2, [r3, #16]
 80039bc:	e00b      	b.n	80039d6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	331b      	adds	r3, #27
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	4413      	add	r3, r2
 80039ca:	3304      	adds	r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 020f 	and.w	r2, r3, #15
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	331b      	adds	r3, #27
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	4413      	add	r3, r2
 80039e2:	3304      	adds	r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	331b      	adds	r3, #27
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0a1a      	lsrs	r2, r3, #8
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	3301      	adds	r3, #1
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	0c1a      	lsrs	r2, r3, #16
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0e1a      	lsrs	r2, r3, #24
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	3303      	adds	r3, #3
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	0a1a      	lsrs	r2, r3, #8
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	3305      	adds	r3, #5
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	0c1a      	lsrs	r2, r3, #16
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	3306      	adds	r3, #6
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	0e1a      	lsrs	r2, r3, #24
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	3307      	adds	r3, #7
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0220 	orr.w	r2, r2, #32
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	e007      	b.n	8003af8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0220 	orr.w	r2, r2, #32
 8003af6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e006      	b.n	8003b0a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d002      	beq.n	8003b38 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003b32:	7afb      	ldrb	r3, [r7, #11]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d10f      	bne.n	8003b58 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e005      	b.n	8003b58 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003b58:	68fb      	ldr	r3, [r7, #12]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b76:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d002      	beq.n	8003b84 <HAL_CAN_ActivateNotification+0x1e>
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d109      	bne.n	8003b98 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6959      	ldr	r1, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e006      	b.n	8003ba6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b08a      	sub	sp, #40	@ 0x28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d07c      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d023      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2201      	movs	r2, #1
 8003c08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f983 	bl	8003f20 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c1a:	e016      	b.n	8003c4a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2e:	e00c      	b.n	8003c4a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c42:	e002      	b.n	8003c4a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f989 	bl	8003f5c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d024      	beq.n	8003c9e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f963 	bl	8003f34 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c6e:	e016      	b.n	8003c9e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c82:	e00c      	b.n	8003c9e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c96:	e002      	b.n	8003c9e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f969 	bl	8003f70 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d024      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003cb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f943 	bl	8003f48 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cc2:	e016      	b.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd6:	e00c      	b.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cea:	e002      	b.n	8003cf2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f949 	bl	8003f84 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2210      	movs	r2, #16
 8003d14:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d006      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f930 	bl	8003f98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fe f9b9 	bl	80020c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00c      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2210      	movs	r2, #16
 8003d78:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2208      	movs	r2, #8
 8003d94:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f908 	bl	8003fac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fe f975 	bl	80020a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d006      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8f2 	bl	8003fc0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f8eb 	bl	8003fd4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d07b      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d072      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d043      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03e      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e80:	2b60      	cmp	r3, #96	@ 0x60
 8003e82:	d02b      	beq.n	8003edc <HAL_CAN_IRQHandler+0x32a>
 8003e84:	2b60      	cmp	r3, #96	@ 0x60
 8003e86:	d82e      	bhi.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
 8003e88:	2b50      	cmp	r3, #80	@ 0x50
 8003e8a:	d022      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x320>
 8003e8c:	2b50      	cmp	r3, #80	@ 0x50
 8003e8e:	d82a      	bhi.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	d019      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x316>
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	d826      	bhi.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
 8003e98:	2b30      	cmp	r3, #48	@ 0x30
 8003e9a:	d010      	beq.n	8003ebe <HAL_CAN_IRQHandler+0x30c>
 8003e9c:	2b30      	cmp	r3, #48	@ 0x30
 8003e9e:	d822      	bhi.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d002      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x2f8>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d005      	beq.n	8003eb4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ea8:	e01d      	b.n	8003ee6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	f043 0308 	orr.w	r3, r3, #8
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003eb2:	e019      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	f043 0310 	orr.w	r3, r3, #16
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ebc:	e014      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	f043 0320 	orr.w	r3, r3, #32
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ec6:	e00f      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ed0:	e00a      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003eda:	e005      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ee6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003ef6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2204      	movs	r2, #4
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f868 	bl	8003fe8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f18:	bf00      	nop
 8003f1a:	3728      	adds	r7, #40	@ 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <__NVIC_SetPriorityGrouping>:
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004024:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004030:	4013      	ands	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800403c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004046:	4a04      	ldr	r2, [pc, #16]	@ (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	60d3      	str	r3, [r2, #12]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <__NVIC_GetPriorityGrouping>:
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004060:	4b04      	ldr	r3, [pc, #16]	@ (8004074 <__NVIC_GetPriorityGrouping+0x18>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	f003 0307 	and.w	r3, r3, #7
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <__NVIC_EnableIRQ>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	db0b      	blt.n	80040a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	4907      	ldr	r1, [pc, #28]	@ (80040b0 <__NVIC_EnableIRQ+0x38>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2001      	movs	r0, #1
 800409a:	fa00 f202 	lsl.w	r2, r0, r2
 800409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e100 	.word	0xe000e100

080040b4 <__NVIC_SetPriority>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	@ (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	@ (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <NVIC_EncodePriority>:
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	@ 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf28      	it	cs
 8004126:	2304      	movcs	r3, #4
 8004128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3304      	adds	r3, #4
 800412e:	2b06      	cmp	r3, #6
 8004130:	d902      	bls.n	8004138 <NVIC_EncodePriority+0x30>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3b03      	subs	r3, #3
 8004136:	e000      	b.n	800413a <NVIC_EncodePriority+0x32>
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	401a      	ands	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004150:	f04f 31ff 	mov.w	r1, #4294967295
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	43d9      	mvns	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	4313      	orrs	r3, r2
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	@ 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ff4c 	bl	8004014 <__NVIC_SetPriorityGrouping>
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004196:	f7ff ff61 	bl	800405c <__NVIC_GetPriorityGrouping>
 800419a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f7ff ffb1 	bl	8004108 <NVIC_EncodePriority>
 80041a6:	4602      	mov	r2, r0
 80041a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff80 	bl	80040b4 <__NVIC_SetPriority>
}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff ff54 	bl	8004078 <__NVIC_EnableIRQ>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	@ 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e165      	b.n	80044c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041f4:	2201      	movs	r2, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	f040 8154 	bne.w	80044ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d005      	beq.n	800422a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004226:	2b02      	cmp	r3, #2
 8004228:	d130      	bne.n	800428c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004260:	2201      	movs	r2, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 0201 	and.w	r2, r3, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d017      	beq.n	80042c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2203      	movs	r2, #3
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d123      	bne.n	800431c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	08da      	lsrs	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3208      	adds	r2, #8
 80042dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	220f      	movs	r2, #15
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	08da      	lsrs	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3208      	adds	r2, #8
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	2203      	movs	r2, #3
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0203 	and.w	r2, r3, #3
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80ae 	beq.w	80044ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b5d      	ldr	r3, [pc, #372]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	4a5c      	ldr	r2, [pc, #368]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 8004368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800436c:	6453      	str	r3, [r2, #68]	@ 0x44
 800436e:	4b5a      	ldr	r3, [pc, #360]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437a:	4a58      	ldr	r2, [pc, #352]	@ (80044dc <HAL_GPIO_Init+0x304>)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a4f      	ldr	r2, [pc, #316]	@ (80044e0 <HAL_GPIO_Init+0x308>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d025      	beq.n	80043f2 <HAL_GPIO_Init+0x21a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4e      	ldr	r2, [pc, #312]	@ (80044e4 <HAL_GPIO_Init+0x30c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <HAL_GPIO_Init+0x216>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4d      	ldr	r2, [pc, #308]	@ (80044e8 <HAL_GPIO_Init+0x310>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d019      	beq.n	80043ea <HAL_GPIO_Init+0x212>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4c      	ldr	r2, [pc, #304]	@ (80044ec <HAL_GPIO_Init+0x314>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_GPIO_Init+0x20e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4b      	ldr	r2, [pc, #300]	@ (80044f0 <HAL_GPIO_Init+0x318>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00d      	beq.n	80043e2 <HAL_GPIO_Init+0x20a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4a      	ldr	r2, [pc, #296]	@ (80044f4 <HAL_GPIO_Init+0x31c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <HAL_GPIO_Init+0x206>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a49      	ldr	r2, [pc, #292]	@ (80044f8 <HAL_GPIO_Init+0x320>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_GPIO_Init+0x202>
 80043d6:	2306      	movs	r3, #6
 80043d8:	e00c      	b.n	80043f4 <HAL_GPIO_Init+0x21c>
 80043da:	2307      	movs	r3, #7
 80043dc:	e00a      	b.n	80043f4 <HAL_GPIO_Init+0x21c>
 80043de:	2305      	movs	r3, #5
 80043e0:	e008      	b.n	80043f4 <HAL_GPIO_Init+0x21c>
 80043e2:	2304      	movs	r3, #4
 80043e4:	e006      	b.n	80043f4 <HAL_GPIO_Init+0x21c>
 80043e6:	2303      	movs	r3, #3
 80043e8:	e004      	b.n	80043f4 <HAL_GPIO_Init+0x21c>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e002      	b.n	80043f4 <HAL_GPIO_Init+0x21c>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_GPIO_Init+0x21c>
 80043f2:	2300      	movs	r3, #0
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	f002 0203 	and.w	r2, r2, #3
 80043fa:	0092      	lsls	r2, r2, #2
 80043fc:	4093      	lsls	r3, r2
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004404:	4935      	ldr	r1, [pc, #212]	@ (80044dc <HAL_GPIO_Init+0x304>)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	3302      	adds	r3, #2
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004412:	4b3a      	ldr	r3, [pc, #232]	@ (80044fc <HAL_GPIO_Init+0x324>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004436:	4a31      	ldr	r2, [pc, #196]	@ (80044fc <HAL_GPIO_Init+0x324>)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800443c:	4b2f      	ldr	r3, [pc, #188]	@ (80044fc <HAL_GPIO_Init+0x324>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004460:	4a26      	ldr	r2, [pc, #152]	@ (80044fc <HAL_GPIO_Init+0x324>)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004466:	4b25      	ldr	r3, [pc, #148]	@ (80044fc <HAL_GPIO_Init+0x324>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800448a:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <HAL_GPIO_Init+0x324>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004490:	4b1a      	ldr	r3, [pc, #104]	@ (80044fc <HAL_GPIO_Init+0x324>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b4:	4a11      	ldr	r2, [pc, #68]	@ (80044fc <HAL_GPIO_Init+0x324>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3301      	adds	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	f67f ae96 	bls.w	80041f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3724      	adds	r7, #36	@ 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40020000 	.word	0x40020000
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020c00 	.word	0x40020c00
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40021400 	.word	0x40021400
 80044f8:	40021800 	.word	0x40021800
 80044fc:	40013c00 	.word	0x40013c00

08004500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004510:	787b      	ldrb	r3, [r7, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800451c:	e003      	b.n	8004526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	619a      	str	r2, [r3, #24]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b086      	sub	sp, #24
 8004536:	af02      	add	r7, sp, #8
 8004538:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e108      	b.n	8004756 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fe f974 	bl	800284c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2203      	movs	r2, #3
 8004568:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004572:	d102      	bne.n	800457a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f003 fccb 	bl	8007f1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7c1a      	ldrb	r2, [r3, #16]
 800458c:	f88d 2000 	strb.w	r2, [sp]
 8004590:	3304      	adds	r3, #4
 8004592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004594:	f003 fbaa 	bl	8007cec <USB_CoreInit>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0d5      	b.n	8004756 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2100      	movs	r1, #0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f003 fcc3 	bl	8007f3c <USB_SetCurrentMode>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0c6      	b.n	8004756 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e04a      	b.n	8004664 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3315      	adds	r3, #21
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3314      	adds	r3, #20
 80045f2:	7bfa      	ldrb	r2, [r7, #15]
 80045f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	b298      	uxth	r0, r3
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	332e      	adds	r3, #46	@ 0x2e
 800460a:	4602      	mov	r2, r0
 800460c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3318      	adds	r3, #24
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004622:	7bfa      	ldrb	r2, [r7, #15]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	331c      	adds	r3, #28
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004636:	7bfa      	ldrb	r2, [r7, #15]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	3320      	adds	r3, #32
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3324      	adds	r3, #36	@ 0x24
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	3301      	adds	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	791b      	ldrb	r3, [r3, #4]
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	429a      	cmp	r2, r3
 800466c:	d3af      	bcc.n	80045ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]
 8004672:	e044      	b.n	80046fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046b6:	7bfa      	ldrb	r2, [r7, #15]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	3301      	adds	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	791b      	ldrb	r3, [r3, #4]
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	429a      	cmp	r2, r3
 8004706:	d3b5      	bcc.n	8004674 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	7c1a      	ldrb	r2, [r3, #16]
 8004710:	f88d 2000 	strb.w	r2, [sp]
 8004714:	3304      	adds	r3, #4
 8004716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004718:	f003 fc5c 	bl	8007fd4 <USB_DevInit>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e013      	b.n	8004756 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7b1b      	ldrb	r3, [r3, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d102      	bne.n	800474a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 f96f 	bl	8005a28 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f004 fc99 	bl	8009086 <USB_DevDisconnect>

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_PCD_Start+0x1c>
 8004776:	2302      	movs	r3, #2
 8004778:	e022      	b.n	80047c0 <HAL_PCD_Start+0x62>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004792:	2b01      	cmp	r3, #1
 8004794:	d105      	bne.n	80047a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 fba6 	bl	8007ef8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f004 fc47 	bl	8009044 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b08d      	sub	sp, #52	@ 0x34
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f004 fd05 	bl	80091ee <USB_GetMode>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 84b9 	bne.w	800515e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f004 fc69 	bl	80090c8 <USB_ReadInterrupts>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 84af 	beq.w	800515c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f004 fc56 	bl	80090c8 <USB_ReadInterrupts>
 800481c:	4603      	mov	r3, r0
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b02      	cmp	r3, #2
 8004824:	d107      	bne.n	8004836 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f002 0202 	and.w	r2, r2, #2
 8004834:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f004 fc44 	bl	80090c8 <USB_ReadInterrupts>
 8004840:	4603      	mov	r3, r0
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b10      	cmp	r3, #16
 8004848:	d161      	bne.n	800490e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0210 	bic.w	r2, r2, #16
 8004858:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f003 020f 	and.w	r2, r3, #15
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	3304      	adds	r3, #4
 8004878:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	0c5b      	lsrs	r3, r3, #17
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	2b02      	cmp	r3, #2
 8004884:	d124      	bne.n	80048d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d035      	beq.n	80048fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800489c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	6a38      	ldr	r0, [r7, #32]
 80048a6:	f004 fa7b 	bl	8008da0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b6:	441a      	add	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	091b      	lsrs	r3, r3, #4
 80048c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c8:	441a      	add	r2, r3
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	615a      	str	r2, [r3, #20]
 80048ce:	e016      	b.n	80048fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	0c5b      	lsrs	r3, r3, #17
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d110      	bne.n	80048fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048e2:	2208      	movs	r2, #8
 80048e4:	4619      	mov	r1, r3
 80048e6:	6a38      	ldr	r0, [r7, #32]
 80048e8:	f004 fa5a 	bl	8008da0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f8:	441a      	add	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699a      	ldr	r2, [r3, #24]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0210 	orr.w	r2, r2, #16
 800490c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f004 fbd8 	bl	80090c8 <USB_ReadInterrupts>
 8004918:	4603      	mov	r3, r0
 800491a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800491e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004922:	f040 80a7 	bne.w	8004a74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f004 fbdd 	bl	80090ee <USB_ReadDevAllOutEpInterrupt>
 8004934:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004936:	e099      	b.n	8004a6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 808e 	beq.w	8004a60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f004 fc01 	bl	8009156 <USB_ReadDevOutEPInterrupt>
 8004954:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00c      	beq.n	800497a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	2301      	movs	r3, #1
 8004970:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004972:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fed1 	bl	800571c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00c      	beq.n	800499e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004990:	461a      	mov	r2, r3
 8004992:	2308      	movs	r3, #8
 8004994:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004996:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 ffa7 	bl	80058ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b4:	461a      	mov	r2, r3
 80049b6:	2310      	movs	r3, #16
 80049b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d030      	beq.n	8004a26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049cc:	2b80      	cmp	r3, #128	@ 0x80
 80049ce:	d109      	bne.n	80049e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	3304      	adds	r3, #4
 80049f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	78db      	ldrb	r3, [r3, #3]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d108      	bne.n	8004a14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f007 fcc0 	bl	800c394 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a20:	461a      	mov	r2, r3
 8004a22:	2302      	movs	r3, #2
 8004a24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2320      	movs	r3, #32
 8004a40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	3301      	adds	r3, #1
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f47f af62 	bne.w	8004938 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f004 fb25 	bl	80090c8 <USB_ReadInterrupts>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a88:	f040 80db 	bne.w	8004c42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f004 fb46 	bl	8009122 <USB_ReadDevAllInEpInterrupt>
 8004a96:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004a9c:	e0cd      	b.n	8004c3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80c2 	beq.w	8004c2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f004 fb6c 	bl	8009192 <USB_ReadDevInEPInterrupt>
 8004aba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d057      	beq.n	8004b76 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	2201      	movs	r2, #1
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ada:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69f9      	ldr	r1, [r7, #28]
 8004ae2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af6:	461a      	mov	r2, r3
 8004af8:	2301      	movs	r3, #1
 8004afa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	799b      	ldrb	r3, [r3, #6]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d132      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	3320      	adds	r3, #32
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4403      	add	r3, r0
 8004b24:	331c      	adds	r3, #28
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4419      	add	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4403      	add	r3, r0
 8004b38:	3320      	adds	r3, #32
 8004b3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d113      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x3a2>
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	3324      	adds	r3, #36	@ 0x24
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d108      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b62:	461a      	mov	r2, r3
 8004b64:	2101      	movs	r1, #1
 8004b66:	f004 fb73 	bl	8009250 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f007 fb8a 	bl	800c28a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2308      	movs	r3, #8
 8004b90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2310      	movs	r3, #16
 8004bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2340      	movs	r3, #64	@ 0x40
 8004bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004bd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bd6:	6a38      	ldr	r0, [r7, #32]
 8004bd8:	f003 fb5a 	bl	8008290 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bde:	4613      	mov	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	3310      	adds	r3, #16
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4413      	add	r3, r2
 8004bec:	3304      	adds	r3, #4
 8004bee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	78db      	ldrb	r3, [r3, #3]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d108      	bne.n	8004c0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f007 fbd7 	bl	800c3b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c16:	461a      	mov	r2, r3
 8004c18:	2302      	movs	r3, #2
 8004c1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fcea 	bl	8005602 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	3301      	adds	r3, #1
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f47f af2e 	bne.w	8004a9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f004 fa3e 	bl	80090c8 <USB_ReadInterrupts>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c56:	d122      	bne.n	8004c9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d108      	bne.n	8004c88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fef5 	bl	8005a70 <HAL_PCDEx_LPM_Callback>
 8004c86:	e002      	b.n	8004c8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f007 fb75 	bl	800c378 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f004 fa10 	bl	80090c8 <USB_ReadInterrupts>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb2:	d112      	bne.n	8004cda <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d102      	bne.n	8004cca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f007 fb31 	bl	800c32c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004cd8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f004 f9f2 	bl	80090c8 <USB_ReadInterrupts>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cee:	d121      	bne.n	8004d34 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004cfe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d111      	bne.n	8004d2e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d18:	089b      	lsrs	r3, r3, #2
 8004d1a:	f003 020f 	and.w	r2, r3, #15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d24:	2101      	movs	r1, #1
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fea2 	bl	8005a70 <HAL_PCDEx_LPM_Callback>
 8004d2c:	e002      	b.n	8004d34 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f007 fafc 	bl	800c32c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f004 f9c5 	bl	80090c8 <USB_ReadInterrupts>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d48:	f040 80b7 	bne.w	8004eba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2110      	movs	r1, #16
 8004d66:	4618      	mov	r0, r3
 8004d68:	f003 fa92 	bl	8008290 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d70:	e046      	b.n	8004e00 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004da0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004da4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004db8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004df4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004df8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	791b      	ldrb	r3, [r3, #4]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d3b2      	bcc.n	8004d72 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e1a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004e1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	7bdb      	ldrb	r3, [r3, #15]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d016      	beq.n	8004e56 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e38:	f043 030b 	orr.w	r3, r3, #11
 8004e3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e4e:	f043 030b 	orr.w	r3, r3, #11
 8004e52:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e54:	e015      	b.n	8004e82 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e68:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004e6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e7c:	f043 030b 	orr.w	r3, r3, #11
 8004e80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e90:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f004 f9d3 	bl	8009250 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f004 f902 	bl	80090c8 <USB_ReadInterrupts>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ece:	d123      	bne.n	8004f18 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f004 f998 	bl	800920a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f003 fa4f 	bl	8008382 <USB_GetDevSpeed>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681c      	ldr	r4, [r3, #0]
 8004ef0:	f000 feb0 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004efa:	461a      	mov	r2, r3
 8004efc:	4620      	mov	r0, r4
 8004efe:	f002 ff59 	bl	8007db4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f007 f9e9 	bl	800c2da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f004 f8d3 	bl	80090c8 <USB_ReadInterrupts>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d10a      	bne.n	8004f42 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f007 f9c6 	bl	800c2be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f002 0208 	and.w	r2, r2, #8
 8004f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f004 f8be 	bl	80090c8 <USB_ReadInterrupts>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f52:	2b80      	cmp	r3, #128	@ 0x80
 8004f54:	d123      	bne.n	8004f9e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f62:	2301      	movs	r3, #1
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f66:	e014      	b.n	8004f92 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fb0a 	bl	80055a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	3301      	adds	r3, #1
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	791b      	ldrb	r3, [r3, #4]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d3e4      	bcc.n	8004f68 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f004 f890 	bl	80090c8 <USB_ReadInterrupts>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb2:	d13c      	bne.n	800502e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	e02b      	b.n	8005012 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3318      	adds	r3, #24
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d115      	bne.n	800500c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004fe0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da12      	bge.n	800500c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	3317      	adds	r3, #23
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005002:	b2db      	uxtb	r3, r3
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 faca 	bl	80055a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	3301      	adds	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	791b      	ldrb	r3, [r3, #4]
 8005016:	461a      	mov	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	4293      	cmp	r3, r2
 800501c:	d3cd      	bcc.n	8004fba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800502c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f004 f848 	bl	80090c8 <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800503e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005042:	d156      	bne.n	80050f2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005044:	2301      	movs	r3, #1
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
 8005048:	e045      	b.n	80050d6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505e:	4613      	mov	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d12e      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005072:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005074:	2b00      	cmp	r3, #0
 8005076:	da2b      	bge.n	80050d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005084:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005088:	429a      	cmp	r2, r3
 800508a:	d121      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800509e:	2201      	movs	r2, #1
 80050a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050cc:	6053      	str	r3, [r2, #4]
            break;
 80050ce:	e008      	b.n	80050e2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	3301      	adds	r3, #1
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	791b      	ldrb	r3, [r3, #4]
 80050da:	461a      	mov	r2, r3
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	4293      	cmp	r3, r2
 80050e0:	d3b3      	bcc.n	800504a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80050f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f003 ffe6 	bl	80090c8 <USB_ReadInterrupts>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005106:	d10a      	bne.n	800511e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f007 f967 	bl	800c3dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800511c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f003 ffd0 	bl	80090c8 <USB_ReadInterrupts>
 8005128:	4603      	mov	r3, r0
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d115      	bne.n	800515e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f007 f957 	bl	800c3f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	e000      	b.n	800515e <HAL_PCD_IRQHandler+0x996>
      return;
 800515c:	bf00      	nop
    }
  }
}
 800515e:	3734      	adds	r7, #52	@ 0x34
 8005160:	46bd      	mov	sp, r7
 8005162:	bd90      	pop	{r4, r7, pc}

08005164 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_PCD_SetAddress+0x1a>
 800517a:	2302      	movs	r3, #2
 800517c:	e012      	b.n	80051a4 <HAL_PCD_SetAddress+0x40>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f003 ff2f 	bl	8008ff8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	4608      	mov	r0, r1
 80051b6:	4611      	mov	r1, r2
 80051b8:	461a      	mov	r2, r3
 80051ba:	4603      	mov	r3, r0
 80051bc:	70fb      	strb	r3, [r7, #3]
 80051be:	460b      	mov	r3, r1
 80051c0:	803b      	strh	r3, [r7, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da0f      	bge.n	80051f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	3310      	adds	r3, #16
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	3304      	adds	r3, #4
 80051e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	705a      	strb	r2, [r3, #1]
 80051f0:	e00f      	b.n	8005212 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	4413      	add	r3, r2
 8005208:	3304      	adds	r3, #4
 800520a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800521e:	883b      	ldrh	r3, [r7, #0]
 8005220:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	78ba      	ldrb	r2, [r7, #2]
 800522c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005240:	78bb      	ldrb	r3, [r7, #2]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d102      	bne.n	800524c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_PCD_EP_Open+0xae>
 8005256:	2302      	movs	r3, #2
 8005258:	e00e      	b.n	8005278 <HAL_PCD_EP_Open+0xcc>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	4618      	mov	r0, r3
 800526a:	f003 f8af 	bl	80083cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005276:	7afb      	ldrb	r3, [r7, #11]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800528c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005290:	2b00      	cmp	r3, #0
 8005292:	da0f      	bge.n	80052b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	f003 020f 	and.w	r2, r3, #15
 800529a:	4613      	mov	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	3310      	adds	r3, #16
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4413      	add	r3, r2
 80052a8:	3304      	adds	r3, #4
 80052aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	705a      	strb	r2, [r3, #1]
 80052b2:	e00f      	b.n	80052d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	f003 020f 	and.w	r2, r3, #15
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	3304      	adds	r3, #4
 80052cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_PCD_EP_Close+0x6e>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e00e      	b.n	800530c <HAL_PCD_EP_Close+0x8c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f003 f8ed 	bl	80084dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	460b      	mov	r3, r1
 8005322:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005324:	7afb      	ldrb	r3, [r7, #11]
 8005326:	f003 020f 	and.w	r2, r3, #15
 800532a:	4613      	mov	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	3304      	adds	r3, #4
 800533c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005356:	7afb      	ldrb	r3, [r7, #11]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	b2da      	uxtb	r2, r3
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	799b      	ldrb	r3, [r3, #6]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d102      	bne.n	8005370 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	799b      	ldrb	r3, [r3, #6]
 8005378:	461a      	mov	r2, r3
 800537a:	6979      	ldr	r1, [r7, #20]
 800537c:	f003 f98a 	bl	8008694 <USB_EPStartXfer>

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	460b      	mov	r3, r1
 8005394:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	f003 020f 	and.w	r2, r3, #15
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80053ac:	681b      	ldr	r3, [r3, #0]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	460b      	mov	r3, r1
 80053c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ca:	7afb      	ldrb	r3, [r7, #11]
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	3310      	adds	r3, #16
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	3304      	adds	r3, #4
 80053e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2201      	movs	r2, #1
 80053f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053fa:	7afb      	ldrb	r3, [r7, #11]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	b2da      	uxtb	r2, r3
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	799b      	ldrb	r3, [r3, #6]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d102      	bne.n	8005414 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	799b      	ldrb	r3, [r3, #6]
 800541c:	461a      	mov	r2, r3
 800541e:	6979      	ldr	r1, [r7, #20]
 8005420:	f003 f938 	bl	8008694 <USB_EPStartXfer>

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	7912      	ldrb	r2, [r2, #4]
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e04f      	b.n	80054ec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800544c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005450:	2b00      	cmp	r3, #0
 8005452:	da0f      	bge.n	8005474 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	4613      	mov	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	3310      	adds	r3, #16
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	3304      	adds	r3, #4
 800546a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	705a      	strb	r2, [r3, #1]
 8005472:	e00d      	b.n	8005490 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	4613      	mov	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	3304      	adds	r3, #4
 8005488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_PCD_EP_SetStall+0x82>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e01d      	b.n	80054ec <HAL_PCD_EP_SetStall+0xbe>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68f9      	ldr	r1, [r7, #12]
 80054be:	4618      	mov	r0, r3
 80054c0:	f003 fcc6 	bl	8008e50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	7999      	ldrb	r1, [r3, #6]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054dc:	461a      	mov	r2, r3
 80054de:	f003 feb7 	bl	8009250 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	7912      	ldrb	r2, [r2, #4]
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e042      	b.n	8005598 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	da0f      	bge.n	800553a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	3310      	adds	r3, #16
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	3304      	adds	r3, #4
 8005530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	705a      	strb	r2, [r3, #1]
 8005538:	e00f      	b.n	800555a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	3304      	adds	r3, #4
 8005552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	b2da      	uxtb	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_PCD_EP_ClrStall+0x86>
 8005576:	2302      	movs	r3, #2
 8005578:	e00e      	b.n	8005598 <HAL_PCD_EP_ClrStall+0xa4>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	4618      	mov	r0, r3
 800558a:	f003 fccf 	bl	8008f2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80055ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da0c      	bge.n	80055ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	3310      	adds	r3, #16
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	3304      	adds	r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e00c      	b.n	80055e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	3304      	adds	r3, #4
 80055e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f003 faee 	bl	8008bd0 <USB_EPStopXfer>
 80055f4:	4603      	mov	r3, r0
 80055f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055f8:	7afb      	ldrb	r3, [r7, #11]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08a      	sub	sp, #40	@ 0x28
 8005606:	af02      	add	r7, sp, #8
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	3310      	adds	r3, #16
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	3304      	adds	r3, #4
 8005628:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	429a      	cmp	r2, r3
 8005634:	d901      	bls.n	800563a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e06b      	b.n	8005712 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	429a      	cmp	r2, r3
 800564e:	d902      	bls.n	8005656 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3303      	adds	r3, #3
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800565e:	e02a      	b.n	80056b6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	429a      	cmp	r2, r3
 8005674:	d902      	bls.n	800567c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3303      	adds	r3, #3
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68d9      	ldr	r1, [r3, #12]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	b2da      	uxtb	r2, r3
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	4603      	mov	r3, r0
 8005698:	6978      	ldr	r0, [r7, #20]
 800569a:	f003 fb43 	bl	8008d24 <USB_WritePacket>

    ep->xfer_buff  += len;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	441a      	add	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	441a      	add	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d809      	bhi.n	80056e0 <PCD_WriteEmptyTxFifo+0xde>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d203      	bcs.n	80056e0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1bf      	bne.n	8005660 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d811      	bhi.n	8005710 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	2201      	movs	r2, #1
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	43db      	mvns	r3, r3
 8005706:	6939      	ldr	r1, [r7, #16]
 8005708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800570c:	4013      	ands	r3, r2
 800570e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	333c      	adds	r3, #60	@ 0x3c
 8005734:	3304      	adds	r3, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	799b      	ldrb	r3, [r3, #6]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d17b      	bne.n	800584a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4a61      	ldr	r2, [pc, #388]	@ (80058e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	f240 80b9 	bls.w	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80b3 	beq.w	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577e:	461a      	mov	r2, r3
 8005780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005784:	6093      	str	r3, [r2, #8]
 8005786:	e0a7      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579e:	461a      	mov	r2, r3
 80057a0:	2320      	movs	r3, #32
 80057a2:	6093      	str	r3, [r2, #8]
 80057a4:	e098      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 8093 	bne.w	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	4a4b      	ldr	r2, [pc, #300]	@ (80058e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d90f      	bls.n	80057da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d0:	461a      	mov	r2, r3
 80057d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	e07e      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	3304      	adds	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	0159      	lsls	r1, r3, #5
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	440b      	add	r3, r1
 80057fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d114      	bne.n	800583c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005824:	461a      	mov	r2, r3
 8005826:	2101      	movs	r1, #1
 8005828:	f003 fd12 	bl	8009250 <USB_EP0_OutStart>
 800582c:	e006      	b.n	800583c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	441a      	add	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f006 fd06 	bl	800c254 <HAL_PCD_DataOutStageCallback>
 8005848:	e046      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4a26      	ldr	r2, [pc, #152]	@ (80058e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d124      	bne.n	800589c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005868:	461a      	mov	r2, r3
 800586a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800586e:	6093      	str	r3, [r2, #8]
 8005870:	e032      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005888:	461a      	mov	r2, r3
 800588a:	2320      	movs	r3, #32
 800588c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f006 fcdd 	bl	800c254 <HAL_PCD_DataOutStageCallback>
 800589a:	e01d      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d114      	bne.n	80058cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d108      	bne.n	80058cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058c4:	461a      	mov	r2, r3
 80058c6:	2100      	movs	r1, #0
 80058c8:	f003 fcc2 	bl	8009250 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f006 fcbe 	bl	800c254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	4f54300a 	.word	0x4f54300a
 80058e8:	4f54310a 	.word	0x4f54310a

080058ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	333c      	adds	r3, #60	@ 0x3c
 8005904:	3304      	adds	r3, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <PCD_EP_OutSetupPacket_int+0x88>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d90e      	bls.n	8005940 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005938:	461a      	mov	r2, r3
 800593a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800593e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f006 fc75 	bl	800c230 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a0a      	ldr	r2, [pc, #40]	@ (8005974 <PCD_EP_OutSetupPacket_int+0x88>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d90c      	bls.n	8005968 <PCD_EP_OutSetupPacket_int+0x7c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	799b      	ldrb	r3, [r3, #6]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d108      	bne.n	8005968 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005960:	461a      	mov	r2, r3
 8005962:	2101      	movs	r1, #1
 8005964:	f003 fc74 	bl	8009250 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	4f54300a 	.word	0x4f54300a

08005978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
 8005984:	4613      	mov	r3, r2
 8005986:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d107      	bne.n	80059a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005996:	883b      	ldrh	r3, [r7, #0]
 8005998:	0419      	lsls	r1, r3, #16
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80059a4:	e028      	b.n	80059f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	73fb      	strb	r3, [r7, #15]
 80059b8:	e00d      	b.n	80059d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	3340      	adds	r3, #64	@ 0x40
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	3301      	adds	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	7bfa      	ldrb	r2, [r7, #15]
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	3b01      	subs	r3, #1
 80059dc:	429a      	cmp	r2, r3
 80059de:	d3ec      	bcc.n	80059ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059e0:	883b      	ldrh	r3, [r7, #0]
 80059e2:	0418      	lsls	r0, r3, #16
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	4302      	orrs	r2, r0
 80059f0:	3340      	adds	r3, #64	@ 0x40
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	887a      	ldrh	r2, [r7, #2]
 8005a18:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a5a:	f043 0303 	orr.w	r3, r3, #3
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0cc      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b68      	ldr	r3, [pc, #416]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d90c      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b65      	ldr	r3, [pc, #404]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b63      	ldr	r3, [pc, #396]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0b8      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d020      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005adc:	4b59      	ldr	r3, [pc, #356]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a58      	ldr	r2, [pc, #352]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005af4:	4b53      	ldr	r3, [pc, #332]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a52      	ldr	r2, [pc, #328]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b00:	4b50      	ldr	r3, [pc, #320]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	494d      	ldr	r1, [pc, #308]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d044      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d107      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d119      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e07f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d003      	beq.n	8005b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b46:	4b3f      	ldr	r3, [pc, #252]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e06f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b56:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e067      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b37      	ldr	r3, [pc, #220]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4934      	ldr	r1, [pc, #208]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b78:	f7fc ff32 	bl	80029e0 <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fc ff2e 	bl	80029e0 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e04f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 020c 	and.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1eb      	bne.n	8005b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b25      	ldr	r3, [pc, #148]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d20c      	bcs.n	8005bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b22      	ldr	r3, [pc, #136]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bbe:	4b20      	ldr	r3, [pc, #128]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e032      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bdc:	4b19      	ldr	r3, [pc, #100]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4916      	ldr	r1, [pc, #88]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bfa:	4b12      	ldr	r3, [pc, #72]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	490e      	ldr	r1, [pc, #56]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c0e:	f000 fb9d 	bl	800634c <HAL_RCC_GetSysClockFreq>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	490a      	ldr	r1, [pc, #40]	@ (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005c20:	5ccb      	ldrb	r3, [r1, r3]
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c2a:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fc faa0 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40023c00 	.word	0x40023c00
 8005c44:	40023800 	.word	0x40023800
 8005c48:	080105b4 	.word	0x080105b4
 8005c4c:	20000004 	.word	0x20000004
 8005c50:	20000008 	.word	0x20000008

08005c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c58:	4b03      	ldr	r3, [pc, #12]	@ (8005c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000004 	.word	0x20000004

08005c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c70:	f7ff fff0 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	0a9b      	lsrs	r3, r3, #10
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4903      	ldr	r1, [pc, #12]	@ (8005c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	080105c4 	.word	0x080105c4

08005c94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ca4:	4b12      	ldr	r3, [pc, #72]	@ (8005cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0203 	and.w	r2, r3, #3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cc8:	4b09      	ldr	r3, [pc, #36]	@ (8005cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	08db      	lsrs	r3, r3, #3
 8005cce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cd6:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <HAL_RCC_GetClockConfig+0x60>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 020f 	and.w	r2, r3, #15
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	40023c00 	.word	0x40023c00

08005cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08c      	sub	sp, #48	@ 0x30
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005d30:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d36:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	496c      	ldr	r1, [pc, #432]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d010      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005d5e:	4b64      	ldr	r3, [pc, #400]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d64:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6c:	4960      	ldr	r1, [pc, #384]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d017      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d8c:	4b58      	ldr	r3, [pc, #352]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9a:	4955      	ldr	r1, [pc, #340]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005daa:	d101      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005dac:	2301      	movs	r3, #1
 8005dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005db8:	2301      	movs	r3, #1
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d017      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005dc8:	4b49      	ldr	r3, [pc, #292]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd6:	4946      	ldr	r1, [pc, #280]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005de6:	d101      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005de8:	2301      	movs	r3, #1
 8005dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005df4:	2301      	movs	r3, #1
 8005df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 808a 	beq.w	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	4b39      	ldr	r3, [pc, #228]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	4a38      	ldr	r2, [pc, #224]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e16:	4b36      	ldr	r3, [pc, #216]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e22:	4b34      	ldr	r3, [pc, #208]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a33      	ldr	r2, [pc, #204]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e2e:	f7fc fdd7 	bl	80029e0 <HAL_GetTick>
 8005e32:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e36:	f7fc fdd3 	bl	80029e0 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e278      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e48:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e54:	4b26      	ldr	r3, [pc, #152]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e5c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d02f      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e6c:	6a3a      	ldr	r2, [r7, #32]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d028      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e72:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e82:	4b1d      	ldr	r3, [pc, #116]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e88:	4a19      	ldr	r2, [pc, #100]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e8e:	4b18      	ldr	r3, [pc, #96]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d114      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e9a:	f7fc fda1 	bl	80029e0 <HAL_GetTick>
 8005e9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea0:	e00a      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fc fd9d 	bl	80029e0 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e240      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ee      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed0:	d114      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005ed2:	4b07      	ldr	r3, [pc, #28]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee6:	4902      	ldr	r1, [pc, #8]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	608b      	str	r3, [r1, #8]
 8005eec:	e00c      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005eee:	bf00      	nop
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	40007000 	.word	0x40007000
 8005ef8:	42470e40 	.word	0x42470e40
 8005efc:	4b4a      	ldr	r3, [pc, #296]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4a49      	ldr	r2, [pc, #292]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005f06:	6093      	str	r3, [r2, #8]
 8005f08:	4b47      	ldr	r3, [pc, #284]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f14:	4944      	ldr	r1, [pc, #272]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005f2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f4a:	4937      	ldr	r1, [pc, #220]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f5e:	4b32      	ldr	r3, [pc, #200]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f64:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6c:	492e      	ldr	r1, [pc, #184]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d011      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f80:	4b29      	ldr	r3, [pc, #164]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f86:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8e:	4926      	ldr	r1, [pc, #152]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fb6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fbe:	491a      	ldr	r1, [pc, #104]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005fd2:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe0:	4911      	ldr	r1, [pc, #68]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d005      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006004:	f040 80ff 	bne.w	8006206 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006008:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800600e:	f7fc fce7 	bl	80029e0 <HAL_GetTick>
 8006012:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006014:	e00e      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006016:	f7fc fce3 	bl	80029e0 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d907      	bls.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e188      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006028:	40023800 	.word	0x40023800
 800602c:	424711e0 	.word	0x424711e0
 8006030:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006034:	4b7e      	ldr	r3, [pc, #504]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1ea      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800605c:	2b00      	cmp	r3, #0
 800605e:	d028      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d124      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006068:	4b71      	ldr	r3, [pc, #452]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800606a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800606e:	0c1b      	lsrs	r3, r3, #16
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	3301      	adds	r3, #1
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800607a:	4b6d      	ldr	r3, [pc, #436]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006080:	0e1b      	lsrs	r3, r3, #24
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	019b      	lsls	r3, r3, #6
 8006092:	431a      	orrs	r2, r3
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	3b01      	subs	r3, #1
 800609a:	041b      	lsls	r3, r3, #16
 800609c:	431a      	orrs	r2, r3
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	071b      	lsls	r3, r3, #28
 80060aa:	4961      	ldr	r1, [pc, #388]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d035      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060dc:	d130      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80060de:	4b54      	ldr	r3, [pc, #336]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	3301      	adds	r3, #1
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060f0:	4b4f      	ldr	r3, [pc, #316]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f6:	0f1b      	lsrs	r3, r3, #28
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	019b      	lsls	r3, r3, #6
 8006108:	431a      	orrs	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	3b01      	subs	r3, #1
 8006110:	041b      	lsls	r3, r3, #16
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	061b      	lsls	r3, r3, #24
 800611a:	431a      	orrs	r2, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	071b      	lsls	r3, r3, #28
 8006120:	4943      	ldr	r1, [pc, #268]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006128:	4b41      	ldr	r3, [pc, #260]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800612a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800612e:	f023 021f 	bic.w	r2, r3, #31
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	3b01      	subs	r3, #1
 8006138:	493d      	ldr	r1, [pc, #244]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006148:	2b00      	cmp	r3, #0
 800614a:	d029      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006154:	d124      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006156:	4b36      	ldr	r3, [pc, #216]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800615c:	0c1b      	lsrs	r3, r3, #16
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	3301      	adds	r3, #1
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006168:	4b31      	ldr	r3, [pc, #196]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800616a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800616e:	0f1b      	lsrs	r3, r3, #28
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	019b      	lsls	r3, r3, #6
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	3b01      	subs	r3, #1
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	431a      	orrs	r2, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	431a      	orrs	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	071b      	lsls	r3, r3, #28
 8006198:	4925      	ldr	r1, [pc, #148]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d016      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	019b      	lsls	r3, r3, #6
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	085b      	lsrs	r3, r3, #1
 80061be:	3b01      	subs	r3, #1
 80061c0:	041b      	lsls	r3, r3, #16
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	061b      	lsls	r3, r3, #24
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	071b      	lsls	r3, r3, #28
 80061d2:	4917      	ldr	r1, [pc, #92]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061da:	4b16      	ldr	r3, [pc, #88]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061e0:	f7fc fbfe 	bl	80029e0 <HAL_GetTick>
 80061e4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e6:	e008      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061e8:	f7fc fbfa 	bl	80029e0 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e09f      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0f0      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8006206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006208:	2b01      	cmp	r3, #1
 800620a:	f040 8095 	bne.w	8006338 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800620e:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006214:	f7fc fbe4 	bl	80029e0 <HAL_GetTick>
 8006218:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800621a:	e00f      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800621c:	f7fc fbe0 	bl	80029e0 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d908      	bls.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e085      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800622e:	bf00      	nop
 8006230:	40023800 	.word	0x40023800
 8006234:	42470068 	.word	0x42470068
 8006238:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800623c:	4b41      	ldr	r3, [pc, #260]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006248:	d0e8      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006266:	2b00      	cmp	r3, #0
 8006268:	d02b      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626e:	2b00      	cmp	r3, #0
 8006270:	d127      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006272:	4b34      	ldr	r3, [pc, #208]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006278:	0c1b      	lsrs	r3, r3, #16
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	3301      	adds	r3, #1
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	431a      	orrs	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	085b      	lsrs	r3, r3, #1
 8006294:	3b01      	subs	r3, #1
 8006296:	041b      	lsls	r3, r3, #16
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	061b      	lsls	r3, r3, #24
 80062a0:	4928      	ldr	r1, [pc, #160]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062a8:	4b26      	ldr	r3, [pc, #152]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	3b01      	subs	r3, #1
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	4922      	ldr	r1, [pc, #136]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01d      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062d6:	d118      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062de:	0e1b      	lsrs	r3, r3, #24
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	019b      	lsls	r3, r3, #6
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	3b01      	subs	r3, #1
 80062fa:	041b      	lsls	r3, r3, #16
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	061b      	lsls	r3, r3, #24
 8006302:	4910      	ldr	r1, [pc, #64]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006304:	4313      	orrs	r3, r2
 8006306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800630a:	4b0f      	ldr	r3, [pc, #60]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800630c:	2201      	movs	r2, #1
 800630e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006310:	f7fc fb66 	bl	80029e0 <HAL_GetTick>
 8006314:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006316:	e008      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006318:	f7fc fb62 	bl	80029e0 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e007      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800632a:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006336:	d1ef      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3730      	adds	r7, #48	@ 0x30
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	42470070 	.word	0x42470070

0800634c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800634c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006350:	b0ae      	sub	sp, #184	@ 0xb8
 8006352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006372:	4bcb      	ldr	r3, [pc, #812]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b0c      	cmp	r3, #12
 800637c:	f200 8206 	bhi.w	800678c <HAL_RCC_GetSysClockFreq+0x440>
 8006380:	a201      	add	r2, pc, #4	@ (adr r2, 8006388 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063bd 	.word	0x080063bd
 800638c:	0800678d 	.word	0x0800678d
 8006390:	0800678d 	.word	0x0800678d
 8006394:	0800678d 	.word	0x0800678d
 8006398:	080063c5 	.word	0x080063c5
 800639c:	0800678d 	.word	0x0800678d
 80063a0:	0800678d 	.word	0x0800678d
 80063a4:	0800678d 	.word	0x0800678d
 80063a8:	080063cd 	.word	0x080063cd
 80063ac:	0800678d 	.word	0x0800678d
 80063b0:	0800678d 	.word	0x0800678d
 80063b4:	0800678d 	.word	0x0800678d
 80063b8:	080065bd 	.word	0x080065bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063bc:	4bb9      	ldr	r3, [pc, #740]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80063be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80063c2:	e1e7      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063c4:	4bb8      	ldr	r3, [pc, #736]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80063c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80063ca:	e1e3      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063cc:	4bb4      	ldr	r3, [pc, #720]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063d8:	4bb1      	ldr	r3, [pc, #708]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d071      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e4:	4bae      	ldr	r3, [pc, #696]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	099b      	lsrs	r3, r3, #6
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80063f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006400:	2300      	movs	r3, #0
 8006402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800640a:	4622      	mov	r2, r4
 800640c:	462b      	mov	r3, r5
 800640e:	f04f 0000 	mov.w	r0, #0
 8006412:	f04f 0100 	mov.w	r1, #0
 8006416:	0159      	lsls	r1, r3, #5
 8006418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800641c:	0150      	lsls	r0, r2, #5
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4621      	mov	r1, r4
 8006424:	1a51      	subs	r1, r2, r1
 8006426:	6439      	str	r1, [r7, #64]	@ 0x40
 8006428:	4629      	mov	r1, r5
 800642a:	eb63 0301 	sbc.w	r3, r3, r1
 800642e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800643c:	4649      	mov	r1, r9
 800643e:	018b      	lsls	r3, r1, #6
 8006440:	4641      	mov	r1, r8
 8006442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006446:	4641      	mov	r1, r8
 8006448:	018a      	lsls	r2, r1, #6
 800644a:	4641      	mov	r1, r8
 800644c:	1a51      	subs	r1, r2, r1
 800644e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006450:	4649      	mov	r1, r9
 8006452:	eb63 0301 	sbc.w	r3, r3, r1
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006464:	4649      	mov	r1, r9
 8006466:	00cb      	lsls	r3, r1, #3
 8006468:	4641      	mov	r1, r8
 800646a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800646e:	4641      	mov	r1, r8
 8006470:	00ca      	lsls	r2, r1, #3
 8006472:	4610      	mov	r0, r2
 8006474:	4619      	mov	r1, r3
 8006476:	4603      	mov	r3, r0
 8006478:	4622      	mov	r2, r4
 800647a:	189b      	adds	r3, r3, r2
 800647c:	633b      	str	r3, [r7, #48]	@ 0x30
 800647e:	462b      	mov	r3, r5
 8006480:	460a      	mov	r2, r1
 8006482:	eb42 0303 	adc.w	r3, r2, r3
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006494:	4629      	mov	r1, r5
 8006496:	024b      	lsls	r3, r1, #9
 8006498:	4621      	mov	r1, r4
 800649a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800649e:	4621      	mov	r1, r4
 80064a0:	024a      	lsls	r2, r1, #9
 80064a2:	4610      	mov	r0, r2
 80064a4:	4619      	mov	r1, r3
 80064a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80064b8:	f7fa fb38 	bl	8000b2c <__aeabi_uldivmod>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4613      	mov	r3, r2
 80064c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064c6:	e067      	b.n	8006598 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c8:	4b75      	ldr	r3, [pc, #468]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	099b      	lsrs	r3, r3, #6
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80064d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064e2:	2300      	movs	r3, #0
 80064e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80064ea:	4622      	mov	r2, r4
 80064ec:	462b      	mov	r3, r5
 80064ee:	f04f 0000 	mov.w	r0, #0
 80064f2:	f04f 0100 	mov.w	r1, #0
 80064f6:	0159      	lsls	r1, r3, #5
 80064f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064fc:	0150      	lsls	r0, r2, #5
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4621      	mov	r1, r4
 8006504:	1a51      	subs	r1, r2, r1
 8006506:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006508:	4629      	mov	r1, r5
 800650a:	eb63 0301 	sbc.w	r3, r3, r1
 800650e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800651c:	4649      	mov	r1, r9
 800651e:	018b      	lsls	r3, r1, #6
 8006520:	4641      	mov	r1, r8
 8006522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006526:	4641      	mov	r1, r8
 8006528:	018a      	lsls	r2, r1, #6
 800652a:	4641      	mov	r1, r8
 800652c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006530:	4649      	mov	r1, r9
 8006532:	eb63 0b01 	sbc.w	fp, r3, r1
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006542:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800654a:	4692      	mov	sl, r2
 800654c:	469b      	mov	fp, r3
 800654e:	4623      	mov	r3, r4
 8006550:	eb1a 0303 	adds.w	r3, sl, r3
 8006554:	623b      	str	r3, [r7, #32]
 8006556:	462b      	mov	r3, r5
 8006558:	eb4b 0303 	adc.w	r3, fp, r3
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800656a:	4629      	mov	r1, r5
 800656c:	028b      	lsls	r3, r1, #10
 800656e:	4621      	mov	r1, r4
 8006570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006574:	4621      	mov	r1, r4
 8006576:	028a      	lsls	r2, r1, #10
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006580:	2200      	movs	r2, #0
 8006582:	673b      	str	r3, [r7, #112]	@ 0x70
 8006584:	677a      	str	r2, [r7, #116]	@ 0x74
 8006586:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800658a:	f7fa facf 	bl	8000b2c <__aeabi_uldivmod>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4613      	mov	r3, r2
 8006594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006598:	4b41      	ldr	r3, [pc, #260]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	3301      	adds	r3, #1
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80065aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80065ba:	e0eb      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065bc:	4b38      	ldr	r3, [pc, #224]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065c8:	4b35      	ldr	r3, [pc, #212]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d06b      	beq.n	80066ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065d4:	4b32      	ldr	r3, [pc, #200]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	099b      	lsrs	r3, r3, #6
 80065da:	2200      	movs	r2, #0
 80065dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80065e8:	2300      	movs	r3, #0
 80065ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80065ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80065f0:	4622      	mov	r2, r4
 80065f2:	462b      	mov	r3, r5
 80065f4:	f04f 0000 	mov.w	r0, #0
 80065f8:	f04f 0100 	mov.w	r1, #0
 80065fc:	0159      	lsls	r1, r3, #5
 80065fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006602:	0150      	lsls	r0, r2, #5
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4621      	mov	r1, r4
 800660a:	1a51      	subs	r1, r2, r1
 800660c:	61b9      	str	r1, [r7, #24]
 800660e:	4629      	mov	r1, r5
 8006610:	eb63 0301 	sbc.w	r3, r3, r1
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006622:	4659      	mov	r1, fp
 8006624:	018b      	lsls	r3, r1, #6
 8006626:	4651      	mov	r1, sl
 8006628:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800662c:	4651      	mov	r1, sl
 800662e:	018a      	lsls	r2, r1, #6
 8006630:	4651      	mov	r1, sl
 8006632:	ebb2 0801 	subs.w	r8, r2, r1
 8006636:	4659      	mov	r1, fp
 8006638:	eb63 0901 	sbc.w	r9, r3, r1
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006648:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800664c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006650:	4690      	mov	r8, r2
 8006652:	4699      	mov	r9, r3
 8006654:	4623      	mov	r3, r4
 8006656:	eb18 0303 	adds.w	r3, r8, r3
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	462b      	mov	r3, r5
 800665e:	eb49 0303 	adc.w	r3, r9, r3
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006670:	4629      	mov	r1, r5
 8006672:	024b      	lsls	r3, r1, #9
 8006674:	4621      	mov	r1, r4
 8006676:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800667a:	4621      	mov	r1, r4
 800667c:	024a      	lsls	r2, r1, #9
 800667e:	4610      	mov	r0, r2
 8006680:	4619      	mov	r1, r3
 8006682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006686:	2200      	movs	r2, #0
 8006688:	65bb      	str	r3, [r7, #88]	@ 0x58
 800668a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800668c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006690:	f7fa fa4c 	bl	8000b2c <__aeabi_uldivmod>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4613      	mov	r3, r2
 800669a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800669e:	e065      	b.n	800676c <HAL_RCC_GetSysClockFreq+0x420>
 80066a0:	40023800 	.word	0x40023800
 80066a4:	00f42400 	.word	0x00f42400
 80066a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ac:	4b3d      	ldr	r3, [pc, #244]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	099b      	lsrs	r3, r3, #6
 80066b2:	2200      	movs	r2, #0
 80066b4:	4618      	mov	r0, r3
 80066b6:	4611      	mov	r1, r2
 80066b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80066be:	2300      	movs	r3, #0
 80066c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80066c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80066c6:	4642      	mov	r2, r8
 80066c8:	464b      	mov	r3, r9
 80066ca:	f04f 0000 	mov.w	r0, #0
 80066ce:	f04f 0100 	mov.w	r1, #0
 80066d2:	0159      	lsls	r1, r3, #5
 80066d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066d8:	0150      	lsls	r0, r2, #5
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4641      	mov	r1, r8
 80066e0:	1a51      	subs	r1, r2, r1
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	4649      	mov	r1, r9
 80066e6:	eb63 0301 	sbc.w	r3, r3, r1
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80066f8:	4659      	mov	r1, fp
 80066fa:	018b      	lsls	r3, r1, #6
 80066fc:	4651      	mov	r1, sl
 80066fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006702:	4651      	mov	r1, sl
 8006704:	018a      	lsls	r2, r1, #6
 8006706:	4651      	mov	r1, sl
 8006708:	1a54      	subs	r4, r2, r1
 800670a:	4659      	mov	r1, fp
 800670c:	eb63 0501 	sbc.w	r5, r3, r1
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	00eb      	lsls	r3, r5, #3
 800671a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800671e:	00e2      	lsls	r2, r4, #3
 8006720:	4614      	mov	r4, r2
 8006722:	461d      	mov	r5, r3
 8006724:	4643      	mov	r3, r8
 8006726:	18e3      	adds	r3, r4, r3
 8006728:	603b      	str	r3, [r7, #0]
 800672a:	464b      	mov	r3, r9
 800672c:	eb45 0303 	adc.w	r3, r5, r3
 8006730:	607b      	str	r3, [r7, #4]
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800673e:	4629      	mov	r1, r5
 8006740:	028b      	lsls	r3, r1, #10
 8006742:	4621      	mov	r1, r4
 8006744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006748:	4621      	mov	r1, r4
 800674a:	028a      	lsls	r2, r1, #10
 800674c:	4610      	mov	r0, r2
 800674e:	4619      	mov	r1, r3
 8006750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006754:	2200      	movs	r2, #0
 8006756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006758:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800675a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800675e:	f7fa f9e5 	bl	8000b2c <__aeabi_uldivmod>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4613      	mov	r3, r2
 8006768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800676c:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	0f1b      	lsrs	r3, r3, #28
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800677a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800677e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006782:	fbb2 f3f3 	udiv	r3, r2, r3
 8006786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800678a:	e003      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800678c:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800678e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006792:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006794:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006798:	4618      	mov	r0, r3
 800679a:	37b8      	adds	r7, #184	@ 0xb8
 800679c:	46bd      	mov	sp, r7
 800679e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a2:	bf00      	nop
 80067a4:	40023800 	.word	0x40023800
 80067a8:	00f42400 	.word	0x00f42400

080067ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e28d      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8083 	beq.w	80068d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80067cc:	4b94      	ldr	r3, [pc, #592]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 030c 	and.w	r3, r3, #12
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d019      	beq.n	800680c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80067d8:	4b91      	ldr	r3, [pc, #580]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d106      	bne.n	80067f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80067e4:	4b8e      	ldr	r3, [pc, #568]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067f0:	d00c      	beq.n	800680c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d112      	bne.n	8006824 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067fe:	4b88      	ldr	r3, [pc, #544]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800680a:	d10b      	bne.n	8006824 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800680c:	4b84      	ldr	r3, [pc, #528]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d05b      	beq.n	80068d0 <HAL_RCC_OscConfig+0x124>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d157      	bne.n	80068d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e25a      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800682c:	d106      	bne.n	800683c <HAL_RCC_OscConfig+0x90>
 800682e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a7b      	ldr	r2, [pc, #492]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	e01d      	b.n	8006878 <HAL_RCC_OscConfig+0xcc>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006844:	d10c      	bne.n	8006860 <HAL_RCC_OscConfig+0xb4>
 8006846:	4b76      	ldr	r3, [pc, #472]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a75      	ldr	r2, [pc, #468]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 800684c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	4b73      	ldr	r3, [pc, #460]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a72      	ldr	r2, [pc, #456]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e00b      	b.n	8006878 <HAL_RCC_OscConfig+0xcc>
 8006860:	4b6f      	ldr	r3, [pc, #444]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6e      	ldr	r2, [pc, #440]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	4b6c      	ldr	r3, [pc, #432]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a6b      	ldr	r2, [pc, #428]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d013      	beq.n	80068a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fc f8ae 	bl	80029e0 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006888:	f7fc f8aa 	bl	80029e0 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b64      	cmp	r3, #100	@ 0x64
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e21f      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689a:	4b61      	ldr	r3, [pc, #388]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0xdc>
 80068a6:	e014      	b.n	80068d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a8:	f7fc f89a 	bl	80029e0 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b0:	f7fc f896 	bl	80029e0 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b64      	cmp	r3, #100	@ 0x64
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e20b      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068c2:	4b57      	ldr	r3, [pc, #348]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <HAL_RCC_OscConfig+0x104>
 80068ce:	e000      	b.n	80068d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d06f      	beq.n	80069be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80068de:	4b50      	ldr	r3, [pc, #320]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d017      	beq.n	800691a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80068ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d105      	bne.n	8006902 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80068f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006902:	4b47      	ldr	r3, [pc, #284]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800690a:	2b0c      	cmp	r3, #12
 800690c:	d11c      	bne.n	8006948 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690e:	4b44      	ldr	r3, [pc, #272]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d116      	bne.n	8006948 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691a:	4b41      	ldr	r3, [pc, #260]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_RCC_OscConfig+0x186>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d001      	beq.n	8006932 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e1d3      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006932:	4b3b      	ldr	r3, [pc, #236]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4937      	ldr	r1, [pc, #220]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006946:	e03a      	b.n	80069be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006950:	4b34      	ldr	r3, [pc, #208]	@ (8006a24 <HAL_RCC_OscConfig+0x278>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006956:	f7fc f843 	bl	80029e0 <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800695e:	f7fc f83f 	bl	80029e0 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e1b4      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006970:	4b2b      	ldr	r3, [pc, #172]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f0      	beq.n	800695e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697c:	4b28      	ldr	r3, [pc, #160]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4925      	ldr	r1, [pc, #148]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]
 8006990:	e015      	b.n	80069be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006992:	4b24      	ldr	r3, [pc, #144]	@ (8006a24 <HAL_RCC_OscConfig+0x278>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fc f822 	bl	80029e0 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a0:	f7fc f81e 	bl	80029e0 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e193      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d036      	beq.n	8006a38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d016      	beq.n	8006a00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d2:	4b15      	ldr	r3, [pc, #84]	@ (8006a28 <HAL_RCC_OscConfig+0x27c>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d8:	f7fc f802 	bl	80029e0 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e0:	f7fb fffe 	bl	80029e0 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e173      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <HAL_RCC_OscConfig+0x274>)
 80069f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x234>
 80069fe:	e01b      	b.n	8006a38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a00:	4b09      	ldr	r3, [pc, #36]	@ (8006a28 <HAL_RCC_OscConfig+0x27c>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a06:	f7fb ffeb 	bl	80029e0 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a0c:	e00e      	b.n	8006a2c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a0e:	f7fb ffe7 	bl	80029e0 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d907      	bls.n	8006a2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e15c      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
 8006a20:	40023800 	.word	0x40023800
 8006a24:	42470000 	.word	0x42470000
 8006a28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a2c:	4b8a      	ldr	r3, [pc, #552]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1ea      	bne.n	8006a0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8097 	beq.w	8006b74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4a:	4b83      	ldr	r3, [pc, #524]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a66:	4b7c      	ldr	r3, [pc, #496]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a76:	4b79      	ldr	r3, [pc, #484]	@ (8006c5c <HAL_RCC_OscConfig+0x4b0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d118      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a82:	4b76      	ldr	r3, [pc, #472]	@ (8006c5c <HAL_RCC_OscConfig+0x4b0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a75      	ldr	r2, [pc, #468]	@ (8006c5c <HAL_RCC_OscConfig+0x4b0>)
 8006a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8e:	f7fb ffa7 	bl	80029e0 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a96:	f7fb ffa3 	bl	80029e0 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e118      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8006c5c <HAL_RCC_OscConfig+0x4b0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d106      	bne.n	8006aca <HAL_RCC_OscConfig+0x31e>
 8006abc:	4b66      	ldr	r3, [pc, #408]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac0:	4a65      	ldr	r2, [pc, #404]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ac8:	e01c      	b.n	8006b04 <HAL_RCC_OscConfig+0x358>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d10c      	bne.n	8006aec <HAL_RCC_OscConfig+0x340>
 8006ad2:	4b61      	ldr	r3, [pc, #388]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad6:	4a60      	ldr	r2, [pc, #384]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ad8:	f043 0304 	orr.w	r3, r3, #4
 8006adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ade:	4b5e      	ldr	r3, [pc, #376]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae2:	4a5d      	ldr	r2, [pc, #372]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aea:	e00b      	b.n	8006b04 <HAL_RCC_OscConfig+0x358>
 8006aec:	4b5a      	ldr	r3, [pc, #360]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af0:	4a59      	ldr	r2, [pc, #356]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af8:	4b57      	ldr	r3, [pc, #348]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afc:	4a56      	ldr	r2, [pc, #344]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006afe:	f023 0304 	bic.w	r3, r3, #4
 8006b02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d015      	beq.n	8006b38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0c:	f7fb ff68 	bl	80029e0 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b12:	e00a      	b.n	8006b2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b14:	f7fb ff64 	bl	80029e0 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e0d7      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0ee      	beq.n	8006b14 <HAL_RCC_OscConfig+0x368>
 8006b36:	e014      	b.n	8006b62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b38:	f7fb ff52 	bl	80029e0 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b40:	f7fb ff4e 	bl	80029e0 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e0c1      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b56:	4b40      	ldr	r3, [pc, #256]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ee      	bne.n	8006b40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d105      	bne.n	8006b74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b68:	4b3b      	ldr	r3, [pc, #236]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80ad 	beq.w	8006cd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b7e:	4b36      	ldr	r3, [pc, #216]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d060      	beq.n	8006c4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d145      	bne.n	8006c1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b92:	4b33      	ldr	r3, [pc, #204]	@ (8006c60 <HAL_RCC_OscConfig+0x4b4>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fb ff22 	bl	80029e0 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba0:	f7fb ff1e 	bl	80029e0 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e093      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb2:	4b29      	ldr	r3, [pc, #164]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69da      	ldr	r2, [r3, #28]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	019b      	lsls	r3, r3, #6
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be8:	071b      	lsls	r3, r3, #28
 8006bea:	491b      	ldr	r1, [pc, #108]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <HAL_RCC_OscConfig+0x4b4>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fb fef3 	bl	80029e0 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfe:	f7fb feef 	bl	80029e0 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e064      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c10:	4b11      	ldr	r3, [pc, #68]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x452>
 8006c1c:	e05c      	b.n	8006cd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1e:	4b10      	ldr	r3, [pc, #64]	@ (8006c60 <HAL_RCC_OscConfig+0x4b4>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fb fedc 	bl	80029e0 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fb fed8 	bl	80029e0 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e04d      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3e:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <HAL_RCC_OscConfig+0x4ac>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0x480>
 8006c4a:	e045      	b.n	8006cd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d107      	bne.n	8006c64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e040      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	40007000 	.word	0x40007000
 8006c60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c64:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce4 <HAL_RCC_OscConfig+0x538>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d030      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d129      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d122      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c94:	4013      	ands	r3, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d119      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	3b01      	subs	r3, #1
 8006cae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d10f      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d001      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40023800 	.word	0x40023800

08006ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e041      	b.n	8006d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f839 	bl	8006d86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f000 fcce 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
	...

08006d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d001      	beq.n	8006db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e04e      	b.n	8006e52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a23      	ldr	r2, [pc, #140]	@ (8006e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d022      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x80>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dde:	d01d      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x80>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d018      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x80>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a1e      	ldr	r2, [pc, #120]	@ (8006e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x80>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1c      	ldr	r2, [pc, #112]	@ (8006e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00e      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x80>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1b      	ldr	r2, [pc, #108]	@ (8006e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x80>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a19      	ldr	r2, [pc, #100]	@ (8006e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_TIM_Base_Start_IT+0x80>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a18      	ldr	r2, [pc, #96]	@ (8006e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d111      	bne.n	8006e40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b06      	cmp	r3, #6
 8006e2c:	d010      	beq.n	8006e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3e:	e007      	b.n	8006e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40000400 	.word	0x40000400
 8006e68:	40000800 	.word	0x40000800
 8006e6c:	40000c00 	.word	0x40000c00
 8006e70:	40010400 	.word	0x40010400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40001800 	.word	0x40001800

08006e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e041      	b.n	8006f12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fb fc48 	bl	8002738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f000 fc04 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d109      	bne.n	8006f40 <HAL_TIM_PWM_Start+0x24>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e022      	b.n	8006f86 <HAL_TIM_PWM_Start+0x6a>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d109      	bne.n	8006f5a <HAL_TIM_PWM_Start+0x3e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	bf14      	ite	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	2300      	moveq	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	e015      	b.n	8006f86 <HAL_TIM_PWM_Start+0x6a>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d109      	bne.n	8006f74 <HAL_TIM_PWM_Start+0x58>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	bf14      	ite	ne
 8006f6c:	2301      	movne	r3, #1
 8006f6e:	2300      	moveq	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	e008      	b.n	8006f86 <HAL_TIM_PWM_Start+0x6a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	bf14      	ite	ne
 8006f80:	2301      	movne	r3, #1
 8006f82:	2300      	moveq	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e07c      	b.n	8007088 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <HAL_TIM_PWM_Start+0x82>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f9c:	e013      	b.n	8006fc6 <HAL_TIM_PWM_Start+0xaa>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d104      	bne.n	8006fae <HAL_TIM_PWM_Start+0x92>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fac:	e00b      	b.n	8006fc6 <HAL_TIM_PWM_Start+0xaa>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d104      	bne.n	8006fbe <HAL_TIM_PWM_Start+0xa2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fbc:	e003      	b.n	8006fc6 <HAL_TIM_PWM_Start+0xaa>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fdd6 	bl	8007b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8007090 <HAL_TIM_PWM_Start+0x174>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_TIM_PWM_Start+0xcc>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8007094 <HAL_TIM_PWM_Start+0x178>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d101      	bne.n	8006fec <HAL_TIM_PWM_Start+0xd0>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <HAL_TIM_PWM_Start+0xd2>
 8006fec:	2300      	movs	r3, #0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007000:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a22      	ldr	r2, [pc, #136]	@ (8007090 <HAL_TIM_PWM_Start+0x174>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d022      	beq.n	8007052 <HAL_TIM_PWM_Start+0x136>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007014:	d01d      	beq.n	8007052 <HAL_TIM_PWM_Start+0x136>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1f      	ldr	r2, [pc, #124]	@ (8007098 <HAL_TIM_PWM_Start+0x17c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d018      	beq.n	8007052 <HAL_TIM_PWM_Start+0x136>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1d      	ldr	r2, [pc, #116]	@ (800709c <HAL_TIM_PWM_Start+0x180>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_TIM_PWM_Start+0x136>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1c      	ldr	r2, [pc, #112]	@ (80070a0 <HAL_TIM_PWM_Start+0x184>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_TIM_PWM_Start+0x136>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a16      	ldr	r2, [pc, #88]	@ (8007094 <HAL_TIM_PWM_Start+0x178>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_TIM_PWM_Start+0x136>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a18      	ldr	r2, [pc, #96]	@ (80070a4 <HAL_TIM_PWM_Start+0x188>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIM_PWM_Start+0x136>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a16      	ldr	r2, [pc, #88]	@ (80070a8 <HAL_TIM_PWM_Start+0x18c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d111      	bne.n	8007076 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b06      	cmp	r3, #6
 8007062:	d010      	beq.n	8007086 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007074:	e007      	b.n	8007086 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0201 	orr.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40010000 	.word	0x40010000
 8007094:	40010400 	.word	0x40010400
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800
 80070a0:	40000c00 	.word	0x40000c00
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40001800 	.word	0x40001800

080070ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e097      	b.n	80071f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d106      	bne.n	80070da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fb fae9 	bl	80026ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070f0:	f023 0307 	bic.w	r3, r3, #7
 80070f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f000 fae1 	bl	80076c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	4313      	orrs	r3, r2
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800714c:	f023 030c 	bic.w	r3, r3, #12
 8007150:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007158:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800715c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	021b      	lsls	r3, r3, #8
 8007168:	4313      	orrs	r3, r2
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	011a      	lsls	r2, r3, #4
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	031b      	lsls	r3, r3, #12
 800717c:	4313      	orrs	r3, r2
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800718a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	4313      	orrs	r3, r2
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007208:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007210:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007218:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007220:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d110      	bne.n	800724a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d102      	bne.n	8007234 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800722e:	7b7b      	ldrb	r3, [r7, #13]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d001      	beq.n	8007238 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e069      	b.n	800730c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007248:	e031      	b.n	80072ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b04      	cmp	r3, #4
 800724e:	d110      	bne.n	8007272 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d102      	bne.n	800725c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007256:	7b3b      	ldrb	r3, [r7, #12]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e055      	b.n	800730c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007270:	e01d      	b.n	80072ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d108      	bne.n	800728a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800727e:	7b7b      	ldrb	r3, [r7, #13]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d102      	bne.n	800728a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007284:	7b3b      	ldrb	r3, [r7, #12]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d001      	beq.n	800728e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e03e      	b.n	800730c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2202      	movs	r2, #2
 800729a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <HAL_TIM_Encoder_Start+0xc4>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d008      	beq.n	80072cc <HAL_TIM_Encoder_Start+0xd4>
 80072ba:	e00f      	b.n	80072dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2201      	movs	r2, #1
 80072c2:	2100      	movs	r1, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fc5b 	bl	8007b80 <TIM_CCxChannelCmd>
      break;
 80072ca:	e016      	b.n	80072fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2201      	movs	r2, #1
 80072d2:	2104      	movs	r1, #4
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fc53 	bl	8007b80 <TIM_CCxChannelCmd>
      break;
 80072da:	e00e      	b.n	80072fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2201      	movs	r2, #1
 80072e2:	2100      	movs	r1, #0
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fc4b 	bl	8007b80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2201      	movs	r2, #1
 80072f0:	2104      	movs	r1, #4
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fc44 	bl	8007b80 <TIM_CCxChannelCmd>
      break;
 80072f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0201 	orr.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d020      	beq.n	8007378 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01b      	beq.n	8007378 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0202 	mvn.w	r2, #2
 8007348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f994 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f986 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f997 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d020      	beq.n	80073c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01b      	beq.n	80073c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0204 	mvn.w	r2, #4
 8007394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2202      	movs	r2, #2
 800739a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f96e 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 80073b0:	e005      	b.n	80073be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f960 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f971 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d020      	beq.n	8007410 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01b      	beq.n	8007410 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0208 	mvn.w	r2, #8
 80073e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2204      	movs	r2, #4
 80073e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f948 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 80073fc:	e005      	b.n	800740a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f93a 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f94b 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b00      	cmp	r3, #0
 8007418:	d020      	beq.n	800745c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01b      	beq.n	800745c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0210 	mvn.w	r2, #16
 800742c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2208      	movs	r2, #8
 8007432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f922 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 8007448:	e005      	b.n	8007456 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f914 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f925 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00c      	beq.n	8007480 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0201 	mvn.w	r2, #1
 8007478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fa fe36 	bl	80020ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00c      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fc1a 	bl	8007cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f8f6 	bl	80076b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0220 	mvn.w	r2, #32
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fbec 	bl	8007cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800750e:	2302      	movs	r3, #2
 8007510:	e0ae      	b.n	8007670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b0c      	cmp	r3, #12
 800751e:	f200 809f 	bhi.w	8007660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007522:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	0800755d 	.word	0x0800755d
 800752c:	08007661 	.word	0x08007661
 8007530:	08007661 	.word	0x08007661
 8007534:	08007661 	.word	0x08007661
 8007538:	0800759d 	.word	0x0800759d
 800753c:	08007661 	.word	0x08007661
 8007540:	08007661 	.word	0x08007661
 8007544:	08007661 	.word	0x08007661
 8007548:	080075df 	.word	0x080075df
 800754c:	08007661 	.word	0x08007661
 8007550:	08007661 	.word	0x08007661
 8007554:	08007661 	.word	0x08007661
 8007558:	0800761f 	.word	0x0800761f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f95c 	bl	8007820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0208 	orr.w	r2, r2, #8
 8007576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0204 	bic.w	r2, r2, #4
 8007586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6999      	ldr	r1, [r3, #24]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	619a      	str	r2, [r3, #24]
      break;
 800759a:	e064      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 f9ac 	bl	8007900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6999      	ldr	r1, [r3, #24]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	021a      	lsls	r2, r3, #8
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	619a      	str	r2, [r3, #24]
      break;
 80075dc:	e043      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fa01 	bl	80079ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0208 	orr.w	r2, r2, #8
 80075f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0204 	bic.w	r2, r2, #4
 8007608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69d9      	ldr	r1, [r3, #28]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	61da      	str	r2, [r3, #28]
      break;
 800761c:	e023      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fa55 	bl	8007ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69d9      	ldr	r1, [r3, #28]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	021a      	lsls	r2, r3, #8
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	61da      	str	r2, [r3, #28]
      break;
 800765e:	e002      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	75fb      	strb	r3, [r7, #23]
      break;
 8007664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a46      	ldr	r2, [pc, #280]	@ (80077f4 <TIM_Base_SetConfig+0x12c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a43      	ldr	r2, [pc, #268]	@ (80077f8 <TIM_Base_SetConfig+0x130>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a42      	ldr	r2, [pc, #264]	@ (80077fc <TIM_Base_SetConfig+0x134>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a41      	ldr	r2, [pc, #260]	@ (8007800 <TIM_Base_SetConfig+0x138>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a40      	ldr	r2, [pc, #256]	@ (8007804 <TIM_Base_SetConfig+0x13c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a35      	ldr	r2, [pc, #212]	@ (80077f4 <TIM_Base_SetConfig+0x12c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d02b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007728:	d027      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a32      	ldr	r2, [pc, #200]	@ (80077f8 <TIM_Base_SetConfig+0x130>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d023      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a31      	ldr	r2, [pc, #196]	@ (80077fc <TIM_Base_SetConfig+0x134>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d01f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a30      	ldr	r2, [pc, #192]	@ (8007800 <TIM_Base_SetConfig+0x138>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2f      	ldr	r2, [pc, #188]	@ (8007804 <TIM_Base_SetConfig+0x13c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d017      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2e      	ldr	r2, [pc, #184]	@ (8007808 <TIM_Base_SetConfig+0x140>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2d      	ldr	r2, [pc, #180]	@ (800780c <TIM_Base_SetConfig+0x144>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2c      	ldr	r2, [pc, #176]	@ (8007810 <TIM_Base_SetConfig+0x148>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2b      	ldr	r2, [pc, #172]	@ (8007814 <TIM_Base_SetConfig+0x14c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2a      	ldr	r2, [pc, #168]	@ (8007818 <TIM_Base_SetConfig+0x150>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a29      	ldr	r2, [pc, #164]	@ (800781c <TIM_Base_SetConfig+0x154>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d108      	bne.n	800778c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a10      	ldr	r2, [pc, #64]	@ (80077f4 <TIM_Base_SetConfig+0x12c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_Base_SetConfig+0xf8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a12      	ldr	r2, [pc, #72]	@ (8007804 <TIM_Base_SetConfig+0x13c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d103      	bne.n	80077c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d105      	bne.n	80077e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f023 0201 	bic.w	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	611a      	str	r2, [r3, #16]
  }
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40000c00 	.word	0x40000c00
 8007804:	40010400 	.word	0x40010400
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800
 8007814:	40001800 	.word	0x40001800
 8007818:	40001c00 	.word	0x40001c00
 800781c:	40002000 	.word	0x40002000

08007820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	f023 0201 	bic.w	r2, r3, #1
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800784e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f023 0302 	bic.w	r3, r3, #2
 8007868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a20      	ldr	r2, [pc, #128]	@ (80078f8 <TIM_OC1_SetConfig+0xd8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_OC1_SetConfig+0x64>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a1f      	ldr	r2, [pc, #124]	@ (80078fc <TIM_OC1_SetConfig+0xdc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d10c      	bne.n	800789e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f023 0308 	bic.w	r3, r3, #8
 800788a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f023 0304 	bic.w	r3, r3, #4
 800789c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a15      	ldr	r2, [pc, #84]	@ (80078f8 <TIM_OC1_SetConfig+0xd8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d003      	beq.n	80078ae <TIM_OC1_SetConfig+0x8e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a14      	ldr	r2, [pc, #80]	@ (80078fc <TIM_OC1_SetConfig+0xdc>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d111      	bne.n	80078d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	621a      	str	r2, [r3, #32]
}
 80078ec:	bf00      	nop
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40010400 	.word	0x40010400

08007900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	f023 0210 	bic.w	r2, r3, #16
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800792e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f023 0320 	bic.w	r3, r3, #32
 800794a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a22      	ldr	r2, [pc, #136]	@ (80079e4 <TIM_OC2_SetConfig+0xe4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_OC2_SetConfig+0x68>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a21      	ldr	r2, [pc, #132]	@ (80079e8 <TIM_OC2_SetConfig+0xe8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d10d      	bne.n	8007984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800796e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a17      	ldr	r2, [pc, #92]	@ (80079e4 <TIM_OC2_SetConfig+0xe4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_OC2_SetConfig+0x94>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a16      	ldr	r2, [pc, #88]	@ (80079e8 <TIM_OC2_SetConfig+0xe8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d113      	bne.n	80079bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800799a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40010400 	.word	0x40010400

080079ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a21      	ldr	r2, [pc, #132]	@ (8007acc <TIM_OC3_SetConfig+0xe0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d003      	beq.n	8007a52 <TIM_OC3_SetConfig+0x66>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a20      	ldr	r2, [pc, #128]	@ (8007ad0 <TIM_OC3_SetConfig+0xe4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d10d      	bne.n	8007a6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a16      	ldr	r2, [pc, #88]	@ (8007acc <TIM_OC3_SetConfig+0xe0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d003      	beq.n	8007a7e <TIM_OC3_SetConfig+0x92>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a15      	ldr	r2, [pc, #84]	@ (8007ad0 <TIM_OC3_SetConfig+0xe4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d113      	bne.n	8007aa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	621a      	str	r2, [r3, #32]
}
 8007ac0:	bf00      	nop
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	40010000 	.word	0x40010000
 8007ad0:	40010400 	.word	0x40010400

08007ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	031b      	lsls	r3, r3, #12
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a12      	ldr	r2, [pc, #72]	@ (8007b78 <TIM_OC4_SetConfig+0xa4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_OC4_SetConfig+0x68>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a11      	ldr	r2, [pc, #68]	@ (8007b7c <TIM_OC4_SetConfig+0xa8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d109      	bne.n	8007b50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	019b      	lsls	r3, r3, #6
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40010400 	.word	0x40010400

08007b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	2201      	movs	r2, #1
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a1a      	ldr	r2, [r3, #32]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	43db      	mvns	r3, r3
 8007ba2:	401a      	ands	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a1a      	ldr	r2, [r3, #32]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d101      	bne.n	8007be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007be0:	2302      	movs	r3, #2
 8007be2:	e05a      	b.n	8007c9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a21      	ldr	r2, [pc, #132]	@ (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d022      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c30:	d01d      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1d      	ldr	r2, [pc, #116]	@ (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d018      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a18      	ldr	r2, [pc, #96]	@ (8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a17      	ldr	r2, [pc, #92]	@ (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a15      	ldr	r2, [pc, #84]	@ (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d10c      	bne.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40000800 	.word	0x40000800
 8007cb4:	40000c00 	.word	0x40000c00
 8007cb8:	40010400 	.word	0x40010400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40001800 	.word	0x40001800

08007cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cec:	b084      	sub	sp, #16
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	f107 001c 	add.w	r0, r7, #28
 8007cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cfe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d123      	bne.n	8007d4e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d105      	bne.n	8007d42 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fae2 	bl	800930c <USB_CoreReset>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
 8007d4c:	e01b      	b.n	8007d86 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fad6 	bl	800930c <USB_CoreReset>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d106      	bne.n	8007d7a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d78:	e005      	b.n	8007d86 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d86:	7fbb      	ldrb	r3, [r7, #30]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d10b      	bne.n	8007da4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f043 0206 	orr.w	r2, r3, #6
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007db0:	b004      	add	sp, #16
 8007db2:	4770      	bx	lr

08007db4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d165      	bne.n	8007e94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	4a41      	ldr	r2, [pc, #260]	@ (8007ed0 <USB_SetTurnaroundTime+0x11c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d906      	bls.n	8007dde <USB_SetTurnaroundTime+0x2a>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4a40      	ldr	r2, [pc, #256]	@ (8007ed4 <USB_SetTurnaroundTime+0x120>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d202      	bcs.n	8007dde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007dd8:	230f      	movs	r3, #15
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	e062      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ed4 <USB_SetTurnaroundTime+0x120>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d306      	bcc.n	8007df4 <USB_SetTurnaroundTime+0x40>
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4a3b      	ldr	r2, [pc, #236]	@ (8007ed8 <USB_SetTurnaroundTime+0x124>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d202      	bcs.n	8007df4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007dee:	230e      	movs	r3, #14
 8007df0:	617b      	str	r3, [r7, #20]
 8007df2:	e057      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4a38      	ldr	r2, [pc, #224]	@ (8007ed8 <USB_SetTurnaroundTime+0x124>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d306      	bcc.n	8007e0a <USB_SetTurnaroundTime+0x56>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4a37      	ldr	r2, [pc, #220]	@ (8007edc <USB_SetTurnaroundTime+0x128>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d202      	bcs.n	8007e0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e04:	230d      	movs	r3, #13
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	e04c      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	4a33      	ldr	r2, [pc, #204]	@ (8007edc <USB_SetTurnaroundTime+0x128>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d306      	bcc.n	8007e20 <USB_SetTurnaroundTime+0x6c>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	4a32      	ldr	r2, [pc, #200]	@ (8007ee0 <USB_SetTurnaroundTime+0x12c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d802      	bhi.n	8007e20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	e041      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4a2f      	ldr	r2, [pc, #188]	@ (8007ee0 <USB_SetTurnaroundTime+0x12c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d906      	bls.n	8007e36 <USB_SetTurnaroundTime+0x82>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8007ee4 <USB_SetTurnaroundTime+0x130>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d802      	bhi.n	8007e36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e30:	230b      	movs	r3, #11
 8007e32:	617b      	str	r3, [r7, #20]
 8007e34:	e036      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4a2a      	ldr	r2, [pc, #168]	@ (8007ee4 <USB_SetTurnaroundTime+0x130>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d906      	bls.n	8007e4c <USB_SetTurnaroundTime+0x98>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4a29      	ldr	r2, [pc, #164]	@ (8007ee8 <USB_SetTurnaroundTime+0x134>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d802      	bhi.n	8007e4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e46:	230a      	movs	r3, #10
 8007e48:	617b      	str	r3, [r7, #20]
 8007e4a:	e02b      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4a26      	ldr	r2, [pc, #152]	@ (8007ee8 <USB_SetTurnaroundTime+0x134>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d906      	bls.n	8007e62 <USB_SetTurnaroundTime+0xae>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4a25      	ldr	r2, [pc, #148]	@ (8007eec <USB_SetTurnaroundTime+0x138>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d202      	bcs.n	8007e62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e5c:	2309      	movs	r3, #9
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	e020      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4a21      	ldr	r2, [pc, #132]	@ (8007eec <USB_SetTurnaroundTime+0x138>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d306      	bcc.n	8007e78 <USB_SetTurnaroundTime+0xc4>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4a20      	ldr	r2, [pc, #128]	@ (8007ef0 <USB_SetTurnaroundTime+0x13c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d802      	bhi.n	8007e78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e72:	2308      	movs	r3, #8
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	e015      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef0 <USB_SetTurnaroundTime+0x13c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d906      	bls.n	8007e8e <USB_SetTurnaroundTime+0xda>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4a1c      	ldr	r2, [pc, #112]	@ (8007ef4 <USB_SetTurnaroundTime+0x140>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d202      	bcs.n	8007e8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e88:	2307      	movs	r3, #7
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	e00a      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e8e:	2306      	movs	r3, #6
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	e007      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d102      	bne.n	8007ea0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007e9a:	2309      	movs	r3, #9
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e001      	b.n	8007ea4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ea0:	2309      	movs	r3, #9
 8007ea2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	029b      	lsls	r3, r3, #10
 8007eb8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	00d8acbf 	.word	0x00d8acbf
 8007ed4:	00e4e1c0 	.word	0x00e4e1c0
 8007ed8:	00f42400 	.word	0x00f42400
 8007edc:	01067380 	.word	0x01067380
 8007ee0:	011a499f 	.word	0x011a499f
 8007ee4:	01312cff 	.word	0x01312cff
 8007ee8:	014ca43f 	.word	0x014ca43f
 8007eec:	016e3600 	.word	0x016e3600
 8007ef0:	01a6ab1f 	.word	0x01a6ab1f
 8007ef4:	01e84800 	.word	0x01e84800

08007ef8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f043 0201 	orr.w	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f023 0201 	bic.w	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d115      	bne.n	8007f8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f6a:	200a      	movs	r0, #10
 8007f6c:	f7fa fd44 	bl	80029f8 <HAL_Delay>
      ms += 10U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	330a      	adds	r3, #10
 8007f74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 f939 	bl	80091ee <USB_GetMode>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d01e      	beq.n	8007fc0 <USB_SetCurrentMode+0x84>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f86:	d9f0      	bls.n	8007f6a <USB_SetCurrentMode+0x2e>
 8007f88:	e01a      	b.n	8007fc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d115      	bne.n	8007fbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f9c:	200a      	movs	r0, #10
 8007f9e:	f7fa fd2b 	bl	80029f8 <HAL_Delay>
      ms += 10U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	330a      	adds	r3, #10
 8007fa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f920 	bl	80091ee <USB_GetMode>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <USB_SetCurrentMode+0x84>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fb8:	d9f0      	bls.n	8007f9c <USB_SetCurrentMode+0x60>
 8007fba:	e001      	b.n	8007fc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e005      	b.n	8007fcc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2bc8      	cmp	r3, #200	@ 0xc8
 8007fc4:	d101      	bne.n	8007fca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b086      	sub	sp, #24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	e009      	b.n	8008008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	3340      	adds	r3, #64	@ 0x40
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	3301      	adds	r3, #1
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2b0e      	cmp	r3, #14
 800800c:	d9f2      	bls.n	8007ff4 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800800e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008012:	2b00      	cmp	r3, #0
 8008014:	d11c      	bne.n	8008050 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008024:	f043 0302 	orr.w	r3, r3, #2
 8008028:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e005      	b.n	800805c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008054:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008062:	461a      	mov	r2, r3
 8008064:	2300      	movs	r3, #0
 8008066:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008068:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10d      	bne.n	800808c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008078:	2100      	movs	r1, #0
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f968 	bl	8008350 <USB_SetDevSpeed>
 8008080:	e008      	b.n	8008094 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008082:	2101      	movs	r1, #1
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f963 	bl	8008350 <USB_SetDevSpeed>
 800808a:	e003      	b.n	8008094 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800808c:	2103      	movs	r1, #3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f95e 	bl	8008350 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008094:	2110      	movs	r1, #16
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f8fa 	bl	8008290 <USB_FlushTxFifo>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f924 	bl	80082f4 <USB_FlushRxFifo>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080bc:	461a      	mov	r2, r3
 80080be:	2300      	movs	r3, #0
 80080c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c8:	461a      	mov	r2, r3
 80080ca:	2300      	movs	r3, #0
 80080cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d4:	461a      	mov	r2, r3
 80080d6:	2300      	movs	r3, #0
 80080d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080da:	2300      	movs	r3, #0
 80080dc:	613b      	str	r3, [r7, #16]
 80080de:	e043      	b.n	8008168 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080f6:	d118      	bne.n	800812a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4413      	add	r3, r2
 8008106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800810a:	461a      	mov	r2, r3
 800810c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	e013      	b.n	800813c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008120:	461a      	mov	r2, r3
 8008122:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	e008      	b.n	800813c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008136:	461a      	mov	r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008148:	461a      	mov	r2, r3
 800814a:	2300      	movs	r3, #0
 800814c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800815a:	461a      	mov	r2, r3
 800815c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008160:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	3301      	adds	r3, #1
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800816c:	461a      	mov	r2, r3
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4293      	cmp	r3, r2
 8008172:	d3b5      	bcc.n	80080e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008174:	2300      	movs	r3, #0
 8008176:	613b      	str	r3, [r7, #16]
 8008178:	e043      	b.n	8008202 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800818c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008190:	d118      	bne.n	80081c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a4:	461a      	mov	r2, r3
 80081a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	e013      	b.n	80081d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ba:	461a      	mov	r2, r3
 80081bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	e008      	b.n	80081d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d0:	461a      	mov	r2, r3
 80081d2:	2300      	movs	r3, #0
 80081d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e2:	461a      	mov	r2, r3
 80081e4:	2300      	movs	r3, #0
 80081e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f4:	461a      	mov	r2, r3
 80081f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3301      	adds	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008206:	461a      	mov	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4293      	cmp	r3, r2
 800820c:	d3b5      	bcc.n	800817a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800821c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008220:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800822e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008230:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f043 0210 	orr.w	r2, r3, #16
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699a      	ldr	r2, [r3, #24]
 8008248:	4b10      	ldr	r3, [pc, #64]	@ (800828c <USB_DevInit+0x2b8>)
 800824a:	4313      	orrs	r3, r2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008250:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	f043 0208 	orr.w	r2, r3, #8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008264:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008268:	2b01      	cmp	r3, #1
 800826a:	d107      	bne.n	800827c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008274:	f043 0304 	orr.w	r3, r3, #4
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008288:	b004      	add	sp, #16
 800828a:	4770      	bx	lr
 800828c:	803c3800 	.word	0x803c3800

08008290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082aa:	d901      	bls.n	80082b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e01b      	b.n	80082e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	daf2      	bge.n	800829e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	019b      	lsls	r3, r3, #6
 80082c0:	f043 0220 	orr.w	r2, r3, #32
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3301      	adds	r3, #1
 80082cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082d4:	d901      	bls.n	80082da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e006      	b.n	80082e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d0f0      	beq.n	80082c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800830c:	d901      	bls.n	8008312 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e018      	b.n	8008344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	daf2      	bge.n	8008300 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2210      	movs	r2, #16
 8008322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008330:	d901      	bls.n	8008336 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e006      	b.n	8008344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b10      	cmp	r3, #16
 8008340:	d0f0      	beq.n	8008324 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	68f9      	ldr	r1, [r7, #12]
 800836c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008370:	4313      	orrs	r3, r2
 8008372:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008382:	b480      	push	{r7}
 8008384:	b087      	sub	sp, #28
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 0306 	and.w	r3, r3, #6
 800839a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d102      	bne.n	80083a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80083a2:	2300      	movs	r3, #0
 80083a4:	75fb      	strb	r3, [r7, #23]
 80083a6:	e00a      	b.n	80083be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d002      	beq.n	80083b4 <USB_GetDevSpeed+0x32>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b06      	cmp	r3, #6
 80083b2:	d102      	bne.n	80083ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80083b4:	2302      	movs	r3, #2
 80083b6:	75fb      	strb	r3, [r7, #23]
 80083b8:	e001      	b.n	80083be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80083ba:	230f      	movs	r3, #15
 80083bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d13a      	bne.n	800845e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	2101      	movs	r1, #1
 80083fa:	fa01 f303 	lsl.w	r3, r1, r3
 80083fe:	b29b      	uxth	r3, r3
 8008400:	68f9      	ldr	r1, [r7, #12]
 8008402:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008406:	4313      	orrs	r3, r2
 8008408:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d155      	bne.n	80084cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	791b      	ldrb	r3, [r3, #4]
 800843a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800843c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	059b      	lsls	r3, r3, #22
 8008442:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008444:	4313      	orrs	r3, r2
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	440a      	add	r2, r1
 800844e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	e036      	b.n	80084cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008464:	69da      	ldr	r2, [r3, #28]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	2101      	movs	r1, #1
 8008470:	fa01 f303 	lsl.w	r3, r1, r3
 8008474:	041b      	lsls	r3, r3, #16
 8008476:	68f9      	ldr	r1, [r7, #12]
 8008478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800847c:	4313      	orrs	r3, r2
 800847e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d11a      	bne.n	80084cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	791b      	ldrb	r3, [r3, #4]
 80084b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80084b2:	430b      	orrs	r3, r1
 80084b4:	4313      	orrs	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	0151      	lsls	r1, r2, #5
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	440a      	add	r2, r1
 80084be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
	...

080084dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d161      	bne.n	80085bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800850a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800850e:	d11f      	bne.n	8008550 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	440a      	add	r2, r1
 8008526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800852a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800852e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	0151      	lsls	r1, r2, #5
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	440a      	add	r2, r1
 8008546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800854a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800854e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f003 030f 	and.w	r3, r3, #15
 8008560:	2101      	movs	r1, #1
 8008562:	fa01 f303 	lsl.w	r3, r1, r3
 8008566:	b29b      	uxth	r3, r3
 8008568:	43db      	mvns	r3, r3
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008570:	4013      	ands	r3, r2
 8008572:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800857a:	69da      	ldr	r2, [r3, #28]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	f003 030f 	and.w	r3, r3, #15
 8008584:	2101      	movs	r1, #1
 8008586:	fa01 f303 	lsl.w	r3, r1, r3
 800858a:	b29b      	uxth	r3, r3
 800858c:	43db      	mvns	r3, r3
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008594:	4013      	ands	r3, r2
 8008596:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	0159      	lsls	r1, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	440b      	add	r3, r1
 80085ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b2:	4619      	mov	r1, r3
 80085b4:	4b35      	ldr	r3, [pc, #212]	@ (800868c <USB_DeactivateEndpoint+0x1b0>)
 80085b6:	4013      	ands	r3, r2
 80085b8:	600b      	str	r3, [r1, #0]
 80085ba:	e060      	b.n	800867e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085d2:	d11f      	bne.n	8008614 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800860e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008612:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	2101      	movs	r1, #1
 8008626:	fa01 f303 	lsl.w	r3, r1, r3
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	43db      	mvns	r3, r3
 800862e:	68f9      	ldr	r1, [r7, #12]
 8008630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008634:	4013      	ands	r3, r2
 8008636:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800863e:	69da      	ldr	r2, [r3, #28]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	2101      	movs	r1, #1
 800864a:	fa01 f303 	lsl.w	r3, r1, r3
 800864e:	041b      	lsls	r3, r3, #16
 8008650:	43db      	mvns	r3, r3
 8008652:	68f9      	ldr	r1, [r7, #12]
 8008654:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008658:	4013      	ands	r3, r2
 800865a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	0159      	lsls	r1, r3, #5
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	440b      	add	r3, r1
 8008672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008676:	4619      	mov	r1, r3
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <USB_DeactivateEndpoint+0x1b4>)
 800867a:	4013      	ands	r3, r2
 800867c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	ec337800 	.word	0xec337800
 8008690:	eff37800 	.word	0xeff37800

08008694 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08a      	sub	sp, #40	@ 0x28
 8008698:	af02      	add	r7, sp, #8
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	4613      	mov	r3, r2
 80086a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	f040 817f 	bne.w	80089b4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d132      	bne.n	8008724 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80086dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80086e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008700:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	0151      	lsls	r1, r2, #5
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	440a      	add	r2, r1
 8008718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800871c:	0cdb      	lsrs	r3, r3, #19
 800871e:	04db      	lsls	r3, r3, #19
 8008720:	6113      	str	r3, [r2, #16]
 8008722:	e097      	b.n	8008854 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	440a      	add	r2, r1
 800873a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800873e:	0cdb      	lsrs	r3, r3, #19
 8008740:	04db      	lsls	r3, r3, #19
 8008742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	0151      	lsls	r1, r2, #5
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	440a      	add	r2, r1
 800875a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800875e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008762:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008766:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d11a      	bne.n	80087a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	691a      	ldr	r2, [r3, #16]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	d903      	bls.n	8008782 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	689a      	ldr	r2, [r3, #8]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800879c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087a0:	6113      	str	r3, [r2, #16]
 80087a2:	e044      	b.n	800882e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	1e5a      	subs	r2, r3, #1
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c6:	691a      	ldr	r2, [r3, #16]
 80087c8:	8afb      	ldrh	r3, [r7, #22]
 80087ca:	04d9      	lsls	r1, r3, #19
 80087cc:	4ba4      	ldr	r3, [pc, #656]	@ (8008a60 <USB_EPStartXfer+0x3cc>)
 80087ce:	400b      	ands	r3, r1
 80087d0:	69b9      	ldr	r1, [r7, #24]
 80087d2:	0148      	lsls	r0, r1, #5
 80087d4:	69f9      	ldr	r1, [r7, #28]
 80087d6:	4401      	add	r1, r0
 80087d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087dc:	4313      	orrs	r3, r2
 80087de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	791b      	ldrb	r3, [r3, #4]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d122      	bne.n	800882e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	0151      	lsls	r1, r2, #5
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	440a      	add	r2, r1
 80087fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008802:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008806:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008814:	691a      	ldr	r2, [r3, #16]
 8008816:	8afb      	ldrh	r3, [r7, #22]
 8008818:	075b      	lsls	r3, r3, #29
 800881a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800881e:	69b9      	ldr	r1, [r7, #24]
 8008820:	0148      	lsls	r0, r1, #5
 8008822:	69f9      	ldr	r1, [r7, #28]
 8008824:	4401      	add	r1, r0
 8008826:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800882a:	4313      	orrs	r3, r2
 800882c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008844:	69b9      	ldr	r1, [r7, #24]
 8008846:	0148      	lsls	r0, r1, #5
 8008848:	69f9      	ldr	r1, [r7, #28]
 800884a:	4401      	add	r1, r0
 800884c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008850:	4313      	orrs	r3, r2
 8008852:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d14b      	bne.n	80088f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800886e:	461a      	mov	r2, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	791b      	ldrb	r3, [r3, #4]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d128      	bne.n	80088d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d110      	bne.n	80088b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	0151      	lsls	r1, r2, #5
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	440a      	add	r2, r1
 80088a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	e00f      	b.n	80088d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	0151      	lsls	r1, r2, #5
 80088c2:	69fa      	ldr	r2, [r7, #28]
 80088c4:	440a      	add	r2, r1
 80088c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	e166      	b.n	8008bc0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	440a      	add	r2, r1
 8008908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800890c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008910:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	791b      	ldrb	r3, [r3, #4]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d015      	beq.n	8008946 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 814e 	beq.w	8008bc0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800892a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	2101      	movs	r1, #1
 8008936:	fa01 f303 	lsl.w	r3, r1, r3
 800893a:	69f9      	ldr	r1, [r7, #28]
 800893c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008940:	4313      	orrs	r3, r2
 8008942:	634b      	str	r3, [r1, #52]	@ 0x34
 8008944:	e13c      	b.n	8008bc0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008952:	2b00      	cmp	r3, #0
 8008954:	d110      	bne.n	8008978 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	440a      	add	r2, r1
 800896c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008970:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	e00f      	b.n	8008998 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	0151      	lsls	r1, r2, #5
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	440a      	add	r2, r1
 800898e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008996:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	68d9      	ldr	r1, [r3, #12]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	b298      	uxth	r0, r3
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4603      	mov	r3, r0
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f9b9 	bl	8008d24 <USB_WritePacket>
 80089b2:	e105      	b.n	8008bc0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ce:	0cdb      	lsrs	r3, r3, #19
 80089d0:	04db      	lsls	r3, r3, #19
 80089d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80089f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80089f6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d132      	bne.n	8008a64 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a22:	691a      	ldr	r2, [r3, #16]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a2c:	69b9      	ldr	r1, [r7, #24]
 8008a2e:	0148      	lsls	r0, r1, #5
 8008a30:	69f9      	ldr	r1, [r7, #28]
 8008a32:	4401      	add	r1, r0
 8008a34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	0151      	lsls	r1, r2, #5
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	440a      	add	r2, r1
 8008a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a5a:	6113      	str	r3, [r2, #16]
 8008a5c:	e062      	b.n	8008b24 <USB_EPStartXfer+0x490>
 8008a5e:	bf00      	nop
 8008a60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d123      	bne.n	8008ab4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a82:	69b9      	ldr	r1, [r7, #24]
 8008a84:	0148      	lsls	r0, r1, #5
 8008a86:	69f9      	ldr	r1, [r7, #28]
 8008a88:	4401      	add	r1, r0
 8008a8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	0151      	lsls	r1, r2, #5
 8008aa4:	69fa      	ldr	r2, [r7, #28]
 8008aa6:	440a      	add	r2, r1
 8008aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ab0:	6113      	str	r3, [r2, #16]
 8008ab2:	e037      	b.n	8008b24 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	691a      	ldr	r2, [r3, #16]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	4413      	add	r3, r2
 8008abe:	1e5a      	subs	r2, r3, #1
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	8afa      	ldrh	r2, [r7, #22]
 8008ad0:	fb03 f202 	mul.w	r2, r3, r2
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	8afb      	ldrh	r3, [r7, #22]
 8008ae8:	04d9      	lsls	r1, r3, #19
 8008aea:	4b38      	ldr	r3, [pc, #224]	@ (8008bcc <USB_EPStartXfer+0x538>)
 8008aec:	400b      	ands	r3, r1
 8008aee:	69b9      	ldr	r1, [r7, #24]
 8008af0:	0148      	lsls	r0, r1, #5
 8008af2:	69f9      	ldr	r1, [r7, #28]
 8008af4:	4401      	add	r1, r0
 8008af6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008afa:	4313      	orrs	r3, r2
 8008afc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b14:	69b9      	ldr	r1, [r7, #24]
 8008b16:	0148      	lsls	r0, r1, #5
 8008b18:	69f9      	ldr	r1, [r7, #28]
 8008b1a:	4401      	add	r1, r0
 8008b1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b20:	4313      	orrs	r3, r2
 8008b22:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d10d      	bne.n	8008b46 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d009      	beq.n	8008b46 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	68d9      	ldr	r1, [r3, #12]
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b42:	460a      	mov	r2, r1
 8008b44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	791b      	ldrb	r3, [r3, #4]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d128      	bne.n	8008ba0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d110      	bne.n	8008b80 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	e00f      	b.n	8008ba0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	1ff80000 	.word	0x1ff80000

08008bd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d14a      	bne.n	8008c84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c06:	f040 8086 	bne.w	8008d16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	7812      	ldrb	r2, [r2, #0]
 8008c1e:	0151      	lsls	r1, r2, #5
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	440a      	add	r2, r1
 8008c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	7812      	ldrb	r2, [r2, #0]
 8008c42:	0151      	lsls	r1, r2, #5
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	440a      	add	r2, r1
 8008c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d902      	bls.n	8008c68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	75fb      	strb	r3, [r7, #23]
          break;
 8008c66:	e056      	b.n	8008d16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c80:	d0e7      	beq.n	8008c52 <USB_EPStopXfer+0x82>
 8008c82:	e048      	b.n	8008d16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c9c:	d13b      	bne.n	8008d16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	7812      	ldrb	r2, [r2, #0]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008cc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	7812      	ldrb	r2, [r2, #0]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ce0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ce4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d902      	bls.n	8008cfc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cfa:	e00c      	b.n	8008d16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d14:	d0e7      	beq.n	8008ce6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	371c      	adds	r7, #28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b089      	sub	sp, #36	@ 0x24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	461a      	mov	r2, r3
 8008d32:	460b      	mov	r3, r1
 8008d34:	71fb      	strb	r3, [r7, #7]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d123      	bne.n	8008d92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d4a:	88bb      	ldrh	r3, [r7, #4]
 8008d4c:	3303      	adds	r3, #3
 8008d4e:	089b      	lsrs	r3, r3, #2
 8008d50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d52:	2300      	movs	r3, #0
 8008d54:	61bb      	str	r3, [r7, #24]
 8008d56:	e018      	b.n	8008d8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	031a      	lsls	r2, r3, #12
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d64:	461a      	mov	r2, r3
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	3301      	adds	r3, #1
 8008d76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	3301      	adds	r3, #1
 8008d82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	3301      	adds	r3, #1
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d3e2      	bcc.n	8008d58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3724      	adds	r7, #36	@ 0x24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b08b      	sub	sp, #44	@ 0x2c
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	4613      	mov	r3, r2
 8008dac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008db6:	88fb      	ldrh	r3, [r7, #6]
 8008db8:	089b      	lsrs	r3, r3, #2
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008dbe:	88fb      	ldrh	r3, [r7, #6]
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	623b      	str	r3, [r7, #32]
 8008dca:	e014      	b.n	8008df6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	3301      	adds	r3, #1
 8008ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	3301      	adds	r3, #1
 8008de2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	3301      	adds	r3, #1
 8008de8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dec:	3301      	adds	r3, #1
 8008dee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	3301      	adds	r3, #1
 8008df4:	623b      	str	r3, [r7, #32]
 8008df6:	6a3a      	ldr	r2, [r7, #32]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d3e6      	bcc.n	8008dcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008dfe:	8bfb      	ldrh	r3, [r7, #30]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01e      	beq.n	8008e42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f107 0310 	add.w	r3, r7, #16
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	701a      	strb	r2, [r3, #0]
      i++;
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	3301      	adds	r3, #1
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008e36:	8bfb      	ldrh	r3, [r7, #30]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e3c:	8bfb      	ldrh	r3, [r7, #30]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1ea      	bne.n	8008e18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	372c      	adds	r7, #44	@ 0x2c
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d12c      	bne.n	8008ec6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	db12      	blt.n	8008ea4 <USB_EPSetStall+0x54>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00f      	beq.n	8008ea4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	0151      	lsls	r1, r2, #5
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	440a      	add	r2, r1
 8008e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ea2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	0151      	lsls	r1, r2, #5
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	440a      	add	r2, r1
 8008eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ebe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	e02b      	b.n	8008f1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	db12      	blt.n	8008efe <USB_EPSetStall+0xae>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00f      	beq.n	8008efe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	0151      	lsls	r1, r2, #5
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	440a      	add	r2, r1
 8008ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ef8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008efc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	0151      	lsls	r1, r2, #5
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	440a      	add	r2, r1
 8008f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d128      	bne.n	8008f9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	0151      	lsls	r1, r2, #5
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	440a      	add	r2, r1
 8008f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	791b      	ldrb	r3, [r3, #4]
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d003      	beq.n	8008f78 <USB_EPClearStall+0x4c>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	791b      	ldrb	r3, [r3, #4]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d138      	bne.n	8008fea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	0151      	lsls	r1, r2, #5
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	440a      	add	r2, r1
 8008f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	e027      	b.n	8008fea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fb4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	791b      	ldrb	r3, [r3, #4]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d003      	beq.n	8008fca <USB_EPClearStall+0x9e>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	791b      	ldrb	r3, [r3, #4]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d10f      	bne.n	8008fea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	0151      	lsls	r1, r2, #5
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	440a      	add	r2, r1
 8008fe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fe8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009016:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800901a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	011b      	lsls	r3, r3, #4
 8009028:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800902c:	68f9      	ldr	r1, [r7, #12]
 800902e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009032:	4313      	orrs	r3, r2
 8009034:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009072:	f023 0302 	bic.w	r3, r3, #2
 8009076:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090a0:	f023 0303 	bic.w	r3, r3, #3
 80090a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090b4:	f043 0302 	orr.w	r3, r3, #2
 80090b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4013      	ands	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80090e0:	68fb      	ldr	r3, [r7, #12]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b085      	sub	sp, #20
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	4013      	ands	r3, r2
 8009110:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	0c1b      	lsrs	r3, r3, #16
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	4013      	ands	r3, r2
 8009144:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	b29b      	uxth	r3, r3
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009166:	78fb      	ldrb	r3, [r7, #3]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4413      	add	r3, r2
 800916e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4013      	ands	r3, r2
 8009182:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009184:	68bb      	ldr	r3, [r7, #8]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009192:	b480      	push	{r7}
 8009194:	b087      	sub	sp, #28
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80091b6:	78fb      	ldrb	r3, [r7, #3]
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	fa22 f303 	lsr.w	r3, r2, r3
 80091c2:	01db      	lsls	r3, r3, #7
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	4013      	ands	r3, r2
 80091de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091e0:	68bb      	ldr	r3, [r7, #8]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f003 0301 	and.w	r3, r3, #1
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800920a:	b480      	push	{r7}
 800920c:	b085      	sub	sp, #20
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009224:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009228:	f023 0307 	bic.w	r3, r3, #7
 800922c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800923c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009240:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	460b      	mov	r3, r1
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	333c      	adds	r3, #60	@ 0x3c
 8009266:	3304      	adds	r3, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	4a26      	ldr	r2, [pc, #152]	@ (8009308 <USB_EP0_OutStart+0xb8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d90a      	bls.n	800928a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009284:	d101      	bne.n	800928a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	e037      	b.n	80092fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009290:	461a      	mov	r2, r3
 8009292:	2300      	movs	r3, #0
 8009294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b8:	f043 0318 	orr.w	r3, r3, #24
 80092bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80092d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d10f      	bne.n	80092f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092de:	461a      	mov	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80092f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	4f54300a 	.word	0x4f54300a

0800930c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3301      	adds	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009324:	d901      	bls.n	800932a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e01b      	b.n	8009362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	daf2      	bge.n	8009318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f043 0201 	orr.w	r2, r3, #1
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800934e:	d901      	bls.n	8009354 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e006      	b.n	8009362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b01      	cmp	r3, #1
 800935e:	d0f0      	beq.n	8009342 <USB_CoreReset+0x36>

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
	...

08009370 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8009374:	f001 f992 	bl	800a69c <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8009378:	2200      	movs	r2, #0
 800937a:	4917      	ldr	r1, [pc, #92]	@ (80093d8 <MX_USB_DEVICE_Init+0x68>)
 800937c:	4817      	ldr	r0, [pc, #92]	@ (80093dc <MX_USB_DEVICE_Init+0x6c>)
 800937e:	f001 fda7 	bl	800aed0 <USBD_Init>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8009388:	f7f8 fec2 	bl	8002110 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800938c:	4914      	ldr	r1, [pc, #80]	@ (80093e0 <MX_USB_DEVICE_Init+0x70>)
 800938e:	4813      	ldr	r0, [pc, #76]	@ (80093dc <MX_USB_DEVICE_Init+0x6c>)
 8009390:	f001 fdca 	bl	800af28 <USBD_RegisterClass>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800939a:	f7f8 feb9 	bl	8002110 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800939e:	4911      	ldr	r1, [pc, #68]	@ (80093e4 <MX_USB_DEVICE_Init+0x74>)
 80093a0:	480e      	ldr	r0, [pc, #56]	@ (80093dc <MX_USB_DEVICE_Init+0x6c>)
 80093a2:	f000 fe55 	bl	800a050 <USBD_CDC_ACM_RegisterInterface>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80093ac:	f7f8 feb0 	bl	8002110 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 80093b0:	490d      	ldr	r1, [pc, #52]	@ (80093e8 <MX_USB_DEVICE_Init+0x78>)
 80093b2:	480a      	ldr	r0, [pc, #40]	@ (80093dc <MX_USB_DEVICE_Init+0x6c>)
 80093b4:	f001 fd3e 	bl	800ae34 <USBD_CUSTOM_HID_RegisterInterface>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 80093be:	f7f8 fea7 	bl	8002110 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 80093c2:	4806      	ldr	r0, [pc, #24]	@ (80093dc <MX_USB_DEVICE_Init+0x6c>)
 80093c4:	f001 fdee 	bl	800afa4 <USBD_Start>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 80093ce:	f7f8 fe9f 	bl	8002110 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093d2:	bf00      	nop
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000024 	.word	0x20000024
 80093dc:	20000ce0 	.word	0x20000ce0
 80093e0:	200001ac 	.word	0x200001ac
 80093e4:	20000010 	.word	0x20000010
 80093e8:	200000bc 	.word	0x200000bc

080093ec <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	4a06      	ldr	r2, [pc, #24]	@ (8009414 <CDC_Init+0x28>)
 80093fc:	441a      	add	r2, r3
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	4905      	ldr	r1, [pc, #20]	@ (8009418 <CDC_Init+0x2c>)
 8009402:	4618      	mov	r0, r3
 8009404:	f000 fe5e 	bl	800a0c4 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8009408:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20000ffc 	.word	0x20000ffc
 8009418:	20000ce0 	.word	0x20000ce0

0800941c <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8009426:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009428:	4618      	mov	r0, r3
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	603a      	str	r2, [r7, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	4603      	mov	r3, r0
 8009440:	71fb      	strb	r3, [r7, #7]
 8009442:	460b      	mov	r3, r1
 8009444:	71bb      	strb	r3, [r7, #6]
 8009446:	4613      	mov	r3, r2
 8009448:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800944a:	79bb      	ldrb	r3, [r7, #6]
 800944c:	2b23      	cmp	r3, #35	@ 0x23
 800944e:	f200 80b6 	bhi.w	80095be <CDC_Control+0x18a>
 8009452:	a201      	add	r2, pc, #4	@ (adr r2, 8009458 <CDC_Control+0x24>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	080095bf 	.word	0x080095bf
 800945c:	080095bf 	.word	0x080095bf
 8009460:	080095bf 	.word	0x080095bf
 8009464:	080095bf 	.word	0x080095bf
 8009468:	080095bf 	.word	0x080095bf
 800946c:	080095bf 	.word	0x080095bf
 8009470:	080095bf 	.word	0x080095bf
 8009474:	080095bf 	.word	0x080095bf
 8009478:	080095bf 	.word	0x080095bf
 800947c:	080095bf 	.word	0x080095bf
 8009480:	080095bf 	.word	0x080095bf
 8009484:	080095bf 	.word	0x080095bf
 8009488:	080095bf 	.word	0x080095bf
 800948c:	080095bf 	.word	0x080095bf
 8009490:	080095bf 	.word	0x080095bf
 8009494:	080095bf 	.word	0x080095bf
 8009498:	080095bf 	.word	0x080095bf
 800949c:	080095bf 	.word	0x080095bf
 80094a0:	080095bf 	.word	0x080095bf
 80094a4:	080095bf 	.word	0x080095bf
 80094a8:	080095bf 	.word	0x080095bf
 80094ac:	080095bf 	.word	0x080095bf
 80094b0:	080095bf 	.word	0x080095bf
 80094b4:	080095bf 	.word	0x080095bf
 80094b8:	080095bf 	.word	0x080095bf
 80094bc:	080095bf 	.word	0x080095bf
 80094c0:	080095bf 	.word	0x080095bf
 80094c4:	080095bf 	.word	0x080095bf
 80094c8:	080095bf 	.word	0x080095bf
 80094cc:	080095bf 	.word	0x080095bf
 80094d0:	080095bf 	.word	0x080095bf
 80094d4:	080095bf 	.word	0x080095bf
 80094d8:	080094e9 	.word	0x080094e9
 80094dc:	08009549 	.word	0x08009549
 80094e0:	080095bf 	.word	0x080095bf
 80094e4:	080095bf 	.word	0x080095bf
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	461a      	mov	r2, r3
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	3301      	adds	r3, #1
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	021b      	lsls	r3, r3, #8
 80094f6:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	3302      	adds	r3, #2
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009500:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	3303      	adds	r3, #3
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	061b      	lsls	r3, r3, #24
 800950a:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800950c:	79fb      	ldrb	r3, [r7, #7]
 800950e:	4611      	mov	r1, r2
 8009510:	4a2f      	ldr	r2, [pc, #188]	@ (80095d0 <CDC_Control+0x19c>)
 8009512:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	7911      	ldrb	r1, [r2, #4]
 800951c:	4a2c      	ldr	r2, [pc, #176]	@ (80095d0 <CDC_Control+0x19c>)
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	4413      	add	r3, r2
 8009522:	460a      	mov	r2, r1
 8009524:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8009526:	79fb      	ldrb	r3, [r7, #7]
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	7951      	ldrb	r1, [r2, #5]
 800952c:	4a28      	ldr	r2, [pc, #160]	@ (80095d0 <CDC_Control+0x19c>)
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	4413      	add	r3, r2
 8009532:	460a      	mov	r2, r1
 8009534:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	7991      	ldrb	r1, [r2, #6]
 800953c:	4a24      	ldr	r2, [pc, #144]	@ (80095d0 <CDC_Control+0x19c>)
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	4413      	add	r3, r2
 8009542:	460a      	mov	r2, r1
 8009544:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8009546:	e03b      	b.n	80095c0 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	4a21      	ldr	r2, [pc, #132]	@ (80095d0 <CDC_Control+0x19c>)
 800954c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009550:	b2da      	uxtb	r2, r3
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	4a1d      	ldr	r2, [pc, #116]	@ (80095d0 <CDC_Control+0x19c>)
 800955a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800955e:	0a1a      	lsrs	r2, r3, #8
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	4a19      	ldr	r2, [pc, #100]	@ (80095d0 <CDC_Control+0x19c>)
 800956c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009570:	0c1a      	lsrs	r2, r3, #16
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	3302      	adds	r3, #2
 8009576:	b2d2      	uxtb	r2, r2
 8009578:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	4a14      	ldr	r2, [pc, #80]	@ (80095d0 <CDC_Control+0x19c>)
 800957e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009582:	0e1a      	lsrs	r2, r3, #24
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	3303      	adds	r3, #3
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	3204      	adds	r2, #4
 8009592:	490f      	ldr	r1, [pc, #60]	@ (80095d0 <CDC_Control+0x19c>)
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	440b      	add	r3, r1
 8009598:	791b      	ldrb	r3, [r3, #4]
 800959a:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	3205      	adds	r2, #5
 80095a2:	490b      	ldr	r1, [pc, #44]	@ (80095d0 <CDC_Control+0x19c>)
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	440b      	add	r3, r1
 80095a8:	795b      	ldrb	r3, [r3, #5]
 80095aa:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	3206      	adds	r2, #6
 80095b2:	4907      	ldr	r1, [pc, #28]	@ (80095d0 <CDC_Control+0x19c>)
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	440b      	add	r3, r1
 80095b8:	799b      	ldrb	r3, [r3, #6]
 80095ba:	7013      	strb	r3, [r2, #0]
    break;
 80095bc:	e000      	b.n	80095c0 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095be:	bf00      	nop
  }

  return (USBD_OK);
 80095c0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	200010fc 	.word	0x200010fc

080095d4 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  signalTelemetryTask(Buf, *Len);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4619      	mov	r1, r3
 80095e8:	68b8      	ldr	r0, [r7, #8]
 80095ea:	f7f8 faf5 	bl	8001bd8 <signalTelemetryTask>
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 f825 	bl	8009648 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	4907      	ldr	r1, [pc, #28]	@ (8009620 <CDC_Receive+0x4c>)
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fd5d 	bl	800a0c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	4904      	ldr	r1, [pc, #16]	@ (8009620 <CDC_Receive+0x4c>)
 800960e:	4618      	mov	r0, r3
 8009610:	f000 fdb8 	bl	800a184 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009614:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000ce0 	.word	0x20000ce0

08009624 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	607a      	str	r2, [r7, #4]
 800962e:	461a      	mov	r2, r3
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]
 8009634:	4613      	mov	r3, r2
 8009636:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	71fb      	strb	r3, [r7, #7]
 8009654:	4613      	mov	r3, r2
 8009656:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800965c:	2300      	movs	r3, #0
 800965e:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009666:	fb02 f303 	mul.w	r3, r2, r3
 800966a:	4a0e      	ldr	r2, [pc, #56]	@ (80096a4 <CDC_Transmit+0x5c>)
 800966c:	4413      	add	r3, r2
 800966e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800967a:	2301      	movs	r3, #1
 800967c:	e00d      	b.n	800969a <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800967e:	88bb      	ldrh	r3, [r7, #4]
 8009680:	79f8      	ldrb	r0, [r7, #7]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4908      	ldr	r1, [pc, #32]	@ (80096a8 <CDC_Transmit+0x60>)
 8009686:	f000 fcf9 	bl	800a07c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	4906      	ldr	r1, [pc, #24]	@ (80096a8 <CDC_Transmit+0x60>)
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fd36 	bl	800a100 <USBD_CDC_TransmitPacket>
 8009694:	4603      	mov	r3, r0
 8009696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	2000131c 	.word	0x2000131c
 80096a8:	20000ce0 	.word	0x20000ce0

080096ac <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2212      	movs	r2, #18
 80096bc:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 80096be:	4b03      	ldr	r3, [pc, #12]	@ (80096cc <USBD_DeviceDescriptor+0x20>)
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	20000040 	.word	0x20000040

080096d0 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	6039      	str	r1, [r7, #0]
 80096da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2204      	movs	r2, #4
 80096e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096e2:	4b03      	ldr	r3, [pc, #12]	@ (80096f0 <USBD_LangIDStrDescriptor+0x20>)
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20000054 	.word	0x20000054

080096f4 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	6039      	str	r1, [r7, #0]
 80096fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d105      	bne.n	8009712 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	4907      	ldr	r1, [pc, #28]	@ (8009728 <USBD_ProductStrDescriptor+0x34>)
 800970a:	4808      	ldr	r0, [pc, #32]	@ (800972c <USBD_ProductStrDescriptor+0x38>)
 800970c:	f002 fc89 	bl	800c022 <USBD_GetString>
 8009710:	e004      	b.n	800971c <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	4904      	ldr	r1, [pc, #16]	@ (8009728 <USBD_ProductStrDescriptor+0x34>)
 8009716:	4805      	ldr	r0, [pc, #20]	@ (800972c <USBD_ProductStrDescriptor+0x38>)
 8009718:	f002 fc83 	bl	800c022 <USBD_GetString>
  }
  return USBD_StrDesc;
 800971c:	4b02      	ldr	r3, [pc, #8]	@ (8009728 <USBD_ProductStrDescriptor+0x34>)
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20001104 	.word	0x20001104
 800972c:	08010538 	.word	0x08010538

08009730 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	4904      	ldr	r1, [pc, #16]	@ (8009750 <USBD_ManufacturerStrDescriptor+0x20>)
 8009740:	4804      	ldr	r0, [pc, #16]	@ (8009754 <USBD_ManufacturerStrDescriptor+0x24>)
 8009742:	f002 fc6e 	bl	800c022 <USBD_GetString>
  return USBD_StrDesc;
 8009746:	4b02      	ldr	r3, [pc, #8]	@ (8009750 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20001104 	.word	0x20001104
 8009754:	08010550 	.word	0x08010550

08009758 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	6039      	str	r1, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	221a      	movs	r2, #26
 8009768:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800976a:	f000 f843 	bl	80097f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800976e:	4b02      	ldr	r3, [pc, #8]	@ (8009778 <USBD_SerialStrDescriptor+0x20>)
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20000058 	.word	0x20000058

0800977c <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d105      	bne.n	800979a <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4907      	ldr	r1, [pc, #28]	@ (80097b0 <USBD_ConfigStrDescriptor+0x34>)
 8009792:	4808      	ldr	r0, [pc, #32]	@ (80097b4 <USBD_ConfigStrDescriptor+0x38>)
 8009794:	f002 fc45 	bl	800c022 <USBD_GetString>
 8009798:	e004      	b.n	80097a4 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	4904      	ldr	r1, [pc, #16]	@ (80097b0 <USBD_ConfigStrDescriptor+0x34>)
 800979e:	4805      	ldr	r0, [pc, #20]	@ (80097b4 <USBD_ConfigStrDescriptor+0x38>)
 80097a0:	f002 fc3f 	bl	800c022 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a4:	4b02      	ldr	r3, [pc, #8]	@ (80097b0 <USBD_ConfigStrDescriptor+0x34>)
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20001104 	.word	0x20001104
 80097b4:	08010564 	.word	0x08010564

080097b8 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d105      	bne.n	80097d6 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4907      	ldr	r1, [pc, #28]	@ (80097ec <USBD_InterfaceStrDescriptor+0x34>)
 80097ce:	4808      	ldr	r0, [pc, #32]	@ (80097f0 <USBD_InterfaceStrDescriptor+0x38>)
 80097d0:	f002 fc27 	bl	800c022 <USBD_GetString>
 80097d4:	e004      	b.n	80097e0 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	4904      	ldr	r1, [pc, #16]	@ (80097ec <USBD_InterfaceStrDescriptor+0x34>)
 80097da:	4805      	ldr	r0, [pc, #20]	@ (80097f0 <USBD_InterfaceStrDescriptor+0x38>)
 80097dc:	f002 fc21 	bl	800c022 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097e0:	4b02      	ldr	r3, [pc, #8]	@ (80097ec <USBD_InterfaceStrDescriptor+0x34>)
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20001104 	.word	0x20001104
 80097f0:	08010574 	.word	0x08010574

080097f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009838 <Get_SerialNum+0x44>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009800:	4b0e      	ldr	r3, [pc, #56]	@ (800983c <Get_SerialNum+0x48>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009806:	4b0e      	ldr	r3, [pc, #56]	@ (8009840 <Get_SerialNum+0x4c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4413      	add	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800981a:	2208      	movs	r2, #8
 800981c:	4909      	ldr	r1, [pc, #36]	@ (8009844 <Get_SerialNum+0x50>)
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 f814 	bl	800984c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009824:	2204      	movs	r2, #4
 8009826:	4908      	ldr	r1, [pc, #32]	@ (8009848 <Get_SerialNum+0x54>)
 8009828:	68b8      	ldr	r0, [r7, #8]
 800982a:	f000 f80f 	bl	800984c <IntToUnicode>
  }
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	1fff7a10 	.word	0x1fff7a10
 800983c:	1fff7a14 	.word	0x1fff7a14
 8009840:	1fff7a18 	.word	0x1fff7a18
 8009844:	2000005a 	.word	0x2000005a
 8009848:	2000006a 	.word	0x2000006a

0800984c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
 8009862:	e027      	b.n	80098b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	0f1b      	lsrs	r3, r3, #28
 8009868:	2b09      	cmp	r3, #9
 800986a:	d80b      	bhi.n	8009884 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	0f1b      	lsrs	r3, r3, #28
 8009870:	b2da      	uxtb	r2, r3
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	4619      	mov	r1, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	440b      	add	r3, r1
 800987c:	3230      	adds	r2, #48	@ 0x30
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	701a      	strb	r2, [r3, #0]
 8009882:	e00a      	b.n	800989a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	0f1b      	lsrs	r3, r3, #28
 8009888:	b2da      	uxtb	r2, r3
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	4619      	mov	r1, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	440b      	add	r3, r1
 8009894:	3237      	adds	r2, #55	@ 0x37
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	3301      	adds	r3, #1
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	4413      	add	r3, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	3301      	adds	r3, #1
 80098b2:	75fb      	strb	r3, [r7, #23]
 80098b4:	7dfa      	ldrb	r2, [r7, #23]
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d3d3      	bcc.n	8009864 <IntToUnicode+0x18>
  }
}
 80098bc:	bf00      	nop
 80098be:	bf00      	nop
 80098c0:	371c      	adds	r7, #28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 80098ca:	b480      	push	{r7}
 80098cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098ce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 80098da:	b480      	push	{r7}
 80098dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80098de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	4603      	mov	r3, r0
 80098f2:	460a      	mov	r2, r1
 80098f4:	71fb      	strb	r3, [r7, #7]
 80098f6:	4613      	mov	r3, r2
 80098f8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 80098fa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <USBD_CUSTOM_HID_SendCustomReport>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendCustomReport(uint8_t *report, uint16_t len)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDevice, report, len);
 8009914:	887b      	ldrh	r3, [r7, #2]
 8009916:	461a      	mov	r2, r3
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	4804      	ldr	r0, [pc, #16]	@ (800992c <USBD_CUSTOM_HID_SendCustomReport+0x24>)
 800991c:	f001 f9c4 	bl	800aca8 <USBD_CUSTOM_HID_SendReport>
 8009920:	4603      	mov	r3, r0
 8009922:	b25b      	sxtb	r3, r3
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	20000ce0 	.word	0x20000ce0

08009930 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800993c:	2300      	movs	r3, #0
 800993e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
 8009944:	e0c6      	b.n	8009ad4 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	4a65      	ldr	r2, [pc, #404]	@ (8009ae8 <USBD_CDC_Init+0x1b8>)
 8009952:	4413      	add	r3, r2
 8009954:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	7c1b      	ldrb	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d13d      	bne.n	80099da <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	4a62      	ldr	r2, [pc, #392]	@ (8009aec <USBD_CDC_Init+0x1bc>)
 8009962:	5cd1      	ldrb	r1, [r2, r3]
 8009964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009968:	2202      	movs	r2, #2
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f002 fdcb 	bl	800c506 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4a5e      	ldr	r2, [pc, #376]	@ (8009aec <USBD_CDC_Init+0x1bc>)
 8009974:	5cd3      	ldrb	r3, [r2, r3]
 8009976:	f003 020f 	and.w	r2, r3, #15
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	4613      	mov	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	3324      	adds	r3, #36	@ 0x24
 8009988:	2201      	movs	r2, #1
 800998a:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	4a58      	ldr	r2, [pc, #352]	@ (8009af0 <USBD_CDC_Init+0x1c0>)
 8009990:	5cd1      	ldrb	r1, [r2, r3]
 8009992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009996:	2202      	movs	r2, #2
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f002 fdb4 	bl	800c506 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	4a53      	ldr	r2, [pc, #332]	@ (8009af0 <USBD_CDC_Init+0x1c0>)
 80099a2:	5cd3      	ldrb	r3, [r2, r3]
 80099a4:	f003 020f 	and.w	r2, r3, #15
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	4613      	mov	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	440b      	add	r3, r1
 80099b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80099b8:	2201      	movs	r2, #1
 80099ba:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	4a4d      	ldr	r2, [pc, #308]	@ (8009af4 <USBD_CDC_Init+0x1c4>)
 80099c0:	5cd3      	ldrb	r3, [r2, r3]
 80099c2:	f003 020f 	and.w	r2, r3, #15
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	4613      	mov	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	440b      	add	r3, r1
 80099d2:	3326      	adds	r3, #38	@ 0x26
 80099d4:	2210      	movs	r2, #16
 80099d6:	801a      	strh	r2, [r3, #0]
 80099d8:	e03a      	b.n	8009a50 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	4a43      	ldr	r2, [pc, #268]	@ (8009aec <USBD_CDC_Init+0x1bc>)
 80099de:	5cd1      	ldrb	r1, [r2, r3]
 80099e0:	2340      	movs	r3, #64	@ 0x40
 80099e2:	2202      	movs	r2, #2
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f002 fd8e 	bl	800c506 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	4a3f      	ldr	r2, [pc, #252]	@ (8009aec <USBD_CDC_Init+0x1bc>)
 80099ee:	5cd3      	ldrb	r3, [r2, r3]
 80099f0:	f003 020f 	and.w	r2, r3, #15
 80099f4:	6879      	ldr	r1, [r7, #4]
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	440b      	add	r3, r1
 8009a00:	3324      	adds	r3, #36	@ 0x24
 8009a02:	2201      	movs	r2, #1
 8009a04:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	4a39      	ldr	r2, [pc, #228]	@ (8009af0 <USBD_CDC_Init+0x1c0>)
 8009a0a:	5cd1      	ldrb	r1, [r2, r3]
 8009a0c:	2340      	movs	r3, #64	@ 0x40
 8009a0e:	2202      	movs	r2, #2
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f002 fd78 	bl	800c506 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	4a35      	ldr	r2, [pc, #212]	@ (8009af0 <USBD_CDC_Init+0x1c0>)
 8009a1a:	5cd3      	ldrb	r3, [r2, r3]
 8009a1c:	f003 020f 	and.w	r2, r3, #15
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	440b      	add	r3, r1
 8009a2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a30:	2201      	movs	r2, #1
 8009a32:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	4a2f      	ldr	r2, [pc, #188]	@ (8009af4 <USBD_CDC_Init+0x1c4>)
 8009a38:	5cd3      	ldrb	r3, [r2, r3]
 8009a3a:	f003 020f 	and.w	r2, r3, #15
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	3326      	adds	r3, #38	@ 0x26
 8009a4c:	2210      	movs	r2, #16
 8009a4e:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	4a28      	ldr	r2, [pc, #160]	@ (8009af4 <USBD_CDC_Init+0x1c4>)
 8009a54:	5cd1      	ldrb	r1, [r2, r3]
 8009a56:	2308      	movs	r3, #8
 8009a58:	2203      	movs	r2, #3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f002 fd53 	bl	800c506 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	4a24      	ldr	r2, [pc, #144]	@ (8009af4 <USBD_CDC_Init+0x1c4>)
 8009a64:	5cd3      	ldrb	r3, [r2, r3]
 8009a66:	f003 020f 	and.w	r2, r3, #15
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	3324      	adds	r3, #36	@ 0x24
 8009a78:	2201      	movs	r2, #1
 8009a7a:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	7bfa      	ldrb	r2, [r7, #15]
 8009a86:	4610      	mov	r0, r2
 8009a88:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	7c1b      	ldrb	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	4a12      	ldr	r2, [pc, #72]	@ (8009af0 <USBD_CDC_Init+0x1c0>)
 8009aa6:	5cd1      	ldrb	r1, [r2, r3]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f002 fe16 	bl	800c6e4 <USBD_LL_PrepareReceive>
 8009ab8:	e009      	b.n	8009ace <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	4a0c      	ldr	r2, [pc, #48]	@ (8009af0 <USBD_CDC_Init+0x1c0>)
 8009abe:	5cd1      	ldrb	r1, [r2, r3]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ac6:	2340      	movs	r3, #64	@ 0x40
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f002 fe0b 	bl	800c6e4 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	73fb      	strb	r3, [r7, #15]
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f43f af35 	beq.w	8009946 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	2000131c 	.word	0x2000131c
 8009aec:	20001304 	.word	0x20001304
 8009af0:	20001308 	.word	0x20001308
 8009af4:	2000130c 	.word	0x2000130c

08009af8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
 8009b08:	e057      	b.n	8009bba <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8009bcc <USBD_CDC_DeInit+0xd4>)
 8009b0e:	5cd3      	ldrb	r3, [r2, r3]
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f002 fd1d 	bl	800c552 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8009bcc <USBD_CDC_DeInit+0xd4>)
 8009b1c:	5cd3      	ldrb	r3, [r2, r3]
 8009b1e:	f003 020f 	and.w	r2, r3, #15
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	4613      	mov	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	440b      	add	r3, r1
 8009b2e:	3324      	adds	r3, #36	@ 0x24
 8009b30:	2200      	movs	r2, #0
 8009b32:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	4a26      	ldr	r2, [pc, #152]	@ (8009bd0 <USBD_CDC_DeInit+0xd8>)
 8009b38:	5cd3      	ldrb	r3, [r2, r3]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f002 fd08 	bl	800c552 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	4a22      	ldr	r2, [pc, #136]	@ (8009bd0 <USBD_CDC_DeInit+0xd8>)
 8009b46:	5cd3      	ldrb	r3, [r2, r3]
 8009b48:	f003 020f 	and.w	r2, r3, #15
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	440b      	add	r3, r1
 8009b58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	4a1c      	ldr	r2, [pc, #112]	@ (8009bd4 <USBD_CDC_DeInit+0xdc>)
 8009b64:	5cd3      	ldrb	r3, [r2, r3]
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f002 fcf2 	bl	800c552 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	4a18      	ldr	r2, [pc, #96]	@ (8009bd4 <USBD_CDC_DeInit+0xdc>)
 8009b72:	5cd3      	ldrb	r3, [r2, r3]
 8009b74:	f003 020f 	and.w	r2, r3, #15
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	3324      	adds	r3, #36	@ 0x24
 8009b86:	2200      	movs	r2, #0
 8009b88:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	4a11      	ldr	r2, [pc, #68]	@ (8009bd4 <USBD_CDC_DeInit+0xdc>)
 8009b8e:	5cd3      	ldrb	r3, [r2, r3]
 8009b90:	f003 020f 	and.w	r2, r3, #15
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	440b      	add	r3, r1
 8009ba0:	3326      	adds	r3, #38	@ 0x26
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	7bfa      	ldrb	r2, [r7, #15]
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	73fb      	strb	r3, [r7, #15]
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0a4      	beq.n	8009b0a <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20001304 	.word	0x20001304
 8009bd0:	20001308 	.word	0x20001308
 8009bd4:	2000130c 	.word	0x2000130c

08009bd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	757b      	strb	r3, [r7, #21]
 8009bfa:	e015      	b.n	8009c28 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	889b      	ldrh	r3, [r3, #4]
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	7d7b      	ldrb	r3, [r7, #21]
 8009c04:	496d      	ldr	r1, [pc, #436]	@ (8009dbc <USBD_CDC_Setup+0x1e4>)
 8009c06:	5ccb      	ldrb	r3, [r1, r3]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d007      	beq.n	8009c1c <USBD_CDC_Setup+0x44>
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	889b      	ldrh	r3, [r3, #4]
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	7d7b      	ldrb	r3, [r7, #21]
 8009c14:	496a      	ldr	r1, [pc, #424]	@ (8009dc0 <USBD_CDC_Setup+0x1e8>)
 8009c16:	5ccb      	ldrb	r3, [r1, r3]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d102      	bne.n	8009c22 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8009c1c:	7d7b      	ldrb	r3, [r7, #21]
 8009c1e:	75bb      	strb	r3, [r7, #22]
      break;
 8009c20:	e005      	b.n	8009c2e <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009c22:	7d7b      	ldrb	r3, [r7, #21]
 8009c24:	3301      	adds	r3, #1
 8009c26:	757b      	strb	r3, [r7, #21]
 8009c28:	7d7b      	ldrb	r3, [r7, #21]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0e6      	beq.n	8009bfc <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8009c2e:	7dbb      	ldrb	r3, [r7, #22]
 8009c30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c34:	fb02 f303 	mul.w	r3, r2, r3
 8009c38:	4a62      	ldr	r2, [pc, #392]	@ (8009dc4 <USBD_CDC_Setup+0x1ec>)
 8009c3a:	4413      	add	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d04a      	beq.n	8009ce0 <USBD_CDC_Setup+0x108>
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	f040 80aa 	bne.w	8009da4 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	88db      	ldrh	r3, [r3, #6]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d038      	beq.n	8009cca <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	b25b      	sxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da1d      	bge.n	8009c9e <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c68:	689c      	ldr	r4, [r3, #8]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	7859      	ldrb	r1, [r3, #1]
 8009c6e:	7dbb      	ldrb	r3, [r7, #22]
 8009c70:	025b      	lsls	r3, r3, #9
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	441a      	add	r2, r3
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	88db      	ldrh	r3, [r3, #6]
 8009c7a:	7db8      	ldrb	r0, [r7, #22]
 8009c7c:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	88db      	ldrh	r3, [r3, #6]
 8009c82:	2b07      	cmp	r3, #7
 8009c84:	bf28      	it	cs
 8009c86:	2307      	movcs	r3, #7
 8009c88:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8009c8a:	7dbb      	ldrb	r3, [r7, #22]
 8009c8c:	025b      	lsls	r3, r3, #9
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4413      	add	r3, r2
 8009c92:	89fa      	ldrh	r2, [r7, #14]
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f002 fa23 	bl	800c0e2 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8009c9c:	e089      	b.n	8009db2 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	785a      	ldrb	r2, [r3, #1]
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	88db      	ldrh	r3, [r3, #6]
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009cb4:	7dbb      	ldrb	r3, [r7, #22]
 8009cb6:	025b      	lsls	r3, r3, #9
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	18d1      	adds	r1, r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	88db      	ldrh	r3, [r3, #6]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f002 fa39 	bl	800c13a <USBD_CtlPrepareRx>
    break;
 8009cc8:	e073      	b.n	8009db2 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cd0:	689c      	ldr	r4, [r3, #8]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	7859      	ldrb	r1, [r3, #1]
 8009cd6:	7db8      	ldrb	r0, [r7, #22]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	47a0      	blx	r4
    break;
 8009cde:	e068      	b.n	8009db2 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	2b0b      	cmp	r3, #11
 8009ce6:	d852      	bhi.n	8009d8e <USBD_CDC_Setup+0x1b6>
 8009ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf0 <USBD_CDC_Setup+0x118>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d21 	.word	0x08009d21
 8009cf4:	08009d9d 	.word	0x08009d9d
 8009cf8:	08009d8f 	.word	0x08009d8f
 8009cfc:	08009d8f 	.word	0x08009d8f
 8009d00:	08009d8f 	.word	0x08009d8f
 8009d04:	08009d8f 	.word	0x08009d8f
 8009d08:	08009d8f 	.word	0x08009d8f
 8009d0c:	08009d8f 	.word	0x08009d8f
 8009d10:	08009d8f 	.word	0x08009d8f
 8009d14:	08009d8f 	.word	0x08009d8f
 8009d18:	08009d4b 	.word	0x08009d4b
 8009d1c:	08009d75 	.word	0x08009d75
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d107      	bne.n	8009d3c <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d2c:	f107 030a 	add.w	r3, r7, #10
 8009d30:	2202      	movs	r2, #2
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f002 f9d4 	bl	800c0e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009d3a:	e032      	b.n	8009da2 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f002 f95e 	bl	800c000 <USBD_CtlError>
        ret = USBD_FAIL;
 8009d44:	2303      	movs	r3, #3
 8009d46:	75fb      	strb	r3, [r7, #23]
      break;
 8009d48:	e02b      	b.n	8009da2 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d107      	bne.n	8009d66 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d56:	f107 030d 	add.w	r3, r7, #13
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f002 f9bf 	bl	800c0e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009d64:	e01d      	b.n	8009da2 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f002 f949 	bl	800c000 <USBD_CtlError>
        ret = USBD_FAIL;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	75fb      	strb	r3, [r7, #23]
      break;
 8009d72:	e016      	b.n	8009da2 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d00f      	beq.n	8009da0 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f002 f93c 	bl	800c000 <USBD_CtlError>
        ret = USBD_FAIL;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009d8c:	e008      	b.n	8009da0 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f002 f935 	bl	800c000 <USBD_CtlError>
      ret = USBD_FAIL;
 8009d96:	2303      	movs	r3, #3
 8009d98:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9a:	e002      	b.n	8009da2 <USBD_CDC_Setup+0x1ca>
      break;
 8009d9c:	bf00      	nop
 8009d9e:	e008      	b.n	8009db2 <USBD_CDC_Setup+0x1da>
      break;
 8009da0:	bf00      	nop
    }
    break;
 8009da2:	e006      	b.n	8009db2 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f002 f92a 	bl	800c000 <USBD_CtlError>
    ret = USBD_FAIL;
 8009dac:	2303      	movs	r3, #3
 8009dae:	75fb      	strb	r3, [r7, #23]
    break;
 8009db0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	371c      	adds	r7, #28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd90      	pop	{r4, r7, pc}
 8009dbc:	20001310 	.word	0x20001310
 8009dc0:	20001314 	.word	0x20001314
 8009dc4:	2000131c 	.word	0x2000131c

08009dc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dc8:	b590      	push	{r4, r7, lr}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009dde:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8009de0:	2300      	movs	r3, #0
 8009de2:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009de4:	2300      	movs	r3, #0
 8009de6:	75bb      	strb	r3, [r7, #22]
 8009de8:	e00d      	b.n	8009e06 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	7dbb      	ldrb	r3, [r7, #22]
 8009dee:	4934      	ldr	r1, [pc, #208]	@ (8009ec0 <USBD_CDC_DataIn+0xf8>)
 8009df0:	5ccb      	ldrb	r3, [r1, r3]
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d102      	bne.n	8009e00 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8009dfa:	7dbb      	ldrb	r3, [r7, #22]
 8009dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8009dfe:	e005      	b.n	8009e0c <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009e00:	7dbb      	ldrb	r3, [r7, #22]
 8009e02:	3301      	adds	r3, #1
 8009e04:	75bb      	strb	r3, [r7, #22]
 8009e06:	7dbb      	ldrb	r3, [r7, #22]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0ee      	beq.n	8009dea <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009e12:	fb02 f303 	mul.w	r3, r2, r3
 8009e16:	4a2b      	ldr	r2, [pc, #172]	@ (8009ec4 <USBD_CDC_DataIn+0xfc>)
 8009e18:	4413      	add	r3, r2
 8009e1a:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009e1c:	78fa      	ldrb	r2, [r7, #3]
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	440b      	add	r3, r1
 8009e2a:	3318      	adds	r3, #24
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d029      	beq.n	8009e86 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009e32:	78fa      	ldrb	r2, [r7, #3]
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	440b      	add	r3, r1
 8009e40:	3318      	adds	r3, #24
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	78f9      	ldrb	r1, [r7, #3]
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	00db      	lsls	r3, r3, #3
 8009e4c:	440b      	add	r3, r1
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4403      	add	r3, r0
 8009e52:	331c      	adds	r3, #28
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d110      	bne.n	8009e86 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009e64:	78fa      	ldrb	r2, [r7, #3]
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	3318      	adds	r3, #24
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e78:	78f9      	ldrb	r1, [r7, #3]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f002 fc0f 	bl	800c6a2 <USBD_LL_Transmit>
 8009e84:	e016      	b.n	8009eb4 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00c      	beq.n	8009eb4 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ea0:	691c      	ldr	r4, [r3, #16]
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	7df8      	ldrb	r0, [r7, #23]
 8009eb2:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	371c      	adds	r7, #28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd90      	pop	{r4, r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20001304 	.word	0x20001304
 8009ec4:	2000131c 	.word	0x2000131c

08009ec8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009edc:	2300      	movs	r3, #0
 8009ede:	73bb      	strb	r3, [r7, #14]
 8009ee0:	e00b      	b.n	8009efa <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	4a17      	ldr	r2, [pc, #92]	@ (8009f44 <USBD_CDC_DataOut+0x7c>)
 8009ee6:	5cd3      	ldrb	r3, [r2, r3]
 8009ee8:	78fa      	ldrb	r2, [r7, #3]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d102      	bne.n	8009ef4 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef2:	e005      	b.n	8009f00 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	73bb      	strb	r3, [r7, #14]
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d0f0      	beq.n	8009ee2 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009f06:	fb02 f303 	mul.w	r3, r2, r3
 8009f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8009f48 <USBD_CDC_DataOut+0x80>)
 8009f0c:	4413      	add	r3, r2
 8009f0e:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f10:	78fb      	ldrb	r3, [r7, #3]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f002 fc06 	bl	800c726 <USBD_LL_GetRxDataSize>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009f36:	7bf8      	ldrb	r0, [r7, #15]
 8009f38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	20001308 	.word	0x20001308
 8009f48:	2000131c 	.word	0x2000131c

08009f4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f4c:	b590      	push	{r4, r7, lr}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73fb      	strb	r3, [r7, #15]
 8009f5c:	e02d      	b.n	8009fba <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009f64:	fb02 f303 	mul.w	r3, r2, r3
 8009f68:	4a18      	ldr	r2, [pc, #96]	@ (8009fcc <USBD_CDC_EP0_RxReady+0x80>)
 8009f6a:	4413      	add	r3, r2
 8009f6c:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d101      	bne.n	8009f78 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e024      	b.n	8009fc2 <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d018      	beq.n	8009fb4 <USBD_CDC_EP0_RxReady+0x68>
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009f88:	2bff      	cmp	r3, #255	@ 0xff
 8009f8a:	d013      	beq.n	8009fb4 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f92:	689c      	ldr	r4, [r3, #8]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	025b      	lsls	r3, r3, #9
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	441a      	add	r2, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009fa8:	7bf8      	ldrb	r0, [r7, #15]
 8009faa:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	22ff      	movs	r2, #255	@ 0xff
 8009fb0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	73fb      	strb	r3, [r7, #15]
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d0ce      	beq.n	8009f5e <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd90      	pop	{r4, r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	2000131c 	.word	0x2000131c

08009fd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	224b      	movs	r2, #75	@ 0x4b
 8009fdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009fde:	4b03      	ldr	r3, [pc, #12]	@ (8009fec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20000160 	.word	0x20000160

08009ff0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	224b      	movs	r2, #75	@ 0x4b
 8009ffc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009ffe:	4b03      	ldr	r3, [pc, #12]	@ (800a00c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20000114 	.word	0x20000114

0800a010 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	224b      	movs	r2, #75	@ 0x4b
 800a01c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a01e:	4b03      	ldr	r3, [pc, #12]	@ (800a02c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	20000160 	.word	0x20000160

0800a030 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	220a      	movs	r2, #10
 800a03c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a03e:	4b03      	ldr	r3, [pc, #12]	@ (800a04c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	200000cc 	.word	0x200000cc

0800a050 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a060:	2303      	movs	r3, #3
 800a062:	e004      	b.n	800a06e <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
	...

0800a07c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a08c:	2300      	movs	r3, #0
 800a08e:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a096:	fb02 f303 	mul.w	r3, r2, r3
 800a09a:	4a09      	ldr	r2, [pc, #36]	@ (800a0c0 <USBD_CDC_SetTxBuffer+0x44>)
 800a09c:	4413      	add	r3, r2
 800a09e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	371c      	adds	r7, #28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	2000131c 	.word	0x2000131c

0800a0c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a0dc:	fb02 f303 	mul.w	r3, r2, r3
 800a0e0:	4a06      	ldr	r2, [pc, #24]	@ (800a0fc <USBD_CDC_SetRxBuffer+0x38>)
 800a0e2:	4413      	add	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	371c      	adds	r7, #28
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	2000131c 	.word	0x2000131c

0800a100 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	6039      	str	r1, [r7, #0]
 800a10a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a10c:	2300      	movs	r3, #0
 800a10e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a110:	2301      	movs	r3, #1
 800a112:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a11a:	fb02 f303 	mul.w	r3, r2, r3
 800a11e:	4a17      	ldr	r2, [pc, #92]	@ (800a17c <USBD_CDC_TransmitPacket+0x7c>)
 800a120:	4413      	add	r3, r2
 800a122:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d121      	bne.n	800a172 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2201      	movs	r2, #1
 800a132:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	4a11      	ldr	r2, [pc, #68]	@ (800a180 <USBD_CDC_TransmitPacket+0x80>)
 800a13a:	5cd3      	ldrb	r3, [r2, r3]
 800a13c:	f003 020f 	and.w	r2, r3, #15
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a146:	6838      	ldr	r0, [r7, #0]
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4403      	add	r3, r0
 800a152:	3318      	adds	r3, #24
 800a154:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800a156:	79fb      	ldrb	r3, [r7, #7]
 800a158:	4a09      	ldr	r2, [pc, #36]	@ (800a180 <USBD_CDC_TransmitPacket+0x80>)
 800a15a:	5cd1      	ldrb	r1, [r2, r3]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a168:	6838      	ldr	r0, [r7, #0]
 800a16a:	f002 fa9a 	bl	800c6a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	2000131c 	.word	0x2000131c
 800a180:	20001304 	.word	0x20001304

0800a184 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	6039      	str	r1, [r7, #0]
 800a18e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a19a:	fb02 f303 	mul.w	r3, r2, r3
 800a19e:	4a11      	ldr	r2, [pc, #68]	@ (800a1e4 <USBD_CDC_ReceivePacket+0x60>)
 800a1a0:	4413      	add	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	7c1b      	ldrb	r3, [r3, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10b      	bne.n	800a1c4 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	4a0e      	ldr	r2, [pc, #56]	@ (800a1e8 <USBD_CDC_ReceivePacket+0x64>)
 800a1b0:	5cd1      	ldrb	r1, [r2, r3]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1bc:	6838      	ldr	r0, [r7, #0]
 800a1be:	f002 fa91 	bl	800c6e4 <USBD_LL_PrepareReceive>
 800a1c2:	e009      	b.n	800a1d8 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	4a08      	ldr	r2, [pc, #32]	@ (800a1e8 <USBD_CDC_ReceivePacket+0x64>)
 800a1c8:	5cd1      	ldrb	r1, [r2, r3]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1d0:	2340      	movs	r3, #64	@ 0x40
 800a1d2:	6838      	ldr	r0, [r7, #0]
 800a1d4:	f002 fa86 	bl	800c6e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	2000131c 	.word	0x2000131c
 800a1e8:	20001308 	.word	0x20001308

0800a1ec <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	70fb      	strb	r3, [r7, #3]
 800a1fe:	460b      	mov	r3, r1
 800a200:	70bb      	strb	r3, [r7, #2]
 800a202:	4613      	mov	r3, r2
 800a204:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3309      	adds	r3, #9
 800a20a:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
 800a210:	e05b      	b.n	800a2ca <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3302      	adds	r3, #2
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3310      	adds	r3, #16
 800a21e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a222:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	330a      	adds	r3, #10
 800a228:	78fa      	ldrb	r2, [r7, #3]
 800a22a:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	331a      	adds	r3, #26
 800a230:	78ba      	ldrb	r2, [r7, #2]
 800a232:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3322      	adds	r3, #34	@ 0x22
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3323      	adds	r3, #35	@ 0x23
 800a240:	78ba      	ldrb	r2, [r7, #2]
 800a242:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3326      	adds	r3, #38	@ 0x26
 800a248:	7e3a      	ldrb	r2, [r7, #24]
 800a24a:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	332d      	adds	r3, #45	@ 0x2d
 800a250:	78ba      	ldrb	r2, [r7, #2]
 800a252:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3336      	adds	r3, #54	@ 0x36
 800a258:	7f3a      	ldrb	r2, [r7, #28]
 800a25a:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	333d      	adds	r3, #61	@ 0x3d
 800a260:	787a      	ldrb	r2, [r7, #1]
 800a262:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3342      	adds	r3, #66	@ 0x42
 800a268:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	491c      	ldr	r1, [pc, #112]	@ (800a2e0 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800a26e:	787a      	ldrb	r2, [r7, #1]
 800a270:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
 800a274:	491b      	ldr	r1, [pc, #108]	@ (800a2e4 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800a276:	7f3a      	ldrb	r2, [r7, #28]
 800a278:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
 800a27c:	491a      	ldr	r1, [pc, #104]	@ (800a2e8 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800a27e:	7e3a      	ldrb	r2, [r7, #24]
 800a280:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	4919      	ldr	r1, [pc, #100]	@ (800a2ec <USBD_Update_CDC_ACM_DESC+0x100>)
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	4918      	ldr	r1, [pc, #96]	@ (800a2f0 <USBD_Update_CDC_ACM_DESC+0x104>)
 800a28e:	78ba      	ldrb	r2, [r7, #2]
 800a290:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	4917      	ldr	r1, [pc, #92]	@ (800a2f4 <USBD_Update_CDC_ACM_DESC+0x108>)
 800a296:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a29a:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800a29c:	787b      	ldrb	r3, [r7, #1]
 800a29e:	3302      	adds	r3, #2
 800a2a0:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800a2a2:	787b      	ldrb	r3, [r7, #1]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800a2a8:	7f3b      	ldrb	r3, [r7, #28]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800a2ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800a2b8:	78fb      	ldrb	r3, [r7, #3]
 800a2ba:	3302      	adds	r3, #2
 800a2bc:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	73fb      	strb	r3, [r7, #15]
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0a0      	beq.n	800a212 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	20001304 	.word	0x20001304
 800a2e4:	20001308 	.word	0x20001308
 800a2e8:	2000130c 	.word	0x2000130c
 800a2ec:	20001310 	.word	0x20001310
 800a2f0:	20001314 	.word	0x20001314
 800a2f4:	20001318 	.word	0x20001318

0800a2f8 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800a304:	4b08      	ldr	r3, [pc, #32]	@ (800a328 <USBD_COMPOSITE_Init+0x30>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	78fa      	ldrb	r2, [r7, #3]
 800a30a:	4611      	mov	r1, r2
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <USBD_COMPOSITE_Init+0x34>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	4611      	mov	r1, r2
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	200000d8 	.word	0x200000d8
 800a32c:	200001f8 	.word	0x200001f8

0800a330 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800a33c:	4b08      	ldr	r3, [pc, #32]	@ (800a360 <USBD_COMPOSITE_DeInit+0x30>)
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	78fa      	ldrb	r2, [r7, #3]
 800a342:	4611      	mov	r1, r2
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800a348:	4b06      	ldr	r3, [pc, #24]	@ (800a364 <USBD_COMPOSITE_DeInit+0x34>)
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	78fa      	ldrb	r2, [r7, #3]
 800a34e:	4611      	mov	r1, r2
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	200000d8 	.word	0x200000d8
 800a364:	200001f8 	.word	0x200001f8

0800a368 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]
 800a376:	e019      	b.n	800a3ac <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	889b      	ldrh	r3, [r3, #4]
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	4915      	ldr	r1, [pc, #84]	@ (800a3d8 <USBD_COMPOSITE_Setup+0x70>)
 800a382:	5ccb      	ldrb	r3, [r1, r3]
 800a384:	429a      	cmp	r2, r3
 800a386:	d007      	beq.n	800a398 <USBD_COMPOSITE_Setup+0x30>
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	889b      	ldrh	r3, [r3, #4]
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	4912      	ldr	r1, [pc, #72]	@ (800a3dc <USBD_COMPOSITE_Setup+0x74>)
 800a392:	5ccb      	ldrb	r3, [r1, r3]
 800a394:	429a      	cmp	r2, r3
 800a396:	d106      	bne.n	800a3a6 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800a398:	4b11      	ldr	r3, [pc, #68]	@ (800a3e0 <USBD_COMPOSITE_Setup+0x78>)
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	4798      	blx	r3
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	e014      	b.n	800a3d0 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	73fb      	strb	r3, [r7, #15]
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0e2      	beq.n	800a378 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	889b      	ldrh	r3, [r3, #4]
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e4 <USBD_COMPOSITE_Setup+0x7c>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d106      	bne.n	800a3ce <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800a3c0:	4b09      	ldr	r3, [pc, #36]	@ (800a3e8 <USBD_COMPOSITE_Setup+0x80>)
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	4798      	blx	r3
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	e000      	b.n	800a3d0 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800a3ce:	2303      	movs	r3, #3
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20001310 	.word	0x20001310
 800a3dc:	20001314 	.word	0x20001314
 800a3e0:	200000d8 	.word	0x200000d8
 800a3e4:	20001650 	.word	0x20001650
 800a3e8:	200001f8 	.word	0x200001f8

0800a3ec <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	73fb      	strb	r3, [r7, #15]
 800a3fc:	e01a      	b.n	800a434 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800a3fe:	78fa      	ldrb	r2, [r7, #3]
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	4918      	ldr	r1, [pc, #96]	@ (800a464 <USBD_COMPOSITE_DataIn+0x78>)
 800a404:	5ccb      	ldrb	r3, [r1, r3]
 800a406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d007      	beq.n	800a41e <USBD_COMPOSITE_DataIn+0x32>
 800a40e:	78fa      	ldrb	r2, [r7, #3]
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	4915      	ldr	r1, [pc, #84]	@ (800a468 <USBD_COMPOSITE_DataIn+0x7c>)
 800a414:	5ccb      	ldrb	r3, [r1, r3]
 800a416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d107      	bne.n	800a42e <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800a41e:	4b13      	ldr	r3, [pc, #76]	@ (800a46c <USBD_COMPOSITE_DataIn+0x80>)
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	4611      	mov	r1, r2
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
 800a42a:	4603      	mov	r3, r0
 800a42c:	e015      	b.n	800a45a <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	3301      	adds	r3, #1
 800a432:	73fb      	strb	r3, [r7, #15]
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0e1      	beq.n	800a3fe <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800a43a:	78fa      	ldrb	r2, [r7, #3]
 800a43c:	4b0c      	ldr	r3, [pc, #48]	@ (800a470 <USBD_COMPOSITE_DataIn+0x84>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a444:	429a      	cmp	r2, r3
 800a446:	d107      	bne.n	800a458 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800a448:	4b0a      	ldr	r3, [pc, #40]	@ (800a474 <USBD_COMPOSITE_DataIn+0x88>)
 800a44a:	695b      	ldr	r3, [r3, #20]
 800a44c:	78fa      	ldrb	r2, [r7, #3]
 800a44e:	4611      	mov	r1, r2
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	4798      	blx	r3
 800a454:	4603      	mov	r3, r0
 800a456:	e000      	b.n	800a45a <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a458:	2303      	movs	r3, #3
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20001304 	.word	0x20001304
 800a468:	2000130c 	.word	0x2000130c
 800a46c:	200000d8 	.word	0x200000d8
 800a470:	200001f6 	.word	0x200001f6
 800a474:	200001f8 	.word	0x200001f8

0800a478 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800a480:	4b06      	ldr	r3, [pc, #24]	@ (800a49c <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800a488:	4b05      	ldr	r3, [pc, #20]	@ (800a4a0 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	200000d8 	.word	0x200000d8
 800a4a0:	200001f8 	.word	0x200001f8

0800a4a4 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]
 800a514:	e010      	b.n	800a538 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	4a12      	ldr	r2, [pc, #72]	@ (800a564 <USBD_COMPOSITE_DataOut+0x60>)
 800a51a:	5cd3      	ldrb	r3, [r2, r3]
 800a51c:	78fa      	ldrb	r2, [r7, #3]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d107      	bne.n	800a532 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800a522:	4b11      	ldr	r3, [pc, #68]	@ (800a568 <USBD_COMPOSITE_DataOut+0x64>)
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	78fa      	ldrb	r2, [r7, #3]
 800a528:	4611      	mov	r1, r2
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	4798      	blx	r3
 800a52e:	4603      	mov	r3, r0
 800a530:	e013      	b.n	800a55a <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	3301      	adds	r3, #1
 800a536:	73fb      	strb	r3, [r7, #15]
 800a538:	7bfb      	ldrb	r3, [r7, #15]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0eb      	beq.n	800a516 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800a53e:	4b0b      	ldr	r3, [pc, #44]	@ (800a56c <USBD_COMPOSITE_DataOut+0x68>)
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	78fa      	ldrb	r2, [r7, #3]
 800a544:	429a      	cmp	r2, r3
 800a546:	d107      	bne.n	800a558 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800a548:	4b09      	ldr	r3, [pc, #36]	@ (800a570 <USBD_COMPOSITE_DataOut+0x6c>)
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	78fa      	ldrb	r2, [r7, #3]
 800a54e:	4611      	mov	r1, r2
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	4798      	blx	r3
 800a554:	4603      	mov	r3, r0
 800a556:	e000      	b.n	800a55a <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a558:	2303      	movs	r3, #3
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20001308 	.word	0x20001308
 800a568:	200000d8 	.word	0x200000d8
 800a56c:	200001f7 	.word	0x200001f7
 800a570:	200001f8 	.word	0x200001f8

0800a574 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	226b      	movs	r2, #107	@ 0x6b
 800a580:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a582:	4b03      	ldr	r3, [pc, #12]	@ (800a590 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	200015a4 	.word	0x200015a4

0800a594 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	226b      	movs	r2, #107	@ 0x6b
 800a5a0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800a5a2:	4b03      	ldr	r3, [pc, #12]	@ (800a5b0 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	20001538 	.word	0x20001538

0800a5b4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	226b      	movs	r2, #107	@ 0x6b
 800a5c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a5c2:	4b03      	ldr	r3, [pc, #12]	@ (800a5d0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	200015a4 	.word	0x200015a4

0800a5d4 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	220a      	movs	r2, #10
 800a5e0:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800a5e2:	4b03      	ldr	r3, [pc, #12]	@ (800a5f0 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	200001ec 	.word	0x200001ec

0800a5f4 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08a      	sub	sp, #40	@ 0x28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800a602:	4b20      	ldr	r3, [pc, #128]	@ (800a684 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	7afa      	ldrb	r2, [r7, #11]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d836      	bhi.n	800a67a <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	f107 0318 	add.w	r3, r7, #24
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	605a      	str	r2, [r3, #4]
 800a61a:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a61c:	2300      	movs	r3, #0
 800a61e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a622:	e01a      	b.n	800a65a <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800a624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a628:	4a17      	ldr	r2, [pc, #92]	@ (800a688 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800a62a:	5cd3      	ldrb	r3, [r2, r3]
 800a62c:	7afa      	ldrb	r2, [r7, #11]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d10e      	bne.n	800a650 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800a632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a636:	f107 0014 	add.w	r0, r7, #20
 800a63a:	4a14      	ldr	r2, [pc, #80]	@ (800a68c <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800a63c:	2110      	movs	r1, #16
 800a63e:	f004 feb9 	bl	800f3b4 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4911      	ldr	r1, [pc, #68]	@ (800a690 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a64a:	4618      	mov	r0, r3
 800a64c:	f001 fce9 	bl	800c022 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a654:	3301      	adds	r3, #1
 800a656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a65a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0e0      	beq.n	800a624 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800a662:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	7afa      	ldrb	r2, [r7, #11]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d104      	bne.n	800a676 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	4908      	ldr	r1, [pc, #32]	@ (800a690 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a670:	4809      	ldr	r0, [pc, #36]	@ (800a698 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800a672:	f001 fcd6 	bl	800c022 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800a676:	4b06      	ldr	r3, [pc, #24]	@ (800a690 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a678:	e000      	b.n	800a67c <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800a67a:	2300      	movs	r3, #0
  }
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3728      	adds	r7, #40	@ 0x28
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	200001e8 	.word	0x200001e8
 800a688:	20001318 	.word	0x20001318
 800a68c:	08010588 	.word	0x08010588
 800a690:	20001610 	.word	0x20001610
 800a694:	20001651 	.word	0x20001651
 800a698:	08010598 	.word	0x08010598

0800a69c <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800a69c:	b590      	push	{r4, r7, lr}
 800a69e:	b089      	sub	sp, #36	@ 0x24
 800a6a0:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800a6aa:	2381      	movs	r3, #129	@ 0x81
 800a6ac:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800a6b6:	4b74      	ldr	r3, [pc, #464]	@ (800a888 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ba:	1d3a      	adds	r2, r7, #4
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4798      	blx	r3
 800a6c0:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a6c2:	4b72      	ldr	r3, [pc, #456]	@ (800a88c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	7ab8      	ldrb	r0, [r7, #10]
 800a6c8:	7afa      	ldrb	r2, [r7, #11]
 800a6ca:	7a79      	ldrb	r1, [r7, #9]
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fbc5 	bl	800ae60 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	3309      	adds	r3, #9
 800a6da:	88ba      	ldrh	r2, [r7, #4]
 800a6dc:	3a09      	subs	r2, #9
 800a6de:	4619      	mov	r1, r3
 800a6e0:	486b      	ldr	r0, [pc, #428]	@ (800a890 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800a6e2:	f005 f854 	bl	800f78e <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800a6e6:	4b68      	ldr	r3, [pc, #416]	@ (800a888 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ea:	1d3a      	adds	r2, r7, #4
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	4798      	blx	r3
 800a6f0:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a6f2:	4b66      	ldr	r3, [pc, #408]	@ (800a88c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	7ab8      	ldrb	r0, [r7, #10]
 800a6f8:	7afa      	ldrb	r2, [r7, #11]
 800a6fa:	7a79      	ldrb	r1, [r7, #9]
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	4603      	mov	r3, r0
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 fbad 	bl	800ae60 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3309      	adds	r3, #9
 800a70a:	88ba      	ldrh	r2, [r7, #4]
 800a70c:	3a09      	subs	r2, #9
 800a70e:	4619      	mov	r1, r3
 800a710:	4860      	ldr	r0, [pc, #384]	@ (800a894 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800a712:	f005 f83c 	bl	800f78e <memcpy>

  in_ep_track += 1;
 800a716:	7afb      	ldrb	r3, [r7, #11]
 800a718:	3301      	adds	r3, #1
 800a71a:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800a71c:	7abb      	ldrb	r3, [r7, #10]
 800a71e:	3301      	adds	r3, #1
 800a720:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800a722:	7a7b      	ldrb	r3, [r7, #9]
 800a724:	3301      	adds	r3, #1
 800a726:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800a728:	4b58      	ldr	r3, [pc, #352]	@ (800a88c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	3301      	adds	r3, #1
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	4b56      	ldr	r3, [pc, #344]	@ (800a88c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a732:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800a734:	4b58      	ldr	r3, [pc, #352]	@ (800a898 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a738:	1d3a      	adds	r2, r7, #4
 800a73a:	4610      	mov	r0, r2
 800a73c:	4798      	blx	r3
 800a73e:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a740:	7a7b      	ldrb	r3, [r7, #9]
 800a742:	3301      	adds	r3, #1
 800a744:	b2d8      	uxtb	r0, r3
 800a746:	7afb      	ldrb	r3, [r7, #11]
 800a748:	3301      	adds	r3, #1
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	4a4f      	ldr	r2, [pc, #316]	@ (800a88c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a74e:	7812      	ldrb	r2, [r2, #0]
 800a750:	7afc      	ldrb	r4, [r7, #11]
 800a752:	7a79      	ldrb	r1, [r7, #9]
 800a754:	9202      	str	r2, [sp, #8]
 800a756:	7aba      	ldrb	r2, [r7, #10]
 800a758:	9201      	str	r2, [sp, #4]
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	4623      	mov	r3, r4
 800a75e:	4602      	mov	r2, r0
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7ff fd43 	bl	800a1ec <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3309      	adds	r3, #9
 800a76a:	88ba      	ldrh	r2, [r7, #4]
 800a76c:	3a09      	subs	r2, #9
 800a76e:	4619      	mov	r1, r3
 800a770:	484a      	ldr	r0, [pc, #296]	@ (800a89c <USBD_COMPOSITE_Mount_Class+0x200>)
 800a772:	f005 f80c 	bl	800f78e <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800a776:	4b48      	ldr	r3, [pc, #288]	@ (800a898 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77a:	1d3a      	adds	r2, r7, #4
 800a77c:	4610      	mov	r0, r2
 800a77e:	4798      	blx	r3
 800a780:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a782:	7a7b      	ldrb	r3, [r7, #9]
 800a784:	3301      	adds	r3, #1
 800a786:	b2d8      	uxtb	r0, r3
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	3301      	adds	r3, #1
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	4a3f      	ldr	r2, [pc, #252]	@ (800a88c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a790:	7812      	ldrb	r2, [r2, #0]
 800a792:	7afc      	ldrb	r4, [r7, #11]
 800a794:	7a79      	ldrb	r1, [r7, #9]
 800a796:	9202      	str	r2, [sp, #8]
 800a798:	7aba      	ldrb	r2, [r7, #10]
 800a79a:	9201      	str	r2, [sp, #4]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	4623      	mov	r3, r4
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f7ff fd22 	bl	800a1ec <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3309      	adds	r3, #9
 800a7ac:	88ba      	ldrh	r2, [r7, #4]
 800a7ae:	3a09      	subs	r2, #9
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	483b      	ldr	r0, [pc, #236]	@ (800a8a0 <USBD_COMPOSITE_Mount_Class+0x204>)
 800a7b4:	f004 ffeb 	bl	800f78e <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	3302      	adds	r3, #2
 800a7bc:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800a7be:	7abb      	ldrb	r3, [r7, #10]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800a7c4:	7a7b      	ldrb	r3, [r7, #9]
 800a7c6:	3302      	adds	r3, #2
 800a7c8:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800a7ca:	4b30      	ldr	r3, [pc, #192]	@ (800a88c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	4b2e      	ldr	r3, [pc, #184]	@ (800a88c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a7d4:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800a7d6:	236b      	movs	r3, #107	@ 0x6b
 800a7d8:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800a7da:	4b32      	ldr	r3, [pc, #200]	@ (800a8a4 <USBD_COMPOSITE_Mount_Class+0x208>)
 800a7dc:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2209      	movs	r2, #9
 800a7e2:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	88fa      	ldrh	r2, [r7, #6]
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a7f6:	88fb      	ldrh	r3, [r7, #6]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3303      	adds	r3, #3
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3304      	adds	r3, #4
 800a808:	7a7a      	ldrb	r2, [r7, #9]
 800a80a:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3305      	adds	r3, #5
 800a810:	2201      	movs	r2, #1
 800a812:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	3306      	adds	r3, #6
 800a818:	2200      	movs	r2, #0
 800a81a:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3307      	adds	r3, #7
 800a820:	22c0      	movs	r2, #192	@ 0xc0
 800a822:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	3308      	adds	r3, #8
 800a828:	2232      	movs	r2, #50	@ 0x32
 800a82a:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800a82c:	4b1e      	ldr	r3, [pc, #120]	@ (800a8a8 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800a82e:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2209      	movs	r2, #9
 800a834:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3301      	adds	r3, #1
 800a83a:	2202      	movs	r2, #2
 800a83c:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3302      	adds	r3, #2
 800a842:	88fa      	ldrh	r2, [r7, #6]
 800a844:	b2d2      	uxtb	r2, r2
 800a846:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a848:	88fb      	ldrh	r3, [r7, #6]
 800a84a:	0a1b      	lsrs	r3, r3, #8
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3303      	adds	r3, #3
 800a852:	b2d2      	uxtb	r2, r2
 800a854:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3304      	adds	r3, #4
 800a85a:	7a7a      	ldrb	r2, [r7, #9]
 800a85c:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3305      	adds	r3, #5
 800a862:	2201      	movs	r2, #1
 800a864:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3306      	adds	r3, #6
 800a86a:	2200      	movs	r2, #0
 800a86c:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3307      	adds	r3, #7
 800a872:	22c0      	movs	r2, #192	@ 0xc0
 800a874:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3308      	adds	r3, #8
 800a87a:	2232      	movs	r2, #50	@ 0x32
 800a87c:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800a87e:	bf00      	nop
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	bd90      	pop	{r4, r7, pc}
 800a886:	bf00      	nop
 800a888:	200001f8 	.word	0x200001f8
 800a88c:	200001e8 	.word	0x200001e8
 800a890:	20001541 	.word	0x20001541
 800a894:	200015ad 	.word	0x200015ad
 800a898:	200000d8 	.word	0x200000d8
 800a89c:	20001561 	.word	0x20001561
 800a8a0:	200015cd 	.word	0x200015cd
 800a8a4:	200015a4 	.word	0x200015a4
 800a8a8:	20001538 	.word	0x20001538

0800a8ac <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800a8b8:	4b43      	ldr	r3, [pc, #268]	@ (800a9c8 <USBD_CUSTOM_HID_Init+0x11c>)
 800a8ba:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d105      	bne.n	800a8ce <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	e077      	b.n	800a9be <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	7c1b      	ldrb	r3, [r3, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d11b      	bne.n	800a916 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a8de:	4b3b      	ldr	r3, [pc, #236]	@ (800a9cc <USBD_CUSTOM_HID_Init+0x120>)
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	f003 020f 	and.w	r2, r3, #15
 800a8e6:	6879      	ldr	r1, [r7, #4]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	440b      	add	r3, r1
 800a8f2:	3326      	adds	r3, #38	@ 0x26
 800a8f4:	2205      	movs	r2, #5
 800a8f6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a8f8:	4b35      	ldr	r3, [pc, #212]	@ (800a9d0 <USBD_CUSTOM_HID_Init+0x124>)
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	f003 020f 	and.w	r2, r3, #15
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	4613      	mov	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	4413      	add	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	440b      	add	r3, r1
 800a90c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a910:	2205      	movs	r2, #5
 800a912:	801a      	strh	r2, [r3, #0]
 800a914:	e01a      	b.n	800a94c <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a916:	4b2d      	ldr	r3, [pc, #180]	@ (800a9cc <USBD_CUSTOM_HID_Init+0x120>)
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	f003 020f 	and.w	r2, r3, #15
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	4613      	mov	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	440b      	add	r3, r1
 800a92a:	3326      	adds	r3, #38	@ 0x26
 800a92c:	2205      	movs	r2, #5
 800a92e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a930:	4b27      	ldr	r3, [pc, #156]	@ (800a9d0 <USBD_CUSTOM_HID_Init+0x124>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 020f 	and.w	r2, r3, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a948:	2205      	movs	r2, #5
 800a94a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800a94c:	4b1f      	ldr	r3, [pc, #124]	@ (800a9cc <USBD_CUSTOM_HID_Init+0x120>)
 800a94e:	7819      	ldrb	r1, [r3, #0]
 800a950:	2302      	movs	r3, #2
 800a952:	2203      	movs	r2, #3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f001 fdd6 	bl	800c506 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800a95a:	4b1c      	ldr	r3, [pc, #112]	@ (800a9cc <USBD_CUSTOM_HID_Init+0x120>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	f003 020f 	and.w	r2, r3, #15
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	3324      	adds	r3, #36	@ 0x24
 800a970:	2201      	movs	r2, #1
 800a972:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800a974:	4b16      	ldr	r3, [pc, #88]	@ (800a9d0 <USBD_CUSTOM_HID_Init+0x124>)
 800a976:	7819      	ldrb	r1, [r3, #0]
 800a978:	2302      	movs	r3, #2
 800a97a:	2203      	movs	r2, #3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 fdc2 	bl	800c506 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800a982:	4b13      	ldr	r3, [pc, #76]	@ (800a9d0 <USBD_CUSTOM_HID_Init+0x124>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 020f 	and.w	r2, r3, #15
 800a98a:	6879      	ldr	r1, [r7, #4]
 800a98c:	4613      	mov	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	440b      	add	r3, r1
 800a996:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a99a:	2201      	movs	r2, #1
 800a99c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800a9ae:	4b08      	ldr	r3, [pc, #32]	@ (800a9d0 <USBD_CUSTOM_HID_Init+0x124>)
 800a9b0:	7819      	ldrb	r1, [r3, #0]
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 fe94 	bl	800c6e4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20001654 	.word	0x20001654
 800a9cc:	200001f6 	.word	0x200001f6
 800a9d0:	200001f7 	.word	0x200001f7

0800a9d4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800a9e0:	4b2a      	ldr	r3, [pc, #168]	@ (800aa8c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f001 fdb3 	bl	800c552 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800a9ec:	4b27      	ldr	r3, [pc, #156]	@ (800aa8c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	f003 020f 	and.w	r2, r3, #15
 800a9f4:	6879      	ldr	r1, [r7, #4]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	440b      	add	r3, r1
 800aa00:	3324      	adds	r3, #36	@ 0x24
 800aa02:	2200      	movs	r2, #0
 800aa04:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800aa06:	4b21      	ldr	r3, [pc, #132]	@ (800aa8c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f003 020f 	and.w	r2, r3, #15
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	440b      	add	r3, r1
 800aa1a:	3326      	adds	r3, #38	@ 0x26
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800aa20:	4b1b      	ldr	r3, [pc, #108]	@ (800aa90 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fd93 	bl	800c552 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800aa2c:	4b18      	ldr	r3, [pc, #96]	@ (800aa90 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	f003 020f 	and.w	r2, r3, #15
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	440b      	add	r3, r1
 800aa40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa44:	2200      	movs	r2, #0
 800aa46:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800aa48:	4b11      	ldr	r3, [pc, #68]	@ (800aa90 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	f003 020f 	and.w	r2, r3, #15
 800aa50:	6879      	ldr	r1, [r7, #4]
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	440b      	add	r3, r1
 800aa5c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800aa60:	2200      	movs	r2, #0
 800aa62:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d008      	beq.n	800aa80 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	200001f6 	.word	0x200001f6
 800aa90:	200001f7 	.word	0x200001f7

0800aa94 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aaa4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e0ed      	b.n	800ac9c <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d052      	beq.n	800ab72 <USBD_CUSTOM_HID_Setup+0xde>
 800aacc:	2b20      	cmp	r3, #32
 800aace:	f040 80dd 	bne.w	800ac8c <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	3b02      	subs	r3, #2
 800aad8:	2b09      	cmp	r3, #9
 800aada:	d842      	bhi.n	800ab62 <USBD_CUSTOM_HID_Setup+0xce>
 800aadc:	a201      	add	r2, pc, #4	@ (adr r2, 800aae4 <USBD_CUSTOM_HID_Setup+0x50>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800ab3d 	.word	0x0800ab3d
 800aae8:	0800ab1b 	.word	0x0800ab1b
 800aaec:	0800ab63 	.word	0x0800ab63
 800aaf0:	0800ab63 	.word	0x0800ab63
 800aaf4:	0800ab63 	.word	0x0800ab63
 800aaf8:	0800ab63 	.word	0x0800ab63
 800aafc:	0800ab63 	.word	0x0800ab63
 800ab00:	0800ab4d 	.word	0x0800ab4d
 800ab04:	0800ab2b 	.word	0x0800ab2b
 800ab08:	0800ab0d 	.word	0x0800ab0d
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	885b      	ldrh	r3, [r3, #2]
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	461a      	mov	r2, r3
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	605a      	str	r2, [r3, #4]
      break;
 800ab18:	e02a      	b.n	800ab70 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	2201      	movs	r2, #1
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 fadd 	bl	800c0e2 <USBD_CtlSendData>
      break;
 800ab28:	e022      	b.n	800ab70 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	885b      	ldrh	r3, [r3, #2]
 800ab2e:	0a1b      	lsrs	r3, r3, #8
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	609a      	str	r2, [r3, #8]
      break;
 800ab3a:	e019      	b.n	800ab70 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	3308      	adds	r3, #8
 800ab40:	2201      	movs	r2, #1
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f001 facc 	bl	800c0e2 <USBD_CtlSendData>
      break;
 800ab4a:	e011      	b.n	800ab70 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800ab52:	6939      	ldr	r1, [r7, #16]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	88db      	ldrh	r3, [r3, #6]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 faed 	bl	800c13a <USBD_CtlPrepareRx>
      break;
 800ab60:	e006      	b.n	800ab70 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 fa4b 	bl	800c000 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab6e:	bf00      	nop
    }
    break;
 800ab70:	e093      	b.n	800ac9a <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	785b      	ldrb	r3, [r3, #1]
 800ab76:	2b0b      	cmp	r3, #11
 800ab78:	d87f      	bhi.n	800ac7a <USBD_CUSTOM_HID_Setup+0x1e6>
 800ab7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab80 <USBD_CUSTOM_HID_Setup+0xec>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800abb1 	.word	0x0800abb1
 800ab84:	0800ac89 	.word	0x0800ac89
 800ab88:	0800ac7b 	.word	0x0800ac7b
 800ab8c:	0800ac7b 	.word	0x0800ac7b
 800ab90:	0800ac7b 	.word	0x0800ac7b
 800ab94:	0800ac7b 	.word	0x0800ac7b
 800ab98:	0800abdb 	.word	0x0800abdb
 800ab9c:	0800ac7b 	.word	0x0800ac7b
 800aba0:	0800ac7b 	.word	0x0800ac7b
 800aba4:	0800ac7b 	.word	0x0800ac7b
 800aba8:	0800ac29 	.word	0x0800ac29
 800abac:	0800ac53 	.word	0x0800ac53
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d107      	bne.n	800abcc <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800abbc:	f107 030e 	add.w	r3, r7, #14
 800abc0:	2202      	movs	r2, #2
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 fa8c 	bl	800c0e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800abca:	e05e      	b.n	800ac8a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f001 fa16 	bl	800c000 <USBD_CtlError>
        ret = USBD_FAIL;
 800abd4:	2303      	movs	r3, #3
 800abd6:	75fb      	strb	r3, [r7, #23]
      break;
 800abd8:	e057      	b.n	800ac8a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	885b      	ldrh	r3, [r3, #2]
 800abde:	0a1b      	lsrs	r3, r3, #8
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	2b22      	cmp	r3, #34	@ 0x22
 800abe4:	d10b      	bne.n	800abfe <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	88db      	ldrh	r3, [r3, #6]
 800abea:	2b46      	cmp	r3, #70	@ 0x46
 800abec:	bf28      	it	cs
 800abee:	2346      	movcs	r3, #70	@ 0x46
 800abf0:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	61bb      	str	r3, [r7, #24]
 800abfc:	e00d      	b.n	800ac1a <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	0a1b      	lsrs	r3, r3, #8
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	2b21      	cmp	r3, #33	@ 0x21
 800ac08:	d107      	bne.n	800ac1a <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800ac0a:	4b26      	ldr	r3, [pc, #152]	@ (800aca4 <USBD_CUSTOM_HID_Setup+0x210>)
 800ac0c:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	88db      	ldrh	r3, [r3, #6]
 800ac12:	2b09      	cmp	r3, #9
 800ac14:	bf28      	it	cs
 800ac16:	2309      	movcs	r3, #9
 800ac18:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac1a:	8bfb      	ldrh	r3, [r7, #30]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	69b9      	ldr	r1, [r7, #24]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 fa5e 	bl	800c0e2 <USBD_CtlSendData>
      break;
 800ac26:	e030      	b.n	800ac8a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	d107      	bne.n	800ac44 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	330c      	adds	r3, #12
 800ac38:	2201      	movs	r2, #1
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f001 fa50 	bl	800c0e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ac42:	e022      	b.n	800ac8a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f001 f9da 	bl	800c000 <USBD_CtlError>
        ret = USBD_FAIL;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac50:	e01b      	b.n	800ac8a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d106      	bne.n	800ac6c <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	885b      	ldrh	r3, [r3, #2]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	461a      	mov	r2, r3
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ac6a:	e00e      	b.n	800ac8a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f001 f9c6 	bl	800c000 <USBD_CtlError>
        ret = USBD_FAIL;
 800ac74:	2303      	movs	r3, #3
 800ac76:	75fb      	strb	r3, [r7, #23]
      break;
 800ac78:	e007      	b.n	800ac8a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f001 f9bf 	bl	800c000 <USBD_CtlError>
      ret = USBD_FAIL;
 800ac82:	2303      	movs	r3, #3
 800ac84:	75fb      	strb	r3, [r7, #23]
      break;
 800ac86:	e000      	b.n	800ac8a <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800ac88:	bf00      	nop
    }
    break;
 800ac8a:	e006      	b.n	800ac9a <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f001 f9b6 	bl	800c000 <USBD_CtlError>
    ret = USBD_FAIL;
 800ac94:	2303      	movs	r3, #3
 800ac96:	75fb      	strb	r3, [r7, #23]
    break;
 800ac98:	bf00      	nop
  }
  return (uint8_t)ret;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	200002b8 	.word	0x200002b8

0800aca8 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	4613      	mov	r3, r2
 800acb4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e01b      	b.n	800acfc <USBD_CUSTOM_HID_SendReport+0x54>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800acca:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d110      	bne.n	800acfa <USBD_CUSTOM_HID_SendReport+0x52>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	7d1b      	ldrb	r3, [r3, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10a      	bne.n	800acf6 <USBD_CUSTOM_HID_SendReport+0x4e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	2201      	movs	r2, #1
 800ace4:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800ace6:	4b07      	ldr	r3, [pc, #28]	@ (800ad04 <USBD_CUSTOM_HID_SendReport+0x5c>)
 800ace8:	7819      	ldrb	r1, [r3, #0]
 800acea:	88fb      	ldrh	r3, [r7, #6]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f001 fcd7 	bl	800c6a2 <USBD_LL_Transmit>
 800acf4:	e001      	b.n	800acfa <USBD_CUSTOM_HID_SendReport+0x52>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e000      	b.n	800acfc <USBD_CUSTOM_HID_SendReport+0x54>
    }
  }
  return (uint8_t)USBD_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	200001f6 	.word	0x200001f6

0800ad08 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2229      	movs	r2, #41	@ 0x29
 800ad14:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800ad16:	4b03      	ldr	r3, [pc, #12]	@ (800ad24 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20000234 	.word	0x20000234

0800ad28 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2229      	movs	r2, #41	@ 0x29
 800ad34:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800ad36:	4b03      	ldr	r3, [pc, #12]	@ (800ad44 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	20000260 	.word	0x20000260

0800ad48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2229      	movs	r2, #41	@ 0x29
 800ad54:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800ad56:	4b03      	ldr	r3, [pc, #12]	@ (800ad64 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr
 800ad64:	2000028c 	.word	0x2000028c

0800ad68 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e00e      	b.n	800adc4 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adac:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	7810      	ldrb	r0, [r2, #0]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	7852      	ldrb	r2, [r2, #1]
 800adbe:	4611      	mov	r1, r2
 800adc0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adda:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e011      	b.n	800ae0a <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d10c      	bne.n	800ae08 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	7810      	ldrb	r0, [r2, #0]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	7852      	ldrb	r2, [r2, #1]
 800adfe:	4611      	mov	r1, r2
 800ae00:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
	...

0800ae14 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	220a      	movs	r2, #10
 800ae20:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800ae22:	4b03      	ldr	r3, [pc, #12]	@ (800ae30 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	200002c4 	.word	0x200002c4

0800ae34 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e004      	b.n	800ae52 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
	...

0800ae60 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	4608      	mov	r0, r1
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	4603      	mov	r3, r0
 800ae70:	70fb      	strb	r3, [r7, #3]
 800ae72:	460b      	mov	r3, r1
 800ae74:	70bb      	strb	r3, [r7, #2]
 800ae76:	4613      	mov	r3, r2
 800ae78:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	330b      	adds	r3, #11
 800ae7e:	78fa      	ldrb	r2, [r7, #3]
 800ae80:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3311      	adds	r3, #17
 800ae86:	7c3a      	ldrb	r2, [r7, #16]
 800ae88:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	331d      	adds	r3, #29
 800ae8e:	78ba      	ldrb	r2, [r7, #2]
 800ae90:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	3324      	adds	r3, #36	@ 0x24
 800ae96:	787a      	ldrb	r2, [r7, #1]
 800ae98:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800ae9a:	4a09      	ldr	r2, [pc, #36]	@ (800aec0 <USBD_Update_HID_Custom_DESC+0x60>)
 800ae9c:	78bb      	ldrb	r3, [r7, #2]
 800ae9e:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800aea0:	4a08      	ldr	r2, [pc, #32]	@ (800aec4 <USBD_Update_HID_Custom_DESC+0x64>)
 800aea2:	787b      	ldrb	r3, [r7, #1]
 800aea4:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800aea6:	4a08      	ldr	r2, [pc, #32]	@ (800aec8 <USBD_Update_HID_Custom_DESC+0x68>)
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800aeac:	4a07      	ldr	r2, [pc, #28]	@ (800aecc <USBD_Update_HID_Custom_DESC+0x6c>)
 800aeae:	7c3b      	ldrb	r3, [r7, #16]
 800aeb0:	7013      	strb	r3, [r2, #0]
}
 800aeb2:	bf00      	nop
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	200001f6 	.word	0x200001f6
 800aec4:	200001f7 	.word	0x200001f7
 800aec8:	20001650 	.word	0x20001650
 800aecc:	20001651 	.word	0x20001651

0800aed0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	4613      	mov	r3, r2
 800aedc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e01b      	b.n	800af20 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d003      	beq.n	800af06 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	79fa      	ldrb	r2, [r7, #7]
 800af12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f001 fa7d 	bl	800c414 <USBD_LL_Init>
 800af1a:	4603      	mov	r3, r0
 800af1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af32:	2300      	movs	r3, #0
 800af34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d101      	bne.n	800af40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e02d      	b.n	800af9c <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7c1b      	ldrb	r3, [r3, #16]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d112      	bne.n	800af76 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d01e      	beq.n	800af9a <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af64:	f107 020e 	add.w	r2, r7, #14
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
 800af6c:	4602      	mov	r2, r0
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800af74:	e011      	b.n	800af9a <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00b      	beq.n	800af9a <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8a:	f107 020e 	add.w	r2, r7, #14
 800af8e:	4610      	mov	r0, r2
 800af90:	4798      	blx	r3
 800af92:	4602      	mov	r2, r0
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fa8f 	bl	800c4d0 <USBD_LL_Start>
 800afb2:	4603      	mov	r3, r0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800afde:	2303      	movs	r3, #3
 800afe0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d009      	beq.n	800b000 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	78fa      	ldrb	r2, [r7, #3]
 800aff6:	4611      	mov	r1, r2
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	4798      	blx	r3
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d007      	beq.n	800b030 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	78fa      	ldrb	r2, [r7, #3]
 800b02a:	4611      	mov	r1, r2
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	4798      	blx	r3
  }

  return USBD_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f000 ff9d 	bl	800bf8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b060:	461a      	mov	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b06e:	f003 031f 	and.w	r3, r3, #31
 800b072:	2b02      	cmp	r3, #2
 800b074:	d01a      	beq.n	800b0ac <USBD_LL_SetupStage+0x72>
 800b076:	2b02      	cmp	r3, #2
 800b078:	d822      	bhi.n	800b0c0 <USBD_LL_SetupStage+0x86>
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <USBD_LL_SetupStage+0x4a>
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d00a      	beq.n	800b098 <USBD_LL_SetupStage+0x5e>
 800b082:	e01d      	b.n	800b0c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fa5d 	bl	800b54c <USBD_StdDevReq>
 800b092:	4603      	mov	r3, r0
 800b094:	73fb      	strb	r3, [r7, #15]
      break;
 800b096:	e020      	b.n	800b0da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fac1 	bl	800b628 <USBD_StdItfReq>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0aa:	e016      	b.n	800b0da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fb00 	bl	800b6ba <USBD_StdEPReq>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b0be:	e00c      	b.n	800b0da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b0c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f001 fa5e 	bl	800c590 <USBD_LL_StallEP>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0d8:	bf00      	nop
  }

  return ret;
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b0f2:	7afb      	ldrb	r3, [r7, #11]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d138      	bne.n	800b16a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b0fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b106:	2b03      	cmp	r3, #3
 800b108:	d14a      	bne.n	800b1a0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	689a      	ldr	r2, [r3, #8]
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	429a      	cmp	r2, r3
 800b114:	d913      	bls.n	800b13e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	689a      	ldr	r2, [r3, #8]
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	68da      	ldr	r2, [r3, #12]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	4293      	cmp	r3, r2
 800b12e:	bf28      	it	cs
 800b130:	4613      	movcs	r3, r2
 800b132:	461a      	mov	r2, r3
 800b134:	6879      	ldr	r1, [r7, #4]
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f001 f81c 	bl	800c174 <USBD_CtlContinueRx>
 800b13c:	e030      	b.n	800b1a0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b144:	b2db      	uxtb	r3, r3
 800b146:	2b03      	cmp	r3, #3
 800b148:	d10b      	bne.n	800b162 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f001 f817 	bl	800c196 <USBD_CtlSendStatus>
 800b168:	e01a      	b.n	800b1a0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b03      	cmp	r3, #3
 800b174:	d114      	bne.n	800b1a0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00e      	beq.n	800b1a0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	7afa      	ldrb	r2, [r7, #11]
 800b18c:	4611      	mov	r1, r2
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	4798      	blx	r3
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	e000      	b.n	800b1a2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b086      	sub	sp, #24
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	60f8      	str	r0, [r7, #12]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	607a      	str	r2, [r7, #4]
 800b1b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b1b8:	7afb      	ldrb	r3, [r7, #11]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d16b      	bne.n	800b296 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3314      	adds	r3, #20
 800b1c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d156      	bne.n	800b27c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	689a      	ldr	r2, [r3, #8]
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d914      	bls.n	800b204 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	689a      	ldr	r2, [r3, #8]
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	1ad2      	subs	r2, r2, r3
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 ff91 	bl	800c118 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f001 fa71 	bl	800c6e4 <USBD_LL_PrepareReceive>
 800b202:	e03b      	b.n	800b27c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d11c      	bne.n	800b24a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b218:	429a      	cmp	r2, r3
 800b21a:	d316      	bcc.n	800b24a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	685a      	ldr	r2, [r3, #4]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b226:	429a      	cmp	r2, r3
 800b228:	d20f      	bcs.n	800b24a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b22a:	2200      	movs	r2, #0
 800b22c:	2100      	movs	r1, #0
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f000 ff72 	bl	800c118 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b23c:	2300      	movs	r3, #0
 800b23e:	2200      	movs	r2, #0
 800b240:	2100      	movs	r1, #0
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f001 fa4e 	bl	800c6e4 <USBD_LL_PrepareReceive>
 800b248:	e018      	b.n	800b27c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b03      	cmp	r3, #3
 800b254:	d10b      	bne.n	800b26e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b26e:	2180      	movs	r1, #128	@ 0x80
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f001 f98d 	bl	800c590 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f000 ffa0 	bl	800c1bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b282:	2b01      	cmp	r3, #1
 800b284:	d122      	bne.n	800b2cc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f7ff fe98 	bl	800afbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b294:	e01a      	b.n	800b2cc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d114      	bne.n	800b2cc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00e      	beq.n	800b2cc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	7afa      	ldrb	r2, [r7, #11]
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	4798      	blx	r3
 800b2be:	4603      	mov	r3, r0
 800b2c0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	e000      	b.n	800b2ce <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3718      	adds	r7, #24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b302:	2b00      	cmp	r3, #0
 800b304:	d101      	bne.n	800b30a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b306:	2303      	movs	r3, #3
 800b308:	e02a      	b.n	800b360 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	6852      	ldr	r2, [r2, #4]
 800b322:	b2d2      	uxtb	r2, r2
 800b324:	4611      	mov	r1, r2
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b32a:	2340      	movs	r3, #64	@ 0x40
 800b32c:	2200      	movs	r2, #0
 800b32e:	2100      	movs	r1, #0
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 f8e8 	bl	800c506 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2240      	movs	r2, #64	@ 0x40
 800b342:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b346:	2340      	movs	r3, #64	@ 0x40
 800b348:	2200      	movs	r2, #0
 800b34a:	2180      	movs	r1, #128	@ 0x80
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f001 f8da 	bl	800c506 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2240      	movs	r2, #64	@ 0x40
 800b35c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	78fa      	ldrb	r2, [r7, #3]
 800b378:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b396:	b2da      	uxtb	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2204      	movs	r2, #4
 800b3a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b04      	cmp	r3, #4
 800b3c6:	d106      	bne.n	800b3d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e012      	b.n	800b420 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b03      	cmp	r3, #3
 800b404:	d10b      	bne.n	800b41e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d005      	beq.n	800b41e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b418:	69db      	ldr	r3, [r3, #28]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b43e:	2303      	movs	r3, #3
 800b440:	e014      	b.n	800b46c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d10d      	bne.n	800b46a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d007      	beq.n	800b46a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	78fa      	ldrb	r2, [r7, #3]
 800b464:	4611      	mov	r1, r2
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e014      	b.n	800b4b8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b494:	b2db      	uxtb	r3, r3
 800b496:	2b03      	cmp	r3, #3
 800b498:	d10d      	bne.n	800b4b6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d007      	beq.n	800b4b6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ae:	78fa      	ldrb	r2, [r7, #3]
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	370c      	adds	r7, #12
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d009      	beq.n	800b504 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	6852      	ldr	r2, [r2, #4]
 800b4fc:	b2d2      	uxtb	r2, r2
 800b4fe:	4611      	mov	r1, r2
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	4798      	blx	r3
  }

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b50e:	b480      	push	{r7}
 800b510:	b087      	sub	sp, #28
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	3301      	adds	r3, #1
 800b524:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b52c:	8a3b      	ldrh	r3, [r7, #16]
 800b52e:	021b      	lsls	r3, r3, #8
 800b530:	b21a      	sxth	r2, r3
 800b532:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b536:	4313      	orrs	r3, r2
 800b538:	b21b      	sxth	r3, r3
 800b53a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b53c:	89fb      	ldrh	r3, [r7, #14]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b562:	2b40      	cmp	r3, #64	@ 0x40
 800b564:	d005      	beq.n	800b572 <USBD_StdDevReq+0x26>
 800b566:	2b40      	cmp	r3, #64	@ 0x40
 800b568:	d853      	bhi.n	800b612 <USBD_StdDevReq+0xc6>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00b      	beq.n	800b586 <USBD_StdDevReq+0x3a>
 800b56e:	2b20      	cmp	r3, #32
 800b570:	d14f      	bne.n	800b612 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	4798      	blx	r3
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]
      break;
 800b584:	e04a      	b.n	800b61c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	785b      	ldrb	r3, [r3, #1]
 800b58a:	2b09      	cmp	r3, #9
 800b58c:	d83b      	bhi.n	800b606 <USBD_StdDevReq+0xba>
 800b58e:	a201      	add	r2, pc, #4	@ (adr r2, 800b594 <USBD_StdDevReq+0x48>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5e9 	.word	0x0800b5e9
 800b598:	0800b5fd 	.word	0x0800b5fd
 800b59c:	0800b607 	.word	0x0800b607
 800b5a0:	0800b5f3 	.word	0x0800b5f3
 800b5a4:	0800b607 	.word	0x0800b607
 800b5a8:	0800b5c7 	.word	0x0800b5c7
 800b5ac:	0800b5bd 	.word	0x0800b5bd
 800b5b0:	0800b607 	.word	0x0800b607
 800b5b4:	0800b5df 	.word	0x0800b5df
 800b5b8:	0800b5d1 	.word	0x0800b5d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f9de 	bl	800b980 <USBD_GetDescriptor>
          break;
 800b5c4:	e024      	b.n	800b610 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fb55 	bl	800bc78 <USBD_SetAddress>
          break;
 800b5ce:	e01f      	b.n	800b610 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fb94 	bl	800bd00 <USBD_SetConfig>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73fb      	strb	r3, [r7, #15]
          break;
 800b5dc:	e018      	b.n	800b610 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fc33 	bl	800be4c <USBD_GetConfig>
          break;
 800b5e6:	e013      	b.n	800b610 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fc64 	bl	800beb8 <USBD_GetStatus>
          break;
 800b5f0:	e00e      	b.n	800b610 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b5f2:	6839      	ldr	r1, [r7, #0]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 fc93 	bl	800bf20 <USBD_SetFeature>
          break;
 800b5fa:	e009      	b.n	800b610 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fca2 	bl	800bf48 <USBD_ClrFeature>
          break;
 800b604:	e004      	b.n	800b610 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fcf9 	bl	800c000 <USBD_CtlError>
          break;
 800b60e:	bf00      	nop
      }
      break;
 800b610:	e004      	b.n	800b61c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fcf3 	bl	800c000 <USBD_CtlError>
      break;
 800b61a:	bf00      	nop
  }

  return ret;
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop

0800b628 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b63e:	2b40      	cmp	r3, #64	@ 0x40
 800b640:	d005      	beq.n	800b64e <USBD_StdItfReq+0x26>
 800b642:	2b40      	cmp	r3, #64	@ 0x40
 800b644:	d82f      	bhi.n	800b6a6 <USBD_StdItfReq+0x7e>
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <USBD_StdItfReq+0x26>
 800b64a:	2b20      	cmp	r3, #32
 800b64c:	d12b      	bne.n	800b6a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b654:	b2db      	uxtb	r3, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d81d      	bhi.n	800b698 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	889b      	ldrh	r3, [r3, #4]
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b0f      	cmp	r3, #15
 800b664:	d813      	bhi.n	800b68e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	4798      	blx	r3
 800b674:	4603      	mov	r3, r0
 800b676:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	88db      	ldrh	r3, [r3, #6]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d110      	bne.n	800b6a2 <USBD_StdItfReq+0x7a>
 800b680:	7bfb      	ldrb	r3, [r7, #15]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10d      	bne.n	800b6a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fd85 	bl	800c196 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b68c:	e009      	b.n	800b6a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fcb5 	bl	800c000 <USBD_CtlError>
          break;
 800b696:	e004      	b.n	800b6a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fcb0 	bl	800c000 <USBD_CtlError>
          break;
 800b6a0:	e000      	b.n	800b6a4 <USBD_StdItfReq+0x7c>
          break;
 800b6a2:	bf00      	nop
      }
      break;
 800b6a4:	e004      	b.n	800b6b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fca9 	bl	800c000 <USBD_CtlError>
      break;
 800b6ae:	bf00      	nop
  }

  return ret;
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b084      	sub	sp, #16
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	889b      	ldrh	r3, [r3, #4]
 800b6cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6d6:	2b40      	cmp	r3, #64	@ 0x40
 800b6d8:	d007      	beq.n	800b6ea <USBD_StdEPReq+0x30>
 800b6da:	2b40      	cmp	r3, #64	@ 0x40
 800b6dc:	f200 8145 	bhi.w	800b96a <USBD_StdEPReq+0x2b0>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00c      	beq.n	800b6fe <USBD_StdEPReq+0x44>
 800b6e4:	2b20      	cmp	r3, #32
 800b6e6:	f040 8140 	bne.w	800b96a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	4798      	blx	r3
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b6fc:	e13a      	b.n	800b974 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	785b      	ldrb	r3, [r3, #1]
 800b702:	2b03      	cmp	r3, #3
 800b704:	d007      	beq.n	800b716 <USBD_StdEPReq+0x5c>
 800b706:	2b03      	cmp	r3, #3
 800b708:	f300 8129 	bgt.w	800b95e <USBD_StdEPReq+0x2a4>
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d07f      	beq.n	800b810 <USBD_StdEPReq+0x156>
 800b710:	2b01      	cmp	r3, #1
 800b712:	d03c      	beq.n	800b78e <USBD_StdEPReq+0xd4>
 800b714:	e123      	b.n	800b95e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d002      	beq.n	800b728 <USBD_StdEPReq+0x6e>
 800b722:	2b03      	cmp	r3, #3
 800b724:	d016      	beq.n	800b754 <USBD_StdEPReq+0x9a>
 800b726:	e02c      	b.n	800b782 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00d      	beq.n	800b74a <USBD_StdEPReq+0x90>
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	2b80      	cmp	r3, #128	@ 0x80
 800b732:	d00a      	beq.n	800b74a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b734:	7bbb      	ldrb	r3, [r7, #14]
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 ff29 	bl	800c590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b73e:	2180      	movs	r1, #128	@ 0x80
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 ff25 	bl	800c590 <USBD_LL_StallEP>
 800b746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b748:	e020      	b.n	800b78c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fc57 	bl	800c000 <USBD_CtlError>
              break;
 800b752:	e01b      	b.n	800b78c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	885b      	ldrh	r3, [r3, #2]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10e      	bne.n	800b77a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <USBD_StdEPReq+0xc0>
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b80      	cmp	r3, #128	@ 0x80
 800b766:	d008      	beq.n	800b77a <USBD_StdEPReq+0xc0>
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	88db      	ldrh	r3, [r3, #6]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 ff0b 	bl	800c590 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fd0b 	bl	800c196 <USBD_CtlSendStatus>

              break;
 800b780:	e004      	b.n	800b78c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fc3b 	bl	800c000 <USBD_CtlError>
              break;
 800b78a:	bf00      	nop
          }
          break;
 800b78c:	e0ec      	b.n	800b968 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b02      	cmp	r3, #2
 800b798:	d002      	beq.n	800b7a0 <USBD_StdEPReq+0xe6>
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d016      	beq.n	800b7cc <USBD_StdEPReq+0x112>
 800b79e:	e030      	b.n	800b802 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00d      	beq.n	800b7c2 <USBD_StdEPReq+0x108>
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
 800b7a8:	2b80      	cmp	r3, #128	@ 0x80
 800b7aa:	d00a      	beq.n	800b7c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 feed 	bl	800c590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7b6:	2180      	movs	r1, #128	@ 0x80
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fee9 	bl	800c590 <USBD_LL_StallEP>
 800b7be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7c0:	e025      	b.n	800b80e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fc1b 	bl	800c000 <USBD_CtlError>
              break;
 800b7ca:	e020      	b.n	800b80e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	885b      	ldrh	r3, [r3, #2]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d11b      	bne.n	800b80c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fef3 	bl	800c5ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fcd4 	bl	800c196 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	4798      	blx	r3
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b800:	e004      	b.n	800b80c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fbfb 	bl	800c000 <USBD_CtlError>
              break;
 800b80a:	e000      	b.n	800b80e <USBD_StdEPReq+0x154>
              break;
 800b80c:	bf00      	nop
          }
          break;
 800b80e:	e0ab      	b.n	800b968 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d002      	beq.n	800b822 <USBD_StdEPReq+0x168>
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d032      	beq.n	800b886 <USBD_StdEPReq+0x1cc>
 800b820:	e097      	b.n	800b952 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b822:	7bbb      	ldrb	r3, [r7, #14]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d007      	beq.n	800b838 <USBD_StdEPReq+0x17e>
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	2b80      	cmp	r3, #128	@ 0x80
 800b82c:	d004      	beq.n	800b838 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fbe5 	bl	800c000 <USBD_CtlError>
                break;
 800b836:	e091      	b.n	800b95c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	da0b      	bge.n	800b858 <USBD_StdEPReq+0x19e>
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b846:	4613      	mov	r3, r2
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4413      	add	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	3310      	adds	r3, #16
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	4413      	add	r3, r2
 800b854:	3304      	adds	r3, #4
 800b856:	e00b      	b.n	800b870 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b85e:	4613      	mov	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	4413      	add	r3, r2
 800b86e:	3304      	adds	r3, #4
 800b870:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	2202      	movs	r2, #2
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fc2f 	bl	800c0e2 <USBD_CtlSendData>
              break;
 800b884:	e06a      	b.n	800b95c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	da11      	bge.n	800b8b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	f003 020f 	and.w	r2, r3, #15
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	4613      	mov	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	440b      	add	r3, r1
 800b8a0:	3324      	adds	r3, #36	@ 0x24
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d117      	bne.n	800b8d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fba8 	bl	800c000 <USBD_CtlError>
                  break;
 800b8b0:	e054      	b.n	800b95c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	f003 020f 	and.w	r2, r3, #15
 800b8b8:	6879      	ldr	r1, [r7, #4]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	4413      	add	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	440b      	add	r3, r1
 800b8c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d104      	bne.n	800b8d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fb95 	bl	800c000 <USBD_CtlError>
                  break;
 800b8d6:	e041      	b.n	800b95c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	da0b      	bge.n	800b8f8 <USBD_StdEPReq+0x23e>
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
 800b8e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	3310      	adds	r3, #16
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	3304      	adds	r3, #4
 800b8f6:	e00b      	b.n	800b910 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8fe:	4613      	mov	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	4413      	add	r3, r2
 800b90e:	3304      	adds	r3, #4
 800b910:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <USBD_StdEPReq+0x264>
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	2b80      	cmp	r3, #128	@ 0x80
 800b91c:	d103      	bne.n	800b926 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	e00e      	b.n	800b944 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fe6e 	bl	800c60c <USBD_LL_IsStallEP>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2201      	movs	r2, #1
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	e002      	b.n	800b944 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2200      	movs	r2, #0
 800b942:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2202      	movs	r2, #2
 800b948:	4619      	mov	r1, r3
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fbc9 	bl	800c0e2 <USBD_CtlSendData>
              break;
 800b950:	e004      	b.n	800b95c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fb53 	bl	800c000 <USBD_CtlError>
              break;
 800b95a:	bf00      	nop
          }
          break;
 800b95c:	e004      	b.n	800b968 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fb4d 	bl	800c000 <USBD_CtlError>
          break;
 800b966:	bf00      	nop
      }
      break;
 800b968:	e004      	b.n	800b974 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 fb47 	bl	800c000 <USBD_CtlError>
      break;
 800b972:	bf00      	nop
  }

  return ret;
 800b974:	7bfb      	ldrb	r3, [r7, #15]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b98a:	2300      	movs	r3, #0
 800b98c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	885b      	ldrh	r3, [r3, #2]
 800b99a:	0a1b      	lsrs	r3, r3, #8
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	2b06      	cmp	r3, #6
 800b9a2:	f200 813b 	bhi.w	800bc1c <USBD_GetDescriptor+0x29c>
 800b9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9ac <USBD_GetDescriptor+0x2c>)
 800b9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ac:	0800b9c9 	.word	0x0800b9c9
 800b9b0:	0800b9e1 	.word	0x0800b9e1
 800b9b4:	0800ba21 	.word	0x0800ba21
 800b9b8:	0800bc1d 	.word	0x0800bc1d
 800b9bc:	0800bc1d 	.word	0x0800bc1d
 800b9c0:	0800bbbd 	.word	0x0800bbbd
 800b9c4:	0800bbe9 	.word	0x0800bbe9
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	7c12      	ldrb	r2, [r2, #16]
 800b9d4:	f107 0108 	add.w	r1, r7, #8
 800b9d8:	4610      	mov	r0, r2
 800b9da:	4798      	blx	r3
 800b9dc:	60f8      	str	r0, [r7, #12]
      break;
 800b9de:	e125      	b.n	800bc2c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	7c1b      	ldrb	r3, [r3, #16]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10d      	bne.n	800ba04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f0:	f107 0208 	add.w	r2, r7, #8
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	4798      	blx	r3
 800b9f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	2202      	movs	r2, #2
 800ba00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba02:	e113      	b.n	800bc2c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0c:	f107 0208 	add.w	r2, r7, #8
 800ba10:	4610      	mov	r0, r2
 800ba12:	4798      	blx	r3
 800ba14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	701a      	strb	r2, [r3, #0]
      break;
 800ba1e:	e105      	b.n	800bc2c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	885b      	ldrh	r3, [r3, #2]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b05      	cmp	r3, #5
 800ba28:	f200 80ac 	bhi.w	800bb84 <USBD_GetDescriptor+0x204>
 800ba2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba34 <USBD_GetDescriptor+0xb4>)
 800ba2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba32:	bf00      	nop
 800ba34:	0800ba4d 	.word	0x0800ba4d
 800ba38:	0800ba81 	.word	0x0800ba81
 800ba3c:	0800bab5 	.word	0x0800bab5
 800ba40:	0800bae9 	.word	0x0800bae9
 800ba44:	0800bb1d 	.word	0x0800bb1d
 800ba48:	0800bb51 	.word	0x0800bb51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	7c12      	ldrb	r2, [r2, #16]
 800ba64:	f107 0108 	add.w	r1, r7, #8
 800ba68:	4610      	mov	r0, r2
 800ba6a:	4798      	blx	r3
 800ba6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba6e:	e0a4      	b.n	800bbba <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fac4 	bl	800c000 <USBD_CtlError>
            err++;
 800ba78:	7afb      	ldrb	r3, [r7, #11]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba7e:	e09c      	b.n	800bbba <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00b      	beq.n	800baa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	7c12      	ldrb	r2, [r2, #16]
 800ba98:	f107 0108 	add.w	r1, r7, #8
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4798      	blx	r3
 800baa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baa2:	e08a      	b.n	800bbba <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 faaa 	bl	800c000 <USBD_CtlError>
            err++;
 800baac:	7afb      	ldrb	r3, [r7, #11]
 800baae:	3301      	adds	r3, #1
 800bab0:	72fb      	strb	r3, [r7, #11]
          break;
 800bab2:	e082      	b.n	800bbba <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00b      	beq.n	800bad8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	7c12      	ldrb	r2, [r2, #16]
 800bacc:	f107 0108 	add.w	r1, r7, #8
 800bad0:	4610      	mov	r0, r2
 800bad2:	4798      	blx	r3
 800bad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bad6:	e070      	b.n	800bbba <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fa90 	bl	800c000 <USBD_CtlError>
            err++;
 800bae0:	7afb      	ldrb	r3, [r7, #11]
 800bae2:	3301      	adds	r3, #1
 800bae4:	72fb      	strb	r3, [r7, #11]
          break;
 800bae6:	e068      	b.n	800bbba <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	7c12      	ldrb	r2, [r2, #16]
 800bb00:	f107 0108 	add.w	r1, r7, #8
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb0a:	e056      	b.n	800bbba <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fa76 	bl	800c000 <USBD_CtlError>
            err++;
 800bb14:	7afb      	ldrb	r3, [r7, #11]
 800bb16:	3301      	adds	r3, #1
 800bb18:	72fb      	strb	r3, [r7, #11]
          break;
 800bb1a:	e04e      	b.n	800bbba <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00b      	beq.n	800bb40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	7c12      	ldrb	r2, [r2, #16]
 800bb34:	f107 0108 	add.w	r1, r7, #8
 800bb38:	4610      	mov	r0, r2
 800bb3a:	4798      	blx	r3
 800bb3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb3e:	e03c      	b.n	800bbba <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fa5c 	bl	800c000 <USBD_CtlError>
            err++;
 800bb48:	7afb      	ldrb	r3, [r7, #11]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb4e:	e034      	b.n	800bbba <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00b      	beq.n	800bb74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	7c12      	ldrb	r2, [r2, #16]
 800bb68:	f107 0108 	add.w	r1, r7, #8
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	4798      	blx	r3
 800bb70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb72:	e022      	b.n	800bbba <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fa42 	bl	800c000 <USBD_CtlError>
            err++;
 800bb7c:	7afb      	ldrb	r3, [r7, #11]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	72fb      	strb	r3, [r7, #11]
          break;
 800bb82:	e01a      	b.n	800bbba <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00c      	beq.n	800bbaa <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	8852      	ldrh	r2, [r2, #2]
 800bb9c:	b2d1      	uxtb	r1, r2
 800bb9e:	f107 0208 	add.w	r2, r7, #8
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	4798      	blx	r3
 800bba6:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800bba8:	e006      	b.n	800bbb8 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fa27 	bl	800c000 <USBD_CtlError>
            err++;
 800bbb2:	7afb      	ldrb	r3, [r7, #11]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	72fb      	strb	r3, [r7, #11]
          break;
 800bbb8:	bf00      	nop
      }
      break;
 800bbba:	e037      	b.n	800bc2c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	7c1b      	ldrb	r3, [r3, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d109      	bne.n	800bbd8 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbcc:	f107 0208 	add.w	r2, r7, #8
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	4798      	blx	r3
 800bbd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbd6:	e029      	b.n	800bc2c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fa10 	bl	800c000 <USBD_CtlError>
        err++;
 800bbe0:	7afb      	ldrb	r3, [r7, #11]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	72fb      	strb	r3, [r7, #11]
      break;
 800bbe6:	e021      	b.n	800bc2c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	7c1b      	ldrb	r3, [r3, #16]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10d      	bne.n	800bc0c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbf8:	f107 0208 	add.w	r2, r7, #8
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3301      	adds	r3, #1
 800bc06:	2207      	movs	r2, #7
 800bc08:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc0a:	e00f      	b.n	800bc2c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f9f6 	bl	800c000 <USBD_CtlError>
        err++;
 800bc14:	7afb      	ldrb	r3, [r7, #11]
 800bc16:	3301      	adds	r3, #1
 800bc18:	72fb      	strb	r3, [r7, #11]
      break;
 800bc1a:	e007      	b.n	800bc2c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f9ee 	bl	800c000 <USBD_CtlError>
      err++;
 800bc24:	7afb      	ldrb	r3, [r7, #11]
 800bc26:	3301      	adds	r3, #1
 800bc28:	72fb      	strb	r3, [r7, #11]
      break;
 800bc2a:	bf00      	nop
  }

  if (err != 0U)
 800bc2c:	7afb      	ldrb	r3, [r7, #11]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d11e      	bne.n	800bc70 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	88db      	ldrh	r3, [r3, #6]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d016      	beq.n	800bc68 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800bc3a:	893b      	ldrh	r3, [r7, #8]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00e      	beq.n	800bc5e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	88da      	ldrh	r2, [r3, #6]
 800bc44:	893b      	ldrh	r3, [r7, #8]
 800bc46:	4293      	cmp	r3, r2
 800bc48:	bf28      	it	cs
 800bc4a:	4613      	movcs	r3, r2
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc50:	893b      	ldrh	r3, [r7, #8]
 800bc52:	461a      	mov	r2, r3
 800bc54:	68f9      	ldr	r1, [r7, #12]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fa43 	bl	800c0e2 <USBD_CtlSendData>
 800bc5c:	e009      	b.n	800bc72 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 f9cd 	bl	800c000 <USBD_CtlError>
 800bc66:	e004      	b.n	800bc72 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fa94 	bl	800c196 <USBD_CtlSendStatus>
 800bc6e:	e000      	b.n	800bc72 <USBD_GetDescriptor+0x2f2>
    return;
 800bc70:	bf00      	nop
  }
}
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	889b      	ldrh	r3, [r3, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d131      	bne.n	800bcee <USBD_SetAddress+0x76>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	88db      	ldrh	r3, [r3, #6]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d12d      	bne.n	800bcee <USBD_SetAddress+0x76>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc98:	d829      	bhi.n	800bcee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	885b      	ldrh	r3, [r3, #2]
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bca4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d104      	bne.n	800bcbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f9a3 	bl	800c000 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcba:	e01d      	b.n	800bcf8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	7bfa      	ldrb	r2, [r7, #15]
 800bcc0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fccb 	bl	800c664 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fa61 	bl	800c196 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d004      	beq.n	800bce4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2202      	movs	r2, #2
 800bcde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce2:	e009      	b.n	800bcf8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcec:	e004      	b.n	800bcf8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f985 	bl	800c000 <USBD_CtlError>
  }
}
 800bcf6:	bf00      	nop
 800bcf8:	bf00      	nop
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	885b      	ldrh	r3, [r3, #2]
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	4b4c      	ldr	r3, [pc, #304]	@ (800be48 <USBD_SetConfig+0x148>)
 800bd16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd18:	4b4b      	ldr	r3, [pc, #300]	@ (800be48 <USBD_SetConfig+0x148>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d905      	bls.n	800bd2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f96c 	bl	800c000 <USBD_CtlError>
    return USBD_FAIL;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e088      	b.n	800be3e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d002      	beq.n	800bd3e <USBD_SetConfig+0x3e>
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d025      	beq.n	800bd88 <USBD_SetConfig+0x88>
 800bd3c:	e071      	b.n	800be22 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd3e:	4b42      	ldr	r3, [pc, #264]	@ (800be48 <USBD_SetConfig+0x148>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d01c      	beq.n	800bd80 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bd46:	4b40      	ldr	r3, [pc, #256]	@ (800be48 <USBD_SetConfig+0x148>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd50:	4b3d      	ldr	r3, [pc, #244]	@ (800be48 <USBD_SetConfig+0x148>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7ff f93b 	bl	800afd2 <USBD_SetClassConfig>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd60:	7bfb      	ldrb	r3, [r7, #15]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f949 	bl	800c000 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd6e:	e065      	b.n	800be3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fa10 	bl	800c196 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2203      	movs	r2, #3
 800bd7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bd7e:	e05d      	b.n	800be3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fa08 	bl	800c196 <USBD_CtlSendStatus>
      break;
 800bd86:	e059      	b.n	800be3c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bd88:	4b2f      	ldr	r3, [pc, #188]	@ (800be48 <USBD_SetConfig+0x148>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d112      	bne.n	800bdb6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bd98:	4b2b      	ldr	r3, [pc, #172]	@ (800be48 <USBD_SetConfig+0x148>)
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bda2:	4b29      	ldr	r3, [pc, #164]	@ (800be48 <USBD_SetConfig+0x148>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	4619      	mov	r1, r3
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7ff f92e 	bl	800b00a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 f9f1 	bl	800c196 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdb4:	e042      	b.n	800be3c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bdb6:	4b24      	ldr	r3, [pc, #144]	@ (800be48 <USBD_SetConfig+0x148>)
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d02a      	beq.n	800be1a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff f91c 	bl	800b00a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bdd2:	4b1d      	ldr	r3, [pc, #116]	@ (800be48 <USBD_SetConfig+0x148>)
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bddc:	4b1a      	ldr	r3, [pc, #104]	@ (800be48 <USBD_SetConfig+0x148>)
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff f8f5 	bl	800afd2 <USBD_SetClassConfig>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00f      	beq.n	800be12 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f903 	bl	800c000 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7ff f901 	bl	800b00a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2202      	movs	r2, #2
 800be0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800be10:	e014      	b.n	800be3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f9bf 	bl	800c196 <USBD_CtlSendStatus>
      break;
 800be18:	e010      	b.n	800be3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f9bb 	bl	800c196 <USBD_CtlSendStatus>
      break;
 800be20:	e00c      	b.n	800be3c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f8eb 	bl	800c000 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be2a:	4b07      	ldr	r3, [pc, #28]	@ (800be48 <USBD_SetConfig+0x148>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	4619      	mov	r1, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff f8ea 	bl	800b00a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be36:	2303      	movs	r3, #3
 800be38:	73fb      	strb	r3, [r7, #15]
      break;
 800be3a:	bf00      	nop
  }

  return ret;
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	2000166c 	.word	0x2000166c

0800be4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	88db      	ldrh	r3, [r3, #6]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d004      	beq.n	800be68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 f8cd 	bl	800c000 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be66:	e023      	b.n	800beb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b02      	cmp	r3, #2
 800be72:	dc02      	bgt.n	800be7a <USBD_GetConfig+0x2e>
 800be74:	2b00      	cmp	r3, #0
 800be76:	dc03      	bgt.n	800be80 <USBD_GetConfig+0x34>
 800be78:	e015      	b.n	800bea6 <USBD_GetConfig+0x5a>
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d00b      	beq.n	800be96 <USBD_GetConfig+0x4a>
 800be7e:	e012      	b.n	800bea6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3308      	adds	r3, #8
 800be8a:	2201      	movs	r2, #1
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f927 	bl	800c0e2 <USBD_CtlSendData>
        break;
 800be94:	e00c      	b.n	800beb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3304      	adds	r3, #4
 800be9a:	2201      	movs	r2, #1
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f91f 	bl	800c0e2 <USBD_CtlSendData>
        break;
 800bea4:	e004      	b.n	800beb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f8a9 	bl	800c000 <USBD_CtlError>
        break;
 800beae:	bf00      	nop
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	3b01      	subs	r3, #1
 800becc:	2b02      	cmp	r3, #2
 800bece:	d81e      	bhi.n	800bf0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	88db      	ldrh	r3, [r3, #6]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d004      	beq.n	800bee2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f890 	bl	800c000 <USBD_CtlError>
        break;
 800bee0:	e01a      	b.n	800bf18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2201      	movs	r2, #1
 800bee6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d005      	beq.n	800befe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	f043 0202 	orr.w	r2, r3, #2
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	330c      	adds	r3, #12
 800bf02:	2202      	movs	r2, #2
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f8eb 	bl	800c0e2 <USBD_CtlSendData>
      break;
 800bf0c:	e004      	b.n	800bf18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bf0e:	6839      	ldr	r1, [r7, #0]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f875 	bl	800c000 <USBD_CtlError>
      break;
 800bf16:	bf00      	nop
  }
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d106      	bne.n	800bf40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2201      	movs	r2, #1
 800bf36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 f92b 	bl	800c196 <USBD_CtlSendStatus>
  }
}
 800bf40:	bf00      	nop
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d80b      	bhi.n	800bf78 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	885b      	ldrh	r3, [r3, #2]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d10c      	bne.n	800bf82 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 f910 	bl	800c196 <USBD_CtlSendStatus>
      }
      break;
 800bf76:	e004      	b.n	800bf82 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f840 	bl	800c000 <USBD_CtlError>
      break;
 800bf80:	e000      	b.n	800bf84 <USBD_ClrFeature+0x3c>
      break;
 800bf82:	bf00      	nop
  }
}
 800bf84:	bf00      	nop
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	781a      	ldrb	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f7ff faa9 	bl	800b50e <SWAPBYTE>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f7ff fa9c 	bl	800b50e <SWAPBYTE>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	461a      	mov	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff fa8f 	bl	800b50e <SWAPBYTE>
 800bff0:	4603      	mov	r3, r0
 800bff2:	461a      	mov	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	80da      	strh	r2, [r3, #6]
}
 800bff8:	bf00      	nop
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c00a:	2180      	movs	r1, #128	@ 0x80
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fabf 	bl	800c590 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c012:	2100      	movs	r1, #0
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fabb 	bl	800c590 <USBD_LL_StallEP>
}
 800c01a:	bf00      	nop
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b086      	sub	sp, #24
 800c026:	af00      	add	r7, sp, #0
 800c028:	60f8      	str	r0, [r7, #12]
 800c02a:	60b9      	str	r1, [r7, #8]
 800c02c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c02e:	2300      	movs	r3, #0
 800c030:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d036      	beq.n	800c0a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c03c:	6938      	ldr	r0, [r7, #16]
 800c03e:	f000 f836 	bl	800c0ae <USBD_GetLen>
 800c042:	4603      	mov	r3, r0
 800c044:	3301      	adds	r3, #1
 800c046:	b29b      	uxth	r3, r3
 800c048:	005b      	lsls	r3, r3, #1
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c050:	7dfb      	ldrb	r3, [r7, #23]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	4413      	add	r3, r2
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	7812      	ldrb	r2, [r2, #0]
 800c05a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
 800c05e:	3301      	adds	r3, #1
 800c060:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c062:	7dfb      	ldrb	r3, [r7, #23]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	4413      	add	r3, r2
 800c068:	2203      	movs	r2, #3
 800c06a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	3301      	adds	r3, #1
 800c070:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c072:	e013      	b.n	800c09c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	4413      	add	r3, r2
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	7812      	ldrb	r2, [r2, #0]
 800c07e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	3301      	adds	r3, #1
 800c084:	613b      	str	r3, [r7, #16]
    idx++;
 800c086:	7dfb      	ldrb	r3, [r7, #23]
 800c088:	3301      	adds	r3, #1
 800c08a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c08c:	7dfb      	ldrb	r3, [r7, #23]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	4413      	add	r3, r2
 800c092:	2200      	movs	r2, #0
 800c094:	701a      	strb	r2, [r3, #0]
    idx++;
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	3301      	adds	r3, #1
 800c09a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1e7      	bne.n	800c074 <USBD_GetString+0x52>
 800c0a4:	e000      	b.n	800c0a8 <USBD_GetString+0x86>
    return;
 800c0a6:	bf00      	nop
  }
}
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c0be:	e005      	b.n	800c0cc <USBD_GetLen+0x1e>
  {
    len++;
 800c0c0:	7bfb      	ldrb	r3, [r7, #15]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1f5      	bne.n	800c0c0 <USBD_GetLen+0x12>
  }

  return len;
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	60f8      	str	r0, [r7, #12]
 800c0ea:	60b9      	str	r1, [r7, #8]
 800c0ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	2100      	movs	r1, #0
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f000 faca 	bl	800c6a2 <USBD_LL_Transmit>

  return USBD_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	2100      	movs	r1, #0
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f000 fab9 	bl	800c6a2 <USBD_LL_Transmit>

  return USBD_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2203      	movs	r2, #3
 800c14a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	2100      	movs	r1, #0
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 fabd 	bl	800c6e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	2100      	movs	r1, #0
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f000 faac 	bl	800c6e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2204      	movs	r2, #4
 800c1a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fa78 	bl	800c6a2 <USBD_LL_Transmit>

  return USBD_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2205      	movs	r2, #5
 800c1c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fa86 	bl	800c6e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	70fb      	strb	r3, [r7, #3]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800c1f2:	883b      	ldrh	r3, [r7, #0]
 800c1f4:	089b      	lsrs	r3, r3, #2
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	78fb      	ldrb	r3, [r7, #3]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7f9 fbbb 	bl	8005978 <HAL_PCDEx_SetTxFiFo>
 800c202:	4603      	mov	r3, r0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800c218:	887b      	ldrh	r3, [r7, #2]
 800c21a:	089b      	lsrs	r3, r3, #2
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7f9 fbf0 	bl	8005a06 <HAL_PCDEx_SetRxFiFo>
 800c226:	4603      	mov	r3, r0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c244:	4619      	mov	r1, r3
 800c246:	4610      	mov	r0, r2
 800c248:	f7fe fef7 	bl	800b03a <USBD_LL_SetupStage>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c266:	78fa      	ldrb	r2, [r7, #3]
 800c268:	6879      	ldr	r1, [r7, #4]
 800c26a:	4613      	mov	r3, r2
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	440b      	add	r3, r1
 800c274:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	4619      	mov	r1, r3
 800c27e:	f7fe ff31 	bl	800b0e4 <USBD_LL_DataOutStage>
}
 800c282:	bf00      	nop
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b082      	sub	sp, #8
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	460b      	mov	r3, r1
 800c294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c29c:	78fa      	ldrb	r2, [r7, #3]
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	4413      	add	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	440b      	add	r3, r1
 800c2aa:	3320      	adds	r3, #32
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	78fb      	ldrb	r3, [r7, #3]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f7fe ff7a 	bl	800b1aa <USBD_LL_DataInStage>
}
 800c2b6:	bf00      	nop
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7ff f889 	bl	800b3e4 <USBD_LL_SOF>
}
 800c2d2:	bf00      	nop
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b084      	sub	sp, #16
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	79db      	ldrb	r3, [r3, #7]
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d102      	bne.n	800c2f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	73fb      	strb	r3, [r7, #15]
 800c2f2:	e008      	b.n	800c306 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	79db      	ldrb	r3, [r3, #7]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	73fb      	strb	r3, [r7, #15]
 800c300:	e001      	b.n	800c306 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800c302:	f7f5 ff05 	bl	8002110 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c30c:	7bfa      	ldrb	r2, [r7, #15]
 800c30e:	4611      	mov	r1, r2
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff f829 	bl	800b368 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe ffda 	bl	800b2d6 <USBD_LL_Reset>
}
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff f824 	bl	800b388 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	6812      	ldr	r2, [r2, #0]
 800c34e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c352:	f043 0301 	orr.w	r3, r3, #1
 800c356:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7adb      	ldrb	r3, [r3, #11]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d005      	beq.n	800c36c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c360:	4b04      	ldr	r3, [pc, #16]	@ (800c374 <HAL_PCD_SuspendCallback+0x48>)
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	4a03      	ldr	r2, [pc, #12]	@ (800c374 <HAL_PCD_SuspendCallback+0x48>)
 800c366:	f043 0306 	orr.w	r3, r3, #6
 800c36a:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800c36c:	bf00      	nop
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	e000ed00 	.word	0xe000ed00

0800c378 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c386:	4618      	mov	r0, r3
 800c388:	f7ff f814 	bl	800b3b4 <USBD_LL_Resume>
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c3a6:	78fa      	ldrb	r2, [r7, #3]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff f862 	bl	800b474 <USBD_LL_IsoOUTIncomplete>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c3ca:	78fa      	ldrb	r2, [r7, #3]
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7ff f82a 	bl	800b428 <USBD_LL_IsoINIncomplete>
}
 800c3d4:	bf00      	nop
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff f868 	bl	800b4c0 <USBD_LL_DevConnected>
}
 800c3f0:	bf00      	nop
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c406:	4618      	mov	r0, r3
 800c408:	f7ff f865 	bl	800b4d6 <USBD_LL_DevDisconnected>
}
 800c40c:	bf00      	nop
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800c41c:	4b27      	ldr	r3, [pc, #156]	@ (800c4bc <USBD_LL_Init+0xa8>)
 800c41e:	4a28      	ldr	r2, [pc, #160]	@ (800c4c0 <USBD_LL_Init+0xac>)
 800c420:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d143      	bne.n	800c4b2 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800c42a:	4b24      	ldr	r3, [pc, #144]	@ (800c4bc <USBD_LL_Init+0xa8>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800c434:	4b21      	ldr	r3, [pc, #132]	@ (800c4bc <USBD_LL_Init+0xa8>)
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800c43e:	4b1f      	ldr	r3, [pc, #124]	@ (800c4bc <USBD_LL_Init+0xa8>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fee0 	bl	800c20c <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800c44c:	4b1b      	ldr	r3, [pc, #108]	@ (800c4bc <USBD_LL_Init+0xa8>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2240      	movs	r2, #64	@ 0x40
 800c452:	2100      	movs	r1, #0
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fec4 	bl	800c1e2 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800c45a:	4b18      	ldr	r3, [pc, #96]	@ (800c4bc <USBD_LL_Init+0xa8>)
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	4b19      	ldr	r3, [pc, #100]	@ (800c4c4 <USBD_LL_Init+0xb0>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2240      	movs	r2, #64	@ 0x40
 800c46a:	4619      	mov	r1, r3
 800c46c:	f7ff feb9 	bl	800c1e2 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c470:	2300      	movs	r3, #0
 800c472:	73fb      	strb	r3, [r7, #15]
 800c474:	e01a      	b.n	800c4ac <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800c476:	4b11      	ldr	r3, [pc, #68]	@ (800c4bc <USBD_LL_Init+0xa8>)
 800c478:	6818      	ldr	r0, [r3, #0]
 800c47a:	7bfb      	ldrb	r3, [r7, #15]
 800c47c:	4a12      	ldr	r2, [pc, #72]	@ (800c4c8 <USBD_LL_Init+0xb4>)
 800c47e:	5cd3      	ldrb	r3, [r2, r3]
 800c480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2280      	movs	r2, #128	@ 0x80
 800c488:	4619      	mov	r1, r3
 800c48a:	f7ff feaa 	bl	800c1e2 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800c48e:	4b0b      	ldr	r3, [pc, #44]	@ (800c4bc <USBD_LL_Init+0xa8>)
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	7bfb      	ldrb	r3, [r7, #15]
 800c494:	4a0d      	ldr	r2, [pc, #52]	@ (800c4cc <USBD_LL_Init+0xb8>)
 800c496:	5cd3      	ldrb	r3, [r2, r3]
 800c498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2240      	movs	r2, #64	@ 0x40
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	f7ff fe9e 	bl	800c1e2 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	73fb      	strb	r3, [r7, #15]
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d0e1      	beq.n	800c476 <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20001670 	.word	0x20001670
 800c4c0:	200007f8 	.word	0x200007f8
 800c4c4:	200001f6 	.word	0x200001f6
 800c4c8:	20001304 	.word	0x20001304
 800c4cc:	2000130c 	.word	0x2000130c

0800c4d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7f8 f939 	bl	800475e <HAL_PCD_Start>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f92a 	bl	800c74c <USBD_Get_USB_Status>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	4608      	mov	r0, r1
 800c510:	4611      	mov	r1, r2
 800c512:	461a      	mov	r2, r3
 800c514:	4603      	mov	r3, r0
 800c516:	70fb      	strb	r3, [r7, #3]
 800c518:	460b      	mov	r3, r1
 800c51a:	70bb      	strb	r3, [r7, #2]
 800c51c:	4613      	mov	r3, r2
 800c51e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c52e:	78bb      	ldrb	r3, [r7, #2]
 800c530:	883a      	ldrh	r2, [r7, #0]
 800c532:	78f9      	ldrb	r1, [r7, #3]
 800c534:	f7f8 fe3a 	bl	80051ac <HAL_PCD_EP_Open>
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 f904 	bl	800c74c <USBD_Get_USB_Status>
 800c544:	4603      	mov	r3, r0
 800c546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c548:	7bbb      	ldrb	r3, [r7, #14]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c56c:	78fa      	ldrb	r2, [r7, #3]
 800c56e:	4611      	mov	r1, r2
 800c570:	4618      	mov	r0, r3
 800c572:	f7f8 fe85 	bl	8005280 <HAL_PCD_EP_Close>
 800c576:	4603      	mov	r3, r0
 800c578:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
 800c57c:	4618      	mov	r0, r3
 800c57e:	f000 f8e5 	bl	800c74c <USBD_Get_USB_Status>
 800c582:	4603      	mov	r3, r0
 800c584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c586:	7bbb      	ldrb	r3, [r7, #14]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	460b      	mov	r3, r1
 800c59a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c5aa:	78fa      	ldrb	r2, [r7, #3]
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7f8 ff3d 	bl	800542e <HAL_PCD_EP_SetStall>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 f8c6 	bl	800c74c <USBD_Get_USB_Status>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c5e8:	78fa      	ldrb	r2, [r7, #3]
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7f8 ff81 	bl	80054f4 <HAL_PCD_EP_ClrStall>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 f8a7 	bl	800c74c <USBD_Get_USB_Status>
 800c5fe:	4603      	mov	r3, r0
 800c600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c602:	7bbb      	ldrb	r3, [r7, #14]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c61e:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800c620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c624:	2b00      	cmp	r3, #0
 800c626:	da0b      	bge.n	800c640 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c628:	78fb      	ldrb	r3, [r7, #3]
 800c62a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c62e:	68f9      	ldr	r1, [r7, #12]
 800c630:	4613      	mov	r3, r2
 800c632:	00db      	lsls	r3, r3, #3
 800c634:	4413      	add	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	440b      	add	r3, r1
 800c63a:	3316      	adds	r3, #22
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	e00b      	b.n	800c658 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c640:	78fb      	ldrb	r3, [r7, #3]
 800c642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c646:	68f9      	ldr	r1, [r7, #12]
 800c648:	4613      	mov	r3, r2
 800c64a:	00db      	lsls	r3, r3, #3
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	440b      	add	r3, r1
 800c652:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c656:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c674:	2300      	movs	r3, #0
 800c676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c67e:	78fa      	ldrb	r2, [r7, #3]
 800c680:	4611      	mov	r1, r2
 800c682:	4618      	mov	r0, r3
 800c684:	f7f8 fd6e 	bl	8005164 <HAL_PCD_SetAddress>
 800c688:	4603      	mov	r3, r0
 800c68a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 f85c 	bl	800c74c <USBD_Get_USB_Status>
 800c694:	4603      	mov	r3, r0
 800c696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c698:	7bbb      	ldrb	r3, [r7, #14]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b086      	sub	sp, #24
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	60f8      	str	r0, [r7, #12]
 800c6aa:	607a      	str	r2, [r7, #4]
 800c6ac:	603b      	str	r3, [r7, #0]
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c6c0:	7af9      	ldrb	r1, [r7, #11]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	f7f8 fe78 	bl	80053ba <HAL_PCD_EP_Transmit>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 f83b 	bl	800c74c <USBD_Get_USB_Status>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6da:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3718      	adds	r7, #24
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c702:	7af9      	ldrb	r1, [r7, #11]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	f7f8 fe04 	bl	8005314 <HAL_PCD_EP_Receive>
 800c70c:	4603      	mov	r3, r0
 800c70e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	4618      	mov	r0, r3
 800c714:	f000 f81a 	bl	800c74c <USBD_Get_USB_Status>
 800c718:	4603      	mov	r3, r0
 800c71a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c71c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	460b      	mov	r3, r1
 800c730:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c738:	78fa      	ldrb	r2, [r7, #3]
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7f8 fe24 	bl	800538a <HAL_PCD_EP_GetRxCount>
 800c742:	4603      	mov	r3, r0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	2b03      	cmp	r3, #3
 800c75e:	d817      	bhi.n	800c790 <USBD_Get_USB_Status+0x44>
 800c760:	a201      	add	r2, pc, #4	@ (adr r2, 800c768 <USBD_Get_USB_Status+0x1c>)
 800c762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c766:	bf00      	nop
 800c768:	0800c779 	.word	0x0800c779
 800c76c:	0800c77f 	.word	0x0800c77f
 800c770:	0800c785 	.word	0x0800c785
 800c774:	0800c78b 	.word	0x0800c78b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	73fb      	strb	r3, [r7, #15]
    break;
 800c77c:	e00b      	b.n	800c796 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800c77e:	2303      	movs	r3, #3
 800c780:	73fb      	strb	r3, [r7, #15]
    break;
 800c782:	e008      	b.n	800c796 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800c784:	2301      	movs	r3, #1
 800c786:	73fb      	strb	r3, [r7, #15]
    break;
 800c788:	e005      	b.n	800c796 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800c78a:	2303      	movs	r3, #3
 800c78c:	73fb      	strb	r3, [r7, #15]
    break;
 800c78e:	e002      	b.n	800c796 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800c790:	2303      	movs	r3, #3
 800c792:	73fb      	strb	r3, [r7, #15]
    break;
 800c794:	bf00      	nop
  }
  return usb_status;
 800c796:	7bfb      	ldrb	r3, [r7, #15]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c7b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7b6:	2b84      	cmp	r3, #132	@ 0x84
 800c7b8:	d005      	beq.n	800c7c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c7ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	3303      	adds	r3, #3
 800c7c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7da:	f3ef 8305 	mrs	r3, IPSR
 800c7de:	607b      	str	r3, [r7, #4]
  return(result);
 800c7e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	bf14      	ite	ne
 800c7e6:	2301      	movne	r3, #1
 800c7e8:	2300      	moveq	r3, #0
 800c7ea:	b2db      	uxtb	r3, r3
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c7fc:	f001 f942 	bl	800da84 <vTaskStartScheduler>
  
  return osOK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	bd80      	pop	{r7, pc}

0800c806 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c806:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c808:	b089      	sub	sp, #36	@ 0x24
 800c80a:	af04      	add	r7, sp, #16
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d020      	beq.n	800c85a <osThreadCreate+0x54>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d01c      	beq.n	800c85a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685c      	ldr	r4, [r3, #4]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	691e      	ldr	r6, [r3, #16]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff ffb6 	bl	800c7a4 <makeFreeRtosPriority>
 800c838:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c842:	9202      	str	r2, [sp, #8]
 800c844:	9301      	str	r3, [sp, #4]
 800c846:	9100      	str	r1, [sp, #0]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	4632      	mov	r2, r6
 800c84c:	4629      	mov	r1, r5
 800c84e:	4620      	mov	r0, r4
 800c850:	f000 ff32 	bl	800d6b8 <xTaskCreateStatic>
 800c854:	4603      	mov	r3, r0
 800c856:	60fb      	str	r3, [r7, #12]
 800c858:	e01c      	b.n	800c894 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685c      	ldr	r4, [r3, #4]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c866:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff ff98 	bl	800c7a4 <makeFreeRtosPriority>
 800c874:	4602      	mov	r2, r0
 800c876:	f107 030c 	add.w	r3, r7, #12
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	9200      	str	r2, [sp, #0]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	4632      	mov	r2, r6
 800c882:	4629      	mov	r1, r5
 800c884:	4620      	mov	r0, r4
 800c886:	f000 ff77 	bl	800d778 <xTaskCreate>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d001      	beq.n	800c894 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c890:	2300      	movs	r3, #0
 800c892:	e000      	b.n	800c896 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c894:	68fb      	ldr	r3, [r7, #12]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c89e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b084      	sub	sp, #16
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d001      	beq.n	800c8b4 <osDelay+0x16>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	e000      	b.n	800c8b6 <osDelay+0x18>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f001 f8ae 	bl	800da18 <vTaskDelay>
  
  return osOK;
 800c8bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b086      	sub	sp, #24
 800c8ca:	af02      	add	r7, sp, #8
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00f      	beq.n	800c8f8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d10a      	bne.n	800c8f4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	9200      	str	r2, [sp, #0]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	2001      	movs	r0, #1
 800c8ec:	f000 f9c0 	bl	800cc70 <xQueueGenericCreateStatic>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	e016      	b.n	800c922 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e014      	b.n	800c922 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d110      	bne.n	800c920 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c8fe:	2203      	movs	r2, #3
 800c900:	2100      	movs	r1, #0
 800c902:	2001      	movs	r0, #1
 800c904:	f000 fa31 	bl	800cd6a <xQueueGenericCreate>
 800c908:	60f8      	str	r0, [r7, #12]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d005      	beq.n	800c91c <osSemaphoreCreate+0x56>
 800c910:	2300      	movs	r3, #0
 800c912:	2200      	movs	r2, #0
 800c914:	2100      	movs	r1, #0
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f000 fa82 	bl	800ce20 <xQueueGenericSend>
      return sema;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	e000      	b.n	800c922 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c920:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
	...

0800c92c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c936:	2300      	movs	r3, #0
 800c938:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c940:	2380      	movs	r3, #128	@ 0x80
 800c942:	e03a      	b.n	800c9ba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94e:	d103      	bne.n	800c958 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c950:	f04f 33ff 	mov.w	r3, #4294967295
 800c954:	60fb      	str	r3, [r7, #12]
 800c956:	e009      	b.n	800c96c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d006      	beq.n	800c96c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <osSemaphoreWait+0x40>
      ticks = 1;
 800c968:	2301      	movs	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c96c:	f7ff ff32 	bl	800c7d4 <inHandlerMode>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d017      	beq.n	800c9a6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c976:	f107 0308 	add.w	r3, r7, #8
 800c97a:	461a      	mov	r2, r3
 800c97c:	2100      	movs	r1, #0
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fcf0 	bl	800d364 <xQueueReceiveFromISR>
 800c984:	4603      	mov	r3, r0
 800c986:	2b01      	cmp	r3, #1
 800c988:	d001      	beq.n	800c98e <osSemaphoreWait+0x62>
      return osErrorOS;
 800c98a:	23ff      	movs	r3, #255	@ 0xff
 800c98c:	e015      	b.n	800c9ba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d011      	beq.n	800c9b8 <osSemaphoreWait+0x8c>
 800c994:	4b0b      	ldr	r3, [pc, #44]	@ (800c9c4 <osSemaphoreWait+0x98>)
 800c996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	e008      	b.n	800c9b8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c9a6:	68f9      	ldr	r1, [r7, #12]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fbcb 	bl	800d144 <xQueueSemaphoreTake>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d001      	beq.n	800c9b8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c9b4:	23ff      	movs	r3, #255	@ 0xff
 800c9b6:	e000      	b.n	800c9ba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	e000ed04 	.word	0xe000ed04

0800c9c8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c9d8:	f7ff fefc 	bl	800c7d4 <inHandlerMode>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d016      	beq.n	800ca10 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c9e2:	f107 0308 	add.w	r3, r7, #8
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fb1b 	bl	800d024 <xQueueGiveFromISR>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d001      	beq.n	800c9f8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c9f4:	23ff      	movs	r3, #255	@ 0xff
 800c9f6:	e017      	b.n	800ca28 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d013      	beq.n	800ca26 <osSemaphoreRelease+0x5e>
 800c9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800ca30 <osSemaphoreRelease+0x68>)
 800ca00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca04:	601a      	str	r2, [r3, #0]
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	e00a      	b.n	800ca26 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ca10:	2300      	movs	r3, #0
 800ca12:	2200      	movs	r2, #0
 800ca14:	2100      	movs	r1, #0
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fa02 	bl	800ce20 <xQueueGenericSend>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d001      	beq.n	800ca26 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ca22:	23ff      	movs	r3, #255	@ 0xff
 800ca24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ca26:	68fb      	ldr	r3, [r7, #12]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	e000ed04 	.word	0xe000ed04

0800ca34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f103 0208 	add.w	r2, r3, #8
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f04f 32ff 	mov.w	r2, #4294967295
 800ca4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f103 0208 	add.w	r2, r3, #8
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f103 0208 	add.w	r2, r3, #8
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca82:	bf00      	nop
 800ca84:	370c      	adds	r7, #12
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca8e:	b480      	push	{r7}
 800ca90:	b085      	sub	sp, #20
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	689a      	ldr	r2, [r3, #8]
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	601a      	str	r2, [r3, #0]
}
 800caca:	bf00      	nop
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cad6:	b480      	push	{r7}
 800cad8:	b085      	sub	sp, #20
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caec:	d103      	bne.n	800caf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	e00c      	b.n	800cb10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3308      	adds	r3, #8
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	e002      	b.n	800cb04 <vListInsert+0x2e>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d2f6      	bcs.n	800cafe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	683a      	ldr	r2, [r7, #0]
 800cb2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	601a      	str	r2, [r3, #0]
}
 800cb3c:	bf00      	nop
 800cb3e:	3714      	adds	r7, #20
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	6892      	ldr	r2, [r2, #8]
 800cb5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	6852      	ldr	r2, [r2, #4]
 800cb68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d103      	bne.n	800cb7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	689a      	ldr	r2, [r3, #8]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	1e5a      	subs	r2, r3, #1
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10b      	bne.n	800cbc8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cbc2:	bf00      	nop
 800cbc4:	bf00      	nop
 800cbc6:	e7fd      	b.n	800cbc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbc8:	f001 fed6 	bl	800e978 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbd4:	68f9      	ldr	r1, [r7, #12]
 800cbd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbd8:	fb01 f303 	mul.w	r3, r1, r3
 800cbdc:	441a      	add	r2, r3
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	68f9      	ldr	r1, [r7, #12]
 800cbfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbfe:	fb01 f303 	mul.w	r3, r1, r3
 800cc02:	441a      	add	r2, r3
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	22ff      	movs	r2, #255	@ 0xff
 800cc0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	22ff      	movs	r2, #255	@ 0xff
 800cc14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d114      	bne.n	800cc48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d01a      	beq.n	800cc5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	3310      	adds	r3, #16
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f001 f984 	bl	800df38 <xTaskRemoveFromEventList>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d012      	beq.n	800cc5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc36:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <xQueueGenericReset+0xd0>)
 800cc38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	e009      	b.n	800cc5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3310      	adds	r3, #16
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff fef1 	bl	800ca34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3324      	adds	r3, #36	@ 0x24
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff feec 	bl	800ca34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc5c:	f001 febe 	bl	800e9dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc60:	2301      	movs	r3, #1
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	e000ed04 	.word	0xe000ed04

0800cc70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08e      	sub	sp, #56	@ 0x38
 800cc74:	af02      	add	r7, sp, #8
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10b      	bne.n	800cc9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc96:	bf00      	nop
 800cc98:	bf00      	nop
 800cc9a:	e7fd      	b.n	800cc98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10b      	bne.n	800ccba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop
 800ccb8:	e7fd      	b.n	800ccb6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <xQueueGenericCreateStatic+0x56>
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d001      	beq.n	800ccca <xQueueGenericCreateStatic+0x5a>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e000      	b.n	800cccc <xQueueGenericCreateStatic+0x5c>
 800ccca:	2300      	movs	r3, #0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10b      	bne.n	800cce8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ccd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	623b      	str	r3, [r7, #32]
}
 800cce2:	bf00      	nop
 800cce4:	bf00      	nop
 800cce6:	e7fd      	b.n	800cce4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d102      	bne.n	800ccf4 <xQueueGenericCreateStatic+0x84>
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d101      	bne.n	800ccf8 <xQueueGenericCreateStatic+0x88>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e000      	b.n	800ccfa <xQueueGenericCreateStatic+0x8a>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10b      	bne.n	800cd16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	61fb      	str	r3, [r7, #28]
}
 800cd10:	bf00      	nop
 800cd12:	bf00      	nop
 800cd14:	e7fd      	b.n	800cd12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd16:	2348      	movs	r3, #72	@ 0x48
 800cd18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	2b48      	cmp	r3, #72	@ 0x48
 800cd1e:	d00b      	beq.n	800cd38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	61bb      	str	r3, [r7, #24]
}
 800cd32:	bf00      	nop
 800cd34:	bf00      	nop
 800cd36:	e7fd      	b.n	800cd34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00d      	beq.n	800cd60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	4613      	mov	r3, r2
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	68b9      	ldr	r1, [r7, #8]
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	f000 f840 	bl	800cde0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3730      	adds	r7, #48	@ 0x30
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b08a      	sub	sp, #40	@ 0x28
 800cd6e:	af02      	add	r7, sp, #8
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	4613      	mov	r3, r2
 800cd76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10b      	bne.n	800cd96 <xQueueGenericCreate+0x2c>
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	613b      	str	r3, [r7, #16]
}
 800cd90:	bf00      	nop
 800cd92:	bf00      	nop
 800cd94:	e7fd      	b.n	800cd92 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	fb02 f303 	mul.w	r3, r2, r3
 800cd9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	3348      	adds	r3, #72	@ 0x48
 800cda4:	4618      	mov	r0, r3
 800cda6:	f001 ff09 	bl	800ebbc <pvPortMalloc>
 800cdaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d011      	beq.n	800cdd6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	3348      	adds	r3, #72	@ 0x48
 800cdba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdc4:	79fa      	ldrb	r2, [r7, #7]
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	697a      	ldr	r2, [r7, #20]
 800cdce:	68b9      	ldr	r1, [r7, #8]
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 f805 	bl	800cde0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdd6:	69bb      	ldr	r3, [r7, #24]
	}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3720      	adds	r7, #32
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
 800cdec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d103      	bne.n	800cdfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	69ba      	ldr	r2, [r7, #24]
 800cdf8:	601a      	str	r2, [r3, #0]
 800cdfa:	e002      	b.n	800ce02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce0e:	2101      	movs	r1, #1
 800ce10:	69b8      	ldr	r0, [r7, #24]
 800ce12:	f7ff fec3 	bl	800cb9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce16:	bf00      	nop
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
	...

0800ce20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08e      	sub	sp, #56	@ 0x38
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10b      	bne.n	800ce54 <xQueueGenericSend+0x34>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ce4e:	bf00      	nop
 800ce50:	bf00      	nop
 800ce52:	e7fd      	b.n	800ce50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d103      	bne.n	800ce62 <xQueueGenericSend+0x42>
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <xQueueGenericSend+0x46>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e000      	b.n	800ce68 <xQueueGenericSend+0x48>
 800ce66:	2300      	movs	r3, #0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10b      	bne.n	800ce84 <xQueueGenericSend+0x64>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ce7e:	bf00      	nop
 800ce80:	bf00      	nop
 800ce82:	e7fd      	b.n	800ce80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d103      	bne.n	800ce92 <xQueueGenericSend+0x72>
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d101      	bne.n	800ce96 <xQueueGenericSend+0x76>
 800ce92:	2301      	movs	r3, #1
 800ce94:	e000      	b.n	800ce98 <xQueueGenericSend+0x78>
 800ce96:	2300      	movs	r3, #0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10b      	bne.n	800ceb4 <xQueueGenericSend+0x94>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	623b      	str	r3, [r7, #32]
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	e7fd      	b.n	800ceb0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceb4:	f001 fa06 	bl	800e2c4 <xTaskGetSchedulerState>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d102      	bne.n	800cec4 <xQueueGenericSend+0xa4>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d101      	bne.n	800cec8 <xQueueGenericSend+0xa8>
 800cec4:	2301      	movs	r3, #1
 800cec6:	e000      	b.n	800ceca <xQueueGenericSend+0xaa>
 800cec8:	2300      	movs	r3, #0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d10b      	bne.n	800cee6 <xQueueGenericSend+0xc6>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	61fb      	str	r3, [r7, #28]
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	e7fd      	b.n	800cee2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cee6:	f001 fd47 	bl	800e978 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ceea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ceee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d302      	bcc.n	800cefc <xQueueGenericSend+0xdc>
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d129      	bne.n	800cf50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	68b9      	ldr	r1, [r7, #8]
 800cf00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf02:	f000 fac9 	bl	800d498 <prvCopyDataToQueue>
 800cf06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d010      	beq.n	800cf32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf12:	3324      	adds	r3, #36	@ 0x24
 800cf14:	4618      	mov	r0, r3
 800cf16:	f001 f80f 	bl	800df38 <xTaskRemoveFromEventList>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d013      	beq.n	800cf48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf20:	4b3f      	ldr	r3, [pc, #252]	@ (800d020 <xQueueGenericSend+0x200>)
 800cf22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf26:	601a      	str	r2, [r3, #0]
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	e00a      	b.n	800cf48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d007      	beq.n	800cf48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf38:	4b39      	ldr	r3, [pc, #228]	@ (800d020 <xQueueGenericSend+0x200>)
 800cf3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf48:	f001 fd48 	bl	800e9dc <vPortExitCritical>
				return pdPASS;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e063      	b.n	800d018 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d103      	bne.n	800cf5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf56:	f001 fd41 	bl	800e9dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	e05c      	b.n	800d018 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf64:	f107 0314 	add.w	r3, r7, #20
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f001 f849 	bl	800e000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf72:	f001 fd33 	bl	800e9dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf76:	f000 fdef 	bl	800db58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf7a:	f001 fcfd 	bl	800e978 <vPortEnterCritical>
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf84:	b25b      	sxtb	r3, r3
 800cf86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8a:	d103      	bne.n	800cf94 <xQueueGenericSend+0x174>
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf9a:	b25b      	sxtb	r3, r3
 800cf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa0:	d103      	bne.n	800cfaa <xQueueGenericSend+0x18a>
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfaa:	f001 fd17 	bl	800e9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfae:	1d3a      	adds	r2, r7, #4
 800cfb0:	f107 0314 	add.w	r3, r7, #20
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f001 f838 	bl	800e02c <xTaskCheckForTimeOut>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d124      	bne.n	800d00c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cfc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfc4:	f000 fb60 	bl	800d688 <prvIsQueueFull>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d018      	beq.n	800d000 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd0:	3310      	adds	r3, #16
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 ff88 	bl	800deec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cfdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfde:	f000 faeb 	bl	800d5b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cfe2:	f000 fdc7 	bl	800db74 <xTaskResumeAll>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f47f af7c 	bne.w	800cee6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cfee:	4b0c      	ldr	r3, [pc, #48]	@ (800d020 <xQueueGenericSend+0x200>)
 800cff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	e772      	b.n	800cee6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d002:	f000 fad9 	bl	800d5b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d006:	f000 fdb5 	bl	800db74 <xTaskResumeAll>
 800d00a:	e76c      	b.n	800cee6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d00c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d00e:	f000 fad3 	bl	800d5b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d012:	f000 fdaf 	bl	800db74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3738      	adds	r7, #56	@ 0x38
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	e000ed04 	.word	0xe000ed04

0800d024 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b08e      	sub	sp, #56	@ 0x38
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10b      	bne.n	800d050 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	623b      	str	r3, [r7, #32]
}
 800d04a:	bf00      	nop
 800d04c:	bf00      	nop
 800d04e:	e7fd      	b.n	800d04c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00b      	beq.n	800d070 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05c:	f383 8811 	msr	BASEPRI, r3
 800d060:	f3bf 8f6f 	isb	sy
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	61fb      	str	r3, [r7, #28]
}
 800d06a:	bf00      	nop
 800d06c:	bf00      	nop
 800d06e:	e7fd      	b.n	800d06c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d103      	bne.n	800d080 <xQueueGiveFromISR+0x5c>
 800d078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <xQueueGiveFromISR+0x60>
 800d080:	2301      	movs	r3, #1
 800d082:	e000      	b.n	800d086 <xQueueGiveFromISR+0x62>
 800d084:	2300      	movs	r3, #0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10b      	bne.n	800d0a2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	61bb      	str	r3, [r7, #24]
}
 800d09c:	bf00      	nop
 800d09e:	bf00      	nop
 800d0a0:	e7fd      	b.n	800d09e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0a2:	f001 fd49 	bl	800eb38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d0a6:	f3ef 8211 	mrs	r2, BASEPRI
 800d0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ae:	f383 8811 	msr	BASEPRI, r3
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	617a      	str	r2, [r7, #20]
 800d0bc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d0be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d22b      	bcs.n	800d12a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d0d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ec:	d112      	bne.n	800d114 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d016      	beq.n	800d124 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f8:	3324      	adds	r3, #36	@ 0x24
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 ff1c 	bl	800df38 <xTaskRemoveFromEventList>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00e      	beq.n	800d124 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00b      	beq.n	800d124 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	2201      	movs	r2, #1
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	e007      	b.n	800d124 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d118:	3301      	adds	r3, #1
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	b25a      	sxtb	r2, r3
 800d11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d124:	2301      	movs	r3, #1
 800d126:	637b      	str	r3, [r7, #52]	@ 0x34
 800d128:	e001      	b.n	800d12e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d12a:	2300      	movs	r3, #0
 800d12c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d130:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d138:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3738      	adds	r7, #56	@ 0x38
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08e      	sub	sp, #56	@ 0x38
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d14e:	2300      	movs	r3, #0
 800d150:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d156:	2300      	movs	r3, #0
 800d158:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10b      	bne.n	800d178 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	623b      	str	r3, [r7, #32]
}
 800d172:	bf00      	nop
 800d174:	bf00      	nop
 800d176:	e7fd      	b.n	800d174 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00b      	beq.n	800d198 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	61fb      	str	r3, [r7, #28]
}
 800d192:	bf00      	nop
 800d194:	bf00      	nop
 800d196:	e7fd      	b.n	800d194 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d198:	f001 f894 	bl	800e2c4 <xTaskGetSchedulerState>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d102      	bne.n	800d1a8 <xQueueSemaphoreTake+0x64>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <xQueueSemaphoreTake+0x68>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <xQueueSemaphoreTake+0x6a>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10b      	bne.n	800d1ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	61bb      	str	r3, [r7, #24]
}
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop
 800d1c8:	e7fd      	b.n	800d1c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ca:	f001 fbd5 	bl	800e978 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d024      	beq.n	800d224 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1dc:	1e5a      	subs	r2, r3, #1
 800d1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d104      	bne.n	800d1f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d1ea:	f001 fa17 	bl	800e61c <pvTaskIncrementMutexHeldCount>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00f      	beq.n	800d21c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fe:	3310      	adds	r3, #16
 800d200:	4618      	mov	r0, r3
 800d202:	f000 fe99 	bl	800df38 <xTaskRemoveFromEventList>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d20c:	4b54      	ldr	r3, [pc, #336]	@ (800d360 <xQueueSemaphoreTake+0x21c>)
 800d20e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d21c:	f001 fbde 	bl	800e9dc <vPortExitCritical>
				return pdPASS;
 800d220:	2301      	movs	r3, #1
 800d222:	e098      	b.n	800d356 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d112      	bne.n	800d250 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00b      	beq.n	800d248 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	617b      	str	r3, [r7, #20]
}
 800d242:	bf00      	nop
 800d244:	bf00      	nop
 800d246:	e7fd      	b.n	800d244 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d248:	f001 fbc8 	bl	800e9dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d24c:	2300      	movs	r3, #0
 800d24e:	e082      	b.n	800d356 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d252:	2b00      	cmp	r3, #0
 800d254:	d106      	bne.n	800d264 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d256:	f107 030c 	add.w	r3, r7, #12
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 fed0 	bl	800e000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d260:	2301      	movs	r3, #1
 800d262:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d264:	f001 fbba 	bl	800e9dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d268:	f000 fc76 	bl	800db58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d26c:	f001 fb84 	bl	800e978 <vPortEnterCritical>
 800d270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d272:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d276:	b25b      	sxtb	r3, r3
 800d278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27c:	d103      	bne.n	800d286 <xQueueSemaphoreTake+0x142>
 800d27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d28c:	b25b      	sxtb	r3, r3
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d103      	bne.n	800d29c <xQueueSemaphoreTake+0x158>
 800d294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d296:	2200      	movs	r2, #0
 800d298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d29c:	f001 fb9e 	bl	800e9dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2a0:	463a      	mov	r2, r7
 800d2a2:	f107 030c 	add.w	r3, r7, #12
 800d2a6:	4611      	mov	r1, r2
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f000 febf 	bl	800e02c <xTaskCheckForTimeOut>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d132      	bne.n	800d31a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2b6:	f000 f9d1 	bl	800d65c <prvIsQueueEmpty>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d026      	beq.n	800d30e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d109      	bne.n	800d2dc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d2c8:	f001 fb56 	bl	800e978 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f001 f815 	bl	800e300 <xTaskPriorityInherit>
 800d2d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d2d8:	f001 fb80 	bl	800e9dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2de:	3324      	adds	r3, #36	@ 0x24
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 fe01 	bl	800deec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2ec:	f000 f964 	bl	800d5b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2f0:	f000 fc40 	bl	800db74 <xTaskResumeAll>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f47f af67 	bne.w	800d1ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d2fc:	4b18      	ldr	r3, [pc, #96]	@ (800d360 <xQueueSemaphoreTake+0x21c>)
 800d2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	e75d      	b.n	800d1ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d30e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d310:	f000 f952 	bl	800d5b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d314:	f000 fc2e 	bl	800db74 <xTaskResumeAll>
 800d318:	e757      	b.n	800d1ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d31a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d31c:	f000 f94c 	bl	800d5b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d320:	f000 fc28 	bl	800db74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d324:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d326:	f000 f999 	bl	800d65c <prvIsQueueEmpty>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f43f af4c 	beq.w	800d1ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00d      	beq.n	800d354 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d338:	f001 fb1e 	bl	800e978 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d33c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d33e:	f000 f893 	bl	800d468 <prvGetDisinheritPriorityAfterTimeout>
 800d342:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d34a:	4618      	mov	r0, r3
 800d34c:	f001 f8d6 	bl	800e4fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d350:	f001 fb44 	bl	800e9dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d354:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d356:	4618      	mov	r0, r3
 800d358:	3738      	adds	r7, #56	@ 0x38
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	e000ed04 	.word	0xe000ed04

0800d364 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08e      	sub	sp, #56	@ 0x38
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	623b      	str	r3, [r7, #32]
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d103      	bne.n	800d3a0 <xQueueReceiveFromISR+0x3c>
 800d398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <xQueueReceiveFromISR+0x40>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e000      	b.n	800d3a6 <xQueueReceiveFromISR+0x42>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10b      	bne.n	800d3c2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	61fb      	str	r3, [r7, #28]
}
 800d3bc:	bf00      	nop
 800d3be:	bf00      	nop
 800d3c0:	e7fd      	b.n	800d3be <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3c2:	f001 fbb9 	bl	800eb38 <vPortValidateInterruptPriority>
	__asm volatile
 800d3c6:	f3ef 8211 	mrs	r2, BASEPRI
 800d3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	61ba      	str	r2, [r7, #24]
 800d3dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d3de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d02f      	beq.n	800d44e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3f8:	68b9      	ldr	r1, [r7, #8]
 800d3fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3fc:	f000 f8b6 	bl	800d56c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d402:	1e5a      	subs	r2, r3, #1
 800d404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d406:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d408:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d410:	d112      	bne.n	800d438 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d016      	beq.n	800d448 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41c:	3310      	adds	r3, #16
 800d41e:	4618      	mov	r0, r3
 800d420:	f000 fd8a 	bl	800df38 <xTaskRemoveFromEventList>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00e      	beq.n	800d448 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00b      	beq.n	800d448 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	601a      	str	r2, [r3, #0]
 800d436:	e007      	b.n	800d448 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d43c:	3301      	adds	r3, #1
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	b25a      	sxtb	r2, r3
 800d442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d448:	2301      	movs	r3, #1
 800d44a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d44c:	e001      	b.n	800d452 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d44e:	2300      	movs	r3, #0
 800d450:	637b      	str	r3, [r7, #52]	@ 0x34
 800d452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d454:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	f383 8811 	msr	BASEPRI, r3
}
 800d45c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d460:	4618      	mov	r0, r3
 800d462:	3738      	adds	r7, #56	@ 0x38
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f1c3 0307 	rsb	r3, r3, #7
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	e001      	b.n	800d48a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d486:	2300      	movs	r3, #0
 800d488:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d48a:	68fb      	ldr	r3, [r7, #12]
	}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3714      	adds	r7, #20
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10d      	bne.n	800d4d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d14d      	bne.n	800d55a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 ff92 	bl	800e3ec <xTaskPriorityDisinherit>
 800d4c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	609a      	str	r2, [r3, #8]
 800d4d0:	e043      	b.n	800d55a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d119      	bne.n	800d50c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6858      	ldr	r0, [r3, #4]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	68b9      	ldr	r1, [r7, #8]
 800d4e4:	f002 f953 	bl	800f78e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4f0:	441a      	add	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	685a      	ldr	r2, [r3, #4]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d32b      	bcc.n	800d55a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	605a      	str	r2, [r3, #4]
 800d50a:	e026      	b.n	800d55a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	68d8      	ldr	r0, [r3, #12]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d514:	461a      	mov	r2, r3
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	f002 f939 	bl	800f78e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	68da      	ldr	r2, [r3, #12]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d524:	425b      	negs	r3, r3
 800d526:	441a      	add	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	68da      	ldr	r2, [r3, #12]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	429a      	cmp	r2, r3
 800d536:	d207      	bcs.n	800d548 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	689a      	ldr	r2, [r3, #8]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d540:	425b      	negs	r3, r3
 800d542:	441a      	add	r2, r3
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d105      	bne.n	800d55a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	3b01      	subs	r3, #1
 800d558:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	1c5a      	adds	r2, r3, #1
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d562:	697b      	ldr	r3, [r7, #20]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d018      	beq.n	800d5b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	68da      	ldr	r2, [r3, #12]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d586:	441a      	add	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	68da      	ldr	r2, [r3, #12]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	429a      	cmp	r2, r3
 800d596:	d303      	bcc.n	800d5a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68d9      	ldr	r1, [r3, #12]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	6838      	ldr	r0, [r7, #0]
 800d5ac:	f002 f8ef 	bl	800f78e <memcpy>
	}
}
 800d5b0:	bf00      	nop
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d5c0:	f001 f9da 	bl	800e978 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5cc:	e011      	b.n	800d5f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d012      	beq.n	800d5fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	3324      	adds	r3, #36	@ 0x24
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 fcac 	bl	800df38 <xTaskRemoveFromEventList>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d5e6:	f000 fd85 	bl	800e0f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d5ea:	7bfb      	ldrb	r3, [r7, #15]
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	dce9      	bgt.n	800d5ce <prvUnlockQueue+0x16>
 800d5fa:	e000      	b.n	800d5fe <prvUnlockQueue+0x46>
					break;
 800d5fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	22ff      	movs	r2, #255	@ 0xff
 800d602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d606:	f001 f9e9 	bl	800e9dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d60a:	f001 f9b5 	bl	800e978 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d614:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d616:	e011      	b.n	800d63c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d012      	beq.n	800d646 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	3310      	adds	r3, #16
 800d624:	4618      	mov	r0, r3
 800d626:	f000 fc87 	bl	800df38 <xTaskRemoveFromEventList>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d630:	f000 fd60 	bl	800e0f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d634:	7bbb      	ldrb	r3, [r7, #14]
 800d636:	3b01      	subs	r3, #1
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d63c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d640:	2b00      	cmp	r3, #0
 800d642:	dce9      	bgt.n	800d618 <prvUnlockQueue+0x60>
 800d644:	e000      	b.n	800d648 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d646:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	22ff      	movs	r2, #255	@ 0xff
 800d64c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d650:	f001 f9c4 	bl	800e9dc <vPortExitCritical>
}
 800d654:	bf00      	nop
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d664:	f001 f988 	bl	800e978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d102      	bne.n	800d676 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d670:	2301      	movs	r3, #1
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	e001      	b.n	800d67a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d676:	2300      	movs	r3, #0
 800d678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d67a:	f001 f9af 	bl	800e9dc <vPortExitCritical>

	return xReturn;
 800d67e:	68fb      	ldr	r3, [r7, #12]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3710      	adds	r7, #16
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d690:	f001 f972 	bl	800e978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d102      	bne.n	800d6a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	e001      	b.n	800d6aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6aa:	f001 f997 	bl	800e9dc <vPortExitCritical>

	return xReturn;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08e      	sub	sp, #56	@ 0x38
 800d6bc:	af04      	add	r7, sp, #16
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10b      	bne.n	800d6e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	623b      	str	r3, [r7, #32]
}
 800d6de:	bf00      	nop
 800d6e0:	bf00      	nop
 800d6e2:	e7fd      	b.n	800d6e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10b      	bne.n	800d702 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	61fb      	str	r3, [r7, #28]
}
 800d6fc:	bf00      	nop
 800d6fe:	bf00      	nop
 800d700:	e7fd      	b.n	800d6fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d702:	23a0      	movs	r3, #160	@ 0xa0
 800d704:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	2ba0      	cmp	r3, #160	@ 0xa0
 800d70a:	d00b      	beq.n	800d724 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	61bb      	str	r3, [r7, #24]
}
 800d71e:	bf00      	nop
 800d720:	bf00      	nop
 800d722:	e7fd      	b.n	800d720 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d724:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d01e      	beq.n	800d76a <xTaskCreateStatic+0xb2>
 800d72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d01b      	beq.n	800d76a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d734:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d73a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73e:	2202      	movs	r2, #2
 800d740:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d744:	2300      	movs	r3, #0
 800d746:	9303      	str	r3, [sp, #12]
 800d748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74a:	9302      	str	r3, [sp, #8]
 800d74c:	f107 0314 	add.w	r3, r7, #20
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	68b9      	ldr	r1, [r7, #8]
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f000 f851 	bl	800d804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d762:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d764:	f000 f8ee 	bl	800d944 <prvAddNewTaskToReadyList>
 800d768:	e001      	b.n	800d76e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d76a:	2300      	movs	r3, #0
 800d76c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d76e:	697b      	ldr	r3, [r7, #20]
	}
 800d770:	4618      	mov	r0, r3
 800d772:	3728      	adds	r7, #40	@ 0x28
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08c      	sub	sp, #48	@ 0x30
 800d77c:	af04      	add	r7, sp, #16
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	603b      	str	r3, [r7, #0]
 800d784:	4613      	mov	r3, r2
 800d786:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d788:	88fb      	ldrh	r3, [r7, #6]
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	4618      	mov	r0, r3
 800d78e:	f001 fa15 	bl	800ebbc <pvPortMalloc>
 800d792:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00e      	beq.n	800d7b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d79a:	20a0      	movs	r0, #160	@ 0xa0
 800d79c:	f001 fa0e 	bl	800ebbc <pvPortMalloc>
 800d7a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d003      	beq.n	800d7b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	631a      	str	r2, [r3, #48]	@ 0x30
 800d7ae:	e005      	b.n	800d7bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7b0:	6978      	ldr	r0, [r7, #20]
 800d7b2:	f001 fad1 	bl	800ed58 <vPortFree>
 800d7b6:	e001      	b.n	800d7bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d017      	beq.n	800d7f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7ca:	88fa      	ldrh	r2, [r7, #6]
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	9303      	str	r3, [sp, #12]
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	9302      	str	r3, [sp, #8]
 800d7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	68b9      	ldr	r1, [r7, #8]
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f000 f80f 	bl	800d804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7e6:	69f8      	ldr	r0, [r7, #28]
 800d7e8:	f000 f8ac 	bl	800d944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	61bb      	str	r3, [r7, #24]
 800d7f0:	e002      	b.n	800d7f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7f8:	69bb      	ldr	r3, [r7, #24]
	}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3720      	adds	r7, #32
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
	...

0800d804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d81c:	3b01      	subs	r3, #1
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4413      	add	r3, r2
 800d822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	f023 0307 	bic.w	r3, r3, #7
 800d82a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	f003 0307 	and.w	r3, r3, #7
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00b      	beq.n	800d84e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800d836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d83a:	f383 8811 	msr	BASEPRI, r3
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	617b      	str	r3, [r7, #20]
}
 800d848:	bf00      	nop
 800d84a:	bf00      	nop
 800d84c:	e7fd      	b.n	800d84a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d01f      	beq.n	800d894 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d854:	2300      	movs	r3, #0
 800d856:	61fb      	str	r3, [r7, #28]
 800d858:	e012      	b.n	800d880 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	4413      	add	r3, r2
 800d860:	7819      	ldrb	r1, [r3, #0]
 800d862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	4413      	add	r3, r2
 800d868:	3334      	adds	r3, #52	@ 0x34
 800d86a:	460a      	mov	r2, r1
 800d86c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	4413      	add	r3, r2
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d006      	beq.n	800d888 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	3301      	adds	r3, #1
 800d87e:	61fb      	str	r3, [r7, #28]
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	2b0f      	cmp	r3, #15
 800d884:	d9e9      	bls.n	800d85a <prvInitialiseNewTask+0x56>
 800d886:	e000      	b.n	800d88a <prvInitialiseNewTask+0x86>
			{
				break;
 800d888:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	2200      	movs	r2, #0
 800d88e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d892:	e003      	b.n	800d89c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d89e:	2b06      	cmp	r3, #6
 800d8a0:	d901      	bls.n	800d8a6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8a2:	2306      	movs	r3, #6
 800d8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8b0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff f8d9 	bl	800ca74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c4:	3318      	adds	r3, #24
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff f8d4 	bl	800ca74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d4:	f1c3 0207 	rsb	r2, r3, #7
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f4:	334c      	adds	r3, #76	@ 0x4c
 800d8f6:	224c      	movs	r2, #76	@ 0x4c
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f001 fe66 	bl	800f5cc <memset>
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	4a0d      	ldr	r2, [pc, #52]	@ (800d938 <prvInitialiseNewTask+0x134>)
 800d904:	651a      	str	r2, [r3, #80]	@ 0x50
 800d906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d908:	4a0c      	ldr	r2, [pc, #48]	@ (800d93c <prvInitialiseNewTask+0x138>)
 800d90a:	655a      	str	r2, [r3, #84]	@ 0x54
 800d90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90e:	4a0c      	ldr	r2, [pc, #48]	@ (800d940 <prvInitialiseNewTask+0x13c>)
 800d910:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	68f9      	ldr	r1, [r7, #12]
 800d916:	69b8      	ldr	r0, [r7, #24]
 800d918:	f000 fefa 	bl	800e710 <pxPortInitialiseStack>
 800d91c:	4602      	mov	r2, r0
 800d91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d920:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d92c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d92e:	bf00      	nop
 800d930:	3720      	adds	r7, #32
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	200053d0 	.word	0x200053d0
 800d93c:	20005438 	.word	0x20005438
 800d940:	200054a0 	.word	0x200054a0

0800d944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d94c:	f001 f814 	bl	800e978 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d950:	4b2a      	ldr	r3, [pc, #168]	@ (800d9fc <prvAddNewTaskToReadyList+0xb8>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3301      	adds	r3, #1
 800d956:	4a29      	ldr	r2, [pc, #164]	@ (800d9fc <prvAddNewTaskToReadyList+0xb8>)
 800d958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d95a:	4b29      	ldr	r3, [pc, #164]	@ (800da00 <prvAddNewTaskToReadyList+0xbc>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d109      	bne.n	800d976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d962:	4a27      	ldr	r2, [pc, #156]	@ (800da00 <prvAddNewTaskToReadyList+0xbc>)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d968:	4b24      	ldr	r3, [pc, #144]	@ (800d9fc <prvAddNewTaskToReadyList+0xb8>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d110      	bne.n	800d992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d970:	f000 fbe4 	bl	800e13c <prvInitialiseTaskLists>
 800d974:	e00d      	b.n	800d992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d976:	4b23      	ldr	r3, [pc, #140]	@ (800da04 <prvAddNewTaskToReadyList+0xc0>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d109      	bne.n	800d992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d97e:	4b20      	ldr	r3, [pc, #128]	@ (800da00 <prvAddNewTaskToReadyList+0xbc>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d988:	429a      	cmp	r2, r3
 800d98a:	d802      	bhi.n	800d992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d98c:	4a1c      	ldr	r2, [pc, #112]	@ (800da00 <prvAddNewTaskToReadyList+0xbc>)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d992:	4b1d      	ldr	r3, [pc, #116]	@ (800da08 <prvAddNewTaskToReadyList+0xc4>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3301      	adds	r3, #1
 800d998:	4a1b      	ldr	r2, [pc, #108]	@ (800da08 <prvAddNewTaskToReadyList+0xc4>)
 800d99a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	409a      	lsls	r2, r3
 800d9a4:	4b19      	ldr	r3, [pc, #100]	@ (800da0c <prvAddNewTaskToReadyList+0xc8>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	4a18      	ldr	r2, [pc, #96]	@ (800da0c <prvAddNewTaskToReadyList+0xc8>)
 800d9ac:	6013      	str	r3, [r2, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	4413      	add	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	4a15      	ldr	r2, [pc, #84]	@ (800da10 <prvAddNewTaskToReadyList+0xcc>)
 800d9bc:	441a      	add	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	f7ff f862 	bl	800ca8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9ca:	f001 f807 	bl	800e9dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800da04 <prvAddNewTaskToReadyList+0xc0>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00e      	beq.n	800d9f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9d6:	4b0a      	ldr	r3, [pc, #40]	@ (800da00 <prvAddNewTaskToReadyList+0xbc>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d207      	bcs.n	800d9f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9e4:	4b0b      	ldr	r3, [pc, #44]	@ (800da14 <prvAddNewTaskToReadyList+0xd0>)
 800d9e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9f4:	bf00      	nop
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	20001774 	.word	0x20001774
 800da00:	20001674 	.word	0x20001674
 800da04:	20001780 	.word	0x20001780
 800da08:	20001790 	.word	0x20001790
 800da0c:	2000177c 	.word	0x2000177c
 800da10:	20001678 	.word	0x20001678
 800da14:	e000ed04 	.word	0xe000ed04

0800da18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da20:	2300      	movs	r3, #0
 800da22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d018      	beq.n	800da5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da2a:	4b14      	ldr	r3, [pc, #80]	@ (800da7c <vTaskDelay+0x64>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00b      	beq.n	800da4a <vTaskDelay+0x32>
	__asm volatile
 800da32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da36:	f383 8811 	msr	BASEPRI, r3
 800da3a:	f3bf 8f6f 	isb	sy
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	60bb      	str	r3, [r7, #8]
}
 800da44:	bf00      	nop
 800da46:	bf00      	nop
 800da48:	e7fd      	b.n	800da46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da4a:	f000 f885 	bl	800db58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da4e:	2100      	movs	r1, #0
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 fdf7 	bl	800e644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da56:	f000 f88d 	bl	800db74 <xTaskResumeAll>
 800da5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d107      	bne.n	800da72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800da62:	4b07      	ldr	r3, [pc, #28]	@ (800da80 <vTaskDelay+0x68>)
 800da64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da72:	bf00      	nop
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	2000179c 	.word	0x2000179c
 800da80:	e000ed04 	.word	0xe000ed04

0800da84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08a      	sub	sp, #40	@ 0x28
 800da88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da8a:	2300      	movs	r3, #0
 800da8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da8e:	2300      	movs	r3, #0
 800da90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da92:	463a      	mov	r2, r7
 800da94:	1d39      	adds	r1, r7, #4
 800da96:	f107 0308 	add.w	r3, r7, #8
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7f3 fb10 	bl	80010c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	9202      	str	r2, [sp, #8]
 800daa8:	9301      	str	r3, [sp, #4]
 800daaa:	2300      	movs	r3, #0
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	2300      	movs	r3, #0
 800dab0:	460a      	mov	r2, r1
 800dab2:	4921      	ldr	r1, [pc, #132]	@ (800db38 <vTaskStartScheduler+0xb4>)
 800dab4:	4821      	ldr	r0, [pc, #132]	@ (800db3c <vTaskStartScheduler+0xb8>)
 800dab6:	f7ff fdff 	bl	800d6b8 <xTaskCreateStatic>
 800daba:	4603      	mov	r3, r0
 800dabc:	4a20      	ldr	r2, [pc, #128]	@ (800db40 <vTaskStartScheduler+0xbc>)
 800dabe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dac0:	4b1f      	ldr	r3, [pc, #124]	@ (800db40 <vTaskStartScheduler+0xbc>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dac8:	2301      	movs	r3, #1
 800daca:	617b      	str	r3, [r7, #20]
 800dacc:	e001      	b.n	800dad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dace:	2300      	movs	r3, #0
 800dad0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d11b      	bne.n	800db10 <vTaskStartScheduler+0x8c>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	613b      	str	r3, [r7, #16]
}
 800daea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800daec:	4b15      	ldr	r3, [pc, #84]	@ (800db44 <vTaskStartScheduler+0xc0>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	334c      	adds	r3, #76	@ 0x4c
 800daf2:	4a15      	ldr	r2, [pc, #84]	@ (800db48 <vTaskStartScheduler+0xc4>)
 800daf4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800daf6:	4b15      	ldr	r3, [pc, #84]	@ (800db4c <vTaskStartScheduler+0xc8>)
 800daf8:	f04f 32ff 	mov.w	r2, #4294967295
 800dafc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dafe:	4b14      	ldr	r3, [pc, #80]	@ (800db50 <vTaskStartScheduler+0xcc>)
 800db00:	2201      	movs	r2, #1
 800db02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db04:	4b13      	ldr	r3, [pc, #76]	@ (800db54 <vTaskStartScheduler+0xd0>)
 800db06:	2200      	movs	r2, #0
 800db08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db0a:	f000 fe91 	bl	800e830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db0e:	e00f      	b.n	800db30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db16:	d10b      	bne.n	800db30 <vTaskStartScheduler+0xac>
	__asm volatile
 800db18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db1c:	f383 8811 	msr	BASEPRI, r3
 800db20:	f3bf 8f6f 	isb	sy
 800db24:	f3bf 8f4f 	dsb	sy
 800db28:	60fb      	str	r3, [r7, #12]
}
 800db2a:	bf00      	nop
 800db2c:	bf00      	nop
 800db2e:	e7fd      	b.n	800db2c <vTaskStartScheduler+0xa8>
}
 800db30:	bf00      	nop
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	080105ac 	.word	0x080105ac
 800db3c:	0800e10d 	.word	0x0800e10d
 800db40:	20001798 	.word	0x20001798
 800db44:	20001674 	.word	0x20001674
 800db48:	200002e0 	.word	0x200002e0
 800db4c:	20001794 	.word	0x20001794
 800db50:	20001780 	.word	0x20001780
 800db54:	20001778 	.word	0x20001778

0800db58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db58:	b480      	push	{r7}
 800db5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db5c:	4b04      	ldr	r3, [pc, #16]	@ (800db70 <vTaskSuspendAll+0x18>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3301      	adds	r3, #1
 800db62:	4a03      	ldr	r2, [pc, #12]	@ (800db70 <vTaskSuspendAll+0x18>)
 800db64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db66:	bf00      	nop
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	2000179c 	.word	0x2000179c

0800db74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db7e:	2300      	movs	r3, #0
 800db80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db82:	4b42      	ldr	r3, [pc, #264]	@ (800dc8c <xTaskResumeAll+0x118>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10b      	bne.n	800dba2 <xTaskResumeAll+0x2e>
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	603b      	str	r3, [r7, #0]
}
 800db9c:	bf00      	nop
 800db9e:	bf00      	nop
 800dba0:	e7fd      	b.n	800db9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dba2:	f000 fee9 	bl	800e978 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dba6:	4b39      	ldr	r3, [pc, #228]	@ (800dc8c <xTaskResumeAll+0x118>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	4a37      	ldr	r2, [pc, #220]	@ (800dc8c <xTaskResumeAll+0x118>)
 800dbae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbb0:	4b36      	ldr	r3, [pc, #216]	@ (800dc8c <xTaskResumeAll+0x118>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d161      	bne.n	800dc7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbb8:	4b35      	ldr	r3, [pc, #212]	@ (800dc90 <xTaskResumeAll+0x11c>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d05d      	beq.n	800dc7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbc0:	e02e      	b.n	800dc20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbc2:	4b34      	ldr	r3, [pc, #208]	@ (800dc94 <xTaskResumeAll+0x120>)
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3318      	adds	r3, #24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fe ffba 	bl	800cb48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe ffb5 	bl	800cb48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	409a      	lsls	r2, r3
 800dbe6:	4b2c      	ldr	r3, [pc, #176]	@ (800dc98 <xTaskResumeAll+0x124>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4313      	orrs	r3, r2
 800dbec:	4a2a      	ldr	r2, [pc, #168]	@ (800dc98 <xTaskResumeAll+0x124>)
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4a27      	ldr	r2, [pc, #156]	@ (800dc9c <xTaskResumeAll+0x128>)
 800dbfe:	441a      	add	r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	3304      	adds	r3, #4
 800dc04:	4619      	mov	r1, r3
 800dc06:	4610      	mov	r0, r2
 800dc08:	f7fe ff41 	bl	800ca8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc10:	4b23      	ldr	r3, [pc, #140]	@ (800dca0 <xTaskResumeAll+0x12c>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d302      	bcc.n	800dc20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc1a:	4b22      	ldr	r3, [pc, #136]	@ (800dca4 <xTaskResumeAll+0x130>)
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc20:	4b1c      	ldr	r3, [pc, #112]	@ (800dc94 <xTaskResumeAll+0x120>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1cc      	bne.n	800dbc2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d001      	beq.n	800dc32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc2e:	f000 fb29 	bl	800e284 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc32:	4b1d      	ldr	r3, [pc, #116]	@ (800dca8 <xTaskResumeAll+0x134>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d010      	beq.n	800dc60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc3e:	f000 f837 	bl	800dcb0 <xTaskIncrementTick>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d002      	beq.n	800dc4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc48:	4b16      	ldr	r3, [pc, #88]	@ (800dca4 <xTaskResumeAll+0x130>)
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	3b01      	subs	r3, #1
 800dc52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1f1      	bne.n	800dc3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc5a:	4b13      	ldr	r3, [pc, #76]	@ (800dca8 <xTaskResumeAll+0x134>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc60:	4b10      	ldr	r3, [pc, #64]	@ (800dca4 <xTaskResumeAll+0x130>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d009      	beq.n	800dc7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800dcac <xTaskResumeAll+0x138>)
 800dc6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc7c:	f000 feae 	bl	800e9dc <vPortExitCritical>

	return xAlreadyYielded;
 800dc80:	68bb      	ldr	r3, [r7, #8]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	2000179c 	.word	0x2000179c
 800dc90:	20001774 	.word	0x20001774
 800dc94:	20001734 	.word	0x20001734
 800dc98:	2000177c 	.word	0x2000177c
 800dc9c:	20001678 	.word	0x20001678
 800dca0:	20001674 	.word	0x20001674
 800dca4:	20001788 	.word	0x20001788
 800dca8:	20001784 	.word	0x20001784
 800dcac:	e000ed04 	.word	0xe000ed04

0800dcb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b086      	sub	sp, #24
 800dcb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcba:	4b4f      	ldr	r3, [pc, #316]	@ (800ddf8 <xTaskIncrementTick+0x148>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f040 808f 	bne.w	800dde2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dcc4:	4b4d      	ldr	r3, [pc, #308]	@ (800ddfc <xTaskIncrementTick+0x14c>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dccc:	4a4b      	ldr	r2, [pc, #300]	@ (800ddfc <xTaskIncrementTick+0x14c>)
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d121      	bne.n	800dd1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dcd8:	4b49      	ldr	r3, [pc, #292]	@ (800de00 <xTaskIncrementTick+0x150>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00b      	beq.n	800dcfa <xTaskIncrementTick+0x4a>
	__asm volatile
 800dce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	603b      	str	r3, [r7, #0]
}
 800dcf4:	bf00      	nop
 800dcf6:	bf00      	nop
 800dcf8:	e7fd      	b.n	800dcf6 <xTaskIncrementTick+0x46>
 800dcfa:	4b41      	ldr	r3, [pc, #260]	@ (800de00 <xTaskIncrementTick+0x150>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	4b40      	ldr	r3, [pc, #256]	@ (800de04 <xTaskIncrementTick+0x154>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a3e      	ldr	r2, [pc, #248]	@ (800de00 <xTaskIncrementTick+0x150>)
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	4a3e      	ldr	r2, [pc, #248]	@ (800de04 <xTaskIncrementTick+0x154>)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6013      	str	r3, [r2, #0]
 800dd0e:	4b3e      	ldr	r3, [pc, #248]	@ (800de08 <xTaskIncrementTick+0x158>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	3301      	adds	r3, #1
 800dd14:	4a3c      	ldr	r2, [pc, #240]	@ (800de08 <xTaskIncrementTick+0x158>)
 800dd16:	6013      	str	r3, [r2, #0]
 800dd18:	f000 fab4 	bl	800e284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd1c:	4b3b      	ldr	r3, [pc, #236]	@ (800de0c <xTaskIncrementTick+0x15c>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	693a      	ldr	r2, [r7, #16]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d348      	bcc.n	800ddb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd26:	4b36      	ldr	r3, [pc, #216]	@ (800de00 <xTaskIncrementTick+0x150>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d104      	bne.n	800dd3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd30:	4b36      	ldr	r3, [pc, #216]	@ (800de0c <xTaskIncrementTick+0x15c>)
 800dd32:	f04f 32ff 	mov.w	r2, #4294967295
 800dd36:	601a      	str	r2, [r3, #0]
					break;
 800dd38:	e03e      	b.n	800ddb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd3a:	4b31      	ldr	r3, [pc, #196]	@ (800de00 <xTaskIncrementTick+0x150>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd4a:	693a      	ldr	r2, [r7, #16]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d203      	bcs.n	800dd5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd52:	4a2e      	ldr	r2, [pc, #184]	@ (800de0c <xTaskIncrementTick+0x15c>)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd58:	e02e      	b.n	800ddb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fe fef2 	bl	800cb48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d004      	beq.n	800dd76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	3318      	adds	r3, #24
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fe fee9 	bl	800cb48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	409a      	lsls	r2, r3
 800dd7e:	4b24      	ldr	r3, [pc, #144]	@ (800de10 <xTaskIncrementTick+0x160>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	4a22      	ldr	r2, [pc, #136]	@ (800de10 <xTaskIncrementTick+0x160>)
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4a1f      	ldr	r2, [pc, #124]	@ (800de14 <xTaskIncrementTick+0x164>)
 800dd96:	441a      	add	r2, r3
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	4610      	mov	r0, r2
 800dda0:	f7fe fe75 	bl	800ca8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dda8:	4b1b      	ldr	r3, [pc, #108]	@ (800de18 <xTaskIncrementTick+0x168>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d3b9      	bcc.n	800dd26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddb6:	e7b6      	b.n	800dd26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddb8:	4b17      	ldr	r3, [pc, #92]	@ (800de18 <xTaskIncrementTick+0x168>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddbe:	4915      	ldr	r1, [pc, #84]	@ (800de14 <xTaskIncrementTick+0x164>)
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4413      	add	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	440b      	add	r3, r1
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d901      	bls.n	800ddd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ddd4:	4b11      	ldr	r3, [pc, #68]	@ (800de1c <xTaskIncrementTick+0x16c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d007      	beq.n	800ddec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dddc:	2301      	movs	r3, #1
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	e004      	b.n	800ddec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dde2:	4b0f      	ldr	r3, [pc, #60]	@ (800de20 <xTaskIncrementTick+0x170>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3301      	adds	r3, #1
 800dde8:	4a0d      	ldr	r2, [pc, #52]	@ (800de20 <xTaskIncrementTick+0x170>)
 800ddea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ddec:	697b      	ldr	r3, [r7, #20]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3718      	adds	r7, #24
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	2000179c 	.word	0x2000179c
 800ddfc:	20001778 	.word	0x20001778
 800de00:	2000172c 	.word	0x2000172c
 800de04:	20001730 	.word	0x20001730
 800de08:	2000178c 	.word	0x2000178c
 800de0c:	20001794 	.word	0x20001794
 800de10:	2000177c 	.word	0x2000177c
 800de14:	20001678 	.word	0x20001678
 800de18:	20001674 	.word	0x20001674
 800de1c:	20001788 	.word	0x20001788
 800de20:	20001784 	.word	0x20001784

0800de24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de24:	b480      	push	{r7}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de2a:	4b2a      	ldr	r3, [pc, #168]	@ (800ded4 <vTaskSwitchContext+0xb0>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d003      	beq.n	800de3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de32:	4b29      	ldr	r3, [pc, #164]	@ (800ded8 <vTaskSwitchContext+0xb4>)
 800de34:	2201      	movs	r2, #1
 800de36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de38:	e045      	b.n	800dec6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800de3a:	4b27      	ldr	r3, [pc, #156]	@ (800ded8 <vTaskSwitchContext+0xb4>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de40:	4b26      	ldr	r3, [pc, #152]	@ (800dedc <vTaskSwitchContext+0xb8>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	fab3 f383 	clz	r3, r3
 800de4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800de4e:	7afb      	ldrb	r3, [r7, #11]
 800de50:	f1c3 031f 	rsb	r3, r3, #31
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	4922      	ldr	r1, [pc, #136]	@ (800dee0 <vTaskSwitchContext+0xbc>)
 800de58:	697a      	ldr	r2, [r7, #20]
 800de5a:	4613      	mov	r3, r2
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4413      	add	r3, r2
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	440b      	add	r3, r1
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10b      	bne.n	800de82 <vTaskSwitchContext+0x5e>
	__asm volatile
 800de6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
 800de7a:	607b      	str	r3, [r7, #4]
}
 800de7c:	bf00      	nop
 800de7e:	bf00      	nop
 800de80:	e7fd      	b.n	800de7e <vTaskSwitchContext+0x5a>
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	4613      	mov	r3, r2
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	4413      	add	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	4a14      	ldr	r2, [pc, #80]	@ (800dee0 <vTaskSwitchContext+0xbc>)
 800de8e:	4413      	add	r3, r2
 800de90:	613b      	str	r3, [r7, #16]
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	605a      	str	r2, [r3, #4]
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	685a      	ldr	r2, [r3, #4]
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	3308      	adds	r3, #8
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d104      	bne.n	800deb2 <vTaskSwitchContext+0x8e>
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	605a      	str	r2, [r3, #4]
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	4a0a      	ldr	r2, [pc, #40]	@ (800dee4 <vTaskSwitchContext+0xc0>)
 800deba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800debc:	4b09      	ldr	r3, [pc, #36]	@ (800dee4 <vTaskSwitchContext+0xc0>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	334c      	adds	r3, #76	@ 0x4c
 800dec2:	4a09      	ldr	r2, [pc, #36]	@ (800dee8 <vTaskSwitchContext+0xc4>)
 800dec4:	6013      	str	r3, [r2, #0]
}
 800dec6:	bf00      	nop
 800dec8:	371c      	adds	r7, #28
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	2000179c 	.word	0x2000179c
 800ded8:	20001788 	.word	0x20001788
 800dedc:	2000177c 	.word	0x2000177c
 800dee0:	20001678 	.word	0x20001678
 800dee4:	20001674 	.word	0x20001674
 800dee8:	200002e0 	.word	0x200002e0

0800deec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10b      	bne.n	800df14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	60fb      	str	r3, [r7, #12]
}
 800df0e:	bf00      	nop
 800df10:	bf00      	nop
 800df12:	e7fd      	b.n	800df10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df14:	4b07      	ldr	r3, [pc, #28]	@ (800df34 <vTaskPlaceOnEventList+0x48>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	3318      	adds	r3, #24
 800df1a:	4619      	mov	r1, r3
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7fe fdda 	bl	800cad6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df22:	2101      	movs	r1, #1
 800df24:	6838      	ldr	r0, [r7, #0]
 800df26:	f000 fb8d 	bl	800e644 <prvAddCurrentTaskToDelayedList>
}
 800df2a:	bf00      	nop
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20001674 	.word	0x20001674

0800df38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d10b      	bne.n	800df66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	60fb      	str	r3, [r7, #12]
}
 800df60:	bf00      	nop
 800df62:	bf00      	nop
 800df64:	e7fd      	b.n	800df62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	3318      	adds	r3, #24
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe fdec 	bl	800cb48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df70:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe8 <xTaskRemoveFromEventList+0xb0>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d11c      	bne.n	800dfb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	3304      	adds	r3, #4
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fe fde3 	bl	800cb48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df86:	2201      	movs	r2, #1
 800df88:	409a      	lsls	r2, r3
 800df8a:	4b18      	ldr	r3, [pc, #96]	@ (800dfec <xTaskRemoveFromEventList+0xb4>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4313      	orrs	r3, r2
 800df90:	4a16      	ldr	r2, [pc, #88]	@ (800dfec <xTaskRemoveFromEventList+0xb4>)
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df98:	4613      	mov	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4a13      	ldr	r2, [pc, #76]	@ (800dff0 <xTaskRemoveFromEventList+0xb8>)
 800dfa2:	441a      	add	r2, r3
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	4610      	mov	r0, r2
 800dfac:	f7fe fd6f 	bl	800ca8e <vListInsertEnd>
 800dfb0:	e005      	b.n	800dfbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	3318      	adds	r3, #24
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	480e      	ldr	r0, [pc, #56]	@ (800dff4 <xTaskRemoveFromEventList+0xbc>)
 800dfba:	f7fe fd68 	bl	800ca8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfc2:	4b0d      	ldr	r3, [pc, #52]	@ (800dff8 <xTaskRemoveFromEventList+0xc0>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d905      	bls.n	800dfd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dfd0:	4b0a      	ldr	r3, [pc, #40]	@ (800dffc <xTaskRemoveFromEventList+0xc4>)
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	e001      	b.n	800dfdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dfdc:	697b      	ldr	r3, [r7, #20]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3718      	adds	r7, #24
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	2000179c 	.word	0x2000179c
 800dfec:	2000177c 	.word	0x2000177c
 800dff0:	20001678 	.word	0x20001678
 800dff4:	20001734 	.word	0x20001734
 800dff8:	20001674 	.word	0x20001674
 800dffc:	20001788 	.word	0x20001788

0800e000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e008:	4b06      	ldr	r3, [pc, #24]	@ (800e024 <vTaskInternalSetTimeOutState+0x24>)
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e010:	4b05      	ldr	r3, [pc, #20]	@ (800e028 <vTaskInternalSetTimeOutState+0x28>)
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	605a      	str	r2, [r3, #4]
}
 800e018:	bf00      	nop
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	2000178c 	.word	0x2000178c
 800e028:	20001778 	.word	0x20001778

0800e02c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b088      	sub	sp, #32
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d10b      	bne.n	800e054 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e040:	f383 8811 	msr	BASEPRI, r3
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	613b      	str	r3, [r7, #16]
}
 800e04e:	bf00      	nop
 800e050:	bf00      	nop
 800e052:	e7fd      	b.n	800e050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10b      	bne.n	800e072 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	60fb      	str	r3, [r7, #12]
}
 800e06c:	bf00      	nop
 800e06e:	bf00      	nop
 800e070:	e7fd      	b.n	800e06e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e072:	f000 fc81 	bl	800e978 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e076:	4b1d      	ldr	r3, [pc, #116]	@ (800e0ec <xTaskCheckForTimeOut+0xc0>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	69ba      	ldr	r2, [r7, #24]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e08e:	d102      	bne.n	800e096 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e090:	2300      	movs	r3, #0
 800e092:	61fb      	str	r3, [r7, #28]
 800e094:	e023      	b.n	800e0de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	4b15      	ldr	r3, [pc, #84]	@ (800e0f0 <xTaskCheckForTimeOut+0xc4>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d007      	beq.n	800e0b2 <xTaskCheckForTimeOut+0x86>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	69ba      	ldr	r2, [r7, #24]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d302      	bcc.n	800e0b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	61fb      	str	r3, [r7, #28]
 800e0b0:	e015      	b.n	800e0de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	697a      	ldr	r2, [r7, #20]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d20b      	bcs.n	800e0d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	1ad2      	subs	r2, r2, r3
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7ff ff99 	bl	800e000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	61fb      	str	r3, [r7, #28]
 800e0d2:	e004      	b.n	800e0de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e0de:	f000 fc7d 	bl	800e9dc <vPortExitCritical>

	return xReturn;
 800e0e2:	69fb      	ldr	r3, [r7, #28]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	20001778 	.word	0x20001778
 800e0f0:	2000178c 	.word	0x2000178c

0800e0f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e0f8:	4b03      	ldr	r3, [pc, #12]	@ (800e108 <vTaskMissedYield+0x14>)
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	601a      	str	r2, [r3, #0]
}
 800e0fe:	bf00      	nop
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr
 800e108:	20001788 	.word	0x20001788

0800e10c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e114:	f000 f852 	bl	800e1bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e118:	4b06      	ldr	r3, [pc, #24]	@ (800e134 <prvIdleTask+0x28>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d9f9      	bls.n	800e114 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e120:	4b05      	ldr	r3, [pc, #20]	@ (800e138 <prvIdleTask+0x2c>)
 800e122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e126:	601a      	str	r2, [r3, #0]
 800e128:	f3bf 8f4f 	dsb	sy
 800e12c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e130:	e7f0      	b.n	800e114 <prvIdleTask+0x8>
 800e132:	bf00      	nop
 800e134:	20001678 	.word	0x20001678
 800e138:	e000ed04 	.word	0xe000ed04

0800e13c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e142:	2300      	movs	r3, #0
 800e144:	607b      	str	r3, [r7, #4]
 800e146:	e00c      	b.n	800e162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	4613      	mov	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	4a12      	ldr	r2, [pc, #72]	@ (800e19c <prvInitialiseTaskLists+0x60>)
 800e154:	4413      	add	r3, r2
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe fc6c 	bl	800ca34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3301      	adds	r3, #1
 800e160:	607b      	str	r3, [r7, #4]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b06      	cmp	r3, #6
 800e166:	d9ef      	bls.n	800e148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e168:	480d      	ldr	r0, [pc, #52]	@ (800e1a0 <prvInitialiseTaskLists+0x64>)
 800e16a:	f7fe fc63 	bl	800ca34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e16e:	480d      	ldr	r0, [pc, #52]	@ (800e1a4 <prvInitialiseTaskLists+0x68>)
 800e170:	f7fe fc60 	bl	800ca34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e174:	480c      	ldr	r0, [pc, #48]	@ (800e1a8 <prvInitialiseTaskLists+0x6c>)
 800e176:	f7fe fc5d 	bl	800ca34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e17a:	480c      	ldr	r0, [pc, #48]	@ (800e1ac <prvInitialiseTaskLists+0x70>)
 800e17c:	f7fe fc5a 	bl	800ca34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e180:	480b      	ldr	r0, [pc, #44]	@ (800e1b0 <prvInitialiseTaskLists+0x74>)
 800e182:	f7fe fc57 	bl	800ca34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e186:	4b0b      	ldr	r3, [pc, #44]	@ (800e1b4 <prvInitialiseTaskLists+0x78>)
 800e188:	4a05      	ldr	r2, [pc, #20]	@ (800e1a0 <prvInitialiseTaskLists+0x64>)
 800e18a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e18c:	4b0a      	ldr	r3, [pc, #40]	@ (800e1b8 <prvInitialiseTaskLists+0x7c>)
 800e18e:	4a05      	ldr	r2, [pc, #20]	@ (800e1a4 <prvInitialiseTaskLists+0x68>)
 800e190:	601a      	str	r2, [r3, #0]
}
 800e192:	bf00      	nop
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	20001678 	.word	0x20001678
 800e1a0:	20001704 	.word	0x20001704
 800e1a4:	20001718 	.word	0x20001718
 800e1a8:	20001734 	.word	0x20001734
 800e1ac:	20001748 	.word	0x20001748
 800e1b0:	20001760 	.word	0x20001760
 800e1b4:	2000172c 	.word	0x2000172c
 800e1b8:	20001730 	.word	0x20001730

0800e1bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1c2:	e019      	b.n	800e1f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e1c4:	f000 fbd8 	bl	800e978 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1c8:	4b10      	ldr	r3, [pc, #64]	@ (800e20c <prvCheckTasksWaitingTermination+0x50>)
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fe fcb7 	bl	800cb48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e1da:	4b0d      	ldr	r3, [pc, #52]	@ (800e210 <prvCheckTasksWaitingTermination+0x54>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	4a0b      	ldr	r2, [pc, #44]	@ (800e210 <prvCheckTasksWaitingTermination+0x54>)
 800e1e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e214 <prvCheckTasksWaitingTermination+0x58>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	4a0a      	ldr	r2, [pc, #40]	@ (800e214 <prvCheckTasksWaitingTermination+0x58>)
 800e1ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e1ee:	f000 fbf5 	bl	800e9dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 f810 	bl	800e218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1f8:	4b06      	ldr	r3, [pc, #24]	@ (800e214 <prvCheckTasksWaitingTermination+0x58>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e1      	bne.n	800e1c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e200:	bf00      	nop
 800e202:	bf00      	nop
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	20001748 	.word	0x20001748
 800e210:	20001774 	.word	0x20001774
 800e214:	2000175c 	.word	0x2000175c

0800e218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	334c      	adds	r3, #76	@ 0x4c
 800e224:	4618      	mov	r0, r3
 800e226:	f001 f9e9 	bl	800f5fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e230:	2b00      	cmp	r3, #0
 800e232:	d108      	bne.n	800e246 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e238:	4618      	mov	r0, r3
 800e23a:	f000 fd8d 	bl	800ed58 <vPortFree>
				vPortFree( pxTCB );
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fd8a 	bl	800ed58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e244:	e019      	b.n	800e27a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d103      	bne.n	800e258 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 fd81 	bl	800ed58 <vPortFree>
	}
 800e256:	e010      	b.n	800e27a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d00b      	beq.n	800e27a <prvDeleteTCB+0x62>
	__asm volatile
 800e262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	60fb      	str	r3, [r7, #12]
}
 800e274:	bf00      	nop
 800e276:	bf00      	nop
 800e278:	e7fd      	b.n	800e276 <prvDeleteTCB+0x5e>
	}
 800e27a:	bf00      	nop
 800e27c:	3710      	adds	r7, #16
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
	...

0800e284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e28a:	4b0c      	ldr	r3, [pc, #48]	@ (800e2bc <prvResetNextTaskUnblockTime+0x38>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d104      	bne.n	800e29e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e294:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c0 <prvResetNextTaskUnblockTime+0x3c>)
 800e296:	f04f 32ff 	mov.w	r2, #4294967295
 800e29a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e29c:	e008      	b.n	800e2b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e29e:	4b07      	ldr	r3, [pc, #28]	@ (800e2bc <prvResetNextTaskUnblockTime+0x38>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	4a04      	ldr	r2, [pc, #16]	@ (800e2c0 <prvResetNextTaskUnblockTime+0x3c>)
 800e2ae:	6013      	str	r3, [r2, #0]
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr
 800e2bc:	2000172c 	.word	0x2000172c
 800e2c0:	20001794 	.word	0x20001794

0800e2c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f8 <xTaskGetSchedulerState+0x34>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d102      	bne.n	800e2d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	607b      	str	r3, [r7, #4]
 800e2d6:	e008      	b.n	800e2ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2d8:	4b08      	ldr	r3, [pc, #32]	@ (800e2fc <xTaskGetSchedulerState+0x38>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d102      	bne.n	800e2e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	607b      	str	r3, [r7, #4]
 800e2e4:	e001      	b.n	800e2ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e2ea:	687b      	ldr	r3, [r7, #4]
	}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	20001780 	.word	0x20001780
 800e2fc:	2000179c 	.word	0x2000179c

0800e300 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e30c:	2300      	movs	r3, #0
 800e30e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d05e      	beq.n	800e3d4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e31a:	4b31      	ldr	r3, [pc, #196]	@ (800e3e0 <xTaskPriorityInherit+0xe0>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e320:	429a      	cmp	r2, r3
 800e322:	d24e      	bcs.n	800e3c2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	db06      	blt.n	800e33a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e32c:	4b2c      	ldr	r3, [pc, #176]	@ (800e3e0 <xTaskPriorityInherit+0xe0>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e332:	f1c3 0207 	rsb	r2, r3, #7
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	6959      	ldr	r1, [r3, #20]
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e342:	4613      	mov	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4413      	add	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4a26      	ldr	r2, [pc, #152]	@ (800e3e4 <xTaskPriorityInherit+0xe4>)
 800e34c:	4413      	add	r3, r2
 800e34e:	4299      	cmp	r1, r3
 800e350:	d12f      	bne.n	800e3b2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	3304      	adds	r3, #4
 800e356:	4618      	mov	r0, r3
 800e358:	f7fe fbf6 	bl	800cb48 <uxListRemove>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10a      	bne.n	800e378 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e366:	2201      	movs	r2, #1
 800e368:	fa02 f303 	lsl.w	r3, r2, r3
 800e36c:	43da      	mvns	r2, r3
 800e36e:	4b1e      	ldr	r3, [pc, #120]	@ (800e3e8 <xTaskPriorityInherit+0xe8>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4013      	ands	r3, r2
 800e374:	4a1c      	ldr	r2, [pc, #112]	@ (800e3e8 <xTaskPriorityInherit+0xe8>)
 800e376:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e378:	4b19      	ldr	r3, [pc, #100]	@ (800e3e0 <xTaskPriorityInherit+0xe0>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e386:	2201      	movs	r2, #1
 800e388:	409a      	lsls	r2, r3
 800e38a:	4b17      	ldr	r3, [pc, #92]	@ (800e3e8 <xTaskPriorityInherit+0xe8>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4313      	orrs	r3, r2
 800e390:	4a15      	ldr	r2, [pc, #84]	@ (800e3e8 <xTaskPriorityInherit+0xe8>)
 800e392:	6013      	str	r3, [r2, #0]
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e398:	4613      	mov	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4413      	add	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4a10      	ldr	r2, [pc, #64]	@ (800e3e4 <xTaskPriorityInherit+0xe4>)
 800e3a2:	441a      	add	r2, r3
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	4610      	mov	r0, r2
 800e3ac:	f7fe fb6f 	bl	800ca8e <vListInsertEnd>
 800e3b0:	e004      	b.n	800e3bc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e3e0 <xTaskPriorityInherit+0xe0>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	60fb      	str	r3, [r7, #12]
 800e3c0:	e008      	b.n	800e3d4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e3c6:	4b06      	ldr	r3, [pc, #24]	@ (800e3e0 <xTaskPriorityInherit+0xe0>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d201      	bcs.n	800e3d4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
	}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	20001674 	.word	0x20001674
 800e3e4:	20001678 	.word	0x20001678
 800e3e8:	2000177c 	.word	0x2000177c

0800e3ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b086      	sub	sp, #24
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d070      	beq.n	800e4e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e402:	4b3b      	ldr	r3, [pc, #236]	@ (800e4f0 <xTaskPriorityDisinherit+0x104>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d00b      	beq.n	800e424 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	60fb      	str	r3, [r7, #12]
}
 800e41e:	bf00      	nop
 800e420:	bf00      	nop
 800e422:	e7fd      	b.n	800e420 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10b      	bne.n	800e444 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	60bb      	str	r3, [r7, #8]
}
 800e43e:	bf00      	nop
 800e440:	bf00      	nop
 800e442:	e7fd      	b.n	800e440 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e448:	1e5a      	subs	r2, r3, #1
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e456:	429a      	cmp	r2, r3
 800e458:	d044      	beq.n	800e4e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d140      	bne.n	800e4e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	3304      	adds	r3, #4
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe fb6e 	bl	800cb48 <uxListRemove>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d115      	bne.n	800e49e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e476:	491f      	ldr	r1, [pc, #124]	@ (800e4f4 <xTaskPriorityDisinherit+0x108>)
 800e478:	4613      	mov	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	4413      	add	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	440b      	add	r3, r1
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10a      	bne.n	800e49e <xTaskPriorityDisinherit+0xb2>
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48c:	2201      	movs	r2, #1
 800e48e:	fa02 f303 	lsl.w	r3, r2, r3
 800e492:	43da      	mvns	r2, r3
 800e494:	4b18      	ldr	r3, [pc, #96]	@ (800e4f8 <xTaskPriorityDisinherit+0x10c>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4013      	ands	r3, r2
 800e49a:	4a17      	ldr	r2, [pc, #92]	@ (800e4f8 <xTaskPriorityDisinherit+0x10c>)
 800e49c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4aa:	f1c3 0207 	rsb	r2, r3, #7
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	409a      	lsls	r2, r3
 800e4ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e4f8 <xTaskPriorityDisinherit+0x10c>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	4a0d      	ldr	r2, [pc, #52]	@ (800e4f8 <xTaskPriorityDisinherit+0x10c>)
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	4413      	add	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4a08      	ldr	r2, [pc, #32]	@ (800e4f4 <xTaskPriorityDisinherit+0x108>)
 800e4d2:	441a      	add	r2, r3
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	3304      	adds	r3, #4
 800e4d8:	4619      	mov	r1, r3
 800e4da:	4610      	mov	r0, r2
 800e4dc:	f7fe fad7 	bl	800ca8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4e4:	697b      	ldr	r3, [r7, #20]
	}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3718      	adds	r7, #24
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	20001674 	.word	0x20001674
 800e4f4:	20001678 	.word	0x20001678
 800e4f8:	2000177c 	.word	0x2000177c

0800e4fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b088      	sub	sp, #32
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e50a:	2301      	movs	r3, #1
 800e50c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d079      	beq.n	800e608 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10b      	bne.n	800e534 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e520:	f383 8811 	msr	BASEPRI, r3
 800e524:	f3bf 8f6f 	isb	sy
 800e528:	f3bf 8f4f 	dsb	sy
 800e52c:	60fb      	str	r3, [r7, #12]
}
 800e52e:	bf00      	nop
 800e530:	bf00      	nop
 800e532:	e7fd      	b.n	800e530 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d902      	bls.n	800e544 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	61fb      	str	r3, [r7, #28]
 800e542:	e002      	b.n	800e54a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e548:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e54e:	69fa      	ldr	r2, [r7, #28]
 800e550:	429a      	cmp	r2, r3
 800e552:	d059      	beq.n	800e608 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e558:	697a      	ldr	r2, [r7, #20]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d154      	bne.n	800e608 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e55e:	4b2c      	ldr	r3, [pc, #176]	@ (800e610 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	69ba      	ldr	r2, [r7, #24]
 800e564:	429a      	cmp	r2, r3
 800e566:	d10b      	bne.n	800e580 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e56c:	f383 8811 	msr	BASEPRI, r3
 800e570:	f3bf 8f6f 	isb	sy
 800e574:	f3bf 8f4f 	dsb	sy
 800e578:	60bb      	str	r3, [r7, #8]
}
 800e57a:	bf00      	nop
 800e57c:	bf00      	nop
 800e57e:	e7fd      	b.n	800e57c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e584:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	69fa      	ldr	r2, [r7, #28]
 800e58a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	2b00      	cmp	r3, #0
 800e592:	db04      	blt.n	800e59e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	f1c3 0207 	rsb	r2, r3, #7
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	6959      	ldr	r1, [r3, #20]
 800e5a2:	693a      	ldr	r2, [r7, #16]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4413      	add	r3, r2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4a19      	ldr	r2, [pc, #100]	@ (800e614 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e5ae:	4413      	add	r3, r2
 800e5b0:	4299      	cmp	r1, r3
 800e5b2:	d129      	bne.n	800e608 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	3304      	adds	r3, #4
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fe fac5 	bl	800cb48 <uxListRemove>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d10a      	bne.n	800e5da <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ce:	43da      	mvns	r2, r3
 800e5d0:	4b11      	ldr	r3, [pc, #68]	@ (800e618 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4013      	ands	r3, r2
 800e5d6:	4a10      	ldr	r2, [pc, #64]	@ (800e618 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e5d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5de:	2201      	movs	r2, #1
 800e5e0:	409a      	lsls	r2, r3
 800e5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e618 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	4a0b      	ldr	r2, [pc, #44]	@ (800e618 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e5ea:	6013      	str	r3, [r2, #0]
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4413      	add	r3, r2
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	4a06      	ldr	r2, [pc, #24]	@ (800e614 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e5fa:	441a      	add	r2, r3
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	3304      	adds	r3, #4
 800e600:	4619      	mov	r1, r3
 800e602:	4610      	mov	r0, r2
 800e604:	f7fe fa43 	bl	800ca8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e608:	bf00      	nop
 800e60a:	3720      	adds	r7, #32
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20001674 	.word	0x20001674
 800e614:	20001678 	.word	0x20001678
 800e618:	2000177c 	.word	0x2000177c

0800e61c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e61c:	b480      	push	{r7}
 800e61e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e620:	4b07      	ldr	r3, [pc, #28]	@ (800e640 <pvTaskIncrementMutexHeldCount+0x24>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d004      	beq.n	800e632 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e628:	4b05      	ldr	r3, [pc, #20]	@ (800e640 <pvTaskIncrementMutexHeldCount+0x24>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e62e:	3201      	adds	r2, #1
 800e630:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800e632:	4b03      	ldr	r3, [pc, #12]	@ (800e640 <pvTaskIncrementMutexHeldCount+0x24>)
 800e634:	681b      	ldr	r3, [r3, #0]
	}
 800e636:	4618      	mov	r0, r3
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr
 800e640:	20001674 	.word	0x20001674

0800e644 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e64e:	4b29      	ldr	r3, [pc, #164]	@ (800e6f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e654:	4b28      	ldr	r3, [pc, #160]	@ (800e6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	3304      	adds	r3, #4
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fe fa74 	bl	800cb48 <uxListRemove>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10b      	bne.n	800e67e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e666:	4b24      	ldr	r3, [pc, #144]	@ (800e6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66c:	2201      	movs	r2, #1
 800e66e:	fa02 f303 	lsl.w	r3, r2, r3
 800e672:	43da      	mvns	r2, r3
 800e674:	4b21      	ldr	r3, [pc, #132]	@ (800e6fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4013      	ands	r3, r2
 800e67a:	4a20      	ldr	r2, [pc, #128]	@ (800e6fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e67c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e684:	d10a      	bne.n	800e69c <prvAddCurrentTaskToDelayedList+0x58>
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d007      	beq.n	800e69c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e68c:	4b1a      	ldr	r3, [pc, #104]	@ (800e6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3304      	adds	r3, #4
 800e692:	4619      	mov	r1, r3
 800e694:	481a      	ldr	r0, [pc, #104]	@ (800e700 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e696:	f7fe f9fa 	bl	800ca8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e69a:	e026      	b.n	800e6ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6a4:	4b14      	ldr	r3, [pc, #80]	@ (800e6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d209      	bcs.n	800e6c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6b4:	4b13      	ldr	r3, [pc, #76]	@ (800e704 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3304      	adds	r3, #4
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	f7fe fa08 	bl	800cad6 <vListInsert>
}
 800e6c6:	e010      	b.n	800e6ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6c8:	4b0f      	ldr	r3, [pc, #60]	@ (800e708 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	4610      	mov	r0, r2
 800e6d6:	f7fe f9fe 	bl	800cad6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e6da:	4b0c      	ldr	r3, [pc, #48]	@ (800e70c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d202      	bcs.n	800e6ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e6e4:	4a09      	ldr	r2, [pc, #36]	@ (800e70c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6013      	str	r3, [r2, #0]
}
 800e6ea:	bf00      	nop
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20001778 	.word	0x20001778
 800e6f8:	20001674 	.word	0x20001674
 800e6fc:	2000177c 	.word	0x2000177c
 800e700:	20001760 	.word	0x20001760
 800e704:	20001730 	.word	0x20001730
 800e708:	2000172c 	.word	0x2000172c
 800e70c:	20001794 	.word	0x20001794

0800e710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e710:	b480      	push	{r7}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	3b04      	subs	r3, #4
 800e720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	3b04      	subs	r3, #4
 800e72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	f023 0201 	bic.w	r2, r3, #1
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	3b04      	subs	r3, #4
 800e73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e740:	4a0c      	ldr	r2, [pc, #48]	@ (800e774 <pxPortInitialiseStack+0x64>)
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3b14      	subs	r3, #20
 800e74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3b04      	subs	r3, #4
 800e756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f06f 0202 	mvn.w	r2, #2
 800e75e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3b20      	subs	r3, #32
 800e764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e766:	68fb      	ldr	r3, [r7, #12]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3714      	adds	r7, #20
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr
 800e774:	0800e779 	.word	0x0800e779

0800e778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e782:	4b13      	ldr	r3, [pc, #76]	@ (800e7d0 <prvTaskExitError+0x58>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e78a:	d00b      	beq.n	800e7a4 <prvTaskExitError+0x2c>
	__asm volatile
 800e78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e790:	f383 8811 	msr	BASEPRI, r3
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	60fb      	str	r3, [r7, #12]
}
 800e79e:	bf00      	nop
 800e7a0:	bf00      	nop
 800e7a2:	e7fd      	b.n	800e7a0 <prvTaskExitError+0x28>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	60bb      	str	r3, [r7, #8]
}
 800e7b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7b8:	bf00      	nop
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d0fc      	beq.n	800e7ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7c0:	bf00      	nop
 800e7c2:	bf00      	nop
 800e7c4:	3714      	adds	r7, #20
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	200002d0 	.word	0x200002d0
	...

0800e7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e7e0:	4b07      	ldr	r3, [pc, #28]	@ (800e800 <pxCurrentTCBConst2>)
 800e7e2:	6819      	ldr	r1, [r3, #0]
 800e7e4:	6808      	ldr	r0, [r1, #0]
 800e7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ea:	f380 8809 	msr	PSP, r0
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f04f 0000 	mov.w	r0, #0
 800e7f6:	f380 8811 	msr	BASEPRI, r0
 800e7fa:	4770      	bx	lr
 800e7fc:	f3af 8000 	nop.w

0800e800 <pxCurrentTCBConst2>:
 800e800:	20001674 	.word	0x20001674
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e804:	bf00      	nop
 800e806:	bf00      	nop

0800e808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e808:	4808      	ldr	r0, [pc, #32]	@ (800e82c <prvPortStartFirstTask+0x24>)
 800e80a:	6800      	ldr	r0, [r0, #0]
 800e80c:	6800      	ldr	r0, [r0, #0]
 800e80e:	f380 8808 	msr	MSP, r0
 800e812:	f04f 0000 	mov.w	r0, #0
 800e816:	f380 8814 	msr	CONTROL, r0
 800e81a:	b662      	cpsie	i
 800e81c:	b661      	cpsie	f
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	f3bf 8f6f 	isb	sy
 800e826:	df00      	svc	0
 800e828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e82a:	bf00      	nop
 800e82c:	e000ed08 	.word	0xe000ed08

0800e830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b086      	sub	sp, #24
 800e834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e836:	4b47      	ldr	r3, [pc, #284]	@ (800e954 <xPortStartScheduler+0x124>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a47      	ldr	r2, [pc, #284]	@ (800e958 <xPortStartScheduler+0x128>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d10b      	bne.n	800e858 <xPortStartScheduler+0x28>
	__asm volatile
 800e840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	613b      	str	r3, [r7, #16]
}
 800e852:	bf00      	nop
 800e854:	bf00      	nop
 800e856:	e7fd      	b.n	800e854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e858:	4b3e      	ldr	r3, [pc, #248]	@ (800e954 <xPortStartScheduler+0x124>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a3f      	ldr	r2, [pc, #252]	@ (800e95c <xPortStartScheduler+0x12c>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d10b      	bne.n	800e87a <xPortStartScheduler+0x4a>
	__asm volatile
 800e862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e866:	f383 8811 	msr	BASEPRI, r3
 800e86a:	f3bf 8f6f 	isb	sy
 800e86e:	f3bf 8f4f 	dsb	sy
 800e872:	60fb      	str	r3, [r7, #12]
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop
 800e878:	e7fd      	b.n	800e876 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e87a:	4b39      	ldr	r3, [pc, #228]	@ (800e960 <xPortStartScheduler+0x130>)
 800e87c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	b2db      	uxtb	r3, r3
 800e884:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	22ff      	movs	r2, #255	@ 0xff
 800e88a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	b2db      	uxtb	r3, r3
 800e892:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e894:	78fb      	ldrb	r3, [r7, #3]
 800e896:	b2db      	uxtb	r3, r3
 800e898:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e89c:	b2da      	uxtb	r2, r3
 800e89e:	4b31      	ldr	r3, [pc, #196]	@ (800e964 <xPortStartScheduler+0x134>)
 800e8a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8a2:	4b31      	ldr	r3, [pc, #196]	@ (800e968 <xPortStartScheduler+0x138>)
 800e8a4:	2207      	movs	r2, #7
 800e8a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8a8:	e009      	b.n	800e8be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e8aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e968 <xPortStartScheduler+0x138>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e968 <xPortStartScheduler+0x138>)
 800e8b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8b4:	78fb      	ldrb	r3, [r7, #3]
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	005b      	lsls	r3, r3, #1
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8be:	78fb      	ldrb	r3, [r7, #3]
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8c6:	2b80      	cmp	r3, #128	@ 0x80
 800e8c8:	d0ef      	beq.n	800e8aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8ca:	4b27      	ldr	r3, [pc, #156]	@ (800e968 <xPortStartScheduler+0x138>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f1c3 0307 	rsb	r3, r3, #7
 800e8d2:	2b04      	cmp	r3, #4
 800e8d4:	d00b      	beq.n	800e8ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8da:	f383 8811 	msr	BASEPRI, r3
 800e8de:	f3bf 8f6f 	isb	sy
 800e8e2:	f3bf 8f4f 	dsb	sy
 800e8e6:	60bb      	str	r3, [r7, #8]
}
 800e8e8:	bf00      	nop
 800e8ea:	bf00      	nop
 800e8ec:	e7fd      	b.n	800e8ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e8ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e968 <xPortStartScheduler+0x138>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	021b      	lsls	r3, r3, #8
 800e8f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e968 <xPortStartScheduler+0x138>)
 800e8f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e968 <xPortStartScheduler+0x138>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e900:	4a19      	ldr	r2, [pc, #100]	@ (800e968 <xPortStartScheduler+0x138>)
 800e902:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	b2da      	uxtb	r2, r3
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e90c:	4b17      	ldr	r3, [pc, #92]	@ (800e96c <xPortStartScheduler+0x13c>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a16      	ldr	r2, [pc, #88]	@ (800e96c <xPortStartScheduler+0x13c>)
 800e912:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e916:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e918:	4b14      	ldr	r3, [pc, #80]	@ (800e96c <xPortStartScheduler+0x13c>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a13      	ldr	r2, [pc, #76]	@ (800e96c <xPortStartScheduler+0x13c>)
 800e91e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e922:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e924:	f000 f8da 	bl	800eadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e928:	4b11      	ldr	r3, [pc, #68]	@ (800e970 <xPortStartScheduler+0x140>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e92e:	f000 f8f9 	bl	800eb24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e932:	4b10      	ldr	r3, [pc, #64]	@ (800e974 <xPortStartScheduler+0x144>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a0f      	ldr	r2, [pc, #60]	@ (800e974 <xPortStartScheduler+0x144>)
 800e938:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e93c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e93e:	f7ff ff63 	bl	800e808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e942:	f7ff fa6f 	bl	800de24 <vTaskSwitchContext>
	prvTaskExitError();
 800e946:	f7ff ff17 	bl	800e778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	e000ed00 	.word	0xe000ed00
 800e958:	410fc271 	.word	0x410fc271
 800e95c:	410fc270 	.word	0x410fc270
 800e960:	e000e400 	.word	0xe000e400
 800e964:	200017a0 	.word	0x200017a0
 800e968:	200017a4 	.word	0x200017a4
 800e96c:	e000ed20 	.word	0xe000ed20
 800e970:	200002d0 	.word	0x200002d0
 800e974:	e000ef34 	.word	0xe000ef34

0800e978 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	607b      	str	r3, [r7, #4]
}
 800e990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e992:	4b10      	ldr	r3, [pc, #64]	@ (800e9d4 <vPortEnterCritical+0x5c>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	3301      	adds	r3, #1
 800e998:	4a0e      	ldr	r2, [pc, #56]	@ (800e9d4 <vPortEnterCritical+0x5c>)
 800e99a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e99c:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d4 <vPortEnterCritical+0x5c>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d110      	bne.n	800e9c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e9d8 <vPortEnterCritical+0x60>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00b      	beq.n	800e9c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b2:	f383 8811 	msr	BASEPRI, r3
 800e9b6:	f3bf 8f6f 	isb	sy
 800e9ba:	f3bf 8f4f 	dsb	sy
 800e9be:	603b      	str	r3, [r7, #0]
}
 800e9c0:	bf00      	nop
 800e9c2:	bf00      	nop
 800e9c4:	e7fd      	b.n	800e9c2 <vPortEnterCritical+0x4a>
	}
}
 800e9c6:	bf00      	nop
 800e9c8:	370c      	adds	r7, #12
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	200002d0 	.word	0x200002d0
 800e9d8:	e000ed04 	.word	0xe000ed04

0800e9dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e9e2:	4b12      	ldr	r3, [pc, #72]	@ (800ea2c <vPortExitCritical+0x50>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10b      	bne.n	800ea02 <vPortExitCritical+0x26>
	__asm volatile
 800e9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	607b      	str	r3, [r7, #4]
}
 800e9fc:	bf00      	nop
 800e9fe:	bf00      	nop
 800ea00:	e7fd      	b.n	800e9fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ea02:	4b0a      	ldr	r3, [pc, #40]	@ (800ea2c <vPortExitCritical+0x50>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	3b01      	subs	r3, #1
 800ea08:	4a08      	ldr	r2, [pc, #32]	@ (800ea2c <vPortExitCritical+0x50>)
 800ea0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea0c:	4b07      	ldr	r3, [pc, #28]	@ (800ea2c <vPortExitCritical+0x50>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d105      	bne.n	800ea20 <vPortExitCritical+0x44>
 800ea14:	2300      	movs	r3, #0
 800ea16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f383 8811 	msr	BASEPRI, r3
}
 800ea1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea20:	bf00      	nop
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	200002d0 	.word	0x200002d0

0800ea30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea30:	f3ef 8009 	mrs	r0, PSP
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	4b15      	ldr	r3, [pc, #84]	@ (800ea90 <pxCurrentTCBConst>)
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	f01e 0f10 	tst.w	lr, #16
 800ea40:	bf08      	it	eq
 800ea42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4a:	6010      	str	r0, [r2, #0]
 800ea4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ea54:	f380 8811 	msr	BASEPRI, r0
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f7ff f9e0 	bl	800de24 <vTaskSwitchContext>
 800ea64:	f04f 0000 	mov.w	r0, #0
 800ea68:	f380 8811 	msr	BASEPRI, r0
 800ea6c:	bc09      	pop	{r0, r3}
 800ea6e:	6819      	ldr	r1, [r3, #0]
 800ea70:	6808      	ldr	r0, [r1, #0]
 800ea72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea76:	f01e 0f10 	tst.w	lr, #16
 800ea7a:	bf08      	it	eq
 800ea7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea80:	f380 8809 	msr	PSP, r0
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	f3af 8000 	nop.w

0800ea90 <pxCurrentTCBConst>:
 800ea90:	20001674 	.word	0x20001674
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea94:	bf00      	nop
 800ea96:	bf00      	nop

0800ea98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	607b      	str	r3, [r7, #4]
}
 800eab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eab2:	f7ff f8fd 	bl	800dcb0 <xTaskIncrementTick>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d003      	beq.n	800eac4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eabc:	4b06      	ldr	r3, [pc, #24]	@ (800ead8 <SysTick_Handler+0x40>)
 800eabe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eac2:	601a      	str	r2, [r3, #0]
 800eac4:	2300      	movs	r3, #0
 800eac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	f383 8811 	msr	BASEPRI, r3
}
 800eace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	e000ed04 	.word	0xe000ed04

0800eadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eadc:	b480      	push	{r7}
 800eade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eae0:	4b0b      	ldr	r3, [pc, #44]	@ (800eb10 <vPortSetupTimerInterrupt+0x34>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eae6:	4b0b      	ldr	r3, [pc, #44]	@ (800eb14 <vPortSetupTimerInterrupt+0x38>)
 800eae8:	2200      	movs	r2, #0
 800eaea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eaec:	4b0a      	ldr	r3, [pc, #40]	@ (800eb18 <vPortSetupTimerInterrupt+0x3c>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4a0a      	ldr	r2, [pc, #40]	@ (800eb1c <vPortSetupTimerInterrupt+0x40>)
 800eaf2:	fba2 2303 	umull	r2, r3, r2, r3
 800eaf6:	099b      	lsrs	r3, r3, #6
 800eaf8:	4a09      	ldr	r2, [pc, #36]	@ (800eb20 <vPortSetupTimerInterrupt+0x44>)
 800eafa:	3b01      	subs	r3, #1
 800eafc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eafe:	4b04      	ldr	r3, [pc, #16]	@ (800eb10 <vPortSetupTimerInterrupt+0x34>)
 800eb00:	2207      	movs	r2, #7
 800eb02:	601a      	str	r2, [r3, #0]
}
 800eb04:	bf00      	nop
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	e000e010 	.word	0xe000e010
 800eb14:	e000e018 	.word	0xe000e018
 800eb18:	20000004 	.word	0x20000004
 800eb1c:	10624dd3 	.word	0x10624dd3
 800eb20:	e000e014 	.word	0xe000e014

0800eb24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800eb34 <vPortEnableVFP+0x10>
 800eb28:	6801      	ldr	r1, [r0, #0]
 800eb2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800eb2e:	6001      	str	r1, [r0, #0]
 800eb30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb32:	bf00      	nop
 800eb34:	e000ed88 	.word	0xe000ed88

0800eb38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb3e:	f3ef 8305 	mrs	r3, IPSR
 800eb42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b0f      	cmp	r3, #15
 800eb48:	d915      	bls.n	800eb76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb4a:	4a18      	ldr	r2, [pc, #96]	@ (800ebac <vPortValidateInterruptPriority+0x74>)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	4413      	add	r3, r2
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb54:	4b16      	ldr	r3, [pc, #88]	@ (800ebb0 <vPortValidateInterruptPriority+0x78>)
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	7afa      	ldrb	r2, [r7, #11]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d20b      	bcs.n	800eb76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800eb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	607b      	str	r3, [r7, #4]
}
 800eb70:	bf00      	nop
 800eb72:	bf00      	nop
 800eb74:	e7fd      	b.n	800eb72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb76:	4b0f      	ldr	r3, [pc, #60]	@ (800ebb4 <vPortValidateInterruptPriority+0x7c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800eb7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ebb8 <vPortValidateInterruptPriority+0x80>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d90b      	bls.n	800eb9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800eb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb8a:	f383 8811 	msr	BASEPRI, r3
 800eb8e:	f3bf 8f6f 	isb	sy
 800eb92:	f3bf 8f4f 	dsb	sy
 800eb96:	603b      	str	r3, [r7, #0]
}
 800eb98:	bf00      	nop
 800eb9a:	bf00      	nop
 800eb9c:	e7fd      	b.n	800eb9a <vPortValidateInterruptPriority+0x62>
	}
 800eb9e:	bf00      	nop
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	e000e3f0 	.word	0xe000e3f0
 800ebb0:	200017a0 	.word	0x200017a0
 800ebb4:	e000ed0c 	.word	0xe000ed0c
 800ebb8:	200017a4 	.word	0x200017a4

0800ebbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b08a      	sub	sp, #40	@ 0x28
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebc8:	f7fe ffc6 	bl	800db58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebcc:	4b5c      	ldr	r3, [pc, #368]	@ (800ed40 <pvPortMalloc+0x184>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d101      	bne.n	800ebd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebd4:	f000 f924 	bl	800ee20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebd8:	4b5a      	ldr	r3, [pc, #360]	@ (800ed44 <pvPortMalloc+0x188>)
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4013      	ands	r3, r2
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f040 8095 	bne.w	800ed10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d01e      	beq.n	800ec2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ebec:	2208      	movs	r2, #8
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f003 0307 	and.w	r3, r3, #7
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d015      	beq.n	800ec2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f023 0307 	bic.w	r3, r3, #7
 800ec04:	3308      	adds	r3, #8
 800ec06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f003 0307 	and.w	r3, r3, #7
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00b      	beq.n	800ec2a <pvPortMalloc+0x6e>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	617b      	str	r3, [r7, #20]
}
 800ec24:	bf00      	nop
 800ec26:	bf00      	nop
 800ec28:	e7fd      	b.n	800ec26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d06f      	beq.n	800ed10 <pvPortMalloc+0x154>
 800ec30:	4b45      	ldr	r3, [pc, #276]	@ (800ed48 <pvPortMalloc+0x18c>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d86a      	bhi.n	800ed10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec3a:	4b44      	ldr	r3, [pc, #272]	@ (800ed4c <pvPortMalloc+0x190>)
 800ec3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec3e:	4b43      	ldr	r3, [pc, #268]	@ (800ed4c <pvPortMalloc+0x190>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec44:	e004      	b.n	800ec50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ec46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d903      	bls.n	800ec62 <pvPortMalloc+0xa6>
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d1f1      	bne.n	800ec46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec62:	4b37      	ldr	r3, [pc, #220]	@ (800ed40 <pvPortMalloc+0x184>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d051      	beq.n	800ed10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2208      	movs	r2, #8
 800ec72:	4413      	add	r3, r2
 800ec74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	6a3b      	ldr	r3, [r7, #32]
 800ec7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec80:	685a      	ldr	r2, [r3, #4]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	1ad2      	subs	r2, r2, r3
 800ec86:	2308      	movs	r3, #8
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d920      	bls.n	800ecd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4413      	add	r3, r2
 800ec94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	f003 0307 	and.w	r3, r3, #7
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00b      	beq.n	800ecb8 <pvPortMalloc+0xfc>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	613b      	str	r3, [r7, #16]
}
 800ecb2:	bf00      	nop
 800ecb4:	bf00      	nop
 800ecb6:	e7fd      	b.n	800ecb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecba:	685a      	ldr	r2, [r3, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	1ad2      	subs	r2, r2, r3
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ecca:	69b8      	ldr	r0, [r7, #24]
 800eccc:	f000 f90a 	bl	800eee4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ecd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ed48 <pvPortMalloc+0x18c>)
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	1ad3      	subs	r3, r2, r3
 800ecda:	4a1b      	ldr	r2, [pc, #108]	@ (800ed48 <pvPortMalloc+0x18c>)
 800ecdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecde:	4b1a      	ldr	r3, [pc, #104]	@ (800ed48 <pvPortMalloc+0x18c>)
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	4b1b      	ldr	r3, [pc, #108]	@ (800ed50 <pvPortMalloc+0x194>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d203      	bcs.n	800ecf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ecea:	4b17      	ldr	r3, [pc, #92]	@ (800ed48 <pvPortMalloc+0x18c>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	4a18      	ldr	r2, [pc, #96]	@ (800ed50 <pvPortMalloc+0x194>)
 800ecf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ecf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	4b13      	ldr	r3, [pc, #76]	@ (800ed44 <pvPortMalloc+0x188>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	431a      	orrs	r2, r3
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed02:	2200      	movs	r2, #0
 800ed04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ed06:	4b13      	ldr	r3, [pc, #76]	@ (800ed54 <pvPortMalloc+0x198>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	4a11      	ldr	r2, [pc, #68]	@ (800ed54 <pvPortMalloc+0x198>)
 800ed0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed10:	f7fe ff30 	bl	800db74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	f003 0307 	and.w	r3, r3, #7
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00b      	beq.n	800ed36 <pvPortMalloc+0x17a>
	__asm volatile
 800ed1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	60fb      	str	r3, [r7, #12]
}
 800ed30:	bf00      	nop
 800ed32:	bf00      	nop
 800ed34:	e7fd      	b.n	800ed32 <pvPortMalloc+0x176>
	return pvReturn;
 800ed36:	69fb      	ldr	r3, [r7, #28]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3728      	adds	r7, #40	@ 0x28
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}
 800ed40:	200053b0 	.word	0x200053b0
 800ed44:	200053c4 	.word	0x200053c4
 800ed48:	200053b4 	.word	0x200053b4
 800ed4c:	200053a8 	.word	0x200053a8
 800ed50:	200053b8 	.word	0x200053b8
 800ed54:	200053bc 	.word	0x200053bc

0800ed58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b086      	sub	sp, #24
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d04f      	beq.n	800ee0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed6a:	2308      	movs	r3, #8
 800ed6c:	425b      	negs	r3, r3
 800ed6e:	697a      	ldr	r2, [r7, #20]
 800ed70:	4413      	add	r3, r2
 800ed72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	4b25      	ldr	r3, [pc, #148]	@ (800ee14 <vPortFree+0xbc>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4013      	ands	r3, r2
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10b      	bne.n	800ed9e <vPortFree+0x46>
	__asm volatile
 800ed86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	60fb      	str	r3, [r7, #12]
}
 800ed98:	bf00      	nop
 800ed9a:	bf00      	nop
 800ed9c:	e7fd      	b.n	800ed9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00b      	beq.n	800edbe <vPortFree+0x66>
	__asm volatile
 800eda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edaa:	f383 8811 	msr	BASEPRI, r3
 800edae:	f3bf 8f6f 	isb	sy
 800edb2:	f3bf 8f4f 	dsb	sy
 800edb6:	60bb      	str	r3, [r7, #8]
}
 800edb8:	bf00      	nop
 800edba:	bf00      	nop
 800edbc:	e7fd      	b.n	800edba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	685a      	ldr	r2, [r3, #4]
 800edc2:	4b14      	ldr	r3, [pc, #80]	@ (800ee14 <vPortFree+0xbc>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4013      	ands	r3, r2
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d01e      	beq.n	800ee0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d11a      	bne.n	800ee0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ee14 <vPortFree+0xbc>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	43db      	mvns	r3, r3
 800edde:	401a      	ands	r2, r3
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ede4:	f7fe feb8 	bl	800db58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	685a      	ldr	r2, [r3, #4]
 800edec:	4b0a      	ldr	r3, [pc, #40]	@ (800ee18 <vPortFree+0xc0>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4413      	add	r3, r2
 800edf2:	4a09      	ldr	r2, [pc, #36]	@ (800ee18 <vPortFree+0xc0>)
 800edf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edf6:	6938      	ldr	r0, [r7, #16]
 800edf8:	f000 f874 	bl	800eee4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800edfc:	4b07      	ldr	r3, [pc, #28]	@ (800ee1c <vPortFree+0xc4>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3301      	adds	r3, #1
 800ee02:	4a06      	ldr	r2, [pc, #24]	@ (800ee1c <vPortFree+0xc4>)
 800ee04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ee06:	f7fe feb5 	bl	800db74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee0a:	bf00      	nop
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	200053c4 	.word	0x200053c4
 800ee18:	200053b4 	.word	0x200053b4
 800ee1c:	200053c0 	.word	0x200053c0

0800ee20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ee2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee2c:	4b27      	ldr	r3, [pc, #156]	@ (800eecc <prvHeapInit+0xac>)
 800ee2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f003 0307 	and.w	r3, r3, #7
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00c      	beq.n	800ee54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3307      	adds	r3, #7
 800ee3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f023 0307 	bic.w	r3, r3, #7
 800ee46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	4a1f      	ldr	r2, [pc, #124]	@ (800eecc <prvHeapInit+0xac>)
 800ee50:	4413      	add	r3, r2
 800ee52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee58:	4a1d      	ldr	r2, [pc, #116]	@ (800eed0 <prvHeapInit+0xb0>)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee5e:	4b1c      	ldr	r3, [pc, #112]	@ (800eed0 <prvHeapInit+0xb0>)
 800ee60:	2200      	movs	r2, #0
 800ee62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	4413      	add	r3, r2
 800ee6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee6c:	2208      	movs	r2, #8
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	1a9b      	subs	r3, r3, r2
 800ee72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f023 0307 	bic.w	r3, r3, #7
 800ee7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4a15      	ldr	r2, [pc, #84]	@ (800eed4 <prvHeapInit+0xb4>)
 800ee80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee82:	4b14      	ldr	r3, [pc, #80]	@ (800eed4 <prvHeapInit+0xb4>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2200      	movs	r2, #0
 800ee88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee8a:	4b12      	ldr	r3, [pc, #72]	@ (800eed4 <prvHeapInit+0xb4>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	1ad2      	subs	r2, r2, r3
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eea0:	4b0c      	ldr	r3, [pc, #48]	@ (800eed4 <prvHeapInit+0xb4>)
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	4a0a      	ldr	r2, [pc, #40]	@ (800eed8 <prvHeapInit+0xb8>)
 800eeae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	4a09      	ldr	r2, [pc, #36]	@ (800eedc <prvHeapInit+0xbc>)
 800eeb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eeb8:	4b09      	ldr	r3, [pc, #36]	@ (800eee0 <prvHeapInit+0xc0>)
 800eeba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eebe:	601a      	str	r2, [r3, #0]
}
 800eec0:	bf00      	nop
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	200017a8 	.word	0x200017a8
 800eed0:	200053a8 	.word	0x200053a8
 800eed4:	200053b0 	.word	0x200053b0
 800eed8:	200053b8 	.word	0x200053b8
 800eedc:	200053b4 	.word	0x200053b4
 800eee0:	200053c4 	.word	0x200053c4

0800eee4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eeec:	4b28      	ldr	r3, [pc, #160]	@ (800ef90 <prvInsertBlockIntoFreeList+0xac>)
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e002      	b.n	800eef8 <prvInsertBlockIntoFreeList+0x14>
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d8f7      	bhi.n	800eef2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d108      	bne.n	800ef26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	685a      	ldr	r2, [r3, #4]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	441a      	add	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	441a      	add	r2, r3
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d118      	bne.n	800ef6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	4b15      	ldr	r3, [pc, #84]	@ (800ef94 <prvInsertBlockIntoFreeList+0xb0>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d00d      	beq.n	800ef62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	685a      	ldr	r2, [r3, #4]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	441a      	add	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	e008      	b.n	800ef74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef62:	4b0c      	ldr	r3, [pc, #48]	@ (800ef94 <prvInsertBlockIntoFreeList+0xb0>)
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	601a      	str	r2, [r3, #0]
 800ef6a:	e003      	b.n	800ef74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d002      	beq.n	800ef82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef82:	bf00      	nop
 800ef84:	3714      	adds	r7, #20
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	200053a8 	.word	0x200053a8
 800ef94:	200053b0 	.word	0x200053b0

0800ef98 <sbrk_aligned>:
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	4e0f      	ldr	r6, [pc, #60]	@ (800efd8 <sbrk_aligned+0x40>)
 800ef9c:	460c      	mov	r4, r1
 800ef9e:	6831      	ldr	r1, [r6, #0]
 800efa0:	4605      	mov	r5, r0
 800efa2:	b911      	cbnz	r1, 800efaa <sbrk_aligned+0x12>
 800efa4:	f000 fba4 	bl	800f6f0 <_sbrk_r>
 800efa8:	6030      	str	r0, [r6, #0]
 800efaa:	4621      	mov	r1, r4
 800efac:	4628      	mov	r0, r5
 800efae:	f000 fb9f 	bl	800f6f0 <_sbrk_r>
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	d103      	bne.n	800efbe <sbrk_aligned+0x26>
 800efb6:	f04f 34ff 	mov.w	r4, #4294967295
 800efba:	4620      	mov	r0, r4
 800efbc:	bd70      	pop	{r4, r5, r6, pc}
 800efbe:	1cc4      	adds	r4, r0, #3
 800efc0:	f024 0403 	bic.w	r4, r4, #3
 800efc4:	42a0      	cmp	r0, r4
 800efc6:	d0f8      	beq.n	800efba <sbrk_aligned+0x22>
 800efc8:	1a21      	subs	r1, r4, r0
 800efca:	4628      	mov	r0, r5
 800efcc:	f000 fb90 	bl	800f6f0 <_sbrk_r>
 800efd0:	3001      	adds	r0, #1
 800efd2:	d1f2      	bne.n	800efba <sbrk_aligned+0x22>
 800efd4:	e7ef      	b.n	800efb6 <sbrk_aligned+0x1e>
 800efd6:	bf00      	nop
 800efd8:	200053c8 	.word	0x200053c8

0800efdc <_malloc_r>:
 800efdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe0:	1ccd      	adds	r5, r1, #3
 800efe2:	f025 0503 	bic.w	r5, r5, #3
 800efe6:	3508      	adds	r5, #8
 800efe8:	2d0c      	cmp	r5, #12
 800efea:	bf38      	it	cc
 800efec:	250c      	movcc	r5, #12
 800efee:	2d00      	cmp	r5, #0
 800eff0:	4606      	mov	r6, r0
 800eff2:	db01      	blt.n	800eff8 <_malloc_r+0x1c>
 800eff4:	42a9      	cmp	r1, r5
 800eff6:	d904      	bls.n	800f002 <_malloc_r+0x26>
 800eff8:	230c      	movs	r3, #12
 800effa:	6033      	str	r3, [r6, #0]
 800effc:	2000      	movs	r0, #0
 800effe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f0d8 <_malloc_r+0xfc>
 800f006:	f000 f869 	bl	800f0dc <__malloc_lock>
 800f00a:	f8d8 3000 	ldr.w	r3, [r8]
 800f00e:	461c      	mov	r4, r3
 800f010:	bb44      	cbnz	r4, 800f064 <_malloc_r+0x88>
 800f012:	4629      	mov	r1, r5
 800f014:	4630      	mov	r0, r6
 800f016:	f7ff ffbf 	bl	800ef98 <sbrk_aligned>
 800f01a:	1c43      	adds	r3, r0, #1
 800f01c:	4604      	mov	r4, r0
 800f01e:	d158      	bne.n	800f0d2 <_malloc_r+0xf6>
 800f020:	f8d8 4000 	ldr.w	r4, [r8]
 800f024:	4627      	mov	r7, r4
 800f026:	2f00      	cmp	r7, #0
 800f028:	d143      	bne.n	800f0b2 <_malloc_r+0xd6>
 800f02a:	2c00      	cmp	r4, #0
 800f02c:	d04b      	beq.n	800f0c6 <_malloc_r+0xea>
 800f02e:	6823      	ldr	r3, [r4, #0]
 800f030:	4639      	mov	r1, r7
 800f032:	4630      	mov	r0, r6
 800f034:	eb04 0903 	add.w	r9, r4, r3
 800f038:	f000 fb5a 	bl	800f6f0 <_sbrk_r>
 800f03c:	4581      	cmp	r9, r0
 800f03e:	d142      	bne.n	800f0c6 <_malloc_r+0xea>
 800f040:	6821      	ldr	r1, [r4, #0]
 800f042:	1a6d      	subs	r5, r5, r1
 800f044:	4629      	mov	r1, r5
 800f046:	4630      	mov	r0, r6
 800f048:	f7ff ffa6 	bl	800ef98 <sbrk_aligned>
 800f04c:	3001      	adds	r0, #1
 800f04e:	d03a      	beq.n	800f0c6 <_malloc_r+0xea>
 800f050:	6823      	ldr	r3, [r4, #0]
 800f052:	442b      	add	r3, r5
 800f054:	6023      	str	r3, [r4, #0]
 800f056:	f8d8 3000 	ldr.w	r3, [r8]
 800f05a:	685a      	ldr	r2, [r3, #4]
 800f05c:	bb62      	cbnz	r2, 800f0b8 <_malloc_r+0xdc>
 800f05e:	f8c8 7000 	str.w	r7, [r8]
 800f062:	e00f      	b.n	800f084 <_malloc_r+0xa8>
 800f064:	6822      	ldr	r2, [r4, #0]
 800f066:	1b52      	subs	r2, r2, r5
 800f068:	d420      	bmi.n	800f0ac <_malloc_r+0xd0>
 800f06a:	2a0b      	cmp	r2, #11
 800f06c:	d917      	bls.n	800f09e <_malloc_r+0xc2>
 800f06e:	1961      	adds	r1, r4, r5
 800f070:	42a3      	cmp	r3, r4
 800f072:	6025      	str	r5, [r4, #0]
 800f074:	bf18      	it	ne
 800f076:	6059      	strne	r1, [r3, #4]
 800f078:	6863      	ldr	r3, [r4, #4]
 800f07a:	bf08      	it	eq
 800f07c:	f8c8 1000 	streq.w	r1, [r8]
 800f080:	5162      	str	r2, [r4, r5]
 800f082:	604b      	str	r3, [r1, #4]
 800f084:	4630      	mov	r0, r6
 800f086:	f000 f82f 	bl	800f0e8 <__malloc_unlock>
 800f08a:	f104 000b 	add.w	r0, r4, #11
 800f08e:	1d23      	adds	r3, r4, #4
 800f090:	f020 0007 	bic.w	r0, r0, #7
 800f094:	1ac2      	subs	r2, r0, r3
 800f096:	bf1c      	itt	ne
 800f098:	1a1b      	subne	r3, r3, r0
 800f09a:	50a3      	strne	r3, [r4, r2]
 800f09c:	e7af      	b.n	800effe <_malloc_r+0x22>
 800f09e:	6862      	ldr	r2, [r4, #4]
 800f0a0:	42a3      	cmp	r3, r4
 800f0a2:	bf0c      	ite	eq
 800f0a4:	f8c8 2000 	streq.w	r2, [r8]
 800f0a8:	605a      	strne	r2, [r3, #4]
 800f0aa:	e7eb      	b.n	800f084 <_malloc_r+0xa8>
 800f0ac:	4623      	mov	r3, r4
 800f0ae:	6864      	ldr	r4, [r4, #4]
 800f0b0:	e7ae      	b.n	800f010 <_malloc_r+0x34>
 800f0b2:	463c      	mov	r4, r7
 800f0b4:	687f      	ldr	r7, [r7, #4]
 800f0b6:	e7b6      	b.n	800f026 <_malloc_r+0x4a>
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	42a3      	cmp	r3, r4
 800f0be:	d1fb      	bne.n	800f0b8 <_malloc_r+0xdc>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	6053      	str	r3, [r2, #4]
 800f0c4:	e7de      	b.n	800f084 <_malloc_r+0xa8>
 800f0c6:	230c      	movs	r3, #12
 800f0c8:	6033      	str	r3, [r6, #0]
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f000 f80c 	bl	800f0e8 <__malloc_unlock>
 800f0d0:	e794      	b.n	800effc <_malloc_r+0x20>
 800f0d2:	6005      	str	r5, [r0, #0]
 800f0d4:	e7d6      	b.n	800f084 <_malloc_r+0xa8>
 800f0d6:	bf00      	nop
 800f0d8:	200053cc 	.word	0x200053cc

0800f0dc <__malloc_lock>:
 800f0dc:	4801      	ldr	r0, [pc, #4]	@ (800f0e4 <__malloc_lock+0x8>)
 800f0de:	f000 bb54 	b.w	800f78a <__retarget_lock_acquire_recursive>
 800f0e2:	bf00      	nop
 800f0e4:	20005510 	.word	0x20005510

0800f0e8 <__malloc_unlock>:
 800f0e8:	4801      	ldr	r0, [pc, #4]	@ (800f0f0 <__malloc_unlock+0x8>)
 800f0ea:	f000 bb4f 	b.w	800f78c <__retarget_lock_release_recursive>
 800f0ee:	bf00      	nop
 800f0f0:	20005510 	.word	0x20005510

0800f0f4 <_realloc_r>:
 800f0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	4680      	mov	r8, r0
 800f0fa:	4615      	mov	r5, r2
 800f0fc:	460c      	mov	r4, r1
 800f0fe:	b921      	cbnz	r1, 800f10a <_realloc_r+0x16>
 800f100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f104:	4611      	mov	r1, r2
 800f106:	f7ff bf69 	b.w	800efdc <_malloc_r>
 800f10a:	b92a      	cbnz	r2, 800f118 <_realloc_r+0x24>
 800f10c:	f000 fb4e 	bl	800f7ac <_free_r>
 800f110:	2400      	movs	r4, #0
 800f112:	4620      	mov	r0, r4
 800f114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f118:	f000 fb92 	bl	800f840 <_malloc_usable_size_r>
 800f11c:	4285      	cmp	r5, r0
 800f11e:	4606      	mov	r6, r0
 800f120:	d802      	bhi.n	800f128 <_realloc_r+0x34>
 800f122:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f126:	d8f4      	bhi.n	800f112 <_realloc_r+0x1e>
 800f128:	4629      	mov	r1, r5
 800f12a:	4640      	mov	r0, r8
 800f12c:	f7ff ff56 	bl	800efdc <_malloc_r>
 800f130:	4607      	mov	r7, r0
 800f132:	2800      	cmp	r0, #0
 800f134:	d0ec      	beq.n	800f110 <_realloc_r+0x1c>
 800f136:	42b5      	cmp	r5, r6
 800f138:	462a      	mov	r2, r5
 800f13a:	4621      	mov	r1, r4
 800f13c:	bf28      	it	cs
 800f13e:	4632      	movcs	r2, r6
 800f140:	f000 fb25 	bl	800f78e <memcpy>
 800f144:	4621      	mov	r1, r4
 800f146:	4640      	mov	r0, r8
 800f148:	f000 fb30 	bl	800f7ac <_free_r>
 800f14c:	463c      	mov	r4, r7
 800f14e:	e7e0      	b.n	800f112 <_realloc_r+0x1e>

0800f150 <std>:
 800f150:	2300      	movs	r3, #0
 800f152:	b510      	push	{r4, lr}
 800f154:	4604      	mov	r4, r0
 800f156:	e9c0 3300 	strd	r3, r3, [r0]
 800f15a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f15e:	6083      	str	r3, [r0, #8]
 800f160:	8181      	strh	r1, [r0, #12]
 800f162:	6643      	str	r3, [r0, #100]	@ 0x64
 800f164:	81c2      	strh	r2, [r0, #14]
 800f166:	6183      	str	r3, [r0, #24]
 800f168:	4619      	mov	r1, r3
 800f16a:	2208      	movs	r2, #8
 800f16c:	305c      	adds	r0, #92	@ 0x5c
 800f16e:	f000 fa2d 	bl	800f5cc <memset>
 800f172:	4b0d      	ldr	r3, [pc, #52]	@ (800f1a8 <std+0x58>)
 800f174:	6263      	str	r3, [r4, #36]	@ 0x24
 800f176:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ac <std+0x5c>)
 800f178:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f17a:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b0 <std+0x60>)
 800f17c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f17e:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b4 <std+0x64>)
 800f180:	6323      	str	r3, [r4, #48]	@ 0x30
 800f182:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b8 <std+0x68>)
 800f184:	6224      	str	r4, [r4, #32]
 800f186:	429c      	cmp	r4, r3
 800f188:	d006      	beq.n	800f198 <std+0x48>
 800f18a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f18e:	4294      	cmp	r4, r2
 800f190:	d002      	beq.n	800f198 <std+0x48>
 800f192:	33d0      	adds	r3, #208	@ 0xd0
 800f194:	429c      	cmp	r4, r3
 800f196:	d105      	bne.n	800f1a4 <std+0x54>
 800f198:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1a0:	f000 baf2 	b.w	800f788 <__retarget_lock_init_recursive>
 800f1a4:	bd10      	pop	{r4, pc}
 800f1a6:	bf00      	nop
 800f1a8:	0800f41d 	.word	0x0800f41d
 800f1ac:	0800f43f 	.word	0x0800f43f
 800f1b0:	0800f477 	.word	0x0800f477
 800f1b4:	0800f49b 	.word	0x0800f49b
 800f1b8:	200053d0 	.word	0x200053d0

0800f1bc <stdio_exit_handler>:
 800f1bc:	4a02      	ldr	r2, [pc, #8]	@ (800f1c8 <stdio_exit_handler+0xc>)
 800f1be:	4903      	ldr	r1, [pc, #12]	@ (800f1cc <stdio_exit_handler+0x10>)
 800f1c0:	4803      	ldr	r0, [pc, #12]	@ (800f1d0 <stdio_exit_handler+0x14>)
 800f1c2:	f000 b869 	b.w	800f298 <_fwalk_sglue>
 800f1c6:	bf00      	nop
 800f1c8:	200002d4 	.word	0x200002d4
 800f1cc:	080101a9 	.word	0x080101a9
 800f1d0:	200002e4 	.word	0x200002e4

0800f1d4 <cleanup_stdio>:
 800f1d4:	6841      	ldr	r1, [r0, #4]
 800f1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f208 <cleanup_stdio+0x34>)
 800f1d8:	4299      	cmp	r1, r3
 800f1da:	b510      	push	{r4, lr}
 800f1dc:	4604      	mov	r4, r0
 800f1de:	d001      	beq.n	800f1e4 <cleanup_stdio+0x10>
 800f1e0:	f000 ffe2 	bl	80101a8 <_fflush_r>
 800f1e4:	68a1      	ldr	r1, [r4, #8]
 800f1e6:	4b09      	ldr	r3, [pc, #36]	@ (800f20c <cleanup_stdio+0x38>)
 800f1e8:	4299      	cmp	r1, r3
 800f1ea:	d002      	beq.n	800f1f2 <cleanup_stdio+0x1e>
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 ffdb 	bl	80101a8 <_fflush_r>
 800f1f2:	68e1      	ldr	r1, [r4, #12]
 800f1f4:	4b06      	ldr	r3, [pc, #24]	@ (800f210 <cleanup_stdio+0x3c>)
 800f1f6:	4299      	cmp	r1, r3
 800f1f8:	d004      	beq.n	800f204 <cleanup_stdio+0x30>
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f200:	f000 bfd2 	b.w	80101a8 <_fflush_r>
 800f204:	bd10      	pop	{r4, pc}
 800f206:	bf00      	nop
 800f208:	200053d0 	.word	0x200053d0
 800f20c:	20005438 	.word	0x20005438
 800f210:	200054a0 	.word	0x200054a0

0800f214 <global_stdio_init.part.0>:
 800f214:	b510      	push	{r4, lr}
 800f216:	4b0b      	ldr	r3, [pc, #44]	@ (800f244 <global_stdio_init.part.0+0x30>)
 800f218:	4c0b      	ldr	r4, [pc, #44]	@ (800f248 <global_stdio_init.part.0+0x34>)
 800f21a:	4a0c      	ldr	r2, [pc, #48]	@ (800f24c <global_stdio_init.part.0+0x38>)
 800f21c:	601a      	str	r2, [r3, #0]
 800f21e:	4620      	mov	r0, r4
 800f220:	2200      	movs	r2, #0
 800f222:	2104      	movs	r1, #4
 800f224:	f7ff ff94 	bl	800f150 <std>
 800f228:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f22c:	2201      	movs	r2, #1
 800f22e:	2109      	movs	r1, #9
 800f230:	f7ff ff8e 	bl	800f150 <std>
 800f234:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f238:	2202      	movs	r2, #2
 800f23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f23e:	2112      	movs	r1, #18
 800f240:	f7ff bf86 	b.w	800f150 <std>
 800f244:	20005508 	.word	0x20005508
 800f248:	200053d0 	.word	0x200053d0
 800f24c:	0800f1bd 	.word	0x0800f1bd

0800f250 <__sfp_lock_acquire>:
 800f250:	4801      	ldr	r0, [pc, #4]	@ (800f258 <__sfp_lock_acquire+0x8>)
 800f252:	f000 ba9a 	b.w	800f78a <__retarget_lock_acquire_recursive>
 800f256:	bf00      	nop
 800f258:	20005511 	.word	0x20005511

0800f25c <__sfp_lock_release>:
 800f25c:	4801      	ldr	r0, [pc, #4]	@ (800f264 <__sfp_lock_release+0x8>)
 800f25e:	f000 ba95 	b.w	800f78c <__retarget_lock_release_recursive>
 800f262:	bf00      	nop
 800f264:	20005511 	.word	0x20005511

0800f268 <__sinit>:
 800f268:	b510      	push	{r4, lr}
 800f26a:	4604      	mov	r4, r0
 800f26c:	f7ff fff0 	bl	800f250 <__sfp_lock_acquire>
 800f270:	6a23      	ldr	r3, [r4, #32]
 800f272:	b11b      	cbz	r3, 800f27c <__sinit+0x14>
 800f274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f278:	f7ff bff0 	b.w	800f25c <__sfp_lock_release>
 800f27c:	4b04      	ldr	r3, [pc, #16]	@ (800f290 <__sinit+0x28>)
 800f27e:	6223      	str	r3, [r4, #32]
 800f280:	4b04      	ldr	r3, [pc, #16]	@ (800f294 <__sinit+0x2c>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1f5      	bne.n	800f274 <__sinit+0xc>
 800f288:	f7ff ffc4 	bl	800f214 <global_stdio_init.part.0>
 800f28c:	e7f2      	b.n	800f274 <__sinit+0xc>
 800f28e:	bf00      	nop
 800f290:	0800f1d5 	.word	0x0800f1d5
 800f294:	20005508 	.word	0x20005508

0800f298 <_fwalk_sglue>:
 800f298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f29c:	4607      	mov	r7, r0
 800f29e:	4688      	mov	r8, r1
 800f2a0:	4614      	mov	r4, r2
 800f2a2:	2600      	movs	r6, #0
 800f2a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2a8:	f1b9 0901 	subs.w	r9, r9, #1
 800f2ac:	d505      	bpl.n	800f2ba <_fwalk_sglue+0x22>
 800f2ae:	6824      	ldr	r4, [r4, #0]
 800f2b0:	2c00      	cmp	r4, #0
 800f2b2:	d1f7      	bne.n	800f2a4 <_fwalk_sglue+0xc>
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ba:	89ab      	ldrh	r3, [r5, #12]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d907      	bls.n	800f2d0 <_fwalk_sglue+0x38>
 800f2c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	d003      	beq.n	800f2d0 <_fwalk_sglue+0x38>
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	4638      	mov	r0, r7
 800f2cc:	47c0      	blx	r8
 800f2ce:	4306      	orrs	r6, r0
 800f2d0:	3568      	adds	r5, #104	@ 0x68
 800f2d2:	e7e9      	b.n	800f2a8 <_fwalk_sglue+0x10>

0800f2d4 <iprintf>:
 800f2d4:	b40f      	push	{r0, r1, r2, r3}
 800f2d6:	b507      	push	{r0, r1, r2, lr}
 800f2d8:	4906      	ldr	r1, [pc, #24]	@ (800f2f4 <iprintf+0x20>)
 800f2da:	ab04      	add	r3, sp, #16
 800f2dc:	6808      	ldr	r0, [r1, #0]
 800f2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2e2:	6881      	ldr	r1, [r0, #8]
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	f000 fc35 	bl	800fb54 <_vfiprintf_r>
 800f2ea:	b003      	add	sp, #12
 800f2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2f0:	b004      	add	sp, #16
 800f2f2:	4770      	bx	lr
 800f2f4:	200002e0 	.word	0x200002e0

0800f2f8 <_puts_r>:
 800f2f8:	6a03      	ldr	r3, [r0, #32]
 800f2fa:	b570      	push	{r4, r5, r6, lr}
 800f2fc:	6884      	ldr	r4, [r0, #8]
 800f2fe:	4605      	mov	r5, r0
 800f300:	460e      	mov	r6, r1
 800f302:	b90b      	cbnz	r3, 800f308 <_puts_r+0x10>
 800f304:	f7ff ffb0 	bl	800f268 <__sinit>
 800f308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f30a:	07db      	lsls	r3, r3, #31
 800f30c:	d405      	bmi.n	800f31a <_puts_r+0x22>
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	0598      	lsls	r0, r3, #22
 800f312:	d402      	bmi.n	800f31a <_puts_r+0x22>
 800f314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f316:	f000 fa38 	bl	800f78a <__retarget_lock_acquire_recursive>
 800f31a:	89a3      	ldrh	r3, [r4, #12]
 800f31c:	0719      	lsls	r1, r3, #28
 800f31e:	d502      	bpl.n	800f326 <_puts_r+0x2e>
 800f320:	6923      	ldr	r3, [r4, #16]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d135      	bne.n	800f392 <_puts_r+0x9a>
 800f326:	4621      	mov	r1, r4
 800f328:	4628      	mov	r0, r5
 800f32a:	f000 f8f9 	bl	800f520 <__swsetup_r>
 800f32e:	b380      	cbz	r0, 800f392 <_puts_r+0x9a>
 800f330:	f04f 35ff 	mov.w	r5, #4294967295
 800f334:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f336:	07da      	lsls	r2, r3, #31
 800f338:	d405      	bmi.n	800f346 <_puts_r+0x4e>
 800f33a:	89a3      	ldrh	r3, [r4, #12]
 800f33c:	059b      	lsls	r3, r3, #22
 800f33e:	d402      	bmi.n	800f346 <_puts_r+0x4e>
 800f340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f342:	f000 fa23 	bl	800f78c <__retarget_lock_release_recursive>
 800f346:	4628      	mov	r0, r5
 800f348:	bd70      	pop	{r4, r5, r6, pc}
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	da04      	bge.n	800f358 <_puts_r+0x60>
 800f34e:	69a2      	ldr	r2, [r4, #24]
 800f350:	429a      	cmp	r2, r3
 800f352:	dc17      	bgt.n	800f384 <_puts_r+0x8c>
 800f354:	290a      	cmp	r1, #10
 800f356:	d015      	beq.n	800f384 <_puts_r+0x8c>
 800f358:	6823      	ldr	r3, [r4, #0]
 800f35a:	1c5a      	adds	r2, r3, #1
 800f35c:	6022      	str	r2, [r4, #0]
 800f35e:	7019      	strb	r1, [r3, #0]
 800f360:	68a3      	ldr	r3, [r4, #8]
 800f362:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f366:	3b01      	subs	r3, #1
 800f368:	60a3      	str	r3, [r4, #8]
 800f36a:	2900      	cmp	r1, #0
 800f36c:	d1ed      	bne.n	800f34a <_puts_r+0x52>
 800f36e:	2b00      	cmp	r3, #0
 800f370:	da11      	bge.n	800f396 <_puts_r+0x9e>
 800f372:	4622      	mov	r2, r4
 800f374:	210a      	movs	r1, #10
 800f376:	4628      	mov	r0, r5
 800f378:	f000 f893 	bl	800f4a2 <__swbuf_r>
 800f37c:	3001      	adds	r0, #1
 800f37e:	d0d7      	beq.n	800f330 <_puts_r+0x38>
 800f380:	250a      	movs	r5, #10
 800f382:	e7d7      	b.n	800f334 <_puts_r+0x3c>
 800f384:	4622      	mov	r2, r4
 800f386:	4628      	mov	r0, r5
 800f388:	f000 f88b 	bl	800f4a2 <__swbuf_r>
 800f38c:	3001      	adds	r0, #1
 800f38e:	d1e7      	bne.n	800f360 <_puts_r+0x68>
 800f390:	e7ce      	b.n	800f330 <_puts_r+0x38>
 800f392:	3e01      	subs	r6, #1
 800f394:	e7e4      	b.n	800f360 <_puts_r+0x68>
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	6022      	str	r2, [r4, #0]
 800f39c:	220a      	movs	r2, #10
 800f39e:	701a      	strb	r2, [r3, #0]
 800f3a0:	e7ee      	b.n	800f380 <_puts_r+0x88>
	...

0800f3a4 <puts>:
 800f3a4:	4b02      	ldr	r3, [pc, #8]	@ (800f3b0 <puts+0xc>)
 800f3a6:	4601      	mov	r1, r0
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	f7ff bfa5 	b.w	800f2f8 <_puts_r>
 800f3ae:	bf00      	nop
 800f3b0:	200002e0 	.word	0x200002e0

0800f3b4 <sniprintf>:
 800f3b4:	b40c      	push	{r2, r3}
 800f3b6:	b530      	push	{r4, r5, lr}
 800f3b8:	4b17      	ldr	r3, [pc, #92]	@ (800f418 <sniprintf+0x64>)
 800f3ba:	1e0c      	subs	r4, r1, #0
 800f3bc:	681d      	ldr	r5, [r3, #0]
 800f3be:	b09d      	sub	sp, #116	@ 0x74
 800f3c0:	da08      	bge.n	800f3d4 <sniprintf+0x20>
 800f3c2:	238b      	movs	r3, #139	@ 0x8b
 800f3c4:	602b      	str	r3, [r5, #0]
 800f3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ca:	b01d      	add	sp, #116	@ 0x74
 800f3cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3d0:	b002      	add	sp, #8
 800f3d2:	4770      	bx	lr
 800f3d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f3d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f3dc:	bf14      	ite	ne
 800f3de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f3e2:	4623      	moveq	r3, r4
 800f3e4:	9304      	str	r3, [sp, #16]
 800f3e6:	9307      	str	r3, [sp, #28]
 800f3e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f3ec:	9002      	str	r0, [sp, #8]
 800f3ee:	9006      	str	r0, [sp, #24]
 800f3f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f3f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f3f6:	ab21      	add	r3, sp, #132	@ 0x84
 800f3f8:	a902      	add	r1, sp, #8
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	9301      	str	r3, [sp, #4]
 800f3fe:	f000 fa83 	bl	800f908 <_svfiprintf_r>
 800f402:	1c43      	adds	r3, r0, #1
 800f404:	bfbc      	itt	lt
 800f406:	238b      	movlt	r3, #139	@ 0x8b
 800f408:	602b      	strlt	r3, [r5, #0]
 800f40a:	2c00      	cmp	r4, #0
 800f40c:	d0dd      	beq.n	800f3ca <sniprintf+0x16>
 800f40e:	9b02      	ldr	r3, [sp, #8]
 800f410:	2200      	movs	r2, #0
 800f412:	701a      	strb	r2, [r3, #0]
 800f414:	e7d9      	b.n	800f3ca <sniprintf+0x16>
 800f416:	bf00      	nop
 800f418:	200002e0 	.word	0x200002e0

0800f41c <__sread>:
 800f41c:	b510      	push	{r4, lr}
 800f41e:	460c      	mov	r4, r1
 800f420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f424:	f000 f952 	bl	800f6cc <_read_r>
 800f428:	2800      	cmp	r0, #0
 800f42a:	bfab      	itete	ge
 800f42c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f42e:	89a3      	ldrhlt	r3, [r4, #12]
 800f430:	181b      	addge	r3, r3, r0
 800f432:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f436:	bfac      	ite	ge
 800f438:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f43a:	81a3      	strhlt	r3, [r4, #12]
 800f43c:	bd10      	pop	{r4, pc}

0800f43e <__swrite>:
 800f43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f442:	461f      	mov	r7, r3
 800f444:	898b      	ldrh	r3, [r1, #12]
 800f446:	05db      	lsls	r3, r3, #23
 800f448:	4605      	mov	r5, r0
 800f44a:	460c      	mov	r4, r1
 800f44c:	4616      	mov	r6, r2
 800f44e:	d505      	bpl.n	800f45c <__swrite+0x1e>
 800f450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f454:	2302      	movs	r3, #2
 800f456:	2200      	movs	r2, #0
 800f458:	f000 f926 	bl	800f6a8 <_lseek_r>
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f466:	81a3      	strh	r3, [r4, #12]
 800f468:	4632      	mov	r2, r6
 800f46a:	463b      	mov	r3, r7
 800f46c:	4628      	mov	r0, r5
 800f46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f472:	f000 b94d 	b.w	800f710 <_write_r>

0800f476 <__sseek>:
 800f476:	b510      	push	{r4, lr}
 800f478:	460c      	mov	r4, r1
 800f47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f47e:	f000 f913 	bl	800f6a8 <_lseek_r>
 800f482:	1c43      	adds	r3, r0, #1
 800f484:	89a3      	ldrh	r3, [r4, #12]
 800f486:	bf15      	itete	ne
 800f488:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f48a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f48e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f492:	81a3      	strheq	r3, [r4, #12]
 800f494:	bf18      	it	ne
 800f496:	81a3      	strhne	r3, [r4, #12]
 800f498:	bd10      	pop	{r4, pc}

0800f49a <__sclose>:
 800f49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f49e:	f000 b89d 	b.w	800f5dc <_close_r>

0800f4a2 <__swbuf_r>:
 800f4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4a4:	460e      	mov	r6, r1
 800f4a6:	4614      	mov	r4, r2
 800f4a8:	4605      	mov	r5, r0
 800f4aa:	b118      	cbz	r0, 800f4b4 <__swbuf_r+0x12>
 800f4ac:	6a03      	ldr	r3, [r0, #32]
 800f4ae:	b90b      	cbnz	r3, 800f4b4 <__swbuf_r+0x12>
 800f4b0:	f7ff feda 	bl	800f268 <__sinit>
 800f4b4:	69a3      	ldr	r3, [r4, #24]
 800f4b6:	60a3      	str	r3, [r4, #8]
 800f4b8:	89a3      	ldrh	r3, [r4, #12]
 800f4ba:	071a      	lsls	r2, r3, #28
 800f4bc:	d501      	bpl.n	800f4c2 <__swbuf_r+0x20>
 800f4be:	6923      	ldr	r3, [r4, #16]
 800f4c0:	b943      	cbnz	r3, 800f4d4 <__swbuf_r+0x32>
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f000 f82b 	bl	800f520 <__swsetup_r>
 800f4ca:	b118      	cbz	r0, 800f4d4 <__swbuf_r+0x32>
 800f4cc:	f04f 37ff 	mov.w	r7, #4294967295
 800f4d0:	4638      	mov	r0, r7
 800f4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	6922      	ldr	r2, [r4, #16]
 800f4d8:	1a98      	subs	r0, r3, r2
 800f4da:	6963      	ldr	r3, [r4, #20]
 800f4dc:	b2f6      	uxtb	r6, r6
 800f4de:	4283      	cmp	r3, r0
 800f4e0:	4637      	mov	r7, r6
 800f4e2:	dc05      	bgt.n	800f4f0 <__swbuf_r+0x4e>
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f000 fe5e 	bl	80101a8 <_fflush_r>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d1ed      	bne.n	800f4cc <__swbuf_r+0x2a>
 800f4f0:	68a3      	ldr	r3, [r4, #8]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	60a3      	str	r3, [r4, #8]
 800f4f6:	6823      	ldr	r3, [r4, #0]
 800f4f8:	1c5a      	adds	r2, r3, #1
 800f4fa:	6022      	str	r2, [r4, #0]
 800f4fc:	701e      	strb	r6, [r3, #0]
 800f4fe:	6962      	ldr	r2, [r4, #20]
 800f500:	1c43      	adds	r3, r0, #1
 800f502:	429a      	cmp	r2, r3
 800f504:	d004      	beq.n	800f510 <__swbuf_r+0x6e>
 800f506:	89a3      	ldrh	r3, [r4, #12]
 800f508:	07db      	lsls	r3, r3, #31
 800f50a:	d5e1      	bpl.n	800f4d0 <__swbuf_r+0x2e>
 800f50c:	2e0a      	cmp	r6, #10
 800f50e:	d1df      	bne.n	800f4d0 <__swbuf_r+0x2e>
 800f510:	4621      	mov	r1, r4
 800f512:	4628      	mov	r0, r5
 800f514:	f000 fe48 	bl	80101a8 <_fflush_r>
 800f518:	2800      	cmp	r0, #0
 800f51a:	d0d9      	beq.n	800f4d0 <__swbuf_r+0x2e>
 800f51c:	e7d6      	b.n	800f4cc <__swbuf_r+0x2a>
	...

0800f520 <__swsetup_r>:
 800f520:	b538      	push	{r3, r4, r5, lr}
 800f522:	4b29      	ldr	r3, [pc, #164]	@ (800f5c8 <__swsetup_r+0xa8>)
 800f524:	4605      	mov	r5, r0
 800f526:	6818      	ldr	r0, [r3, #0]
 800f528:	460c      	mov	r4, r1
 800f52a:	b118      	cbz	r0, 800f534 <__swsetup_r+0x14>
 800f52c:	6a03      	ldr	r3, [r0, #32]
 800f52e:	b90b      	cbnz	r3, 800f534 <__swsetup_r+0x14>
 800f530:	f7ff fe9a 	bl	800f268 <__sinit>
 800f534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f538:	0719      	lsls	r1, r3, #28
 800f53a:	d422      	bmi.n	800f582 <__swsetup_r+0x62>
 800f53c:	06da      	lsls	r2, r3, #27
 800f53e:	d407      	bmi.n	800f550 <__swsetup_r+0x30>
 800f540:	2209      	movs	r2, #9
 800f542:	602a      	str	r2, [r5, #0]
 800f544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	f04f 30ff 	mov.w	r0, #4294967295
 800f54e:	e033      	b.n	800f5b8 <__swsetup_r+0x98>
 800f550:	0758      	lsls	r0, r3, #29
 800f552:	d512      	bpl.n	800f57a <__swsetup_r+0x5a>
 800f554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f556:	b141      	cbz	r1, 800f56a <__swsetup_r+0x4a>
 800f558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f55c:	4299      	cmp	r1, r3
 800f55e:	d002      	beq.n	800f566 <__swsetup_r+0x46>
 800f560:	4628      	mov	r0, r5
 800f562:	f000 f923 	bl	800f7ac <_free_r>
 800f566:	2300      	movs	r3, #0
 800f568:	6363      	str	r3, [r4, #52]	@ 0x34
 800f56a:	89a3      	ldrh	r3, [r4, #12]
 800f56c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f570:	81a3      	strh	r3, [r4, #12]
 800f572:	2300      	movs	r3, #0
 800f574:	6063      	str	r3, [r4, #4]
 800f576:	6923      	ldr	r3, [r4, #16]
 800f578:	6023      	str	r3, [r4, #0]
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	f043 0308 	orr.w	r3, r3, #8
 800f580:	81a3      	strh	r3, [r4, #12]
 800f582:	6923      	ldr	r3, [r4, #16]
 800f584:	b94b      	cbnz	r3, 800f59a <__swsetup_r+0x7a>
 800f586:	89a3      	ldrh	r3, [r4, #12]
 800f588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f58c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f590:	d003      	beq.n	800f59a <__swsetup_r+0x7a>
 800f592:	4621      	mov	r1, r4
 800f594:	4628      	mov	r0, r5
 800f596:	f000 fe55 	bl	8010244 <__smakebuf_r>
 800f59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f59e:	f013 0201 	ands.w	r2, r3, #1
 800f5a2:	d00a      	beq.n	800f5ba <__swsetup_r+0x9a>
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	60a2      	str	r2, [r4, #8]
 800f5a8:	6962      	ldr	r2, [r4, #20]
 800f5aa:	4252      	negs	r2, r2
 800f5ac:	61a2      	str	r2, [r4, #24]
 800f5ae:	6922      	ldr	r2, [r4, #16]
 800f5b0:	b942      	cbnz	r2, 800f5c4 <__swsetup_r+0xa4>
 800f5b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f5b6:	d1c5      	bne.n	800f544 <__swsetup_r+0x24>
 800f5b8:	bd38      	pop	{r3, r4, r5, pc}
 800f5ba:	0799      	lsls	r1, r3, #30
 800f5bc:	bf58      	it	pl
 800f5be:	6962      	ldrpl	r2, [r4, #20]
 800f5c0:	60a2      	str	r2, [r4, #8]
 800f5c2:	e7f4      	b.n	800f5ae <__swsetup_r+0x8e>
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e7f7      	b.n	800f5b8 <__swsetup_r+0x98>
 800f5c8:	200002e0 	.word	0x200002e0

0800f5cc <memset>:
 800f5cc:	4402      	add	r2, r0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d100      	bne.n	800f5d6 <memset+0xa>
 800f5d4:	4770      	bx	lr
 800f5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800f5da:	e7f9      	b.n	800f5d0 <memset+0x4>

0800f5dc <_close_r>:
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	4d06      	ldr	r5, [pc, #24]	@ (800f5f8 <_close_r+0x1c>)
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	4608      	mov	r0, r1
 800f5e6:	602b      	str	r3, [r5, #0]
 800f5e8:	f7f2 ff35 	bl	8002456 <_close>
 800f5ec:	1c43      	adds	r3, r0, #1
 800f5ee:	d102      	bne.n	800f5f6 <_close_r+0x1a>
 800f5f0:	682b      	ldr	r3, [r5, #0]
 800f5f2:	b103      	cbz	r3, 800f5f6 <_close_r+0x1a>
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	bd38      	pop	{r3, r4, r5, pc}
 800f5f8:	2000550c 	.word	0x2000550c

0800f5fc <_reclaim_reent>:
 800f5fc:	4b29      	ldr	r3, [pc, #164]	@ (800f6a4 <_reclaim_reent+0xa8>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4283      	cmp	r3, r0
 800f602:	b570      	push	{r4, r5, r6, lr}
 800f604:	4604      	mov	r4, r0
 800f606:	d04b      	beq.n	800f6a0 <_reclaim_reent+0xa4>
 800f608:	69c3      	ldr	r3, [r0, #28]
 800f60a:	b1ab      	cbz	r3, 800f638 <_reclaim_reent+0x3c>
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	b16b      	cbz	r3, 800f62c <_reclaim_reent+0x30>
 800f610:	2500      	movs	r5, #0
 800f612:	69e3      	ldr	r3, [r4, #28]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	5959      	ldr	r1, [r3, r5]
 800f618:	2900      	cmp	r1, #0
 800f61a:	d13b      	bne.n	800f694 <_reclaim_reent+0x98>
 800f61c:	3504      	adds	r5, #4
 800f61e:	2d80      	cmp	r5, #128	@ 0x80
 800f620:	d1f7      	bne.n	800f612 <_reclaim_reent+0x16>
 800f622:	69e3      	ldr	r3, [r4, #28]
 800f624:	4620      	mov	r0, r4
 800f626:	68d9      	ldr	r1, [r3, #12]
 800f628:	f000 f8c0 	bl	800f7ac <_free_r>
 800f62c:	69e3      	ldr	r3, [r4, #28]
 800f62e:	6819      	ldr	r1, [r3, #0]
 800f630:	b111      	cbz	r1, 800f638 <_reclaim_reent+0x3c>
 800f632:	4620      	mov	r0, r4
 800f634:	f000 f8ba 	bl	800f7ac <_free_r>
 800f638:	6961      	ldr	r1, [r4, #20]
 800f63a:	b111      	cbz	r1, 800f642 <_reclaim_reent+0x46>
 800f63c:	4620      	mov	r0, r4
 800f63e:	f000 f8b5 	bl	800f7ac <_free_r>
 800f642:	69e1      	ldr	r1, [r4, #28]
 800f644:	b111      	cbz	r1, 800f64c <_reclaim_reent+0x50>
 800f646:	4620      	mov	r0, r4
 800f648:	f000 f8b0 	bl	800f7ac <_free_r>
 800f64c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f64e:	b111      	cbz	r1, 800f656 <_reclaim_reent+0x5a>
 800f650:	4620      	mov	r0, r4
 800f652:	f000 f8ab 	bl	800f7ac <_free_r>
 800f656:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f658:	b111      	cbz	r1, 800f660 <_reclaim_reent+0x64>
 800f65a:	4620      	mov	r0, r4
 800f65c:	f000 f8a6 	bl	800f7ac <_free_r>
 800f660:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f662:	b111      	cbz	r1, 800f66a <_reclaim_reent+0x6e>
 800f664:	4620      	mov	r0, r4
 800f666:	f000 f8a1 	bl	800f7ac <_free_r>
 800f66a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f66c:	b111      	cbz	r1, 800f674 <_reclaim_reent+0x78>
 800f66e:	4620      	mov	r0, r4
 800f670:	f000 f89c 	bl	800f7ac <_free_r>
 800f674:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f676:	b111      	cbz	r1, 800f67e <_reclaim_reent+0x82>
 800f678:	4620      	mov	r0, r4
 800f67a:	f000 f897 	bl	800f7ac <_free_r>
 800f67e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f680:	b111      	cbz	r1, 800f688 <_reclaim_reent+0x8c>
 800f682:	4620      	mov	r0, r4
 800f684:	f000 f892 	bl	800f7ac <_free_r>
 800f688:	6a23      	ldr	r3, [r4, #32]
 800f68a:	b14b      	cbz	r3, 800f6a0 <_reclaim_reent+0xa4>
 800f68c:	4620      	mov	r0, r4
 800f68e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f692:	4718      	bx	r3
 800f694:	680e      	ldr	r6, [r1, #0]
 800f696:	4620      	mov	r0, r4
 800f698:	f000 f888 	bl	800f7ac <_free_r>
 800f69c:	4631      	mov	r1, r6
 800f69e:	e7bb      	b.n	800f618 <_reclaim_reent+0x1c>
 800f6a0:	bd70      	pop	{r4, r5, r6, pc}
 800f6a2:	bf00      	nop
 800f6a4:	200002e0 	.word	0x200002e0

0800f6a8 <_lseek_r>:
 800f6a8:	b538      	push	{r3, r4, r5, lr}
 800f6aa:	4d07      	ldr	r5, [pc, #28]	@ (800f6c8 <_lseek_r+0x20>)
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	4608      	mov	r0, r1
 800f6b0:	4611      	mov	r1, r2
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	602a      	str	r2, [r5, #0]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	f7f2 fef4 	bl	80024a4 <_lseek>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_lseek_r+0x1e>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_lseek_r+0x1e>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	2000550c 	.word	0x2000550c

0800f6cc <_read_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	4d07      	ldr	r5, [pc, #28]	@ (800f6ec <_read_r+0x20>)
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	4608      	mov	r0, r1
 800f6d4:	4611      	mov	r1, r2
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	602a      	str	r2, [r5, #0]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	f7f2 fe82 	bl	80023e4 <_read>
 800f6e0:	1c43      	adds	r3, r0, #1
 800f6e2:	d102      	bne.n	800f6ea <_read_r+0x1e>
 800f6e4:	682b      	ldr	r3, [r5, #0]
 800f6e6:	b103      	cbz	r3, 800f6ea <_read_r+0x1e>
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	bd38      	pop	{r3, r4, r5, pc}
 800f6ec:	2000550c 	.word	0x2000550c

0800f6f0 <_sbrk_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d06      	ldr	r5, [pc, #24]	@ (800f70c <_sbrk_r+0x1c>)
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	602b      	str	r3, [r5, #0]
 800f6fc:	f7f2 fee0 	bl	80024c0 <_sbrk>
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	d102      	bne.n	800f70a <_sbrk_r+0x1a>
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	b103      	cbz	r3, 800f70a <_sbrk_r+0x1a>
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	bd38      	pop	{r3, r4, r5, pc}
 800f70c:	2000550c 	.word	0x2000550c

0800f710 <_write_r>:
 800f710:	b538      	push	{r3, r4, r5, lr}
 800f712:	4d07      	ldr	r5, [pc, #28]	@ (800f730 <_write_r+0x20>)
 800f714:	4604      	mov	r4, r0
 800f716:	4608      	mov	r0, r1
 800f718:	4611      	mov	r1, r2
 800f71a:	2200      	movs	r2, #0
 800f71c:	602a      	str	r2, [r5, #0]
 800f71e:	461a      	mov	r2, r3
 800f720:	f7f2 fe7d 	bl	800241e <_write>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d102      	bne.n	800f72e <_write_r+0x1e>
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	b103      	cbz	r3, 800f72e <_write_r+0x1e>
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	bd38      	pop	{r3, r4, r5, pc}
 800f730:	2000550c 	.word	0x2000550c

0800f734 <__errno>:
 800f734:	4b01      	ldr	r3, [pc, #4]	@ (800f73c <__errno+0x8>)
 800f736:	6818      	ldr	r0, [r3, #0]
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	200002e0 	.word	0x200002e0

0800f740 <__libc_init_array>:
 800f740:	b570      	push	{r4, r5, r6, lr}
 800f742:	4d0d      	ldr	r5, [pc, #52]	@ (800f778 <__libc_init_array+0x38>)
 800f744:	4c0d      	ldr	r4, [pc, #52]	@ (800f77c <__libc_init_array+0x3c>)
 800f746:	1b64      	subs	r4, r4, r5
 800f748:	10a4      	asrs	r4, r4, #2
 800f74a:	2600      	movs	r6, #0
 800f74c:	42a6      	cmp	r6, r4
 800f74e:	d109      	bne.n	800f764 <__libc_init_array+0x24>
 800f750:	4d0b      	ldr	r5, [pc, #44]	@ (800f780 <__libc_init_array+0x40>)
 800f752:	4c0c      	ldr	r4, [pc, #48]	@ (800f784 <__libc_init_array+0x44>)
 800f754:	f000 fdee 	bl	8010334 <_init>
 800f758:	1b64      	subs	r4, r4, r5
 800f75a:	10a4      	asrs	r4, r4, #2
 800f75c:	2600      	movs	r6, #0
 800f75e:	42a6      	cmp	r6, r4
 800f760:	d105      	bne.n	800f76e <__libc_init_array+0x2e>
 800f762:	bd70      	pop	{r4, r5, r6, pc}
 800f764:	f855 3b04 	ldr.w	r3, [r5], #4
 800f768:	4798      	blx	r3
 800f76a:	3601      	adds	r6, #1
 800f76c:	e7ee      	b.n	800f74c <__libc_init_array+0xc>
 800f76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f772:	4798      	blx	r3
 800f774:	3601      	adds	r6, #1
 800f776:	e7f2      	b.n	800f75e <__libc_init_array+0x1e>
 800f778:	08010608 	.word	0x08010608
 800f77c:	08010608 	.word	0x08010608
 800f780:	08010608 	.word	0x08010608
 800f784:	0801060c 	.word	0x0801060c

0800f788 <__retarget_lock_init_recursive>:
 800f788:	4770      	bx	lr

0800f78a <__retarget_lock_acquire_recursive>:
 800f78a:	4770      	bx	lr

0800f78c <__retarget_lock_release_recursive>:
 800f78c:	4770      	bx	lr

0800f78e <memcpy>:
 800f78e:	440a      	add	r2, r1
 800f790:	4291      	cmp	r1, r2
 800f792:	f100 33ff 	add.w	r3, r0, #4294967295
 800f796:	d100      	bne.n	800f79a <memcpy+0xc>
 800f798:	4770      	bx	lr
 800f79a:	b510      	push	{r4, lr}
 800f79c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7a4:	4291      	cmp	r1, r2
 800f7a6:	d1f9      	bne.n	800f79c <memcpy+0xe>
 800f7a8:	bd10      	pop	{r4, pc}
	...

0800f7ac <_free_r>:
 800f7ac:	b538      	push	{r3, r4, r5, lr}
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	2900      	cmp	r1, #0
 800f7b2:	d041      	beq.n	800f838 <_free_r+0x8c>
 800f7b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7b8:	1f0c      	subs	r4, r1, #4
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	bfb8      	it	lt
 800f7be:	18e4      	addlt	r4, r4, r3
 800f7c0:	f7ff fc8c 	bl	800f0dc <__malloc_lock>
 800f7c4:	4a1d      	ldr	r2, [pc, #116]	@ (800f83c <_free_r+0x90>)
 800f7c6:	6813      	ldr	r3, [r2, #0]
 800f7c8:	b933      	cbnz	r3, 800f7d8 <_free_r+0x2c>
 800f7ca:	6063      	str	r3, [r4, #4]
 800f7cc:	6014      	str	r4, [r2, #0]
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7d4:	f7ff bc88 	b.w	800f0e8 <__malloc_unlock>
 800f7d8:	42a3      	cmp	r3, r4
 800f7da:	d908      	bls.n	800f7ee <_free_r+0x42>
 800f7dc:	6820      	ldr	r0, [r4, #0]
 800f7de:	1821      	adds	r1, r4, r0
 800f7e0:	428b      	cmp	r3, r1
 800f7e2:	bf01      	itttt	eq
 800f7e4:	6819      	ldreq	r1, [r3, #0]
 800f7e6:	685b      	ldreq	r3, [r3, #4]
 800f7e8:	1809      	addeq	r1, r1, r0
 800f7ea:	6021      	streq	r1, [r4, #0]
 800f7ec:	e7ed      	b.n	800f7ca <_free_r+0x1e>
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	b10b      	cbz	r3, 800f7f8 <_free_r+0x4c>
 800f7f4:	42a3      	cmp	r3, r4
 800f7f6:	d9fa      	bls.n	800f7ee <_free_r+0x42>
 800f7f8:	6811      	ldr	r1, [r2, #0]
 800f7fa:	1850      	adds	r0, r2, r1
 800f7fc:	42a0      	cmp	r0, r4
 800f7fe:	d10b      	bne.n	800f818 <_free_r+0x6c>
 800f800:	6820      	ldr	r0, [r4, #0]
 800f802:	4401      	add	r1, r0
 800f804:	1850      	adds	r0, r2, r1
 800f806:	4283      	cmp	r3, r0
 800f808:	6011      	str	r1, [r2, #0]
 800f80a:	d1e0      	bne.n	800f7ce <_free_r+0x22>
 800f80c:	6818      	ldr	r0, [r3, #0]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	6053      	str	r3, [r2, #4]
 800f812:	4408      	add	r0, r1
 800f814:	6010      	str	r0, [r2, #0]
 800f816:	e7da      	b.n	800f7ce <_free_r+0x22>
 800f818:	d902      	bls.n	800f820 <_free_r+0x74>
 800f81a:	230c      	movs	r3, #12
 800f81c:	602b      	str	r3, [r5, #0]
 800f81e:	e7d6      	b.n	800f7ce <_free_r+0x22>
 800f820:	6820      	ldr	r0, [r4, #0]
 800f822:	1821      	adds	r1, r4, r0
 800f824:	428b      	cmp	r3, r1
 800f826:	bf04      	itt	eq
 800f828:	6819      	ldreq	r1, [r3, #0]
 800f82a:	685b      	ldreq	r3, [r3, #4]
 800f82c:	6063      	str	r3, [r4, #4]
 800f82e:	bf04      	itt	eq
 800f830:	1809      	addeq	r1, r1, r0
 800f832:	6021      	streq	r1, [r4, #0]
 800f834:	6054      	str	r4, [r2, #4]
 800f836:	e7ca      	b.n	800f7ce <_free_r+0x22>
 800f838:	bd38      	pop	{r3, r4, r5, pc}
 800f83a:	bf00      	nop
 800f83c:	200053cc 	.word	0x200053cc

0800f840 <_malloc_usable_size_r>:
 800f840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f844:	1f18      	subs	r0, r3, #4
 800f846:	2b00      	cmp	r3, #0
 800f848:	bfbc      	itt	lt
 800f84a:	580b      	ldrlt	r3, [r1, r0]
 800f84c:	18c0      	addlt	r0, r0, r3
 800f84e:	4770      	bx	lr

0800f850 <__ssputs_r>:
 800f850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f854:	688e      	ldr	r6, [r1, #8]
 800f856:	461f      	mov	r7, r3
 800f858:	42be      	cmp	r6, r7
 800f85a:	680b      	ldr	r3, [r1, #0]
 800f85c:	4682      	mov	sl, r0
 800f85e:	460c      	mov	r4, r1
 800f860:	4690      	mov	r8, r2
 800f862:	d82d      	bhi.n	800f8c0 <__ssputs_r+0x70>
 800f864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f868:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f86c:	d026      	beq.n	800f8bc <__ssputs_r+0x6c>
 800f86e:	6965      	ldr	r5, [r4, #20]
 800f870:	6909      	ldr	r1, [r1, #16]
 800f872:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f876:	eba3 0901 	sub.w	r9, r3, r1
 800f87a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f87e:	1c7b      	adds	r3, r7, #1
 800f880:	444b      	add	r3, r9
 800f882:	106d      	asrs	r5, r5, #1
 800f884:	429d      	cmp	r5, r3
 800f886:	bf38      	it	cc
 800f888:	461d      	movcc	r5, r3
 800f88a:	0553      	lsls	r3, r2, #21
 800f88c:	d527      	bpl.n	800f8de <__ssputs_r+0x8e>
 800f88e:	4629      	mov	r1, r5
 800f890:	f7ff fba4 	bl	800efdc <_malloc_r>
 800f894:	4606      	mov	r6, r0
 800f896:	b360      	cbz	r0, 800f8f2 <__ssputs_r+0xa2>
 800f898:	6921      	ldr	r1, [r4, #16]
 800f89a:	464a      	mov	r2, r9
 800f89c:	f7ff ff77 	bl	800f78e <memcpy>
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f8a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8aa:	81a3      	strh	r3, [r4, #12]
 800f8ac:	6126      	str	r6, [r4, #16]
 800f8ae:	6165      	str	r5, [r4, #20]
 800f8b0:	444e      	add	r6, r9
 800f8b2:	eba5 0509 	sub.w	r5, r5, r9
 800f8b6:	6026      	str	r6, [r4, #0]
 800f8b8:	60a5      	str	r5, [r4, #8]
 800f8ba:	463e      	mov	r6, r7
 800f8bc:	42be      	cmp	r6, r7
 800f8be:	d900      	bls.n	800f8c2 <__ssputs_r+0x72>
 800f8c0:	463e      	mov	r6, r7
 800f8c2:	6820      	ldr	r0, [r4, #0]
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	4641      	mov	r1, r8
 800f8c8:	f000 fcf8 	bl	80102bc <memmove>
 800f8cc:	68a3      	ldr	r3, [r4, #8]
 800f8ce:	1b9b      	subs	r3, r3, r6
 800f8d0:	60a3      	str	r3, [r4, #8]
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	4433      	add	r3, r6
 800f8d6:	6023      	str	r3, [r4, #0]
 800f8d8:	2000      	movs	r0, #0
 800f8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8de:	462a      	mov	r2, r5
 800f8e0:	f7ff fc08 	bl	800f0f4 <_realloc_r>
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d1e0      	bne.n	800f8ac <__ssputs_r+0x5c>
 800f8ea:	6921      	ldr	r1, [r4, #16]
 800f8ec:	4650      	mov	r0, sl
 800f8ee:	f7ff ff5d 	bl	800f7ac <_free_r>
 800f8f2:	230c      	movs	r3, #12
 800f8f4:	f8ca 3000 	str.w	r3, [sl]
 800f8f8:	89a3      	ldrh	r3, [r4, #12]
 800f8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8fe:	81a3      	strh	r3, [r4, #12]
 800f900:	f04f 30ff 	mov.w	r0, #4294967295
 800f904:	e7e9      	b.n	800f8da <__ssputs_r+0x8a>
	...

0800f908 <_svfiprintf_r>:
 800f908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90c:	4698      	mov	r8, r3
 800f90e:	898b      	ldrh	r3, [r1, #12]
 800f910:	061b      	lsls	r3, r3, #24
 800f912:	b09d      	sub	sp, #116	@ 0x74
 800f914:	4607      	mov	r7, r0
 800f916:	460d      	mov	r5, r1
 800f918:	4614      	mov	r4, r2
 800f91a:	d510      	bpl.n	800f93e <_svfiprintf_r+0x36>
 800f91c:	690b      	ldr	r3, [r1, #16]
 800f91e:	b973      	cbnz	r3, 800f93e <_svfiprintf_r+0x36>
 800f920:	2140      	movs	r1, #64	@ 0x40
 800f922:	f7ff fb5b 	bl	800efdc <_malloc_r>
 800f926:	6028      	str	r0, [r5, #0]
 800f928:	6128      	str	r0, [r5, #16]
 800f92a:	b930      	cbnz	r0, 800f93a <_svfiprintf_r+0x32>
 800f92c:	230c      	movs	r3, #12
 800f92e:	603b      	str	r3, [r7, #0]
 800f930:	f04f 30ff 	mov.w	r0, #4294967295
 800f934:	b01d      	add	sp, #116	@ 0x74
 800f936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f93a:	2340      	movs	r3, #64	@ 0x40
 800f93c:	616b      	str	r3, [r5, #20]
 800f93e:	2300      	movs	r3, #0
 800f940:	9309      	str	r3, [sp, #36]	@ 0x24
 800f942:	2320      	movs	r3, #32
 800f944:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f948:	f8cd 800c 	str.w	r8, [sp, #12]
 800f94c:	2330      	movs	r3, #48	@ 0x30
 800f94e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800faec <_svfiprintf_r+0x1e4>
 800f952:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f956:	f04f 0901 	mov.w	r9, #1
 800f95a:	4623      	mov	r3, r4
 800f95c:	469a      	mov	sl, r3
 800f95e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f962:	b10a      	cbz	r2, 800f968 <_svfiprintf_r+0x60>
 800f964:	2a25      	cmp	r2, #37	@ 0x25
 800f966:	d1f9      	bne.n	800f95c <_svfiprintf_r+0x54>
 800f968:	ebba 0b04 	subs.w	fp, sl, r4
 800f96c:	d00b      	beq.n	800f986 <_svfiprintf_r+0x7e>
 800f96e:	465b      	mov	r3, fp
 800f970:	4622      	mov	r2, r4
 800f972:	4629      	mov	r1, r5
 800f974:	4638      	mov	r0, r7
 800f976:	f7ff ff6b 	bl	800f850 <__ssputs_r>
 800f97a:	3001      	adds	r0, #1
 800f97c:	f000 80a7 	beq.w	800face <_svfiprintf_r+0x1c6>
 800f980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f982:	445a      	add	r2, fp
 800f984:	9209      	str	r2, [sp, #36]	@ 0x24
 800f986:	f89a 3000 	ldrb.w	r3, [sl]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f000 809f 	beq.w	800face <_svfiprintf_r+0x1c6>
 800f990:	2300      	movs	r3, #0
 800f992:	f04f 32ff 	mov.w	r2, #4294967295
 800f996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f99a:	f10a 0a01 	add.w	sl, sl, #1
 800f99e:	9304      	str	r3, [sp, #16]
 800f9a0:	9307      	str	r3, [sp, #28]
 800f9a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9a8:	4654      	mov	r4, sl
 800f9aa:	2205      	movs	r2, #5
 800f9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9b0:	484e      	ldr	r0, [pc, #312]	@ (800faec <_svfiprintf_r+0x1e4>)
 800f9b2:	f7f0 fc2d 	bl	8000210 <memchr>
 800f9b6:	9a04      	ldr	r2, [sp, #16]
 800f9b8:	b9d8      	cbnz	r0, 800f9f2 <_svfiprintf_r+0xea>
 800f9ba:	06d0      	lsls	r0, r2, #27
 800f9bc:	bf44      	itt	mi
 800f9be:	2320      	movmi	r3, #32
 800f9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9c4:	0711      	lsls	r1, r2, #28
 800f9c6:	bf44      	itt	mi
 800f9c8:	232b      	movmi	r3, #43	@ 0x2b
 800f9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800f9d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9d4:	d015      	beq.n	800fa02 <_svfiprintf_r+0xfa>
 800f9d6:	9a07      	ldr	r2, [sp, #28]
 800f9d8:	4654      	mov	r4, sl
 800f9da:	2000      	movs	r0, #0
 800f9dc:	f04f 0c0a 	mov.w	ip, #10
 800f9e0:	4621      	mov	r1, r4
 800f9e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9e6:	3b30      	subs	r3, #48	@ 0x30
 800f9e8:	2b09      	cmp	r3, #9
 800f9ea:	d94b      	bls.n	800fa84 <_svfiprintf_r+0x17c>
 800f9ec:	b1b0      	cbz	r0, 800fa1c <_svfiprintf_r+0x114>
 800f9ee:	9207      	str	r2, [sp, #28]
 800f9f0:	e014      	b.n	800fa1c <_svfiprintf_r+0x114>
 800f9f2:	eba0 0308 	sub.w	r3, r0, r8
 800f9f6:	fa09 f303 	lsl.w	r3, r9, r3
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	9304      	str	r3, [sp, #16]
 800f9fe:	46a2      	mov	sl, r4
 800fa00:	e7d2      	b.n	800f9a8 <_svfiprintf_r+0xa0>
 800fa02:	9b03      	ldr	r3, [sp, #12]
 800fa04:	1d19      	adds	r1, r3, #4
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	9103      	str	r1, [sp, #12]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	bfbb      	ittet	lt
 800fa0e:	425b      	neglt	r3, r3
 800fa10:	f042 0202 	orrlt.w	r2, r2, #2
 800fa14:	9307      	strge	r3, [sp, #28]
 800fa16:	9307      	strlt	r3, [sp, #28]
 800fa18:	bfb8      	it	lt
 800fa1a:	9204      	strlt	r2, [sp, #16]
 800fa1c:	7823      	ldrb	r3, [r4, #0]
 800fa1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa20:	d10a      	bne.n	800fa38 <_svfiprintf_r+0x130>
 800fa22:	7863      	ldrb	r3, [r4, #1]
 800fa24:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa26:	d132      	bne.n	800fa8e <_svfiprintf_r+0x186>
 800fa28:	9b03      	ldr	r3, [sp, #12]
 800fa2a:	1d1a      	adds	r2, r3, #4
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	9203      	str	r2, [sp, #12]
 800fa30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa34:	3402      	adds	r4, #2
 800fa36:	9305      	str	r3, [sp, #20]
 800fa38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fafc <_svfiprintf_r+0x1f4>
 800fa3c:	7821      	ldrb	r1, [r4, #0]
 800fa3e:	2203      	movs	r2, #3
 800fa40:	4650      	mov	r0, sl
 800fa42:	f7f0 fbe5 	bl	8000210 <memchr>
 800fa46:	b138      	cbz	r0, 800fa58 <_svfiprintf_r+0x150>
 800fa48:	9b04      	ldr	r3, [sp, #16]
 800fa4a:	eba0 000a 	sub.w	r0, r0, sl
 800fa4e:	2240      	movs	r2, #64	@ 0x40
 800fa50:	4082      	lsls	r2, r0
 800fa52:	4313      	orrs	r3, r2
 800fa54:	3401      	adds	r4, #1
 800fa56:	9304      	str	r3, [sp, #16]
 800fa58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa5c:	4824      	ldr	r0, [pc, #144]	@ (800faf0 <_svfiprintf_r+0x1e8>)
 800fa5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa62:	2206      	movs	r2, #6
 800fa64:	f7f0 fbd4 	bl	8000210 <memchr>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d036      	beq.n	800fada <_svfiprintf_r+0x1d2>
 800fa6c:	4b21      	ldr	r3, [pc, #132]	@ (800faf4 <_svfiprintf_r+0x1ec>)
 800fa6e:	bb1b      	cbnz	r3, 800fab8 <_svfiprintf_r+0x1b0>
 800fa70:	9b03      	ldr	r3, [sp, #12]
 800fa72:	3307      	adds	r3, #7
 800fa74:	f023 0307 	bic.w	r3, r3, #7
 800fa78:	3308      	adds	r3, #8
 800fa7a:	9303      	str	r3, [sp, #12]
 800fa7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa7e:	4433      	add	r3, r6
 800fa80:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa82:	e76a      	b.n	800f95a <_svfiprintf_r+0x52>
 800fa84:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa88:	460c      	mov	r4, r1
 800fa8a:	2001      	movs	r0, #1
 800fa8c:	e7a8      	b.n	800f9e0 <_svfiprintf_r+0xd8>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	3401      	adds	r4, #1
 800fa92:	9305      	str	r3, [sp, #20]
 800fa94:	4619      	mov	r1, r3
 800fa96:	f04f 0c0a 	mov.w	ip, #10
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faa0:	3a30      	subs	r2, #48	@ 0x30
 800faa2:	2a09      	cmp	r2, #9
 800faa4:	d903      	bls.n	800faae <_svfiprintf_r+0x1a6>
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d0c6      	beq.n	800fa38 <_svfiprintf_r+0x130>
 800faaa:	9105      	str	r1, [sp, #20]
 800faac:	e7c4      	b.n	800fa38 <_svfiprintf_r+0x130>
 800faae:	fb0c 2101 	mla	r1, ip, r1, r2
 800fab2:	4604      	mov	r4, r0
 800fab4:	2301      	movs	r3, #1
 800fab6:	e7f0      	b.n	800fa9a <_svfiprintf_r+0x192>
 800fab8:	ab03      	add	r3, sp, #12
 800faba:	9300      	str	r3, [sp, #0]
 800fabc:	462a      	mov	r2, r5
 800fabe:	4b0e      	ldr	r3, [pc, #56]	@ (800faf8 <_svfiprintf_r+0x1f0>)
 800fac0:	a904      	add	r1, sp, #16
 800fac2:	4638      	mov	r0, r7
 800fac4:	f3af 8000 	nop.w
 800fac8:	1c42      	adds	r2, r0, #1
 800faca:	4606      	mov	r6, r0
 800facc:	d1d6      	bne.n	800fa7c <_svfiprintf_r+0x174>
 800face:	89ab      	ldrh	r3, [r5, #12]
 800fad0:	065b      	lsls	r3, r3, #25
 800fad2:	f53f af2d 	bmi.w	800f930 <_svfiprintf_r+0x28>
 800fad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fad8:	e72c      	b.n	800f934 <_svfiprintf_r+0x2c>
 800fada:	ab03      	add	r3, sp, #12
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	462a      	mov	r2, r5
 800fae0:	4b05      	ldr	r3, [pc, #20]	@ (800faf8 <_svfiprintf_r+0x1f0>)
 800fae2:	a904      	add	r1, sp, #16
 800fae4:	4638      	mov	r0, r7
 800fae6:	f000 f9bb 	bl	800fe60 <_printf_i>
 800faea:	e7ed      	b.n	800fac8 <_svfiprintf_r+0x1c0>
 800faec:	080105cc 	.word	0x080105cc
 800faf0:	080105d6 	.word	0x080105d6
 800faf4:	00000000 	.word	0x00000000
 800faf8:	0800f851 	.word	0x0800f851
 800fafc:	080105d2 	.word	0x080105d2

0800fb00 <__sfputc_r>:
 800fb00:	6893      	ldr	r3, [r2, #8]
 800fb02:	3b01      	subs	r3, #1
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	b410      	push	{r4}
 800fb08:	6093      	str	r3, [r2, #8]
 800fb0a:	da08      	bge.n	800fb1e <__sfputc_r+0x1e>
 800fb0c:	6994      	ldr	r4, [r2, #24]
 800fb0e:	42a3      	cmp	r3, r4
 800fb10:	db01      	blt.n	800fb16 <__sfputc_r+0x16>
 800fb12:	290a      	cmp	r1, #10
 800fb14:	d103      	bne.n	800fb1e <__sfputc_r+0x1e>
 800fb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb1a:	f7ff bcc2 	b.w	800f4a2 <__swbuf_r>
 800fb1e:	6813      	ldr	r3, [r2, #0]
 800fb20:	1c58      	adds	r0, r3, #1
 800fb22:	6010      	str	r0, [r2, #0]
 800fb24:	7019      	strb	r1, [r3, #0]
 800fb26:	4608      	mov	r0, r1
 800fb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb2c:	4770      	bx	lr

0800fb2e <__sfputs_r>:
 800fb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb30:	4606      	mov	r6, r0
 800fb32:	460f      	mov	r7, r1
 800fb34:	4614      	mov	r4, r2
 800fb36:	18d5      	adds	r5, r2, r3
 800fb38:	42ac      	cmp	r4, r5
 800fb3a:	d101      	bne.n	800fb40 <__sfputs_r+0x12>
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	e007      	b.n	800fb50 <__sfputs_r+0x22>
 800fb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb44:	463a      	mov	r2, r7
 800fb46:	4630      	mov	r0, r6
 800fb48:	f7ff ffda 	bl	800fb00 <__sfputc_r>
 800fb4c:	1c43      	adds	r3, r0, #1
 800fb4e:	d1f3      	bne.n	800fb38 <__sfputs_r+0xa>
 800fb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb54 <_vfiprintf_r>:
 800fb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb58:	460d      	mov	r5, r1
 800fb5a:	b09d      	sub	sp, #116	@ 0x74
 800fb5c:	4614      	mov	r4, r2
 800fb5e:	4698      	mov	r8, r3
 800fb60:	4606      	mov	r6, r0
 800fb62:	b118      	cbz	r0, 800fb6c <_vfiprintf_r+0x18>
 800fb64:	6a03      	ldr	r3, [r0, #32]
 800fb66:	b90b      	cbnz	r3, 800fb6c <_vfiprintf_r+0x18>
 800fb68:	f7ff fb7e 	bl	800f268 <__sinit>
 800fb6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb6e:	07d9      	lsls	r1, r3, #31
 800fb70:	d405      	bmi.n	800fb7e <_vfiprintf_r+0x2a>
 800fb72:	89ab      	ldrh	r3, [r5, #12]
 800fb74:	059a      	lsls	r2, r3, #22
 800fb76:	d402      	bmi.n	800fb7e <_vfiprintf_r+0x2a>
 800fb78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb7a:	f7ff fe06 	bl	800f78a <__retarget_lock_acquire_recursive>
 800fb7e:	89ab      	ldrh	r3, [r5, #12]
 800fb80:	071b      	lsls	r3, r3, #28
 800fb82:	d501      	bpl.n	800fb88 <_vfiprintf_r+0x34>
 800fb84:	692b      	ldr	r3, [r5, #16]
 800fb86:	b99b      	cbnz	r3, 800fbb0 <_vfiprintf_r+0x5c>
 800fb88:	4629      	mov	r1, r5
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	f7ff fcc8 	bl	800f520 <__swsetup_r>
 800fb90:	b170      	cbz	r0, 800fbb0 <_vfiprintf_r+0x5c>
 800fb92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb94:	07dc      	lsls	r4, r3, #31
 800fb96:	d504      	bpl.n	800fba2 <_vfiprintf_r+0x4e>
 800fb98:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9c:	b01d      	add	sp, #116	@ 0x74
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba2:	89ab      	ldrh	r3, [r5, #12]
 800fba4:	0598      	lsls	r0, r3, #22
 800fba6:	d4f7      	bmi.n	800fb98 <_vfiprintf_r+0x44>
 800fba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbaa:	f7ff fdef 	bl	800f78c <__retarget_lock_release_recursive>
 800fbae:	e7f3      	b.n	800fb98 <_vfiprintf_r+0x44>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbb4:	2320      	movs	r3, #32
 800fbb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fbba:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbbe:	2330      	movs	r3, #48	@ 0x30
 800fbc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fd70 <_vfiprintf_r+0x21c>
 800fbc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fbc8:	f04f 0901 	mov.w	r9, #1
 800fbcc:	4623      	mov	r3, r4
 800fbce:	469a      	mov	sl, r3
 800fbd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbd4:	b10a      	cbz	r2, 800fbda <_vfiprintf_r+0x86>
 800fbd6:	2a25      	cmp	r2, #37	@ 0x25
 800fbd8:	d1f9      	bne.n	800fbce <_vfiprintf_r+0x7a>
 800fbda:	ebba 0b04 	subs.w	fp, sl, r4
 800fbde:	d00b      	beq.n	800fbf8 <_vfiprintf_r+0xa4>
 800fbe0:	465b      	mov	r3, fp
 800fbe2:	4622      	mov	r2, r4
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f7ff ffa1 	bl	800fb2e <__sfputs_r>
 800fbec:	3001      	adds	r0, #1
 800fbee:	f000 80a7 	beq.w	800fd40 <_vfiprintf_r+0x1ec>
 800fbf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbf4:	445a      	add	r2, fp
 800fbf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 809f 	beq.w	800fd40 <_vfiprintf_r+0x1ec>
 800fc02:	2300      	movs	r3, #0
 800fc04:	f04f 32ff 	mov.w	r2, #4294967295
 800fc08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc0c:	f10a 0a01 	add.w	sl, sl, #1
 800fc10:	9304      	str	r3, [sp, #16]
 800fc12:	9307      	str	r3, [sp, #28]
 800fc14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc18:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc1a:	4654      	mov	r4, sl
 800fc1c:	2205      	movs	r2, #5
 800fc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc22:	4853      	ldr	r0, [pc, #332]	@ (800fd70 <_vfiprintf_r+0x21c>)
 800fc24:	f7f0 faf4 	bl	8000210 <memchr>
 800fc28:	9a04      	ldr	r2, [sp, #16]
 800fc2a:	b9d8      	cbnz	r0, 800fc64 <_vfiprintf_r+0x110>
 800fc2c:	06d1      	lsls	r1, r2, #27
 800fc2e:	bf44      	itt	mi
 800fc30:	2320      	movmi	r3, #32
 800fc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc36:	0713      	lsls	r3, r2, #28
 800fc38:	bf44      	itt	mi
 800fc3a:	232b      	movmi	r3, #43	@ 0x2b
 800fc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc40:	f89a 3000 	ldrb.w	r3, [sl]
 800fc44:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc46:	d015      	beq.n	800fc74 <_vfiprintf_r+0x120>
 800fc48:	9a07      	ldr	r2, [sp, #28]
 800fc4a:	4654      	mov	r4, sl
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	f04f 0c0a 	mov.w	ip, #10
 800fc52:	4621      	mov	r1, r4
 800fc54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc58:	3b30      	subs	r3, #48	@ 0x30
 800fc5a:	2b09      	cmp	r3, #9
 800fc5c:	d94b      	bls.n	800fcf6 <_vfiprintf_r+0x1a2>
 800fc5e:	b1b0      	cbz	r0, 800fc8e <_vfiprintf_r+0x13a>
 800fc60:	9207      	str	r2, [sp, #28]
 800fc62:	e014      	b.n	800fc8e <_vfiprintf_r+0x13a>
 800fc64:	eba0 0308 	sub.w	r3, r0, r8
 800fc68:	fa09 f303 	lsl.w	r3, r9, r3
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	9304      	str	r3, [sp, #16]
 800fc70:	46a2      	mov	sl, r4
 800fc72:	e7d2      	b.n	800fc1a <_vfiprintf_r+0xc6>
 800fc74:	9b03      	ldr	r3, [sp, #12]
 800fc76:	1d19      	adds	r1, r3, #4
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	9103      	str	r1, [sp, #12]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	bfbb      	ittet	lt
 800fc80:	425b      	neglt	r3, r3
 800fc82:	f042 0202 	orrlt.w	r2, r2, #2
 800fc86:	9307      	strge	r3, [sp, #28]
 800fc88:	9307      	strlt	r3, [sp, #28]
 800fc8a:	bfb8      	it	lt
 800fc8c:	9204      	strlt	r2, [sp, #16]
 800fc8e:	7823      	ldrb	r3, [r4, #0]
 800fc90:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc92:	d10a      	bne.n	800fcaa <_vfiprintf_r+0x156>
 800fc94:	7863      	ldrb	r3, [r4, #1]
 800fc96:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc98:	d132      	bne.n	800fd00 <_vfiprintf_r+0x1ac>
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	1d1a      	adds	r2, r3, #4
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	9203      	str	r2, [sp, #12]
 800fca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fca6:	3402      	adds	r4, #2
 800fca8:	9305      	str	r3, [sp, #20]
 800fcaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fd80 <_vfiprintf_r+0x22c>
 800fcae:	7821      	ldrb	r1, [r4, #0]
 800fcb0:	2203      	movs	r2, #3
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	f7f0 faac 	bl	8000210 <memchr>
 800fcb8:	b138      	cbz	r0, 800fcca <_vfiprintf_r+0x176>
 800fcba:	9b04      	ldr	r3, [sp, #16]
 800fcbc:	eba0 000a 	sub.w	r0, r0, sl
 800fcc0:	2240      	movs	r2, #64	@ 0x40
 800fcc2:	4082      	lsls	r2, r0
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	3401      	adds	r4, #1
 800fcc8:	9304      	str	r3, [sp, #16]
 800fcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcce:	4829      	ldr	r0, [pc, #164]	@ (800fd74 <_vfiprintf_r+0x220>)
 800fcd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fcd4:	2206      	movs	r2, #6
 800fcd6:	f7f0 fa9b 	bl	8000210 <memchr>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d03f      	beq.n	800fd5e <_vfiprintf_r+0x20a>
 800fcde:	4b26      	ldr	r3, [pc, #152]	@ (800fd78 <_vfiprintf_r+0x224>)
 800fce0:	bb1b      	cbnz	r3, 800fd2a <_vfiprintf_r+0x1d6>
 800fce2:	9b03      	ldr	r3, [sp, #12]
 800fce4:	3307      	adds	r3, #7
 800fce6:	f023 0307 	bic.w	r3, r3, #7
 800fcea:	3308      	adds	r3, #8
 800fcec:	9303      	str	r3, [sp, #12]
 800fcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf0:	443b      	add	r3, r7
 800fcf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcf4:	e76a      	b.n	800fbcc <_vfiprintf_r+0x78>
 800fcf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	e7a8      	b.n	800fc52 <_vfiprintf_r+0xfe>
 800fd00:	2300      	movs	r3, #0
 800fd02:	3401      	adds	r4, #1
 800fd04:	9305      	str	r3, [sp, #20]
 800fd06:	4619      	mov	r1, r3
 800fd08:	f04f 0c0a 	mov.w	ip, #10
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd12:	3a30      	subs	r2, #48	@ 0x30
 800fd14:	2a09      	cmp	r2, #9
 800fd16:	d903      	bls.n	800fd20 <_vfiprintf_r+0x1cc>
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d0c6      	beq.n	800fcaa <_vfiprintf_r+0x156>
 800fd1c:	9105      	str	r1, [sp, #20]
 800fd1e:	e7c4      	b.n	800fcaa <_vfiprintf_r+0x156>
 800fd20:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd24:	4604      	mov	r4, r0
 800fd26:	2301      	movs	r3, #1
 800fd28:	e7f0      	b.n	800fd0c <_vfiprintf_r+0x1b8>
 800fd2a:	ab03      	add	r3, sp, #12
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	462a      	mov	r2, r5
 800fd30:	4b12      	ldr	r3, [pc, #72]	@ (800fd7c <_vfiprintf_r+0x228>)
 800fd32:	a904      	add	r1, sp, #16
 800fd34:	4630      	mov	r0, r6
 800fd36:	f3af 8000 	nop.w
 800fd3a:	4607      	mov	r7, r0
 800fd3c:	1c78      	adds	r0, r7, #1
 800fd3e:	d1d6      	bne.n	800fcee <_vfiprintf_r+0x19a>
 800fd40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd42:	07d9      	lsls	r1, r3, #31
 800fd44:	d405      	bmi.n	800fd52 <_vfiprintf_r+0x1fe>
 800fd46:	89ab      	ldrh	r3, [r5, #12]
 800fd48:	059a      	lsls	r2, r3, #22
 800fd4a:	d402      	bmi.n	800fd52 <_vfiprintf_r+0x1fe>
 800fd4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd4e:	f7ff fd1d 	bl	800f78c <__retarget_lock_release_recursive>
 800fd52:	89ab      	ldrh	r3, [r5, #12]
 800fd54:	065b      	lsls	r3, r3, #25
 800fd56:	f53f af1f 	bmi.w	800fb98 <_vfiprintf_r+0x44>
 800fd5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd5c:	e71e      	b.n	800fb9c <_vfiprintf_r+0x48>
 800fd5e:	ab03      	add	r3, sp, #12
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	462a      	mov	r2, r5
 800fd64:	4b05      	ldr	r3, [pc, #20]	@ (800fd7c <_vfiprintf_r+0x228>)
 800fd66:	a904      	add	r1, sp, #16
 800fd68:	4630      	mov	r0, r6
 800fd6a:	f000 f879 	bl	800fe60 <_printf_i>
 800fd6e:	e7e4      	b.n	800fd3a <_vfiprintf_r+0x1e6>
 800fd70:	080105cc 	.word	0x080105cc
 800fd74:	080105d6 	.word	0x080105d6
 800fd78:	00000000 	.word	0x00000000
 800fd7c:	0800fb2f 	.word	0x0800fb2f
 800fd80:	080105d2 	.word	0x080105d2

0800fd84 <_printf_common>:
 800fd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd88:	4616      	mov	r6, r2
 800fd8a:	4698      	mov	r8, r3
 800fd8c:	688a      	ldr	r2, [r1, #8]
 800fd8e:	690b      	ldr	r3, [r1, #16]
 800fd90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd94:	4293      	cmp	r3, r2
 800fd96:	bfb8      	it	lt
 800fd98:	4613      	movlt	r3, r2
 800fd9a:	6033      	str	r3, [r6, #0]
 800fd9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fda0:	4607      	mov	r7, r0
 800fda2:	460c      	mov	r4, r1
 800fda4:	b10a      	cbz	r2, 800fdaa <_printf_common+0x26>
 800fda6:	3301      	adds	r3, #1
 800fda8:	6033      	str	r3, [r6, #0]
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	0699      	lsls	r1, r3, #26
 800fdae:	bf42      	ittt	mi
 800fdb0:	6833      	ldrmi	r3, [r6, #0]
 800fdb2:	3302      	addmi	r3, #2
 800fdb4:	6033      	strmi	r3, [r6, #0]
 800fdb6:	6825      	ldr	r5, [r4, #0]
 800fdb8:	f015 0506 	ands.w	r5, r5, #6
 800fdbc:	d106      	bne.n	800fdcc <_printf_common+0x48>
 800fdbe:	f104 0a19 	add.w	sl, r4, #25
 800fdc2:	68e3      	ldr	r3, [r4, #12]
 800fdc4:	6832      	ldr	r2, [r6, #0]
 800fdc6:	1a9b      	subs	r3, r3, r2
 800fdc8:	42ab      	cmp	r3, r5
 800fdca:	dc26      	bgt.n	800fe1a <_printf_common+0x96>
 800fdcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fdd0:	6822      	ldr	r2, [r4, #0]
 800fdd2:	3b00      	subs	r3, #0
 800fdd4:	bf18      	it	ne
 800fdd6:	2301      	movne	r3, #1
 800fdd8:	0692      	lsls	r2, r2, #26
 800fdda:	d42b      	bmi.n	800fe34 <_printf_common+0xb0>
 800fddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fde0:	4641      	mov	r1, r8
 800fde2:	4638      	mov	r0, r7
 800fde4:	47c8      	blx	r9
 800fde6:	3001      	adds	r0, #1
 800fde8:	d01e      	beq.n	800fe28 <_printf_common+0xa4>
 800fdea:	6823      	ldr	r3, [r4, #0]
 800fdec:	6922      	ldr	r2, [r4, #16]
 800fdee:	f003 0306 	and.w	r3, r3, #6
 800fdf2:	2b04      	cmp	r3, #4
 800fdf4:	bf02      	ittt	eq
 800fdf6:	68e5      	ldreq	r5, [r4, #12]
 800fdf8:	6833      	ldreq	r3, [r6, #0]
 800fdfa:	1aed      	subeq	r5, r5, r3
 800fdfc:	68a3      	ldr	r3, [r4, #8]
 800fdfe:	bf0c      	ite	eq
 800fe00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe04:	2500      	movne	r5, #0
 800fe06:	4293      	cmp	r3, r2
 800fe08:	bfc4      	itt	gt
 800fe0a:	1a9b      	subgt	r3, r3, r2
 800fe0c:	18ed      	addgt	r5, r5, r3
 800fe0e:	2600      	movs	r6, #0
 800fe10:	341a      	adds	r4, #26
 800fe12:	42b5      	cmp	r5, r6
 800fe14:	d11a      	bne.n	800fe4c <_printf_common+0xc8>
 800fe16:	2000      	movs	r0, #0
 800fe18:	e008      	b.n	800fe2c <_printf_common+0xa8>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	4652      	mov	r2, sl
 800fe1e:	4641      	mov	r1, r8
 800fe20:	4638      	mov	r0, r7
 800fe22:	47c8      	blx	r9
 800fe24:	3001      	adds	r0, #1
 800fe26:	d103      	bne.n	800fe30 <_printf_common+0xac>
 800fe28:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe30:	3501      	adds	r5, #1
 800fe32:	e7c6      	b.n	800fdc2 <_printf_common+0x3e>
 800fe34:	18e1      	adds	r1, r4, r3
 800fe36:	1c5a      	adds	r2, r3, #1
 800fe38:	2030      	movs	r0, #48	@ 0x30
 800fe3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fe3e:	4422      	add	r2, r4
 800fe40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fe44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fe48:	3302      	adds	r3, #2
 800fe4a:	e7c7      	b.n	800fddc <_printf_common+0x58>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	4622      	mov	r2, r4
 800fe50:	4641      	mov	r1, r8
 800fe52:	4638      	mov	r0, r7
 800fe54:	47c8      	blx	r9
 800fe56:	3001      	adds	r0, #1
 800fe58:	d0e6      	beq.n	800fe28 <_printf_common+0xa4>
 800fe5a:	3601      	adds	r6, #1
 800fe5c:	e7d9      	b.n	800fe12 <_printf_common+0x8e>
	...

0800fe60 <_printf_i>:
 800fe60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe64:	7e0f      	ldrb	r7, [r1, #24]
 800fe66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe68:	2f78      	cmp	r7, #120	@ 0x78
 800fe6a:	4691      	mov	r9, r2
 800fe6c:	4680      	mov	r8, r0
 800fe6e:	460c      	mov	r4, r1
 800fe70:	469a      	mov	sl, r3
 800fe72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe76:	d807      	bhi.n	800fe88 <_printf_i+0x28>
 800fe78:	2f62      	cmp	r7, #98	@ 0x62
 800fe7a:	d80a      	bhi.n	800fe92 <_printf_i+0x32>
 800fe7c:	2f00      	cmp	r7, #0
 800fe7e:	f000 80d2 	beq.w	8010026 <_printf_i+0x1c6>
 800fe82:	2f58      	cmp	r7, #88	@ 0x58
 800fe84:	f000 80b9 	beq.w	800fffa <_printf_i+0x19a>
 800fe88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe90:	e03a      	b.n	800ff08 <_printf_i+0xa8>
 800fe92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe96:	2b15      	cmp	r3, #21
 800fe98:	d8f6      	bhi.n	800fe88 <_printf_i+0x28>
 800fe9a:	a101      	add	r1, pc, #4	@ (adr r1, 800fea0 <_printf_i+0x40>)
 800fe9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fea0:	0800fef9 	.word	0x0800fef9
 800fea4:	0800ff0d 	.word	0x0800ff0d
 800fea8:	0800fe89 	.word	0x0800fe89
 800feac:	0800fe89 	.word	0x0800fe89
 800feb0:	0800fe89 	.word	0x0800fe89
 800feb4:	0800fe89 	.word	0x0800fe89
 800feb8:	0800ff0d 	.word	0x0800ff0d
 800febc:	0800fe89 	.word	0x0800fe89
 800fec0:	0800fe89 	.word	0x0800fe89
 800fec4:	0800fe89 	.word	0x0800fe89
 800fec8:	0800fe89 	.word	0x0800fe89
 800fecc:	0801000d 	.word	0x0801000d
 800fed0:	0800ff37 	.word	0x0800ff37
 800fed4:	0800ffc7 	.word	0x0800ffc7
 800fed8:	0800fe89 	.word	0x0800fe89
 800fedc:	0800fe89 	.word	0x0800fe89
 800fee0:	0801002f 	.word	0x0801002f
 800fee4:	0800fe89 	.word	0x0800fe89
 800fee8:	0800ff37 	.word	0x0800ff37
 800feec:	0800fe89 	.word	0x0800fe89
 800fef0:	0800fe89 	.word	0x0800fe89
 800fef4:	0800ffcf 	.word	0x0800ffcf
 800fef8:	6833      	ldr	r3, [r6, #0]
 800fefa:	1d1a      	adds	r2, r3, #4
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	6032      	str	r2, [r6, #0]
 800ff00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e09d      	b.n	8010048 <_printf_i+0x1e8>
 800ff0c:	6833      	ldr	r3, [r6, #0]
 800ff0e:	6820      	ldr	r0, [r4, #0]
 800ff10:	1d19      	adds	r1, r3, #4
 800ff12:	6031      	str	r1, [r6, #0]
 800ff14:	0606      	lsls	r6, r0, #24
 800ff16:	d501      	bpl.n	800ff1c <_printf_i+0xbc>
 800ff18:	681d      	ldr	r5, [r3, #0]
 800ff1a:	e003      	b.n	800ff24 <_printf_i+0xc4>
 800ff1c:	0645      	lsls	r5, r0, #25
 800ff1e:	d5fb      	bpl.n	800ff18 <_printf_i+0xb8>
 800ff20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ff24:	2d00      	cmp	r5, #0
 800ff26:	da03      	bge.n	800ff30 <_printf_i+0xd0>
 800ff28:	232d      	movs	r3, #45	@ 0x2d
 800ff2a:	426d      	negs	r5, r5
 800ff2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff30:	4859      	ldr	r0, [pc, #356]	@ (8010098 <_printf_i+0x238>)
 800ff32:	230a      	movs	r3, #10
 800ff34:	e011      	b.n	800ff5a <_printf_i+0xfa>
 800ff36:	6821      	ldr	r1, [r4, #0]
 800ff38:	6833      	ldr	r3, [r6, #0]
 800ff3a:	0608      	lsls	r0, r1, #24
 800ff3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ff40:	d402      	bmi.n	800ff48 <_printf_i+0xe8>
 800ff42:	0649      	lsls	r1, r1, #25
 800ff44:	bf48      	it	mi
 800ff46:	b2ad      	uxthmi	r5, r5
 800ff48:	2f6f      	cmp	r7, #111	@ 0x6f
 800ff4a:	4853      	ldr	r0, [pc, #332]	@ (8010098 <_printf_i+0x238>)
 800ff4c:	6033      	str	r3, [r6, #0]
 800ff4e:	bf14      	ite	ne
 800ff50:	230a      	movne	r3, #10
 800ff52:	2308      	moveq	r3, #8
 800ff54:	2100      	movs	r1, #0
 800ff56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ff5a:	6866      	ldr	r6, [r4, #4]
 800ff5c:	60a6      	str	r6, [r4, #8]
 800ff5e:	2e00      	cmp	r6, #0
 800ff60:	bfa2      	ittt	ge
 800ff62:	6821      	ldrge	r1, [r4, #0]
 800ff64:	f021 0104 	bicge.w	r1, r1, #4
 800ff68:	6021      	strge	r1, [r4, #0]
 800ff6a:	b90d      	cbnz	r5, 800ff70 <_printf_i+0x110>
 800ff6c:	2e00      	cmp	r6, #0
 800ff6e:	d04b      	beq.n	8010008 <_printf_i+0x1a8>
 800ff70:	4616      	mov	r6, r2
 800ff72:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff76:	fb03 5711 	mls	r7, r3, r1, r5
 800ff7a:	5dc7      	ldrb	r7, [r0, r7]
 800ff7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff80:	462f      	mov	r7, r5
 800ff82:	42bb      	cmp	r3, r7
 800ff84:	460d      	mov	r5, r1
 800ff86:	d9f4      	bls.n	800ff72 <_printf_i+0x112>
 800ff88:	2b08      	cmp	r3, #8
 800ff8a:	d10b      	bne.n	800ffa4 <_printf_i+0x144>
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	07df      	lsls	r7, r3, #31
 800ff90:	d508      	bpl.n	800ffa4 <_printf_i+0x144>
 800ff92:	6923      	ldr	r3, [r4, #16]
 800ff94:	6861      	ldr	r1, [r4, #4]
 800ff96:	4299      	cmp	r1, r3
 800ff98:	bfde      	ittt	le
 800ff9a:	2330      	movle	r3, #48	@ 0x30
 800ff9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ffa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ffa4:	1b92      	subs	r2, r2, r6
 800ffa6:	6122      	str	r2, [r4, #16]
 800ffa8:	f8cd a000 	str.w	sl, [sp]
 800ffac:	464b      	mov	r3, r9
 800ffae:	aa03      	add	r2, sp, #12
 800ffb0:	4621      	mov	r1, r4
 800ffb2:	4640      	mov	r0, r8
 800ffb4:	f7ff fee6 	bl	800fd84 <_printf_common>
 800ffb8:	3001      	adds	r0, #1
 800ffba:	d14a      	bne.n	8010052 <_printf_i+0x1f2>
 800ffbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc0:	b004      	add	sp, #16
 800ffc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc6:	6823      	ldr	r3, [r4, #0]
 800ffc8:	f043 0320 	orr.w	r3, r3, #32
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	4833      	ldr	r0, [pc, #204]	@ (801009c <_printf_i+0x23c>)
 800ffd0:	2778      	movs	r7, #120	@ 0x78
 800ffd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ffd6:	6823      	ldr	r3, [r4, #0]
 800ffd8:	6831      	ldr	r1, [r6, #0]
 800ffda:	061f      	lsls	r7, r3, #24
 800ffdc:	f851 5b04 	ldr.w	r5, [r1], #4
 800ffe0:	d402      	bmi.n	800ffe8 <_printf_i+0x188>
 800ffe2:	065f      	lsls	r7, r3, #25
 800ffe4:	bf48      	it	mi
 800ffe6:	b2ad      	uxthmi	r5, r5
 800ffe8:	6031      	str	r1, [r6, #0]
 800ffea:	07d9      	lsls	r1, r3, #31
 800ffec:	bf44      	itt	mi
 800ffee:	f043 0320 	orrmi.w	r3, r3, #32
 800fff2:	6023      	strmi	r3, [r4, #0]
 800fff4:	b11d      	cbz	r5, 800fffe <_printf_i+0x19e>
 800fff6:	2310      	movs	r3, #16
 800fff8:	e7ac      	b.n	800ff54 <_printf_i+0xf4>
 800fffa:	4827      	ldr	r0, [pc, #156]	@ (8010098 <_printf_i+0x238>)
 800fffc:	e7e9      	b.n	800ffd2 <_printf_i+0x172>
 800fffe:	6823      	ldr	r3, [r4, #0]
 8010000:	f023 0320 	bic.w	r3, r3, #32
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	e7f6      	b.n	800fff6 <_printf_i+0x196>
 8010008:	4616      	mov	r6, r2
 801000a:	e7bd      	b.n	800ff88 <_printf_i+0x128>
 801000c:	6833      	ldr	r3, [r6, #0]
 801000e:	6825      	ldr	r5, [r4, #0]
 8010010:	6961      	ldr	r1, [r4, #20]
 8010012:	1d18      	adds	r0, r3, #4
 8010014:	6030      	str	r0, [r6, #0]
 8010016:	062e      	lsls	r6, r5, #24
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	d501      	bpl.n	8010020 <_printf_i+0x1c0>
 801001c:	6019      	str	r1, [r3, #0]
 801001e:	e002      	b.n	8010026 <_printf_i+0x1c6>
 8010020:	0668      	lsls	r0, r5, #25
 8010022:	d5fb      	bpl.n	801001c <_printf_i+0x1bc>
 8010024:	8019      	strh	r1, [r3, #0]
 8010026:	2300      	movs	r3, #0
 8010028:	6123      	str	r3, [r4, #16]
 801002a:	4616      	mov	r6, r2
 801002c:	e7bc      	b.n	800ffa8 <_printf_i+0x148>
 801002e:	6833      	ldr	r3, [r6, #0]
 8010030:	1d1a      	adds	r2, r3, #4
 8010032:	6032      	str	r2, [r6, #0]
 8010034:	681e      	ldr	r6, [r3, #0]
 8010036:	6862      	ldr	r2, [r4, #4]
 8010038:	2100      	movs	r1, #0
 801003a:	4630      	mov	r0, r6
 801003c:	f7f0 f8e8 	bl	8000210 <memchr>
 8010040:	b108      	cbz	r0, 8010046 <_printf_i+0x1e6>
 8010042:	1b80      	subs	r0, r0, r6
 8010044:	6060      	str	r0, [r4, #4]
 8010046:	6863      	ldr	r3, [r4, #4]
 8010048:	6123      	str	r3, [r4, #16]
 801004a:	2300      	movs	r3, #0
 801004c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010050:	e7aa      	b.n	800ffa8 <_printf_i+0x148>
 8010052:	6923      	ldr	r3, [r4, #16]
 8010054:	4632      	mov	r2, r6
 8010056:	4649      	mov	r1, r9
 8010058:	4640      	mov	r0, r8
 801005a:	47d0      	blx	sl
 801005c:	3001      	adds	r0, #1
 801005e:	d0ad      	beq.n	800ffbc <_printf_i+0x15c>
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	079b      	lsls	r3, r3, #30
 8010064:	d413      	bmi.n	801008e <_printf_i+0x22e>
 8010066:	68e0      	ldr	r0, [r4, #12]
 8010068:	9b03      	ldr	r3, [sp, #12]
 801006a:	4298      	cmp	r0, r3
 801006c:	bfb8      	it	lt
 801006e:	4618      	movlt	r0, r3
 8010070:	e7a6      	b.n	800ffc0 <_printf_i+0x160>
 8010072:	2301      	movs	r3, #1
 8010074:	4632      	mov	r2, r6
 8010076:	4649      	mov	r1, r9
 8010078:	4640      	mov	r0, r8
 801007a:	47d0      	blx	sl
 801007c:	3001      	adds	r0, #1
 801007e:	d09d      	beq.n	800ffbc <_printf_i+0x15c>
 8010080:	3501      	adds	r5, #1
 8010082:	68e3      	ldr	r3, [r4, #12]
 8010084:	9903      	ldr	r1, [sp, #12]
 8010086:	1a5b      	subs	r3, r3, r1
 8010088:	42ab      	cmp	r3, r5
 801008a:	dcf2      	bgt.n	8010072 <_printf_i+0x212>
 801008c:	e7eb      	b.n	8010066 <_printf_i+0x206>
 801008e:	2500      	movs	r5, #0
 8010090:	f104 0619 	add.w	r6, r4, #25
 8010094:	e7f5      	b.n	8010082 <_printf_i+0x222>
 8010096:	bf00      	nop
 8010098:	080105dd 	.word	0x080105dd
 801009c:	080105ee 	.word	0x080105ee

080100a0 <__sflush_r>:
 80100a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a8:	0716      	lsls	r6, r2, #28
 80100aa:	4605      	mov	r5, r0
 80100ac:	460c      	mov	r4, r1
 80100ae:	d454      	bmi.n	801015a <__sflush_r+0xba>
 80100b0:	684b      	ldr	r3, [r1, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	dc02      	bgt.n	80100bc <__sflush_r+0x1c>
 80100b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	dd48      	ble.n	801014e <__sflush_r+0xae>
 80100bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80100be:	2e00      	cmp	r6, #0
 80100c0:	d045      	beq.n	801014e <__sflush_r+0xae>
 80100c2:	2300      	movs	r3, #0
 80100c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80100c8:	682f      	ldr	r7, [r5, #0]
 80100ca:	6a21      	ldr	r1, [r4, #32]
 80100cc:	602b      	str	r3, [r5, #0]
 80100ce:	d030      	beq.n	8010132 <__sflush_r+0x92>
 80100d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80100d2:	89a3      	ldrh	r3, [r4, #12]
 80100d4:	0759      	lsls	r1, r3, #29
 80100d6:	d505      	bpl.n	80100e4 <__sflush_r+0x44>
 80100d8:	6863      	ldr	r3, [r4, #4]
 80100da:	1ad2      	subs	r2, r2, r3
 80100dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80100de:	b10b      	cbz	r3, 80100e4 <__sflush_r+0x44>
 80100e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80100e2:	1ad2      	subs	r2, r2, r3
 80100e4:	2300      	movs	r3, #0
 80100e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80100e8:	6a21      	ldr	r1, [r4, #32]
 80100ea:	4628      	mov	r0, r5
 80100ec:	47b0      	blx	r6
 80100ee:	1c43      	adds	r3, r0, #1
 80100f0:	89a3      	ldrh	r3, [r4, #12]
 80100f2:	d106      	bne.n	8010102 <__sflush_r+0x62>
 80100f4:	6829      	ldr	r1, [r5, #0]
 80100f6:	291d      	cmp	r1, #29
 80100f8:	d82b      	bhi.n	8010152 <__sflush_r+0xb2>
 80100fa:	4a2a      	ldr	r2, [pc, #168]	@ (80101a4 <__sflush_r+0x104>)
 80100fc:	410a      	asrs	r2, r1
 80100fe:	07d6      	lsls	r6, r2, #31
 8010100:	d427      	bmi.n	8010152 <__sflush_r+0xb2>
 8010102:	2200      	movs	r2, #0
 8010104:	6062      	str	r2, [r4, #4]
 8010106:	04d9      	lsls	r1, r3, #19
 8010108:	6922      	ldr	r2, [r4, #16]
 801010a:	6022      	str	r2, [r4, #0]
 801010c:	d504      	bpl.n	8010118 <__sflush_r+0x78>
 801010e:	1c42      	adds	r2, r0, #1
 8010110:	d101      	bne.n	8010116 <__sflush_r+0x76>
 8010112:	682b      	ldr	r3, [r5, #0]
 8010114:	b903      	cbnz	r3, 8010118 <__sflush_r+0x78>
 8010116:	6560      	str	r0, [r4, #84]	@ 0x54
 8010118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801011a:	602f      	str	r7, [r5, #0]
 801011c:	b1b9      	cbz	r1, 801014e <__sflush_r+0xae>
 801011e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010122:	4299      	cmp	r1, r3
 8010124:	d002      	beq.n	801012c <__sflush_r+0x8c>
 8010126:	4628      	mov	r0, r5
 8010128:	f7ff fb40 	bl	800f7ac <_free_r>
 801012c:	2300      	movs	r3, #0
 801012e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010130:	e00d      	b.n	801014e <__sflush_r+0xae>
 8010132:	2301      	movs	r3, #1
 8010134:	4628      	mov	r0, r5
 8010136:	47b0      	blx	r6
 8010138:	4602      	mov	r2, r0
 801013a:	1c50      	adds	r0, r2, #1
 801013c:	d1c9      	bne.n	80100d2 <__sflush_r+0x32>
 801013e:	682b      	ldr	r3, [r5, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d0c6      	beq.n	80100d2 <__sflush_r+0x32>
 8010144:	2b1d      	cmp	r3, #29
 8010146:	d001      	beq.n	801014c <__sflush_r+0xac>
 8010148:	2b16      	cmp	r3, #22
 801014a:	d11e      	bne.n	801018a <__sflush_r+0xea>
 801014c:	602f      	str	r7, [r5, #0]
 801014e:	2000      	movs	r0, #0
 8010150:	e022      	b.n	8010198 <__sflush_r+0xf8>
 8010152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010156:	b21b      	sxth	r3, r3
 8010158:	e01b      	b.n	8010192 <__sflush_r+0xf2>
 801015a:	690f      	ldr	r7, [r1, #16]
 801015c:	2f00      	cmp	r7, #0
 801015e:	d0f6      	beq.n	801014e <__sflush_r+0xae>
 8010160:	0793      	lsls	r3, r2, #30
 8010162:	680e      	ldr	r6, [r1, #0]
 8010164:	bf08      	it	eq
 8010166:	694b      	ldreq	r3, [r1, #20]
 8010168:	600f      	str	r7, [r1, #0]
 801016a:	bf18      	it	ne
 801016c:	2300      	movne	r3, #0
 801016e:	eba6 0807 	sub.w	r8, r6, r7
 8010172:	608b      	str	r3, [r1, #8]
 8010174:	f1b8 0f00 	cmp.w	r8, #0
 8010178:	dde9      	ble.n	801014e <__sflush_r+0xae>
 801017a:	6a21      	ldr	r1, [r4, #32]
 801017c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801017e:	4643      	mov	r3, r8
 8010180:	463a      	mov	r2, r7
 8010182:	4628      	mov	r0, r5
 8010184:	47b0      	blx	r6
 8010186:	2800      	cmp	r0, #0
 8010188:	dc08      	bgt.n	801019c <__sflush_r+0xfc>
 801018a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801018e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010192:	81a3      	strh	r3, [r4, #12]
 8010194:	f04f 30ff 	mov.w	r0, #4294967295
 8010198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801019c:	4407      	add	r7, r0
 801019e:	eba8 0800 	sub.w	r8, r8, r0
 80101a2:	e7e7      	b.n	8010174 <__sflush_r+0xd4>
 80101a4:	dfbffffe 	.word	0xdfbffffe

080101a8 <_fflush_r>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	690b      	ldr	r3, [r1, #16]
 80101ac:	4605      	mov	r5, r0
 80101ae:	460c      	mov	r4, r1
 80101b0:	b913      	cbnz	r3, 80101b8 <_fflush_r+0x10>
 80101b2:	2500      	movs	r5, #0
 80101b4:	4628      	mov	r0, r5
 80101b6:	bd38      	pop	{r3, r4, r5, pc}
 80101b8:	b118      	cbz	r0, 80101c2 <_fflush_r+0x1a>
 80101ba:	6a03      	ldr	r3, [r0, #32]
 80101bc:	b90b      	cbnz	r3, 80101c2 <_fflush_r+0x1a>
 80101be:	f7ff f853 	bl	800f268 <__sinit>
 80101c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d0f3      	beq.n	80101b2 <_fflush_r+0xa>
 80101ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80101cc:	07d0      	lsls	r0, r2, #31
 80101ce:	d404      	bmi.n	80101da <_fflush_r+0x32>
 80101d0:	0599      	lsls	r1, r3, #22
 80101d2:	d402      	bmi.n	80101da <_fflush_r+0x32>
 80101d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101d6:	f7ff fad8 	bl	800f78a <__retarget_lock_acquire_recursive>
 80101da:	4628      	mov	r0, r5
 80101dc:	4621      	mov	r1, r4
 80101de:	f7ff ff5f 	bl	80100a0 <__sflush_r>
 80101e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101e4:	07da      	lsls	r2, r3, #31
 80101e6:	4605      	mov	r5, r0
 80101e8:	d4e4      	bmi.n	80101b4 <_fflush_r+0xc>
 80101ea:	89a3      	ldrh	r3, [r4, #12]
 80101ec:	059b      	lsls	r3, r3, #22
 80101ee:	d4e1      	bmi.n	80101b4 <_fflush_r+0xc>
 80101f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101f2:	f7ff facb 	bl	800f78c <__retarget_lock_release_recursive>
 80101f6:	e7dd      	b.n	80101b4 <_fflush_r+0xc>

080101f8 <__swhatbuf_r>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	460c      	mov	r4, r1
 80101fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010200:	2900      	cmp	r1, #0
 8010202:	b096      	sub	sp, #88	@ 0x58
 8010204:	4615      	mov	r5, r2
 8010206:	461e      	mov	r6, r3
 8010208:	da0d      	bge.n	8010226 <__swhatbuf_r+0x2e>
 801020a:	89a3      	ldrh	r3, [r4, #12]
 801020c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010210:	f04f 0100 	mov.w	r1, #0
 8010214:	bf14      	ite	ne
 8010216:	2340      	movne	r3, #64	@ 0x40
 8010218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801021c:	2000      	movs	r0, #0
 801021e:	6031      	str	r1, [r6, #0]
 8010220:	602b      	str	r3, [r5, #0]
 8010222:	b016      	add	sp, #88	@ 0x58
 8010224:	bd70      	pop	{r4, r5, r6, pc}
 8010226:	466a      	mov	r2, sp
 8010228:	f000 f862 	bl	80102f0 <_fstat_r>
 801022c:	2800      	cmp	r0, #0
 801022e:	dbec      	blt.n	801020a <__swhatbuf_r+0x12>
 8010230:	9901      	ldr	r1, [sp, #4]
 8010232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801023a:	4259      	negs	r1, r3
 801023c:	4159      	adcs	r1, r3
 801023e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010242:	e7eb      	b.n	801021c <__swhatbuf_r+0x24>

08010244 <__smakebuf_r>:
 8010244:	898b      	ldrh	r3, [r1, #12]
 8010246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010248:	079d      	lsls	r5, r3, #30
 801024a:	4606      	mov	r6, r0
 801024c:	460c      	mov	r4, r1
 801024e:	d507      	bpl.n	8010260 <__smakebuf_r+0x1c>
 8010250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010254:	6023      	str	r3, [r4, #0]
 8010256:	6123      	str	r3, [r4, #16]
 8010258:	2301      	movs	r3, #1
 801025a:	6163      	str	r3, [r4, #20]
 801025c:	b003      	add	sp, #12
 801025e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010260:	ab01      	add	r3, sp, #4
 8010262:	466a      	mov	r2, sp
 8010264:	f7ff ffc8 	bl	80101f8 <__swhatbuf_r>
 8010268:	9f00      	ldr	r7, [sp, #0]
 801026a:	4605      	mov	r5, r0
 801026c:	4639      	mov	r1, r7
 801026e:	4630      	mov	r0, r6
 8010270:	f7fe feb4 	bl	800efdc <_malloc_r>
 8010274:	b948      	cbnz	r0, 801028a <__smakebuf_r+0x46>
 8010276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801027a:	059a      	lsls	r2, r3, #22
 801027c:	d4ee      	bmi.n	801025c <__smakebuf_r+0x18>
 801027e:	f023 0303 	bic.w	r3, r3, #3
 8010282:	f043 0302 	orr.w	r3, r3, #2
 8010286:	81a3      	strh	r3, [r4, #12]
 8010288:	e7e2      	b.n	8010250 <__smakebuf_r+0xc>
 801028a:	89a3      	ldrh	r3, [r4, #12]
 801028c:	6020      	str	r0, [r4, #0]
 801028e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010292:	81a3      	strh	r3, [r4, #12]
 8010294:	9b01      	ldr	r3, [sp, #4]
 8010296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801029a:	b15b      	cbz	r3, 80102b4 <__smakebuf_r+0x70>
 801029c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102a0:	4630      	mov	r0, r6
 80102a2:	f000 f837 	bl	8010314 <_isatty_r>
 80102a6:	b128      	cbz	r0, 80102b4 <__smakebuf_r+0x70>
 80102a8:	89a3      	ldrh	r3, [r4, #12]
 80102aa:	f023 0303 	bic.w	r3, r3, #3
 80102ae:	f043 0301 	orr.w	r3, r3, #1
 80102b2:	81a3      	strh	r3, [r4, #12]
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	431d      	orrs	r5, r3
 80102b8:	81a5      	strh	r5, [r4, #12]
 80102ba:	e7cf      	b.n	801025c <__smakebuf_r+0x18>

080102bc <memmove>:
 80102bc:	4288      	cmp	r0, r1
 80102be:	b510      	push	{r4, lr}
 80102c0:	eb01 0402 	add.w	r4, r1, r2
 80102c4:	d902      	bls.n	80102cc <memmove+0x10>
 80102c6:	4284      	cmp	r4, r0
 80102c8:	4623      	mov	r3, r4
 80102ca:	d807      	bhi.n	80102dc <memmove+0x20>
 80102cc:	1e43      	subs	r3, r0, #1
 80102ce:	42a1      	cmp	r1, r4
 80102d0:	d008      	beq.n	80102e4 <memmove+0x28>
 80102d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102da:	e7f8      	b.n	80102ce <memmove+0x12>
 80102dc:	4402      	add	r2, r0
 80102de:	4601      	mov	r1, r0
 80102e0:	428a      	cmp	r2, r1
 80102e2:	d100      	bne.n	80102e6 <memmove+0x2a>
 80102e4:	bd10      	pop	{r4, pc}
 80102e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102ee:	e7f7      	b.n	80102e0 <memmove+0x24>

080102f0 <_fstat_r>:
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	4d07      	ldr	r5, [pc, #28]	@ (8010310 <_fstat_r+0x20>)
 80102f4:	2300      	movs	r3, #0
 80102f6:	4604      	mov	r4, r0
 80102f8:	4608      	mov	r0, r1
 80102fa:	4611      	mov	r1, r2
 80102fc:	602b      	str	r3, [r5, #0]
 80102fe:	f7f2 f8b6 	bl	800246e <_fstat>
 8010302:	1c43      	adds	r3, r0, #1
 8010304:	d102      	bne.n	801030c <_fstat_r+0x1c>
 8010306:	682b      	ldr	r3, [r5, #0]
 8010308:	b103      	cbz	r3, 801030c <_fstat_r+0x1c>
 801030a:	6023      	str	r3, [r4, #0]
 801030c:	bd38      	pop	{r3, r4, r5, pc}
 801030e:	bf00      	nop
 8010310:	2000550c 	.word	0x2000550c

08010314 <_isatty_r>:
 8010314:	b538      	push	{r3, r4, r5, lr}
 8010316:	4d06      	ldr	r5, [pc, #24]	@ (8010330 <_isatty_r+0x1c>)
 8010318:	2300      	movs	r3, #0
 801031a:	4604      	mov	r4, r0
 801031c:	4608      	mov	r0, r1
 801031e:	602b      	str	r3, [r5, #0]
 8010320:	f7f2 f8b5 	bl	800248e <_isatty>
 8010324:	1c43      	adds	r3, r0, #1
 8010326:	d102      	bne.n	801032e <_isatty_r+0x1a>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	b103      	cbz	r3, 801032e <_isatty_r+0x1a>
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	bd38      	pop	{r3, r4, r5, pc}
 8010330:	2000550c 	.word	0x2000550c

08010334 <_init>:
 8010334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010336:	bf00      	nop
 8010338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801033a:	bc08      	pop	{r3}
 801033c:	469e      	mov	lr, r3
 801033e:	4770      	bx	lr

08010340 <_fini>:
 8010340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010342:	bf00      	nop
 8010344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010346:	bc08      	pop	{r3}
 8010348:	469e      	mov	lr, r3
 801034a:	4770      	bx	lr
