
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800b394  0800b394  0000c394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b630  0800b630  0000d2fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b630  0800b630  0000c630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b638  0800b638  0000d2fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b638  0800b638  0000c638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b63c  0800b63c  0000c63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002fc  20000000  0800b640  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005320  200002fc  0800b93c  0000d2fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000561c  0800b93c  0000d61c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002648f  00000000  00000000  0000d32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000633e  00000000  00000000  000337bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  00039b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000176d  00000000  00000000  0003b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d9f  00000000  00000000  0003d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000297c2  00000000  00000000  00064eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2f0c  00000000  00000000  0008e66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017157a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008338  00000000  00000000  001715c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001798f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b37c 	.word	0x0800b37c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	0800b37c 	.word	0x0800b37c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <MX_DMA_Init+0x3c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a0b      	ldr	r2, [pc, #44]	@ (80005ec <MX_DMA_Init+0x3c>)
 80005c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <MX_DMA_Init+0x3c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2105      	movs	r1, #5
 80005d6:	200f      	movs	r0, #15
 80005d8:	f001 f864 	bl	80016a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005dc:	200f      	movs	r0, #15
 80005de:	f001 f87d 	bl	80016dc <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	@ (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	@ 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000330 	.word	0x20000330
 8000620:	200003d0 	.word	0x200003d0

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b0a6      	sub	sp, #152	@ 0x98
 8000628:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendSemaphore */
  osSemaphoreDef(spiSendSemaphore);
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  spiSendSemaphoreHandle = osSemaphoreCreate(osSemaphore(spiSendSemaphore), 1);
 8000636:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f008 f89d 	bl	800877c <osSemaphoreCreate>
 8000642:	4603      	mov	r3, r0
 8000644:	4a31      	ldr	r2, [pc, #196]	@ (800070c <MX_FREERTOS_Init+0xe8>)
 8000646:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000648:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <MX_FREERTOS_Init+0xec>)
 800064a:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800065c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 ffe9 	bl	800863a <osThreadCreate>
 8000668:	4603      	mov	r3, r0
 800066a:	4a2a      	ldr	r2, [pc, #168]	@ (8000714 <MX_FREERTOS_Init+0xf0>)
 800066c:	6013      	str	r3, [r2, #0]

  /* definition and creation of telemetryTask */
  osThreadDef(telemetryTask, StartTelemetryTask, osPriorityHigh, 0, 128);
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <MX_FREERTOS_Init+0xf4>)
 8000670:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemetryTaskHandle = osThreadCreate(osThread(telemetryTask), NULL);
 8000682:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f007 ffd6 	bl	800863a <osThreadCreate>
 800068e:	4603      	mov	r3, r0
 8000690:	4a22      	ldr	r2, [pc, #136]	@ (800071c <MX_FREERTOS_Init+0xf8>)
 8000692:	6013      	str	r3, [r2, #0]

  /* definition and creation of heartbeatTask */
  osThreadDef(heartbeatTask, StartHeartbeatTask, osPriorityLow, 0, 128);
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <MX_FREERTOS_Init+0xfc>)
 8000696:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800069a:	461d      	mov	r5, r3
 800069c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 80006a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 ffc3 	bl	800863a <osThreadCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <MX_FREERTOS_Init+0x100>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SPISendDataTask */
  osThreadDef(SPISendDataTask, StartSPISend, osPriorityHigh, 0, 128);
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_FREERTOS_Init+0x104>)
 80006bc:	f107 0420 	add.w	r4, r7, #32
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SPISendDataTaskHandle = osThreadCreate(osThread(SPISendDataTask), NULL);
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f007 ffb0 	bl	800863a <osThreadCreate>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a13      	ldr	r2, [pc, #76]	@ (800072c <MX_FREERTOS_Init+0x108>)
 80006de:	6013      	str	r3, [r2, #0]

  /* definition and creation of FFBTask */
  osThreadDef(FFBTask, StartFFBTask, osPriorityHigh, 0, 128);
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_FREERTOS_Init+0x10c>)
 80006e2:	1d3c      	adds	r4, r7, #4
 80006e4:	461d      	mov	r5, r3
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFBTaskHandle = osThreadCreate(osThread(FFBTask), NULL);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 ff9f 	bl	800863a <osThreadCreate>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <MX_FREERTOS_Init+0x110>)
 8000700:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000702:	bf00      	nop
 8000704:	3798      	adds	r7, #152	@ 0x98
 8000706:	46bd      	mov	sp, r7
 8000708:	bdb0      	pop	{r4, r5, r7, pc}
 800070a:	bf00      	nop
 800070c:	2000032c 	.word	0x2000032c
 8000710:	0800b3a0 	.word	0x0800b3a0
 8000714:	20000318 	.word	0x20000318
 8000718:	0800b3cc 	.word	0x0800b3cc
 800071c:	2000031c 	.word	0x2000031c
 8000720:	0800b3f8 	.word	0x0800b3f8
 8000724:	20000320 	.word	0x20000320
 8000728:	0800b424 	.word	0x0800b424
 800072c:	20000324 	.word	0x20000324
 8000730:	0800b448 	.word	0x0800b448
 8000734:	20000328 	.word	0x20000328

08000738 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f007 ffc6 	bl	80086d2 <osDelay>
 8000746:	e7fb      	b.n	8000740 <StartDefaultTask+0x8>

08000748 <StartTelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetryTask */
void StartTelemetryTask(void const * argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetryTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f007 ffbe 	bl	80086d2 <osDelay>
 8000756:	e7fb      	b.n	8000750 <StartTelemetryTask+0x8>

08000758 <StartHeartbeatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void const * argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f007 ffb6 	bl	80086d2 <osDelay>
 8000766:	e7fb      	b.n	8000760 <StartHeartbeatTask+0x8>

08000768 <StartSPISend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPISend */
void StartSPISend(void const * argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSPISend */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f007 ffae 	bl	80086d2 <osDelay>
 8000776:	e7fb      	b.n	8000770 <StartSPISend+0x8>

08000778 <StartFFBTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFBTask */
void StartFFBTask(void const * argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFFBTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f007 ffa6 	bl	80086d2 <osDelay>
 8000786:	e7fb      	b.n	8000780 <StartFFBTask+0x8>

08000788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a25      	ldr	r2, [pc, #148]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a1e      	ldr	r2, [pc, #120]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a17      	ldr	r2, [pc, #92]	@ (8000858 <MX_GPIO_Init+0xd0>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2130      	movs	r1, #48	@ 0x30
 8000812:	4812      	ldr	r0, [pc, #72]	@ (800085c <MX_GPIO_Init+0xd4>)
 8000814:	f001 fc80 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	@ (8000860 <MX_GPIO_Init+0xd8>)
 8000830:	f001 fade 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000834:	2330      	movs	r3, #48	@ 0x30
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_GPIO_Init+0xd4>)
 800084c:	f001 fad0 	bl	8001df0 <HAL_GPIO_Init>

}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	@ 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000
 8000860:	40020800 	.word	0x40020800

08000864 <send_response>:
		cJSON_Delete(json_data);
		// Clear the buffer for the next message
		memset(gCommandData, 0, BUFFER_SIZE);
}

void send_response(const char* str) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00c      	beq.n	800088c <send_response+0x28>
        return; // Handle null pointer case if necessary
    }

    // Calculate the length of the string
    uint16_t len = strlen(str);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fccc 	bl	8000210 <strlen>
 8000878:	4603      	mov	r3, r0
 800087a:	81fb      	strh	r3, [r7, #14]

    // Transmit the string using HAL_UART_Transmit
    HAL_UART_Transmit(&huart2, (uint8_t*)str, len, HAL_MAX_DELAY);
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4803      	ldr	r0, [pc, #12]	@ (8000894 <send_response+0x30>)
 8000886:	f003 fe5f 	bl	8004548 <HAL_UART_Transmit>
 800088a:	e000      	b.n	800088e <send_response+0x2a>
        return; // Handle null pointer case if necessary
 800088c:	bf00      	nop
}
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000940 	.word	0x20000940

08000898 <DWT_Init>:

// Initialize DWT for cycle counting
void DWT_Init(void) {
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <DWT_Init+0x38>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <DWT_Init+0x38>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <DWT_Init+0x38>)
 80008ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008b2:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <DWT_Init+0x3c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <DWT_Init+0x3c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a05      	ldr	r2, [pc, #20]	@ (80008d4 <DWT_Init+0x3c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6013      	str	r3, [r2, #0]
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000edf0 	.word	0xe000edf0
 80008d4:	e0001000 	.word	0xe0001000

080008d8 <init_encoder>:
	float pwm_output = fabs(total_force) * 255.0;
	gPWM = pwm_output;
	return constrain(pwm_output, 0, 255.0);
}

void init_encoder() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80008dc:	213c      	movs	r1, #60	@ 0x3c
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <init_encoder+0x14>)
 80008e0:	f003 fada 	bl	8003e98 <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 80008e4:	f000 f804 	bl	80008f0 <reset_encoder_position>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200008f8 	.word	0x200008f8

080008f0 <reset_encoder_position>:

int16_t read_encoder_position() {
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
}

void reset_encoder_position() {
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 80008f4:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <reset_encoder_position+0x18>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	200008f8 	.word	0x200008f8

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fdaa 	bl	8001468 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USB_DEVICE_Init();
 8000914:	f005 fe56 	bl	80065c4 <MX_USB_DEVICE_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f842 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f7ff ff34 	bl	8000788 <MX_GPIO_Init>
  MX_DMA_Init();
 8000920:	f7ff fe46 	bl	80005b0 <MX_DMA_Init>
  MX_SPI2_Init();
 8000924:	f000 f934 	bl	8000b90 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000928:	f000 fc6a 	bl	8001200 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800092c:	f000 fbce 	bl	80010cc <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000930:	f000 fce0 	bl	80012f4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  telemetry_data.tRpm = 0;
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <main+0x88>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
  telemetry_data.tRpm = 0;
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <main+0x88>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
  telemetry_data.tSpeedKmh = 0;
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <main+0x88>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  telemetry_data.tHasDRS = 0;
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <main+0x88>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  telemetry_data.tDrs = 0;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <main+0x88>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  telemetry_data.tPitLim = 0;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <main+0x88>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  telemetry_data.tFuel = 0;
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <main+0x88>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  telemetry_data.tBrakeBias = 0;
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <main+0x88>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  gFfbSignal = 0;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <main+0x8c>)
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
  memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 800096c:	2220      	movs	r2, #32
 800096e:	2100      	movs	r1, #0
 8000970:	4808      	ldr	r0, [pc, #32]	@ (8000994 <main+0x88>)
 8000972:	f00a f909 	bl	800ab88 <memset>
  init_encoder();
 8000976:	f7ff ffaf 	bl	80008d8 <init_encoder>
  DWT_Init();
 800097a:	f7ff ff8d 	bl	8000898 <DWT_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800097e:	f7ff fe51 	bl	8000624 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000982:	f007 fe53 	bl	800862c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 8000986:	f008 fcdd 	bl	8009344 <vTaskStartScheduler>
  send_response("STM Started");
 800098a:	4804      	ldr	r0, [pc, #16]	@ (800099c <main+0x90>)
 800098c:	f7ff ff6a 	bl	8000864 <send_response>

  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <main+0x84>
 8000994:	200005d0 	.word	0x200005d0
 8000998:	200007f0 	.word	0x200007f0
 800099c:	0800b4ac 	.word	0x0800b4ac

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	@ 0x50
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2234      	movs	r2, #52	@ 0x34
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a f8ea 	bl	800ab88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <SystemClock_Config+0xd0>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009cc:	4a28      	ldr	r2, [pc, #160]	@ (8000a70 <SystemClock_Config+0xd0>)
 80009ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d4:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <SystemClock_Config+0xd0>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <SystemClock_Config+0xd4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009ec:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <SystemClock_Config+0xd4>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <SystemClock_Config+0xd4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a18:	2348      	movs	r3, #72	@ 0x48
 8000a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a20:	2303      	movs	r3, #3
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fd9d 	bl	800356c <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a38:	f000 f8a4 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2102      	movs	r1, #2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fee1 	bl	8002820 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a64:	f000 f88e 	bl	8000b84 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3750      	adds	r7, #80	@ 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <HAL_UART_RxCpltCallback>:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
    DWT_Delay_us(2);
    osSemaphoreRelease(spiSendSemaphoreHandle);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <HAL_UART_RxCpltCallback+0x44>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d114      	bne.n	8000ab4 <HAL_UART_RxCpltCallback+0x3c>
        // Process the received data (rx_buffer)
        memcpy(gCommandData, rx_buffer, sizeof(rx_buffer));
 8000a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x48>)
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x4c>)
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a96:	461a      	mov	r2, r3
 8000a98:	f00a f910 	bl	800acbc <memcpy>
        // Notify the telemetry task to process the command
        osSignalSet(telemetryTaskHandle, 0x01);  // Set signal for telemetry task
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x50>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f007 fe2a 	bl	80086fc <osSignalSet>
        // Clear the buffer for the next message
        memset(rx_buffer, 0, BUFFER_SIZE);
 8000aa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aac:	2100      	movs	r1, #0
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x4c>)
 8000ab0:	f00a f86a 	bl	800ab88 <memset>
    }
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	200006f0 	.word	0x200006f0
 8000ac4:	200005f0 	.word	0x200005f0
 8000ac8:	2000031c 	.word	0x2000031c

08000acc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    uint32_t error_code = HAL_UART_GetError(huart);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f004 f88f 	bl	8004bf8 <HAL_UART_GetError>
 8000ada:	60f8      	str	r0, [r7, #12]

    // Identify which UART instance is causing the error (USART2 in this case)
    if (huart->Instance == USART2) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b4c <HAL_UART_ErrorCallback+0x80>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d12d      	bne.n	8000b42 <HAL_UART_ErrorCallback+0x76>

        // Handle Overrun Error (ORE)
        if (error_code & HAL_UART_ERROR_ORE) {
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00a      	beq.n	8000b06 <HAL_UART_ErrorCallback+0x3a>
            __HAL_UART_CLEAR_OREFLAG(huart);  // Clear overrun error flag
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
            // Optionally log or handle the error
            //send_response("UART Overrun Error");
        }

        // Handle Framing Error (FE)
        if (error_code & HAL_UART_ERROR_FE) {
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <HAL_UART_ErrorCallback+0x4a>
            // Clear framing error flag automatically by reading the status register
        	send_response("UART Framing Error");
 8000b10:	480f      	ldr	r0, [pc, #60]	@ (8000b50 <HAL_UART_ErrorCallback+0x84>)
 8000b12:	f7ff fea7 	bl	8000864 <send_response>
        }

        // Handle Parity Error (PE)
        if (error_code & HAL_UART_ERROR_PE) {
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <HAL_UART_ErrorCallback+0x5a>
            // Parity errors may indicate data corruption or mismatch in settings
        	send_response("UART Parity Error");
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <HAL_UART_ErrorCallback+0x88>)
 8000b22:	f7ff fe9f 	bl	8000864 <send_response>
        }

        // Handle Noise Error (NE)
        if (error_code & HAL_UART_ERROR_NE) {
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <HAL_UART_ErrorCallback+0x6a>
            // Noise errors are usually transient but worth logging
        	send_response("UART Noise Error");
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <HAL_UART_ErrorCallback+0x8c>)
 8000b32:	f7ff fe97 	bl	8000864 <send_response>
        }

        // Recovery: Restart UART reception after clearing the error flags
        HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 8000b36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b3a:	4908      	ldr	r1, [pc, #32]	@ (8000b5c <HAL_UART_ErrorCallback+0x90>)
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f003 fd8e 	bl	800465e <HAL_UART_Receive_IT>
    }
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	0800b4b8 	.word	0x0800b4b8
 8000b54:	0800b4cc 	.word	0x0800b4cc
 8000b58:	0800b4e0 	.word	0x0800b4e0
 8000b5c:	200005f0 	.word	0x200005f0

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 fc9b 	bl	80014ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40001000 	.word	0x40001000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000b96:	4a18      	ldr	r2, [pc, #96]	@ (8000bf8 <MX_SPI2_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000b9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bc4:	2228      	movs	r2, #40	@ 0x28
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000be2:	f002 ff61 	bl	8003aa8 <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bec:	f7ff ffca 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200007f4 	.word	0x200007f4
 8000bf8:	40003800 	.word	0x40003800

08000bfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a48      	ldr	r2, [pc, #288]	@ (8000d3c <HAL_SPI_MspInit+0x140>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	f040 8089 	bne.w	8000d32 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	4b46      	ldr	r3, [pc, #280]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c28:	4a45      	ldr	r2, [pc, #276]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c30:	4b43      	ldr	r3, [pc, #268]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b3f      	ldr	r3, [pc, #252]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	4a3e      	ldr	r2, [pc, #248]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b38      	ldr	r3, [pc, #224]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	4a37      	ldr	r2, [pc, #220]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c68:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <HAL_SPI_MspInit+0x144>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000c84:	2307      	movs	r3, #7
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	482d      	ldr	r0, [pc, #180]	@ (8000d44 <HAL_SPI_MspInit+0x148>)
 8000c90:	f001 f8ae 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c94:	2304      	movs	r3, #4
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4825      	ldr	r0, [pc, #148]	@ (8000d44 <HAL_SPI_MspInit+0x148>)
 8000cb0:	f001 f89e 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481d      	ldr	r0, [pc, #116]	@ (8000d48 <HAL_SPI_MspInit+0x14c>)
 8000cd2:	f001 f88d 	bl	8001df0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d50 <HAL_SPI_MspInit+0x154>)
 8000cda:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000ce4:	2240      	movs	r2, #64	@ 0x40
 8000ce6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000d0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d0e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000d18:	f000 fcee 	bl	80016f8 <HAL_DMA_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8000d22:	f7ff ff2f 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000d2a:	649a      	str	r2, [r3, #72]	@ 0x48
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_SPI_MspInit+0x150>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	@ 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40003800 	.word	0x40003800
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	2000084c 	.word	0x2000084c
 8000d50:	40026070 	.word	0x40026070

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_MspInit+0x54>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a11      	ldr	r2, [pc, #68]	@ (8000da8 <HAL_MspInit+0x54>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <HAL_MspInit+0x54>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_MspInit+0x54>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_MspInit+0x54>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_MspInit+0x54>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	210f      	movs	r1, #15
 8000d96:	f06f 0001 	mvn.w	r0, #1
 8000d9a:	f000 fc83 	bl	80016a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	@ 0x38
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <HAL_InitTick+0xe4>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	4a32      	ldr	r2, [pc, #200]	@ (8000e90 <HAL_InitTick+0xe4>)
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dcc:	4b30      	ldr	r3, [pc, #192]	@ (8000e90 <HAL_InitTick+0xe4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd8:	f107 0210 	add.w	r2, r7, #16
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fe36 	bl	8002a54 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d103      	bne.n	8000dfa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000df2:	f001 fe07 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8000df6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000df8:	e004      	b.n	8000e04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dfa:	f001 fe03 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e06:	4a23      	ldr	r2, [pc, #140]	@ (8000e94 <HAL_InitTick+0xe8>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	0c9b      	lsrs	r3, r3, #18
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <HAL_InitTick+0xec>)
 8000e14:	4a21      	ldr	r2, [pc, #132]	@ (8000e9c <HAL_InitTick+0xf0>)
 8000e16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <HAL_InitTick+0xec>)
 8000e1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e20:	4a1d      	ldr	r2, [pc, #116]	@ (8000e98 <HAL_InitTick+0xec>)
 8000e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <HAL_InitTick+0xec>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <HAL_InitTick+0xec>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <HAL_InitTick+0xec>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e38:	4817      	ldr	r0, [pc, #92]	@ (8000e98 <HAL_InitTick+0xec>)
 8000e3a:	f002 febe 	bl	8003bba <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d11b      	bne.n	8000e84 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e4c:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <HAL_InitTick+0xec>)
 8000e4e:	f002 ff0d 	bl	8003c6c <HAL_TIM_Base_Start_IT>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d111      	bne.n	8000e84 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e60:	2036      	movs	r0, #54	@ 0x36
 8000e62:	f000 fc3b 	bl	80016dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d808      	bhi.n	8000e7e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2036      	movs	r0, #54	@ 0x36
 8000e72:	f000 fc17 	bl	80016a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <HAL_InitTick+0xf4>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	e002      	b.n	8000e84 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3738      	adds	r7, #56	@ 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	431bde83 	.word	0x431bde83
 8000e98:	200008ac 	.word	0x200008ac
 8000e9c:	40001000 	.word	0x40001000
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea8:	f3bf 8f4f 	dsb	sy
}
 8000eac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <__NVIC_SystemReset+0x24>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eb6:	4904      	ldr	r1, [pc, #16]	@ (8000ec8 <__NVIC_SystemReset+0x24>)
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_SystemReset+0x28>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebe:	f3bf 8f4f 	dsb	sy
}
 8000ec2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <__NVIC_SystemReset+0x20>
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	05fa0004 	.word	0x05fa0004

08000ed0 <log_message>:
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim6;

/* USER CODE BEGIN EV */
/* USER CODE BEGIN 0 */
void log_message(const char *message) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    // Send the log message over UART
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff f999 	bl	8000210 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <log_message+0x28>)
 8000eea:	f003 fb2d 	bl	8004548 <HAL_UART_Transmit>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000940 	.word	0x20000940

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0d6      	sub	sp, #344	@ 0x158
 8000f08:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 8000f0a:	f01e 0f04 	tst.w	lr, #4
 8000f0e:	bf0c      	ite	eq
 8000f10:	f3ef 8308 	mrseq	r3, MSP
 8000f14:	f3ef 8309 	mrsne	r3, PSP
 8000f18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 8000f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 8000f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8000f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 8000f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 8000f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 8000f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 8000f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 8000f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HardFault_Handler+0xcc>)
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <HardFault_Handler+0xcc>)
 8000f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 8000f7c:	1d38      	adds	r0, r7, #4
 8000f7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000f82:	9308      	str	r3, [sp, #32]
 8000f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f88:	9307      	str	r3, [sp, #28]
 8000f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f8e:	9306      	str	r3, [sp, #24]
 8000f90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f94:	9305      	str	r3, [sp, #20]
 8000f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f9a:	9304      	str	r3, [sp, #16]
 8000f9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000fa0:	9303      	str	r3, [sp, #12]
 8000fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <HardFault_Handler+0xd0>)
 8000fba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fbe:	f009 fdaf 	bl	800ab20 <sniprintf>
		"CFSR: %08X HFSR: %08X\n",
		r0, r1, r2, r3, r12, lr, pc, psr, cfsr, hfsr
	);

	// Log the message
	log_message(log_buffer);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff83 	bl	8000ed0 <log_message>

	NVIC_SystemReset();
 8000fca:	f7ff ff6b 	bl	8000ea4 <__NVIC_SystemReset>
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	0800b4f4 	.word	0x0800b4f4

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <DMA1_Stream4_IRQHandler+0x10>)
 8001006:	f000 fcb7 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000084c 	.word	0x2000084c

08001014 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <USART2_IRQHandler+0x10>)
 800101a:	f003 fb45 	bl	80046a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000940 	.word	0x20000940

08001028 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <TIM6_DAC_IRQHandler+0x10>)
 800102e:	f002 ffc1 	bl	8003fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200008ac 	.word	0x200008ac

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f009 fdfa 	bl	800ac64 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20020000 	.word	0x20020000
 800109c:	00000400 	.word	0x00000400
 80010a0:	200008f4 	.word	0x200008f4
 80010a4:	20005620 	.word	0x20005620

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	@ 0x30
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2224      	movs	r2, #36	@ 0x24
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f009 fd54 	bl	800ab88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <MX_TIM2_Init+0xa4>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <MX_TIM2_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <MX_TIM2_Init+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <MX_TIM2_Init+0xa4>)
 80010fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001102:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_TIM2_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <MX_TIM2_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001110:	2303      	movs	r3, #3
 8001112:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <MX_TIM2_Init+0xa4>)
 800113c:	f002 fe06 	bl	8003d4c <HAL_TIM_Encoder_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001146:	f7ff fd1d 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <MX_TIM2_Init+0xa4>)
 8001158:	f003 f916 	bl	8004388 <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001162:	f7ff fd0f 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	@ 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200008f8 	.word	0x200008f8

08001174 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001194:	d12b      	bne.n	80011ee <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <HAL_TIM_Encoder_MspInit+0x84>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a16      	ldr	r2, [pc, #88]	@ (80011f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_TIM_Encoder_MspInit+0x84>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ce:	2303      	movs	r3, #3
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011de:	2301      	movs	r3, #1
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <HAL_TIM_Encoder_MspInit+0x88>)
 80011ea:	f000 fe01 	bl	8001df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	@ 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000

08001200 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 8001206:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <MX_USART2_UART_Init+0x50>)
 8001208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <MX_USART2_UART_Init+0x4c>)
 8001238:	f003 f936 	bl	80044a8 <HAL_UART_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001242:	f7ff fc9f 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000940 	.word	0x20000940
 8001250:	40004400 	.word	0x40004400

08001254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1d      	ldr	r2, [pc, #116]	@ (80012e8 <HAL_UART_MspInit+0x94>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d133      	bne.n	80012de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <HAL_UART_MspInit+0x98>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	4a1b      	ldr	r2, [pc, #108]	@ (80012ec <HAL_UART_MspInit+0x98>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
 8001286:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_UART_MspInit+0x98>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_UART_MspInit+0x98>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <HAL_UART_MspInit+0x98>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_UART_MspInit+0x98>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012be:	2307      	movs	r3, #7
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <HAL_UART_MspInit+0x9c>)
 80012ca:	f000 fd91 	bl	8001df0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2106      	movs	r1, #6
 80012d2:	2026      	movs	r0, #38	@ 0x26
 80012d4:	f000 f9e6 	bl	80016a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d8:	2026      	movs	r0, #38	@ 0x26
 80012da:	f000 f9ff 	bl	80016dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	@ 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40004400 	.word	0x40004400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000

080012f4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	2206      	movs	r2, #6
 8001304:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001308:	2202      	movs	r2, #2
 800130a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001314:	2202      	movs	r2, #2
 8001316:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001338:	f000 ff07 	bl	800214a <HAL_PCD_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001342:	f7ff fc1f 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000988 	.word	0x20000988

08001350 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0a0      	sub	sp, #128	@ 0x80
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	225c      	movs	r2, #92	@ 0x5c
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f009 fc09 	bl	800ab88 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800137e:	d141      	bne.n	8001404 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001384:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001386:	2300      	movs	r3, #0
 8001388:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fb92 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800139a:	f7ff fbf3 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <HAL_PCD_MspInit+0xbc>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a19      	ldr	r2, [pc, #100]	@ (800140c <HAL_PCD_MspInit+0xbc>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b17      	ldr	r3, [pc, #92]	@ (800140c <HAL_PCD_MspInit+0xbc>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013cc:	230a      	movs	r3, #10
 80013ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013d4:	4619      	mov	r1, r3
 80013d6:	480e      	ldr	r0, [pc, #56]	@ (8001410 <HAL_PCD_MspInit+0xc0>)
 80013d8:	f000 fd0a 	bl	8001df0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <HAL_PCD_MspInit+0xbc>)
 80013de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e0:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <HAL_PCD_MspInit+0xbc>)
 80013e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_PCD_MspInit+0xbc>)
 80013ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f0:	4a06      	ldr	r2, [pc, #24]	@ (800140c <HAL_PCD_MspInit+0xbc>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <HAL_PCD_MspInit+0xbc>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001404:	bf00      	nop
 8001406:	3780      	adds	r7, #128	@ 0x80
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800144c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001418:	f7ff fe46 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001442:	f009 fc15 	bl	800ac70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fa61 	bl	800090c <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8001458:	0800b640 	.word	0x0800b640
  ldr r2, =_sbss
 800145c:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8001460:	2000561c 	.word	0x2000561c

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <HAL_Init+0x40>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_Init+0x40>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_Init+0x40>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f8fc 	bl	800168e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f7ff fc88 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fc5a 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000e6c 	.word	0x20000e6c

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000e6c 	.word	0x20000e6c

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008

08001534 <__NVIC_SetPriorityGrouping>:
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	@ (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	@ (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	@ (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	@ 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff4c 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b6:	f7ff ff61 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff ffb1 	bl	8001628 <NVIC_EncodePriority>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff80 	bl	80015d4 <__NVIC_SetPriority>
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff54 	bl	8001598 <__NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff fee6 	bl	80014d4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e099      	b.n	8001848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001734:	e00f      	b.n	8001756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001736:	f7ff fecd 	bl	80014d4 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b05      	cmp	r3, #5
 8001742:	d908      	bls.n	8001756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e078      	b.n	8001848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1e8      	bne.n	8001736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <HAL_DMA_Init+0x158>)
 8001770:	4013      	ands	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d107      	bne.n	80017c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	4313      	orrs	r3, r2
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4313      	orrs	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f023 0307 	bic.w	r3, r3, #7
 80017d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d117      	bne.n	800181a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00e      	beq.n	800181a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fa7b 	bl	8001cf8 <DMA_CheckFifoParam>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2240      	movs	r2, #64	@ 0x40
 800180c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001816:	2301      	movs	r3, #1
 8001818:	e016      	b.n	8001848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fa32 	bl	8001c8c <DMA_CalcBaseAndBitshift>
 8001828:	4603      	mov	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	223f      	movs	r2, #63	@ 0x3f
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	f010803f 	.word	0xf010803f

08001854 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001862:	f7ff fe37 	bl	80014d4 <HAL_GetTick>
 8001866:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d008      	beq.n	8001886 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e052      	b.n	800192c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0216 	bic.w	r2, r2, #22
 8001894:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <HAL_DMA_Abort+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0208 	bic.w	r2, r2, #8
 80018c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d6:	e013      	b.n	8001900 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d8:	f7ff fdfc 	bl	80014d4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d90c      	bls.n	8001900 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2203      	movs	r2, #3
 80018f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e015      	b.n	800192c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e4      	bne.n	80018d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001912:	223f      	movs	r2, #63	@ 0x3f
 8001914:	409a      	lsls	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d004      	beq.n	8001952 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00c      	b.n	800196c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001984:	4b8e      	ldr	r3, [pc, #568]	@ (8001bc0 <HAL_DMA_IRQHandler+0x248>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a8e      	ldr	r2, [pc, #568]	@ (8001bc4 <HAL_DMA_IRQHandler+0x24c>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a2:	2208      	movs	r2, #8
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d01a      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0204 	bic.w	r2, r2, #4
 80019ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	2208      	movs	r2, #8
 80019d2:	409a      	lsls	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e8:	2201      	movs	r2, #1
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d012      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a06:	2201      	movs	r2, #1
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a12:	f043 0202 	orr.w	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1e:	2204      	movs	r2, #4
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d012      	beq.n	8001a50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a48:	f043 0204 	orr.w	r2, r3, #4
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	2210      	movs	r2, #16
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d043      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03c      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a72:	2210      	movs	r2, #16
 8001a74:	409a      	lsls	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d018      	beq.n	8001aba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d108      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d024      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
 8001aa6:	e01f      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
 8001ab8:	e016      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0208 	bic.w	r2, r2, #8
 8001ad6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aec:	2220      	movs	r2, #32
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 808f 	beq.w	8001c18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8087 	beq.w	8001c18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0e:	2220      	movs	r2, #32
 8001b10:	409a      	lsls	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d136      	bne.n	8001b90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0216 	bic.w	r2, r2, #22
 8001b30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <HAL_DMA_IRQHandler+0x1da>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0208 	bic.w	r2, r2, #8
 8001b60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	223f      	movs	r2, #63	@ 0x3f
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d07e      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
        }
        return;
 8001b8e:	e079      	b.n	8001c84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d01d      	beq.n	8001bda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d031      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e02c      	b.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
 8001bd8:	e01e      	b.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10f      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0210 	bic.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d032      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2205      	movs	r2, #5
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d307      	bcc.n	8001c60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f2      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x2cc>
 8001c5e:	e000      	b.n	8001c62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
 8001c82:	e000      	b.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c84:	bf00      	nop
    }
  }
}
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3b10      	subs	r3, #16
 8001c9c:	4a14      	ldr	r2, [pc, #80]	@ (8001cf0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ca6:	4a13      	ldr	r2, [pc, #76]	@ (8001cf4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d909      	bls.n	8001cce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	1d1a      	adds	r2, r3, #4
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ccc:	e007      	b.n	8001cde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	aaaaaaab 	.word	0xaaaaaaab
 8001cf4:	0800b5f4 	.word	0x0800b5f4

08001cf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d11f      	bne.n	8001d52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d856      	bhi.n	8001dc6 <DMA_CheckFifoParam+0xce>
 8001d18:	a201      	add	r2, pc, #4	@ (adr r2, 8001d20 <DMA_CheckFifoParam+0x28>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d31 	.word	0x08001d31
 8001d24:	08001d43 	.word	0x08001d43
 8001d28:	08001d31 	.word	0x08001d31
 8001d2c:	08001dc7 	.word	0x08001dc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d046      	beq.n	8001dca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d40:	e043      	b.n	8001dca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d4a:	d140      	bne.n	8001dce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d50:	e03d      	b.n	8001dce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d5a:	d121      	bne.n	8001da0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d837      	bhi.n	8001dd2 <DMA_CheckFifoParam+0xda>
 8001d62:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <DMA_CheckFifoParam+0x70>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001d79 	.word	0x08001d79
 8001d6c:	08001d7f 	.word	0x08001d7f
 8001d70:	08001d79 	.word	0x08001d79
 8001d74:	08001d91 	.word	0x08001d91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d7c:	e030      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d025      	beq.n	8001dd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d8e:	e022      	b.n	8001dd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d98:	d11f      	bne.n	8001dda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d9e:	e01c      	b.n	8001dda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d903      	bls.n	8001dae <DMA_CheckFifoParam+0xb6>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d003      	beq.n	8001db4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dac:	e018      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
      break;
 8001db2:	e015      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00e      	beq.n	8001dde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc4:	e00b      	b.n	8001dde <DMA_CheckFifoParam+0xe6>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e00a      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e008      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dce:	bf00      	nop
 8001dd0:	e006      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd2:	bf00      	nop
 8001dd4:	e004      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e002      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dde:	bf00      	nop
    }
  } 
  
  return status; 
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e165      	b.n	80020d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8154 	bne.w	80020d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d005      	beq.n	8001e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d130      	bne.n	8001ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0201 	and.w	r2, r3, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d017      	beq.n	8001ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d123      	bne.n	8001f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80ae 	beq.w	80020d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b5a      	ldr	r3, [pc, #360]	@ (80020f0 <HAL_GPIO_Init+0x300>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f92:	4a58      	ldr	r2, [pc, #352]	@ (80020f4 <HAL_GPIO_Init+0x304>)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80020f8 <HAL_GPIO_Init+0x308>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x21a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80020fc <HAL_GPIO_Init+0x30c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x216>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002100 <HAL_GPIO_Init+0x310>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x212>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002104 <HAL_GPIO_Init+0x314>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x20e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002108 <HAL_GPIO_Init+0x318>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x20a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800210c <HAL_GPIO_Init+0x31c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x206>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a49      	ldr	r2, [pc, #292]	@ (8002110 <HAL_GPIO_Init+0x320>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x202>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00c      	b.n	800200c <HAL_GPIO_Init+0x21c>
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	e00a      	b.n	800200c <HAL_GPIO_Init+0x21c>
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	e008      	b.n	800200c <HAL_GPIO_Init+0x21c>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x21c>
 8001ffe:	2303      	movs	r3, #3
 8002000:	e004      	b.n	800200c <HAL_GPIO_Init+0x21c>
 8002002:	2302      	movs	r3, #2
 8002004:	e002      	b.n	800200c <HAL_GPIO_Init+0x21c>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_GPIO_Init+0x21c>
 800200a:	2300      	movs	r3, #0
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	f002 0203 	and.w	r2, r2, #3
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	4093      	lsls	r3, r2
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800201c:	4935      	ldr	r1, [pc, #212]	@ (80020f4 <HAL_GPIO_Init+0x304>)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202a:	4b3a      	ldr	r3, [pc, #232]	@ (8002114 <HAL_GPIO_Init+0x324>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204e:	4a31      	ldr	r2, [pc, #196]	@ (8002114 <HAL_GPIO_Init+0x324>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002054:	4b2f      	ldr	r3, [pc, #188]	@ (8002114 <HAL_GPIO_Init+0x324>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002078:	4a26      	ldr	r2, [pc, #152]	@ (8002114 <HAL_GPIO_Init+0x324>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207e:	4b25      	ldr	r3, [pc, #148]	@ (8002114 <HAL_GPIO_Init+0x324>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002114 <HAL_GPIO_Init+0x324>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <HAL_GPIO_Init+0x324>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020cc:	4a11      	ldr	r2, [pc, #68]	@ (8002114 <HAL_GPIO_Init+0x324>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3301      	adds	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b0f      	cmp	r3, #15
 80020dc:	f67f ae96 	bls.w	8001e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3724      	adds	r7, #36	@ 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40013800 	.word	0x40013800
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40020400 	.word	0x40020400
 8002100:	40020800 	.word	0x40020800
 8002104:	40020c00 	.word	0x40020c00
 8002108:	40021000 	.word	0x40021000
 800210c:	40021400 	.word	0x40021400
 8002110:	40021800 	.word	0x40021800
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	619a      	str	r2, [r3, #24]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af02      	add	r7, sp, #8
 8002150:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e108      	b.n	800236e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff f8ea 	bl	8001350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800218a:	d102      	bne.n	8002192 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fa53 	bl	8005642 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7c1a      	ldrb	r2, [r3, #16]
 80021a4:	f88d 2000 	strb.w	r2, [sp]
 80021a8:	3304      	adds	r3, #4
 80021aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ac:	f003 f9d4 	bl	8005558 <USB_CoreInit>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0d5      	b.n	800236e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 fa4b 	bl	8005664 <USB_SetCurrentMode>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0c6      	b.n	800236e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e04a      	b.n	800227c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3315      	adds	r3, #21
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3314      	adds	r3, #20
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	b298      	uxth	r0, r3
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	332e      	adds	r3, #46	@ 0x2e
 8002222:	4602      	mov	r2, r0
 8002224:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3318      	adds	r3, #24
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	331c      	adds	r3, #28
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	3320      	adds	r3, #32
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3324      	adds	r3, #36	@ 0x24
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	3301      	adds	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	791b      	ldrb	r3, [r3, #4]
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	429a      	cmp	r2, r3
 8002284:	d3af      	bcc.n	80021e6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	e044      	b.n	8002316 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	791b      	ldrb	r3, [r3, #4]
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	429a      	cmp	r2, r3
 800231e:	d3b5      	bcc.n	800228c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7c1a      	ldrb	r2, [r3, #16]
 8002328:	f88d 2000 	strb.w	r2, [sp]
 800232c:	3304      	adds	r3, #4
 800232e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002330:	f003 f9e4 	bl	80056fc <USB_DevInit>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e013      	b.n	800236e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7b1b      	ldrb	r3, [r3, #12]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d102      	bne.n	8002362 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fa3b 	bl	80027d8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f004 f86d 	bl	8006446 <USB_DevDisconnect>

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_PCD_Start+0x1c>
 800238e:	2302      	movs	r3, #2
 8002390:	e022      	b.n	80023d8 <HAL_PCD_Start+0x62>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 f92e 	bl	8005620 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 f81b 	bl	8006404 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	70fb      	strb	r3, [r7, #3]
 80023f2:	460b      	mov	r3, r1
 80023f4:	803b      	strh	r3, [r7, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0f      	bge.n	8002426 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3310      	adds	r3, #16
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	705a      	strb	r2, [r3, #1]
 8002424:	e00f      	b.n	8002446 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	b2da      	uxtb	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002452:	883b      	ldrh	r3, [r7, #0]
 8002454:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	78ba      	ldrb	r2, [r7, #2]
 8002460:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002474:	78bb      	ldrb	r3, [r7, #2]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d102      	bne.n	8002480 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_PCD_EP_Open+0xae>
 800248a:	2302      	movs	r3, #2
 800248c:	e00e      	b.n	80024ac <HAL_PCD_EP_Open+0xcc>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fb04 	bl	8005aaa <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80024aa:	7afb      	ldrb	r3, [r7, #11]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da0f      	bge.n	80024e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 020f 	and.w	r2, r3, #15
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	3310      	adds	r3, #16
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	705a      	strb	r2, [r3, #1]
 80024e6:	e00f      	b.n	8002508 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	3304      	adds	r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_PCD_EP_Close+0x6e>
 800251e:	2302      	movs	r3, #2
 8002520:	e00e      	b.n	8002540 <HAL_PCD_EP_Close+0x8c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	4618      	mov	r0, r3
 8002532:	f003 fb41 	bl	8005bb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	460b      	mov	r3, r1
 8002556:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	b2da      	uxtb	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	799b      	ldrb	r3, [r3, #6]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d102      	bne.n	80025a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	799b      	ldrb	r3, [r3, #6]
 80025ac:	461a      	mov	r2, r3
 80025ae:	6979      	ldr	r1, [r7, #20]
 80025b0:	f003 fbde 	bl	8005d70 <USB_EPStartXfer>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	f003 020f 	and.w	r2, r3, #15
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80025e0:	681b      	ldr	r3, [r3, #0]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	460b      	mov	r3, r1
 80025fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	3310      	adds	r3, #16
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2200      	movs	r2, #0
 8002626:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2201      	movs	r2, #1
 800262c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	b2da      	uxtb	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	799b      	ldrb	r3, [r3, #6]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	799b      	ldrb	r3, [r3, #6]
 8002650:	461a      	mov	r2, r3
 8002652:	6979      	ldr	r1, [r7, #20]
 8002654:	f003 fb8c 	bl	8005d70 <USB_EPStartXfer>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	7912      	ldrb	r2, [r2, #4]
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e04f      	b.n	8002720 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002684:	2b00      	cmp	r3, #0
 8002686:	da0f      	bge.n	80026a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 020f 	and.w	r2, r3, #15
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	3310      	adds	r3, #16
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	3304      	adds	r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	705a      	strb	r2, [r3, #1]
 80026a6:	e00d      	b.n	80026c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_PCD_EP_SetStall+0x82>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e01d      	b.n	8002720 <HAL_PCD_EP_SetStall+0xbe>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 fe18 	bl	8006328 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7999      	ldrb	r1, [r3, #6]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002710:	461a      	mov	r2, r3
 8002712:	f003 fec7 	bl	80064a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
 8002734:	4613      	mov	r3, r2
 8002736:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002746:	883b      	ldrh	r3, [r7, #0]
 8002748:	0419      	lsls	r1, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	430a      	orrs	r2, r1
 8002752:	629a      	str	r2, [r3, #40]	@ 0x28
 8002754:	e028      	b.n	80027a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4413      	add	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e00d      	b.n	8002786 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	3340      	adds	r3, #64	@ 0x40
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4413      	add	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	3301      	adds	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	3b01      	subs	r3, #1
 800278c:	429a      	cmp	r2, r3
 800278e:	d3ec      	bcc.n	800276a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002790:	883b      	ldrh	r3, [r7, #0]
 8002792:	0418      	lsls	r0, r3, #16
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	3b01      	subs	r3, #1
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	4302      	orrs	r2, r0
 80027a0:	3340      	adds	r3, #64	@ 0x40
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280a:	f043 0303 	orr.w	r3, r3, #3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0cc      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b68      	ldr	r3, [pc, #416]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d90c      	bls.n	800285c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b63      	ldr	r3, [pc, #396]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b8      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002874:	4b59      	ldr	r3, [pc, #356]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a58      	ldr	r2, [pc, #352]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800287e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800288c:	4b53      	ldr	r3, [pc, #332]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a52      	ldr	r2, [pc, #328]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	494d      	ldr	r1, [pc, #308]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d044      	beq.n	8002940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b47      	ldr	r3, [pc, #284]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d119      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d003      	beq.n	80028de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b3f      	ldr	r3, [pc, #252]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b3b      	ldr	r3, [pc, #236]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e067      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4934      	ldr	r1, [pc, #208]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002910:	f7fe fde0 	bl	80014d4 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fddc 	bl	80014d4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e04f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2b      	ldr	r3, [pc, #172]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d20c      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e032      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4916      	ldr	r1, [pc, #88]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	490e      	ldr	r1, [pc, #56]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029a6:	f000 fbb1 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	490a      	ldr	r1, [pc, #40]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a09      	ldr	r2, [pc, #36]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f9f0 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	0800b5dc 	.word	0x0800b5dc
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b03      	ldr	r3, [pc, #12]	@ (8002a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000000 	.word	0x20000000

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a08:	f7ff fff0 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0a9b      	lsrs	r3, r3, #10
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	0800b5ec 	.word	0x0800b5ec

08002a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a30:	f7ff ffdc 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0b5b      	lsrs	r3, r3, #13
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	@ (8002a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	0800b5ec 	.word	0x0800b5ec

08002a54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	220f      	movs	r2, #15
 8002a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0203 	and.w	r2, r3, #3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a70:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a96:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <HAL_RCC_GetClockConfig+0x60>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	601a      	str	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40023c00 	.word	0x40023c00

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	@ 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002af0:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afe:	496c      	ldr	r1, [pc, #432]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d010      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002b1e:	4b64      	ldr	r3, [pc, #400]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b24:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	4960      	ldr	r1, [pc, #384]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d017      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b4c:	4b58      	ldr	r3, [pc, #352]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	4955      	ldr	r1, [pc, #340]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b88:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b96:	4946      	ldr	r1, [pc, #280]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ba6:	d101      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 808a 	beq.w	8002cda <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	4a38      	ldr	r2, [pc, #224]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd6:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002be2:	4b34      	ldr	r3, [pc, #208]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a33      	ldr	r2, [pc, #204]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bee:	f7fe fc71 	bl	80014d4 <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fe fc6d 	bl	80014d4 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e278      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c14:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02f      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d028      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c32:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c42:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c4e:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d114      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fc3b 	bl	80014d4 <HAL_GetTick>
 8002c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe fc37 	bl	80014d4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e240      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ee      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c90:	d114      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca6:	4902      	ldr	r1, [pc, #8]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]
 8002cac:	e00c      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	42470e40 	.word	0x42470e40
 8002cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cc6:	6093      	str	r3, [r2, #8]
 8002cc8:	4b47      	ldr	r3, [pc, #284]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	4944      	ldr	r1, [pc, #272]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002cec:	4b3f      	ldr	r3, [pc, #252]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002cee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0a:	4937      	ldr	r1, [pc, #220]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d1e:	4b32      	ldr	r3, [pc, #200]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d24:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	492e      	ldr	r1, [pc, #184]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d011      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d40:	4b29      	ldr	r3, [pc, #164]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d46:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4e:	4926      	ldr	r1, [pc, #152]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002d60:	2301      	movs	r3, #1
 8002d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002d70:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	491a      	ldr	r1, [pc, #104]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d011      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da0:	4911      	ldr	r1, [pc, #68]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002db0:	d101      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002db2:	2301      	movs	r3, #1
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc4:	f040 80ff 	bne.w	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dce:	f7fe fb81 	bl	80014d4 <HAL_GetTick>
 8002dd2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dd4:	e00e      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dd6:	f7fe fb7d 	bl	80014d4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d907      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e188      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	424711e0 	.word	0x424711e0
 8002df0:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002df4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ea      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d028      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d124      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e28:	4b71      	ldr	r3, [pc, #452]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	3301      	adds	r3, #1
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e40:	0e1b      	lsrs	r3, r3, #24
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	019b      	lsls	r3, r3, #6
 8002e52:	431a      	orrs	r2, r3
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	071b      	lsls	r3, r3, #28
 8002e6a:	4961      	ldr	r1, [pc, #388]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d035      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e9c:	d130      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e9e:	4b54      	ldr	r3, [pc, #336]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb6:	0f1b      	lsrs	r3, r3, #28
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	431a      	orrs	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	071b      	lsls	r3, r3, #28
 8002ee0:	4943      	ldr	r1, [pc, #268]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ee8:	4b41      	ldr	r3, [pc, #260]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eee:	f023 021f 	bic.w	r2, r3, #31
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	493d      	ldr	r1, [pc, #244]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d029      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f14:	d124      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f16:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f28:	4b31      	ldr	r3, [pc, #196]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f2e:	0f1b      	lsrs	r3, r3, #28
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	019b      	lsls	r3, r3, #6
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	041b      	lsls	r3, r3, #16
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	431a      	orrs	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	071b      	lsls	r3, r3, #28
 8002f58:	4925      	ldr	r1, [pc, #148]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d016      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	071b      	lsls	r3, r3, #28
 8002f92:	4917      	ldr	r1, [pc, #92]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fa98 	bl	80014d4 <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa8:	f7fe fa94 	bl	80014d4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e09f      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 8095 	bne.w	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fce:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fd4:	f7fe fa7e 	bl	80014d4 <HAL_GetTick>
 8002fd8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fda:	e00f      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fdc:	f7fe fa7a 	bl	80014d4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d908      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e085      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	42470068 	.word	0x42470068
 8002ff8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ffc:	4b41      	ldr	r3, [pc, #260]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003008:	d0e8      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02b      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302e:	2b00      	cmp	r3, #0
 8003030:	d127      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003032:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	019b      	lsls	r3, r3, #6
 800304e:	431a      	orrs	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	3b01      	subs	r3, #1
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	4928      	ldr	r1, [pc, #160]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003068:	4b26      	ldr	r3, [pc, #152]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800306a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800306e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	3b01      	subs	r3, #1
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	4922      	ldr	r1, [pc, #136]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01d      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003096:	d118      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003098:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	0e1b      	lsrs	r3, r3, #24
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	019b      	lsls	r3, r3, #6
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	3b01      	subs	r3, #1
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	4910      	ldr	r1, [pc, #64]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d0:	f7fe fa00 	bl	80014d4 <HAL_GetTick>
 80030d4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030d8:	f7fe f9fc 	bl	80014d4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e007      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f6:	d1ef      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3730      	adds	r7, #48	@ 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	42470070 	.word	0x42470070

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b0ae      	sub	sp, #184	@ 0xb8
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003132:	4bcb      	ldr	r3, [pc, #812]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b0c      	cmp	r3, #12
 800313c:	f200 8206 	bhi.w	800354c <HAL_RCC_GetSysClockFreq+0x440>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	0800317d 	.word	0x0800317d
 800314c:	0800354d 	.word	0x0800354d
 8003150:	0800354d 	.word	0x0800354d
 8003154:	0800354d 	.word	0x0800354d
 8003158:	08003185 	.word	0x08003185
 800315c:	0800354d 	.word	0x0800354d
 8003160:	0800354d 	.word	0x0800354d
 8003164:	0800354d 	.word	0x0800354d
 8003168:	0800318d 	.word	0x0800318d
 800316c:	0800354d 	.word	0x0800354d
 8003170:	0800354d 	.word	0x0800354d
 8003174:	0800354d 	.word	0x0800354d
 8003178:	0800337d 	.word	0x0800337d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4bb9      	ldr	r3, [pc, #740]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x358>)
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003182:	e1e7      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003184:	4bb8      	ldr	r3, [pc, #736]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800318a:	e1e3      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800318c:	4bb4      	ldr	r3, [pc, #720]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003198:	4bb1      	ldr	r3, [pc, #708]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d071      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a4:	4bae      	ldr	r3, [pc, #696]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031ca:	4622      	mov	r2, r4
 80031cc:	462b      	mov	r3, r5
 80031ce:	f04f 0000 	mov.w	r0, #0
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	0159      	lsls	r1, r3, #5
 80031d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031dc:	0150      	lsls	r0, r2, #5
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4621      	mov	r1, r4
 80031e4:	1a51      	subs	r1, r2, r1
 80031e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80031e8:	4629      	mov	r1, r5
 80031ea:	eb63 0301 	sbc.w	r3, r3, r1
 80031ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031fc:	4649      	mov	r1, r9
 80031fe:	018b      	lsls	r3, r1, #6
 8003200:	4641      	mov	r1, r8
 8003202:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003206:	4641      	mov	r1, r8
 8003208:	018a      	lsls	r2, r1, #6
 800320a:	4641      	mov	r1, r8
 800320c:	1a51      	subs	r1, r2, r1
 800320e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003210:	4649      	mov	r1, r9
 8003212:	eb63 0301 	sbc.w	r3, r3, r1
 8003216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003224:	4649      	mov	r1, r9
 8003226:	00cb      	lsls	r3, r1, #3
 8003228:	4641      	mov	r1, r8
 800322a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322e:	4641      	mov	r1, r8
 8003230:	00ca      	lsls	r2, r1, #3
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	4603      	mov	r3, r0
 8003238:	4622      	mov	r2, r4
 800323a:	189b      	adds	r3, r3, r2
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30
 800323e:	462b      	mov	r3, r5
 8003240:	460a      	mov	r2, r1
 8003242:	eb42 0303 	adc.w	r3, r2, r3
 8003246:	637b      	str	r3, [r7, #52]	@ 0x34
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003254:	4629      	mov	r1, r5
 8003256:	024b      	lsls	r3, r1, #9
 8003258:	4621      	mov	r1, r4
 800325a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800325e:	4621      	mov	r1, r4
 8003260:	024a      	lsls	r2, r1, #9
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003270:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003274:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003278:	f7fd f822 	bl	80002c0 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4613      	mov	r3, r2
 8003282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003286:	e067      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003288:	4b75      	ldr	r3, [pc, #468]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	099b      	lsrs	r3, r3, #6
 800328e:	2200      	movs	r2, #0
 8003290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003294:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800329c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032a2:	2300      	movs	r3, #0
 80032a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80032aa:	4622      	mov	r2, r4
 80032ac:	462b      	mov	r3, r5
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	0159      	lsls	r1, r3, #5
 80032b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032bc:	0150      	lsls	r0, r2, #5
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4621      	mov	r1, r4
 80032c4:	1a51      	subs	r1, r2, r1
 80032c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032c8:	4629      	mov	r1, r5
 80032ca:	eb63 0301 	sbc.w	r3, r3, r1
 80032ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032dc:	4649      	mov	r1, r9
 80032de:	018b      	lsls	r3, r1, #6
 80032e0:	4641      	mov	r1, r8
 80032e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e6:	4641      	mov	r1, r8
 80032e8:	018a      	lsls	r2, r1, #6
 80032ea:	4641      	mov	r1, r8
 80032ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80032f0:	4649      	mov	r1, r9
 80032f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003302:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800330a:	4692      	mov	sl, r2
 800330c:	469b      	mov	fp, r3
 800330e:	4623      	mov	r3, r4
 8003310:	eb1a 0303 	adds.w	r3, sl, r3
 8003314:	623b      	str	r3, [r7, #32]
 8003316:	462b      	mov	r3, r5
 8003318:	eb4b 0303 	adc.w	r3, fp, r3
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800332a:	4629      	mov	r1, r5
 800332c:	028b      	lsls	r3, r1, #10
 800332e:	4621      	mov	r1, r4
 8003330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003334:	4621      	mov	r1, r4
 8003336:	028a      	lsls	r2, r1, #10
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003340:	2200      	movs	r2, #0
 8003342:	673b      	str	r3, [r7, #112]	@ 0x70
 8003344:	677a      	str	r2, [r7, #116]	@ 0x74
 8003346:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800334a:	f7fc ffb9 	bl	80002c0 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4613      	mov	r3, r2
 8003354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003358:	4b41      	ldr	r3, [pc, #260]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800336a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800336e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800337a:	e0eb      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337c:	4b38      	ldr	r3, [pc, #224]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003384:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003388:	4b35      	ldr	r3, [pc, #212]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d06b      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003394:	4b32      	ldr	r3, [pc, #200]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x354>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	2200      	movs	r2, #0
 800339c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800339e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80033a8:	2300      	movs	r3, #0
 80033aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80033ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033b0:	4622      	mov	r2, r4
 80033b2:	462b      	mov	r3, r5
 80033b4:	f04f 0000 	mov.w	r0, #0
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	0159      	lsls	r1, r3, #5
 80033be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c2:	0150      	lsls	r0, r2, #5
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4621      	mov	r1, r4
 80033ca:	1a51      	subs	r1, r2, r1
 80033cc:	61b9      	str	r1, [r7, #24]
 80033ce:	4629      	mov	r1, r5
 80033d0:	eb63 0301 	sbc.w	r3, r3, r1
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033e2:	4659      	mov	r1, fp
 80033e4:	018b      	lsls	r3, r1, #6
 80033e6:	4651      	mov	r1, sl
 80033e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ec:	4651      	mov	r1, sl
 80033ee:	018a      	lsls	r2, r1, #6
 80033f0:	4651      	mov	r1, sl
 80033f2:	ebb2 0801 	subs.w	r8, r2, r1
 80033f6:	4659      	mov	r1, fp
 80033f8:	eb63 0901 	sbc.w	r9, r3, r1
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003408:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800340c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003410:	4690      	mov	r8, r2
 8003412:	4699      	mov	r9, r3
 8003414:	4623      	mov	r3, r4
 8003416:	eb18 0303 	adds.w	r3, r8, r3
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	462b      	mov	r3, r5
 800341e:	eb49 0303 	adc.w	r3, r9, r3
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003430:	4629      	mov	r1, r5
 8003432:	024b      	lsls	r3, r1, #9
 8003434:	4621      	mov	r1, r4
 8003436:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800343a:	4621      	mov	r1, r4
 800343c:	024a      	lsls	r2, r1, #9
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003446:	2200      	movs	r2, #0
 8003448:	65bb      	str	r3, [r7, #88]	@ 0x58
 800344a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800344c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003450:	f7fc ff36 	bl	80002c0 <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4613      	mov	r3, r2
 800345a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800345e:	e065      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x420>
 8003460:	40023800 	.word	0x40023800
 8003464:	00f42400 	.word	0x00f42400
 8003468:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346c:	4b3d      	ldr	r3, [pc, #244]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x458>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	099b      	lsrs	r3, r3, #6
 8003472:	2200      	movs	r2, #0
 8003474:	4618      	mov	r0, r3
 8003476:	4611      	mov	r1, r2
 8003478:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800347c:	653b      	str	r3, [r7, #80]	@ 0x50
 800347e:	2300      	movs	r3, #0
 8003480:	657b      	str	r3, [r7, #84]	@ 0x54
 8003482:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003486:	4642      	mov	r2, r8
 8003488:	464b      	mov	r3, r9
 800348a:	f04f 0000 	mov.w	r0, #0
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003498:	0150      	lsls	r0, r2, #5
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4641      	mov	r1, r8
 80034a0:	1a51      	subs	r1, r2, r1
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	4649      	mov	r1, r9
 80034a6:	eb63 0301 	sbc.w	r3, r3, r1
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034b8:	4659      	mov	r1, fp
 80034ba:	018b      	lsls	r3, r1, #6
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c2:	4651      	mov	r1, sl
 80034c4:	018a      	lsls	r2, r1, #6
 80034c6:	4651      	mov	r1, sl
 80034c8:	1a54      	subs	r4, r2, r1
 80034ca:	4659      	mov	r1, fp
 80034cc:	eb63 0501 	sbc.w	r5, r3, r1
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	00eb      	lsls	r3, r5, #3
 80034da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034de:	00e2      	lsls	r2, r4, #3
 80034e0:	4614      	mov	r4, r2
 80034e2:	461d      	mov	r5, r3
 80034e4:	4643      	mov	r3, r8
 80034e6:	18e3      	adds	r3, r4, r3
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	464b      	mov	r3, r9
 80034ec:	eb45 0303 	adc.w	r3, r5, r3
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fe:	4629      	mov	r1, r5
 8003500:	028b      	lsls	r3, r1, #10
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003508:	4621      	mov	r1, r4
 800350a:	028a      	lsls	r2, r1, #10
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003514:	2200      	movs	r2, #0
 8003516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003518:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800351a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800351e:	f7fc fecf 	bl	80002c0 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4613      	mov	r3, r2
 8003528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800352c:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x458>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0f1b      	lsrs	r3, r3, #28
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800353a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800353e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800354a:	e003      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x45c>)
 800354e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003552:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003558:	4618      	mov	r0, r3
 800355a:	37b8      	adds	r7, #184	@ 0xb8
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400

0800356c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e28d      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8083 	beq.w	8003692 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800358c:	4b94      	ldr	r3, [pc, #592]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b04      	cmp	r3, #4
 8003596:	d019      	beq.n	80035cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003598:	4b91      	ldr	r3, [pc, #580]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
        || \
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035a4:	4b8e      	ldr	r3, [pc, #568]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b0:	d00c      	beq.n	80035cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b8b      	ldr	r3, [pc, #556]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d112      	bne.n	80035e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035be:	4b88      	ldr	r3, [pc, #544]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	4b84      	ldr	r3, [pc, #528]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d05b      	beq.n	8003690 <HAL_RCC_OscConfig+0x124>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d157      	bne.n	8003690 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e25a      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ec:	d106      	bne.n	80035fc <HAL_RCC_OscConfig+0x90>
 80035ee:	4b7c      	ldr	r3, [pc, #496]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a7b      	ldr	r2, [pc, #492]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e01d      	b.n	8003638 <HAL_RCC_OscConfig+0xcc>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0xb4>
 8003606:	4b76      	ldr	r3, [pc, #472]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a75      	ldr	r2, [pc, #468]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 800360c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b73      	ldr	r3, [pc, #460]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a72      	ldr	r2, [pc, #456]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e00b      	b.n	8003638 <HAL_RCC_OscConfig+0xcc>
 8003620:	4b6f      	ldr	r3, [pc, #444]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6e      	ldr	r2, [pc, #440]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b6c      	ldr	r3, [pc, #432]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a6b      	ldr	r2, [pc, #428]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd ff48 	bl	80014d4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003648:	f7fd ff44 	bl	80014d4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	@ 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e21f      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b61      	ldr	r3, [pc, #388]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0xdc>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd ff34 	bl	80014d4 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fd ff30 	bl	80014d4 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e20b      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	4b57      	ldr	r3, [pc, #348]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x104>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d06f      	beq.n	800377e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800369e:	4b50      	ldr	r3, [pc, #320]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d017      	beq.n	80036da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036aa:	4b4d      	ldr	r3, [pc, #308]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d105      	bne.n	80036c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036b6:	4b4a      	ldr	r3, [pc, #296]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c2:	4b47      	ldr	r3, [pc, #284]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d11c      	bne.n	8003708 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ce:	4b44      	ldr	r3, [pc, #272]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x186>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1d3      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4937      	ldr	r1, [pc, #220]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	e03a      	b.n	800377e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b34      	ldr	r3, [pc, #208]	@ (80037e4 <HAL_RCC_OscConfig+0x278>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fd fedd 	bl	80014d4 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371e:	f7fd fed9 	bl	80014d4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1b4      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	4b2b      	ldr	r3, [pc, #172]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4925      	ldr	r1, [pc, #148]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	e015      	b.n	800377e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <HAL_RCC_OscConfig+0x278>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fd febc 	bl	80014d4 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003760:	f7fd feb8 	bl	80014d4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e193      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d036      	beq.n	80037f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d016      	beq.n	80037c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b15      	ldr	r3, [pc, #84]	@ (80037e8 <HAL_RCC_OscConfig+0x27c>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd fe9c 	bl	80014d4 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fd fe98 	bl	80014d4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e173      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <HAL_RCC_OscConfig+0x274>)
 80037b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x234>
 80037be:	e01b      	b.n	80037f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c0:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fd fe85 	bl	80014d4 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	e00e      	b.n	80037ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ce:	f7fd fe81 	bl	80014d4 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d907      	bls.n	80037ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e15c      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	42470000 	.word	0x42470000
 80037e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	4b8a      	ldr	r3, [pc, #552]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ea      	bne.n	80037ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8097 	beq.w	8003934 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380a:	4b83      	ldr	r3, [pc, #524]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	@ 0x40
 8003826:	4b7c      	ldr	r3, [pc, #496]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b79      	ldr	r3, [pc, #484]	@ (8003a1c <HAL_RCC_OscConfig+0x4b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003842:	4b76      	ldr	r3, [pc, #472]	@ (8003a1c <HAL_RCC_OscConfig+0x4b0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a75      	ldr	r2, [pc, #468]	@ (8003a1c <HAL_RCC_OscConfig+0x4b0>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fd fe41 	bl	80014d4 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fd fe3d 	bl	80014d4 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e118      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b6c      	ldr	r3, [pc, #432]	@ (8003a1c <HAL_RCC_OscConfig+0x4b0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x31e>
 800387c:	4b66      	ldr	r3, [pc, #408]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a65      	ldr	r2, [pc, #404]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	e01c      	b.n	80038c4 <HAL_RCC_OscConfig+0x358>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x340>
 8003892:	4b61      	ldr	r3, [pc, #388]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003896:	4a60      	ldr	r2, [pc, #384]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	@ 0x70
 800389e:	4b5e      	ldr	r3, [pc, #376]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0x358>
 80038ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a59      	ldr	r2, [pc, #356]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	4b57      	ldr	r3, [pc, #348]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	4a56      	ldr	r2, [pc, #344]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd fe02 	bl	80014d4 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fd fdfe 	bl	80014d4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0d7      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ee      	beq.n	80038d4 <HAL_RCC_OscConfig+0x368>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fd fdec 	bl	80014d4 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fd fde8 	bl	80014d4 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0c1      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	4b40      	ldr	r3, [pc, #256]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ee      	bne.n	8003900 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b3b      	ldr	r3, [pc, #236]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003932:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80ad 	beq.w	8003a98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393e:	4b36      	ldr	r3, [pc, #216]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b08      	cmp	r3, #8
 8003948:	d060      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d145      	bne.n	80039de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b33      	ldr	r3, [pc, #204]	@ (8003a20 <HAL_RCC_OscConfig+0x4b4>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fdbc 	bl	80014d4 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fdb8 	bl	80014d4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e093      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b29      	ldr	r3, [pc, #164]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	071b      	lsls	r3, r3, #28
 80039aa:	491b      	ldr	r1, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <HAL_RCC_OscConfig+0x4b4>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd fd8d 	bl	80014d4 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd fd89 	bl	80014d4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e064      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x452>
 80039dc:	e05c      	b.n	8003a98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_RCC_OscConfig+0x4b4>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd fd76 	bl	80014d4 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fd fd72 	bl	80014d4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04d      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x480>
 8003a0a:	e045      	b.n	8003a98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e040      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a24:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa4 <HAL_RCC_OscConfig+0x538>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d030      	beq.n	8003a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d129      	bne.n	8003a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d122      	bne.n	8003a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d119      	bne.n	8003a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d10f      	bne.n	8003a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e07b      	b.n	8003bb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d108      	bne.n	8003ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aca:	d009      	beq.n	8003ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61da      	str	r2, [r3, #28]
 8003ad2:	e005      	b.n	8003ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd f87e 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b64:	ea42 0103 	orr.w	r1, r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	f003 0104 	and.w	r1, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	f003 0210 	and.w	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ba0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e041      	b.n	8003c50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f839 	bl	8003c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f000 faf3 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d001      	beq.n	8003c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e04e      	b.n	8003d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	@ (8003d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x80>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cae:	d01d      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x80>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x80>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x80>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x80>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x80>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a19      	ldr	r2, [pc, #100]	@ (8003d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x80>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a18      	ldr	r2, [pc, #96]	@ (8003d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d010      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	e007      	b.n	8003d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40010400 	.word	0x40010400
 8003d44:	40014000 	.word	0x40014000
 8003d48:	40001800 	.word	0x40001800

08003d4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e097      	b.n	8003e90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fd f9fd 	bl	8001174 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d90:	f023 0307 	bic.w	r3, r3, #7
 8003d94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f000 fa1f 	bl	80041e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	4313      	orrs	r3, r2
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003dec:	f023 030c 	bic.w	r3, r3, #12
 8003df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003df8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	011a      	lsls	r2, r3, #4
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	031b      	lsls	r3, r3, #12
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ea8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003eb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ec0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d110      	bne.n	8003eea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d102      	bne.n	8003ed4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ece:	7b7b      	ldrb	r3, [r7, #13]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e069      	b.n	8003fac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ee8:	e031      	b.n	8003f4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d110      	bne.n	8003f12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ef0:	7bbb      	ldrb	r3, [r7, #14]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d102      	bne.n	8003efc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ef6:	7b3b      	ldrb	r3, [r7, #12]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d001      	beq.n	8003f00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e055      	b.n	8003fac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f10:	e01d      	b.n	8003f4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d108      	bne.n	8003f2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f18:	7bbb      	ldrb	r3, [r7, #14]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d105      	bne.n	8003f2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f1e:	7b7b      	ldrb	r3, [r7, #13]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d102      	bne.n	8003f2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f24:	7b3b      	ldrb	r3, [r7, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e03e      	b.n	8003fac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2202      	movs	r2, #2
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_TIM_Encoder_Start+0xc4>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d008      	beq.n	8003f6c <HAL_TIM_Encoder_Start+0xd4>
 8003f5a:	e00f      	b.n	8003f7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2201      	movs	r2, #1
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f9e9 	bl	800433c <TIM_CCxChannelCmd>
      break;
 8003f6a:	e016      	b.n	8003f9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	2104      	movs	r1, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f9e1 	bl	800433c <TIM_CCxChannelCmd>
      break;
 8003f7a:	e00e      	b.n	8003f9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2201      	movs	r2, #1
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f9d9 	bl	800433c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	2104      	movs	r1, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f9d2 	bl	800433c <TIM_CCxChannelCmd>
      break;
 8003f98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d020      	beq.n	8004018 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0202 	mvn.w	r2, #2
 8003fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8d2 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8c4 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8d5 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d020      	beq.n	8004064 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01b      	beq.n	8004064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0204 	mvn.w	r2, #4
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8ac 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f89e 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f8af 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d020      	beq.n	80040b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01b      	beq.n	80040b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0208 	mvn.w	r2, #8
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2204      	movs	r2, #4
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f886 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f878 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f889 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d020      	beq.n	80040fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0210 	mvn.w	r2, #16
 80040cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2208      	movs	r2, #8
 80040d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f860 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f852 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f863 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0201 	mvn.w	r2, #1
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fd20 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9a8 	bl	8004494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f834 	bl	80041d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0220 	mvn.w	r2, #32
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f97a 	bl	8004480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a46      	ldr	r2, [pc, #280]	@ (8004310 <TIM_Base_SetConfig+0x12c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004202:	d00f      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a43      	ldr	r2, [pc, #268]	@ (8004314 <TIM_Base_SetConfig+0x130>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00b      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a42      	ldr	r2, [pc, #264]	@ (8004318 <TIM_Base_SetConfig+0x134>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a41      	ldr	r2, [pc, #260]	@ (800431c <TIM_Base_SetConfig+0x138>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a40      	ldr	r2, [pc, #256]	@ (8004320 <TIM_Base_SetConfig+0x13c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d108      	bne.n	8004236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a35      	ldr	r2, [pc, #212]	@ (8004310 <TIM_Base_SetConfig+0x12c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004244:	d027      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <TIM_Base_SetConfig+0x130>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d023      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a31      	ldr	r2, [pc, #196]	@ (8004318 <TIM_Base_SetConfig+0x134>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a30      	ldr	r2, [pc, #192]	@ (800431c <TIM_Base_SetConfig+0x138>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2f      	ldr	r2, [pc, #188]	@ (8004320 <TIM_Base_SetConfig+0x13c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d017      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2e      	ldr	r2, [pc, #184]	@ (8004324 <TIM_Base_SetConfig+0x140>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2d      	ldr	r2, [pc, #180]	@ (8004328 <TIM_Base_SetConfig+0x144>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00f      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <TIM_Base_SetConfig+0x148>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2b      	ldr	r2, [pc, #172]	@ (8004330 <TIM_Base_SetConfig+0x14c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2a      	ldr	r2, [pc, #168]	@ (8004334 <TIM_Base_SetConfig+0x150>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a29      	ldr	r2, [pc, #164]	@ (8004338 <TIM_Base_SetConfig+0x154>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a10      	ldr	r2, [pc, #64]	@ (8004310 <TIM_Base_SetConfig+0x12c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_Base_SetConfig+0xf8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a12      	ldr	r2, [pc, #72]	@ (8004320 <TIM_Base_SetConfig+0x13c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d105      	bne.n	8004302 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]
  }
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40010400 	.word	0x40010400
 8004324:	40014000 	.word	0x40014000
 8004328:	40014400 	.word	0x40014400
 800432c:	40014800 	.word	0x40014800
 8004330:	40001800 	.word	0x40001800
 8004334:	40001c00 	.word	0x40001c00
 8004338:	40002000 	.word	0x40002000

0800433c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2201      	movs	r2, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	43db      	mvns	r3, r3
 800435e:	401a      	ands	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1a      	ldr	r2, [r3, #32]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	431a      	orrs	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800439c:	2302      	movs	r3, #2
 800439e:	e05a      	b.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a21      	ldr	r2, [pc, #132]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ec:	d01d      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1a      	ldr	r2, [pc, #104]	@ (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a18      	ldr	r2, [pc, #96]	@ (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a17      	ldr	r2, [pc, #92]	@ (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a15      	ldr	r2, [pc, #84]	@ (800447c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10c      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4313      	orrs	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40010400 	.word	0x40010400
 8004478:	40014000 	.word	0x40014000
 800447c:	40001800 	.word	0x40001800

08004480 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e042      	b.n	8004540 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc fec0 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	@ 0x24
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fdbf 	bl	8005070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b20      	cmp	r3, #32
 8004566:	d175      	bne.n	8004654 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Transmit+0x2c>
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e06e      	b.n	8004656 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2221      	movs	r2, #33	@ 0x21
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004586:	f7fc ffa5 	bl	80014d4 <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a0:	d108      	bne.n	80045b4 <HAL_UART_Transmit+0x6c>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d104      	bne.n	80045b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e003      	b.n	80045bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045bc:	e02e      	b.n	800461c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2180      	movs	r1, #128	@ 0x80
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fb21 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e03a      	b.n	8004656 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	3302      	adds	r3, #2
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	e007      	b.n	800460e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3301      	adds	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1cb      	bne.n	80045be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2200      	movs	r2, #0
 800462e:	2140      	movs	r1, #64	@ 0x40
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 faed 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e006      	b.n	8004656 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	4613      	mov	r3, r2
 800466a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b20      	cmp	r3, #32
 8004676:	d112      	bne.n	800469e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_UART_Receive_IT+0x26>
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e00b      	b.n	80046a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	461a      	mov	r2, r3
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fb14 	bl	8004cc2 <UART_Start_Receive_IT>
 800469a:	4603      	mov	r3, r0
 800469c:	e000      	b.n	80046a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b0ba      	sub	sp, #232	@ 0xe8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_UART_IRQHandler+0x66>
 80046fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fbf4 	bl	8004ef4 <UART_Receive_IT>
      return;
 800470c:	e25b      	b.n	8004bc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800470e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80de 	beq.w	80048d4 <HAL_UART_IRQHandler+0x22c>
 8004718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004728:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80d1 	beq.w	80048d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_UART_IRQHandler+0xae>
 800473e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	f043 0201 	orr.w	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_UART_IRQHandler+0xd2>
 8004762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_UART_IRQHandler+0xf6>
 8004786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	f043 0204 	orr.w	r2, r3, #4
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d011      	beq.n	80047ce <HAL_UART_IRQHandler+0x126>
 80047aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	f043 0208 	orr.w	r2, r3, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 81f2 	beq.w	8004bbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_UART_IRQHandler+0x14e>
 80047e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fb7f 	bl	8004ef4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004800:	2b40      	cmp	r3, #64	@ 0x40
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <HAL_UART_IRQHandler+0x17a>
 800481a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d04f      	beq.n	80048c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa87 	bl	8004d36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004832:	2b40      	cmp	r3, #64	@ 0x40
 8004834:	d141      	bne.n	80048ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3314      	adds	r3, #20
 800483c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800484c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004862:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004866:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800486e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800487a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1d9      	bne.n	8004836 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d013      	beq.n	80048b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a88 <HAL_UART_IRQHandler+0x3e0>)
 8004890:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd f84c 	bl	8001934 <HAL_DMA_Abort_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048ac:	4610      	mov	r0, r2
 80048ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	e00e      	b.n	80048d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc f90a 	bl	8000acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	e00a      	b.n	80048d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc f906 	bl	8000acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	e006      	b.n	80048d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc f902 	bl	8000acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048ce:	e175      	b.n	8004bbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	bf00      	nop
    return;
 80048d2:	e173      	b.n	8004bbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d8:	2b01      	cmp	r3, #1
 80048da:	f040 814f 	bne.w	8004b7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8148 	beq.w	8004b7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8141 	beq.w	8004b7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491a:	2b40      	cmp	r3, #64	@ 0x40
 800491c:	f040 80b6 	bne.w	8004a8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800492c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8145 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800493a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800493e:	429a      	cmp	r2, r3
 8004940:	f080 813e 	bcs.w	8004bc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800494a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004956:	f000 8088 	beq.w	8004a6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004970:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800498a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004992:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800499e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1d9      	bne.n	800495a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3314      	adds	r3, #20
 80049ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e1      	bne.n	80049a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3314      	adds	r3, #20
 8004a02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e3      	bne.n	80049e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a3a:	f023 0310 	bic.w	r3, r3, #16
 8004a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e3      	bne.n	8004a28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fc fef5 	bl	8001854 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8ad 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a86:	e09b      	b.n	8004bc0 <HAL_UART_IRQHandler+0x518>
 8004a88:	08004dfd 	.word	0x08004dfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 808e 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8089 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	330c      	adds	r3, #12
 8004ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ad6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ad8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004adc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e3      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	623b      	str	r3, [r7, #32]
   return(result);
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3314      	adds	r3, #20
 8004b0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e3      	bne.n	8004aea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0310 	bic.w	r3, r3, #16
 8004b46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b54:	61fa      	str	r2, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	617b      	str	r3, [r7, #20]
   return(result);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e3      	bne.n	8004b30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f833 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b7a:	e023      	b.n	8004bc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <HAL_UART_IRQHandler+0x4f4>
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f945 	bl	8004e24 <UART_Transmit_IT>
    return;
 8004b9a:	e014      	b.n	8004bc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x51e>
 8004ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f985 	bl	8004ec4 <UART_EndTransmit_IT>
    return;
 8004bba:	e004      	b.n	8004bc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004bbc:	bf00      	nop
 8004bbe:	e002      	b.n	8004bc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bc0:	bf00      	nop
 8004bc2:	e000      	b.n	8004bc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bc4:	bf00      	nop
  }
}
 8004bc6:	37e8      	adds	r7, #232	@ 0xe8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c20:	e03b      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d037      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fc fc53 	bl	80014d4 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	6a3a      	ldr	r2, [r7, #32]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e03a      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d023      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b80      	cmp	r3, #128	@ 0x80
 8004c56:	d020      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b40      	cmp	r3, #64	@ 0x40
 8004c5c:	d01d      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d116      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f857 	bl	8004d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0b4      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2222      	movs	r2, #34	@ 0x22
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0220 	orr.w	r2, r2, #32
 8004d26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b095      	sub	sp, #84	@ 0x54
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e5      	bne.n	8004d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3314      	adds	r3, #20
 8004d90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d119      	bne.n	8004de2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f023 0310 	bic.w	r3, r3, #16
 8004dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dce:	61ba      	str	r2, [r7, #24]
 8004dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6979      	ldr	r1, [r7, #20]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	613b      	str	r3, [r7, #16]
   return(result);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e5      	bne.n	8004dae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004df0:	bf00      	nop
 8004df2:	3754      	adds	r7, #84	@ 0x54
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7fb fe58 	bl	8000acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b21      	cmp	r3, #33	@ 0x21
 8004e36:	d13e      	bne.n	8004eb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e40:	d114      	bne.n	8004e6c <UART_Transmit_IT+0x48>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d110      	bne.n	8004e6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]
 8004e6a:	e008      	b.n	8004e7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	1c59      	adds	r1, r3, #1
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6211      	str	r1, [r2, #32]
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ea0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff fe71 	bl	8004bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08c      	sub	sp, #48	@ 0x30
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b22      	cmp	r3, #34	@ 0x22
 8004f06:	f040 80ae 	bne.w	8005066 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f12:	d117      	bne.n	8004f44 <UART_Receive_IT+0x50>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d113      	bne.n	8004f44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	1c9a      	adds	r2, r3, #2
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f42:	e026      	b.n	8004f92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f56:	d007      	beq.n	8004f68 <UART_Receive_IT+0x74>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <UART_Receive_IT+0x82>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d106      	bne.n	8004f76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e008      	b.n	8004f88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d15d      	bne.n	8005062 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0220 	bic.w	r2, r2, #32
 8004fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d135      	bne.n	8005058 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	613b      	str	r3, [r7, #16]
   return(result);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f023 0310 	bic.w	r3, r3, #16
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005012:	623a      	str	r2, [r7, #32]
 8005014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	69f9      	ldr	r1, [r7, #28]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d10a      	bne.n	800504a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fdc5 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
 8005056:	e002      	b.n	800505e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fb fd0d 	bl	8000a78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e002      	b.n	8005068 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005066:	2302      	movs	r3, #2
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3730      	adds	r7, #48	@ 0x30
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005074:	b0c0      	sub	sp, #256	@ 0x100
 8005076:	af00      	add	r7, sp, #0
 8005078:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	68d9      	ldr	r1, [r3, #12]
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	ea40 0301 	orr.w	r3, r0, r1
 8005098:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050c8:	f021 010c 	bic.w	r1, r1, #12
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050d6:	430b      	orrs	r3, r1
 80050d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ea:	6999      	ldr	r1, [r3, #24]
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	ea40 0301 	orr.w	r3, r0, r1
 80050f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b8f      	ldr	r3, [pc, #572]	@ (800533c <UART_SetConfig+0x2cc>)
 8005100:	429a      	cmp	r2, r3
 8005102:	d005      	beq.n	8005110 <UART_SetConfig+0xa0>
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b8d      	ldr	r3, [pc, #564]	@ (8005340 <UART_SetConfig+0x2d0>)
 800510c:	429a      	cmp	r2, r3
 800510e:	d104      	bne.n	800511a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fd fc8c 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 8005114:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005118:	e003      	b.n	8005122 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800511a:	f7fd fc73 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 800511e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800512c:	f040 810c 	bne.w	8005348 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005134:	2200      	movs	r2, #0
 8005136:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800513a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800513e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005142:	4622      	mov	r2, r4
 8005144:	462b      	mov	r3, r5
 8005146:	1891      	adds	r1, r2, r2
 8005148:	65b9      	str	r1, [r7, #88]	@ 0x58
 800514a:	415b      	adcs	r3, r3
 800514c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800514e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005152:	4621      	mov	r1, r4
 8005154:	eb12 0801 	adds.w	r8, r2, r1
 8005158:	4629      	mov	r1, r5
 800515a:	eb43 0901 	adc.w	r9, r3, r1
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800516a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005172:	4690      	mov	r8, r2
 8005174:	4699      	mov	r9, r3
 8005176:	4623      	mov	r3, r4
 8005178:	eb18 0303 	adds.w	r3, r8, r3
 800517c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005180:	462b      	mov	r3, r5
 8005182:	eb49 0303 	adc.w	r3, r9, r3
 8005186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005196:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800519a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800519e:	460b      	mov	r3, r1
 80051a0:	18db      	adds	r3, r3, r3
 80051a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051a4:	4613      	mov	r3, r2
 80051a6:	eb42 0303 	adc.w	r3, r2, r3
 80051aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051b4:	f7fb f884 	bl	80002c0 <__aeabi_uldivmod>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4b61      	ldr	r3, [pc, #388]	@ (8005344 <UART_SetConfig+0x2d4>)
 80051be:	fba3 2302 	umull	r2, r3, r3, r2
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	011c      	lsls	r4, r3, #4
 80051c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	1891      	adds	r1, r2, r2
 80051de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051e0:	415b      	adcs	r3, r3
 80051e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051e8:	4641      	mov	r1, r8
 80051ea:	eb12 0a01 	adds.w	sl, r2, r1
 80051ee:	4649      	mov	r1, r9
 80051f0:	eb43 0b01 	adc.w	fp, r3, r1
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005200:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005208:	4692      	mov	sl, r2
 800520a:	469b      	mov	fp, r3
 800520c:	4643      	mov	r3, r8
 800520e:	eb1a 0303 	adds.w	r3, sl, r3
 8005212:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005216:	464b      	mov	r3, r9
 8005218:	eb4b 0303 	adc.w	r3, fp, r3
 800521c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800522c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005234:	460b      	mov	r3, r1
 8005236:	18db      	adds	r3, r3, r3
 8005238:	643b      	str	r3, [r7, #64]	@ 0x40
 800523a:	4613      	mov	r3, r2
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	647b      	str	r3, [r7, #68]	@ 0x44
 8005242:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800524a:	f7fb f839 	bl	80002c0 <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4611      	mov	r1, r2
 8005254:	4b3b      	ldr	r3, [pc, #236]	@ (8005344 <UART_SetConfig+0x2d4>)
 8005256:	fba3 2301 	umull	r2, r3, r3, r1
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	2264      	movs	r2, #100	@ 0x64
 800525e:	fb02 f303 	mul.w	r3, r2, r3
 8005262:	1acb      	subs	r3, r1, r3
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800526a:	4b36      	ldr	r3, [pc, #216]	@ (8005344 <UART_SetConfig+0x2d4>)
 800526c:	fba3 2302 	umull	r2, r3, r3, r2
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005278:	441c      	add	r4, r3
 800527a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800527e:	2200      	movs	r2, #0
 8005280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005284:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005288:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800528c:	4642      	mov	r2, r8
 800528e:	464b      	mov	r3, r9
 8005290:	1891      	adds	r1, r2, r2
 8005292:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005294:	415b      	adcs	r3, r3
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800529c:	4641      	mov	r1, r8
 800529e:	1851      	adds	r1, r2, r1
 80052a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80052a2:	4649      	mov	r1, r9
 80052a4:	414b      	adcs	r3, r1
 80052a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052b4:	4659      	mov	r1, fp
 80052b6:	00cb      	lsls	r3, r1, #3
 80052b8:	4651      	mov	r1, sl
 80052ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052be:	4651      	mov	r1, sl
 80052c0:	00ca      	lsls	r2, r1, #3
 80052c2:	4610      	mov	r0, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	4642      	mov	r2, r8
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052d0:	464b      	mov	r3, r9
 80052d2:	460a      	mov	r2, r1
 80052d4:	eb42 0303 	adc.w	r3, r2, r3
 80052d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052f0:	460b      	mov	r3, r1
 80052f2:	18db      	adds	r3, r3, r3
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f6:	4613      	mov	r3, r2
 80052f8:	eb42 0303 	adc.w	r3, r2, r3
 80052fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005302:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005306:	f7fa ffdb 	bl	80002c0 <__aeabi_uldivmod>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <UART_SetConfig+0x2d4>)
 8005310:	fba3 1302 	umull	r1, r3, r3, r2
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	2164      	movs	r1, #100	@ 0x64
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	3332      	adds	r3, #50	@ 0x32
 8005322:	4a08      	ldr	r2, [pc, #32]	@ (8005344 <UART_SetConfig+0x2d4>)
 8005324:	fba2 2303 	umull	r2, r3, r2, r3
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	f003 0207 	and.w	r2, r3, #7
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4422      	add	r2, r4
 8005336:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005338:	e106      	b.n	8005548 <UART_SetConfig+0x4d8>
 800533a:	bf00      	nop
 800533c:	40011000 	.word	0x40011000
 8005340:	40011400 	.word	0x40011400
 8005344:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534c:	2200      	movs	r2, #0
 800534e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005352:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005356:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800535a:	4642      	mov	r2, r8
 800535c:	464b      	mov	r3, r9
 800535e:	1891      	adds	r1, r2, r2
 8005360:	6239      	str	r1, [r7, #32]
 8005362:	415b      	adcs	r3, r3
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24
 8005366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800536a:	4641      	mov	r1, r8
 800536c:	1854      	adds	r4, r2, r1
 800536e:	4649      	mov	r1, r9
 8005370:	eb43 0501 	adc.w	r5, r3, r1
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	00eb      	lsls	r3, r5, #3
 800537e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005382:	00e2      	lsls	r2, r4, #3
 8005384:	4614      	mov	r4, r2
 8005386:	461d      	mov	r5, r3
 8005388:	4643      	mov	r3, r8
 800538a:	18e3      	adds	r3, r4, r3
 800538c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005390:	464b      	mov	r3, r9
 8005392:	eb45 0303 	adc.w	r3, r5, r3
 8005396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053b6:	4629      	mov	r1, r5
 80053b8:	008b      	lsls	r3, r1, #2
 80053ba:	4621      	mov	r1, r4
 80053bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c0:	4621      	mov	r1, r4
 80053c2:	008a      	lsls	r2, r1, #2
 80053c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053c8:	f7fa ff7a 	bl	80002c0 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4b60      	ldr	r3, [pc, #384]	@ (8005554 <UART_SetConfig+0x4e4>)
 80053d2:	fba3 2302 	umull	r2, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	011c      	lsls	r4, r3, #4
 80053da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	61b9      	str	r1, [r7, #24]
 80053f4:	415b      	adcs	r3, r3
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053fc:	4641      	mov	r1, r8
 80053fe:	1851      	adds	r1, r2, r1
 8005400:	6139      	str	r1, [r7, #16]
 8005402:	4649      	mov	r1, r9
 8005404:	414b      	adcs	r3, r1
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005414:	4659      	mov	r1, fp
 8005416:	00cb      	lsls	r3, r1, #3
 8005418:	4651      	mov	r1, sl
 800541a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800541e:	4651      	mov	r1, sl
 8005420:	00ca      	lsls	r2, r1, #3
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	4603      	mov	r3, r0
 8005428:	4642      	mov	r2, r8
 800542a:	189b      	adds	r3, r3, r2
 800542c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005430:	464b      	mov	r3, r9
 8005432:	460a      	mov	r2, r1
 8005434:	eb42 0303 	adc.w	r3, r2, r3
 8005438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005446:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005454:	4649      	mov	r1, r9
 8005456:	008b      	lsls	r3, r1, #2
 8005458:	4641      	mov	r1, r8
 800545a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800545e:	4641      	mov	r1, r8
 8005460:	008a      	lsls	r2, r1, #2
 8005462:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005466:	f7fa ff2b 	bl	80002c0 <__aeabi_uldivmod>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4611      	mov	r1, r2
 8005470:	4b38      	ldr	r3, [pc, #224]	@ (8005554 <UART_SetConfig+0x4e4>)
 8005472:	fba3 2301 	umull	r2, r3, r3, r1
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2264      	movs	r2, #100	@ 0x64
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	1acb      	subs	r3, r1, r3
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	3332      	adds	r3, #50	@ 0x32
 8005484:	4a33      	ldr	r2, [pc, #204]	@ (8005554 <UART_SetConfig+0x4e4>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005490:	441c      	add	r4, r3
 8005492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005496:	2200      	movs	r2, #0
 8005498:	673b      	str	r3, [r7, #112]	@ 0x70
 800549a:	677a      	str	r2, [r7, #116]	@ 0x74
 800549c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	1891      	adds	r1, r2, r2
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	415b      	adcs	r3, r3
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054b0:	4641      	mov	r1, r8
 80054b2:	1851      	adds	r1, r2, r1
 80054b4:	6039      	str	r1, [r7, #0]
 80054b6:	4649      	mov	r1, r9
 80054b8:	414b      	adcs	r3, r1
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054c8:	4659      	mov	r1, fp
 80054ca:	00cb      	lsls	r3, r1, #3
 80054cc:	4651      	mov	r1, sl
 80054ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054d2:	4651      	mov	r1, sl
 80054d4:	00ca      	lsls	r2, r1, #3
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	4642      	mov	r2, r8
 80054de:	189b      	adds	r3, r3, r2
 80054e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054e2:	464b      	mov	r3, r9
 80054e4:	460a      	mov	r2, r1
 80054e6:	eb42 0303 	adc.w	r3, r2, r3
 80054ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005504:	4649      	mov	r1, r9
 8005506:	008b      	lsls	r3, r1, #2
 8005508:	4641      	mov	r1, r8
 800550a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800550e:	4641      	mov	r1, r8
 8005510:	008a      	lsls	r2, r1, #2
 8005512:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005516:	f7fa fed3 	bl	80002c0 <__aeabi_uldivmod>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4b0d      	ldr	r3, [pc, #52]	@ (8005554 <UART_SetConfig+0x4e4>)
 8005520:	fba3 1302 	umull	r1, r3, r3, r2
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	2164      	movs	r1, #100	@ 0x64
 8005528:	fb01 f303 	mul.w	r3, r1, r3
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	3332      	adds	r3, #50	@ 0x32
 8005532:	4a08      	ldr	r2, [pc, #32]	@ (8005554 <UART_SetConfig+0x4e4>)
 8005534:	fba2 2303 	umull	r2, r3, r2, r3
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4422      	add	r2, r4
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800554e:	46bd      	mov	sp, r7
 8005550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005554:	51eb851f 	.word	0x51eb851f

08005558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005558:	b084      	sub	sp, #16
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	f107 001c 	add.w	r0, r7, #28
 8005566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800556a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800556e:	2b01      	cmp	r3, #1
 8005570:	d123      	bne.n	80055ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005576:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800559a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d105      	bne.n	80055ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 ffd6 	bl	8006560 <USB_CoreReset>
 80055b4:	4603      	mov	r3, r0
 80055b6:	73fb      	strb	r3, [r7, #15]
 80055b8:	e01b      	b.n	80055f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 ffca 	bl	8006560 <USB_CoreReset>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d106      	bne.n	80055e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80055e4:	e005      	b.n	80055f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055f2:	7fbb      	ldrb	r3, [r7, #30]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10b      	bne.n	8005610 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f043 0206 	orr.w	r2, r3, #6
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f043 0220 	orr.w	r2, r3, #32
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800561c:	b004      	add	sp, #16
 800561e:	4770      	bx	lr

08005620 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f043 0201 	orr.w	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 0201 	bic.w	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d115      	bne.n	80056b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005692:	200a      	movs	r0, #10
 8005694:	f7fb ff2a 	bl	80014ec <HAL_Delay>
      ms += 10U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	330a      	adds	r3, #10
 800569c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fef2 	bl	8006488 <USB_GetMode>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d01e      	beq.n	80056e8 <USB_SetCurrentMode+0x84>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80056ae:	d9f0      	bls.n	8005692 <USB_SetCurrentMode+0x2e>
 80056b0:	e01a      	b.n	80056e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d115      	bne.n	80056e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056c4:	200a      	movs	r0, #10
 80056c6:	f7fb ff11 	bl	80014ec <HAL_Delay>
      ms += 10U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	330a      	adds	r3, #10
 80056ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fed9 	bl	8006488 <USB_GetMode>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <USB_SetCurrentMode+0x84>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2bc7      	cmp	r3, #199	@ 0xc7
 80056e0:	d9f0      	bls.n	80056c4 <USB_SetCurrentMode+0x60>
 80056e2:	e001      	b.n	80056e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e005      	b.n	80056f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80056ec:	d101      	bne.n	80056f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056fc:	b084      	sub	sp, #16
 80056fe:	b580      	push	{r7, lr}
 8005700:	b086      	sub	sp, #24
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800570a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005716:	2300      	movs	r3, #0
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	e009      	b.n	8005730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3340      	adds	r3, #64	@ 0x40
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	2200      	movs	r2, #0
 8005728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	3301      	adds	r3, #1
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b0e      	cmp	r3, #14
 8005734:	d9f2      	bls.n	800571c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005736:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800573a:	2b00      	cmp	r3, #0
 800573c:	d11c      	bne.n	8005778 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e005      	b.n	8005784 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005790:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10d      	bne.n	80057b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057a0:	2100      	movs	r1, #0
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f968 	bl	8005a78 <USB_SetDevSpeed>
 80057a8:	e008      	b.n	80057bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057aa:	2101      	movs	r1, #1
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f963 	bl	8005a78 <USB_SetDevSpeed>
 80057b2:	e003      	b.n	80057bc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057b4:	2103      	movs	r1, #3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f95e 	bl	8005a78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057bc:	2110      	movs	r1, #16
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8fa 	bl	80059b8 <USB_FlushTxFifo>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f924 	bl	8005a1c <USB_FlushRxFifo>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e4:	461a      	mov	r2, r3
 80057e6:	2300      	movs	r3, #0
 80057e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f0:	461a      	mov	r2, r3
 80057f2:	2300      	movs	r3, #0
 80057f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fc:	461a      	mov	r2, r3
 80057fe:	2300      	movs	r3, #0
 8005800:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e043      	b.n	8005890 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800581a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800581e:	d118      	bne.n	8005852 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005832:	461a      	mov	r2, r3
 8005834:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e013      	b.n	8005864 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005848:	461a      	mov	r2, r3
 800584a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e008      	b.n	8005864 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585e:	461a      	mov	r2, r3
 8005860:	2300      	movs	r3, #0
 8005862:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005870:	461a      	mov	r2, r3
 8005872:	2300      	movs	r3, #0
 8005874:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005882:	461a      	mov	r2, r3
 8005884:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005888:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	3301      	adds	r3, #1
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005894:	461a      	mov	r2, r3
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4293      	cmp	r3, r2
 800589a:	d3b5      	bcc.n	8005808 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800589c:	2300      	movs	r3, #0
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	e043      	b.n	800592a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058b8:	d118      	bne.n	80058ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058cc:	461a      	mov	r2, r3
 80058ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	e013      	b.n	80058fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e2:	461a      	mov	r2, r3
 80058e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e008      	b.n	80058fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f8:	461a      	mov	r2, r3
 80058fa:	2300      	movs	r3, #0
 80058fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590a:	461a      	mov	r2, r3
 800590c:	2300      	movs	r3, #0
 800590e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005922:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	3301      	adds	r3, #1
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800592e:	461a      	mov	r2, r3
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4293      	cmp	r3, r2
 8005934:	d3b5      	bcc.n	80058a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005948:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005956:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800595c:	2b00      	cmp	r3, #0
 800595e:	d105      	bne.n	800596c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f043 0210 	orr.w	r2, r3, #16
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	4b10      	ldr	r3, [pc, #64]	@ (80059b4 <USB_DevInit+0x2b8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005978:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f043 0208 	orr.w	r2, r3, #8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800598c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005990:	2b01      	cmp	r3, #1
 8005992:	d107      	bne.n	80059a4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800599c:	f043 0304 	orr.w	r3, r3, #4
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059b0:	b004      	add	sp, #16
 80059b2:	4770      	bx	lr
 80059b4:	803c3800 	.word	0x803c3800

080059b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3301      	adds	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059d2:	d901      	bls.n	80059d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e01b      	b.n	8005a10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	daf2      	bge.n	80059c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	019b      	lsls	r3, r3, #6
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059fc:	d901      	bls.n	8005a02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e006      	b.n	8005a10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d0f0      	beq.n	80059f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a34:	d901      	bls.n	8005a3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e018      	b.n	8005a6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	daf2      	bge.n	8005a28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2210      	movs	r2, #16
 8005a4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a58:	d901      	bls.n	8005a5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e006      	b.n	8005a6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0310 	and.w	r3, r3, #16
 8005a66:	2b10      	cmp	r3, #16
 8005a68:	d0f0      	beq.n	8005a4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d13a      	bne.n	8005b3c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005acc:	69da      	ldr	r2, [r3, #28]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d155      	bne.n	8005baa <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	791b      	ldrb	r3, [r3, #4]
 8005b18:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b1a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	059b      	lsls	r3, r3, #22
 8005b20:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b22:	4313      	orrs	r3, r2
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e036      	b.n	8005baa <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d11a      	bne.n	8005baa <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	791b      	ldrb	r3, [r3, #4]
 8005b8e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b90:	430b      	orrs	r3, r1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba8:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d161      	bne.n	8005c98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005be6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bea:	d11f      	bne.n	8005c2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	43db      	mvns	r3, r3
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	2101      	movs	r1, #1
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c70:	4013      	ands	r3, r2
 8005c72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	0159      	lsls	r1, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	440b      	add	r3, r1
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4b35      	ldr	r3, [pc, #212]	@ (8005d68 <USB_DeactivateEndpoint+0x1b0>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	600b      	str	r3, [r1, #0]
 8005c96:	e060      	b.n	8005d5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005caa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cae:	d11f      	bne.n	8005cf0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	2101      	movs	r1, #1
 8005d02:	fa01 f303 	lsl.w	r3, r1, r3
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d10:	4013      	ands	r3, r2
 8005d12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	2101      	movs	r1, #1
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d34:	4013      	ands	r3, r2
 8005d36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	0159      	lsls	r1, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	440b      	add	r3, r1
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d52:	4619      	mov	r1, r3
 8005d54:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <USB_DeactivateEndpoint+0x1b4>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	ec337800 	.word	0xec337800
 8005d6c:	eff37800 	.word	0xeff37800

08005d70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	@ 0x28
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	f040 817f 	bne.w	8006090 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d132      	bne.n	8005e00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005db4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005db8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005dbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005df8:	0cdb      	lsrs	r3, r3, #19
 8005dfa:	04db      	lsls	r3, r3, #19
 8005dfc:	6113      	str	r3, [r2, #16]
 8005dfe:	e097      	b.n	8005f30 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e1a:	0cdb      	lsrs	r3, r3, #19
 8005e1c:	04db      	lsls	r3, r3, #19
 8005e1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e42:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d11a      	bne.n	8005e80 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e7c:	6113      	str	r3, [r2, #16]
 8005e7e:	e044      	b.n	8005f0a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4413      	add	r3, r2
 8005e8a:	1e5a      	subs	r2, r3, #1
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	8afb      	ldrh	r3, [r7, #22]
 8005ea6:	04d9      	lsls	r1, r3, #19
 8005ea8:	4ba4      	ldr	r3, [pc, #656]	@ (800613c <USB_EPStartXfer+0x3cc>)
 8005eaa:	400b      	ands	r3, r1
 8005eac:	69b9      	ldr	r1, [r7, #24]
 8005eae:	0148      	lsls	r0, r1, #5
 8005eb0:	69f9      	ldr	r1, [r7, #28]
 8005eb2:	4401      	add	r1, r0
 8005eb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	791b      	ldrb	r3, [r3, #4]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d122      	bne.n	8005f0a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ede:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005ee2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	8afb      	ldrh	r3, [r7, #22]
 8005ef4:	075b      	lsls	r3, r3, #29
 8005ef6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005efa:	69b9      	ldr	r1, [r7, #24]
 8005efc:	0148      	lsls	r0, r1, #5
 8005efe:	69f9      	ldr	r1, [r7, #28]
 8005f00:	4401      	add	r1, r0
 8005f02:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f06:	4313      	orrs	r3, r2
 8005f08:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f20:	69b9      	ldr	r1, [r7, #24]
 8005f22:	0148      	lsls	r0, r1, #5
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	4401      	add	r1, r0
 8005f28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d14b      	bne.n	8005fce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	791b      	ldrb	r3, [r3, #4]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d128      	bne.n	8005fac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d110      	bne.n	8005f8c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e00f      	b.n	8005fac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005faa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e166      	b.n	800629c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fe8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	791b      	ldrb	r3, [r3, #4]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d015      	beq.n	8006022 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 814e 	beq.w	800629c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	2101      	movs	r1, #1
 8006012:	fa01 f303 	lsl.w	r3, r1, r3
 8006016:	69f9      	ldr	r1, [r7, #28]
 8006018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800601c:	4313      	orrs	r3, r2
 800601e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006020:	e13c      	b.n	800629c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d110      	bne.n	8006054 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800604c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e00f      	b.n	8006074 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006072:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	68d9      	ldr	r1, [r3, #12]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	781a      	ldrb	r2, [r3, #0]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	b298      	uxth	r0, r3
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	4603      	mov	r3, r0
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f90f 	bl	80062ac <USB_WritePacket>
 800608e:	e105      	b.n	800629c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060aa:	0cdb      	lsrs	r3, r3, #19
 80060ac:	04db      	lsls	r3, r3, #19
 80060ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060d2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d132      	bne.n	8006140 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	0148      	lsls	r0, r1, #5
 800610c:	69f9      	ldr	r1, [r7, #28]
 800610e:	4401      	add	r1, r0
 8006110:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006114:	4313      	orrs	r3, r2
 8006116:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006132:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006136:	6113      	str	r3, [r2, #16]
 8006138:	e062      	b.n	8006200 <USB_EPStartXfer+0x490>
 800613a:	bf00      	nop
 800613c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d123      	bne.n	8006190 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800615e:	69b9      	ldr	r1, [r7, #24]
 8006160:	0148      	lsls	r0, r1, #5
 8006162:	69f9      	ldr	r1, [r7, #28]
 8006164:	4401      	add	r1, r0
 8006166:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800616a:	4313      	orrs	r3, r2
 800616c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006188:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800618c:	6113      	str	r3, [r2, #16]
 800618e:	e037      	b.n	8006200 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	4413      	add	r3, r2
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	8afa      	ldrh	r2, [r7, #22]
 80061ac:	fb03 f202 	mul.w	r2, r3, r2
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	8afb      	ldrh	r3, [r7, #22]
 80061c4:	04d9      	lsls	r1, r3, #19
 80061c6:	4b38      	ldr	r3, [pc, #224]	@ (80062a8 <USB_EPStartXfer+0x538>)
 80061c8:	400b      	ands	r3, r1
 80061ca:	69b9      	ldr	r1, [r7, #24]
 80061cc:	0148      	lsls	r0, r1, #5
 80061ce:	69f9      	ldr	r1, [r7, #28]
 80061d0:	4401      	add	r1, r0
 80061d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061d6:	4313      	orrs	r3, r2
 80061d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f0:	69b9      	ldr	r1, [r7, #24]
 80061f2:	0148      	lsls	r0, r1, #5
 80061f4:	69f9      	ldr	r1, [r7, #28]
 80061f6:	4401      	add	r1, r0
 80061f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061fc:	4313      	orrs	r3, r2
 80061fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d10d      	bne.n	8006222 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	68d9      	ldr	r1, [r3, #12]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621e:	460a      	mov	r2, r1
 8006220:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	791b      	ldrb	r3, [r3, #4]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d128      	bne.n	800627c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d110      	bne.n	800625c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006254:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e00f      	b.n	800627c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800627a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	440a      	add	r2, r1
 8006292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006296:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800629a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	1ff80000 	.word	0x1ff80000

080062ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b089      	sub	sp, #36	@ 0x24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4611      	mov	r1, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	460b      	mov	r3, r1
 80062bc:	71fb      	strb	r3, [r7, #7]
 80062be:	4613      	mov	r3, r2
 80062c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d123      	bne.n	800631a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062d2:	88bb      	ldrh	r3, [r7, #4]
 80062d4:	3303      	adds	r3, #3
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062da:	2300      	movs	r3, #0
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	e018      	b.n	8006312 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	031a      	lsls	r2, r3, #12
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ec:	461a      	mov	r2, r3
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	3301      	adds	r3, #1
 80062f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3301      	adds	r3, #1
 80062fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	3301      	adds	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3301      	adds	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	3301      	adds	r3, #1
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	429a      	cmp	r2, r3
 8006318:	d3e2      	bcc.n	80062e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3724      	adds	r7, #36	@ 0x24
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d12c      	bne.n	800639e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	db12      	blt.n	800637c <USB_EPSetStall+0x54>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00f      	beq.n	800637c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	440a      	add	r2, r1
 8006372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006376:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800637a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006396:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e02b      	b.n	80063f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	db12      	blt.n	80063d6 <USB_EPSetStall+0xae>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00f      	beq.n	80063d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006432:	f023 0302 	bic.w	r3, r3, #2
 8006436:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006460:	f023 0303 	bic.w	r3, r3, #3
 8006464:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0301 	and.w	r3, r3, #1
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	460b      	mov	r3, r1
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	333c      	adds	r3, #60	@ 0x3c
 80064ba:	3304      	adds	r3, #4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4a26      	ldr	r2, [pc, #152]	@ (800655c <USB_EP0_OutStart+0xb8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d90a      	bls.n	80064de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064d8:	d101      	bne.n	80064de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	e037      	b.n	800654e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e4:	461a      	mov	r2, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800650c:	f043 0318 	orr.w	r3, r3, #24
 8006510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006520:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006524:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d10f      	bne.n	800654c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006546:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800654a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	4f54300a 	.word	0x4f54300a

08006560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3301      	adds	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006578:	d901      	bls.n	800657e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e01b      	b.n	80065b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	daf2      	bge.n	800656c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065a2:	d901      	bls.n	80065a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e006      	b.n	80065b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d0f0      	beq.n	8006596 <USB_CoreReset+0x36>

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 80065c8:	f001 f978 	bl	80078bc <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 80065cc:	2200      	movs	r2, #0
 80065ce:	4917      	ldr	r1, [pc, #92]	@ (800662c <MX_USB_DEVICE_Init+0x68>)
 80065d0:	4817      	ldr	r0, [pc, #92]	@ (8006630 <MX_USB_DEVICE_Init+0x6c>)
 80065d2:	f001 fd5d 	bl	8008090 <USBD_Init>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 80065dc:	f7fa fad2 	bl	8000b84 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 80065e0:	4914      	ldr	r1, [pc, #80]	@ (8006634 <MX_USB_DEVICE_Init+0x70>)
 80065e2:	4813      	ldr	r0, [pc, #76]	@ (8006630 <MX_USB_DEVICE_Init+0x6c>)
 80065e4:	f001 fd80 	bl	80080e8 <USBD_RegisterClass>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80065ee:	f7fa fac9 	bl	8000b84 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 80065f2:	4911      	ldr	r1, [pc, #68]	@ (8006638 <MX_USB_DEVICE_Init+0x74>)
 80065f4:	480e      	ldr	r0, [pc, #56]	@ (8006630 <MX_USB_DEVICE_Init+0x6c>)
 80065f6:	f000 fe3b 	bl	8007270 <USBD_CDC_ACM_RegisterInterface>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006600:	f7fa fac0 	bl	8000b84 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8006604:	490d      	ldr	r1, [pc, #52]	@ (800663c <MX_USB_DEVICE_Init+0x78>)
 8006606:	480a      	ldr	r0, [pc, #40]	@ (8006630 <MX_USB_DEVICE_Init+0x6c>)
 8006608:	f001 fcf4 	bl	8007ff4 <USBD_CUSTOM_HID_RegisterInterface>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8006612:	f7fa fab7 	bl	8000b84 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8006616:	4806      	ldr	r0, [pc, #24]	@ (8006630 <MX_USB_DEVICE_Init+0x6c>)
 8006618:	f001 fda4 	bl	8008164 <USBD_Start>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8006622:	f7fa faaf 	bl	8000b84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006626:	bf00      	nop
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000020 	.word	0x20000020
 8006630:	20000e70 	.word	0x20000e70
 8006634:	20000184 	.word	0x20000184
 8006638:	2000000c 	.word	0x2000000c
 800663c:	20000094 	.word	0x20000094

08006640 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	01db      	lsls	r3, r3, #7
 800664e:	4a06      	ldr	r2, [pc, #24]	@ (8006668 <CDC_Init+0x28>)
 8006650:	441a      	add	r2, r3
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	4905      	ldr	r1, [pc, #20]	@ (800666c <CDC_Init+0x2c>)
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fe44 	bl	80072e4 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 800665c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	2000118c 	.word	0x2000118c
 800666c:	20000e70 	.word	0x20000e70

08006670 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800667a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	603a      	str	r2, [r7, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
 8006696:	460b      	mov	r3, r1
 8006698:	71bb      	strb	r3, [r7, #6]
 800669a:	4613      	mov	r3, r2
 800669c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800669e:	79bb      	ldrb	r3, [r7, #6]
 80066a0:	2b23      	cmp	r3, #35	@ 0x23
 80066a2:	f200 80b6 	bhi.w	8006812 <CDC_Control+0x18a>
 80066a6:	a201      	add	r2, pc, #4	@ (adr r2, 80066ac <CDC_Control+0x24>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	08006813 	.word	0x08006813
 80066b0:	08006813 	.word	0x08006813
 80066b4:	08006813 	.word	0x08006813
 80066b8:	08006813 	.word	0x08006813
 80066bc:	08006813 	.word	0x08006813
 80066c0:	08006813 	.word	0x08006813
 80066c4:	08006813 	.word	0x08006813
 80066c8:	08006813 	.word	0x08006813
 80066cc:	08006813 	.word	0x08006813
 80066d0:	08006813 	.word	0x08006813
 80066d4:	08006813 	.word	0x08006813
 80066d8:	08006813 	.word	0x08006813
 80066dc:	08006813 	.word	0x08006813
 80066e0:	08006813 	.word	0x08006813
 80066e4:	08006813 	.word	0x08006813
 80066e8:	08006813 	.word	0x08006813
 80066ec:	08006813 	.word	0x08006813
 80066f0:	08006813 	.word	0x08006813
 80066f4:	08006813 	.word	0x08006813
 80066f8:	08006813 	.word	0x08006813
 80066fc:	08006813 	.word	0x08006813
 8006700:	08006813 	.word	0x08006813
 8006704:	08006813 	.word	0x08006813
 8006708:	08006813 	.word	0x08006813
 800670c:	08006813 	.word	0x08006813
 8006710:	08006813 	.word	0x08006813
 8006714:	08006813 	.word	0x08006813
 8006718:	08006813 	.word	0x08006813
 800671c:	08006813 	.word	0x08006813
 8006720:	08006813 	.word	0x08006813
 8006724:	08006813 	.word	0x08006813
 8006728:	08006813 	.word	0x08006813
 800672c:	0800673d 	.word	0x0800673d
 8006730:	0800679d 	.word	0x0800679d
 8006734:	08006813 	.word	0x08006813
 8006738:	08006813 	.word	0x08006813
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	3302      	adds	r3, #2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8006754:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	3303      	adds	r3, #3
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	4611      	mov	r1, r2
 8006764:	4a2f      	ldr	r2, [pc, #188]	@ (8006824 <CDC_Control+0x19c>)
 8006766:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	7911      	ldrb	r1, [r2, #4]
 8006770:	4a2c      	ldr	r2, [pc, #176]	@ (8006824 <CDC_Control+0x19c>)
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4413      	add	r3, r2
 8006776:	460a      	mov	r2, r1
 8006778:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	7951      	ldrb	r1, [r2, #5]
 8006780:	4a28      	ldr	r2, [pc, #160]	@ (8006824 <CDC_Control+0x19c>)
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	4413      	add	r3, r2
 8006786:	460a      	mov	r2, r1
 8006788:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	7991      	ldrb	r1, [r2, #6]
 8006790:	4a24      	ldr	r2, [pc, #144]	@ (8006824 <CDC_Control+0x19c>)
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	4413      	add	r3, r2
 8006796:	460a      	mov	r2, r1
 8006798:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800679a:	e03b      	b.n	8006814 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	4a21      	ldr	r2, [pc, #132]	@ (8006824 <CDC_Control+0x19c>)
 80067a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 80067aa:	79fb      	ldrb	r3, [r7, #7]
 80067ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006824 <CDC_Control+0x19c>)
 80067ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067b2:	0a1a      	lsrs	r2, r3, #8
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	4a19      	ldr	r2, [pc, #100]	@ (8006824 <CDC_Control+0x19c>)
 80067c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067c4:	0c1a      	lsrs	r2, r3, #16
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	3302      	adds	r3, #2
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	4a14      	ldr	r2, [pc, #80]	@ (8006824 <CDC_Control+0x19c>)
 80067d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067d6:	0e1a      	lsrs	r2, r3, #24
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	3303      	adds	r3, #3
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	3204      	adds	r2, #4
 80067e6:	490f      	ldr	r1, [pc, #60]	@ (8006824 <CDC_Control+0x19c>)
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	440b      	add	r3, r1
 80067ec:	791b      	ldrb	r3, [r3, #4]
 80067ee:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	3205      	adds	r2, #5
 80067f6:	490b      	ldr	r1, [pc, #44]	@ (8006824 <CDC_Control+0x19c>)
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	440b      	add	r3, r1
 80067fc:	795b      	ldrb	r3, [r3, #5]
 80067fe:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	3206      	adds	r2, #6
 8006806:	4907      	ldr	r1, [pc, #28]	@ (8006824 <CDC_Control+0x19c>)
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	440b      	add	r3, r1
 800680c:	799b      	ldrb	r3, [r3, #6]
 800680e:	7013      	strb	r3, [r2, #0]
    break;
 8006810:	e000      	b.n	8006814 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006812:	bf00      	nop
  }

  return (USBD_OK);
 8006814:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	2000120c 	.word	0x2000120c

08006828 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	b29a      	uxth	r2, r3
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f825 	bl	8006890 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	4907      	ldr	r1, [pc, #28]	@ (8006868 <CDC_Receive+0x40>)
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fd49 	bl	80072e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	4904      	ldr	r1, [pc, #16]	@ (8006868 <CDC_Receive+0x40>)
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fda4 	bl	80073a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800685c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000e70 	.word	0x20000e70

0800686c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	461a      	mov	r2, r3
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
 800687c:	4613      	mov	r3, r2
 800687e:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
	...

08006890 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	6039      	str	r1, [r7, #0]
 800689a:	71fb      	strb	r3, [r7, #7]
 800689c:	4613      	mov	r3, r2
 800689e:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	4a0e      	ldr	r2, [pc, #56]	@ (80068ec <CDC_Transmit+0x5c>)
 80068b4:	4413      	add	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e00d      	b.n	80068e2 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 80068c6:	88bb      	ldrh	r3, [r7, #4]
 80068c8:	79f8      	ldrb	r0, [r7, #7]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	4908      	ldr	r1, [pc, #32]	@ (80068f0 <CDC_Transmit+0x60>)
 80068ce:	f000 fce5 	bl	800729c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	4906      	ldr	r1, [pc, #24]	@ (80068f0 <CDC_Transmit+0x60>)
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fd22 	bl	8007320 <USBD_CDC_TransmitPacket>
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2000142c 	.word	0x2000142c
 80068f0:	20000e70 	.word	0x20000e70

080068f4 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	6039      	str	r1, [r7, #0]
 80068fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2212      	movs	r2, #18
 8006904:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8006906:	4b03      	ldr	r3, [pc, #12]	@ (8006914 <USBD_DeviceDescriptor+0x20>)
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	2000003c 	.word	0x2000003c

08006918 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	6039      	str	r1, [r7, #0]
 8006922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2204      	movs	r2, #4
 8006928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800692a:	4b03      	ldr	r3, [pc, #12]	@ (8006938 <USBD_LangIDStrDescriptor+0x20>)
}
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	20000050 	.word	0x20000050

0800693c <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	6039      	str	r1, [r7, #0]
 8006946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4907      	ldr	r1, [pc, #28]	@ (8006970 <USBD_ProductStrDescriptor+0x34>)
 8006952:	4808      	ldr	r0, [pc, #32]	@ (8006974 <USBD_ProductStrDescriptor+0x38>)
 8006954:	f001 fc23 	bl	800819e <USBD_GetString>
 8006958:	e004      	b.n	8006964 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	4904      	ldr	r1, [pc, #16]	@ (8006970 <USBD_ProductStrDescriptor+0x34>)
 800695e:	4805      	ldr	r0, [pc, #20]	@ (8006974 <USBD_ProductStrDescriptor+0x38>)
 8006960:	f001 fc1d 	bl	800819e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006964:	4b02      	ldr	r3, [pc, #8]	@ (8006970 <USBD_ProductStrDescriptor+0x34>)
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20001214 	.word	0x20001214
 8006974:	0800b560 	.word	0x0800b560

08006978 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	6039      	str	r1, [r7, #0]
 8006982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	4904      	ldr	r1, [pc, #16]	@ (8006998 <USBD_ManufacturerStrDescriptor+0x20>)
 8006988:	4804      	ldr	r0, [pc, #16]	@ (800699c <USBD_ManufacturerStrDescriptor+0x24>)
 800698a:	f001 fc08 	bl	800819e <USBD_GetString>
  return USBD_StrDesc;
 800698e:	4b02      	ldr	r3, [pc, #8]	@ (8006998 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20001214 	.word	0x20001214
 800699c:	0800b578 	.word	0x0800b578

080069a0 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	6039      	str	r1, [r7, #0]
 80069aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	221a      	movs	r2, #26
 80069b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069b2:	f000 f843 	bl	8006a3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80069b6:	4b02      	ldr	r3, [pc, #8]	@ (80069c0 <USBD_SerialStrDescriptor+0x20>)
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000054 	.word	0x20000054

080069c4 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	6039      	str	r1, [r7, #0]
 80069ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d105      	bne.n	80069e2 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	4907      	ldr	r1, [pc, #28]	@ (80069f8 <USBD_ConfigStrDescriptor+0x34>)
 80069da:	4808      	ldr	r0, [pc, #32]	@ (80069fc <USBD_ConfigStrDescriptor+0x38>)
 80069dc:	f001 fbdf 	bl	800819e <USBD_GetString>
 80069e0:	e004      	b.n	80069ec <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	4904      	ldr	r1, [pc, #16]	@ (80069f8 <USBD_ConfigStrDescriptor+0x34>)
 80069e6:	4805      	ldr	r0, [pc, #20]	@ (80069fc <USBD_ConfigStrDescriptor+0x38>)
 80069e8:	f001 fbd9 	bl	800819e <USBD_GetString>
  }
  return USBD_StrDesc;
 80069ec:	4b02      	ldr	r3, [pc, #8]	@ (80069f8 <USBD_ConfigStrDescriptor+0x34>)
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20001214 	.word	0x20001214
 80069fc:	0800b58c 	.word	0x0800b58c

08006a00 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	4907      	ldr	r1, [pc, #28]	@ (8006a34 <USBD_InterfaceStrDescriptor+0x34>)
 8006a16:	4808      	ldr	r0, [pc, #32]	@ (8006a38 <USBD_InterfaceStrDescriptor+0x38>)
 8006a18:	f001 fbc1 	bl	800819e <USBD_GetString>
 8006a1c:	e004      	b.n	8006a28 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	4904      	ldr	r1, [pc, #16]	@ (8006a34 <USBD_InterfaceStrDescriptor+0x34>)
 8006a22:	4805      	ldr	r0, [pc, #20]	@ (8006a38 <USBD_InterfaceStrDescriptor+0x38>)
 8006a24:	f001 fbbb 	bl	800819e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a28:	4b02      	ldr	r3, [pc, #8]	@ (8006a34 <USBD_InterfaceStrDescriptor+0x34>)
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20001214 	.word	0x20001214
 8006a38:	0800b59c 	.word	0x0800b59c

08006a3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a42:	4b0f      	ldr	r3, [pc, #60]	@ (8006a80 <Get_SerialNum+0x44>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a48:	4b0e      	ldr	r3, [pc, #56]	@ (8006a84 <Get_SerialNum+0x48>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a88 <Get_SerialNum+0x4c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4413      	add	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a62:	2208      	movs	r2, #8
 8006a64:	4909      	ldr	r1, [pc, #36]	@ (8006a8c <Get_SerialNum+0x50>)
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f814 	bl	8006a94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	4908      	ldr	r1, [pc, #32]	@ (8006a90 <Get_SerialNum+0x54>)
 8006a70:	68b8      	ldr	r0, [r7, #8]
 8006a72:	f000 f80f 	bl	8006a94 <IntToUnicode>
  }
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	1fff7a10 	.word	0x1fff7a10
 8006a84:	1fff7a14 	.word	0x1fff7a14
 8006a88:	1fff7a18 	.word	0x1fff7a18
 8006a8c:	20000056 	.word	0x20000056
 8006a90:	20000066 	.word	0x20000066

08006a94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	75fb      	strb	r3, [r7, #23]
 8006aaa:	e027      	b.n	8006afc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	0f1b      	lsrs	r3, r3, #28
 8006ab0:	2b09      	cmp	r3, #9
 8006ab2:	d80b      	bhi.n	8006acc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	0f1b      	lsrs	r3, r3, #28
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3230      	adds	r2, #48	@ 0x30
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	e00a      	b.n	8006ae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	0f1b      	lsrs	r3, r3, #28
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	440b      	add	r3, r1
 8006adc:	3237      	adds	r2, #55	@ 0x37
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	3301      	adds	r3, #1
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4413      	add	r3, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	3301      	adds	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
 8006afc:	7dfa      	ldrb	r2, [r7, #23]
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d3d3      	bcc.n	8006aac <IntToUnicode+0x18>
  }
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 8006b12:	b480      	push	{r7}
 8006b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b16:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 8006b22:	b480      	push	{r7}
 8006b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006b26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	4603      	mov	r3, r0
 8006b3a:	460a      	mov	r2, r1
 8006b3c:	71fb      	strb	r3, [r7, #7]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 8006b42:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
 8006b64:	e0c6      	b.n	8006cf4 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006b6c:	fb02 f303 	mul.w	r3, r2, r3
 8006b70:	4a65      	ldr	r2, [pc, #404]	@ (8006d08 <USBD_CDC_Init+0x1b8>)
 8006b72:	4413      	add	r3, r2
 8006b74:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7c1b      	ldrb	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d13d      	bne.n	8006bfa <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	4a62      	ldr	r2, [pc, #392]	@ (8006d0c <USBD_CDC_Init+0x1bc>)
 8006b82:	5cd1      	ldrb	r1, [r2, r3]
 8006b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b88:	2202      	movs	r2, #2
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fc3f 	bl	800840e <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	4a5e      	ldr	r2, [pc, #376]	@ (8006d0c <USBD_CDC_Init+0x1bc>)
 8006b94:	5cd3      	ldrb	r3, [r2, r3]
 8006b96:	f003 020f 	and.w	r2, r3, #15
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	3324      	adds	r3, #36	@ 0x24
 8006ba8:	2201      	movs	r2, #1
 8006baa:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	4a58      	ldr	r2, [pc, #352]	@ (8006d10 <USBD_CDC_Init+0x1c0>)
 8006bb0:	5cd1      	ldrb	r1, [r2, r3]
 8006bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 fc28 	bl	800840e <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	4a53      	ldr	r2, [pc, #332]	@ (8006d10 <USBD_CDC_Init+0x1c0>)
 8006bc2:	5cd3      	ldrb	r3, [r2, r3]
 8006bc4:	f003 020f 	and.w	r2, r3, #15
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006bd8:	2201      	movs	r2, #1
 8006bda:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	4a4d      	ldr	r2, [pc, #308]	@ (8006d14 <USBD_CDC_Init+0x1c4>)
 8006be0:	5cd3      	ldrb	r3, [r2, r3]
 8006be2:	f003 020f 	and.w	r2, r3, #15
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	3326      	adds	r3, #38	@ 0x26
 8006bf4:	2210      	movs	r2, #16
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e03a      	b.n	8006c70 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	4a43      	ldr	r2, [pc, #268]	@ (8006d0c <USBD_CDC_Init+0x1bc>)
 8006bfe:	5cd1      	ldrb	r1, [r2, r3]
 8006c00:	2340      	movs	r3, #64	@ 0x40
 8006c02:	2202      	movs	r2, #2
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 fc02 	bl	800840e <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d0c <USBD_CDC_Init+0x1bc>)
 8006c0e:	5cd3      	ldrb	r3, [r2, r3]
 8006c10:	f003 020f 	and.w	r2, r3, #15
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	440b      	add	r3, r1
 8006c20:	3324      	adds	r3, #36	@ 0x24
 8006c22:	2201      	movs	r2, #1
 8006c24:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	4a39      	ldr	r2, [pc, #228]	@ (8006d10 <USBD_CDC_Init+0x1c0>)
 8006c2a:	5cd1      	ldrb	r1, [r2, r3]
 8006c2c:	2340      	movs	r3, #64	@ 0x40
 8006c2e:	2202      	movs	r2, #2
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fbec 	bl	800840e <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	4a35      	ldr	r2, [pc, #212]	@ (8006d10 <USBD_CDC_Init+0x1c0>)
 8006c3a:	5cd3      	ldrb	r3, [r2, r3]
 8006c3c:	f003 020f 	and.w	r2, r3, #15
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c50:	2201      	movs	r2, #1
 8006c52:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	4a2f      	ldr	r2, [pc, #188]	@ (8006d14 <USBD_CDC_Init+0x1c4>)
 8006c58:	5cd3      	ldrb	r3, [r2, r3]
 8006c5a:	f003 020f 	and.w	r2, r3, #15
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	3326      	adds	r3, #38	@ 0x26
 8006c6c:	2210      	movs	r2, #16
 8006c6e:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	4a28      	ldr	r2, [pc, #160]	@ (8006d14 <USBD_CDC_Init+0x1c4>)
 8006c74:	5cd1      	ldrb	r1, [r2, r3]
 8006c76:	2308      	movs	r3, #8
 8006c78:	2203      	movs	r2, #3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fbc7 	bl	800840e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4a24      	ldr	r2, [pc, #144]	@ (8006d14 <USBD_CDC_Init+0x1c4>)
 8006c84:	5cd3      	ldrb	r3, [r2, r3]
 8006c86:	f003 020f 	and.w	r2, r3, #15
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	3324      	adds	r3, #36	@ 0x24
 8006c98:	2201      	movs	r2, #1
 8006c9a:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	7bfa      	ldrb	r2, [r7, #15]
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	7c1b      	ldrb	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10b      	bne.n	8006cda <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	4a12      	ldr	r2, [pc, #72]	@ (8006d10 <USBD_CDC_Init+0x1c0>)
 8006cc6:	5cd1      	ldrb	r1, [r2, r3]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 fc20 	bl	8008518 <USBD_LL_PrepareReceive>
 8006cd8:	e009      	b.n	8006cee <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d10 <USBD_CDC_Init+0x1c0>)
 8006cde:	5cd1      	ldrb	r1, [r2, r3]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ce6:	2340      	movs	r3, #64	@ 0x40
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 fc15 	bl	8008518 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f43f af35 	beq.w	8006b66 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	2000142c 	.word	0x2000142c
 8006d0c:	20001414 	.word	0x20001414
 8006d10:	20001418 	.word	0x20001418
 8006d14:	2000141c 	.word	0x2000141c

08006d18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
 8006d28:	e057      	b.n	8006dda <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8006dec <USBD_CDC_DeInit+0xd4>)
 8006d2e:	5cd3      	ldrb	r3, [r2, r3]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fb91 	bl	800845a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006dec <USBD_CDC_DeInit+0xd4>)
 8006d3c:	5cd3      	ldrb	r3, [r2, r3]
 8006d3e:	f003 020f 	and.w	r2, r3, #15
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	3324      	adds	r3, #36	@ 0x24
 8006d50:	2200      	movs	r2, #0
 8006d52:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	4a26      	ldr	r2, [pc, #152]	@ (8006df0 <USBD_CDC_DeInit+0xd8>)
 8006d58:	5cd3      	ldrb	r3, [r2, r3]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 fb7c 	bl	800845a <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	4a22      	ldr	r2, [pc, #136]	@ (8006df0 <USBD_CDC_DeInit+0xd8>)
 8006d66:	5cd3      	ldrb	r3, [r2, r3]
 8006d68:	f003 020f 	and.w	r2, r3, #15
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <USBD_CDC_DeInit+0xdc>)
 8006d84:	5cd3      	ldrb	r3, [r2, r3]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fb66 	bl	800845a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	4a18      	ldr	r2, [pc, #96]	@ (8006df4 <USBD_CDC_DeInit+0xdc>)
 8006d92:	5cd3      	ldrb	r3, [r2, r3]
 8006d94:	f003 020f 	and.w	r2, r3, #15
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	3324      	adds	r3, #36	@ 0x24
 8006da6:	2200      	movs	r2, #0
 8006da8:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	4a11      	ldr	r2, [pc, #68]	@ (8006df4 <USBD_CDC_DeInit+0xdc>)
 8006dae:	5cd3      	ldrb	r3, [r2, r3]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3326      	adds	r3, #38	@ 0x26
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	7bfa      	ldrb	r2, [r7, #15]
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	73fb      	strb	r3, [r7, #15]
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0a4      	beq.n	8006d2a <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20001414 	.word	0x20001414
 8006df0:	20001418 	.word	0x20001418
 8006df4:	2000141c 	.word	0x2000141c

08006df8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006df8:	b590      	push	{r4, r7, lr}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	757b      	strb	r3, [r7, #21]
 8006e1a:	e015      	b.n	8006e48 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	889b      	ldrh	r3, [r3, #4]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	7d7b      	ldrb	r3, [r7, #21]
 8006e24:	496d      	ldr	r1, [pc, #436]	@ (8006fdc <USBD_CDC_Setup+0x1e4>)
 8006e26:	5ccb      	ldrb	r3, [r1, r3]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d007      	beq.n	8006e3c <USBD_CDC_Setup+0x44>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	889b      	ldrh	r3, [r3, #4]
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	7d7b      	ldrb	r3, [r7, #21]
 8006e34:	496a      	ldr	r1, [pc, #424]	@ (8006fe0 <USBD_CDC_Setup+0x1e8>)
 8006e36:	5ccb      	ldrb	r3, [r1, r3]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d102      	bne.n	8006e42 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8006e3c:	7d7b      	ldrb	r3, [r7, #21]
 8006e3e:	75bb      	strb	r3, [r7, #22]
      break;
 8006e40:	e005      	b.n	8006e4e <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8006e42:	7d7b      	ldrb	r3, [r7, #21]
 8006e44:	3301      	adds	r3, #1
 8006e46:	757b      	strb	r3, [r7, #21]
 8006e48:	7d7b      	ldrb	r3, [r7, #21]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0e6      	beq.n	8006e1c <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8006e4e:	7dbb      	ldrb	r3, [r7, #22]
 8006e50:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	4a62      	ldr	r2, [pc, #392]	@ (8006fe4 <USBD_CDC_Setup+0x1ec>)
 8006e5a:	4413      	add	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04a      	beq.n	8006f00 <USBD_CDC_Setup+0x108>
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	f040 80aa 	bne.w	8006fc4 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	88db      	ldrh	r3, [r3, #6]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d038      	beq.n	8006eea <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b25b      	sxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da1d      	bge.n	8006ebe <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e88:	689c      	ldr	r4, [r3, #8]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	7859      	ldrb	r1, [r3, #1]
 8006e8e:	7dbb      	ldrb	r3, [r7, #22]
 8006e90:	025b      	lsls	r3, r3, #9
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	441a      	add	r2, r3
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	7db8      	ldrb	r0, [r7, #22]
 8006e9c:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	88db      	ldrh	r3, [r3, #6]
 8006ea2:	2b07      	cmp	r3, #7
 8006ea4:	bf28      	it	cs
 8006ea6:	2307      	movcs	r3, #7
 8006ea8:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8006eaa:	7dbb      	ldrb	r3, [r7, #22]
 8006eac:	025b      	lsls	r3, r3, #9
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	89fa      	ldrh	r2, [r7, #14]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 f9d1 	bl	800825e <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8006ebc:	e089      	b.n	8006fd2 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	785a      	ldrb	r2, [r3, #1]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	88db      	ldrh	r3, [r3, #6]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8006ed4:	7dbb      	ldrb	r3, [r7, #22]
 8006ed6:	025b      	lsls	r3, r3, #9
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	18d1      	adds	r1, r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	88db      	ldrh	r3, [r3, #6]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f9d6 	bl	8008294 <USBD_CtlPrepareRx>
    break;
 8006ee8:	e073      	b.n	8006fd2 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ef0:	689c      	ldr	r4, [r3, #8]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	7859      	ldrb	r1, [r3, #1]
 8006ef6:	7db8      	ldrb	r0, [r7, #22]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	47a0      	blx	r4
    break;
 8006efe:	e068      	b.n	8006fd2 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b0b      	cmp	r3, #11
 8006f06:	d852      	bhi.n	8006fae <USBD_CDC_Setup+0x1b6>
 8006f08:	a201      	add	r2, pc, #4	@ (adr r2, 8006f10 <USBD_CDC_Setup+0x118>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f41 	.word	0x08006f41
 8006f14:	08006fbd 	.word	0x08006fbd
 8006f18:	08006faf 	.word	0x08006faf
 8006f1c:	08006faf 	.word	0x08006faf
 8006f20:	08006faf 	.word	0x08006faf
 8006f24:	08006faf 	.word	0x08006faf
 8006f28:	08006faf 	.word	0x08006faf
 8006f2c:	08006faf 	.word	0x08006faf
 8006f30:	08006faf 	.word	0x08006faf
 8006f34:	08006faf 	.word	0x08006faf
 8006f38:	08006f6b 	.word	0x08006f6b
 8006f3c:	08006f95 	.word	0x08006f95
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d107      	bne.n	8006f5c <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f4c:	f107 030a 	add.w	r3, r7, #10
 8006f50:	2202      	movs	r2, #2
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 f982 	bl	800825e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f5a:	e032      	b.n	8006fc2 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 f90c 	bl	800817c <USBD_CtlError>
        ret = USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	75fb      	strb	r3, [r7, #23]
      break;
 8006f68:	e02b      	b.n	8006fc2 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d107      	bne.n	8006f86 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f76:	f107 030d 	add.w	r3, r7, #13
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 f96d 	bl	800825e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f84:	e01d      	b.n	8006fc2 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 f8f7 	bl	800817c <USBD_CtlError>
        ret = USBD_FAIL;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	75fb      	strb	r3, [r7, #23]
      break;
 8006f92:	e016      	b.n	8006fc2 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d00f      	beq.n	8006fc0 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f8ea 	bl	800817c <USBD_CtlError>
        ret = USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006fac:	e008      	b.n	8006fc0 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 f8e3 	bl	800817c <USBD_CtlError>
      ret = USBD_FAIL;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fba:	e002      	b.n	8006fc2 <USBD_CDC_Setup+0x1ca>
      break;
 8006fbc:	bf00      	nop
 8006fbe:	e008      	b.n	8006fd2 <USBD_CDC_Setup+0x1da>
      break;
 8006fc0:	bf00      	nop
    }
    break;
 8006fc2:	e006      	b.n	8006fd2 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 f8d8 	bl	800817c <USBD_CtlError>
    ret = USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	75fb      	strb	r3, [r7, #23]
    break;
 8006fd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd90      	pop	{r4, r7, pc}
 8006fdc:	20001420 	.word	0x20001420
 8006fe0:	20001424 	.word	0x20001424
 8006fe4:	2000142c 	.word	0x2000142c

08006fe8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe8:	b590      	push	{r4, r7, lr}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8006ffe:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007004:	2300      	movs	r3, #0
 8007006:	75bb      	strb	r3, [r7, #22]
 8007008:	e00d      	b.n	8007026 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	7dbb      	ldrb	r3, [r7, #22]
 800700e:	4934      	ldr	r1, [pc, #208]	@ (80070e0 <USBD_CDC_DataIn+0xf8>)
 8007010:	5ccb      	ldrb	r3, [r1, r3]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	429a      	cmp	r2, r3
 8007018:	d102      	bne.n	8007020 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800701a:	7dbb      	ldrb	r3, [r7, #22]
 800701c:	75fb      	strb	r3, [r7, #23]
      break;
 800701e:	e005      	b.n	800702c <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007020:	7dbb      	ldrb	r3, [r7, #22]
 8007022:	3301      	adds	r3, #1
 8007024:	75bb      	strb	r3, [r7, #22]
 8007026:	7dbb      	ldrb	r3, [r7, #22]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0ee      	beq.n	800700a <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	4a2b      	ldr	r2, [pc, #172]	@ (80070e4 <USBD_CDC_DataIn+0xfc>)
 8007038:	4413      	add	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	3318      	adds	r3, #24
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d029      	beq.n	80070a6 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	3318      	adds	r3, #24
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	78f9      	ldrb	r1, [r7, #3]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	460b      	mov	r3, r1
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	440b      	add	r3, r1
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4403      	add	r3, r0
 8007072:	331c      	adds	r3, #28
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	fbb2 f1f3 	udiv	r1, r2, r3
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007080:	2b00      	cmp	r3, #0
 8007082:	d110      	bne.n	80070a6 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007084:	78fa      	ldrb	r2, [r7, #3]
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	440b      	add	r3, r1
 8007092:	3318      	adds	r3, #24
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007098:	78f9      	ldrb	r1, [r7, #3]
 800709a:	2300      	movs	r3, #0
 800709c:	2200      	movs	r2, #0
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 fa19 	bl	80084d6 <USBD_LL_Transmit>
 80070a4:	e016      	b.n	80070d4 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00c      	beq.n	80070d4 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070c0:	691c      	ldr	r4, [r3, #16]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	7df8      	ldrb	r0, [r7, #23]
 80070d2:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd90      	pop	{r4, r7, pc}
 80070de:	bf00      	nop
 80070e0:	20001414 	.word	0x20001414
 80070e4:	2000142c 	.word	0x2000142c

080070e8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80070fc:	2300      	movs	r3, #0
 80070fe:	73bb      	strb	r3, [r7, #14]
 8007100:	e00b      	b.n	800711a <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	4a17      	ldr	r2, [pc, #92]	@ (8007164 <USBD_CDC_DataOut+0x7c>)
 8007106:	5cd3      	ldrb	r3, [r2, r3]
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	429a      	cmp	r2, r3
 800710c:	d102      	bne.n	8007114 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	73fb      	strb	r3, [r7, #15]
      break;
 8007112:	e005      	b.n	8007120 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	3301      	adds	r3, #1
 8007118:	73bb      	strb	r3, [r7, #14]
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007126:	fb02 f303 	mul.w	r3, r2, r3
 800712a:	4a0f      	ldr	r2, [pc, #60]	@ (8007168 <USBD_CDC_DataOut+0x80>)
 800712c:	4413      	add	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fa10 	bl	800855a <USBD_LL_GetRxDataSize>
 800713a:	4602      	mov	r2, r0
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007156:	7bf8      	ldrb	r0, [r7, #15]
 8007158:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20001418 	.word	0x20001418
 8007168:	2000142c 	.word	0x2000142c

0800716c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800716c:	b590      	push	{r4, r7, lr}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
 800717c:	e02d      	b.n	80071da <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	4a18      	ldr	r2, [pc, #96]	@ (80071ec <USBD_CDC_EP0_RxReady+0x80>)
 800718a:	4413      	add	r3, r2
 800718c:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8007194:	2303      	movs	r3, #3
 8007196:	e024      	b.n	80071e2 <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d018      	beq.n	80071d4 <USBD_CDC_EP0_RxReady+0x68>
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80071a8:	2bff      	cmp	r3, #255	@ 0xff
 80071aa:	d013      	beq.n	80071d4 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80071b2:	689c      	ldr	r4, [r3, #8]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	025b      	lsls	r3, r3, #9
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	441a      	add	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80071c8:	7bf8      	ldrb	r0, [r7, #15]
 80071ca:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	22ff      	movs	r2, #255	@ 0xff
 80071d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	3301      	adds	r3, #1
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0ce      	beq.n	800717e <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd90      	pop	{r4, r7, pc}
 80071ea:	bf00      	nop
 80071ec:	2000142c 	.word	0x2000142c

080071f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	224b      	movs	r2, #75	@ 0x4b
 80071fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80071fe:	4b03      	ldr	r3, [pc, #12]	@ (800720c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20000138 	.word	0x20000138

08007210 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	224b      	movs	r2, #75	@ 0x4b
 800721c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800721e:	4b03      	ldr	r3, [pc, #12]	@ (800722c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	200000ec 	.word	0x200000ec

08007230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	224b      	movs	r2, #75	@ 0x4b
 800723c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800723e:	4b03      	ldr	r3, [pc, #12]	@ (800724c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	20000138 	.word	0x20000138

08007250 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	220a      	movs	r2, #10
 800725c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800725e:	4b03      	ldr	r3, [pc, #12]	@ (800726c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	200000a4 	.word	0x200000a4

08007270 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	e004      	b.n	800728e <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	4a09      	ldr	r2, [pc, #36]	@ (80072e0 <USBD_CDC_SetTxBuffer+0x44>)
 80072bc:	4413      	add	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	2000142c 	.word	0x2000142c

080072e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80072fc:	fb02 f303 	mul.w	r3, r2, r3
 8007300:	4a06      	ldr	r2, [pc, #24]	@ (800731c <USBD_CDC_SetRxBuffer+0x38>)
 8007302:	4413      	add	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	2000142c 	.word	0x2000142c

08007320 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	6039      	str	r1, [r7, #0]
 800732a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007330:	2301      	movs	r3, #1
 8007332:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	4a17      	ldr	r2, [pc, #92]	@ (800739c <USBD_CDC_TransmitPacket+0x7c>)
 8007340:	4413      	add	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800734a:	2b00      	cmp	r3, #0
 800734c:	d121      	bne.n	8007392 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2201      	movs	r2, #1
 8007352:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	4a11      	ldr	r2, [pc, #68]	@ (80073a0 <USBD_CDC_TransmitPacket+0x80>)
 800735a:	5cd3      	ldrb	r3, [r2, r3]
 800735c:	f003 020f 	and.w	r2, r3, #15
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007366:	6838      	ldr	r0, [r7, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4403      	add	r3, r0
 8007372:	3318      	adds	r3, #24
 8007374:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	4a09      	ldr	r2, [pc, #36]	@ (80073a0 <USBD_CDC_TransmitPacket+0x80>)
 800737a:	5cd1      	ldrb	r1, [r2, r3]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007388:	6838      	ldr	r0, [r7, #0]
 800738a:	f001 f8a4 	bl	80084d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	2000142c 	.word	0x2000142c
 80073a0:	20001414 	.word	0x20001414

080073a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	6039      	str	r1, [r7, #0]
 80073ae:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	4a11      	ldr	r2, [pc, #68]	@ (8007404 <USBD_CDC_ReceivePacket+0x60>)
 80073c0:	4413      	add	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	7c1b      	ldrb	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10b      	bne.n	80073e4 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007408 <USBD_CDC_ReceivePacket+0x64>)
 80073d0:	5cd1      	ldrb	r1, [r2, r3]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073dc:	6838      	ldr	r0, [r7, #0]
 80073de:	f001 f89b 	bl	8008518 <USBD_LL_PrepareReceive>
 80073e2:	e009      	b.n	80073f8 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	4a08      	ldr	r2, [pc, #32]	@ (8007408 <USBD_CDC_ReceivePacket+0x64>)
 80073e8:	5cd1      	ldrb	r1, [r2, r3]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073f0:	2340      	movs	r3, #64	@ 0x40
 80073f2:	6838      	ldr	r0, [r7, #0]
 80073f4:	f001 f890 	bl	8008518 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	2000142c 	.word	0x2000142c
 8007408:	20001418 	.word	0x20001418

0800740c <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	461a      	mov	r2, r3
 800741a:	4603      	mov	r3, r0
 800741c:	70fb      	strb	r3, [r7, #3]
 800741e:	460b      	mov	r3, r1
 8007420:	70bb      	strb	r3, [r7, #2]
 8007422:	4613      	mov	r3, r2
 8007424:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3309      	adds	r3, #9
 800742a:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]
 8007430:	e05b      	b.n	80074ea <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3302      	adds	r3, #2
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3310      	adds	r3, #16
 800743e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007442:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	330a      	adds	r3, #10
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	331a      	adds	r3, #26
 8007450:	78ba      	ldrb	r2, [r7, #2]
 8007452:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3322      	adds	r3, #34	@ 0x22
 8007458:	78fa      	ldrb	r2, [r7, #3]
 800745a:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3323      	adds	r3, #35	@ 0x23
 8007460:	78ba      	ldrb	r2, [r7, #2]
 8007462:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3326      	adds	r3, #38	@ 0x26
 8007468:	7e3a      	ldrb	r2, [r7, #24]
 800746a:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	332d      	adds	r3, #45	@ 0x2d
 8007470:	78ba      	ldrb	r2, [r7, #2]
 8007472:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3336      	adds	r3, #54	@ 0x36
 8007478:	7f3a      	ldrb	r2, [r7, #28]
 800747a:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	333d      	adds	r3, #61	@ 0x3d
 8007480:	787a      	ldrb	r2, [r7, #1]
 8007482:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3342      	adds	r3, #66	@ 0x42
 8007488:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	491c      	ldr	r1, [pc, #112]	@ (8007500 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800748e:	787a      	ldrb	r2, [r7, #1]
 8007490:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	491b      	ldr	r1, [pc, #108]	@ (8007504 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8007496:	7f3a      	ldrb	r2, [r7, #28]
 8007498:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	491a      	ldr	r1, [pc, #104]	@ (8007508 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800749e:	7e3a      	ldrb	r2, [r7, #24]
 80074a0:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	4919      	ldr	r1, [pc, #100]	@ (800750c <USBD_Update_CDC_ACM_DESC+0x100>)
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	4918      	ldr	r1, [pc, #96]	@ (8007510 <USBD_Update_CDC_ACM_DESC+0x104>)
 80074ae:	78ba      	ldrb	r2, [r7, #2]
 80074b0:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	4917      	ldr	r1, [pc, #92]	@ (8007514 <USBD_Update_CDC_ACM_DESC+0x108>)
 80074b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80074ba:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 80074bc:	787b      	ldrb	r3, [r7, #1]
 80074be:	3302      	adds	r3, #2
 80074c0:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 80074c2:	787b      	ldrb	r3, [r7, #1]
 80074c4:	3301      	adds	r3, #1
 80074c6:	763b      	strb	r3, [r7, #24]
    out_ep++;
 80074c8:	7f3b      	ldrb	r3, [r7, #28]
 80074ca:	3301      	adds	r3, #1
 80074cc:	773b      	strb	r3, [r7, #28]
    str_idx++;
 80074ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80074d2:	3301      	adds	r3, #1
 80074d4:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	3302      	adds	r3, #2
 80074dc:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	3301      	adds	r3, #1
 80074e2:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	3301      	adds	r3, #1
 80074e8:	73fb      	strb	r3, [r7, #15]
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0a0      	beq.n	8007432 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	20001414 	.word	0x20001414
 8007504:	20001418 	.word	0x20001418
 8007508:	2000141c 	.word	0x2000141c
 800750c:	20001420 	.word	0x20001420
 8007510:	20001424 	.word	0x20001424
 8007514:	20001428 	.word	0x20001428

08007518 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8007524:	4b08      	ldr	r3, [pc, #32]	@ (8007548 <USBD_COMPOSITE_Init+0x30>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	4611      	mov	r1, r2
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 8007530:	4b06      	ldr	r3, [pc, #24]	@ (800754c <USBD_COMPOSITE_Init+0x34>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	4611      	mov	r1, r2
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	200000b0 	.word	0x200000b0
 800754c:	200001d0 	.word	0x200001d0

08007550 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800755c:	4b08      	ldr	r3, [pc, #32]	@ (8007580 <USBD_COMPOSITE_DeInit+0x30>)
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	4611      	mov	r1, r2
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8007568:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <USBD_COMPOSITE_DeInit+0x34>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	78fa      	ldrb	r2, [r7, #3]
 800756e:	4611      	mov	r1, r2
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	200000b0 	.word	0x200000b0
 8007584:	200001d0 	.word	0x200001d0

08007588 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
 8007596:	e019      	b.n	80075cc <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	889b      	ldrh	r3, [r3, #4]
 800759c:	b2da      	uxtb	r2, r3
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	4915      	ldr	r1, [pc, #84]	@ (80075f8 <USBD_COMPOSITE_Setup+0x70>)
 80075a2:	5ccb      	ldrb	r3, [r1, r3]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d007      	beq.n	80075b8 <USBD_COMPOSITE_Setup+0x30>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	889b      	ldrh	r3, [r3, #4]
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	4912      	ldr	r1, [pc, #72]	@ (80075fc <USBD_COMPOSITE_Setup+0x74>)
 80075b2:	5ccb      	ldrb	r3, [r1, r3]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d106      	bne.n	80075c6 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 80075b8:	4b11      	ldr	r3, [pc, #68]	@ (8007600 <USBD_COMPOSITE_Setup+0x78>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	e014      	b.n	80075f0 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	3301      	adds	r3, #1
 80075ca:	73fb      	strb	r3, [r7, #15]
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0e2      	beq.n	8007598 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	889b      	ldrh	r3, [r3, #4]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <USBD_COMPOSITE_Setup+0x7c>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d106      	bne.n	80075ee <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 80075e0:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <USBD_COMPOSITE_Setup+0x80>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	e000      	b.n	80075f0 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 80075ee:	2303      	movs	r3, #3
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20001420 	.word	0x20001420
 80075fc:	20001424 	.word	0x20001424
 8007600:	200000b0 	.word	0x200000b0
 8007604:	20001760 	.word	0x20001760
 8007608:	200001d0 	.word	0x200001d0

0800760c <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
 800761c:	e01a      	b.n	8007654 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	4918      	ldr	r1, [pc, #96]	@ (8007684 <USBD_COMPOSITE_DataIn+0x78>)
 8007624:	5ccb      	ldrb	r3, [r1, r3]
 8007626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762a:	429a      	cmp	r2, r3
 800762c:	d007      	beq.n	800763e <USBD_COMPOSITE_DataIn+0x32>
 800762e:	78fa      	ldrb	r2, [r7, #3]
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	4915      	ldr	r1, [pc, #84]	@ (8007688 <USBD_COMPOSITE_DataIn+0x7c>)
 8007634:	5ccb      	ldrb	r3, [r1, r3]
 8007636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800763a:	429a      	cmp	r2, r3
 800763c:	d107      	bne.n	800764e <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800763e:	4b13      	ldr	r3, [pc, #76]	@ (800768c <USBD_COMPOSITE_DataIn+0x80>)
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	4611      	mov	r1, r2
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
 800764a:	4603      	mov	r3, r0
 800764c:	e015      	b.n	800767a <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	3301      	adds	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0e1      	beq.n	800761e <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800765a:	78fa      	ldrb	r2, [r7, #3]
 800765c:	4b0c      	ldr	r3, [pc, #48]	@ (8007690 <USBD_COMPOSITE_DataIn+0x84>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007664:	429a      	cmp	r2, r3
 8007666:	d107      	bne.n	8007678 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8007668:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <USBD_COMPOSITE_DataIn+0x88>)
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	4611      	mov	r1, r2
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
 8007674:	4603      	mov	r3, r0
 8007676:	e000      	b.n	800767a <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8007678:	2303      	movs	r3, #3
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20001414 	.word	0x20001414
 8007688:	2000141c 	.word	0x2000141c
 800768c:	200000b0 	.word	0x200000b0
 8007690:	200001ce 	.word	0x200001ce
 8007694:	200001d0 	.word	0x200001d0

08007698 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 80076a0:	4b06      	ldr	r3, [pc, #24]	@ (80076bc <USBD_COMPOSITE_EP0_RxReady+0x24>)
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 80076a8:	4b05      	ldr	r3, [pc, #20]	@ (80076c0 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200000b0 	.word	0x200000b0
 80076c0:	200001d0 	.word	0x200001d0

080076c4 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
 8007734:	e010      	b.n	8007758 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	4a12      	ldr	r2, [pc, #72]	@ (8007784 <USBD_COMPOSITE_DataOut+0x60>)
 800773a:	5cd3      	ldrb	r3, [r2, r3]
 800773c:	78fa      	ldrb	r2, [r7, #3]
 800773e:	429a      	cmp	r2, r3
 8007740:	d107      	bne.n	8007752 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8007742:	4b11      	ldr	r3, [pc, #68]	@ (8007788 <USBD_COMPOSITE_DataOut+0x64>)
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	4611      	mov	r1, r2
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
 800774e:	4603      	mov	r3, r0
 8007750:	e013      	b.n	800777a <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	3301      	adds	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0eb      	beq.n	8007736 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800775e:	4b0b      	ldr	r3, [pc, #44]	@ (800778c <USBD_COMPOSITE_DataOut+0x68>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	78fa      	ldrb	r2, [r7, #3]
 8007764:	429a      	cmp	r2, r3
 8007766:	d107      	bne.n	8007778 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8007768:	4b09      	ldr	r3, [pc, #36]	@ (8007790 <USBD_COMPOSITE_DataOut+0x6c>)
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	78fa      	ldrb	r2, [r7, #3]
 800776e:	4611      	mov	r1, r2
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
 8007774:	4603      	mov	r3, r0
 8007776:	e000      	b.n	800777a <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8007778:	2303      	movs	r3, #3
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20001418 	.word	0x20001418
 8007788:	200000b0 	.word	0x200000b0
 800778c:	200001cf 	.word	0x200001cf
 8007790:	200001d0 	.word	0x200001d0

08007794 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	226b      	movs	r2, #107	@ 0x6b
 80077a0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	@ (80077b0 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	200016b4 	.word	0x200016b4

080077b4 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	226b      	movs	r2, #107	@ 0x6b
 80077c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 80077c2:	4b03      	ldr	r3, [pc, #12]	@ (80077d0 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	20001648 	.word	0x20001648

080077d4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	226b      	movs	r2, #107	@ 0x6b
 80077e0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80077e2:	4b03      	ldr	r3, [pc, #12]	@ (80077f0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	200016b4 	.word	0x200016b4

080077f4 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	220a      	movs	r2, #10
 8007800:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8007802:	4b03      	ldr	r3, [pc, #12]	@ (8007810 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	200001c4 	.word	0x200001c4

08007814 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	@ 0x28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	460b      	mov	r3, r1
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8007822:	4b20      	ldr	r3, [pc, #128]	@ (80078a4 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	7afa      	ldrb	r2, [r7, #11]
 8007828:	429a      	cmp	r2, r3
 800782a:	d836      	bhi.n	800789a <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	f107 0318 	add.w	r3, r7, #24
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007842:	e01a      	b.n	800787a <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8007844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007848:	4a17      	ldr	r2, [pc, #92]	@ (80078a8 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800784a:	5cd3      	ldrb	r3, [r2, r3]
 800784c:	7afa      	ldrb	r2, [r7, #11]
 800784e:	429a      	cmp	r2, r3
 8007850:	d10e      	bne.n	8007870 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8007852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007856:	f107 0014 	add.w	r0, r7, #20
 800785a:	4a14      	ldr	r2, [pc, #80]	@ (80078ac <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800785c:	2110      	movs	r1, #16
 800785e:	f003 f95f 	bl	800ab20 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8007862:	f107 0314 	add.w	r3, r7, #20
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	4911      	ldr	r1, [pc, #68]	@ (80078b0 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fc97 	bl	800819e <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8007870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007874:	3301      	adds	r3, #1
 8007876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800787a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0e0      	beq.n	8007844 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 8007882:	4b0c      	ldr	r3, [pc, #48]	@ (80078b4 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	7afa      	ldrb	r2, [r7, #11]
 8007888:	429a      	cmp	r2, r3
 800788a:	d104      	bne.n	8007896 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4908      	ldr	r1, [pc, #32]	@ (80078b0 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8007890:	4809      	ldr	r0, [pc, #36]	@ (80078b8 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8007892:	f000 fc84 	bl	800819e <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8007896:	4b06      	ldr	r3, [pc, #24]	@ (80078b0 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8007898:	e000      	b.n	800789c <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800789a:	2300      	movs	r3, #0
  }
}
 800789c:	4618      	mov	r0, r3
 800789e:	3728      	adds	r7, #40	@ 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	200001c0 	.word	0x200001c0
 80078a8:	20001428 	.word	0x20001428
 80078ac:	0800b5b0 	.word	0x0800b5b0
 80078b0:	20001720 	.word	0x20001720
 80078b4:	20001761 	.word	0x20001761
 80078b8:	0800b5c0 	.word	0x0800b5c0

080078bc <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80078bc:	b590      	push	{r4, r7, lr}
 80078be:	b089      	sub	sp, #36	@ 0x24
 80078c0:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 80078ca:	2381      	movs	r3, #129	@ 0x81
 80078cc:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 80078ce:	2301      	movs	r3, #1
 80078d0:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 80078d2:	2300      	movs	r3, #0
 80078d4:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 80078d6:	4b74      	ldr	r3, [pc, #464]	@ (8007aa8 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	1d3a      	adds	r2, r7, #4
 80078dc:	4610      	mov	r0, r2
 80078de:	4798      	blx	r3
 80078e0:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 80078e2:	4b72      	ldr	r3, [pc, #456]	@ (8007aac <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	7ab8      	ldrb	r0, [r7, #10]
 80078e8:	7afa      	ldrb	r2, [r7, #11]
 80078ea:	7a79      	ldrb	r1, [r7, #9]
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	4603      	mov	r3, r0
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fb95 	bl	8008020 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3309      	adds	r3, #9
 80078fa:	88ba      	ldrh	r2, [r7, #4]
 80078fc:	3a09      	subs	r2, #9
 80078fe:	4619      	mov	r1, r3
 8007900:	486b      	ldr	r0, [pc, #428]	@ (8007ab0 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8007902:	f003 f9db 	bl	800acbc <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 8007906:	4b68      	ldr	r3, [pc, #416]	@ (8007aa8 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8007908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790a:	1d3a      	adds	r2, r7, #4
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
 8007910:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8007912:	4b66      	ldr	r3, [pc, #408]	@ (8007aac <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	7ab8      	ldrb	r0, [r7, #10]
 8007918:	7afa      	ldrb	r2, [r7, #11]
 800791a:	7a79      	ldrb	r1, [r7, #9]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	4603      	mov	r3, r0
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fb7d 	bl	8008020 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3309      	adds	r3, #9
 800792a:	88ba      	ldrh	r2, [r7, #4]
 800792c:	3a09      	subs	r2, #9
 800792e:	4619      	mov	r1, r3
 8007930:	4860      	ldr	r0, [pc, #384]	@ (8007ab4 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8007932:	f003 f9c3 	bl	800acbc <memcpy>

  in_ep_track += 1;
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	3301      	adds	r3, #1
 800793a:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800793c:	7abb      	ldrb	r3, [r7, #10]
 800793e:	3301      	adds	r3, #1
 8007940:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8007942:	7a7b      	ldrb	r3, [r7, #9]
 8007944:	3301      	adds	r3, #1
 8007946:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8007948:	4b58      	ldr	r3, [pc, #352]	@ (8007aac <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	3301      	adds	r3, #1
 800794e:	b2da      	uxtb	r2, r3
 8007950:	4b56      	ldr	r3, [pc, #344]	@ (8007aac <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8007952:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8007954:	4b58      	ldr	r3, [pc, #352]	@ (8007ab8 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	1d3a      	adds	r2, r7, #4
 800795a:	4610      	mov	r0, r2
 800795c:	4798      	blx	r3
 800795e:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8007960:	7a7b      	ldrb	r3, [r7, #9]
 8007962:	3301      	adds	r3, #1
 8007964:	b2d8      	uxtb	r0, r3
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	3301      	adds	r3, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	4a4f      	ldr	r2, [pc, #316]	@ (8007aac <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800796e:	7812      	ldrb	r2, [r2, #0]
 8007970:	7afc      	ldrb	r4, [r7, #11]
 8007972:	7a79      	ldrb	r1, [r7, #9]
 8007974:	9202      	str	r2, [sp, #8]
 8007976:	7aba      	ldrb	r2, [r7, #10]
 8007978:	9201      	str	r2, [sp, #4]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4623      	mov	r3, r4
 800797e:	4602      	mov	r2, r0
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7ff fd43 	bl	800740c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3309      	adds	r3, #9
 800798a:	88ba      	ldrh	r2, [r7, #4]
 800798c:	3a09      	subs	r2, #9
 800798e:	4619      	mov	r1, r3
 8007990:	484a      	ldr	r0, [pc, #296]	@ (8007abc <USBD_COMPOSITE_Mount_Class+0x200>)
 8007992:	f003 f993 	bl	800acbc <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8007996:	4b48      	ldr	r3, [pc, #288]	@ (8007ab8 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8007998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799a:	1d3a      	adds	r2, r7, #4
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80079a2:	7a7b      	ldrb	r3, [r7, #9]
 80079a4:	3301      	adds	r3, #1
 80079a6:	b2d8      	uxtb	r0, r3
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	3301      	adds	r3, #1
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	4a3f      	ldr	r2, [pc, #252]	@ (8007aac <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	7afc      	ldrb	r4, [r7, #11]
 80079b4:	7a79      	ldrb	r1, [r7, #9]
 80079b6:	9202      	str	r2, [sp, #8]
 80079b8:	7aba      	ldrb	r2, [r7, #10]
 80079ba:	9201      	str	r2, [sp, #4]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	4623      	mov	r3, r4
 80079c0:	4602      	mov	r2, r0
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7ff fd22 	bl	800740c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3309      	adds	r3, #9
 80079cc:	88ba      	ldrh	r2, [r7, #4]
 80079ce:	3a09      	subs	r2, #9
 80079d0:	4619      	mov	r1, r3
 80079d2:	483b      	ldr	r0, [pc, #236]	@ (8007ac0 <USBD_COMPOSITE_Mount_Class+0x204>)
 80079d4:	f003 f972 	bl	800acbc <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	3302      	adds	r3, #2
 80079dc:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 80079de:	7abb      	ldrb	r3, [r7, #10]
 80079e0:	3301      	adds	r3, #1
 80079e2:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 80079e4:	7a7b      	ldrb	r3, [r7, #9]
 80079e6:	3302      	adds	r3, #2
 80079e8:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 80079ea:	4b30      	ldr	r3, [pc, #192]	@ (8007aac <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	4b2e      	ldr	r3, [pc, #184]	@ (8007aac <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80079f4:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 80079f6:	236b      	movs	r3, #107	@ 0x6b
 80079f8:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 80079fa:	4b32      	ldr	r3, [pc, #200]	@ (8007ac4 <USBD_COMPOSITE_Mount_Class+0x208>)
 80079fc:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2209      	movs	r2, #9
 8007a02:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	2202      	movs	r2, #2
 8007a0a:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3302      	adds	r3, #2
 8007a10:	88fa      	ldrh	r2, [r7, #6]
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	0a1b      	lsrs	r3, r3, #8
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3303      	adds	r3, #3
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3304      	adds	r3, #4
 8007a28:	7a7a      	ldrb	r2, [r7, #9]
 8007a2a:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3305      	adds	r3, #5
 8007a30:	2201      	movs	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3306      	adds	r3, #6
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3307      	adds	r3, #7
 8007a40:	22c0      	movs	r2, #192	@ 0xc0
 8007a42:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3308      	adds	r3, #8
 8007a48:	2232      	movs	r2, #50	@ 0x32
 8007a4a:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8007a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac8 <USBD_COMPOSITE_Mount_Class+0x20c>)
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2209      	movs	r2, #9
 8007a54:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3302      	adds	r3, #2
 8007a62:	88fa      	ldrh	r2, [r7, #6]
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3303      	adds	r3, #3
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	7a7a      	ldrb	r2, [r7, #9]
 8007a7c:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3305      	adds	r3, #5
 8007a82:	2201      	movs	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3306      	adds	r3, #6
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3307      	adds	r3, #7
 8007a92:	22c0      	movs	r2, #192	@ 0xc0
 8007a94:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3308      	adds	r3, #8
 8007a9a:	2232      	movs	r2, #50	@ 0x32
 8007a9c:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd90      	pop	{r4, r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	200001d0 	.word	0x200001d0
 8007aac:	200001c0 	.word	0x200001c0
 8007ab0:	20001651 	.word	0x20001651
 8007ab4:	200016bd 	.word	0x200016bd
 8007ab8:	200000b0 	.word	0x200000b0
 8007abc:	20001671 	.word	0x20001671
 8007ac0:	200016dd 	.word	0x200016dd
 8007ac4:	200016b4 	.word	0x200016b4
 8007ac8:	20001648 	.word	0x20001648

08007acc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 8007ad8:	4b43      	ldr	r3, [pc, #268]	@ (8007be8 <USBD_CUSTOM_HID_Init+0x11c>)
 8007ada:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 8007aea:	2302      	movs	r3, #2
 8007aec:	e077      	b.n	8007bde <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	7c1b      	ldrb	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d11b      	bne.n	8007b36 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007afe:	4b3b      	ldr	r3, [pc, #236]	@ (8007bec <USBD_CUSTOM_HID_Init+0x120>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f003 020f 	and.w	r2, r3, #15
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	3326      	adds	r3, #38	@ 0x26
 8007b14:	2205      	movs	r2, #5
 8007b16:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007b18:	4b35      	ldr	r3, [pc, #212]	@ (8007bf0 <USBD_CUSTOM_HID_Init+0x124>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f003 020f 	and.w	r2, r3, #15
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007b30:	2205      	movs	r2, #5
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	e01a      	b.n	8007b6c <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007b36:	4b2d      	ldr	r3, [pc, #180]	@ (8007bec <USBD_CUSTOM_HID_Init+0x120>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f003 020f 	and.w	r2, r3, #15
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	3326      	adds	r3, #38	@ 0x26
 8007b4c:	2205      	movs	r2, #5
 8007b4e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007b50:	4b27      	ldr	r3, [pc, #156]	@ (8007bf0 <USBD_CUSTOM_HID_Init+0x124>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007b68:	2205      	movs	r2, #5
 8007b6a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 8007b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8007bec <USBD_CUSTOM_HID_Init+0x120>)
 8007b6e:	7819      	ldrb	r1, [r3, #0]
 8007b70:	2302      	movs	r3, #2
 8007b72:	2203      	movs	r2, #3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc4a 	bl	800840e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bec <USBD_CUSTOM_HID_Init+0x120>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	f003 020f 	and.w	r2, r3, #15
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	3324      	adds	r3, #36	@ 0x24
 8007b90:	2201      	movs	r2, #1
 8007b92:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 8007b94:	4b16      	ldr	r3, [pc, #88]	@ (8007bf0 <USBD_CUSTOM_HID_Init+0x124>)
 8007b96:	7819      	ldrb	r1, [r3, #0]
 8007b98:	2302      	movs	r3, #2
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fc36 	bl	800840e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 8007ba2:	4b13      	ldr	r3, [pc, #76]	@ (8007bf0 <USBD_CUSTOM_HID_Init+0x124>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f003 020f 	and.w	r2, r3, #15
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bba:	2201      	movs	r2, #1
 8007bbc:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 8007bce:	4b08      	ldr	r3, [pc, #32]	@ (8007bf0 <USBD_CUSTOM_HID_Init+0x124>)
 8007bd0:	7819      	ldrb	r1, [r3, #0]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fc9e 	bl	8008518 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20001764 	.word	0x20001764
 8007bec:	200001ce 	.word	0x200001ce
 8007bf0:	200001cf 	.word	0x200001cf

08007bf4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8007c00:	4b2a      	ldr	r3, [pc, #168]	@ (8007cac <USBD_CUSTOM_HID_DeInit+0xb8>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fc27 	bl	800845a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8007c0c:	4b27      	ldr	r3, [pc, #156]	@ (8007cac <USBD_CUSTOM_HID_DeInit+0xb8>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f003 020f 	and.w	r2, r3, #15
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	440b      	add	r3, r1
 8007c20:	3324      	adds	r3, #36	@ 0x24
 8007c22:	2200      	movs	r2, #0
 8007c24:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 8007c26:	4b21      	ldr	r3, [pc, #132]	@ (8007cac <USBD_CUSTOM_HID_DeInit+0xb8>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 020f 	and.w	r2, r3, #15
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	3326      	adds	r3, #38	@ 0x26
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8007c40:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb0 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fc07 	bl	800845a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8007c4c:	4b18      	ldr	r3, [pc, #96]	@ (8007cb0 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	f003 020f 	and.w	r2, r3, #15
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	440b      	add	r3, r1
 8007c60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c64:	2200      	movs	r2, #0
 8007c66:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 8007c68:	4b11      	ldr	r3, [pc, #68]	@ (8007cb0 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007c80:	2200      	movs	r2, #0
 8007c82:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200001ce 	.word	0x200001ce
 8007cb0:	200001cf 	.word	0x200001cf

08007cb4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007cc4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e0ed      	b.n	8007ebc <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d052      	beq.n	8007d92 <USBD_CUSTOM_HID_Setup+0xde>
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	f040 80dd 	bne.w	8007eac <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	3b02      	subs	r3, #2
 8007cf8:	2b09      	cmp	r3, #9
 8007cfa:	d842      	bhi.n	8007d82 <USBD_CUSTOM_HID_Setup+0xce>
 8007cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <USBD_CUSTOM_HID_Setup+0x50>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d5d 	.word	0x08007d5d
 8007d08:	08007d3b 	.word	0x08007d3b
 8007d0c:	08007d83 	.word	0x08007d83
 8007d10:	08007d83 	.word	0x08007d83
 8007d14:	08007d83 	.word	0x08007d83
 8007d18:	08007d83 	.word	0x08007d83
 8007d1c:	08007d83 	.word	0x08007d83
 8007d20:	08007d6d 	.word	0x08007d6d
 8007d24:	08007d4b 	.word	0x08007d4b
 8007d28:	08007d2d 	.word	0x08007d2d
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	885b      	ldrh	r3, [r3, #2]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	461a      	mov	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]
      break;
 8007d38:	e02a      	b.n	8007d90 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	2201      	movs	r2, #1
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa8b 	bl	800825e <USBD_CtlSendData>
      break;
 8007d48:	e022      	b.n	8007d90 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	885b      	ldrh	r3, [r3, #2]
 8007d4e:	0a1b      	lsrs	r3, r3, #8
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	461a      	mov	r2, r3
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	609a      	str	r2, [r3, #8]
      break;
 8007d5a:	e019      	b.n	8007d90 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	3308      	adds	r3, #8
 8007d60:	2201      	movs	r2, #1
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fa7a 	bl	800825e <USBD_CtlSendData>
      break;
 8007d6a:	e011      	b.n	8007d90 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007d72:	6939      	ldr	r1, [r7, #16]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	88db      	ldrh	r3, [r3, #6]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa8a 	bl	8008294 <USBD_CtlPrepareRx>
      break;
 8007d80:	e006      	b.n	8007d90 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f9f9 	bl	800817c <USBD_CtlError>
      ret = USBD_FAIL;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8e:	bf00      	nop
    }
    break;
 8007d90:	e093      	b.n	8007eba <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b0b      	cmp	r3, #11
 8007d98:	d87f      	bhi.n	8007e9a <USBD_CUSTOM_HID_Setup+0x1e6>
 8007d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007da0 <USBD_CUSTOM_HID_Setup+0xec>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007dd1 	.word	0x08007dd1
 8007da4:	08007ea9 	.word	0x08007ea9
 8007da8:	08007e9b 	.word	0x08007e9b
 8007dac:	08007e9b 	.word	0x08007e9b
 8007db0:	08007e9b 	.word	0x08007e9b
 8007db4:	08007e9b 	.word	0x08007e9b
 8007db8:	08007dfb 	.word	0x08007dfb
 8007dbc:	08007e9b 	.word	0x08007e9b
 8007dc0:	08007e9b 	.word	0x08007e9b
 8007dc4:	08007e9b 	.word	0x08007e9b
 8007dc8:	08007e49 	.word	0x08007e49
 8007dcc:	08007e73 	.word	0x08007e73
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d107      	bne.n	8007dec <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ddc:	f107 030e 	add.w	r3, r7, #14
 8007de0:	2202      	movs	r2, #2
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fa3a 	bl	800825e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007dea:	e05e      	b.n	8007eaa <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f9c4 	bl	800817c <USBD_CtlError>
        ret = USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	75fb      	strb	r3, [r7, #23]
      break;
 8007df8:	e057      	b.n	8007eaa <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	885b      	ldrh	r3, [r3, #2]
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b22      	cmp	r3, #34	@ 0x22
 8007e04:	d10b      	bne.n	8007e1e <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b21      	cmp	r3, #33	@ 0x21
 8007e0c:	bf28      	it	cs
 8007e0e:	2321      	movcs	r3, #33	@ 0x21
 8007e10:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	e00d      	b.n	8007e3a <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	885b      	ldrh	r3, [r3, #2]
 8007e22:	0a1b      	lsrs	r3, r3, #8
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b21      	cmp	r3, #33	@ 0x21
 8007e28:	d107      	bne.n	8007e3a <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8007e2a:	4b26      	ldr	r3, [pc, #152]	@ (8007ec4 <USBD_CUSTOM_HID_Setup+0x210>)
 8007e2c:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	88db      	ldrh	r3, [r3, #6]
 8007e32:	2b09      	cmp	r3, #9
 8007e34:	bf28      	it	cs
 8007e36:	2309      	movcs	r3, #9
 8007e38:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e3a:	8bfb      	ldrh	r3, [r7, #30]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	69b9      	ldr	r1, [r7, #24]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa0c 	bl	800825e <USBD_CtlSendData>
      break;
 8007e46:	e030      	b.n	8007eaa <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d107      	bne.n	8007e64 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	330c      	adds	r3, #12
 8007e58:	2201      	movs	r2, #1
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f9fe 	bl	800825e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007e62:	e022      	b.n	8007eaa <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f988 	bl	800817c <USBD_CtlError>
        ret = USBD_FAIL;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e70:	e01b      	b.n	8007eaa <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d106      	bne.n	8007e8c <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007e8a:	e00e      	b.n	8007eaa <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f974 	bl	800817c <USBD_CtlError>
        ret = USBD_FAIL;
 8007e94:	2303      	movs	r3, #3
 8007e96:	75fb      	strb	r3, [r7, #23]
      break;
 8007e98:	e007      	b.n	8007eaa <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f96d 	bl	800817c <USBD_CtlError>
      ret = USBD_FAIL;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea6:	e000      	b.n	8007eaa <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 8007ea8:	bf00      	nop
    }
    break;
 8007eaa:	e006      	b.n	8007eba <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f964 	bl	800817c <USBD_CtlError>
    ret = USBD_FAIL;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	75fb      	strb	r3, [r7, #23]
    break;
 8007eb8:	bf00      	nop
  }
  return (uint8_t)ret;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3720      	adds	r7, #32
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000290 	.word	0x20000290

08007ec8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2229      	movs	r2, #41	@ 0x29
 8007ed4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8007ed6:	4b03      	ldr	r3, [pc, #12]	@ (8007ee4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	2000020c 	.word	0x2000020c

08007ee8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2229      	movs	r2, #41	@ 0x29
 8007ef4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8007ef6:	4b03      	ldr	r3, [pc, #12]	@ (8007f04 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	20000238 	.word	0x20000238

08007f08 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2229      	movs	r2, #41	@ 0x29
 8007f14:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007f16:	4b03      	ldr	r3, [pc, #12]	@ (8007f24 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	20000264 	.word	0x20000264

08007f28 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e00e      	b.n	8007f84 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	7810      	ldrb	r0, [r2, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	7852      	ldrb	r2, [r2, #1]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f9a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e011      	b.n	8007fca <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d10c      	bne.n	8007fc8 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	7810      	ldrb	r0, [r2, #0]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	7852      	ldrb	r2, [r2, #1]
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	220a      	movs	r2, #10
 8007fe0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007fe2:	4b03      	ldr	r3, [pc, #12]	@ (8007ff0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	2000029c 	.word	0x2000029c

08007ff4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008004:	2303      	movs	r3, #3
 8008006:	e004      	b.n	8008012 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	4608      	mov	r0, r1
 800802a:	4611      	mov	r1, r2
 800802c:	461a      	mov	r2, r3
 800802e:	4603      	mov	r3, r0
 8008030:	70fb      	strb	r3, [r7, #3]
 8008032:	460b      	mov	r3, r1
 8008034:	70bb      	strb	r3, [r7, #2]
 8008036:	4613      	mov	r3, r2
 8008038:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	330b      	adds	r3, #11
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3311      	adds	r3, #17
 8008046:	7c3a      	ldrb	r2, [r7, #16]
 8008048:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	331d      	adds	r3, #29
 800804e:	78ba      	ldrb	r2, [r7, #2]
 8008050:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3324      	adds	r3, #36	@ 0x24
 8008056:	787a      	ldrb	r2, [r7, #1]
 8008058:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800805a:	4a09      	ldr	r2, [pc, #36]	@ (8008080 <USBD_Update_HID_Custom_DESC+0x60>)
 800805c:	78bb      	ldrb	r3, [r7, #2]
 800805e:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 8008060:	4a08      	ldr	r2, [pc, #32]	@ (8008084 <USBD_Update_HID_Custom_DESC+0x64>)
 8008062:	787b      	ldrb	r3, [r7, #1]
 8008064:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 8008066:	4a08      	ldr	r2, [pc, #32]	@ (8008088 <USBD_Update_HID_Custom_DESC+0x68>)
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800806c:	4a07      	ldr	r2, [pc, #28]	@ (800808c <USBD_Update_HID_Custom_DESC+0x6c>)
 800806e:	7c3b      	ldrb	r3, [r7, #16]
 8008070:	7013      	strb	r3, [r2, #0]
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	200001ce 	.word	0x200001ce
 8008084:	200001cf 	.word	0x200001cf
 8008088:	20001760 	.word	0x20001760
 800808c:	20001761 	.word	0x20001761

08008090 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	4613      	mov	r3, r2
 800809c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e01b      	b.n	80080e0 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	79fa      	ldrb	r2, [r7, #7]
 80080d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f921 	bl	800831c <USBD_LL_Init>
 80080da:	4603      	mov	r3, r0
 80080dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080de:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e02d      	b.n	800815c <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7c1b      	ldrb	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d112      	bne.n	8008136 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01e      	beq.n	800815a <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008124:	f107 020e 	add.w	r2, r7, #14
 8008128:	4610      	mov	r0, r2
 800812a:	4798      	blx	r3
 800812c:	4602      	mov	r2, r0
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 8008134:	e011      	b.n	800815a <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00b      	beq.n	800815a <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	f107 020e 	add.w	r2, r7, #14
 800814e:	4610      	mov	r0, r2
 8008150:	4798      	blx	r3
 8008152:	4602      	mov	r2, r0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f933 	bl	80083d8 <USBD_LL_Start>
 8008172:	4603      	mov	r3, r0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008186:	2180      	movs	r1, #128	@ 0x80
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f985 	bl	8008498 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800818e:	2100      	movs	r1, #0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f981 	bl	8008498 <USBD_LL_StallEP>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d036      	beq.n	8008222 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081b8:	6938      	ldr	r0, [r7, #16]
 80081ba:	f000 f836 	bl	800822a <USBD_GetLen>
 80081be:	4603      	mov	r3, r0
 80081c0:	3301      	adds	r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	7812      	ldrb	r2, [r2, #0]
 80081d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	3301      	adds	r3, #1
 80081dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	4413      	add	r3, r2
 80081e4:	2203      	movs	r2, #3
 80081e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	3301      	adds	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081ee:	e013      	b.n	8008218 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	4413      	add	r3, r2
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3301      	adds	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
    idx++;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	3301      	adds	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	4413      	add	r3, r2
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
    idx++;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	3301      	adds	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e7      	bne.n	80081f0 <USBD_GetString+0x52>
 8008220:	e000      	b.n	8008224 <USBD_GetString+0x86>
    return;
 8008222:	bf00      	nop
  }
}
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800823a:	e005      	b.n	8008248 <USBD_GetLen+0x1e>
  {
    len++;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	3301      	adds	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	3301      	adds	r3, #1
 8008246:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1f5      	bne.n	800823c <USBD_GetLen+0x12>
  }

  return len;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2202      	movs	r2, #2
 800826e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	2100      	movs	r1, #0
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f926 	bl	80084d6 <USBD_LL_Transmit>

  return USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2203      	movs	r2, #3
 80082a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	2100      	movs	r1, #0
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 f92a 	bl	8008518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
 80082da:	4613      	mov	r3, r2
 80082dc:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80082de:	883b      	ldrh	r3, [r7, #0]
 80082e0:	089b      	lsrs	r3, r3, #2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7fa fa1d 	bl	8002728 <HAL_PCDEx_SetTxFiFo>
 80082ee:	4603      	mov	r3, r0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 8008304:	887b      	ldrh	r3, [r7, #2]
 8008306:	089b      	lsrs	r3, r3, #2
 8008308:	b29b      	uxth	r3, r3
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7fa fa52 	bl	80027b6 <HAL_PCDEx_SetRxFiFo>
 8008312:	4603      	mov	r3, r0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8008324:	4b27      	ldr	r3, [pc, #156]	@ (80083c4 <USBD_LL_Init+0xa8>)
 8008326:	4a28      	ldr	r2, [pc, #160]	@ (80083c8 <USBD_LL_Init+0xac>)
 8008328:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d143      	bne.n	80083ba <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 8008332:	4b24      	ldr	r3, [pc, #144]	@ (80083c4 <USBD_LL_Init+0xa8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800833c:	4b21      	ldr	r3, [pc, #132]	@ (80083c4 <USBD_LL_Init+0xa8>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 8008346:	4b1f      	ldr	r3, [pc, #124]	@ (80083c4 <USBD_LL_Init+0xa8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff ffd2 	bl	80082f8 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 8008354:	4b1b      	ldr	r3, [pc, #108]	@ (80083c4 <USBD_LL_Init+0xa8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2240      	movs	r2, #64	@ 0x40
 800835a:	2100      	movs	r1, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff ffb6 	bl	80082ce <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 8008362:	4b18      	ldr	r3, [pc, #96]	@ (80083c4 <USBD_LL_Init+0xa8>)
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	4b19      	ldr	r3, [pc, #100]	@ (80083cc <USBD_LL_Init+0xb0>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2240      	movs	r2, #64	@ 0x40
 8008372:	4619      	mov	r1, r3
 8008374:	f7ff ffab 	bl	80082ce <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
 800837c:	e01a      	b.n	80083b4 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800837e:	4b11      	ldr	r3, [pc, #68]	@ (80083c4 <USBD_LL_Init+0xa8>)
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	4a12      	ldr	r2, [pc, #72]	@ (80083d0 <USBD_LL_Init+0xb4>)
 8008386:	5cd3      	ldrb	r3, [r2, r3]
 8008388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2280      	movs	r2, #128	@ 0x80
 8008390:	4619      	mov	r1, r3
 8008392:	f7ff ff9c 	bl	80082ce <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 8008396:	4b0b      	ldr	r3, [pc, #44]	@ (80083c4 <USBD_LL_Init+0xa8>)
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	4a0d      	ldr	r2, [pc, #52]	@ (80083d4 <USBD_LL_Init+0xb8>)
 800839e:	5cd3      	ldrb	r3, [r2, r3]
 80083a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2240      	movs	r2, #64	@ 0x40
 80083a8:	4619      	mov	r1, r3
 80083aa:	f7ff ff90 	bl	80082ce <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	3301      	adds	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0e1      	beq.n	800837e <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	2000177c 	.word	0x2000177c
 80083c8:	20000988 	.word	0x20000988
 80083cc:	200001ce 	.word	0x200001ce
 80083d0:	20001414 	.word	0x20001414
 80083d4:	2000141c 	.word	0x2000141c

080083d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f9 ffc1 	bl	8002376 <HAL_PCD_Start>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f8c0 	bl	8008580 <USBD_Get_USB_Status>
 8008400:	4603      	mov	r3, r0
 8008402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008404:	7bbb      	ldrb	r3, [r7, #14]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	461a      	mov	r2, r3
 800841c:	4603      	mov	r3, r0
 800841e:	70fb      	strb	r3, [r7, #3]
 8008420:	460b      	mov	r3, r1
 8008422:	70bb      	strb	r3, [r7, #2]
 8008424:	4613      	mov	r3, r2
 8008426:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8008436:	78bb      	ldrb	r3, [r7, #2]
 8008438:	883a      	ldrh	r2, [r7, #0]
 800843a:	78f9      	ldrb	r1, [r7, #3]
 800843c:	f7f9 ffd0 	bl	80023e0 <HAL_PCD_EP_Open>
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f89a 	bl	8008580 <USBD_Get_USB_Status>
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008450:	7bbb      	ldrb	r3, [r7, #14]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008474:	78fa      	ldrb	r2, [r7, #3]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f7fa f81b 	bl	80024b4 <HAL_PCD_EP_Close>
 800847e:	4603      	mov	r3, r0
 8008480:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	4618      	mov	r0, r3
 8008486:	f000 f87b 	bl	8008580 <USBD_Get_USB_Status>
 800848a:	4603      	mov	r3, r0
 800848c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800848e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fa f8d3 	bl	8002662 <HAL_PCD_EP_SetStall>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f85c 	bl	8008580 <USBD_Get_USB_Status>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b086      	sub	sp, #24
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
 80084e2:	460b      	mov	r3, r1
 80084e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 80084f4:	7af9      	ldrb	r1, [r7, #11]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	f7fa f878 	bl	80025ee <HAL_PCD_EP_Transmit>
 80084fe:	4603      	mov	r3, r0
 8008500:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	4618      	mov	r0, r3
 8008506:	f000 f83b 	bl	8008580 <USBD_Get_USB_Status>
 800850a:	4603      	mov	r3, r0
 800850c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800850e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	460b      	mov	r3, r1
 8008526:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 8008536:	7af9      	ldrb	r1, [r7, #11]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	f7fa f804 	bl	8002548 <HAL_PCD_EP_Receive>
 8008540:	4603      	mov	r3, r0
 8008542:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f81a 	bl	8008580 <USBD_Get_USB_Status>
 800854c:	4603      	mov	r3, r0
 800854e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008550:	7dbb      	ldrb	r3, [r7, #22]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800856c:	78fa      	ldrb	r2, [r7, #3]
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7fa f824 	bl	80025be <HAL_PCD_EP_GetRxCount>
 8008576:	4603      	mov	r3, r0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d817      	bhi.n	80085c4 <USBD_Get_USB_Status+0x44>
 8008594:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <USBD_Get_USB_Status+0x1c>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085ad 	.word	0x080085ad
 80085a0:	080085b3 	.word	0x080085b3
 80085a4:	080085b9 	.word	0x080085b9
 80085a8:	080085bf 	.word	0x080085bf
  {
  case HAL_OK:
    usb_status = USBD_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
    break;
 80085b0:	e00b      	b.n	80085ca <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 80085b2:	2303      	movs	r3, #3
 80085b4:	73fb      	strb	r3, [r7, #15]
    break;
 80085b6:	e008      	b.n	80085ca <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 80085b8:	2301      	movs	r3, #1
 80085ba:	73fb      	strb	r3, [r7, #15]
    break;
 80085bc:	e005      	b.n	80085ca <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 80085be:	2303      	movs	r3, #3
 80085c0:	73fb      	strb	r3, [r7, #15]
    break;
 80085c2:	e002      	b.n	80085ca <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	73fb      	strb	r3, [r7, #15]
    break;
 80085c8:	bf00      	nop
  }
  return usb_status;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80085e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085ea:	2b84      	cmp	r3, #132	@ 0x84
 80085ec:	d005      	beq.n	80085fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80085ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4413      	add	r3, r2
 80085f6:	3303      	adds	r3, #3
 80085f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800860e:	f3ef 8305 	mrs	r3, IPSR
 8008612:	607b      	str	r3, [r7, #4]
  return(result);
 8008614:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008616:	2b00      	cmp	r3, #0
 8008618:	bf14      	ite	ne
 800861a:	2301      	movne	r3, #1
 800861c:	2300      	moveq	r3, #0
 800861e:	b2db      	uxtb	r3, r3
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008630:	f000 fe88 	bl	8009344 <vTaskStartScheduler>
  
  return osOK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	bd80      	pop	{r7, pc}

0800863a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800863a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863c:	b089      	sub	sp, #36	@ 0x24
 800863e:	af04      	add	r7, sp, #16
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d020      	beq.n	800868e <osThreadCreate+0x54>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01c      	beq.n	800868e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685c      	ldr	r4, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691e      	ldr	r6, [r3, #16]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff ffb6 	bl	80085d8 <makeFreeRtosPriority>
 800866c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008676:	9202      	str	r2, [sp, #8]
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	9100      	str	r1, [sp, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	4632      	mov	r2, r6
 8008680:	4629      	mov	r1, r5
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fc78 	bl	8008f78 <xTaskCreateStatic>
 8008688:	4603      	mov	r3, r0
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	e01c      	b.n	80086c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685c      	ldr	r4, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800869a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff ff98 	bl	80085d8 <makeFreeRtosPriority>
 80086a8:	4602      	mov	r2, r0
 80086aa:	f107 030c 	add.w	r3, r7, #12
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	9200      	str	r2, [sp, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	4632      	mov	r2, r6
 80086b6:	4629      	mov	r1, r5
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 fcbd 	bl	8009038 <xTaskCreate>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d001      	beq.n	80086c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	e000      	b.n	80086ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80086c8:	68fb      	ldr	r3, [r7, #12]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <osDelay+0x16>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	e000      	b.n	80086ea <osDelay+0x18>
 80086e8:	2301      	movs	r3, #1
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fdf4 	bl	80092d8 <vTaskDelay>
  
  return osOK;
 80086f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af02      	add	r7, sp, #8
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800870e:	f7ff ff7b 	bl	8008608 <inHandlerMode>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01c      	beq.n	8008752 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	f107 0208 	add.w	r2, r7, #8
 800871e:	f107 030c 	add.w	r3, r7, #12
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	4613      	mov	r3, r2
 8008726:	2201      	movs	r2, #1
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 fb93 	bl	8009e54 <xTaskGenericNotifyFromISR>
 800872e:	4603      	mov	r3, r0
 8008730:	2b01      	cmp	r3, #1
 8008732:	d002      	beq.n	800873a <osSignalSet+0x3e>
      return 0x80000000;
 8008734:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008738:	e019      	b.n	800876e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d015      	beq.n	800876c <osSignalSet+0x70>
 8008740:	4b0d      	ldr	r3, [pc, #52]	@ (8008778 <osSignalSet+0x7c>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	e00c      	b.n	800876c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	f107 0308 	add.w	r3, r7, #8
 8008758:	2201      	movs	r2, #1
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 fab8 	bl	8009cd0 <xTaskGenericNotify>
 8008760:	4603      	mov	r3, r0
 8008762:	2b01      	cmp	r3, #1
 8008764:	d002      	beq.n	800876c <osSignalSet+0x70>
    return 0x80000000;
 8008766:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800876a:	e000      	b.n	800876e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800876c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00f      	beq.n	80087ae <osSemaphoreCreate+0x32>
    if (count == 1) {
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d10a      	bne.n	80087aa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2203      	movs	r2, #3
 800879a:	9200      	str	r2, [sp, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	2100      	movs	r1, #0
 80087a0:	2001      	movs	r0, #1
 80087a2:	f000 f93b 	bl	8008a1c <xQueueGenericCreateStatic>
 80087a6:	4603      	mov	r3, r0
 80087a8:	e016      	b.n	80087d8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e014      	b.n	80087d8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d110      	bne.n	80087d6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80087b4:	2203      	movs	r2, #3
 80087b6:	2100      	movs	r1, #0
 80087b8:	2001      	movs	r0, #1
 80087ba:	f000 f9ac 	bl	8008b16 <xQueueGenericCreate>
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <osSemaphoreCreate+0x56>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2200      	movs	r2, #0
 80087ca:	2100      	movs	r1, #0
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f9fd 	bl	8008bcc <xQueueGenericSend>
      return sema;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	e000      	b.n	80087d8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80087d6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f103 0208 	add.w	r2, r3, #8
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f04f 32ff 	mov.w	r2, #4294967295
 80087f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f103 0208 	add.w	r2, r3, #8
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f103 0208 	add.w	r2, r3, #8
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	601a      	str	r2, [r3, #0]
}
 8008876:	bf00      	nop
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008882:	b480      	push	{r7}
 8008884:	b085      	sub	sp, #20
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d103      	bne.n	80088a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e00c      	b.n	80088bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3308      	adds	r3, #8
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e002      	b.n	80088b0 <vListInsert+0x2e>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d2f6      	bcs.n	80088aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	601a      	str	r2, [r3, #0]
}
 80088e8:	bf00      	nop
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	6892      	ldr	r2, [r2, #8]
 800890a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6852      	ldr	r2, [r2, #4]
 8008914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d103      	bne.n	8008928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	1e5a      	subs	r2, r3, #1
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10b      	bne.n	8008974 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800896e:	bf00      	nop
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008974:	f001 fce8 	bl	800a348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008980:	68f9      	ldr	r1, [r7, #12]
 8008982:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008984:	fb01 f303 	mul.w	r3, r1, r3
 8008988:	441a      	add	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a4:	3b01      	subs	r3, #1
 80089a6:	68f9      	ldr	r1, [r7, #12]
 80089a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80089aa:	fb01 f303 	mul.w	r3, r1, r3
 80089ae:	441a      	add	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	22ff      	movs	r2, #255	@ 0xff
 80089b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	22ff      	movs	r2, #255	@ 0xff
 80089c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d114      	bne.n	80089f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01a      	beq.n	8008a08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3310      	adds	r3, #16
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 ff0e 	bl	80097f8 <xTaskRemoveFromEventList>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d012      	beq.n	8008a08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <xQueueGenericReset+0xd0>)
 80089e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	e009      	b.n	8008a08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3310      	adds	r3, #16
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fef1 	bl	80087e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3324      	adds	r3, #36	@ 0x24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff feec 	bl	80087e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a08:	f001 fcd0 	bl	800a3ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a0c:	2301      	movs	r3, #1
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	e000ed04 	.word	0xe000ed04

08008a1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08e      	sub	sp, #56	@ 0x38
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10b      	bne.n	8008a48 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	e7fd      	b.n	8008a44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10b      	bne.n	8008a66 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a60:	bf00      	nop
 8008a62:	bf00      	nop
 8008a64:	e7fd      	b.n	8008a62 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <xQueueGenericCreateStatic+0x56>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <xQueueGenericCreateStatic+0x5a>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <xQueueGenericCreateStatic+0x5c>
 8008a76:	2300      	movs	r3, #0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10b      	bne.n	8008a94 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	623b      	str	r3, [r7, #32]
}
 8008a8e:	bf00      	nop
 8008a90:	bf00      	nop
 8008a92:	e7fd      	b.n	8008a90 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <xQueueGenericCreateStatic+0x84>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <xQueueGenericCreateStatic+0x88>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e000      	b.n	8008aa6 <xQueueGenericCreateStatic+0x8a>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10b      	bne.n	8008ac2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	61fb      	str	r3, [r7, #28]
}
 8008abc:	bf00      	nop
 8008abe:	bf00      	nop
 8008ac0:	e7fd      	b.n	8008abe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ac2:	2348      	movs	r3, #72	@ 0x48
 8008ac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b48      	cmp	r3, #72	@ 0x48
 8008aca:	d00b      	beq.n	8008ae4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	61bb      	str	r3, [r7, #24]
}
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
 8008ae2:	e7fd      	b.n	8008ae0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ae4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00d      	beq.n	8008b0c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008af8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	4613      	mov	r3, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f840 	bl	8008b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3730      	adds	r7, #48	@ 0x30
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b08a      	sub	sp, #40	@ 0x28
 8008b1a:	af02      	add	r7, sp, #8
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	4613      	mov	r3, r2
 8008b22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10b      	bne.n	8008b42 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	613b      	str	r3, [r7, #16]
}
 8008b3c:	bf00      	nop
 8008b3e:	bf00      	nop
 8008b40:	e7fd      	b.n	8008b3e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	fb02 f303 	mul.w	r3, r2, r3
 8008b4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	3348      	adds	r3, #72	@ 0x48
 8008b50:	4618      	mov	r0, r3
 8008b52:	f001 fd1b 	bl	800a58c <pvPortMalloc>
 8008b56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d011      	beq.n	8008b82 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	3348      	adds	r3, #72	@ 0x48
 8008b66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b70:	79fa      	ldrb	r2, [r7, #7]
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	4613      	mov	r3, r2
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f805 	bl	8008b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b82:	69bb      	ldr	r3, [r7, #24]
	}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d103      	bne.n	8008ba8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	e002      	b.n	8008bae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bba:	2101      	movs	r1, #1
 8008bbc:	69b8      	ldr	r0, [r7, #24]
 8008bbe:	f7ff fec3 	bl	8008948 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08e      	sub	sp, #56	@ 0x38
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <xQueueGenericSend+0x34>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSend+0x42>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSend+0x46>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSend+0x48>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <xQueueGenericSend+0x64>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d103      	bne.n	8008c3e <xQueueGenericSend+0x72>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d101      	bne.n	8008c42 <xQueueGenericSend+0x76>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericSend+0x78>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10b      	bne.n	8008c60 <xQueueGenericSend+0x94>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	623b      	str	r3, [r7, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c60:	f000 ff90 	bl	8009b84 <xTaskGetSchedulerState>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <xQueueGenericSend+0xa4>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <xQueueGenericSend+0xa8>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <xQueueGenericSend+0xaa>
 8008c74:	2300      	movs	r3, #0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <xQueueGenericSend+0xc6>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	61fb      	str	r3, [r7, #28]
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	e7fd      	b.n	8008c8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c92:	f001 fb59 	bl	800a348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d302      	bcc.n	8008ca8 <xQueueGenericSend+0xdc>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d129      	bne.n	8008cfc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cae:	f000 f88f 	bl	8008dd0 <prvCopyDataToQueue>
 8008cb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d010      	beq.n	8008cde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbe:	3324      	adds	r3, #36	@ 0x24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fd99 	bl	80097f8 <xTaskRemoveFromEventList>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d013      	beq.n	8008cf4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8008dcc <xQueueGenericSend+0x200>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	e00a      	b.n	8008cf4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d007      	beq.n	8008cf4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ce4:	4b39      	ldr	r3, [pc, #228]	@ (8008dcc <xQueueGenericSend+0x200>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cf4:	f001 fb5a 	bl	800a3ac <vPortExitCritical>
				return pdPASS;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e063      	b.n	8008dc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d02:	f001 fb53 	bl	800a3ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e05c      	b.n	8008dc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d106      	bne.n	8008d1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fdd3 	bl	80098c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d1e:	f001 fb45 	bl	800a3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d22:	f000 fb79 	bl	8009418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d26:	f001 fb0f 	bl	800a348 <vPortEnterCritical>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d30:	b25b      	sxtb	r3, r3
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d103      	bne.n	8008d40 <xQueueGenericSend+0x174>
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d46:	b25b      	sxtb	r3, r3
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d103      	bne.n	8008d56 <xQueueGenericSend+0x18a>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d56:	f001 fb29 	bl	800a3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d5a:	1d3a      	adds	r2, r7, #4
 8008d5c:	f107 0314 	add.w	r3, r7, #20
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fdc2 	bl	80098ec <xTaskCheckForTimeOut>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d124      	bne.n	8008db8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d70:	f000 f8ea 	bl	8008f48 <prvIsQueueFull>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d018      	beq.n	8008dac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4611      	mov	r1, r2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fd12 	bl	80097ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d8a:	f000 f88b 	bl	8008ea4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d8e:	f000 fb51 	bl	8009434 <xTaskResumeAll>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f47f af7c 	bne.w	8008c92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008dcc <xQueueGenericSend+0x200>)
 8008d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	e772      	b.n	8008c92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dae:	f000 f879 	bl	8008ea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008db2:	f000 fb3f 	bl	8009434 <xTaskResumeAll>
 8008db6:	e76c      	b.n	8008c92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dba:	f000 f873 	bl	8008ea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dbe:	f000 fb39 	bl	8009434 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008dc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3738      	adds	r7, #56	@ 0x38
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	e000ed04 	.word	0xe000ed04

08008dd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10d      	bne.n	8008e0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d14d      	bne.n	8008e92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fee0 	bl	8009bc0 <xTaskPriorityDisinherit>
 8008e00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	609a      	str	r2, [r3, #8]
 8008e08:	e043      	b.n	8008e92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d119      	bne.n	8008e44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6858      	ldr	r0, [r3, #4]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e18:	461a      	mov	r2, r3
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	f001 ff4e 	bl	800acbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e28:	441a      	add	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d32b      	bcc.n	8008e92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	605a      	str	r2, [r3, #4]
 8008e42:	e026      	b.n	8008e92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68d8      	ldr	r0, [r3, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	f001 ff34 	bl	800acbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5c:	425b      	negs	r3, r3
 8008e5e:	441a      	add	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d207      	bcs.n	8008e80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e78:	425b      	negs	r3, r3
 8008e7a:	441a      	add	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d105      	bne.n	8008e92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008e9a:	697b      	ldr	r3, [r7, #20]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008eac:	f001 fa4c 	bl	800a348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eb8:	e011      	b.n	8008ede <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d012      	beq.n	8008ee8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3324      	adds	r3, #36	@ 0x24
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fc96 	bl	80097f8 <xTaskRemoveFromEventList>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ed2:	f000 fd6f 	bl	80099b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dce9      	bgt.n	8008eba <prvUnlockQueue+0x16>
 8008ee6:	e000      	b.n	8008eea <prvUnlockQueue+0x46>
					break;
 8008ee8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	22ff      	movs	r2, #255	@ 0xff
 8008eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008ef2:	f001 fa5b 	bl	800a3ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ef6:	f001 fa27 	bl	800a348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f02:	e011      	b.n	8008f28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d012      	beq.n	8008f32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3310      	adds	r3, #16
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fc71 	bl	80097f8 <xTaskRemoveFromEventList>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f1c:	f000 fd4a 	bl	80099b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	dce9      	bgt.n	8008f04 <prvUnlockQueue+0x60>
 8008f30:	e000      	b.n	8008f34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	22ff      	movs	r2, #255	@ 0xff
 8008f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008f3c:	f001 fa36 	bl	800a3ac <vPortExitCritical>
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f50:	f001 f9fa 	bl	800a348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d102      	bne.n	8008f66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e001      	b.n	8008f6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f6a:	f001 fa1f 	bl	800a3ac <vPortExitCritical>

	return xReturn;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08e      	sub	sp, #56	@ 0x38
 8008f7c:	af04      	add	r7, sp, #16
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10b      	bne.n	8008fa4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	623b      	str	r3, [r7, #32]
}
 8008f9e:	bf00      	nop
 8008fa0:	bf00      	nop
 8008fa2:	e7fd      	b.n	8008fa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10b      	bne.n	8008fc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	61fb      	str	r3, [r7, #28]
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fc2:	23a0      	movs	r3, #160	@ 0xa0
 8008fc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2ba0      	cmp	r3, #160	@ 0xa0
 8008fca:	d00b      	beq.n	8008fe4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	61bb      	str	r3, [r7, #24]
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	e7fd      	b.n	8008fe0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fe4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01e      	beq.n	800902a <xTaskCreateStatic+0xb2>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01b      	beq.n	800902a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ffa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009004:	2300      	movs	r3, #0
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900a:	9302      	str	r3, [sp, #8]
 800900c:	f107 0314 	add.w	r3, r7, #20
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68b9      	ldr	r1, [r7, #8]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f851 	bl	80090c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009022:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009024:	f000 f8ee 	bl	8009204 <prvAddNewTaskToReadyList>
 8009028:	e001      	b.n	800902e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800902e:	697b      	ldr	r3, [r7, #20]
	}
 8009030:	4618      	mov	r0, r3
 8009032:	3728      	adds	r7, #40	@ 0x28
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08c      	sub	sp, #48	@ 0x30
 800903c:	af04      	add	r7, sp, #16
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009048:	88fb      	ldrh	r3, [r7, #6]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4618      	mov	r0, r3
 800904e:	f001 fa9d 	bl	800a58c <pvPortMalloc>
 8009052:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00e      	beq.n	8009078 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800905a:	20a0      	movs	r0, #160	@ 0xa0
 800905c:	f001 fa96 	bl	800a58c <pvPortMalloc>
 8009060:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	631a      	str	r2, [r3, #48]	@ 0x30
 800906e:	e005      	b.n	800907c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009070:	6978      	ldr	r0, [r7, #20]
 8009072:	f001 fb59 	bl	800a728 <vPortFree>
 8009076:	e001      	b.n	800907c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d017      	beq.n	80090b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800908a:	88fa      	ldrh	r2, [r7, #6]
 800908c:	2300      	movs	r3, #0
 800908e:	9303      	str	r3, [sp, #12]
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	9302      	str	r3, [sp, #8]
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 f80f 	bl	80090c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090a6:	69f8      	ldr	r0, [r7, #28]
 80090a8:	f000 f8ac 	bl	8009204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090ac:	2301      	movs	r3, #1
 80090ae:	61bb      	str	r3, [r7, #24]
 80090b0:	e002      	b.n	80090b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090b2:	f04f 33ff 	mov.w	r3, #4294967295
 80090b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090b8:	69bb      	ldr	r3, [r7, #24]
	}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3720      	adds	r7, #32
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80090dc:	3b01      	subs	r3, #1
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f023 0307 	bic.w	r3, r3, #7
 80090ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	617b      	str	r3, [r7, #20]
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01f      	beq.n	8009154 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	e012      	b.n	8009140 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	7819      	ldrb	r1, [r3, #0]
 8009122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	4413      	add	r3, r2
 8009128:	3334      	adds	r3, #52	@ 0x34
 800912a:	460a      	mov	r2, r1
 800912c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	4413      	add	r3, r2
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	3301      	adds	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	2b0f      	cmp	r3, #15
 8009144:	d9e9      	bls.n	800911a <prvInitialiseNewTask+0x56>
 8009146:	e000      	b.n	800914a <prvInitialiseNewTask+0x86>
			{
				break;
 8009148:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009152:	e003      	b.n	800915c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800915c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915e:	2b06      	cmp	r3, #6
 8009160:	d901      	bls.n	8009166 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009162:	2306      	movs	r3, #6
 8009164:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800916a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009170:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	2200      	movs	r2, #0
 8009176:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	3304      	adds	r3, #4
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fb4f 	bl	8008820 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	3318      	adds	r3, #24
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff fb4a 	bl	8008820 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009190:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009194:	f1c3 0207 	rsb	r2, r3, #7
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	334c      	adds	r3, #76	@ 0x4c
 80091b6:	224c      	movs	r2, #76	@ 0x4c
 80091b8:	2100      	movs	r1, #0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f001 fce4 	bl	800ab88 <memset>
 80091c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c2:	4a0d      	ldr	r2, [pc, #52]	@ (80091f8 <prvInitialiseNewTask+0x134>)
 80091c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80091c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c8:	4a0c      	ldr	r2, [pc, #48]	@ (80091fc <prvInitialiseNewTask+0x138>)
 80091ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80091cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009200 <prvInitialiseNewTask+0x13c>)
 80091d0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	68f9      	ldr	r1, [r7, #12]
 80091d6:	69b8      	ldr	r0, [r7, #24]
 80091d8:	f000 ff88 	bl	800a0ec <pxPortInitialiseStack>
 80091dc:	4602      	mov	r2, r0
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ee:	bf00      	nop
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	200054dc 	.word	0x200054dc
 80091fc:	20005544 	.word	0x20005544
 8009200:	200055ac 	.word	0x200055ac

08009204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800920c:	f001 f89c 	bl	800a348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009210:	4b2a      	ldr	r3, [pc, #168]	@ (80092bc <prvAddNewTaskToReadyList+0xb8>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3301      	adds	r3, #1
 8009216:	4a29      	ldr	r2, [pc, #164]	@ (80092bc <prvAddNewTaskToReadyList+0xb8>)
 8009218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800921a:	4b29      	ldr	r3, [pc, #164]	@ (80092c0 <prvAddNewTaskToReadyList+0xbc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d109      	bne.n	8009236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009222:	4a27      	ldr	r2, [pc, #156]	@ (80092c0 <prvAddNewTaskToReadyList+0xbc>)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009228:	4b24      	ldr	r3, [pc, #144]	@ (80092bc <prvAddNewTaskToReadyList+0xb8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d110      	bne.n	8009252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009230:	f000 fbe4 	bl	80099fc <prvInitialiseTaskLists>
 8009234:	e00d      	b.n	8009252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009236:	4b23      	ldr	r3, [pc, #140]	@ (80092c4 <prvAddNewTaskToReadyList+0xc0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d109      	bne.n	8009252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800923e:	4b20      	ldr	r3, [pc, #128]	@ (80092c0 <prvAddNewTaskToReadyList+0xbc>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009248:	429a      	cmp	r2, r3
 800924a:	d802      	bhi.n	8009252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800924c:	4a1c      	ldr	r2, [pc, #112]	@ (80092c0 <prvAddNewTaskToReadyList+0xbc>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009252:	4b1d      	ldr	r3, [pc, #116]	@ (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	4a1b      	ldr	r2, [pc, #108]	@ (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 800925a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009260:	2201      	movs	r2, #1
 8009262:	409a      	lsls	r2, r3
 8009264:	4b19      	ldr	r3, [pc, #100]	@ (80092cc <prvAddNewTaskToReadyList+0xc8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4313      	orrs	r3, r2
 800926a:	4a18      	ldr	r2, [pc, #96]	@ (80092cc <prvAddNewTaskToReadyList+0xc8>)
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4a15      	ldr	r2, [pc, #84]	@ (80092d0 <prvAddNewTaskToReadyList+0xcc>)
 800927c:	441a      	add	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	3304      	adds	r3, #4
 8009282:	4619      	mov	r1, r3
 8009284:	4610      	mov	r0, r2
 8009286:	f7ff fad8 	bl	800883a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800928a:	f001 f88f 	bl	800a3ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800928e:	4b0d      	ldr	r3, [pc, #52]	@ (80092c4 <prvAddNewTaskToReadyList+0xc0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00e      	beq.n	80092b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009296:	4b0a      	ldr	r3, [pc, #40]	@ (80092c0 <prvAddNewTaskToReadyList+0xbc>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d207      	bcs.n	80092b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092a4:	4b0b      	ldr	r3, [pc, #44]	@ (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 80092a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20001880 	.word	0x20001880
 80092c0:	20001780 	.word	0x20001780
 80092c4:	2000188c 	.word	0x2000188c
 80092c8:	2000189c 	.word	0x2000189c
 80092cc:	20001888 	.word	0x20001888
 80092d0:	20001784 	.word	0x20001784
 80092d4:	e000ed04 	.word	0xe000ed04

080092d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d018      	beq.n	800931c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092ea:	4b14      	ldr	r3, [pc, #80]	@ (800933c <vTaskDelay+0x64>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00b      	beq.n	800930a <vTaskDelay+0x32>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	60bb      	str	r3, [r7, #8]
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop
 8009308:	e7fd      	b.n	8009306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800930a:	f000 f885 	bl	8009418 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800930e:	2100      	movs	r1, #0
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fe85 	bl	800a020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009316:	f000 f88d 	bl	8009434 <xTaskResumeAll>
 800931a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d107      	bne.n	8009332 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009322:	4b07      	ldr	r3, [pc, #28]	@ (8009340 <vTaskDelay+0x68>)
 8009324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	200018a8 	.word	0x200018a8
 8009340:	e000ed04 	.word	0xe000ed04

08009344 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08a      	sub	sp, #40	@ 0x28
 8009348:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009352:	463a      	mov	r2, r7
 8009354:	1d39      	adds	r1, r7, #4
 8009356:	f107 0308 	add.w	r3, r7, #8
 800935a:	4618      	mov	r0, r3
 800935c:	f7f7 f948 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	9202      	str	r2, [sp, #8]
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	2300      	movs	r3, #0
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	2300      	movs	r3, #0
 8009370:	460a      	mov	r2, r1
 8009372:	4921      	ldr	r1, [pc, #132]	@ (80093f8 <vTaskStartScheduler+0xb4>)
 8009374:	4821      	ldr	r0, [pc, #132]	@ (80093fc <vTaskStartScheduler+0xb8>)
 8009376:	f7ff fdff 	bl	8008f78 <xTaskCreateStatic>
 800937a:	4603      	mov	r3, r0
 800937c:	4a20      	ldr	r2, [pc, #128]	@ (8009400 <vTaskStartScheduler+0xbc>)
 800937e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009380:	4b1f      	ldr	r3, [pc, #124]	@ (8009400 <vTaskStartScheduler+0xbc>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009388:	2301      	movs	r3, #1
 800938a:	617b      	str	r3, [r7, #20]
 800938c:	e001      	b.n	8009392 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d11b      	bne.n	80093d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	613b      	str	r3, [r7, #16]
}
 80093aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093ac:	4b15      	ldr	r3, [pc, #84]	@ (8009404 <vTaskStartScheduler+0xc0>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	334c      	adds	r3, #76	@ 0x4c
 80093b2:	4a15      	ldr	r2, [pc, #84]	@ (8009408 <vTaskStartScheduler+0xc4>)
 80093b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093b6:	4b15      	ldr	r3, [pc, #84]	@ (800940c <vTaskStartScheduler+0xc8>)
 80093b8:	f04f 32ff 	mov.w	r2, #4294967295
 80093bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093be:	4b14      	ldr	r3, [pc, #80]	@ (8009410 <vTaskStartScheduler+0xcc>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093c4:	4b13      	ldr	r3, [pc, #76]	@ (8009414 <vTaskStartScheduler+0xd0>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093ca:	f000 ff19 	bl	800a200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093ce:	e00f      	b.n	80093f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d6:	d10b      	bne.n	80093f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	60fb      	str	r3, [r7, #12]
}
 80093ea:	bf00      	nop
 80093ec:	bf00      	nop
 80093ee:	e7fd      	b.n	80093ec <vTaskStartScheduler+0xa8>
}
 80093f0:	bf00      	nop
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	0800b5d4 	.word	0x0800b5d4
 80093fc:	080099cd 	.word	0x080099cd
 8009400:	200018a4 	.word	0x200018a4
 8009404:	20001780 	.word	0x20001780
 8009408:	200002ac 	.word	0x200002ac
 800940c:	200018a0 	.word	0x200018a0
 8009410:	2000188c 	.word	0x2000188c
 8009414:	20001884 	.word	0x20001884

08009418 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800941c:	4b04      	ldr	r3, [pc, #16]	@ (8009430 <vTaskSuspendAll+0x18>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3301      	adds	r3, #1
 8009422:	4a03      	ldr	r2, [pc, #12]	@ (8009430 <vTaskSuspendAll+0x18>)
 8009424:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009426:	bf00      	nop
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	200018a8 	.word	0x200018a8

08009434 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800943e:	2300      	movs	r3, #0
 8009440:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009442:	4b42      	ldr	r3, [pc, #264]	@ (800954c <xTaskResumeAll+0x118>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <xTaskResumeAll+0x2e>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	603b      	str	r3, [r7, #0]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009462:	f000 ff71 	bl	800a348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009466:	4b39      	ldr	r3, [pc, #228]	@ (800954c <xTaskResumeAll+0x118>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3b01      	subs	r3, #1
 800946c:	4a37      	ldr	r2, [pc, #220]	@ (800954c <xTaskResumeAll+0x118>)
 800946e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009470:	4b36      	ldr	r3, [pc, #216]	@ (800954c <xTaskResumeAll+0x118>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d161      	bne.n	800953c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009478:	4b35      	ldr	r3, [pc, #212]	@ (8009550 <xTaskResumeAll+0x11c>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d05d      	beq.n	800953c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009480:	e02e      	b.n	80094e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009482:	4b34      	ldr	r3, [pc, #208]	@ (8009554 <xTaskResumeAll+0x120>)
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3318      	adds	r3, #24
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fa30 	bl	80088f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3304      	adds	r3, #4
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fa2b 	bl	80088f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a2:	2201      	movs	r2, #1
 80094a4:	409a      	lsls	r2, r3
 80094a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009558 <xTaskResumeAll+0x124>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	4a2a      	ldr	r2, [pc, #168]	@ (8009558 <xTaskResumeAll+0x124>)
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4a27      	ldr	r2, [pc, #156]	@ (800955c <xTaskResumeAll+0x128>)
 80094be:	441a      	add	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f7ff f9b7 	bl	800883a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d0:	4b23      	ldr	r3, [pc, #140]	@ (8009560 <xTaskResumeAll+0x12c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d302      	bcc.n	80094e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80094da:	4b22      	ldr	r3, [pc, #136]	@ (8009564 <xTaskResumeAll+0x130>)
 80094dc:	2201      	movs	r2, #1
 80094de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009554 <xTaskResumeAll+0x120>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1cc      	bne.n	8009482 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094ee:	f000 fb29 	bl	8009b44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009568 <xTaskResumeAll+0x134>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d010      	beq.n	8009520 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094fe:	f000 f837 	bl	8009570 <xTaskIncrementTick>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009508:	4b16      	ldr	r3, [pc, #88]	@ (8009564 <xTaskResumeAll+0x130>)
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3b01      	subs	r3, #1
 8009512:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1f1      	bne.n	80094fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800951a:	4b13      	ldr	r3, [pc, #76]	@ (8009568 <xTaskResumeAll+0x134>)
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009520:	4b10      	ldr	r3, [pc, #64]	@ (8009564 <xTaskResumeAll+0x130>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009528:	2301      	movs	r3, #1
 800952a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800952c:	4b0f      	ldr	r3, [pc, #60]	@ (800956c <xTaskResumeAll+0x138>)
 800952e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800953c:	f000 ff36 	bl	800a3ac <vPortExitCritical>

	return xAlreadyYielded;
 8009540:	68bb      	ldr	r3, [r7, #8]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	200018a8 	.word	0x200018a8
 8009550:	20001880 	.word	0x20001880
 8009554:	20001840 	.word	0x20001840
 8009558:	20001888 	.word	0x20001888
 800955c:	20001784 	.word	0x20001784
 8009560:	20001780 	.word	0x20001780
 8009564:	20001894 	.word	0x20001894
 8009568:	20001890 	.word	0x20001890
 800956c:	e000ed04 	.word	0xe000ed04

08009570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800957a:	4b4f      	ldr	r3, [pc, #316]	@ (80096b8 <xTaskIncrementTick+0x148>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f040 808f 	bne.w	80096a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009584:	4b4d      	ldr	r3, [pc, #308]	@ (80096bc <xTaskIncrementTick+0x14c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3301      	adds	r3, #1
 800958a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800958c:	4a4b      	ldr	r2, [pc, #300]	@ (80096bc <xTaskIncrementTick+0x14c>)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d121      	bne.n	80095dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009598:	4b49      	ldr	r3, [pc, #292]	@ (80096c0 <xTaskIncrementTick+0x150>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00b      	beq.n	80095ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	603b      	str	r3, [r7, #0]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <xTaskIncrementTick+0x46>
 80095ba:	4b41      	ldr	r3, [pc, #260]	@ (80096c0 <xTaskIncrementTick+0x150>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	4b40      	ldr	r3, [pc, #256]	@ (80096c4 <xTaskIncrementTick+0x154>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a3e      	ldr	r2, [pc, #248]	@ (80096c0 <xTaskIncrementTick+0x150>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	4a3e      	ldr	r2, [pc, #248]	@ (80096c4 <xTaskIncrementTick+0x154>)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6013      	str	r3, [r2, #0]
 80095ce:	4b3e      	ldr	r3, [pc, #248]	@ (80096c8 <xTaskIncrementTick+0x158>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3301      	adds	r3, #1
 80095d4:	4a3c      	ldr	r2, [pc, #240]	@ (80096c8 <xTaskIncrementTick+0x158>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	f000 fab4 	bl	8009b44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095dc:	4b3b      	ldr	r3, [pc, #236]	@ (80096cc <xTaskIncrementTick+0x15c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d348      	bcc.n	8009678 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095e6:	4b36      	ldr	r3, [pc, #216]	@ (80096c0 <xTaskIncrementTick+0x150>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d104      	bne.n	80095fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f0:	4b36      	ldr	r3, [pc, #216]	@ (80096cc <xTaskIncrementTick+0x15c>)
 80095f2:	f04f 32ff 	mov.w	r2, #4294967295
 80095f6:	601a      	str	r2, [r3, #0]
					break;
 80095f8:	e03e      	b.n	8009678 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fa:	4b31      	ldr	r3, [pc, #196]	@ (80096c0 <xTaskIncrementTick+0x150>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	429a      	cmp	r2, r3
 8009610:	d203      	bcs.n	800961a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009612:	4a2e      	ldr	r2, [pc, #184]	@ (80096cc <xTaskIncrementTick+0x15c>)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009618:	e02e      	b.n	8009678 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	3304      	adds	r3, #4
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff f968 	bl	80088f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	3318      	adds	r3, #24
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff f95f 	bl	80088f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963a:	2201      	movs	r2, #1
 800963c:	409a      	lsls	r2, r3
 800963e:	4b24      	ldr	r3, [pc, #144]	@ (80096d0 <xTaskIncrementTick+0x160>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4313      	orrs	r3, r2
 8009644:	4a22      	ldr	r2, [pc, #136]	@ (80096d0 <xTaskIncrementTick+0x160>)
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964c:	4613      	mov	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4a1f      	ldr	r2, [pc, #124]	@ (80096d4 <xTaskIncrementTick+0x164>)
 8009656:	441a      	add	r2, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	3304      	adds	r3, #4
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	f7ff f8eb 	bl	800883a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009668:	4b1b      	ldr	r3, [pc, #108]	@ (80096d8 <xTaskIncrementTick+0x168>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966e:	429a      	cmp	r2, r3
 8009670:	d3b9      	bcc.n	80095e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009672:	2301      	movs	r3, #1
 8009674:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009676:	e7b6      	b.n	80095e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009678:	4b17      	ldr	r3, [pc, #92]	@ (80096d8 <xTaskIncrementTick+0x168>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800967e:	4915      	ldr	r1, [pc, #84]	@ (80096d4 <xTaskIncrementTick+0x164>)
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	440b      	add	r3, r1
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d901      	bls.n	8009694 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009690:	2301      	movs	r3, #1
 8009692:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009694:	4b11      	ldr	r3, [pc, #68]	@ (80096dc <xTaskIncrementTick+0x16c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d007      	beq.n	80096ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800969c:	2301      	movs	r3, #1
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	e004      	b.n	80096ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096a2:	4b0f      	ldr	r3, [pc, #60]	@ (80096e0 <xTaskIncrementTick+0x170>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	4a0d      	ldr	r2, [pc, #52]	@ (80096e0 <xTaskIncrementTick+0x170>)
 80096aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096ac:	697b      	ldr	r3, [r7, #20]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	200018a8 	.word	0x200018a8
 80096bc:	20001884 	.word	0x20001884
 80096c0:	20001838 	.word	0x20001838
 80096c4:	2000183c 	.word	0x2000183c
 80096c8:	20001898 	.word	0x20001898
 80096cc:	200018a0 	.word	0x200018a0
 80096d0:	20001888 	.word	0x20001888
 80096d4:	20001784 	.word	0x20001784
 80096d8:	20001780 	.word	0x20001780
 80096dc:	20001894 	.word	0x20001894
 80096e0:	20001890 	.word	0x20001890

080096e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ea:	4b2a      	ldr	r3, [pc, #168]	@ (8009794 <vTaskSwitchContext+0xb0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096f2:	4b29      	ldr	r3, [pc, #164]	@ (8009798 <vTaskSwitchContext+0xb4>)
 80096f4:	2201      	movs	r2, #1
 80096f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096f8:	e045      	b.n	8009786 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80096fa:	4b27      	ldr	r3, [pc, #156]	@ (8009798 <vTaskSwitchContext+0xb4>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009700:	4b26      	ldr	r3, [pc, #152]	@ (800979c <vTaskSwitchContext+0xb8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	fab3 f383 	clz	r3, r3
 800970c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800970e:	7afb      	ldrb	r3, [r7, #11]
 8009710:	f1c3 031f 	rsb	r3, r3, #31
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	4922      	ldr	r1, [pc, #136]	@ (80097a0 <vTaskSwitchContext+0xbc>)
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	440b      	add	r3, r1
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10b      	bne.n	8009742 <vTaskSwitchContext+0x5e>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	607b      	str	r3, [r7, #4]
}
 800973c:	bf00      	nop
 800973e:	bf00      	nop
 8009740:	e7fd      	b.n	800973e <vTaskSwitchContext+0x5a>
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a14      	ldr	r2, [pc, #80]	@ (80097a0 <vTaskSwitchContext+0xbc>)
 800974e:	4413      	add	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	605a      	str	r2, [r3, #4]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3308      	adds	r3, #8
 8009764:	429a      	cmp	r2, r3
 8009766:	d104      	bne.n	8009772 <vTaskSwitchContext+0x8e>
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	605a      	str	r2, [r3, #4]
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4a0a      	ldr	r2, [pc, #40]	@ (80097a4 <vTaskSwitchContext+0xc0>)
 800977a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800977c:	4b09      	ldr	r3, [pc, #36]	@ (80097a4 <vTaskSwitchContext+0xc0>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	334c      	adds	r3, #76	@ 0x4c
 8009782:	4a09      	ldr	r2, [pc, #36]	@ (80097a8 <vTaskSwitchContext+0xc4>)
 8009784:	6013      	str	r3, [r2, #0]
}
 8009786:	bf00      	nop
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	200018a8 	.word	0x200018a8
 8009798:	20001894 	.word	0x20001894
 800979c:	20001888 	.word	0x20001888
 80097a0:	20001784 	.word	0x20001784
 80097a4:	20001780 	.word	0x20001780
 80097a8:	200002ac 	.word	0x200002ac

080097ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10b      	bne.n	80097d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	60fb      	str	r3, [r7, #12]
}
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
 80097d2:	e7fd      	b.n	80097d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097d4:	4b07      	ldr	r3, [pc, #28]	@ (80097f4 <vTaskPlaceOnEventList+0x48>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3318      	adds	r3, #24
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff f850 	bl	8008882 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097e2:	2101      	movs	r1, #1
 80097e4:	6838      	ldr	r0, [r7, #0]
 80097e6:	f000 fc1b 	bl	800a020 <prvAddCurrentTaskToDelayedList>
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20001780 	.word	0x20001780

080097f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10b      	bne.n	8009826 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	60fb      	str	r3, [r7, #12]
}
 8009820:	bf00      	nop
 8009822:	bf00      	nop
 8009824:	e7fd      	b.n	8009822 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3318      	adds	r3, #24
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff f862 	bl	80088f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009830:	4b1d      	ldr	r3, [pc, #116]	@ (80098a8 <xTaskRemoveFromEventList+0xb0>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d11c      	bne.n	8009872 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	3304      	adds	r3, #4
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff f859 	bl	80088f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009846:	2201      	movs	r2, #1
 8009848:	409a      	lsls	r2, r3
 800984a:	4b18      	ldr	r3, [pc, #96]	@ (80098ac <xTaskRemoveFromEventList+0xb4>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4313      	orrs	r3, r2
 8009850:	4a16      	ldr	r2, [pc, #88]	@ (80098ac <xTaskRemoveFromEventList+0xb4>)
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4a13      	ldr	r2, [pc, #76]	@ (80098b0 <xTaskRemoveFromEventList+0xb8>)
 8009862:	441a      	add	r2, r3
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	3304      	adds	r3, #4
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7fe ffe5 	bl	800883a <vListInsertEnd>
 8009870:	e005      	b.n	800987e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	3318      	adds	r3, #24
 8009876:	4619      	mov	r1, r3
 8009878:	480e      	ldr	r0, [pc, #56]	@ (80098b4 <xTaskRemoveFromEventList+0xbc>)
 800987a:	f7fe ffde 	bl	800883a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009882:	4b0d      	ldr	r3, [pc, #52]	@ (80098b8 <xTaskRemoveFromEventList+0xc0>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	429a      	cmp	r2, r3
 800988a:	d905      	bls.n	8009898 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800988c:	2301      	movs	r3, #1
 800988e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009890:	4b0a      	ldr	r3, [pc, #40]	@ (80098bc <xTaskRemoveFromEventList+0xc4>)
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	e001      	b.n	800989c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009898:	2300      	movs	r3, #0
 800989a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800989c:	697b      	ldr	r3, [r7, #20]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	200018a8 	.word	0x200018a8
 80098ac:	20001888 	.word	0x20001888
 80098b0:	20001784 	.word	0x20001784
 80098b4:	20001840 	.word	0x20001840
 80098b8:	20001780 	.word	0x20001780
 80098bc:	20001894 	.word	0x20001894

080098c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098c8:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <vTaskInternalSetTimeOutState+0x24>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098d0:	4b05      	ldr	r3, [pc, #20]	@ (80098e8 <vTaskInternalSetTimeOutState+0x28>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	605a      	str	r2, [r3, #4]
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	20001898 	.word	0x20001898
 80098e8:	20001884 	.word	0x20001884

080098ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	613b      	str	r3, [r7, #16]
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	e7fd      	b.n	8009910 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	60fb      	str	r3, [r7, #12]
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	e7fd      	b.n	800992e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009932:	f000 fd09 	bl	800a348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009936:	4b1d      	ldr	r3, [pc, #116]	@ (80099ac <xTaskCheckForTimeOut+0xc0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994e:	d102      	bne.n	8009956 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	e023      	b.n	800999e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <xTaskCheckForTimeOut+0xc4>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d007      	beq.n	8009972 <xTaskCheckForTimeOut+0x86>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	429a      	cmp	r2, r3
 800996a:	d302      	bcc.n	8009972 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e015      	b.n	800999e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	429a      	cmp	r2, r3
 800997a:	d20b      	bcs.n	8009994 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	1ad2      	subs	r2, r2, r3
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff ff99 	bl	80098c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800998e:	2300      	movs	r3, #0
 8009990:	61fb      	str	r3, [r7, #28]
 8009992:	e004      	b.n	800999e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800999a:	2301      	movs	r3, #1
 800999c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800999e:	f000 fd05 	bl	800a3ac <vPortExitCritical>

	return xReturn;
 80099a2:	69fb      	ldr	r3, [r7, #28]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3720      	adds	r7, #32
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20001884 	.word	0x20001884
 80099b0:	20001898 	.word	0x20001898

080099b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099b4:	b480      	push	{r7}
 80099b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099b8:	4b03      	ldr	r3, [pc, #12]	@ (80099c8 <vTaskMissedYield+0x14>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	601a      	str	r2, [r3, #0]
}
 80099be:	bf00      	nop
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	20001894 	.word	0x20001894

080099cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099d4:	f000 f852 	bl	8009a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099d8:	4b06      	ldr	r3, [pc, #24]	@ (80099f4 <prvIdleTask+0x28>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d9f9      	bls.n	80099d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099e0:	4b05      	ldr	r3, [pc, #20]	@ (80099f8 <prvIdleTask+0x2c>)
 80099e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099f0:	e7f0      	b.n	80099d4 <prvIdleTask+0x8>
 80099f2:	bf00      	nop
 80099f4:	20001784 	.word	0x20001784
 80099f8:	e000ed04 	.word	0xe000ed04

080099fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a02:	2300      	movs	r3, #0
 8009a04:	607b      	str	r3, [r7, #4]
 8009a06:	e00c      	b.n	8009a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4a12      	ldr	r2, [pc, #72]	@ (8009a5c <prvInitialiseTaskLists+0x60>)
 8009a14:	4413      	add	r3, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe fee2 	bl	80087e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b06      	cmp	r3, #6
 8009a26:	d9ef      	bls.n	8009a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a28:	480d      	ldr	r0, [pc, #52]	@ (8009a60 <prvInitialiseTaskLists+0x64>)
 8009a2a:	f7fe fed9 	bl	80087e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a2e:	480d      	ldr	r0, [pc, #52]	@ (8009a64 <prvInitialiseTaskLists+0x68>)
 8009a30:	f7fe fed6 	bl	80087e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a34:	480c      	ldr	r0, [pc, #48]	@ (8009a68 <prvInitialiseTaskLists+0x6c>)
 8009a36:	f7fe fed3 	bl	80087e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a3a:	480c      	ldr	r0, [pc, #48]	@ (8009a6c <prvInitialiseTaskLists+0x70>)
 8009a3c:	f7fe fed0 	bl	80087e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a40:	480b      	ldr	r0, [pc, #44]	@ (8009a70 <prvInitialiseTaskLists+0x74>)
 8009a42:	f7fe fecd 	bl	80087e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a46:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <prvInitialiseTaskLists+0x78>)
 8009a48:	4a05      	ldr	r2, [pc, #20]	@ (8009a60 <prvInitialiseTaskLists+0x64>)
 8009a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a78 <prvInitialiseTaskLists+0x7c>)
 8009a4e:	4a05      	ldr	r2, [pc, #20]	@ (8009a64 <prvInitialiseTaskLists+0x68>)
 8009a50:	601a      	str	r2, [r3, #0]
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20001784 	.word	0x20001784
 8009a60:	20001810 	.word	0x20001810
 8009a64:	20001824 	.word	0x20001824
 8009a68:	20001840 	.word	0x20001840
 8009a6c:	20001854 	.word	0x20001854
 8009a70:	2000186c 	.word	0x2000186c
 8009a74:	20001838 	.word	0x20001838
 8009a78:	2000183c 	.word	0x2000183c

08009a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a82:	e019      	b.n	8009ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a84:	f000 fc60 	bl	800a348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a88:	4b10      	ldr	r3, [pc, #64]	@ (8009acc <prvCheckTasksWaitingTermination+0x50>)
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe ff2d 	bl	80088f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad0 <prvCheckTasksWaitingTermination+0x54>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ad0 <prvCheckTasksWaitingTermination+0x54>)
 8009aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <prvCheckTasksWaitingTermination+0x58>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8009ad4 <prvCheckTasksWaitingTermination+0x58>)
 8009aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009aae:	f000 fc7d 	bl	800a3ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f810 	bl	8009ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ab8:	4b06      	ldr	r3, [pc, #24]	@ (8009ad4 <prvCheckTasksWaitingTermination+0x58>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e1      	bne.n	8009a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20001854 	.word	0x20001854
 8009ad0:	20001880 	.word	0x20001880
 8009ad4:	20001868 	.word	0x20001868

08009ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	334c      	adds	r3, #76	@ 0x4c
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 f857 	bl	800ab98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d108      	bne.n	8009b06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fe15 	bl	800a728 <vPortFree>
				vPortFree( pxTCB );
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fe12 	bl	800a728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b04:	e019      	b.n	8009b3a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d103      	bne.n	8009b18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fe09 	bl	800a728 <vPortFree>
	}
 8009b16:	e010      	b.n	8009b3a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d00b      	beq.n	8009b3a <prvDeleteTCB+0x62>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	60fb      	str	r3, [r7, #12]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <prvDeleteTCB+0x5e>
	}
 8009b3a:	bf00      	nop
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b7c <prvResetNextTaskUnblockTime+0x38>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d104      	bne.n	8009b5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b54:	4b0a      	ldr	r3, [pc, #40]	@ (8009b80 <prvResetNextTaskUnblockTime+0x3c>)
 8009b56:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b5c:	e008      	b.n	8009b70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b5e:	4b07      	ldr	r3, [pc, #28]	@ (8009b7c <prvResetNextTaskUnblockTime+0x38>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4a04      	ldr	r2, [pc, #16]	@ (8009b80 <prvResetNextTaskUnblockTime+0x3c>)
 8009b6e:	6013      	str	r3, [r2, #0]
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	20001838 	.word	0x20001838
 8009b80:	200018a0 	.word	0x200018a0

08009b84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb8 <xTaskGetSchedulerState+0x34>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b92:	2301      	movs	r3, #1
 8009b94:	607b      	str	r3, [r7, #4]
 8009b96:	e008      	b.n	8009baa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b98:	4b08      	ldr	r3, [pc, #32]	@ (8009bbc <xTaskGetSchedulerState+0x38>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	607b      	str	r3, [r7, #4]
 8009ba4:	e001      	b.n	8009baa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009baa:	687b      	ldr	r3, [r7, #4]
	}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	2000188c 	.word	0x2000188c
 8009bbc:	200018a8 	.word	0x200018a8

08009bc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d070      	beq.n	8009cb8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8009cc4 <xTaskPriorityDisinherit+0x104>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d00b      	beq.n	8009bf8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60fb      	str	r3, [r7, #12]
}
 8009bf2:	bf00      	nop
 8009bf4:	bf00      	nop
 8009bf6:	e7fd      	b.n	8009bf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10b      	bne.n	8009c18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	60bb      	str	r3, [r7, #8]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c1c:	1e5a      	subs	r2, r3, #1
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d044      	beq.n	8009cb8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d140      	bne.n	8009cb8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe fe5a 	bl	80088f4 <uxListRemove>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d115      	bne.n	8009c72 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4a:	491f      	ldr	r1, [pc, #124]	@ (8009cc8 <xTaskPriorityDisinherit+0x108>)
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <xTaskPriorityDisinherit+0xb2>
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c60:	2201      	movs	r2, #1
 8009c62:	fa02 f303 	lsl.w	r3, r2, r3
 8009c66:	43da      	mvns	r2, r3
 8009c68:	4b18      	ldr	r3, [pc, #96]	@ (8009ccc <xTaskPriorityDisinherit+0x10c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	4a17      	ldr	r2, [pc, #92]	@ (8009ccc <xTaskPriorityDisinherit+0x10c>)
 8009c70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	f1c3 0207 	rsb	r2, r3, #7
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	409a      	lsls	r2, r3
 8009c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009ccc <xTaskPriorityDisinherit+0x10c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	4a0d      	ldr	r2, [pc, #52]	@ (8009ccc <xTaskPriorityDisinherit+0x10c>)
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4a08      	ldr	r2, [pc, #32]	@ (8009cc8 <xTaskPriorityDisinherit+0x108>)
 8009ca6:	441a      	add	r2, r3
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4619      	mov	r1, r3
 8009cae:	4610      	mov	r0, r2
 8009cb0:	f7fe fdc3 	bl	800883a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cb8:	697b      	ldr	r3, [r7, #20]
	}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20001780 	.word	0x20001780
 8009cc8:	20001784 	.word	0x20001784
 8009ccc:	20001888 	.word	0x20001888

08009cd0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08a      	sub	sp, #40	@ 0x28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	603b      	str	r3, [r7, #0]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10b      	bne.n	8009d02 <xTaskGenericNotify+0x32>
	__asm volatile
 8009cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	61bb      	str	r3, [r7, #24]
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	e7fd      	b.n	8009cfe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009d06:	f000 fb1f 	bl	800a348 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009d20:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	2202      	movs	r2, #2
 8009d26:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	d82e      	bhi.n	8009d8e <xTaskGenericNotify+0xbe>
 8009d30:	a201      	add	r2, pc, #4	@ (adr r2, 8009d38 <xTaskGenericNotify+0x68>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009db3 	.word	0x08009db3
 8009d3c:	08009d4d 	.word	0x08009d4d
 8009d40:	08009d5f 	.word	0x08009d5f
 8009d44:	08009d6f 	.word	0x08009d6f
 8009d48:	08009d79 	.word	0x08009d79
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	431a      	orrs	r2, r3
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009d5c:	e02c      	b.n	8009db8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d64:	1c5a      	adds	r2, r3, #1
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009d6c:	e024      	b.n	8009db8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009d76:	e01f      	b.n	8009db8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d78:	7ffb      	ldrb	r3, [r7, #31]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d004      	beq.n	8009d88 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009d86:	e017      	b.n	8009db8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009d8c:	e014      	b.n	8009db8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d98:	d00d      	beq.n	8009db6 <xTaskGenericNotify+0xe6>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	617b      	str	r3, [r7, #20]
}
 8009dac:	bf00      	nop
 8009dae:	bf00      	nop
 8009db0:	e7fd      	b.n	8009dae <xTaskGenericNotify+0xde>
					break;
 8009db2:	bf00      	nop
 8009db4:	e000      	b.n	8009db8 <xTaskGenericNotify+0xe8>

					break;
 8009db6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009db8:	7ffb      	ldrb	r3, [r7, #31]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d13a      	bne.n	8009e34 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fd96 	bl	80088f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dcc:	2201      	movs	r2, #1
 8009dce:	409a      	lsls	r2, r3
 8009dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8009e44 <xTaskGenericNotify+0x174>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8009e44 <xTaskGenericNotify+0x174>)
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4a18      	ldr	r2, [pc, #96]	@ (8009e48 <xTaskGenericNotify+0x178>)
 8009de8:	441a      	add	r2, r3
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4619      	mov	r1, r3
 8009df0:	4610      	mov	r0, r2
 8009df2:	f7fe fd22 	bl	800883a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <xTaskGenericNotify+0x146>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	613b      	str	r3, [r7, #16]
}
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
 8009e14:	e7fd      	b.n	8009e12 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e4c <xTaskGenericNotify+0x17c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d907      	bls.n	8009e34 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009e24:	4b0a      	ldr	r3, [pc, #40]	@ (8009e50 <xTaskGenericNotify+0x180>)
 8009e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009e34:	f000 faba 	bl	800a3ac <vPortExitCritical>

		return xReturn;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3728      	adds	r7, #40	@ 0x28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20001888 	.word	0x20001888
 8009e48:	20001784 	.word	0x20001784
 8009e4c:	20001780 	.word	0x20001780
 8009e50:	e000ed04 	.word	0xe000ed04

08009e54 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08e      	sub	sp, #56	@ 0x38
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	4613      	mov	r3, r2
 8009e62:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009e64:	2301      	movs	r3, #1
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10b      	bne.n	8009e86 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e80:	bf00      	nop
 8009e82:	bf00      	nop
 8009e84:	e7fd      	b.n	8009e82 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e86:	f000 fb3f 	bl	800a508 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	623a      	str	r2, [r7, #32]
 8009ea4:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ea6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d004      	beq.n	8009eba <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d82e      	bhi.n	8009f30 <xTaskGenericNotifyFromISR+0xdc>
 8009ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed8 <xTaskGenericNotifyFromISR+0x84>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f55 	.word	0x08009f55
 8009edc:	08009eed 	.word	0x08009eed
 8009ee0:	08009eff 	.word	0x08009eff
 8009ee4:	08009f0f 	.word	0x08009f0f
 8009ee8:	08009f19 	.word	0x08009f19
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009efc:	e02d      	b.n	8009f5a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009f0c:	e025      	b.n	8009f5a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009f16:	e020      	b.n	8009f5a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009f18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d004      	beq.n	8009f2a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009f28:	e017      	b.n	8009f5a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009f2e:	e014      	b.n	8009f5a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	d00d      	beq.n	8009f58 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	61bb      	str	r3, [r7, #24]
}
 8009f4e:	bf00      	nop
 8009f50:	bf00      	nop
 8009f52:	e7fd      	b.n	8009f50 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009f54:	bf00      	nop
 8009f56:	e000      	b.n	8009f5a <xTaskGenericNotifyFromISR+0x106>
					break;
 8009f58:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009f5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d146      	bne.n	8009ff0 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00b      	beq.n	8009f82 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	617b      	str	r3, [r7, #20]
}
 8009f7c:	bf00      	nop
 8009f7e:	bf00      	nop
 8009f80:	e7fd      	b.n	8009f7e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f82:	4b21      	ldr	r3, [pc, #132]	@ (800a008 <xTaskGenericNotifyFromISR+0x1b4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d11c      	bne.n	8009fc4 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fcb0 	bl	80088f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f98:	2201      	movs	r2, #1
 8009f9a:	409a      	lsls	r2, r3
 8009f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800a00c <xTaskGenericNotifyFromISR+0x1b8>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800a00c <xTaskGenericNotifyFromISR+0x1b8>)
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4a17      	ldr	r2, [pc, #92]	@ (800a010 <xTaskGenericNotifyFromISR+0x1bc>)
 8009fb4:	441a      	add	r2, r3
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7fe fc3c 	bl	800883a <vListInsertEnd>
 8009fc2:	e005      	b.n	8009fd0 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc6:	3318      	adds	r3, #24
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4812      	ldr	r0, [pc, #72]	@ (800a014 <xTaskGenericNotifyFromISR+0x1c0>)
 8009fcc:	f7fe fc35 	bl	800883a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fd4:	4b10      	ldr	r3, [pc, #64]	@ (800a018 <xTaskGenericNotifyFromISR+0x1c4>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d908      	bls.n	8009ff0 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009fea:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <xTaskGenericNotifyFromISR+0x1c8>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ffa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3738      	adds	r7, #56	@ 0x38
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	200018a8 	.word	0x200018a8
 800a00c:	20001888 	.word	0x20001888
 800a010:	20001784 	.word	0x20001784
 800a014:	20001840 	.word	0x20001840
 800a018:	20001780 	.word	0x20001780
 800a01c:	20001894 	.word	0x20001894

0800a020 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a02a:	4b29      	ldr	r3, [pc, #164]	@ (800a0d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a030:	4b28      	ldr	r3, [pc, #160]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3304      	adds	r3, #4
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe fc5c 	bl	80088f4 <uxListRemove>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10b      	bne.n	800a05a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a042:	4b24      	ldr	r3, [pc, #144]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a048:	2201      	movs	r2, #1
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	43da      	mvns	r2, r3
 800a050:	4b21      	ldr	r3, [pc, #132]	@ (800a0d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4013      	ands	r3, r2
 800a056:	4a20      	ldr	r2, [pc, #128]	@ (800a0d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a058:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a060:	d10a      	bne.n	800a078 <prvAddCurrentTaskToDelayedList+0x58>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d007      	beq.n	800a078 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a068:	4b1a      	ldr	r3, [pc, #104]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3304      	adds	r3, #4
 800a06e:	4619      	mov	r1, r3
 800a070:	481a      	ldr	r0, [pc, #104]	@ (800a0dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a072:	f7fe fbe2 	bl	800883a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a076:	e026      	b.n	800a0c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4413      	add	r3, r2
 800a07e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a080:	4b14      	ldr	r3, [pc, #80]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d209      	bcs.n	800a0a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a090:	4b13      	ldr	r3, [pc, #76]	@ (800a0e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3304      	adds	r3, #4
 800a09a:	4619      	mov	r1, r3
 800a09c:	4610      	mov	r0, r2
 800a09e:	f7fe fbf0 	bl	8008882 <vListInsert>
}
 800a0a2:	e010      	b.n	800a0c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7fe fbe6 	bl	8008882 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d202      	bcs.n	800a0c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a0c0:	4a09      	ldr	r2, [pc, #36]	@ (800a0e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	6013      	str	r3, [r2, #0]
}
 800a0c6:	bf00      	nop
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20001884 	.word	0x20001884
 800a0d4:	20001780 	.word	0x20001780
 800a0d8:	20001888 	.word	0x20001888
 800a0dc:	2000186c 	.word	0x2000186c
 800a0e0:	2000183c 	.word	0x2000183c
 800a0e4:	20001838 	.word	0x20001838
 800a0e8:	200018a0 	.word	0x200018a0

0800a0ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3b04      	subs	r3, #4
 800a0fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3b04      	subs	r3, #4
 800a10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f023 0201 	bic.w	r2, r3, #1
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3b04      	subs	r3, #4
 800a11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a11c:	4a0c      	ldr	r2, [pc, #48]	@ (800a150 <pxPortInitialiseStack+0x64>)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3b14      	subs	r3, #20
 800a126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3b04      	subs	r3, #4
 800a132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f06f 0202 	mvn.w	r2, #2
 800a13a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3b20      	subs	r3, #32
 800a140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a142:	68fb      	ldr	r3, [r7, #12]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	0800a155 	.word	0x0800a155

0800a154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a15e:	4b13      	ldr	r3, [pc, #76]	@ (800a1ac <prvTaskExitError+0x58>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a166:	d00b      	beq.n	800a180 <prvTaskExitError+0x2c>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	60fb      	str	r3, [r7, #12]
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	e7fd      	b.n	800a17c <prvTaskExitError+0x28>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	60bb      	str	r3, [r7, #8]
}
 800a192:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a194:	bf00      	nop
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0fc      	beq.n	800a196 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	200002a8 	.word	0x200002a8

0800a1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1b0:	4b07      	ldr	r3, [pc, #28]	@ (800a1d0 <pxCurrentTCBConst2>)
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	6808      	ldr	r0, [r1, #0]
 800a1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ba:	f380 8809 	msr	PSP, r0
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f04f 0000 	mov.w	r0, #0
 800a1c6:	f380 8811 	msr	BASEPRI, r0
 800a1ca:	4770      	bx	lr
 800a1cc:	f3af 8000 	nop.w

0800a1d0 <pxCurrentTCBConst2>:
 800a1d0:	20001780 	.word	0x20001780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop

0800a1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1d8:	4808      	ldr	r0, [pc, #32]	@ (800a1fc <prvPortStartFirstTask+0x24>)
 800a1da:	6800      	ldr	r0, [r0, #0]
 800a1dc:	6800      	ldr	r0, [r0, #0]
 800a1de:	f380 8808 	msr	MSP, r0
 800a1e2:	f04f 0000 	mov.w	r0, #0
 800a1e6:	f380 8814 	msr	CONTROL, r0
 800a1ea:	b662      	cpsie	i
 800a1ec:	b661      	cpsie	f
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	df00      	svc	0
 800a1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1fa:	bf00      	nop
 800a1fc:	e000ed08 	.word	0xe000ed08

0800a200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a206:	4b47      	ldr	r3, [pc, #284]	@ (800a324 <xPortStartScheduler+0x124>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a47      	ldr	r2, [pc, #284]	@ (800a328 <xPortStartScheduler+0x128>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d10b      	bne.n	800a228 <xPortStartScheduler+0x28>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	613b      	str	r3, [r7, #16]
}
 800a222:	bf00      	nop
 800a224:	bf00      	nop
 800a226:	e7fd      	b.n	800a224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a228:	4b3e      	ldr	r3, [pc, #248]	@ (800a324 <xPortStartScheduler+0x124>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a3f      	ldr	r2, [pc, #252]	@ (800a32c <xPortStartScheduler+0x12c>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d10b      	bne.n	800a24a <xPortStartScheduler+0x4a>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	60fb      	str	r3, [r7, #12]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a24a:	4b39      	ldr	r3, [pc, #228]	@ (800a330 <xPortStartScheduler+0x130>)
 800a24c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	22ff      	movs	r2, #255	@ 0xff
 800a25a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	4b31      	ldr	r3, [pc, #196]	@ (800a334 <xPortStartScheduler+0x134>)
 800a270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a272:	4b31      	ldr	r3, [pc, #196]	@ (800a338 <xPortStartScheduler+0x138>)
 800a274:	2207      	movs	r2, #7
 800a276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a278:	e009      	b.n	800a28e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a27a:	4b2f      	ldr	r3, [pc, #188]	@ (800a338 <xPortStartScheduler+0x138>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3b01      	subs	r3, #1
 800a280:	4a2d      	ldr	r2, [pc, #180]	@ (800a338 <xPortStartScheduler+0x138>)
 800a282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	b2db      	uxtb	r3, r3
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	b2db      	uxtb	r3, r3
 800a292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a296:	2b80      	cmp	r3, #128	@ 0x80
 800a298:	d0ef      	beq.n	800a27a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a29a:	4b27      	ldr	r3, [pc, #156]	@ (800a338 <xPortStartScheduler+0x138>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f1c3 0307 	rsb	r3, r3, #7
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d00b      	beq.n	800a2be <xPortStartScheduler+0xbe>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	60bb      	str	r3, [r7, #8]
}
 800a2b8:	bf00      	nop
 800a2ba:	bf00      	nop
 800a2bc:	e7fd      	b.n	800a2ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2be:	4b1e      	ldr	r3, [pc, #120]	@ (800a338 <xPortStartScheduler+0x138>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a338 <xPortStartScheduler+0x138>)
 800a2c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a338 <xPortStartScheduler+0x138>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2d0:	4a19      	ldr	r2, [pc, #100]	@ (800a338 <xPortStartScheduler+0x138>)
 800a2d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2dc:	4b17      	ldr	r3, [pc, #92]	@ (800a33c <xPortStartScheduler+0x13c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a16      	ldr	r2, [pc, #88]	@ (800a33c <xPortStartScheduler+0x13c>)
 800a2e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a2e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2e8:	4b14      	ldr	r3, [pc, #80]	@ (800a33c <xPortStartScheduler+0x13c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a13      	ldr	r2, [pc, #76]	@ (800a33c <xPortStartScheduler+0x13c>)
 800a2ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a2f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2f4:	f000 f8da 	bl	800a4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2f8:	4b11      	ldr	r3, [pc, #68]	@ (800a340 <xPortStartScheduler+0x140>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2fe:	f000 f8f9 	bl	800a4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a302:	4b10      	ldr	r3, [pc, #64]	@ (800a344 <xPortStartScheduler+0x144>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a0f      	ldr	r2, [pc, #60]	@ (800a344 <xPortStartScheduler+0x144>)
 800a308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a30c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a30e:	f7ff ff63 	bl	800a1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a312:	f7ff f9e7 	bl	80096e4 <vTaskSwitchContext>
	prvTaskExitError();
 800a316:	f7ff ff1d 	bl	800a154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	e000ed00 	.word	0xe000ed00
 800a328:	410fc271 	.word	0x410fc271
 800a32c:	410fc270 	.word	0x410fc270
 800a330:	e000e400 	.word	0xe000e400
 800a334:	200018ac 	.word	0x200018ac
 800a338:	200018b0 	.word	0x200018b0
 800a33c:	e000ed20 	.word	0xe000ed20
 800a340:	200002a8 	.word	0x200002a8
 800a344:	e000ef34 	.word	0xe000ef34

0800a348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	607b      	str	r3, [r7, #4]
}
 800a360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a362:	4b10      	ldr	r3, [pc, #64]	@ (800a3a4 <vPortEnterCritical+0x5c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3301      	adds	r3, #1
 800a368:	4a0e      	ldr	r2, [pc, #56]	@ (800a3a4 <vPortEnterCritical+0x5c>)
 800a36a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a36c:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a4 <vPortEnterCritical+0x5c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d110      	bne.n	800a396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a374:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a8 <vPortEnterCritical+0x60>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00b      	beq.n	800a396 <vPortEnterCritical+0x4e>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	603b      	str	r3, [r7, #0]
}
 800a390:	bf00      	nop
 800a392:	bf00      	nop
 800a394:	e7fd      	b.n	800a392 <vPortEnterCritical+0x4a>
	}
}
 800a396:	bf00      	nop
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	200002a8 	.word	0x200002a8
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3b2:	4b12      	ldr	r3, [pc, #72]	@ (800a3fc <vPortExitCritical+0x50>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10b      	bne.n	800a3d2 <vPortExitCritical+0x26>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	607b      	str	r3, [r7, #4]
}
 800a3cc:	bf00      	nop
 800a3ce:	bf00      	nop
 800a3d0:	e7fd      	b.n	800a3ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3fc <vPortExitCritical+0x50>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	4a08      	ldr	r2, [pc, #32]	@ (800a3fc <vPortExitCritical+0x50>)
 800a3da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3dc:	4b07      	ldr	r3, [pc, #28]	@ (800a3fc <vPortExitCritical+0x50>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d105      	bne.n	800a3f0 <vPortExitCritical+0x44>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	f383 8811 	msr	BASEPRI, r3
}
 800a3ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	200002a8 	.word	0x200002a8

0800a400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a400:	f3ef 8009 	mrs	r0, PSP
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	4b15      	ldr	r3, [pc, #84]	@ (800a460 <pxCurrentTCBConst>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	f01e 0f10 	tst.w	lr, #16
 800a410:	bf08      	it	eq
 800a412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41a:	6010      	str	r0, [r2, #0]
 800a41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a424:	f380 8811 	msr	BASEPRI, r0
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f7ff f958 	bl	80096e4 <vTaskSwitchContext>
 800a434:	f04f 0000 	mov.w	r0, #0
 800a438:	f380 8811 	msr	BASEPRI, r0
 800a43c:	bc09      	pop	{r0, r3}
 800a43e:	6819      	ldr	r1, [r3, #0]
 800a440:	6808      	ldr	r0, [r1, #0]
 800a442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a446:	f01e 0f10 	tst.w	lr, #16
 800a44a:	bf08      	it	eq
 800a44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a450:	f380 8809 	msr	PSP, r0
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	f3af 8000 	nop.w

0800a460 <pxCurrentTCBConst>:
 800a460:	20001780 	.word	0x20001780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop

0800a468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	607b      	str	r3, [r7, #4]
}
 800a480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a482:	f7ff f875 	bl	8009570 <xTaskIncrementTick>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d003      	beq.n	800a494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a48c:	4b06      	ldr	r3, [pc, #24]	@ (800a4a8 <SysTick_Handler+0x40>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	2300      	movs	r3, #0
 800a496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	f383 8811 	msr	BASEPRI, r3
}
 800a49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e0 <vPortSetupTimerInterrupt+0x34>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e4 <vPortSetupTimerInterrupt+0x38>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e8 <vPortSetupTimerInterrupt+0x3c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a4ec <vPortSetupTimerInterrupt+0x40>)
 800a4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c6:	099b      	lsrs	r3, r3, #6
 800a4c8:	4a09      	ldr	r2, [pc, #36]	@ (800a4f0 <vPortSetupTimerInterrupt+0x44>)
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4ce:	4b04      	ldr	r3, [pc, #16]	@ (800a4e0 <vPortSetupTimerInterrupt+0x34>)
 800a4d0:	2207      	movs	r2, #7
 800a4d2:	601a      	str	r2, [r3, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	e000e010 	.word	0xe000e010
 800a4e4:	e000e018 	.word	0xe000e018
 800a4e8:	20000000 	.word	0x20000000
 800a4ec:	10624dd3 	.word	0x10624dd3
 800a4f0:	e000e014 	.word	0xe000e014

0800a4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a504 <vPortEnableVFP+0x10>
 800a4f8:	6801      	ldr	r1, [r0, #0]
 800a4fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4fe:	6001      	str	r1, [r0, #0]
 800a500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a502:	bf00      	nop
 800a504:	e000ed88 	.word	0xe000ed88

0800a508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a50e:	f3ef 8305 	mrs	r3, IPSR
 800a512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b0f      	cmp	r3, #15
 800a518:	d915      	bls.n	800a546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a51a:	4a18      	ldr	r2, [pc, #96]	@ (800a57c <vPortValidateInterruptPriority+0x74>)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4413      	add	r3, r2
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a524:	4b16      	ldr	r3, [pc, #88]	@ (800a580 <vPortValidateInterruptPriority+0x78>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	7afa      	ldrb	r2, [r7, #11]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d20b      	bcs.n	800a546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	607b      	str	r3, [r7, #4]
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a546:	4b0f      	ldr	r3, [pc, #60]	@ (800a584 <vPortValidateInterruptPriority+0x7c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a54e:	4b0e      	ldr	r3, [pc, #56]	@ (800a588 <vPortValidateInterruptPriority+0x80>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d90b      	bls.n	800a56e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	603b      	str	r3, [r7, #0]
}
 800a568:	bf00      	nop
 800a56a:	bf00      	nop
 800a56c:	e7fd      	b.n	800a56a <vPortValidateInterruptPriority+0x62>
	}
 800a56e:	bf00      	nop
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	e000e3f0 	.word	0xe000e3f0
 800a580:	200018ac 	.word	0x200018ac
 800a584:	e000ed0c 	.word	0xe000ed0c
 800a588:	200018b0 	.word	0x200018b0

0800a58c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08a      	sub	sp, #40	@ 0x28
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a594:	2300      	movs	r3, #0
 800a596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a598:	f7fe ff3e 	bl	8009418 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a59c:	4b5c      	ldr	r3, [pc, #368]	@ (800a710 <pvPortMalloc+0x184>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5a4:	f000 f924 	bl	800a7f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a714 <pvPortMalloc+0x188>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 8095 	bne.w	800a6e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01e      	beq.n	800a5fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a5bc:	2208      	movs	r2, #8
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d015      	beq.n	800a5fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f023 0307 	bic.w	r3, r3, #7
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f003 0307 	and.w	r3, r3, #7
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00b      	beq.n	800a5fa <pvPortMalloc+0x6e>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	617b      	str	r3, [r7, #20]
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	e7fd      	b.n	800a5f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d06f      	beq.n	800a6e0 <pvPortMalloc+0x154>
 800a600:	4b45      	ldr	r3, [pc, #276]	@ (800a718 <pvPortMalloc+0x18c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	429a      	cmp	r2, r3
 800a608:	d86a      	bhi.n	800a6e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a60a:	4b44      	ldr	r3, [pc, #272]	@ (800a71c <pvPortMalloc+0x190>)
 800a60c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a60e:	4b43      	ldr	r3, [pc, #268]	@ (800a71c <pvPortMalloc+0x190>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a614:	e004      	b.n	800a620 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	429a      	cmp	r2, r3
 800a628:	d903      	bls.n	800a632 <pvPortMalloc+0xa6>
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1f1      	bne.n	800a616 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a632:	4b37      	ldr	r3, [pc, #220]	@ (800a710 <pvPortMalloc+0x184>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a638:	429a      	cmp	r2, r3
 800a63a:	d051      	beq.n	800a6e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2208      	movs	r2, #8
 800a642:	4413      	add	r3, r2
 800a644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	1ad2      	subs	r2, r2, r3
 800a656:	2308      	movs	r3, #8
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d920      	bls.n	800a6a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a65e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4413      	add	r3, r2
 800a664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00b      	beq.n	800a688 <pvPortMalloc+0xfc>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	613b      	str	r3, [r7, #16]
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	e7fd      	b.n	800a684 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	1ad2      	subs	r2, r2, r3
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a69a:	69b8      	ldr	r0, [r7, #24]
 800a69c:	f000 f90a 	bl	800a8b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a718 <pvPortMalloc+0x18c>)
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a718 <pvPortMalloc+0x18c>)
 800a6ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a718 <pvPortMalloc+0x18c>)
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a720 <pvPortMalloc+0x194>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d203      	bcs.n	800a6c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6ba:	4b17      	ldr	r3, [pc, #92]	@ (800a718 <pvPortMalloc+0x18c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a18      	ldr	r2, [pc, #96]	@ (800a720 <pvPortMalloc+0x194>)
 800a6c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	4b13      	ldr	r3, [pc, #76]	@ (800a714 <pvPortMalloc+0x188>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6d6:	4b13      	ldr	r3, [pc, #76]	@ (800a724 <pvPortMalloc+0x198>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	4a11      	ldr	r2, [pc, #68]	@ (800a724 <pvPortMalloc+0x198>)
 800a6de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6e0:	f7fe fea8 	bl	8009434 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	f003 0307 	and.w	r3, r3, #7
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00b      	beq.n	800a706 <pvPortMalloc+0x17a>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	60fb      	str	r3, [r7, #12]
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	e7fd      	b.n	800a702 <pvPortMalloc+0x176>
	return pvReturn;
 800a706:	69fb      	ldr	r3, [r7, #28]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3728      	adds	r7, #40	@ 0x28
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	200054bc 	.word	0x200054bc
 800a714:	200054d0 	.word	0x200054d0
 800a718:	200054c0 	.word	0x200054c0
 800a71c:	200054b4 	.word	0x200054b4
 800a720:	200054c4 	.word	0x200054c4
 800a724:	200054c8 	.word	0x200054c8

0800a728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d04f      	beq.n	800a7da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a73a:	2308      	movs	r3, #8
 800a73c:	425b      	negs	r3, r3
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	4413      	add	r3, r2
 800a742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	4b25      	ldr	r3, [pc, #148]	@ (800a7e4 <vPortFree+0xbc>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4013      	ands	r3, r2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10b      	bne.n	800a76e <vPortFree+0x46>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	60fb      	str	r3, [r7, #12]
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	e7fd      	b.n	800a76a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <vPortFree+0x66>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	60bb      	str	r3, [r7, #8]
}
 800a788:	bf00      	nop
 800a78a:	bf00      	nop
 800a78c:	e7fd      	b.n	800a78a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	4b14      	ldr	r3, [pc, #80]	@ (800a7e4 <vPortFree+0xbc>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4013      	ands	r3, r2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01e      	beq.n	800a7da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d11a      	bne.n	800a7da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e4 <vPortFree+0xbc>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	43db      	mvns	r3, r3
 800a7ae:	401a      	ands	r2, r3
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7b4:	f7fe fe30 	bl	8009418 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e8 <vPortFree+0xc0>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	4a09      	ldr	r2, [pc, #36]	@ (800a7e8 <vPortFree+0xc0>)
 800a7c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7c6:	6938      	ldr	r0, [r7, #16]
 800a7c8:	f000 f874 	bl	800a8b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7cc:	4b07      	ldr	r3, [pc, #28]	@ (800a7ec <vPortFree+0xc4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	4a06      	ldr	r2, [pc, #24]	@ (800a7ec <vPortFree+0xc4>)
 800a7d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7d6:	f7fe fe2d 	bl	8009434 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7da:	bf00      	nop
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200054d0 	.word	0x200054d0
 800a7e8:	200054c0 	.word	0x200054c0
 800a7ec:	200054cc 	.word	0x200054cc

0800a7f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a7fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7fc:	4b27      	ldr	r3, [pc, #156]	@ (800a89c <prvHeapInit+0xac>)
 800a7fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00c      	beq.n	800a824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3307      	adds	r3, #7
 800a80e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0307 	bic.w	r3, r3, #7
 800a816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	4a1f      	ldr	r2, [pc, #124]	@ (800a89c <prvHeapInit+0xac>)
 800a820:	4413      	add	r3, r2
 800a822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a828:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a0 <prvHeapInit+0xb0>)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a82e:	4b1c      	ldr	r3, [pc, #112]	@ (800a8a0 <prvHeapInit+0xb0>)
 800a830:	2200      	movs	r2, #0
 800a832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	4413      	add	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a83c:	2208      	movs	r2, #8
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f023 0307 	bic.w	r3, r3, #7
 800a84a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4a15      	ldr	r2, [pc, #84]	@ (800a8a4 <prvHeapInit+0xb4>)
 800a850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a852:	4b14      	ldr	r3, [pc, #80]	@ (800a8a4 <prvHeapInit+0xb4>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2200      	movs	r2, #0
 800a858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a85a:	4b12      	ldr	r3, [pc, #72]	@ (800a8a4 <prvHeapInit+0xb4>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	1ad2      	subs	r2, r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a870:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a4 <prvHeapInit+0xb4>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	4a0a      	ldr	r2, [pc, #40]	@ (800a8a8 <prvHeapInit+0xb8>)
 800a87e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	4a09      	ldr	r2, [pc, #36]	@ (800a8ac <prvHeapInit+0xbc>)
 800a886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a888:	4b09      	ldr	r3, [pc, #36]	@ (800a8b0 <prvHeapInit+0xc0>)
 800a88a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a88e:	601a      	str	r2, [r3, #0]
}
 800a890:	bf00      	nop
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	200018b4 	.word	0x200018b4
 800a8a0:	200054b4 	.word	0x200054b4
 800a8a4:	200054bc 	.word	0x200054bc
 800a8a8:	200054c4 	.word	0x200054c4
 800a8ac:	200054c0 	.word	0x200054c0
 800a8b0:	200054d0 	.word	0x200054d0

0800a8b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8bc:	4b28      	ldr	r3, [pc, #160]	@ (800a960 <prvInsertBlockIntoFreeList+0xac>)
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	e002      	b.n	800a8c8 <prvInsertBlockIntoFreeList+0x14>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d8f7      	bhi.n	800a8c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d108      	bne.n	800a8f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	441a      	add	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	441a      	add	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d118      	bne.n	800a93c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	4b15      	ldr	r3, [pc, #84]	@ (800a964 <prvInsertBlockIntoFreeList+0xb0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	429a      	cmp	r2, r3
 800a914:	d00d      	beq.n	800a932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	e008      	b.n	800a944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a932:	4b0c      	ldr	r3, [pc, #48]	@ (800a964 <prvInsertBlockIntoFreeList+0xb0>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e003      	b.n	800a944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d002      	beq.n	800a952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a952:	bf00      	nop
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	200054b4 	.word	0x200054b4
 800a964:	200054bc 	.word	0x200054bc

0800a968 <sbrk_aligned>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	4e0f      	ldr	r6, [pc, #60]	@ (800a9a8 <sbrk_aligned+0x40>)
 800a96c:	460c      	mov	r4, r1
 800a96e:	6831      	ldr	r1, [r6, #0]
 800a970:	4605      	mov	r5, r0
 800a972:	b911      	cbnz	r1, 800a97a <sbrk_aligned+0x12>
 800a974:	f000 f966 	bl	800ac44 <_sbrk_r>
 800a978:	6030      	str	r0, [r6, #0]
 800a97a:	4621      	mov	r1, r4
 800a97c:	4628      	mov	r0, r5
 800a97e:	f000 f961 	bl	800ac44 <_sbrk_r>
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	d103      	bne.n	800a98e <sbrk_aligned+0x26>
 800a986:	f04f 34ff 	mov.w	r4, #4294967295
 800a98a:	4620      	mov	r0, r4
 800a98c:	bd70      	pop	{r4, r5, r6, pc}
 800a98e:	1cc4      	adds	r4, r0, #3
 800a990:	f024 0403 	bic.w	r4, r4, #3
 800a994:	42a0      	cmp	r0, r4
 800a996:	d0f8      	beq.n	800a98a <sbrk_aligned+0x22>
 800a998:	1a21      	subs	r1, r4, r0
 800a99a:	4628      	mov	r0, r5
 800a99c:	f000 f952 	bl	800ac44 <_sbrk_r>
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d1f2      	bne.n	800a98a <sbrk_aligned+0x22>
 800a9a4:	e7ef      	b.n	800a986 <sbrk_aligned+0x1e>
 800a9a6:	bf00      	nop
 800a9a8:	200054d4 	.word	0x200054d4

0800a9ac <_malloc_r>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	1ccd      	adds	r5, r1, #3
 800a9b2:	f025 0503 	bic.w	r5, r5, #3
 800a9b6:	3508      	adds	r5, #8
 800a9b8:	2d0c      	cmp	r5, #12
 800a9ba:	bf38      	it	cc
 800a9bc:	250c      	movcc	r5, #12
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	db01      	blt.n	800a9c8 <_malloc_r+0x1c>
 800a9c4:	42a9      	cmp	r1, r5
 800a9c6:	d904      	bls.n	800a9d2 <_malloc_r+0x26>
 800a9c8:	230c      	movs	r3, #12
 800a9ca:	6033      	str	r3, [r6, #0]
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aaa8 <_malloc_r+0xfc>
 800a9d6:	f000 f869 	bl	800aaac <__malloc_lock>
 800a9da:	f8d8 3000 	ldr.w	r3, [r8]
 800a9de:	461c      	mov	r4, r3
 800a9e0:	bb44      	cbnz	r4, 800aa34 <_malloc_r+0x88>
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7ff ffbf 	bl	800a968 <sbrk_aligned>
 800a9ea:	1c43      	adds	r3, r0, #1
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	d158      	bne.n	800aaa2 <_malloc_r+0xf6>
 800a9f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a9f4:	4627      	mov	r7, r4
 800a9f6:	2f00      	cmp	r7, #0
 800a9f8:	d143      	bne.n	800aa82 <_malloc_r+0xd6>
 800a9fa:	2c00      	cmp	r4, #0
 800a9fc:	d04b      	beq.n	800aa96 <_malloc_r+0xea>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	4639      	mov	r1, r7
 800aa02:	4630      	mov	r0, r6
 800aa04:	eb04 0903 	add.w	r9, r4, r3
 800aa08:	f000 f91c 	bl	800ac44 <_sbrk_r>
 800aa0c:	4581      	cmp	r9, r0
 800aa0e:	d142      	bne.n	800aa96 <_malloc_r+0xea>
 800aa10:	6821      	ldr	r1, [r4, #0]
 800aa12:	1a6d      	subs	r5, r5, r1
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ffa6 	bl	800a968 <sbrk_aligned>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d03a      	beq.n	800aa96 <_malloc_r+0xea>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	442b      	add	r3, r5
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	f8d8 3000 	ldr.w	r3, [r8]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	bb62      	cbnz	r2, 800aa88 <_malloc_r+0xdc>
 800aa2e:	f8c8 7000 	str.w	r7, [r8]
 800aa32:	e00f      	b.n	800aa54 <_malloc_r+0xa8>
 800aa34:	6822      	ldr	r2, [r4, #0]
 800aa36:	1b52      	subs	r2, r2, r5
 800aa38:	d420      	bmi.n	800aa7c <_malloc_r+0xd0>
 800aa3a:	2a0b      	cmp	r2, #11
 800aa3c:	d917      	bls.n	800aa6e <_malloc_r+0xc2>
 800aa3e:	1961      	adds	r1, r4, r5
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	6025      	str	r5, [r4, #0]
 800aa44:	bf18      	it	ne
 800aa46:	6059      	strne	r1, [r3, #4]
 800aa48:	6863      	ldr	r3, [r4, #4]
 800aa4a:	bf08      	it	eq
 800aa4c:	f8c8 1000 	streq.w	r1, [r8]
 800aa50:	5162      	str	r2, [r4, r5]
 800aa52:	604b      	str	r3, [r1, #4]
 800aa54:	4630      	mov	r0, r6
 800aa56:	f000 f82f 	bl	800aab8 <__malloc_unlock>
 800aa5a:	f104 000b 	add.w	r0, r4, #11
 800aa5e:	1d23      	adds	r3, r4, #4
 800aa60:	f020 0007 	bic.w	r0, r0, #7
 800aa64:	1ac2      	subs	r2, r0, r3
 800aa66:	bf1c      	itt	ne
 800aa68:	1a1b      	subne	r3, r3, r0
 800aa6a:	50a3      	strne	r3, [r4, r2]
 800aa6c:	e7af      	b.n	800a9ce <_malloc_r+0x22>
 800aa6e:	6862      	ldr	r2, [r4, #4]
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	bf0c      	ite	eq
 800aa74:	f8c8 2000 	streq.w	r2, [r8]
 800aa78:	605a      	strne	r2, [r3, #4]
 800aa7a:	e7eb      	b.n	800aa54 <_malloc_r+0xa8>
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	6864      	ldr	r4, [r4, #4]
 800aa80:	e7ae      	b.n	800a9e0 <_malloc_r+0x34>
 800aa82:	463c      	mov	r4, r7
 800aa84:	687f      	ldr	r7, [r7, #4]
 800aa86:	e7b6      	b.n	800a9f6 <_malloc_r+0x4a>
 800aa88:	461a      	mov	r2, r3
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	d1fb      	bne.n	800aa88 <_malloc_r+0xdc>
 800aa90:	2300      	movs	r3, #0
 800aa92:	6053      	str	r3, [r2, #4]
 800aa94:	e7de      	b.n	800aa54 <_malloc_r+0xa8>
 800aa96:	230c      	movs	r3, #12
 800aa98:	6033      	str	r3, [r6, #0]
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f000 f80c 	bl	800aab8 <__malloc_unlock>
 800aaa0:	e794      	b.n	800a9cc <_malloc_r+0x20>
 800aaa2:	6005      	str	r5, [r0, #0]
 800aaa4:	e7d6      	b.n	800aa54 <_malloc_r+0xa8>
 800aaa6:	bf00      	nop
 800aaa8:	200054d8 	.word	0x200054d8

0800aaac <__malloc_lock>:
 800aaac:	4801      	ldr	r0, [pc, #4]	@ (800aab4 <__malloc_lock+0x8>)
 800aaae:	f000 b903 	b.w	800acb8 <__retarget_lock_acquire_recursive>
 800aab2:	bf00      	nop
 800aab4:	20005618 	.word	0x20005618

0800aab8 <__malloc_unlock>:
 800aab8:	4801      	ldr	r0, [pc, #4]	@ (800aac0 <__malloc_unlock+0x8>)
 800aaba:	f000 b8fe 	b.w	800acba <__retarget_lock_release_recursive>
 800aabe:	bf00      	nop
 800aac0:	20005618 	.word	0x20005618

0800aac4 <_realloc_r>:
 800aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	4680      	mov	r8, r0
 800aaca:	4615      	mov	r5, r2
 800aacc:	460c      	mov	r4, r1
 800aace:	b921      	cbnz	r1, 800aada <_realloc_r+0x16>
 800aad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aad4:	4611      	mov	r1, r2
 800aad6:	f7ff bf69 	b.w	800a9ac <_malloc_r>
 800aada:	b92a      	cbnz	r2, 800aae8 <_realloc_r+0x24>
 800aadc:	f000 f8fc 	bl	800acd8 <_free_r>
 800aae0:	2400      	movs	r4, #0
 800aae2:	4620      	mov	r0, r4
 800aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae8:	f000 f940 	bl	800ad6c <_malloc_usable_size_r>
 800aaec:	4285      	cmp	r5, r0
 800aaee:	4606      	mov	r6, r0
 800aaf0:	d802      	bhi.n	800aaf8 <_realloc_r+0x34>
 800aaf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aaf6:	d8f4      	bhi.n	800aae2 <_realloc_r+0x1e>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7ff ff56 	bl	800a9ac <_malloc_r>
 800ab00:	4607      	mov	r7, r0
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d0ec      	beq.n	800aae0 <_realloc_r+0x1c>
 800ab06:	42b5      	cmp	r5, r6
 800ab08:	462a      	mov	r2, r5
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	bf28      	it	cs
 800ab0e:	4632      	movcs	r2, r6
 800ab10:	f000 f8d4 	bl	800acbc <memcpy>
 800ab14:	4621      	mov	r1, r4
 800ab16:	4640      	mov	r0, r8
 800ab18:	f000 f8de 	bl	800acd8 <_free_r>
 800ab1c:	463c      	mov	r4, r7
 800ab1e:	e7e0      	b.n	800aae2 <_realloc_r+0x1e>

0800ab20 <sniprintf>:
 800ab20:	b40c      	push	{r2, r3}
 800ab22:	b530      	push	{r4, r5, lr}
 800ab24:	4b17      	ldr	r3, [pc, #92]	@ (800ab84 <sniprintf+0x64>)
 800ab26:	1e0c      	subs	r4, r1, #0
 800ab28:	681d      	ldr	r5, [r3, #0]
 800ab2a:	b09d      	sub	sp, #116	@ 0x74
 800ab2c:	da08      	bge.n	800ab40 <sniprintf+0x20>
 800ab2e:	238b      	movs	r3, #139	@ 0x8b
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	f04f 30ff 	mov.w	r0, #4294967295
 800ab36:	b01d      	add	sp, #116	@ 0x74
 800ab38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab3c:	b002      	add	sp, #8
 800ab3e:	4770      	bx	lr
 800ab40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ab44:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab48:	bf14      	ite	ne
 800ab4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab4e:	4623      	moveq	r3, r4
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	9307      	str	r3, [sp, #28]
 800ab54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab58:	9002      	str	r0, [sp, #8]
 800ab5a:	9006      	str	r0, [sp, #24]
 800ab5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab62:	ab21      	add	r3, sp, #132	@ 0x84
 800ab64:	a902      	add	r1, sp, #8
 800ab66:	4628      	mov	r0, r5
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	f000 f963 	bl	800ae34 <_svfiprintf_r>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	bfbc      	itt	lt
 800ab72:	238b      	movlt	r3, #139	@ 0x8b
 800ab74:	602b      	strlt	r3, [r5, #0]
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	d0dd      	beq.n	800ab36 <sniprintf+0x16>
 800ab7a:	9b02      	ldr	r3, [sp, #8]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
 800ab80:	e7d9      	b.n	800ab36 <sniprintf+0x16>
 800ab82:	bf00      	nop
 800ab84:	200002ac 	.word	0x200002ac

0800ab88 <memset>:
 800ab88:	4402      	add	r2, r0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d100      	bne.n	800ab92 <memset+0xa>
 800ab90:	4770      	bx	lr
 800ab92:	f803 1b01 	strb.w	r1, [r3], #1
 800ab96:	e7f9      	b.n	800ab8c <memset+0x4>

0800ab98 <_reclaim_reent>:
 800ab98:	4b29      	ldr	r3, [pc, #164]	@ (800ac40 <_reclaim_reent+0xa8>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4283      	cmp	r3, r0
 800ab9e:	b570      	push	{r4, r5, r6, lr}
 800aba0:	4604      	mov	r4, r0
 800aba2:	d04b      	beq.n	800ac3c <_reclaim_reent+0xa4>
 800aba4:	69c3      	ldr	r3, [r0, #28]
 800aba6:	b1ab      	cbz	r3, 800abd4 <_reclaim_reent+0x3c>
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	b16b      	cbz	r3, 800abc8 <_reclaim_reent+0x30>
 800abac:	2500      	movs	r5, #0
 800abae:	69e3      	ldr	r3, [r4, #28]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	5959      	ldr	r1, [r3, r5]
 800abb4:	2900      	cmp	r1, #0
 800abb6:	d13b      	bne.n	800ac30 <_reclaim_reent+0x98>
 800abb8:	3504      	adds	r5, #4
 800abba:	2d80      	cmp	r5, #128	@ 0x80
 800abbc:	d1f7      	bne.n	800abae <_reclaim_reent+0x16>
 800abbe:	69e3      	ldr	r3, [r4, #28]
 800abc0:	4620      	mov	r0, r4
 800abc2:	68d9      	ldr	r1, [r3, #12]
 800abc4:	f000 f888 	bl	800acd8 <_free_r>
 800abc8:	69e3      	ldr	r3, [r4, #28]
 800abca:	6819      	ldr	r1, [r3, #0]
 800abcc:	b111      	cbz	r1, 800abd4 <_reclaim_reent+0x3c>
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 f882 	bl	800acd8 <_free_r>
 800abd4:	6961      	ldr	r1, [r4, #20]
 800abd6:	b111      	cbz	r1, 800abde <_reclaim_reent+0x46>
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 f87d 	bl	800acd8 <_free_r>
 800abde:	69e1      	ldr	r1, [r4, #28]
 800abe0:	b111      	cbz	r1, 800abe8 <_reclaim_reent+0x50>
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 f878 	bl	800acd8 <_free_r>
 800abe8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800abea:	b111      	cbz	r1, 800abf2 <_reclaim_reent+0x5a>
 800abec:	4620      	mov	r0, r4
 800abee:	f000 f873 	bl	800acd8 <_free_r>
 800abf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abf4:	b111      	cbz	r1, 800abfc <_reclaim_reent+0x64>
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 f86e 	bl	800acd8 <_free_r>
 800abfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800abfe:	b111      	cbz	r1, 800ac06 <_reclaim_reent+0x6e>
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 f869 	bl	800acd8 <_free_r>
 800ac06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac08:	b111      	cbz	r1, 800ac10 <_reclaim_reent+0x78>
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f000 f864 	bl	800acd8 <_free_r>
 800ac10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ac12:	b111      	cbz	r1, 800ac1a <_reclaim_reent+0x82>
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 f85f 	bl	800acd8 <_free_r>
 800ac1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ac1c:	b111      	cbz	r1, 800ac24 <_reclaim_reent+0x8c>
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f85a 	bl	800acd8 <_free_r>
 800ac24:	6a23      	ldr	r3, [r4, #32]
 800ac26:	b14b      	cbz	r3, 800ac3c <_reclaim_reent+0xa4>
 800ac28:	4620      	mov	r0, r4
 800ac2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac2e:	4718      	bx	r3
 800ac30:	680e      	ldr	r6, [r1, #0]
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 f850 	bl	800acd8 <_free_r>
 800ac38:	4631      	mov	r1, r6
 800ac3a:	e7bb      	b.n	800abb4 <_reclaim_reent+0x1c>
 800ac3c:	bd70      	pop	{r4, r5, r6, pc}
 800ac3e:	bf00      	nop
 800ac40:	200002ac 	.word	0x200002ac

0800ac44 <_sbrk_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d06      	ldr	r5, [pc, #24]	@ (800ac60 <_sbrk_r+0x1c>)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7f6 f9f4 	bl	800103c <_sbrk>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_sbrk_r+0x1a>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_sbrk_r+0x1a>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	20005614 	.word	0x20005614

0800ac64 <__errno>:
 800ac64:	4b01      	ldr	r3, [pc, #4]	@ (800ac6c <__errno+0x8>)
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	200002ac 	.word	0x200002ac

0800ac70 <__libc_init_array>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	4d0d      	ldr	r5, [pc, #52]	@ (800aca8 <__libc_init_array+0x38>)
 800ac74:	4c0d      	ldr	r4, [pc, #52]	@ (800acac <__libc_init_array+0x3c>)
 800ac76:	1b64      	subs	r4, r4, r5
 800ac78:	10a4      	asrs	r4, r4, #2
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	42a6      	cmp	r6, r4
 800ac7e:	d109      	bne.n	800ac94 <__libc_init_array+0x24>
 800ac80:	4d0b      	ldr	r5, [pc, #44]	@ (800acb0 <__libc_init_array+0x40>)
 800ac82:	4c0c      	ldr	r4, [pc, #48]	@ (800acb4 <__libc_init_array+0x44>)
 800ac84:	f000 fb7a 	bl	800b37c <_init>
 800ac88:	1b64      	subs	r4, r4, r5
 800ac8a:	10a4      	asrs	r4, r4, #2
 800ac8c:	2600      	movs	r6, #0
 800ac8e:	42a6      	cmp	r6, r4
 800ac90:	d105      	bne.n	800ac9e <__libc_init_array+0x2e>
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac98:	4798      	blx	r3
 800ac9a:	3601      	adds	r6, #1
 800ac9c:	e7ee      	b.n	800ac7c <__libc_init_array+0xc>
 800ac9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca2:	4798      	blx	r3
 800aca4:	3601      	adds	r6, #1
 800aca6:	e7f2      	b.n	800ac8e <__libc_init_array+0x1e>
 800aca8:	0800b638 	.word	0x0800b638
 800acac:	0800b638 	.word	0x0800b638
 800acb0:	0800b638 	.word	0x0800b638
 800acb4:	0800b63c 	.word	0x0800b63c

0800acb8 <__retarget_lock_acquire_recursive>:
 800acb8:	4770      	bx	lr

0800acba <__retarget_lock_release_recursive>:
 800acba:	4770      	bx	lr

0800acbc <memcpy>:
 800acbc:	440a      	add	r2, r1
 800acbe:	4291      	cmp	r1, r2
 800acc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800acc4:	d100      	bne.n	800acc8 <memcpy+0xc>
 800acc6:	4770      	bx	lr
 800acc8:	b510      	push	{r4, lr}
 800acca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acd2:	4291      	cmp	r1, r2
 800acd4:	d1f9      	bne.n	800acca <memcpy+0xe>
 800acd6:	bd10      	pop	{r4, pc}

0800acd8 <_free_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4605      	mov	r5, r0
 800acdc:	2900      	cmp	r1, #0
 800acde:	d041      	beq.n	800ad64 <_free_r+0x8c>
 800ace0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace4:	1f0c      	subs	r4, r1, #4
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bfb8      	it	lt
 800acea:	18e4      	addlt	r4, r4, r3
 800acec:	f7ff fede 	bl	800aaac <__malloc_lock>
 800acf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad68 <_free_r+0x90>)
 800acf2:	6813      	ldr	r3, [r2, #0]
 800acf4:	b933      	cbnz	r3, 800ad04 <_free_r+0x2c>
 800acf6:	6063      	str	r3, [r4, #4]
 800acf8:	6014      	str	r4, [r2, #0]
 800acfa:	4628      	mov	r0, r5
 800acfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad00:	f7ff beda 	b.w	800aab8 <__malloc_unlock>
 800ad04:	42a3      	cmp	r3, r4
 800ad06:	d908      	bls.n	800ad1a <_free_r+0x42>
 800ad08:	6820      	ldr	r0, [r4, #0]
 800ad0a:	1821      	adds	r1, r4, r0
 800ad0c:	428b      	cmp	r3, r1
 800ad0e:	bf01      	itttt	eq
 800ad10:	6819      	ldreq	r1, [r3, #0]
 800ad12:	685b      	ldreq	r3, [r3, #4]
 800ad14:	1809      	addeq	r1, r1, r0
 800ad16:	6021      	streq	r1, [r4, #0]
 800ad18:	e7ed      	b.n	800acf6 <_free_r+0x1e>
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	b10b      	cbz	r3, 800ad24 <_free_r+0x4c>
 800ad20:	42a3      	cmp	r3, r4
 800ad22:	d9fa      	bls.n	800ad1a <_free_r+0x42>
 800ad24:	6811      	ldr	r1, [r2, #0]
 800ad26:	1850      	adds	r0, r2, r1
 800ad28:	42a0      	cmp	r0, r4
 800ad2a:	d10b      	bne.n	800ad44 <_free_r+0x6c>
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	4401      	add	r1, r0
 800ad30:	1850      	adds	r0, r2, r1
 800ad32:	4283      	cmp	r3, r0
 800ad34:	6011      	str	r1, [r2, #0]
 800ad36:	d1e0      	bne.n	800acfa <_free_r+0x22>
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	6053      	str	r3, [r2, #4]
 800ad3e:	4408      	add	r0, r1
 800ad40:	6010      	str	r0, [r2, #0]
 800ad42:	e7da      	b.n	800acfa <_free_r+0x22>
 800ad44:	d902      	bls.n	800ad4c <_free_r+0x74>
 800ad46:	230c      	movs	r3, #12
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	e7d6      	b.n	800acfa <_free_r+0x22>
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	1821      	adds	r1, r4, r0
 800ad50:	428b      	cmp	r3, r1
 800ad52:	bf04      	itt	eq
 800ad54:	6819      	ldreq	r1, [r3, #0]
 800ad56:	685b      	ldreq	r3, [r3, #4]
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	bf04      	itt	eq
 800ad5c:	1809      	addeq	r1, r1, r0
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	6054      	str	r4, [r2, #4]
 800ad62:	e7ca      	b.n	800acfa <_free_r+0x22>
 800ad64:	bd38      	pop	{r3, r4, r5, pc}
 800ad66:	bf00      	nop
 800ad68:	200054d8 	.word	0x200054d8

0800ad6c <_malloc_usable_size_r>:
 800ad6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad70:	1f18      	subs	r0, r3, #4
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bfbc      	itt	lt
 800ad76:	580b      	ldrlt	r3, [r1, r0]
 800ad78:	18c0      	addlt	r0, r0, r3
 800ad7a:	4770      	bx	lr

0800ad7c <__ssputs_r>:
 800ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad80:	688e      	ldr	r6, [r1, #8]
 800ad82:	461f      	mov	r7, r3
 800ad84:	42be      	cmp	r6, r7
 800ad86:	680b      	ldr	r3, [r1, #0]
 800ad88:	4682      	mov	sl, r0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	4690      	mov	r8, r2
 800ad8e:	d82d      	bhi.n	800adec <__ssputs_r+0x70>
 800ad90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad98:	d026      	beq.n	800ade8 <__ssputs_r+0x6c>
 800ad9a:	6965      	ldr	r5, [r4, #20]
 800ad9c:	6909      	ldr	r1, [r1, #16]
 800ad9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ada2:	eba3 0901 	sub.w	r9, r3, r1
 800ada6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adaa:	1c7b      	adds	r3, r7, #1
 800adac:	444b      	add	r3, r9
 800adae:	106d      	asrs	r5, r5, #1
 800adb0:	429d      	cmp	r5, r3
 800adb2:	bf38      	it	cc
 800adb4:	461d      	movcc	r5, r3
 800adb6:	0553      	lsls	r3, r2, #21
 800adb8:	d527      	bpl.n	800ae0a <__ssputs_r+0x8e>
 800adba:	4629      	mov	r1, r5
 800adbc:	f7ff fdf6 	bl	800a9ac <_malloc_r>
 800adc0:	4606      	mov	r6, r0
 800adc2:	b360      	cbz	r0, 800ae1e <__ssputs_r+0xa2>
 800adc4:	6921      	ldr	r1, [r4, #16]
 800adc6:	464a      	mov	r2, r9
 800adc8:	f7ff ff78 	bl	800acbc <memcpy>
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800add2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800add6:	81a3      	strh	r3, [r4, #12]
 800add8:	6126      	str	r6, [r4, #16]
 800adda:	6165      	str	r5, [r4, #20]
 800addc:	444e      	add	r6, r9
 800adde:	eba5 0509 	sub.w	r5, r5, r9
 800ade2:	6026      	str	r6, [r4, #0]
 800ade4:	60a5      	str	r5, [r4, #8]
 800ade6:	463e      	mov	r6, r7
 800ade8:	42be      	cmp	r6, r7
 800adea:	d900      	bls.n	800adee <__ssputs_r+0x72>
 800adec:	463e      	mov	r6, r7
 800adee:	6820      	ldr	r0, [r4, #0]
 800adf0:	4632      	mov	r2, r6
 800adf2:	4641      	mov	r1, r8
 800adf4:	f000 faa8 	bl	800b348 <memmove>
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	1b9b      	subs	r3, r3, r6
 800adfc:	60a3      	str	r3, [r4, #8]
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	4433      	add	r3, r6
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	2000      	movs	r0, #0
 800ae06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	f7ff fe5a 	bl	800aac4 <_realloc_r>
 800ae10:	4606      	mov	r6, r0
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d1e0      	bne.n	800add8 <__ssputs_r+0x5c>
 800ae16:	6921      	ldr	r1, [r4, #16]
 800ae18:	4650      	mov	r0, sl
 800ae1a:	f7ff ff5d 	bl	800acd8 <_free_r>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	f8ca 3000 	str.w	r3, [sl]
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	e7e9      	b.n	800ae06 <__ssputs_r+0x8a>
	...

0800ae34 <_svfiprintf_r>:
 800ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	4698      	mov	r8, r3
 800ae3a:	898b      	ldrh	r3, [r1, #12]
 800ae3c:	061b      	lsls	r3, r3, #24
 800ae3e:	b09d      	sub	sp, #116	@ 0x74
 800ae40:	4607      	mov	r7, r0
 800ae42:	460d      	mov	r5, r1
 800ae44:	4614      	mov	r4, r2
 800ae46:	d510      	bpl.n	800ae6a <_svfiprintf_r+0x36>
 800ae48:	690b      	ldr	r3, [r1, #16]
 800ae4a:	b973      	cbnz	r3, 800ae6a <_svfiprintf_r+0x36>
 800ae4c:	2140      	movs	r1, #64	@ 0x40
 800ae4e:	f7ff fdad 	bl	800a9ac <_malloc_r>
 800ae52:	6028      	str	r0, [r5, #0]
 800ae54:	6128      	str	r0, [r5, #16]
 800ae56:	b930      	cbnz	r0, 800ae66 <_svfiprintf_r+0x32>
 800ae58:	230c      	movs	r3, #12
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	b01d      	add	sp, #116	@ 0x74
 800ae62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae66:	2340      	movs	r3, #64	@ 0x40
 800ae68:	616b      	str	r3, [r5, #20]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae6e:	2320      	movs	r3, #32
 800ae70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae78:	2330      	movs	r3, #48	@ 0x30
 800ae7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b018 <_svfiprintf_r+0x1e4>
 800ae7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae82:	f04f 0901 	mov.w	r9, #1
 800ae86:	4623      	mov	r3, r4
 800ae88:	469a      	mov	sl, r3
 800ae8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae8e:	b10a      	cbz	r2, 800ae94 <_svfiprintf_r+0x60>
 800ae90:	2a25      	cmp	r2, #37	@ 0x25
 800ae92:	d1f9      	bne.n	800ae88 <_svfiprintf_r+0x54>
 800ae94:	ebba 0b04 	subs.w	fp, sl, r4
 800ae98:	d00b      	beq.n	800aeb2 <_svfiprintf_r+0x7e>
 800ae9a:	465b      	mov	r3, fp
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	4638      	mov	r0, r7
 800aea2:	f7ff ff6b 	bl	800ad7c <__ssputs_r>
 800aea6:	3001      	adds	r0, #1
 800aea8:	f000 80a7 	beq.w	800affa <_svfiprintf_r+0x1c6>
 800aeac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aeae:	445a      	add	r2, fp
 800aeb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeb2:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 809f 	beq.w	800affa <_svfiprintf_r+0x1c6>
 800aebc:	2300      	movs	r3, #0
 800aebe:	f04f 32ff 	mov.w	r2, #4294967295
 800aec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aec6:	f10a 0a01 	add.w	sl, sl, #1
 800aeca:	9304      	str	r3, [sp, #16]
 800aecc:	9307      	str	r3, [sp, #28]
 800aece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aed2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aed4:	4654      	mov	r4, sl
 800aed6:	2205      	movs	r2, #5
 800aed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aedc:	484e      	ldr	r0, [pc, #312]	@ (800b018 <_svfiprintf_r+0x1e4>)
 800aede:	f7f5 f99f 	bl	8000220 <memchr>
 800aee2:	9a04      	ldr	r2, [sp, #16]
 800aee4:	b9d8      	cbnz	r0, 800af1e <_svfiprintf_r+0xea>
 800aee6:	06d0      	lsls	r0, r2, #27
 800aee8:	bf44      	itt	mi
 800aeea:	2320      	movmi	r3, #32
 800aeec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aef0:	0711      	lsls	r1, r2, #28
 800aef2:	bf44      	itt	mi
 800aef4:	232b      	movmi	r3, #43	@ 0x2b
 800aef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aefa:	f89a 3000 	ldrb.w	r3, [sl]
 800aefe:	2b2a      	cmp	r3, #42	@ 0x2a
 800af00:	d015      	beq.n	800af2e <_svfiprintf_r+0xfa>
 800af02:	9a07      	ldr	r2, [sp, #28]
 800af04:	4654      	mov	r4, sl
 800af06:	2000      	movs	r0, #0
 800af08:	f04f 0c0a 	mov.w	ip, #10
 800af0c:	4621      	mov	r1, r4
 800af0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af12:	3b30      	subs	r3, #48	@ 0x30
 800af14:	2b09      	cmp	r3, #9
 800af16:	d94b      	bls.n	800afb0 <_svfiprintf_r+0x17c>
 800af18:	b1b0      	cbz	r0, 800af48 <_svfiprintf_r+0x114>
 800af1a:	9207      	str	r2, [sp, #28]
 800af1c:	e014      	b.n	800af48 <_svfiprintf_r+0x114>
 800af1e:	eba0 0308 	sub.w	r3, r0, r8
 800af22:	fa09 f303 	lsl.w	r3, r9, r3
 800af26:	4313      	orrs	r3, r2
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	46a2      	mov	sl, r4
 800af2c:	e7d2      	b.n	800aed4 <_svfiprintf_r+0xa0>
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	1d19      	adds	r1, r3, #4
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	9103      	str	r1, [sp, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	bfbb      	ittet	lt
 800af3a:	425b      	neglt	r3, r3
 800af3c:	f042 0202 	orrlt.w	r2, r2, #2
 800af40:	9307      	strge	r3, [sp, #28]
 800af42:	9307      	strlt	r3, [sp, #28]
 800af44:	bfb8      	it	lt
 800af46:	9204      	strlt	r2, [sp, #16]
 800af48:	7823      	ldrb	r3, [r4, #0]
 800af4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af4c:	d10a      	bne.n	800af64 <_svfiprintf_r+0x130>
 800af4e:	7863      	ldrb	r3, [r4, #1]
 800af50:	2b2a      	cmp	r3, #42	@ 0x2a
 800af52:	d132      	bne.n	800afba <_svfiprintf_r+0x186>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	1d1a      	adds	r2, r3, #4
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	9203      	str	r2, [sp, #12]
 800af5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af60:	3402      	adds	r4, #2
 800af62:	9305      	str	r3, [sp, #20]
 800af64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b028 <_svfiprintf_r+0x1f4>
 800af68:	7821      	ldrb	r1, [r4, #0]
 800af6a:	2203      	movs	r2, #3
 800af6c:	4650      	mov	r0, sl
 800af6e:	f7f5 f957 	bl	8000220 <memchr>
 800af72:	b138      	cbz	r0, 800af84 <_svfiprintf_r+0x150>
 800af74:	9b04      	ldr	r3, [sp, #16]
 800af76:	eba0 000a 	sub.w	r0, r0, sl
 800af7a:	2240      	movs	r2, #64	@ 0x40
 800af7c:	4082      	lsls	r2, r0
 800af7e:	4313      	orrs	r3, r2
 800af80:	3401      	adds	r4, #1
 800af82:	9304      	str	r3, [sp, #16]
 800af84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af88:	4824      	ldr	r0, [pc, #144]	@ (800b01c <_svfiprintf_r+0x1e8>)
 800af8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af8e:	2206      	movs	r2, #6
 800af90:	f7f5 f946 	bl	8000220 <memchr>
 800af94:	2800      	cmp	r0, #0
 800af96:	d036      	beq.n	800b006 <_svfiprintf_r+0x1d2>
 800af98:	4b21      	ldr	r3, [pc, #132]	@ (800b020 <_svfiprintf_r+0x1ec>)
 800af9a:	bb1b      	cbnz	r3, 800afe4 <_svfiprintf_r+0x1b0>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	3307      	adds	r3, #7
 800afa0:	f023 0307 	bic.w	r3, r3, #7
 800afa4:	3308      	adds	r3, #8
 800afa6:	9303      	str	r3, [sp, #12]
 800afa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afaa:	4433      	add	r3, r6
 800afac:	9309      	str	r3, [sp, #36]	@ 0x24
 800afae:	e76a      	b.n	800ae86 <_svfiprintf_r+0x52>
 800afb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800afb4:	460c      	mov	r4, r1
 800afb6:	2001      	movs	r0, #1
 800afb8:	e7a8      	b.n	800af0c <_svfiprintf_r+0xd8>
 800afba:	2300      	movs	r3, #0
 800afbc:	3401      	adds	r4, #1
 800afbe:	9305      	str	r3, [sp, #20]
 800afc0:	4619      	mov	r1, r3
 800afc2:	f04f 0c0a 	mov.w	ip, #10
 800afc6:	4620      	mov	r0, r4
 800afc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afcc:	3a30      	subs	r2, #48	@ 0x30
 800afce:	2a09      	cmp	r2, #9
 800afd0:	d903      	bls.n	800afda <_svfiprintf_r+0x1a6>
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0c6      	beq.n	800af64 <_svfiprintf_r+0x130>
 800afd6:	9105      	str	r1, [sp, #20]
 800afd8:	e7c4      	b.n	800af64 <_svfiprintf_r+0x130>
 800afda:	fb0c 2101 	mla	r1, ip, r1, r2
 800afde:	4604      	mov	r4, r0
 800afe0:	2301      	movs	r3, #1
 800afe2:	e7f0      	b.n	800afc6 <_svfiprintf_r+0x192>
 800afe4:	ab03      	add	r3, sp, #12
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	462a      	mov	r2, r5
 800afea:	4b0e      	ldr	r3, [pc, #56]	@ (800b024 <_svfiprintf_r+0x1f0>)
 800afec:	a904      	add	r1, sp, #16
 800afee:	4638      	mov	r0, r7
 800aff0:	f3af 8000 	nop.w
 800aff4:	1c42      	adds	r2, r0, #1
 800aff6:	4606      	mov	r6, r0
 800aff8:	d1d6      	bne.n	800afa8 <_svfiprintf_r+0x174>
 800affa:	89ab      	ldrh	r3, [r5, #12]
 800affc:	065b      	lsls	r3, r3, #25
 800affe:	f53f af2d 	bmi.w	800ae5c <_svfiprintf_r+0x28>
 800b002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b004:	e72c      	b.n	800ae60 <_svfiprintf_r+0x2c>
 800b006:	ab03      	add	r3, sp, #12
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	462a      	mov	r2, r5
 800b00c:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <_svfiprintf_r+0x1f0>)
 800b00e:	a904      	add	r1, sp, #16
 800b010:	4638      	mov	r0, r7
 800b012:	f000 f879 	bl	800b108 <_printf_i>
 800b016:	e7ed      	b.n	800aff4 <_svfiprintf_r+0x1c0>
 800b018:	0800b5fc 	.word	0x0800b5fc
 800b01c:	0800b606 	.word	0x0800b606
 800b020:	00000000 	.word	0x00000000
 800b024:	0800ad7d 	.word	0x0800ad7d
 800b028:	0800b602 	.word	0x0800b602

0800b02c <_printf_common>:
 800b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	4616      	mov	r6, r2
 800b032:	4698      	mov	r8, r3
 800b034:	688a      	ldr	r2, [r1, #8]
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	bfb8      	it	lt
 800b040:	4613      	movlt	r3, r2
 800b042:	6033      	str	r3, [r6, #0]
 800b044:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b048:	4607      	mov	r7, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	b10a      	cbz	r2, 800b052 <_printf_common+0x26>
 800b04e:	3301      	adds	r3, #1
 800b050:	6033      	str	r3, [r6, #0]
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	0699      	lsls	r1, r3, #26
 800b056:	bf42      	ittt	mi
 800b058:	6833      	ldrmi	r3, [r6, #0]
 800b05a:	3302      	addmi	r3, #2
 800b05c:	6033      	strmi	r3, [r6, #0]
 800b05e:	6825      	ldr	r5, [r4, #0]
 800b060:	f015 0506 	ands.w	r5, r5, #6
 800b064:	d106      	bne.n	800b074 <_printf_common+0x48>
 800b066:	f104 0a19 	add.w	sl, r4, #25
 800b06a:	68e3      	ldr	r3, [r4, #12]
 800b06c:	6832      	ldr	r2, [r6, #0]
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	42ab      	cmp	r3, r5
 800b072:	dc26      	bgt.n	800b0c2 <_printf_common+0x96>
 800b074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b078:	6822      	ldr	r2, [r4, #0]
 800b07a:	3b00      	subs	r3, #0
 800b07c:	bf18      	it	ne
 800b07e:	2301      	movne	r3, #1
 800b080:	0692      	lsls	r2, r2, #26
 800b082:	d42b      	bmi.n	800b0dc <_printf_common+0xb0>
 800b084:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b088:	4641      	mov	r1, r8
 800b08a:	4638      	mov	r0, r7
 800b08c:	47c8      	blx	r9
 800b08e:	3001      	adds	r0, #1
 800b090:	d01e      	beq.n	800b0d0 <_printf_common+0xa4>
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	6922      	ldr	r2, [r4, #16]
 800b096:	f003 0306 	and.w	r3, r3, #6
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	bf02      	ittt	eq
 800b09e:	68e5      	ldreq	r5, [r4, #12]
 800b0a0:	6833      	ldreq	r3, [r6, #0]
 800b0a2:	1aed      	subeq	r5, r5, r3
 800b0a4:	68a3      	ldr	r3, [r4, #8]
 800b0a6:	bf0c      	ite	eq
 800b0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ac:	2500      	movne	r5, #0
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bfc4      	itt	gt
 800b0b2:	1a9b      	subgt	r3, r3, r2
 800b0b4:	18ed      	addgt	r5, r5, r3
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	341a      	adds	r4, #26
 800b0ba:	42b5      	cmp	r5, r6
 800b0bc:	d11a      	bne.n	800b0f4 <_printf_common+0xc8>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e008      	b.n	800b0d4 <_printf_common+0xa8>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4641      	mov	r1, r8
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	47c8      	blx	r9
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d103      	bne.n	800b0d8 <_printf_common+0xac>
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d8:	3501      	adds	r5, #1
 800b0da:	e7c6      	b.n	800b06a <_printf_common+0x3e>
 800b0dc:	18e1      	adds	r1, r4, r3
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	2030      	movs	r0, #48	@ 0x30
 800b0e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0e6:	4422      	add	r2, r4
 800b0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0f0:	3302      	adds	r3, #2
 800b0f2:	e7c7      	b.n	800b084 <_printf_common+0x58>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4641      	mov	r1, r8
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c8      	blx	r9
 800b0fe:	3001      	adds	r0, #1
 800b100:	d0e6      	beq.n	800b0d0 <_printf_common+0xa4>
 800b102:	3601      	adds	r6, #1
 800b104:	e7d9      	b.n	800b0ba <_printf_common+0x8e>
	...

0800b108 <_printf_i>:
 800b108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b10c:	7e0f      	ldrb	r7, [r1, #24]
 800b10e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b110:	2f78      	cmp	r7, #120	@ 0x78
 800b112:	4691      	mov	r9, r2
 800b114:	4680      	mov	r8, r0
 800b116:	460c      	mov	r4, r1
 800b118:	469a      	mov	sl, r3
 800b11a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b11e:	d807      	bhi.n	800b130 <_printf_i+0x28>
 800b120:	2f62      	cmp	r7, #98	@ 0x62
 800b122:	d80a      	bhi.n	800b13a <_printf_i+0x32>
 800b124:	2f00      	cmp	r7, #0
 800b126:	f000 80d2 	beq.w	800b2ce <_printf_i+0x1c6>
 800b12a:	2f58      	cmp	r7, #88	@ 0x58
 800b12c:	f000 80b9 	beq.w	800b2a2 <_printf_i+0x19a>
 800b130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b138:	e03a      	b.n	800b1b0 <_printf_i+0xa8>
 800b13a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b13e:	2b15      	cmp	r3, #21
 800b140:	d8f6      	bhi.n	800b130 <_printf_i+0x28>
 800b142:	a101      	add	r1, pc, #4	@ (adr r1, 800b148 <_printf_i+0x40>)
 800b144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b1b5 	.word	0x0800b1b5
 800b150:	0800b131 	.word	0x0800b131
 800b154:	0800b131 	.word	0x0800b131
 800b158:	0800b131 	.word	0x0800b131
 800b15c:	0800b131 	.word	0x0800b131
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b131 	.word	0x0800b131
 800b168:	0800b131 	.word	0x0800b131
 800b16c:	0800b131 	.word	0x0800b131
 800b170:	0800b131 	.word	0x0800b131
 800b174:	0800b2b5 	.word	0x0800b2b5
 800b178:	0800b1df 	.word	0x0800b1df
 800b17c:	0800b26f 	.word	0x0800b26f
 800b180:	0800b131 	.word	0x0800b131
 800b184:	0800b131 	.word	0x0800b131
 800b188:	0800b2d7 	.word	0x0800b2d7
 800b18c:	0800b131 	.word	0x0800b131
 800b190:	0800b1df 	.word	0x0800b1df
 800b194:	0800b131 	.word	0x0800b131
 800b198:	0800b131 	.word	0x0800b131
 800b19c:	0800b277 	.word	0x0800b277
 800b1a0:	6833      	ldr	r3, [r6, #0]
 800b1a2:	1d1a      	adds	r2, r3, #4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6032      	str	r2, [r6, #0]
 800b1a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e09d      	b.n	800b2f0 <_printf_i+0x1e8>
 800b1b4:	6833      	ldr	r3, [r6, #0]
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	1d19      	adds	r1, r3, #4
 800b1ba:	6031      	str	r1, [r6, #0]
 800b1bc:	0606      	lsls	r6, r0, #24
 800b1be:	d501      	bpl.n	800b1c4 <_printf_i+0xbc>
 800b1c0:	681d      	ldr	r5, [r3, #0]
 800b1c2:	e003      	b.n	800b1cc <_printf_i+0xc4>
 800b1c4:	0645      	lsls	r5, r0, #25
 800b1c6:	d5fb      	bpl.n	800b1c0 <_printf_i+0xb8>
 800b1c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1cc:	2d00      	cmp	r5, #0
 800b1ce:	da03      	bge.n	800b1d8 <_printf_i+0xd0>
 800b1d0:	232d      	movs	r3, #45	@ 0x2d
 800b1d2:	426d      	negs	r5, r5
 800b1d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1d8:	4859      	ldr	r0, [pc, #356]	@ (800b340 <_printf_i+0x238>)
 800b1da:	230a      	movs	r3, #10
 800b1dc:	e011      	b.n	800b202 <_printf_i+0xfa>
 800b1de:	6821      	ldr	r1, [r4, #0]
 800b1e0:	6833      	ldr	r3, [r6, #0]
 800b1e2:	0608      	lsls	r0, r1, #24
 800b1e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1e8:	d402      	bmi.n	800b1f0 <_printf_i+0xe8>
 800b1ea:	0649      	lsls	r1, r1, #25
 800b1ec:	bf48      	it	mi
 800b1ee:	b2ad      	uxthmi	r5, r5
 800b1f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1f2:	4853      	ldr	r0, [pc, #332]	@ (800b340 <_printf_i+0x238>)
 800b1f4:	6033      	str	r3, [r6, #0]
 800b1f6:	bf14      	ite	ne
 800b1f8:	230a      	movne	r3, #10
 800b1fa:	2308      	moveq	r3, #8
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b202:	6866      	ldr	r6, [r4, #4]
 800b204:	60a6      	str	r6, [r4, #8]
 800b206:	2e00      	cmp	r6, #0
 800b208:	bfa2      	ittt	ge
 800b20a:	6821      	ldrge	r1, [r4, #0]
 800b20c:	f021 0104 	bicge.w	r1, r1, #4
 800b210:	6021      	strge	r1, [r4, #0]
 800b212:	b90d      	cbnz	r5, 800b218 <_printf_i+0x110>
 800b214:	2e00      	cmp	r6, #0
 800b216:	d04b      	beq.n	800b2b0 <_printf_i+0x1a8>
 800b218:	4616      	mov	r6, r2
 800b21a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b21e:	fb03 5711 	mls	r7, r3, r1, r5
 800b222:	5dc7      	ldrb	r7, [r0, r7]
 800b224:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b228:	462f      	mov	r7, r5
 800b22a:	42bb      	cmp	r3, r7
 800b22c:	460d      	mov	r5, r1
 800b22e:	d9f4      	bls.n	800b21a <_printf_i+0x112>
 800b230:	2b08      	cmp	r3, #8
 800b232:	d10b      	bne.n	800b24c <_printf_i+0x144>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	07df      	lsls	r7, r3, #31
 800b238:	d508      	bpl.n	800b24c <_printf_i+0x144>
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	6861      	ldr	r1, [r4, #4]
 800b23e:	4299      	cmp	r1, r3
 800b240:	bfde      	ittt	le
 800b242:	2330      	movle	r3, #48	@ 0x30
 800b244:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b248:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b24c:	1b92      	subs	r2, r2, r6
 800b24e:	6122      	str	r2, [r4, #16]
 800b250:	f8cd a000 	str.w	sl, [sp]
 800b254:	464b      	mov	r3, r9
 800b256:	aa03      	add	r2, sp, #12
 800b258:	4621      	mov	r1, r4
 800b25a:	4640      	mov	r0, r8
 800b25c:	f7ff fee6 	bl	800b02c <_printf_common>
 800b260:	3001      	adds	r0, #1
 800b262:	d14a      	bne.n	800b2fa <_printf_i+0x1f2>
 800b264:	f04f 30ff 	mov.w	r0, #4294967295
 800b268:	b004      	add	sp, #16
 800b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	f043 0320 	orr.w	r3, r3, #32
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	4833      	ldr	r0, [pc, #204]	@ (800b344 <_printf_i+0x23c>)
 800b278:	2778      	movs	r7, #120	@ 0x78
 800b27a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	6831      	ldr	r1, [r6, #0]
 800b282:	061f      	lsls	r7, r3, #24
 800b284:	f851 5b04 	ldr.w	r5, [r1], #4
 800b288:	d402      	bmi.n	800b290 <_printf_i+0x188>
 800b28a:	065f      	lsls	r7, r3, #25
 800b28c:	bf48      	it	mi
 800b28e:	b2ad      	uxthmi	r5, r5
 800b290:	6031      	str	r1, [r6, #0]
 800b292:	07d9      	lsls	r1, r3, #31
 800b294:	bf44      	itt	mi
 800b296:	f043 0320 	orrmi.w	r3, r3, #32
 800b29a:	6023      	strmi	r3, [r4, #0]
 800b29c:	b11d      	cbz	r5, 800b2a6 <_printf_i+0x19e>
 800b29e:	2310      	movs	r3, #16
 800b2a0:	e7ac      	b.n	800b1fc <_printf_i+0xf4>
 800b2a2:	4827      	ldr	r0, [pc, #156]	@ (800b340 <_printf_i+0x238>)
 800b2a4:	e7e9      	b.n	800b27a <_printf_i+0x172>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	f023 0320 	bic.w	r3, r3, #32
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	e7f6      	b.n	800b29e <_printf_i+0x196>
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	e7bd      	b.n	800b230 <_printf_i+0x128>
 800b2b4:	6833      	ldr	r3, [r6, #0]
 800b2b6:	6825      	ldr	r5, [r4, #0]
 800b2b8:	6961      	ldr	r1, [r4, #20]
 800b2ba:	1d18      	adds	r0, r3, #4
 800b2bc:	6030      	str	r0, [r6, #0]
 800b2be:	062e      	lsls	r6, r5, #24
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	d501      	bpl.n	800b2c8 <_printf_i+0x1c0>
 800b2c4:	6019      	str	r1, [r3, #0]
 800b2c6:	e002      	b.n	800b2ce <_printf_i+0x1c6>
 800b2c8:	0668      	lsls	r0, r5, #25
 800b2ca:	d5fb      	bpl.n	800b2c4 <_printf_i+0x1bc>
 800b2cc:	8019      	strh	r1, [r3, #0]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6123      	str	r3, [r4, #16]
 800b2d2:	4616      	mov	r6, r2
 800b2d4:	e7bc      	b.n	800b250 <_printf_i+0x148>
 800b2d6:	6833      	ldr	r3, [r6, #0]
 800b2d8:	1d1a      	adds	r2, r3, #4
 800b2da:	6032      	str	r2, [r6, #0]
 800b2dc:	681e      	ldr	r6, [r3, #0]
 800b2de:	6862      	ldr	r2, [r4, #4]
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7f4 ff9c 	bl	8000220 <memchr>
 800b2e8:	b108      	cbz	r0, 800b2ee <_printf_i+0x1e6>
 800b2ea:	1b80      	subs	r0, r0, r6
 800b2ec:	6060      	str	r0, [r4, #4]
 800b2ee:	6863      	ldr	r3, [r4, #4]
 800b2f0:	6123      	str	r3, [r4, #16]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2f8:	e7aa      	b.n	800b250 <_printf_i+0x148>
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	4632      	mov	r2, r6
 800b2fe:	4649      	mov	r1, r9
 800b300:	4640      	mov	r0, r8
 800b302:	47d0      	blx	sl
 800b304:	3001      	adds	r0, #1
 800b306:	d0ad      	beq.n	800b264 <_printf_i+0x15c>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	079b      	lsls	r3, r3, #30
 800b30c:	d413      	bmi.n	800b336 <_printf_i+0x22e>
 800b30e:	68e0      	ldr	r0, [r4, #12]
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	4298      	cmp	r0, r3
 800b314:	bfb8      	it	lt
 800b316:	4618      	movlt	r0, r3
 800b318:	e7a6      	b.n	800b268 <_printf_i+0x160>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4632      	mov	r2, r6
 800b31e:	4649      	mov	r1, r9
 800b320:	4640      	mov	r0, r8
 800b322:	47d0      	blx	sl
 800b324:	3001      	adds	r0, #1
 800b326:	d09d      	beq.n	800b264 <_printf_i+0x15c>
 800b328:	3501      	adds	r5, #1
 800b32a:	68e3      	ldr	r3, [r4, #12]
 800b32c:	9903      	ldr	r1, [sp, #12]
 800b32e:	1a5b      	subs	r3, r3, r1
 800b330:	42ab      	cmp	r3, r5
 800b332:	dcf2      	bgt.n	800b31a <_printf_i+0x212>
 800b334:	e7eb      	b.n	800b30e <_printf_i+0x206>
 800b336:	2500      	movs	r5, #0
 800b338:	f104 0619 	add.w	r6, r4, #25
 800b33c:	e7f5      	b.n	800b32a <_printf_i+0x222>
 800b33e:	bf00      	nop
 800b340:	0800b60d 	.word	0x0800b60d
 800b344:	0800b61e 	.word	0x0800b61e

0800b348 <memmove>:
 800b348:	4288      	cmp	r0, r1
 800b34a:	b510      	push	{r4, lr}
 800b34c:	eb01 0402 	add.w	r4, r1, r2
 800b350:	d902      	bls.n	800b358 <memmove+0x10>
 800b352:	4284      	cmp	r4, r0
 800b354:	4623      	mov	r3, r4
 800b356:	d807      	bhi.n	800b368 <memmove+0x20>
 800b358:	1e43      	subs	r3, r0, #1
 800b35a:	42a1      	cmp	r1, r4
 800b35c:	d008      	beq.n	800b370 <memmove+0x28>
 800b35e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b362:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b366:	e7f8      	b.n	800b35a <memmove+0x12>
 800b368:	4402      	add	r2, r0
 800b36a:	4601      	mov	r1, r0
 800b36c:	428a      	cmp	r2, r1
 800b36e:	d100      	bne.n	800b372 <memmove+0x2a>
 800b370:	bd10      	pop	{r4, pc}
 800b372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b37a:	e7f7      	b.n	800b36c <memmove+0x24>

0800b37c <_init>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	bf00      	nop
 800b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b382:	bc08      	pop	{r3}
 800b384:	469e      	mov	lr, r3
 800b386:	4770      	bx	lr

0800b388 <_fini>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	bf00      	nop
 800b38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38e:	bc08      	pop	{r3}
 800b390:	469e      	mov	lr, r3
 800b392:	4770      	bx	lr
