
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010304  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080104d4  080104d4  000114d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010690  08010690  00012328  2**0
                  CONTENTS
  4 .ARM          00000008  08010690  08010690  00011690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010698  08010698  00012328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010698  08010698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801069c  0801069c  0001169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000328  20000000  080106a0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051ec  20000328  080109c8  00012328  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005514  080109c8  00012514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e1b  00000000  00000000  00012358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000653c  00000000  00000000  00038173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  0003e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001655  00000000  00000000  00040420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029473  00000000  00000000  00041a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000283b9  00000000  00000000  0006aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee2b5  00000000  00000000  000932a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181556  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f1c  00000000  00000000  0018159c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001894b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000328 	.word	0x20000328
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080104bc 	.word	0x080104bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000032c 	.word	0x2000032c
 800020c:	080104bc 	.word	0x080104bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e2e:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e30:	4a22      	ldr	r2, [pc, #136]	@ (8000ebc <MX_ADC1_Init+0xa0>)
 8000e32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e5e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7e:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e80:	f001 fe8a 	bl	8002b98 <HAL_ADC_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000e8a:	f001 f983 	bl	8002194 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e96:	2307      	movs	r3, #7
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000ea0:	f001 ffe2 	bl	8002e68 <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eaa:	f001 f973 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000344 	.word	0x20000344
 8000ebc:	40012000 	.word	0x40012000

08000ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a2f      	ldr	r2, [pc, #188]	@ (8000f9c <HAL_ADC_MspInit+0xdc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d158      	bne.n	8000f94 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a26      	ldr	r2, [pc, #152]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481d      	ldr	r0, [pc, #116]	@ (8000fa4 <HAL_ADC_MspInit+0xe4>)
 8000f2e:	f003 fd77 	bl	8004a20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_ADC_MspInit+0xec>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f78:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f7a:	f003 f9e1 	bl	8004340 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000f84:	f001 f906 	bl	8002194 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f8e:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	2000038c 	.word	0x2000038c
 8000fac:	40026410 	.word	0x40026410

08000fb0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fb8:	4a22      	ldr	r2, [pc, #136]	@ (8001044 <MX_CAN1_Init+0x94>)
 8000fba:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fd0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000fd4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fd8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fdc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001002:	480f      	ldr	r0, [pc, #60]	@ (8001040 <MX_CAN1_Init+0x90>)
 8001004:	f002 f9e0 	bl	80033c8 <HAL_CAN_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800100e:	f001 f8c1 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;                      // Use Filter Bank 0
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode (allows flexible ID matching)
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use 32-bit filtering
 800101a:	2301      	movs	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = (0x000 << 5);         // Base ID (ignored due to mask)
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = (0x000 << 5);     // Mask 0x000 means accept all messages
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign messages to FIFO 1
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	623b      	str	r3, [r7, #32]
//  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;     // Route accepted messages to FIFO1
//  filterConfig.FilterActivation     = ENABLE;
//  filterConfig.SlaveStartFilterBank = 14;               // For CAN1 if CAN2 is used (safe default)


  HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <MX_CAN1_Init+0x90>)
 8001034:	f002 fac4 	bl	80035c0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200003ec 	.word	0x200003ec
 8001044:	40006400 	.word	0x40006400

08001048 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2a      	ldr	r2, [pc, #168]	@ (8001110 <HAL_CAN_MspInit+0xc8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d14d      	bne.n	8001106 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001074:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010b4:	2309      	movs	r3, #9
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4816      	ldr	r0, [pc, #88]	@ (8001118 <HAL_CAN_MspInit+0xd0>)
 80010c0:	f003 fcae 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010d6:	2309      	movs	r3, #9
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <HAL_CAN_MspInit+0xd0>)
 80010e2:	f003 fc9d 	bl	8004a20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2105      	movs	r1, #5
 80010ea:	2014      	movs	r0, #20
 80010ec:	f003 f8fe 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010f0:	2014      	movs	r0, #20
 80010f2:	f003 f917 	bl	8004324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	2015      	movs	r0, #21
 80010fc:	f003 f8f6 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001100:	2015      	movs	r0, #21
 8001102:	f003 f90f 	bl	8004324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40006400 	.word	0x40006400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_DMA_Init+0x3c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <MX_DMA_Init+0x3c>)
 800112c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_DMA_Init+0x3c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2105      	movs	r1, #5
 8001142:	2038      	movs	r0, #56	@ 0x38
 8001144:	f003 f8d2 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001148:	2038      	movs	r0, #56	@ 0x38
 800114a:	f003 f8eb 	bl	8004324 <HAL_NVIC_EnableIRQ>

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <vApplicationGetIdleTaskMemory+0x2c>)
 800116c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	4a06      	ldr	r2, [pc, #24]	@ (800118c <vApplicationGetIdleTaskMemory+0x30>)
 8001172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200004b0 	.word	0x200004b0
 800118c:	20000550 	.word	0x20000550

08001190 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b09a      	sub	sp, #104	@ 0x68
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	telemetry_data.tRpm = 0;
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 800119c:	4b43      	ldr	r3, [pc, #268]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 80011a2:	4b42      	ldr	r3, [pc, #264]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80011a8:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80011ae:	4b3f      	ldr	r3, [pc, #252]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80011b4:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80011ba:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
	gFfbSignal = 0;
 80011c6:	4b3a      	ldr	r3, [pc, #232]	@ (80012b0 <MX_FREERTOS_Init+0x120>)
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]

	HIDReport.steering = 0;        // Steering data (0-255)
 80011ce:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = 0;        // Throttle data (0-255)
 80011d4:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = 0;           // Brake data (0-255)
 80011da:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011dc:	2200      	movs	r2, #0
 80011de:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 80011e0:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 80011e6:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 80011ec:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	725a      	strb	r2, [r3, #9]
	memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 80011f8:	2228      	movs	r2, #40	@ 0x28
 80011fa:	2100      	movs	r1, #0
 80011fc:	482b      	ldr	r0, [pc, #172]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011fe:	f00e fd63 	bl	800fcc8 <memset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 8001202:	2300      	movs	r3, #0
 8001204:	663b      	str	r3, [r7, #96]	@ 0x60
 8001206:	2300      	movs	r3, #0
 8001208:	667b      	str	r3, [r7, #100]	@ 0x64
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 800120a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800120e:	2101      	movs	r1, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f00c f8e0 	bl	800d3d6 <osSemaphoreCreate>
 8001216:	4603      	mov	r3, r0
 8001218:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <MX_FREERTOS_Init+0x128>)
 800121a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartMutex */
  osSemaphoreDef(uartMutex);
 800121c:	2300      	movs	r3, #0
 800121e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uartMutexHandle = osSemaphoreCreate(osSemaphore(uartMutex), 1);
 8001224:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001228:	2101      	movs	r1, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f00c f8d3 	bl	800d3d6 <osSemaphoreCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a22      	ldr	r2, [pc, #136]	@ (80012bc <MX_FREERTOS_Init+0x12c>)
 8001234:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001236:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <MX_FREERTOS_Init+0x130>)
 8001238:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800123c:	461d      	mov	r5, r3
 800123e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001242:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800124a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00c f860 	bl	800d316 <osThreadCreate>
 8001256:	4603      	mov	r3, r0
 8001258:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <MX_FREERTOS_Init+0x134>)
 800125a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlLoopTask */
  osThreadDef(ControlLoopTask, StartControlLoop, osPriorityHigh, 0, 512);
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <MX_FREERTOS_Init+0x138>)
 800125e:	f107 0420 	add.w	r4, r7, #32
 8001262:	461d      	mov	r5, r3
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLoopTaskHandle = osThreadCreate(osThread(ControlLoopTask), NULL);
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f00c f84d 	bl	800d316 <osThreadCreate>
 800127c:	4603      	mov	r3, r0
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_FREERTOS_Init+0x13c>)
 8001280:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommLoopTask */
  osThreadDef(CommLoopTask, StartCommLoopTask, osPriorityNormal, 0, 512);
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_FREERTOS_Init+0x140>)
 8001284:	1d3c      	adds	r4, r7, #4
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommLoopTaskHandle = osThreadCreate(osThread(CommLoopTask), NULL);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00c f83c 	bl	800d316 <osThreadCreate>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <MX_FREERTOS_Init+0x144>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012a4:	bf00      	nop
 80012a6:	3768      	adds	r7, #104	@ 0x68
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bdb0      	pop	{r4, r5, r7, pc}
 80012ac:	20000414 	.word	0x20000414
 80012b0:	20000490 	.word	0x20000490
 80012b4:	2000043c 	.word	0x2000043c
 80012b8:	200004a8 	.word	0x200004a8
 80012bc:	200004ac 	.word	0x200004ac
 80012c0:	080104e0 	.word	0x080104e0
 80012c4:	2000049c 	.word	0x2000049c
 80012c8:	0801050c 	.word	0x0801050c
 80012cc:	200004a0 	.word	0x200004a0
 80012d0:	08010538 	.word	0x08010538
 80012d4:	200004a4 	.word	0x200004a4

080012d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <StartDefaultTask+0x8>

080012e4 <StartControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	@ 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlLoop */
  /* Infinite loop */
	Start_ADC_DMA();
 80012ec:	f000 fd22 	bl	8001d34 <Start_ADC_DMA>
  for(;;)
  {
	  float total_force = 0.0;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
	  const float Kp = 1.0f;
 80012f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012fa:	633b      	str	r3, [r7, #48]	@ 0x30

	  for (;;) {
		  // Step 1: Retrieve current force feedback signal (e.g., from game data).
		  float force_feedback_signal = gFfbSignal;
 80012fc:	4b55      	ldr	r3, [pc, #340]	@ (8001454 <StartControlLoop+0x170>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  read_hall_sensor();
 8001302:	f000 fcf9 	bl	8001cf8 <read_hall_sensor>
		  // Step 2: Calculate individual forces based on physics:
		  float inertia_force = calculate_inertia(force_feedback_signal, angular_velocity);
 8001306:	4b54      	ldr	r3, [pc, #336]	@ (8001458 <StartControlLoop+0x174>)
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	eef0 0a67 	vmov.f32	s1, s15
 8001310:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001314:	f000 fa22 	bl	800175c <calculate_inertia>
 8001318:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		  float damping_force = calculate_damping(angular_velocity);
 800131c:	4b4e      	ldr	r3, [pc, #312]	@ (8001458 <StartControlLoop+0x174>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f000 fa49 	bl	80017bc <calculate_damping>
 800132a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		  float friction_force = calculate_friction(angular_velocity);
 800132e:	4b4a      	ldr	r3, [pc, #296]	@ (8001458 <StartControlLoop+0x174>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	f000 fa58 	bl	80017ec <calculate_friction>
 800133c:	ed87 0a08 	vstr	s0, [r7, #32]
		  float lock_force = calculate_lock(wheel_angle);
 8001340:	4b46      	ldr	r3, [pc, #280]	@ (800145c <StartControlLoop+0x178>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	f000 fa79 	bl	8001840 <calculate_lock>
 800134e:	ed87 0a07 	vstr	s0, [r7, #28]

		  // Step 3: Sum all forces and scale to PWM range:
		  total_force = force_feedback_signal + inertia_force + damping_force + friction_force + lock_force;
 8001352:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001356:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001366:	edd7 7a08 	vldr	s15, [r7, #32]
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001376:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  // Strength gain
		  total_force *= gStrength;
 800137a:	4b39      	ldr	r3, [pc, #228]	@ (8001460 <StartControlLoop+0x17c>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001388:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  total_force = constrain(total_force, -1.0, 1.0);
 800138c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001390:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8001394:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001398:	f000 f9b6 	bl	8001708 <constrain>
 800139c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		  // Deadband
		  const float FORCE_DEADBAND_THRESHOLD = 0.05f; // Adjust as needed
 80013a0:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <StartControlLoop+0x180>)
 80013a2:	61bb      	str	r3, [r7, #24]
		  const float ANGLE_DEADBAND_THRESHOLD = 50.0f; // Adjust as needed
 80013a4:	4b30      	ldr	r3, [pc, #192]	@ (8001468 <StartControlLoop+0x184>)
 80013a6:	617b      	str	r3, [r7, #20]
		  float error = wheel_angle;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <StartControlLoop+0x178>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
		  if (fabsf(error) < ANGLE_DEADBAND_THRESHOLD)  {
 80013ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b2:	eef0 7ae7 	vabs.f32	s15, s15
 80013b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dd03      	ble.n	80013cc <StartControlLoop+0xe8>
			  total_force = 0.0f;
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80013ca:	e017      	b.n	80013fc <StartControlLoop+0x118>
		  } else { // TEST CODE: gives increasing feedback farther away from center
			  total_force = -Kp * (error / WHEEL_MAX_ANGLE);
 80013cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013d0:	eeb1 7a67 	vneg.f32	s14, s15
 80013d4:	edd7 6a04 	vldr	s13, [r7, #16]
 80013d8:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800146c <StartControlLoop+0x188>
 80013dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			  total_force = constrain(total_force, -1.0f, 1.0f);
 80013e8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80013ec:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80013f0:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80013f4:	f000 f988 	bl	8001708 <constrain>
 80013f8:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		  }

		  // Step 4: Map total_force to PWM and determine direction
		  float pwm_output = scale_to_pwm(total_force);
 80013fc:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001400:	f000 fa64 	bl	80018cc <scale_to_pwm>
 8001404:	ed87 0a03 	vstr	s0, [r7, #12]
		  // 0 is negative direction; 1 is positive direction
		  uint8_t motor_direction = (total_force >= 0) ? 1 : 0;
 8001408:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800140c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	bfac      	ite	ge
 8001416:	2301      	movge	r3, #1
 8001418:	2300      	movlt	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	72fb      	strb	r3, [r7, #11]

		  // Debug
		  gDir = motor_direction;
 800141e:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <StartControlLoop+0x18c>)
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	7013      	strb	r3, [r2, #0]
		  gTotalforce = total_force;
 8001424:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <StartControlLoop+0x190>)
 8001426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001428:	6013      	str	r3, [r2, #0]
		  gPWMConst = pwm_output;
 800142a:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <StartControlLoop+0x194>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6013      	str	r3, [r2, #0]

		  // Step 5: Send PWM signal to H-bridge for motor control:
		  //set_motor_direction(motor_direction);
//		  set_motor_pwm(pwm_output, motor_direction);
		  set_motor_pwm(gPWMConstDebug, gDirDebug); //DEBUG MOTOR
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <StartControlLoop+0x198>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <StartControlLoop+0x19c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	eeb0 0a67 	vmov.f32	s0, s15
 8001440:	f000 fbda 	bl	8001bf8 <set_motor_pwm>

		  // Step 6: Update wheel position and velocity for next loop:
		  update_wheel_position_and_velocity(&wheel_angle, &angular_velocity);
 8001444:	4904      	ldr	r1, [pc, #16]	@ (8001458 <StartControlLoop+0x174>)
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <StartControlLoop+0x178>)
 8001448:	f000 fb2e 	bl	8001aa8 <update_wheel_position_and_velocity>

		  // Run this task periodically (every 10ms):
		  osDelay(5);
 800144c:	2005      	movs	r0, #5
 800144e:	f00b ffae 	bl	800d3ae <osDelay>
	  for (;;) {
 8001452:	e753      	b.n	80012fc <StartControlLoop+0x18>
 8001454:	20000490 	.word	0x20000490
 8001458:	20000470 	.word	0x20000470
 800145c:	2000046c 	.word	0x2000046c
 8001460:	20000004 	.word	0x20000004
 8001464:	3d4ccccd 	.word	0x3d4ccccd
 8001468:	42480000 	.word	0x42480000
 800146c:	43e10000 	.word	0x43e10000
 8001470:	2000046a 	.word	0x2000046a
 8001474:	20000464 	.word	0x20000464
 8001478:	2000045c 	.word	0x2000045c
 800147c:	20000460 	.word	0x20000460
 8001480:	20000000 	.word	0x20000000

08001484 <StartCommLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommLoopTask */
void StartCommLoopTask(void const * argument)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommLoopTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <StartCommLoopTask+0x2c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	210a      	movs	r1, #10
 8001492:	4618      	mov	r0, r3
 8001494:	f00b ffd2 	bl	800d43c <osSemaphoreWait>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <StartCommLoopTask+0x1e>
		  runCAN();
 800149e:	f000 f877 	bl	8001590 <runCAN>
	  }

	  runReport();
 80014a2:	f000 f827 	bl	80014f4 <runReport>
    osDelay(10);
 80014a6:	200a      	movs	r0, #10
 80014a8:	f00b ff81 	bl	800d3ae <osDelay>
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 80014ac:	e7ee      	b.n	800148c <StartCommLoopTask+0x8>
 80014ae:	bf00      	nop
 80014b0:	200004a8 	.word	0x200004a8

080014b4 <DWT_Init>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Initialize DWT for cycle counting
void DWT_Init(void) {
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <DWT_Init+0x38>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <DWT_Init+0x38>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <DWT_Init+0x38>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ce:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <DWT_Init+0x3c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <DWT_Init+0x3c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <DWT_Init+0x3c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000edf0 	.word	0xe000edf0
 80014f0:	e0001000 	.word	0xe0001000

080014f4 <runReport>:
    while ((DWT->CYCCNT - startTick) < delayTicks) {
        // Wait until the required delay has passed
    }
}

void runReport() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	memset(&HIDReport, 0, sizeof(HIDReport_t));
 80014fa:	220a      	movs	r2, #10
 80014fc:	2100      	movs	r1, #0
 80014fe:	4820      	ldr	r0, [pc, #128]	@ (8001580 <runReport+0x8c>)
 8001500:	f00e fbe2 	bl	800fcc8 <memset>

	uint16_t max_clutch = pedal_data.encoder_3;
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <runReport+0x90>)
 8001506:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800150a:	81fb      	strh	r3, [r7, #14]

	if (user_input_data.hall_analog_1 > max_clutch) {
 800150c:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <runReport+0x94>)
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	461a      	mov	r2, r3
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	4293      	cmp	r3, r2
 8001516:	d202      	bcs.n	800151e <runReport+0x2a>
		max_clutch = user_input_data.hall_analog_1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <runReport+0x94>)
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	81fb      	strh	r3, [r7, #14]
	}
	if (user_input_data.hall_analog_1 > max_clutch) {
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <runReport+0x94>)
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	461a      	mov	r2, r3
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	4293      	cmp	r3, r2
 8001528:	d202      	bcs.n	8001530 <runReport+0x3c>
		max_clutch = user_input_data.hall_analog_1;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <runReport+0x94>)
 800152c:	791b      	ldrb	r3, [r3, #4]
 800152e:	81fb      	strh	r3, [r7, #14]
	}

	HIDReport.steering = gSteering;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <runReport+0x98>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153a:	edc7 7a01 	vstr	s15, [r7, #4]
 800153e:	793b      	ldrb	r3, [r7, #4]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <runReport+0x8c>)
 8001544:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = pedal_data.encoder_1;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <runReport+0x90>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <runReport+0x8c>)
 8001550:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = pedal_data.encoder_2;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <runReport+0x90>)
 8001554:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <runReport+0x8c>)
 800155c:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = max_clutch;
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <runReport+0x8c>)
 8001564:	70da      	strb	r2, [r3, #3]

	HIDReport.buttons = user_input_data.buttons;
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <runReport+0x94>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <runReport+0x8c>)
 800156c:	6053      	str	r3, [r2, #4]

//	HIDReport.rz = (uint8_t) (user_input_data.encoder_1 & 0xFF);
//	HIDReport.slider = (uint8_t) (user_input_data.encoder_2 & 0xFF);

	USBD_CUSTOM_HID_SendCustomReport((uint8_t *)&HIDReport, sizeof(HIDReport));
 800156e:	210a      	movs	r1, #10
 8001570:	4803      	ldr	r0, [pc, #12]	@ (8001580 <runReport+0x8c>)
 8001572:	f008 ff51 	bl	800a418 <USBD_CUSTOM_HID_SendCustomReport>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000043c 	.word	0x2000043c
 8001584:	20000450 	.word	0x20000450
 8001588:	20000448 	.word	0x20000448
 800158c:	20000478 	.word	0x20000478

08001590 <runCAN>:

void runCAN() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
    static uint8_t messageIndex = 0;
    uint32_t currentTime = HAL_GetTick();
 8001596:	f001 facf 	bl	8002b38 <HAL_GetTick>
 800159a:	6078      	str	r0, [r7, #4]

    if (currentTime - lastSendTime >= 2) {  // Reduce cycle time to avoid backlog
 800159c:	4b3e      	ldr	r3, [pc, #248]	@ (8001698 <runCAN+0x108>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d96d      	bls.n	8001684 <runCAN+0xf4>
        switch (messageIndex) {
 80015a8:	4b3c      	ldr	r3, [pc, #240]	@ (800169c <runCAN+0x10c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d859      	bhi.n	8001664 <runCAN+0xd4>
 80015b0:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <runCAN+0x28>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015f5 	.word	0x080015f5
 80015c0:	08001621 	.word	0x08001621
 80015c4:	0800164d 	.word	0x0800164d
            case 0:
                sendCANMessage(0x100, telemetry_data.tRpm);
 80015c8:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <runCAN+0x110>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015d2:	f000 f869 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x101, telemetry_data.tGear);
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <runCAN+0x110>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4619      	mov	r1, r3
 80015dc:	f240 1001 	movw	r0, #257	@ 0x101
 80015e0:	f000 f862 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x102, telemetry_data.tSpeedKmh);
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <runCAN+0x110>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 7081 	mov.w	r0, #258	@ 0x102
 80015ee:	f000 f85b 	bl	80016a8 <sendCANMessage>
                break;
 80015f2:	e037      	b.n	8001664 <runCAN+0xd4>
            case 1:
                sendCANMessage(0x103, telemetry_data.tHasDRS);
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <runCAN+0x110>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f240 1003 	movw	r0, #259	@ 0x103
 80015fe:	f000 f853 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x104, telemetry_data.tDrs);
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <runCAN+0x110>)
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4619      	mov	r1, r3
 8001608:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800160c:	f000 f84c 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x105, telemetry_data.tPitLim);
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <runCAN+0x110>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4619      	mov	r1, r3
 8001616:	f240 1005 	movw	r0, #261	@ 0x105
 800161a:	f000 f845 	bl	80016a8 <sendCANMessage>
                break;
 800161e:	e021      	b.n	8001664 <runCAN+0xd4>
            case 2:
                sendCANMessage(0x106, telemetry_data.tFuel);
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <runCAN+0x110>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 7083 	mov.w	r0, #262	@ 0x106
 800162a:	f000 f83d 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x107, telemetry_data.tBrakeBias);
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <runCAN+0x110>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4619      	mov	r1, r3
 8001634:	f240 1007 	movw	r0, #263	@ 0x107
 8001638:	f000 f836 	bl	80016a8 <sendCANMessage>
                sendCANMessage(0x108, telemetry_data.tMaxRpm);
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <runCAN+0x110>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8001646:	f000 f82f 	bl	80016a8 <sendCANMessage>
                break;
 800164a:	e00b      	b.n	8001664 <runCAN+0xd4>
            case 3:
                sendCANMessage(0x109, telemetry_data.tForceFB);
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <runCAN+0x110>)
 800164e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001656:	ee17 1a90 	vmov	r1, s15
 800165a:	f240 1009 	movw	r0, #265	@ 0x109
 800165e:	f000 f823 	bl	80016a8 <sendCANMessage>
                break;
 8001662:	bf00      	nop
        }

        messageIndex = (messageIndex + 1) % 4;  // Cycle through cases
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <runCAN+0x10c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	425a      	negs	r2, r3
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	bf58      	it	pl
 8001676:	4253      	negpl	r3, r2
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <runCAN+0x10c>)
 800167c:	701a      	strb	r2, [r3, #0]
        lastSendTime = currentTime;  // Update time
 800167e:	4a06      	ldr	r2, [pc, #24]	@ (8001698 <runCAN+0x108>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
    }

    osSemaphoreRelease(spiSendMutexHandle);
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <runCAN+0x114>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f00b ff25 	bl	800d4d8 <osSemaphoreRelease>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000488 	.word	0x20000488
 800169c:	20000750 	.word	0x20000750
 80016a0:	20000414 	.word	0x20000414
 80016a4:	200004a8 	.word	0x200004a8

080016a8 <sendCANMessage>:

void sendCANMessage(uint16_t canID, int32_t value) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[4];  // 4-byte buffer
    uint32_t TxMailbox;

    // Configure the CAN header
    TxHeader.StdId = canID;  // Set the ID
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;  // Standard 11-bit ID
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;  // Data frame, not remote request
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = sizeof(value);  // Data Length = 4 bytes
 80016c0:	2304      	movs	r3, #4
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy integer value into TxData buffer (ensure correct byte order)
    memcpy(TxData, &value, sizeof(value));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	613b      	str	r3, [r7, #16]

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	f107 0210 	add.w	r2, r7, #16
 80016d0:	f107 0114 	add.w	r1, r7, #20
 80016d4:	480b      	ldr	r0, [pc, #44]	@ (8001704 <sendCANMessage+0x5c>)
 80016d6:	f002 f8e0 	bl	800389a <HAL_CAN_AddTxMessage>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00d      	beq.n	80016fc <sendCANMessage+0x54>
    	 // Optionally log the state of CAN error counters
		uint32_t error = HAL_CAN_GetError(&hcan1);
 80016e0:	4808      	ldr	r0, [pc, #32]	@ (8001704 <sendCANMessage+0x5c>)
 80016e2:	f002 fd3f 	bl	8004164 <HAL_CAN_GetError>
 80016e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_Stop(&hcan1);  // Stop CAN
 80016e8:	4806      	ldr	r0, [pc, #24]	@ (8001704 <sendCANMessage+0x5c>)
 80016ea:	f002 f88d 	bl	8003808 <HAL_CAN_Stop>
		HAL_CAN_Start(&hcan1); // Restart CAN
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <sendCANMessage+0x5c>)
 80016f0:	f002 f846 	bl	8003780 <HAL_CAN_Start>

		// Optional: Clear error flags
		__HAL_CAN_CLEAR_FLAG(&hcan1, CAN_FLAG_ERRI);
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <sendCANMessage+0x5c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2204      	movs	r2, #4
 80016fa:	605a      	str	r2, [r3, #4]
    }
}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	@ 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200003ec 	.word	0x200003ec

08001708 <constrain>:

    // Calculate the oscillation value using a sine wave
    return sin((2 * M_PI * elapsed_time) / period);
}

float constrain(float x, float lower, float upper) {
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001712:	edc7 0a02 	vstr	s1, [r7, #8]
 8001716:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < lower) return lower;
 800171a:	ed97 7a03 	vldr	s14, [r7, #12]
 800171e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	d501      	bpl.n	8001730 <constrain+0x28>
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	e00b      	b.n	8001748 <constrain+0x40>
    if (x > upper) return upper;
 8001730:	ed97 7a03 	vldr	s14, [r7, #12]
 8001734:	edd7 7a01 	vldr	s15, [r7, #4]
 8001738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	dd01      	ble.n	8001746 <constrain+0x3e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	e000      	b.n	8001748 <constrain+0x40>
    return x;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <calculate_inertia>:

float calculate_inertia(float force_feedback, float angular_velocity) {
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	ed87 0a01 	vstr	s0, [r7, #4]
 8001766:	edc7 0a00 	vstr	s1, [r7]
    static float previous_output = 0;
    float inertia_coefficient = 0.1; // Fine-tune for feel
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <calculate_inertia+0x58>)
 800176c:	60fb      	str	r3, [r7, #12]
    float inertia_force = inertia_coefficient * previous_output + (1 - inertia_coefficient) * force_feedback;
 800176e:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <calculate_inertia+0x5c>)
 8001770:	ed93 7a00 	vldr	s14, [r3]
 8001774:	edd7 7a03 	vldr	s15, [r7, #12]
 8001778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001780:	edd7 7a03 	vldr	s15, [r7, #12]
 8001784:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001788:	edd7 7a01 	vldr	s15, [r7, #4]
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_output = inertia_force;
 8001798:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <calculate_inertia+0x5c>)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	6013      	str	r3, [r2, #0]
    return inertia_force;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	ee07 3a90 	vmov	s15, r3
}
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	3dcccccd 	.word	0x3dcccccd
 80017b8:	20000754 	.word	0x20000754

080017bc <calculate_damping>:

float calculate_damping(float angular_velocity) {
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	ed87 0a01 	vstr	s0, [r7, #4]
    float damping_coefficient = 0.05;
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <calculate_damping+0x2c>)
 80017c8:	60fb      	str	r3, [r7, #12]
    return -damping_coefficient * angular_velocity;
 80017ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ce:	eeb1 7a67 	vneg.f32	s14, s15
 80017d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	3d4ccccd 	.word	0x3d4ccccd

080017ec <calculate_friction>:

float calculate_friction(float angular_velocity) {
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	ed87 0a01 	vstr	s0, [r7, #4]
    float friction_coefficient = 0.02;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <calculate_friction+0x4c>)
 80017f8:	60fb      	str	r3, [r7, #12]
    if (angular_velocity > 0) {
 80017fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	dd04      	ble.n	8001812 <calculate_friction+0x26>
        return -friction_coefficient;
 8001808:	edd7 7a03 	vldr	s15, [r7, #12]
 800180c:	eef1 7a67 	vneg.f32	s15, s15
 8001810:	e00b      	b.n	800182a <calculate_friction+0x3e>
    } else if (angular_velocity < 0) {
 8001812:	edd7 7a01 	vldr	s15, [r7, #4]
 8001816:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	d502      	bpl.n	8001826 <calculate_friction+0x3a>
        return friction_coefficient;
 8001820:	edd7 7a03 	vldr	s15, [r7, #12]
 8001824:	e001      	b.n	800182a <calculate_friction+0x3e>
    } else {
        return 0;
 8001826:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800183c <calculate_friction+0x50>
    }
}
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	3ca3d70a 	.word	0x3ca3d70a
 800183c:	00000000 	.word	0x00000000

08001840 <calculate_lock>:

float calculate_lock(float angle) {
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	ed87 0a01 	vstr	s0, [r7, #4]
    float lock_coefficient = 1.0;
 800184a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800184e:	60fb      	str	r3, [r7, #12]
    float max_angle = 450.0;
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <calculate_lock+0x84>)
 8001852:	60bb      	str	r3, [r7, #8]
    if (angle > max_angle) {
 8001854:	ed97 7a01 	vldr	s14, [r7, #4]
 8001858:	edd7 7a02 	vldr	s15, [r7, #8]
 800185c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dd0c      	ble.n	8001880 <calculate_lock+0x40>
        return -lock_coefficient * (angle - max_angle);
 8001866:	edd7 7a03 	vldr	s15, [r7, #12]
 800186a:	eeb1 7a67 	vneg.f32	s14, s15
 800186e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001872:	edd7 7a02 	vldr	s15, [r7, #8]
 8001876:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800187a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187e:	e019      	b.n	80018b4 <calculate_lock+0x74>
    } else if (angle < -max_angle) {
 8001880:	edd7 7a02 	vldr	s15, [r7, #8]
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	ed97 7a01 	vldr	s14, [r7, #4]
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d50c      	bpl.n	80018b0 <calculate_lock+0x70>
        return -lock_coefficient * (angle + max_angle);
 8001896:	edd7 7a03 	vldr	s15, [r7, #12]
 800189a:	eeb1 7a67 	vneg.f32	s14, s15
 800189e:	edd7 6a01 	vldr	s13, [r7, #4]
 80018a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ae:	e001      	b.n	80018b4 <calculate_lock+0x74>
    }
    return 0;
 80018b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80018c8 <calculate_lock+0x88>
}
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	43e10000 	.word	0x43e10000
 80018c8:	00000000 	.word	0x00000000

080018cc <scale_to_pwm>:

float scale_to_pwm(float total_force) {
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	ed87 0a01 	vstr	s0, [r7, #4]
    const float MIN_PWM = 50.0f;    // Minimum PWM value for the motor to start moving
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <scale_to_pwm+0xb8>)
 80018d8:	617b      	str	r3, [r7, #20]
    const float MAX_PWM = 255.0f;   // Maximum PWM value
 80018da:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <scale_to_pwm+0xbc>)
 80018dc:	613b      	str	r3, [r7, #16]

    // If total_force is zero, return zero PWM output
    if (total_force == 0.0f) {
 80018de:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d106      	bne.n	80018fa <scale_to_pwm+0x2e>
        gPWM = 0.0f;
 80018ec:	4b27      	ldr	r3, [pc, #156]	@ (800198c <scale_to_pwm+0xc0>)
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
        return 0.0f;
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e03c      	b.n	8001974 <scale_to_pwm+0xa8>
    }

    // Calculate PWM output
    float pwm_output = fabs(total_force) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 80018fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001902:	ee17 0a90 	vmov	r0, s15
 8001906:	f7fe fe37 	bl	8000578 <__aeabi_f2d>
 800190a:	4604      	mov	r4, r0
 800190c:	460d      	mov	r5, r1
 800190e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001912:	edd7 7a05 	vldr	s15, [r7, #20]
 8001916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191a:	ee17 0a90 	vmov	r0, s15
 800191e:	f7fe fe2b 	bl	8000578 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fe7d 	bl	8000628 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	461d      	mov	r5, r3
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7fe fe1e 	bl	8000578 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fcba 	bl	80002bc <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f89c 	bl	8000a8c <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

    // Constrain PWM output to valid range
    pwm_output = constrain(pwm_output, MIN_PWM, MAX_PWM);
 8001958:	ed97 1a04 	vldr	s2, [r7, #16]
 800195c:	edd7 0a05 	vldr	s1, [r7, #20]
 8001960:	ed97 0a03 	vldr	s0, [r7, #12]
 8001964:	f7ff fed0 	bl	8001708 <constrain>
 8001968:	ed87 0a03 	vstr	s0, [r7, #12]

    // Update debug variable
    gPWM = pwm_output;
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <scale_to_pwm+0xc0>)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6013      	str	r3, [r2, #0]

    return pwm_output;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bdb0      	pop	{r4, r5, r7, pc}
 8001982:	bf00      	nop
 8001984:	42480000 	.word	0x42480000
 8001988:	437f0000 	.word	0x437f0000
 800198c:	20000458 	.word	0x20000458

08001990 <map_wheel_position_to_axis>:

uint8_t map_wheel_position_to_axis(int32_t position) {
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    int32_t min_position = -450;
 8001998:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <map_wheel_position_to_axis+0x60>)
 800199a:	60fb      	str	r3, [r7, #12]
    int32_t max_position = 450;
 800199c:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80019a0:	60bb      	str	r3, [r7, #8]

    // Clamp the position to the valid range
	if (position < min_position) {
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	da02      	bge.n	80019b0 <map_wheel_position_to_axis+0x20>
		position = min_position;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e005      	b.n	80019bc <map_wheel_position_to_axis+0x2c>
	} else if (position > max_position) {
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dd01      	ble.n	80019bc <map_wheel_position_to_axis+0x2c>
		position = max_position;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	607b      	str	r3, [r7, #4]
	}

	// Reverse the mapping
	return (uint8_t)((((max_position - position) * 255) + (max_position - min_position) / 2) / (max_position - min_position));
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	1ad2      	subs	r2, r2, r3
 80019c2:	4613      	mov	r3, r2
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	1a9a      	subs	r2, r3, r2
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1acb      	subs	r3, r1, r3
 80019ce:	0fd9      	lsrs	r1, r3, #31
 80019d0:	440b      	add	r3, r1
 80019d2:	105b      	asrs	r3, r3, #1
 80019d4:	441a      	add	r2, r3
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1acb      	subs	r3, r1, r3
 80019dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80019e0:	b2db      	uxtb	r3, r3
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	fffffe3e 	.word	0xfffffe3e

080019f4 <init_encoder>:

extern void init_encoder() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80019f8:	213c      	movs	r1, #60	@ 0x3c
 80019fa:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <init_encoder+0x14>)
 80019fc:	f006 f8d6 	bl	8007bac <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 8001a00:	f000 f812 	bl	8001a28 <reset_encoder_position>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200007a4 	.word	0x200007a4

08001a0c <read_encoder_position>:

int16_t read_encoder_position() {
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <read_encoder_position+0x18>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	b21b      	sxth	r3, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200007a4 	.word	0x200007a4

08001a28 <reset_encoder_position>:

void reset_encoder_position() {
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <reset_encoder_position+0x18>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200007a4 	.word	0x200007a4

08001a44 <get_angle_degrees>:

float get_angle_degrees() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
    int16_t position = read_encoder_position();
 8001a4a:	f7ff ffdf 	bl	8001a0c <read_encoder_position>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
    gPosition = position;
 8001a52:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <get_angle_degrees+0x58>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	8013      	strh	r3, [r2, #0]
    return (position * 360.0) / ENCODER_RESOLUTION;
 8001a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd79 	bl	8000554 <__aeabi_i2d>
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <get_angle_degrees+0x5c>)
 8001a68:	f7fe fdde 	bl	8000628 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <get_angle_degrees+0x60>)
 8001a7a:	f7fe feff 	bl	800087c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f801 	bl	8000a8c <__aeabi_d2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	ee07 3a90 	vmov	s15, r3
}
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000468 	.word	0x20000468
 8001aa0:	40768000 	.word	0x40768000
 8001aa4:	40a2c000 	.word	0x40a2c000

08001aa8 <update_wheel_position_and_velocity>:

void update_wheel_position_and_velocity(float *wheel_angle, float *angular_velocity) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    // Get the current encoder count
    float current_angle = get_angle_degrees();
 8001ab2:	f7ff ffc7 	bl	8001a44 <get_angle_degrees>
 8001ab6:	ed87 0a04 	vstr	s0, [r7, #16]

    // Calculate time difference (in seconds) since the last update
    uint32_t current_time = HAL_GetTick();  // In milliseconds
 8001aba:	f001 f83d 	bl	8002b38 <HAL_GetTick>
 8001abe:	60f8      	str	r0, [r7, #12]
    float dt = (current_time - last_update_time) / 1000.0f;  // Convert ms to seconds
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aca:	4b40      	ldr	r3, [pc, #256]	@ (8001bcc <update_wheel_position_and_velocity+0x124>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ad4:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001bd0 <update_wheel_position_and_velocity+0x128>
 8001ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001adc:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the change in angle
    float delta_angle = current_angle - last_encoder_count;
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd4 <update_wheel_position_and_velocity+0x12c>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aee:	edc7 7a05 	vstr	s15, [r7, #20]

    // Implement a threshold to ignore small changes
    if (fabs(delta_angle) < 0.25f) {  // Adjust the threshold as needed
 8001af2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af6:	eef0 7ae7 	vabs.f32	s15, s15
 8001afa:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	d502      	bpl.n	8001b0e <update_wheel_position_and_velocity+0x66>
        delta_angle = 0.0f;
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
    }

    // Update the wheel angle, keeping within the lock limit
    *wheel_angle += delta_angle;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	ed93 7a00 	vldr	s14, [r3]
 8001b14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
    if (*wheel_angle > WHEEL_MAX_ANGLE) *wheel_angle = WHEEL_MAX_ANGLE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001bd8 <update_wheel_position_and_velocity+0x130>
 8001b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b34:	dd02      	ble.n	8001b3c <update_wheel_position_and_velocity+0x94>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a28      	ldr	r2, [pc, #160]	@ (8001bdc <update_wheel_position_and_velocity+0x134>)
 8001b3a:	601a      	str	r2, [r3, #0]
    if (*wheel_angle < -WHEEL_MAX_ANGLE) *wheel_angle = -WHEEL_MAX_ANGLE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001be0 <update_wheel_position_and_velocity+0x138>
 8001b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	d502      	bpl.n	8001b56 <update_wheel_position_and_velocity+0xae>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a24      	ldr	r2, [pc, #144]	@ (8001be4 <update_wheel_position_and_velocity+0x13c>)
 8001b54:	601a      	str	r2, [r3, #0]

    gDelta = delta_angle;
 8001b56:	4a24      	ldr	r2, [pc, #144]	@ (8001be8 <update_wheel_position_and_velocity+0x140>)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	6013      	str	r3, [r2, #0]
    // Calculate angular velocity (degrees per second)
    if (dt > 0.0001f) {  // Avoid division by zero
 8001b5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b60:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001bec <update_wheel_position_and_velocity+0x144>
 8001b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	dd09      	ble.n	8001b82 <update_wheel_position_and_velocity+0xda>
        *angular_velocity = delta_angle / dt;
 8001b6e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b72:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
 8001b80:	e003      	b.n	8001b8a <update_wheel_position_and_velocity+0xe2>
    } else {
        *angular_velocity = 0.0f;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
    }

    // Store the current values for the next update
    last_encoder_count = current_angle;
 8001b8a:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <update_wheel_position_and_velocity+0x12c>)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	6013      	str	r3, [r2, #0]
    last_update_time = current_time;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <update_wheel_position_and_velocity+0x124>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]

    gSteering = map_wheel_position_to_axis(*wheel_angle);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001baa:	ee17 0a90 	vmov	r0, s15
 8001bae:	f7ff feef 	bl	8001990 <map_wheel_position_to_axis>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <update_wheel_position_and_velocity+0x148>)
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000498 	.word	0x20000498
 8001bd0:	447a0000 	.word	0x447a0000
 8001bd4:	20000494 	.word	0x20000494
 8001bd8:	43e10000 	.word	0x43e10000
 8001bdc:	43e10000 	.word	0x43e10000
 8001be0:	c3e10000 	.word	0xc3e10000
 8001be4:	c3e10000 	.word	0xc3e10000
 8001be8:	20000474 	.word	0x20000474
 8001bec:	38d1b717 	.word	0x38d1b717
 8001bf0:	20000478 	.word	0x20000478
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <set_motor_pwm>:


void set_motor_pwm(float pwm_value, uint8_t direction) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c02:	4603      	mov	r3, r0
 8001c04:	70fb      	strb	r3, [r7, #3]
    // Assuming pwm_value ranges from 0 to 255
    uint32_t pulse = (uint32_t)((pwm_value / 255.0) * htim3.Init.Period);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7fe fcb6 	bl	8000578 <__aeabi_f2d>
 8001c0c:	a321      	add	r3, pc, #132	@ (adr r3, 8001c94 <set_motor_pwm+0x9c>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fe33 	bl	800087c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <set_motor_pwm+0x98>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc86 	bl	8000534 <__aeabi_ui2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fcfa 	bl	8000628 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ff06 	bl	8000a4c <__aeabi_d2uiz>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]

    if (direction == 1) { // Forward
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d108      	bne.n	8001c5c <set_motor_pwm+0x64>
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <set_motor_pwm+0x98>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <set_motor_pwm+0x98>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
	} else { // Stop
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
 8001c5a:	e013      	b.n	8001c84 <set_motor_pwm+0x8c>
	} else if (direction == 0) { // Reverse
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <set_motor_pwm+0x7c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <set_motor_pwm+0x98>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <set_motor_pwm+0x98>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c72:	e007      	b.n	8001c84 <set_motor_pwm+0x8c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <set_motor_pwm+0x98>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <set_motor_pwm+0x98>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8c:	f3af 8000 	nop.w
 8001c90:	200007ec 	.word	0x200007ec
 8001c94:	00000000 	.word	0x00000000
 8001c98:	406fe000 	.word	0x406fe000

08001c9c <signalTelemetryTask>:
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
//    }
//}

extern void signalTelemetryTask(uint8_t *Buf, uint32_t Len) {
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	if (Len == sizeof(telemetry_packet))  // Verify the data size matches the struct size
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b28      	cmp	r3, #40	@ 0x28
 8001caa:	d11b      	bne.n	8001ce4 <signalTelemetryTask+0x48>
	{
		// Process the received data (rx_buffer)
		memcpy(&telemetry_data, Buf, sizeof(telemetry_data));
 8001cac:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <signalTelemetryTask+0x54>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	4616      	mov	r6, r2
 8001cb4:	f104 0c20 	add.w	ip, r4, #32
 8001cb8:	4635      	mov	r5, r6
 8001cba:	4623      	mov	r3, r4
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc6:	3410      	adds	r4, #16
 8001cc8:	3610      	adds	r6, #16
 8001cca:	4564      	cmp	r4, ip
 8001ccc:	d1f4      	bne.n	8001cb8 <signalTelemetryTask+0x1c>
 8001cce:	4633      	mov	r3, r6
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	6810      	ldr	r0, [r2, #0]
 8001cd4:	6851      	ldr	r1, [r2, #4]
 8001cd6:	c303      	stmia	r3!, {r0, r1}
		osSemaphoreRelease(uartMutexHandle);
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <signalTelemetryTask+0x58>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00b fbfb 	bl	800d4d8 <osSemaphoreRelease>
	}
	else
	{
		int wkglwkgw = 1;
	}
}
 8001ce2:	e001      	b.n	8001ce8 <signalTelemetryTask+0x4c>
		int wkglwkgw = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf0:	20000414 	.word	0x20000414
 8001cf4:	200004ac 	.word	0x200004ac

08001cf8 <read_hall_sensor>:

    // Stop Motor
    set_motor_pwm(0, 0);
}

void read_hall_sensor() {
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	if (adc_data_ready) {
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <read_hall_sensor+0x30>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <read_hall_sensor+0x26>
	    adc_data_ready = 0;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <read_hall_sensor+0x30>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]

	    gHall = adc_buffer[0];
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <read_hall_sensor+0x34>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <read_hall_sensor+0x38>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	2000048e 	.word	0x2000048e
 8001d2c:	2000048c 	.word	0x2000048c
 8001d30:	2000047c 	.word	0x2000047c

08001d34 <Start_ADC_DMA>:

void Start_ADC_DMA() {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim8);  // starts the timer
 8001d38:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <Start_ADC_DMA+0x18>)
 8001d3a:	f005 fc53 	bl	80075e4 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 1);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4903      	ldr	r1, [pc, #12]	@ (8001d50 <Start_ADC_DMA+0x1c>)
 8001d42:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <Start_ADC_DMA+0x20>)
 8001d44:	f000 ff6c 	bl	8002c20 <HAL_ADC_Start_DMA>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000834 	.word	0x20000834
 8001d50:	2000048c 	.word	0x2000048c
 8001d54:	20000344 	.word	0x20000344

08001d58 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <HAL_ADC_ConvCpltCallback+0x24>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d102      	bne.n	8001d70 <HAL_ADC_ConvCpltCallback+0x18>
        adc_data_ready = 1;
 8001d6a:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_ADC_ConvCpltCallback+0x28>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
    }
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40012000 	.word	0x40012000
 8001d80:	2000048e 	.word	0x2000048e

08001d84 <processCAN>:

    // Stop Motor
    set_motor_pwm(0, 0);
}

void processCAN() {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001d8a:	e08d      	b.n	8001ea8 <processCAN+0x124>
    	 if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	f107 0208 	add.w	r2, r7, #8
 8001d92:	2101      	movs	r1, #1
 8001d94:	484b      	ldr	r0, [pc, #300]	@ (8001ec4 <processCAN+0x140>)
 8001d96:	f001 fe50 	bl	8003a3a <HAL_CAN_GetRxMessage>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 8083 	bne.w	8001ea8 <processCAN+0x124>
            int32_t value = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24

            // If the received message is for pedals, only use 2 bytes (int16_t)
            if (RxHeader.StdId >= 0x300 && RxHeader.StdId <= 0x302) {
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dac:	d30d      	bcc.n	8001dca <processCAN+0x46>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f240 3202 	movw	r2, #770	@ 0x302
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d808      	bhi.n	8001dca <processCAN+0x46>
                value = (int16_t)(
                    ((uint16_t)RxData[0]) |
 8001db8:	783b      	ldrb	r3, [r7, #0]
 8001dba:	b21a      	sxth	r2, r3
                    ((uint16_t)RxData[1] << 8)  // Combine 2 bytes into int16_t
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	021b      	lsls	r3, r3, #8
                value = (int16_t)(
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc8:	e00b      	b.n	8001de2 <processCAN+0x5e>
                );
            } else {
                // Steering Wheel Messages (4-byte int32_t)
                value = (int32_t)(
                    ((uint32_t)RxData[0]) |
 8001dca:	783b      	ldrb	r3, [r7, #0]
 8001dcc:	461a      	mov	r2, r3
                    ((uint32_t)RxData[1] << 8) |
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	021b      	lsls	r3, r3, #8
                    ((uint32_t)RxData[0]) |
 8001dd2:	431a      	orrs	r2, r3
                    ((uint32_t)RxData[2] << 16) |
 8001dd4:	78bb      	ldrb	r3, [r7, #2]
 8001dd6:	041b      	lsls	r3, r3, #16
                    ((uint32_t)RxData[1] << 8) |
 8001dd8:	431a      	orrs	r2, r3
                    ((uint32_t)RxData[3] << 24)
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	061b      	lsls	r3, r3, #24
                    ((uint32_t)RxData[2] << 16) |
 8001dde:	4313      	orrs	r3, r2
                value = (int32_t)(
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
                );
            }

			switch (RxHeader.StdId) {
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f240 3202 	movw	r2, #770	@ 0x302
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d052      	beq.n	8001e92 <processCAN+0x10e>
 8001dec:	f240 3202 	movw	r2, #770	@ 0x302
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d858      	bhi.n	8001ea6 <processCAN+0x122>
 8001df4:	f240 3201 	movw	r2, #769	@ 0x301
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d040      	beq.n	8001e7e <processCAN+0xfa>
 8001dfc:	f240 3201 	movw	r2, #769	@ 0x301
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d850      	bhi.n	8001ea6 <processCAN+0x122>
 8001e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e08:	d02f      	beq.n	8001e6a <processCAN+0xe6>
 8001e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e0e:	d84a      	bhi.n	8001ea6 <processCAN+0x122>
 8001e10:	f240 2202 	movw	r2, #514	@ 0x202
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d01e      	beq.n	8001e56 <processCAN+0xd2>
 8001e18:	f240 2202 	movw	r2, #514	@ 0x202
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d842      	bhi.n	8001ea6 <processCAN+0x122>
 8001e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e24:	d004      	beq.n	8001e30 <processCAN+0xac>
 8001e26:	f240 2201 	movw	r2, #513	@ 0x201
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <processCAN+0xbe>

				// Pedals
				case 0x300: pedal_data.encoder_1 = (int16_t)value; gDebugCounter2++; break;
				case 0x301: pedal_data.encoder_2 = (int16_t)value; gDebugCounter2++;  break;
				case 0x302: pedal_data.encoder_3 = (int16_t)value; gDebugCounter2++; break;
				default: break;
 8001e2e:	e03a      	b.n	8001ea6 <processCAN+0x122>
				case 0x200: user_input_data.buttons = (uint32_t)value; gDebugCounter1++; break;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	4a25      	ldr	r2, [pc, #148]	@ (8001ec8 <processCAN+0x144>)
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <processCAN+0x148>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a23      	ldr	r2, [pc, #140]	@ (8001ecc <processCAN+0x148>)
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e032      	b.n	8001ea8 <processCAN+0x124>
				case 0x201: user_input_data.hall_analog_1 = (uint8_t)value; gDebugCounter1++; break;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <processCAN+0x144>)
 8001e48:	711a      	strb	r2, [r3, #4]
 8001e4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ecc <processCAN+0x148>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a1e      	ldr	r2, [pc, #120]	@ (8001ecc <processCAN+0x148>)
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e028      	b.n	8001ea8 <processCAN+0x124>
				case 0x202: user_input_data.hall_analog_2 = (uint8_t)value; gDebugCounter1++; break;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <processCAN+0x144>)
 8001e5c:	715a      	strb	r2, [r3, #5]
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <processCAN+0x148>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	4a19      	ldr	r2, [pc, #100]	@ (8001ecc <processCAN+0x148>)
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e01e      	b.n	8001ea8 <processCAN+0x124>
				case 0x300: pedal_data.encoder_1 = (int16_t)value; gDebugCounter2++; break;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <processCAN+0x14c>)
 8001e70:	801a      	strh	r2, [r3, #0]
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <processCAN+0x150>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a16      	ldr	r2, [pc, #88]	@ (8001ed4 <processCAN+0x150>)
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e014      	b.n	8001ea8 <processCAN+0x124>
				case 0x301: pedal_data.encoder_2 = (int16_t)value; gDebugCounter2++;  break;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <processCAN+0x14c>)
 8001e84:	805a      	strh	r2, [r3, #2]
 8001e86:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <processCAN+0x150>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <processCAN+0x150>)
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e00a      	b.n	8001ea8 <processCAN+0x124>
				case 0x302: pedal_data.encoder_3 = (int16_t)value; gDebugCounter2++; break;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <processCAN+0x14c>)
 8001e98:	809a      	strh	r2, [r3, #4]
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <processCAN+0x150>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed4 <processCAN+0x150>)
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e000      	b.n	8001ea8 <processCAN+0x124>
				default: break;
 8001ea6:	bf00      	nop
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4806      	ldr	r0, [pc, #24]	@ (8001ec4 <processCAN+0x140>)
 8001eac:	f001 fee7 	bl	8003c7e <HAL_CAN_GetRxFifoFillLevel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f af6a 	bne.w	8001d8c <processCAN+0x8>
			}
		}
	}
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200003ec 	.word	0x200003ec
 8001ec8:	20000448 	.word	0x20000448
 8001ecc:	20000480 	.word	0x20000480
 8001ed0:	20000450 	.word	0x20000450
 8001ed4:	20000484 	.word	0x20000484

08001ed8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a36      	ldr	r2, [pc, #216]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b30      	ldr	r3, [pc, #192]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a28      	ldr	r2, [pc, #160]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4a21      	ldr	r2, [pc, #132]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <MX_GPIO_Init+0xf8>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2130      	movs	r1, #48	@ 0x30
 8001f62:	481c      	ldr	r0, [pc, #112]	@ (8001fd4 <MX_GPIO_Init+0xfc>)
 8001f64:	f002 fef0 	bl	8004d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2106      	movs	r1, #6
 8001f6c:	481a      	ldr	r0, [pc, #104]	@ (8001fd8 <MX_GPIO_Init+0x100>)
 8001f6e:	f002 feeb 	bl	8004d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f78:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4814      	ldr	r0, [pc, #80]	@ (8001fdc <MX_GPIO_Init+0x104>)
 8001f8a:	f002 fd49 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001f8e:	2330      	movs	r3, #48	@ 0x30
 8001f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <MX_GPIO_Init+0xfc>)
 8001fa6:	f002 fd3b 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001faa:	2306      	movs	r3, #6
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_GPIO_Init+0x100>)
 8001fc2:	f002 fd2d 	bl	8004a20 <HAL_GPIO_Init>

}
 8001fc6:	bf00      	nop
 8001fc8:	3728      	adds	r7, #40	@ 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800

08001fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe4:	f000 fd72 	bl	8002acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe8:	f000 f832 	bl	8002050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fec:	f7ff ff74 	bl	8001ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ff0:	f7ff f894 	bl	800111c <MX_DMA_Init>
  MX_TIM2_Init();
 8001ff4:	f000 fa8a 	bl	800250c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ff8:	f000 fadc 	bl	80025b4 <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ffc:	f000 fca4 	bl	8002948 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8002000:	f7fe ff0c 	bl	8000e1c <MX_ADC1_Init>
  MX_CAN1_Init();
 8002004:	f7fe ffd4 	bl	8000fb0 <MX_CAN1_Init>
  MX_TIM8_Init();
 8002008:	f000 fb3a 	bl	8002680 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */



  init_encoder();
 800200c:	f7ff fcf2 	bl	80019f4 <init_encoder>
  DWT_Init();
 8002010:	f7ff fa50 	bl	80014b4 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002014:	2100      	movs	r1, #0
 8002016:	480c      	ldr	r0, [pc, #48]	@ (8002048 <main+0x68>)
 8002018:	f005 fc5a 	bl	80078d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800201c:	2104      	movs	r1, #4
 800201e:	480a      	ldr	r0, [pc, #40]	@ (8002048 <main+0x68>)
 8002020:	f005 fc56 	bl	80078d0 <HAL_TIM_PWM_Start>

  MX_USB_DEVICE_Init();
 8002024:	f007 ff2c 	bl	8009e80 <MX_USB_DEVICE_Init>

  HAL_CAN_Start(&hcan1);
 8002028:	4808      	ldr	r0, [pc, #32]	@ (800204c <main+0x6c>)
 800202a:	f001 fba9 	bl	8003780 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 800202e:	2110      	movs	r1, #16
 8002030:	4806      	ldr	r0, [pc, #24]	@ (800204c <main+0x6c>)
 8002032:	f001 fe4c 	bl	8003cce <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002036:	f7ff f8ab 	bl	8001190 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800203a:	f00b f965 	bl	800d308 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 800203e:	f00c faa9 	bl	800e594 <vTaskStartScheduler>

  while (1)
 8002042:	bf00      	nop
 8002044:	e7fd      	b.n	8002042 <main+0x62>
 8002046:	bf00      	nop
 8002048:	200007ec 	.word	0x200007ec
 800204c:	200003ec 	.word	0x200003ec

08002050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b094      	sub	sp, #80	@ 0x50
 8002054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	2234      	movs	r2, #52	@ 0x34
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f00d fe32 	bl	800fcc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	2300      	movs	r3, #0
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <SystemClock_Config+0xd0>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	4a28      	ldr	r2, [pc, #160]	@ (8002120 <SystemClock_Config+0xd0>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002082:	6413      	str	r3, [r2, #64]	@ 0x40
 8002084:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <SystemClock_Config+0xd0>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002090:	2300      	movs	r3, #0
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <SystemClock_Config+0xd4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800209c:	4a21      	ldr	r2, [pc, #132]	@ (8002124 <SystemClock_Config+0xd4>)
 800209e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <SystemClock_Config+0xd4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ba:	2302      	movs	r3, #2
 80020bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020c4:	2304      	movs	r3, #4
 80020c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80020c8:	2348      	movs	r3, #72	@ 0x48
 80020ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020cc:	2302      	movs	r3, #2
 80020ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80020d0:	2303      	movs	r3, #3
 80020d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 ff89 	bl	8006ff4 <HAL_RCC_OscConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80020e8:	f000 f854 	bl	8002194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ec:	230f      	movs	r3, #15
 80020ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f0:	2302      	movs	r3, #2
 80020f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	2102      	movs	r1, #2
 8002108:	4618      	mov	r0, r3
 800210a:	f004 f8e1 	bl	80062d0 <HAL_RCC_ClockConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002114:	f000 f83e 	bl	8002194 <Error_Handler>
  }
}
 8002118:	bf00      	nop
 800211a:	3750      	adds	r7, #80	@ 0x50
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000

08002128 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
	{
		processCAN();
 800213a:	f7ff fe23 	bl	8001d84 <processCAN>
	}
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40006400 	.word	0x40006400

0800214c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a04      	ldr	r2, [pc, #16]	@ (800216c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
	{
		processCAN();
 800215e:	f7ff fe11 	bl	8001d84 <processCAN>
	}
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40006400 	.word	0x40006400

08002170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002182:	f000 fcc5 	bl	8002b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40001000 	.word	0x40001000

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <Error_Handler+0x8>

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <HAL_MspInit+0x54>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	4a11      	ldr	r2, [pc, #68]	@ (80021f4 <HAL_MspInit+0x54>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b6:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <HAL_MspInit+0x54>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_MspInit+0x54>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_MspInit+0x54>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_MspInit+0x54>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	210f      	movs	r1, #15
 80021e2:	f06f 0001 	mvn.w	r0, #1
 80021e6:	f002 f881 	bl	80042ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	@ 0x38
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <HAL_InitTick+0xe4>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	4a32      	ldr	r2, [pc, #200]	@ (80022dc <HAL_InitTick+0xe4>)
 8002212:	f043 0310 	orr.w	r3, r3, #16
 8002216:	6413      	str	r3, [r2, #64]	@ 0x40
 8002218:	4b30      	ldr	r3, [pc, #192]	@ (80022dc <HAL_InitTick+0xe4>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002224:	f107 0210 	add.w	r2, r7, #16
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f004 f954 	bl	80064dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800223e:	f004 f939 	bl	80064b4 <HAL_RCC_GetPCLK1Freq>
 8002242:	6378      	str	r0, [r7, #52]	@ 0x34
 8002244:	e004      	b.n	8002250 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002246:	f004 f935 	bl	80064b4 <HAL_RCC_GetPCLK1Freq>
 800224a:	4603      	mov	r3, r0
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002252:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <HAL_InitTick+0xe8>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	0c9b      	lsrs	r3, r3, #18
 800225a:	3b01      	subs	r3, #1
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800225e:	4b21      	ldr	r3, [pc, #132]	@ (80022e4 <HAL_InitTick+0xec>)
 8002260:	4a21      	ldr	r2, [pc, #132]	@ (80022e8 <HAL_InitTick+0xf0>)
 8002262:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002264:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <HAL_InitTick+0xec>)
 8002266:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800226a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800226c:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <HAL_InitTick+0xec>)
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002272:	4b1c      	ldr	r3, [pc, #112]	@ (80022e4 <HAL_InitTick+0xec>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <HAL_InitTick+0xec>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227e:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <HAL_InitTick+0xec>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002284:	4817      	ldr	r0, [pc, #92]	@ (80022e4 <HAL_InitTick+0xec>)
 8002286:	f005 f953 	bl	8007530 <HAL_TIM_Base_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002290:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11b      	bne.n	80022d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002298:	4812      	ldr	r0, [pc, #72]	@ (80022e4 <HAL_InitTick+0xec>)
 800229a:	f005 fa0b 	bl	80076b4 <HAL_TIM_Base_Start_IT>
 800229e:	4603      	mov	r3, r0
 80022a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80022a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d111      	bne.n	80022d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022ac:	2036      	movs	r0, #54	@ 0x36
 80022ae:	f002 f839 	bl	8004324 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d808      	bhi.n	80022ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	2036      	movs	r0, #54	@ 0x36
 80022be:	f002 f815 	bl	80042ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c2:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <HAL_InitTick+0xf4>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e002      	b.n	80022d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3738      	adds	r7, #56	@ 0x38
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40023800 	.word	0x40023800
 80022e0:	431bde83 	.word	0x431bde83
 80022e4:	20000758 	.word	0x20000758
 80022e8:	40001000 	.word	0x40001000
 80022ec:	2000000c 	.word	0x2000000c

080022f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80022f4:	f3bf 8f4f 	dsb	sy
}
 80022f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <__NVIC_SystemReset+0x24>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002302:	4904      	ldr	r1, [pc, #16]	@ (8002314 <__NVIC_SystemReset+0x24>)
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <__NVIC_SystemReset+0x28>)
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800230a:	f3bf 8f4f 	dsb	sy
}
 800230e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <__NVIC_SystemReset+0x20>
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0004 	.word	0x05fa0004

0800231c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <NMI_Handler+0x4>

08002324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0d6      	sub	sp, #344	@ 0x158
 8002328:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 800232a:	f01e 0f04 	tst.w	lr, #4
 800232e:	bf0c      	ite	eq
 8002330:	f3ef 8308 	mrseq	r3, MSP
 8002334:	f3ef 8309 	mrsne	r3, PSP
 8002338:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 800233c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 8002346:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8002350:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 800235a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 8002364:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 800236e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 8002378:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 8002382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 800238c:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <HardFault_Handler+0xc4>)
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 8002394:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <HardFault_Handler+0xc4>)
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 800239c:	1d38      	adds	r0, r7, #4
 800239e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023a2:	9308      	str	r3, [sp, #32]
 80023a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023a8:	9307      	str	r3, [sp, #28]
 80023aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023ae:	9306      	str	r3, [sp, #24]
 80023b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023b4:	9305      	str	r3, [sp, #20]
 80023b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023ba:	9304      	str	r3, [sp, #16]
 80023bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023c0:	9303      	str	r3, [sp, #12]
 80023c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HardFault_Handler+0xc8>)
 80023da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023de:	f00d fc3f 	bl	800fc60 <sniprintf>
	);

	// Log the message
//	log_message(log_buffer);

	NVIC_SystemReset();
 80023e2:	f7ff ff85 	bl	80022f0 <__NVIC_SystemReset>
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00
 80023ec:	08010554 	.word	0x08010554

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <MemManage_Handler+0x4>

080023f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <UsageFault_Handler+0x4>

08002408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800241c:	4802      	ldr	r0, [pc, #8]	@ (8002428 <CAN1_RX0_IRQHandler+0x10>)
 800241e:	f001 fc7c 	bl	8003d1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200003ec 	.word	0x200003ec

0800242c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002430:	4802      	ldr	r0, [pc, #8]	@ (800243c <CAN1_RX1_IRQHandler+0x10>)
 8002432:	f001 fc72 	bl	8003d1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200003ec 	.word	0x200003ec

08002440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002444:	4802      	ldr	r0, [pc, #8]	@ (8002450 <TIM6_DAC_IRQHandler+0x10>)
 8002446:	f005 fc3f 	bl	8007cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000758 	.word	0x20000758

08002454 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <DMA2_Stream0_IRQHandler+0x10>)
 800245a:	f002 f877 	bl	800454c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000038c 	.word	0x2000038c

08002468 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <OTG_FS_IRQHandler+0x10>)
 800246e:	f002 fdcf 	bl	8005010 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000087c 	.word	0x2000087c

0800247c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002484:	4a14      	ldr	r2, [pc, #80]	@ (80024d8 <_sbrk+0x5c>)
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <_sbrk+0x60>)
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <_sbrk+0x64>)
 800249a:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <_sbrk+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ac:	f00d fc7a 	bl	800fda4 <__errno>
 80024b0:	4603      	mov	r3, r0
 80024b2:	220c      	movs	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	e009      	b.n	80024d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	4a05      	ldr	r2, [pc, #20]	@ (80024e0 <_sbrk+0x64>)
 80024cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20020000 	.word	0x20020000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	200007a0 	.word	0x200007a0
 80024e4:	20005518 	.word	0x20005518

080024e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <SystemInit+0x20>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <SystemInit+0x20>)
 80024f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	@ 0x30
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f00d fbd4 	bl	800fcc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002528:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <MX_TIM2_Init+0xa4>)
 800252a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800252e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002530:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <MX_TIM2_Init+0xa4>)
 8002532:	2200      	movs	r2, #0
 8002534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002536:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <MX_TIM2_Init+0xa4>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800253c:	4b1c      	ldr	r3, [pc, #112]	@ (80025b0 <MX_TIM2_Init+0xa4>)
 800253e:	f04f 32ff 	mov.w	r2, #4294967295
 8002542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002544:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <MX_TIM2_Init+0xa4>)
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254a:	4b19      	ldr	r3, [pc, #100]	@ (80025b0 <MX_TIM2_Init+0xa4>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002550:	2303      	movs	r3, #3
 8002552:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002558:	2301      	movs	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002568:	2301      	movs	r3, #1
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	4619      	mov	r1, r3
 800257a:	480d      	ldr	r0, [pc, #52]	@ (80025b0 <MX_TIM2_Init+0xa4>)
 800257c:	f005 fa70 	bl	8007a60 <HAL_TIM_Encoder_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002586:	f7ff fe05 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4806      	ldr	r0, [pc, #24]	@ (80025b0 <MX_TIM2_Init+0xa4>)
 8002598:	f006 f84e 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80025a2:	f7ff fdf7 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	3730      	adds	r7, #48	@ 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200007a4 	.word	0x200007a4

080025b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ba:	f107 0320 	add.w	r3, r7, #32
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	615a      	str	r2, [r3, #20]
 80025d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025d6:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <MX_TIM3_Init+0xc4>)
 80025d8:	4a28      	ldr	r2, [pc, #160]	@ (800267c <MX_TIM3_Init+0xc8>)
 80025da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 -1;
 80025dc:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <MX_TIM3_Init+0xc4>)
 80025de:	2253      	movs	r2, #83	@ 0x53
 80025e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <MX_TIM3_Init+0xc4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 80025e8:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <MX_TIM3_Init+0xc4>)
 80025ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f0:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <MX_TIM3_Init+0xc4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <MX_TIM3_Init+0xc4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025fc:	481e      	ldr	r0, [pc, #120]	@ (8002678 <MX_TIM3_Init+0xc4>)
 80025fe:	f005 f918 	bl	8007832 <HAL_TIM_PWM_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002608:	f7ff fdc4 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002614:	f107 0320 	add.w	r3, r7, #32
 8002618:	4619      	mov	r1, r3
 800261a:	4817      	ldr	r0, [pc, #92]	@ (8002678 <MX_TIM3_Init+0xc4>)
 800261c:	f006 f80c 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002626:	f7ff fdb5 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262a:	2360      	movs	r3, #96	@ 0x60
 800262c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800262e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002632:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	2200      	movs	r2, #0
 8002640:	4619      	mov	r1, r3
 8002642:	480d      	ldr	r0, [pc, #52]	@ (8002678 <MX_TIM3_Init+0xc4>)
 8002644:	f005 fc8c 	bl	8007f60 <HAL_TIM_PWM_ConfigChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800264e:	f7ff fda1 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	2204      	movs	r2, #4
 8002656:	4619      	mov	r1, r3
 8002658:	4807      	ldr	r0, [pc, #28]	@ (8002678 <MX_TIM3_Init+0xc4>)
 800265a:	f005 fc81 	bl	8007f60 <HAL_TIM_PWM_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002664:	f7ff fd96 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002668:	4803      	ldr	r0, [pc, #12]	@ (8002678 <MX_TIM3_Init+0xc4>)
 800266a:	f000 f913 	bl	8002894 <HAL_TIM_MspPostInit>

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200007ec 	.word	0x200007ec
 800267c:	40000400 	.word	0x40000400

08002680 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b092      	sub	sp, #72	@ 0x48
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002686:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
 80026a0:	615a      	str	r2, [r3, #20]
 80026a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2220      	movs	r2, #32
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f00d fb0c 	bl	800fcc8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026b0:	4b31      	ldr	r3, [pc, #196]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026b2:	4a32      	ldr	r2, [pc, #200]	@ (800277c <MX_TIM8_Init+0xfc>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80026b6:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026b8:	2253      	movs	r2, #83	@ 0x53
 80026ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 80026c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026c4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80026c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026d0:	4b29      	ldr	r3, [pc, #164]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d6:	4b28      	ldr	r3, [pc, #160]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80026dc:	4826      	ldr	r0, [pc, #152]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026de:	f005 f859 	bl	8007794 <HAL_TIM_OC_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80026e8:	f7ff fd54 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026ec:	2320      	movs	r3, #32
 80026ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026f8:	4619      	mov	r1, r3
 80026fa:	481f      	ldr	r0, [pc, #124]	@ (8002778 <MX_TIM8_Init+0xf8>)
 80026fc:	f005 ff9c 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002706:	f7ff fd45 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002716:	2300      	movs	r3, #0
 8002718:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800272a:	2200      	movs	r2, #0
 800272c:	4619      	mov	r1, r3
 800272e:	4812      	ldr	r0, [pc, #72]	@ (8002778 <MX_TIM8_Init+0xf8>)
 8002730:	f005 fbba 	bl	8007ea8 <HAL_TIM_OC_ConfigChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800273a:	f7ff fd2b 	bl	8002194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002752:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002756:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	@ (8002778 <MX_TIM8_Init+0xf8>)
 8002762:	f005 ffe5 	bl	8008730 <HAL_TIMEx_ConfigBreakDeadTime>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800276c:	f7ff fd12 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	3748      	adds	r7, #72	@ 0x48
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000834 	.word	0x20000834
 800277c:	40010400 	.word	0x40010400

08002780 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a0:	d12b      	bne.n	80027fa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <HAL_TIM_Encoder_MspInit+0x84>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	4a16      	ldr	r2, [pc, #88]	@ (8002804 <HAL_TIM_Encoder_MspInit+0x84>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b2:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <HAL_TIM_Encoder_MspInit+0x84>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_TIM_Encoder_MspInit+0x84>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002804 <HAL_TIM_Encoder_MspInit+0x84>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_TIM_Encoder_MspInit+0x84>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027da:	2303      	movs	r3, #3
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ea:	2301      	movs	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4804      	ldr	r0, [pc, #16]	@ (8002808 <HAL_TIM_Encoder_MspInit+0x88>)
 80027f6:	f002 f913 	bl	8004a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	@ 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40020000 	.word	0x40020000

0800280c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_TIM_PWM_MspInit+0x3c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10d      	bne.n	800283a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_TIM_PWM_MspInit+0x40>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_TIM_PWM_MspInit+0x40>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_TIM_PWM_MspInit+0x40>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40000400 	.word	0x40000400
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM8)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0b      	ldr	r2, [pc, #44]	@ (800288c <HAL_TIM_OC_MspInit+0x3c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10d      	bne.n	800287e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <HAL_TIM_OC_MspInit+0x40>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	4a09      	ldr	r2, [pc, #36]	@ (8002890 <HAL_TIM_OC_MspInit+0x40>)
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	6453      	str	r3, [r2, #68]	@ 0x44
 8002872:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <HAL_TIM_OC_MspInit+0x40>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40010400 	.word	0x40010400
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	@ 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a21      	ldr	r2, [pc, #132]	@ (8002938 <HAL_TIM_MspPostInit+0xa4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d13b      	bne.n	800292e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b20      	ldr	r3, [pc, #128]	@ (800293c <HAL_TIM_MspPostInit+0xa8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <HAL_TIM_MspPostInit+0xa8>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <HAL_TIM_MspPostInit+0xa8>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_TIM_MspPostInit+0xa8>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a18      	ldr	r2, [pc, #96]	@ (800293c <HAL_TIM_MspPostInit+0xa8>)
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <HAL_TIM_MspPostInit+0xa8>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028ee:	2340      	movs	r3, #64	@ 0x40
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028fe:	2302      	movs	r3, #2
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	480d      	ldr	r0, [pc, #52]	@ (8002940 <HAL_TIM_MspPostInit+0xac>)
 800290a:	f002 f889 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800291e:	2302      	movs	r3, #2
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4806      	ldr	r0, [pc, #24]	@ (8002944 <HAL_TIM_MspPostInit+0xb0>)
 800292a:	f002 f879 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800292e:	bf00      	nop
 8002930:	3728      	adds	r7, #40	@ 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40000400 	.word	0x40000400
 800293c:	40023800 	.word	0x40023800
 8002940:	40020000 	.word	0x40020000
 8002944:	40020800 	.word	0x40020800

08002948 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800294c:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800294e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002956:	2206      	movs	r2, #6
 8002958:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800295c:	2202      	movs	r2, #2
 800295e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002962:	2200      	movs	r2, #0
 8002964:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002968:	2202      	movs	r2, #2
 800296a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800296e:	2200      	movs	r2, #0
 8002970:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002986:	2200      	movs	r2, #0
 8002988:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800298a:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800298c:	f002 f9f5 	bl	8004d7a <HAL_PCD_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002996:	f7ff fbfd 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000087c 	.word	0x2000087c

080029a4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0a0      	sub	sp, #128	@ 0x80
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	225c      	movs	r2, #92	@ 0x5c
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f00d f97f 	bl	800fcc8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d2:	d149      	bne.n	8002a68 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80029d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80029da:	2300      	movs	r3, #0
 80029dc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 fdac 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80029ee:	f7ff fbd1 	bl	8002194 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <HAL_PCD_MspInit+0xcc>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002a70 <HAL_PCD_MspInit+0xcc>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_PCD_MspInit+0xcc>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a20:	230a      	movs	r3, #10
 8002a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4812      	ldr	r0, [pc, #72]	@ (8002a74 <HAL_PCD_MspInit+0xd0>)
 8002a2c:	f001 fff8 	bl	8004a20 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a30:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <HAL_PCD_MspInit+0xcc>)
 8002a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a34:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <HAL_PCD_MspInit+0xcc>)
 8002a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a3a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <HAL_PCD_MspInit+0xcc>)
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <HAL_PCD_MspInit+0xcc>)
 8002a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <HAL_PCD_MspInit+0xcc>)
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2106      	movs	r1, #6
 8002a5c:	2043      	movs	r0, #67	@ 0x43
 8002a5e:	f001 fc45 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002a62:	2043      	movs	r0, #67	@ 0x43
 8002a64:	f001 fc5e 	bl	8004324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3780      	adds	r7, #128	@ 0x80
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020000 	.word	0x40020000

08002a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ab0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a7c:	f7ff fd34 	bl	80024e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a80:	480c      	ldr	r0, [pc, #48]	@ (8002ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a82:	490d      	ldr	r1, [pc, #52]	@ (8002ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a84:	4a0d      	ldr	r2, [pc, #52]	@ (8002abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a88:	e002      	b.n	8002a90 <LoopCopyDataInit>

08002a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8e:	3304      	adds	r3, #4

08002a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a94:	d3f9      	bcc.n	8002a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a98:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a9c:	e001      	b.n	8002aa2 <LoopFillZerobss>

08002a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa0:	3204      	adds	r2, #4

08002aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa4:	d3fb      	bcc.n	8002a9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002aa6:	f00d f983 	bl	800fdb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aaa:	f7ff fa99 	bl	8001fe0 <main>
  bx  lr    
 8002aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab8:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8002abc:	080106a0 	.word	0x080106a0
  ldr r2, =_sbss
 8002ac0:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002ac4:	20005514 	.word	0x20005514

08002ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac8:	e7fe      	b.n	8002ac8 <ADC_IRQHandler>
	...

08002acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <HAL_Init+0x40>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_Init+0x40>)
 8002ae2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <HAL_Init+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a07      	ldr	r2, [pc, #28]	@ (8002b0c <HAL_Init+0x40>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af4:	2003      	movs	r0, #3
 8002af6:	f001 fbee 	bl	80042d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afa:	200f      	movs	r0, #15
 8002afc:	f7ff fb7c 	bl	80021f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b00:	f7ff fb4e 	bl	80021a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00

08002b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_IncTick+0x20>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_IncTick+0x24>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <HAL_IncTick+0x24>)
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000010 	.word	0x20000010
 8002b34:	20000d60 	.word	0x20000d60

08002b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <HAL_GetTick+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000d60 	.word	0x20000d60

08002b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff ffee 	bl	8002b38 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d005      	beq.n	8002b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_Delay+0x44>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b76:	bf00      	nop
 8002b78:	f7ff ffde 	bl	8002b38 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d8f7      	bhi.n	8002b78 <HAL_Delay+0x28>
  {
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000010 	.word	0x20000010

08002b98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e033      	b.n	8002c16 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe f982 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bde:	f023 0302 	bic.w	r3, r3, #2
 8002be2:	f043 0202 	orr.w	r2, r3, #2
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa6e 	bl	80030cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c06:	e001      	b.n	8002c0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Start_DMA+0x1e>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0e9      	b.n	8002e12 <HAL_ADC_Start_DMA+0x1f2>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d018      	beq.n	8002c86 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c64:	4b6d      	ldr	r3, [pc, #436]	@ (8002e1c <HAL_ADC_Start_DMA+0x1fc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6d      	ldr	r2, [pc, #436]	@ (8002e20 <HAL_ADC_Start_DMA+0x200>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0c9a      	lsrs	r2, r3, #18
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d107      	bne.n	8002ca6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ca4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	f040 80a1 	bne.w	8002df8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ce0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf4:	d106      	bne.n	8002d04 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f023 0206 	bic.w	r2, r3, #6
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d02:	e002      	b.n	8002d0a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d12:	4b44      	ldr	r3, [pc, #272]	@ (8002e24 <HAL_ADC_Start_DMA+0x204>)
 8002d14:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	4a43      	ldr	r2, [pc, #268]	@ (8002e28 <HAL_ADC_Start_DMA+0x208>)
 8002d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	4a42      	ldr	r2, [pc, #264]	@ (8002e2c <HAL_ADC_Start_DMA+0x20c>)
 8002d24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2a:	4a41      	ldr	r2, [pc, #260]	@ (8002e30 <HAL_ADC_Start_DMA+0x210>)
 8002d2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d36:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d46:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d56:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	334c      	adds	r3, #76	@ 0x4c
 8002d62:	4619      	mov	r1, r3
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f001 fb98 	bl	800449c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d12a      	bne.n	8002dce <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e34 <HAL_ADC_Start_DMA+0x214>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d015      	beq.n	8002dae <HAL_ADC_Start_DMA+0x18e>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2c      	ldr	r2, [pc, #176]	@ (8002e38 <HAL_ADC_Start_DMA+0x218>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d105      	bne.n	8002d98 <HAL_ADC_Start_DMA+0x178>
 8002d8c:	4b25      	ldr	r3, [pc, #148]	@ (8002e24 <HAL_ADC_Start_DMA+0x204>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a27      	ldr	r2, [pc, #156]	@ (8002e3c <HAL_ADC_Start_DMA+0x21c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d136      	bne.n	8002e10 <HAL_ADC_Start_DMA+0x1f0>
 8002da2:	4b20      	ldr	r3, [pc, #128]	@ (8002e24 <HAL_ADC_Start_DMA+0x204>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d130      	bne.n	8002e10 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d129      	bne.n	8002e10 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	e020      	b.n	8002e10 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a18      	ldr	r2, [pc, #96]	@ (8002e34 <HAL_ADC_Start_DMA+0x214>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d11b      	bne.n	8002e10 <HAL_ADC_Start_DMA+0x1f0>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d114      	bne.n	8002e10 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	e00b      	b.n	8002e10 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0210 	orr.w	r2, r3, #16
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	40012300 	.word	0x40012300
 8002e28:	080032c5 	.word	0x080032c5
 8002e2c:	0800337f 	.word	0x0800337f
 8002e30:	0800339b 	.word	0x0800339b
 8002e34:	40012000 	.word	0x40012000
 8002e38:	40012100 	.word	0x40012100
 8002e3c:	40012200 	.word	0x40012200

08002e40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x1c>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e113      	b.n	80030ac <HAL_ADC_ConfigChannel+0x244>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d925      	bls.n	8002ee0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68d9      	ldr	r1, [r3, #12]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b1e      	subs	r3, #30
 8002eaa:	2207      	movs	r2, #7
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68d9      	ldr	r1, [r3, #12]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	4603      	mov	r3, r0
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4403      	add	r3, r0
 8002ed2:	3b1e      	subs	r3, #30
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	e022      	b.n	8002f26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	400a      	ands	r2, r1
 8002f02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6919      	ldr	r1, [r3, #16]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4403      	add	r3, r0
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d824      	bhi.n	8002f78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3b05      	subs	r3, #5
 8002f40:	221f      	movs	r2, #31
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	3b05      	subs	r3, #5
 8002f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f76:	e04c      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d824      	bhi.n	8002fca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	3b23      	subs	r3, #35	@ 0x23
 8002f92:	221f      	movs	r2, #31
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b23      	subs	r3, #35	@ 0x23
 8002fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fc8:	e023      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b41      	subs	r3, #65	@ 0x41
 8002fdc:	221f      	movs	r2, #31
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	400a      	ands	r2, r1
 8002fea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b41      	subs	r3, #65	@ 0x41
 8003006:	fa00 f203 	lsl.w	r2, r0, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003012:	4b29      	ldr	r3, [pc, #164]	@ (80030b8 <HAL_ADC_ConfigChannel+0x250>)
 8003014:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a28      	ldr	r2, [pc, #160]	@ (80030bc <HAL_ADC_ConfigChannel+0x254>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10f      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1d8>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b12      	cmp	r3, #18
 8003026:	d10b      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <HAL_ADC_ConfigChannel+0x254>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d12b      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x23a>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1c      	ldr	r2, [pc, #112]	@ (80030c0 <HAL_ADC_ConfigChannel+0x258>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <HAL_ADC_ConfigChannel+0x1f4>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b11      	cmp	r3, #17
 800305a:	d122      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <HAL_ADC_ConfigChannel+0x258>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d111      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800307e:	4b11      	ldr	r3, [pc, #68]	@ (80030c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a11      	ldr	r2, [pc, #68]	@ (80030c8 <HAL_ADC_ConfigChannel+0x260>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	0c9a      	lsrs	r2, r3, #18
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003094:	e002      	b.n	800309c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3b01      	subs	r3, #1
 800309a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f9      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40012300 	.word	0x40012300
 80030bc:	40012000 	.word	0x40012000
 80030c0:	10000012 	.word	0x10000012
 80030c4:	20000008 	.word	0x20000008
 80030c8:	431bde83 	.word	0x431bde83

080030cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d4:	4b79      	ldr	r3, [pc, #484]	@ (80032bc <ADC_Init+0x1f0>)
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	021a      	lsls	r2, r3, #8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003146:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6899      	ldr	r1, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	4a58      	ldr	r2, [pc, #352]	@ (80032c0 <ADC_Init+0x1f4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d022      	beq.n	80031aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003172:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	e00f      	b.n	80031ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0202 	bic.w	r2, r2, #2
 80031d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7e1b      	ldrb	r3, [r3, #24]
 80031e4:	005a      	lsls	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01b      	beq.n	8003230 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003206:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003216:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	3b01      	subs	r3, #1
 8003224:	035a      	lsls	r2, r3, #13
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	e007      	b.n	8003240 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800324e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	3b01      	subs	r3, #1
 800325c:	051a      	lsls	r2, r3, #20
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003282:	025a      	lsls	r2, r3, #9
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800329a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6899      	ldr	r1, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	029a      	lsls	r2, r3, #10
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40012300 	.word	0x40012300
 80032c0:	0f000001 	.word	0x0f000001

080032c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d13c      	bne.n	8003358 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d12b      	bne.n	8003350 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d127      	bne.n	8003350 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800330a:	2b00      	cmp	r3, #0
 800330c:	d006      	beq.n	800331c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003318:	2b00      	cmp	r3, #0
 800331a:	d119      	bne.n	8003350 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0220 	bic.w	r2, r2, #32
 800332a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7fe fd01 	bl	8001d58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003356:	e00e      	b.n	8003376 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7ff fd75 	bl	8002e54 <HAL_ADC_ErrorCallback>
}
 800336a:	e004      	b.n	8003376 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fd57 	bl	8002e40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2240      	movs	r2, #64	@ 0x40
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f043 0204 	orr.w	r2, r3, #4
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff fd4a 	bl	8002e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0ed      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fe2e 	bl	8001048 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fc:	f7ff fb9c 	bl	8002b38 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003402:	e012      	b.n	800342a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003404:	f7ff fb98 	bl	8002b38 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b0a      	cmp	r3, #10
 8003410:	d90b      	bls.n	800342a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2205      	movs	r2, #5
 8003422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0c5      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0e5      	beq.n	8003404 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0202 	bic.w	r2, r2, #2
 8003446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003448:	f7ff fb76 	bl	8002b38 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800344e:	e012      	b.n	8003476 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003450:	f7ff fb72 	bl	8002b38 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b0a      	cmp	r3, #10
 800345c:	d90b      	bls.n	8003476 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2205      	movs	r2, #5
 800346e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e09f      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7e1b      	ldrb	r3, [r3, #24]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d108      	bne.n	800349e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e007      	b.n	80034ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7e5b      	ldrb	r3, [r3, #25]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d108      	bne.n	80034c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e007      	b.n	80034d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e9b      	ldrb	r3, [r3, #26]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0220 	orr.w	r2, r2, #32
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e007      	b.n	8003502 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0220 	bic.w	r2, r2, #32
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7edb      	ldrb	r3, [r3, #27]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0210 	bic.w	r2, r2, #16
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0210 	orr.w	r2, r2, #16
 800352a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7f1b      	ldrb	r3, [r3, #28]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e007      	b.n	8003556 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7f5b      	ldrb	r3, [r3, #29]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d108      	bne.n	8003570 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0204 	orr.w	r2, r2, #4
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e007      	b.n	8003580 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	ea42 0103 	orr.w	r1, r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	1e5a      	subs	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d003      	beq.n	80035e6 <HAL_CAN_ConfigFilter+0x26>
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	f040 80be 	bne.w	8003762 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035e6:	4b65      	ldr	r3, [pc, #404]	@ (800377c <HAL_CAN_ConfigFilter+0x1bc>)
 80035e8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003600:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	431a      	orrs	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	43db      	mvns	r3, r3
 8003638:	401a      	ands	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d123      	bne.n	8003690 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800366a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3248      	adds	r2, #72	@ 0x48
 8003670:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003684:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003686:	6979      	ldr	r1, [r7, #20]
 8003688:	3348      	adds	r3, #72	@ 0x48
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d122      	bne.n	80036de <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3248      	adds	r2, #72	@ 0x48
 80036be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036d4:	6979      	ldr	r1, [r7, #20]
 80036d6:	3348      	adds	r3, #72	@ 0x48
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	401a      	ands	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80036f8:	e007      	b.n	800370a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	431a      	orrs	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43db      	mvns	r3, r3
 800371c:	401a      	ands	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003724:	e007      	b.n	8003736 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	431a      	orrs	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	431a      	orrs	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003754:	f023 0201 	bic.w	r2, r3, #1
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e006      	b.n	8003770 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40006400 	.word	0x40006400

08003780 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d12e      	bne.n	80037f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ac:	f7ff f9c4 	bl	8002b38 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037b2:	e012      	b.n	80037da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b4:	f7ff f9c0 	bl	8002b38 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b0a      	cmp	r3, #10
 80037c0:	d90b      	bls.n	80037da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2205      	movs	r2, #5
 80037d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e012      	b.n	8003800 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e006      	b.n	8003800 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d133      	bne.n	8003884 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800382c:	f7ff f984 	bl	8002b38 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003832:	e012      	b.n	800385a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003834:	f7ff f980 	bl	8002b38 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b0a      	cmp	r3, #10
 8003840:	d90b      	bls.n	800385a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2205      	movs	r2, #5
 8003852:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e01b      	b.n	8003892 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0e5      	beq.n	8003834 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0202 	bic.w	r2, r2, #2
 8003876:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e006      	b.n	8003892 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800389a:	b480      	push	{r7}
 800389c:	b089      	sub	sp, #36	@ 0x24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038b8:	7ffb      	ldrb	r3, [r7, #31]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d003      	beq.n	80038c6 <HAL_CAN_AddTxMessage+0x2c>
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	f040 80ad 	bne.w	8003a20 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d105      	bne.n	80038e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8095 	beq.w	8003a10 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	0e1b      	lsrs	r3, r3, #24
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80038f0:	2201      	movs	r2, #1
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	409a      	lsls	r2, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800390c:	68f9      	ldr	r1, [r7, #12]
 800390e:	6809      	ldr	r1, [r1, #0]
 8003910:	431a      	orrs	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3318      	adds	r3, #24
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	440b      	add	r3, r1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e00f      	b.n	800393e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003928:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800392e:	68f9      	ldr	r1, [r7, #12]
 8003930:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003932:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3318      	adds	r3, #24
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	440b      	add	r3, r1
 800393c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3318      	adds	r3, #24
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	440b      	add	r3, r1
 800394e:	3304      	adds	r3, #4
 8003950:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	7d1b      	ldrb	r3, [r3, #20]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d111      	bne.n	800397e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3318      	adds	r3, #24
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	6811      	ldr	r1, [r2, #0]
 800396e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	3318      	adds	r3, #24
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	440b      	add	r3, r1
 800397a:	3304      	adds	r3, #4
 800397c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3307      	adds	r3, #7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	061a      	lsls	r2, r3, #24
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3306      	adds	r3, #6
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	041b      	lsls	r3, r3, #16
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3305      	adds	r3, #5
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	4313      	orrs	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	3204      	adds	r2, #4
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	4610      	mov	r0, r2
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	6811      	ldr	r1, [r2, #0]
 80039a6:	ea43 0200 	orr.w	r2, r3, r0
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	440b      	add	r3, r1
 80039b0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80039b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3303      	adds	r3, #3
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	061a      	lsls	r2, r3, #24
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3302      	adds	r3, #2
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3301      	adds	r3, #1
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	4313      	orrs	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	7812      	ldrb	r2, [r2, #0]
 80039d6:	4610      	mov	r0, r2
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	6811      	ldr	r1, [r2, #0]
 80039dc:	ea43 0200 	orr.w	r2, r3, r0
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	440b      	add	r3, r1
 80039e6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80039ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	3318      	adds	r3, #24
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4413      	add	r3, r2
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	6811      	ldr	r1, [r2, #0]
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	3318      	adds	r3, #24
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	440b      	add	r3, r1
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e00e      	b.n	8003a2e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e006      	b.n	8003a2e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	@ 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d003      	beq.n	8003a5e <HAL_CAN_GetRxMessage+0x24>
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	f040 8103 	bne.w	8003c64 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10e      	bne.n	8003a82 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d116      	bne.n	8003aa0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0f7      	b.n	8003c72 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0e8      	b.n	8003c72 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	331b      	adds	r3, #27
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4413      	add	r3, r2
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0204 	and.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	331b      	adds	r3, #27
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0d5b      	lsrs	r3, r3, #21
 8003ace:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e00b      	b.n	8003af0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	331b      	adds	r3, #27
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	08db      	lsrs	r3, r3, #3
 8003ae8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	331b      	adds	r3, #27
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	4413      	add	r3, r2
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0202 	and.w	r2, r3, #2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	331b      	adds	r3, #27
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2208      	movs	r2, #8
 8003b22:	611a      	str	r2, [r3, #16]
 8003b24:	e00b      	b.n	8003b3e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	331b      	adds	r3, #27
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	331b      	adds	r3, #27
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	4413      	add	r3, r2
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	331b      	adds	r3, #27
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4413      	add	r3, r2
 8003b62:	3304      	adds	r3, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0a1a      	lsrs	r2, r3, #8
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	0c1a      	lsrs	r2, r3, #16
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e1a      	lsrs	r2, r3, #24
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	3303      	adds	r3, #3
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	3304      	adds	r3, #4
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	0a1a      	lsrs	r2, r3, #8
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3305      	adds	r3, #5
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0c1a      	lsrs	r2, r3, #16
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3306      	adds	r3, #6
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0e1a      	lsrs	r2, r3, #24
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	3307      	adds	r3, #7
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0220 	orr.w	r2, r2, #32
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	e007      	b.n	8003c60 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0220 	orr.w	r2, r2, #32
 8003c5e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e006      	b.n	8003c72 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c92:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c94:	7afb      	ldrb	r3, [r7, #11]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d002      	beq.n	8003ca0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003c9a:	7afb      	ldrb	r3, [r7, #11]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d10f      	bne.n	8003cc0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	e005      	b.n	8003cc0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cde:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d002      	beq.n	8003cec <HAL_CAN_ActivateNotification+0x1e>
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d109      	bne.n	8003d00 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6959      	ldr	r1, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e006      	b.n	8003d0e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b08a      	sub	sp, #40	@ 0x28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d07c      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d023      	beq.n	8003db2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f983 	bl	8004088 <HAL_CAN_TxMailbox0CompleteCallback>
 8003d82:	e016      	b.n	8003db2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d96:	e00c      	b.n	8003db2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003daa:	e002      	b.n	8003db2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f989 	bl	80040c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d024      	beq.n	8003e06 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f963 	bl	800409c <HAL_CAN_TxMailbox1CompleteCallback>
 8003dd6:	e016      	b.n	8003e06 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dea:	e00c      	b.n	8003e06 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfe:	e002      	b.n	8003e06 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f969 	bl	80040d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d024      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f943 	bl	80040b0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e2a:	e016      	b.n	8003e5a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3e:	e00c      	b.n	8003e5a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e52:	e002      	b.n	8003e5a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f949 	bl	80040ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00b      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d006      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2208      	movs	r2, #8
 8003e98:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f930 	bl	8004100 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fe f947 	bl	800214c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00c      	beq.n	8003ee2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2210      	movs	r2, #16
 8003ee0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2208      	movs	r2, #8
 8003efc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f908 	bl	8004114 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fe f903 	bl	8002128 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8f2 	bl	8004128 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f8eb 	bl	800413c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d07b      	beq.n	8004068 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d072      	beq.n	8004060 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d043      	beq.n	8004060 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d03e      	beq.n	8004060 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fe8:	2b60      	cmp	r3, #96	@ 0x60
 8003fea:	d02b      	beq.n	8004044 <HAL_CAN_IRQHandler+0x32a>
 8003fec:	2b60      	cmp	r3, #96	@ 0x60
 8003fee:	d82e      	bhi.n	800404e <HAL_CAN_IRQHandler+0x334>
 8003ff0:	2b50      	cmp	r3, #80	@ 0x50
 8003ff2:	d022      	beq.n	800403a <HAL_CAN_IRQHandler+0x320>
 8003ff4:	2b50      	cmp	r3, #80	@ 0x50
 8003ff6:	d82a      	bhi.n	800404e <HAL_CAN_IRQHandler+0x334>
 8003ff8:	2b40      	cmp	r3, #64	@ 0x40
 8003ffa:	d019      	beq.n	8004030 <HAL_CAN_IRQHandler+0x316>
 8003ffc:	2b40      	cmp	r3, #64	@ 0x40
 8003ffe:	d826      	bhi.n	800404e <HAL_CAN_IRQHandler+0x334>
 8004000:	2b30      	cmp	r3, #48	@ 0x30
 8004002:	d010      	beq.n	8004026 <HAL_CAN_IRQHandler+0x30c>
 8004004:	2b30      	cmp	r3, #48	@ 0x30
 8004006:	d822      	bhi.n	800404e <HAL_CAN_IRQHandler+0x334>
 8004008:	2b10      	cmp	r3, #16
 800400a:	d002      	beq.n	8004012 <HAL_CAN_IRQHandler+0x2f8>
 800400c:	2b20      	cmp	r3, #32
 800400e:	d005      	beq.n	800401c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004010:	e01d      	b.n	800404e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	f043 0308 	orr.w	r3, r3, #8
 8004018:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800401a:	e019      	b.n	8004050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	f043 0310 	orr.w	r3, r3, #16
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004024:	e014      	b.n	8004050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	f043 0320 	orr.w	r3, r3, #32
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800402e:	e00f      	b.n	8004050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004038:	e00a      	b.n	8004050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004042:	e005      	b.n	8004050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800404c:	e000      	b.n	8004050 <HAL_CAN_IRQHandler+0x336>
            break;
 800404e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800405e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2204      	movs	r2, #4
 8004066:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f868 	bl	8004150 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004080:	bf00      	nop
 8004082:	3728      	adds	r7, #40	@ 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <__NVIC_SetPriorityGrouping>:
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004198:	4013      	ands	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ae:	4a04      	ldr	r2, [pc, #16]	@ (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	60d3      	str	r3, [r2, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <__NVIC_GetPriorityGrouping>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c8:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <__NVIC_GetPriorityGrouping+0x18>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 0307 	and.w	r3, r3, #7
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <__NVIC_EnableIRQ>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	db0b      	blt.n	800420a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4907      	ldr	r1, [pc, #28]	@ (8004218 <__NVIC_EnableIRQ+0x38>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2001      	movs	r0, #1
 8004202:	fa00 f202 	lsl.w	r2, r0, r2
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	@ (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	@ (800426c <__NVIC_SetPriority+0x50>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <NVIC_EncodePriority>:
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	@ 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0307 	rsb	r3, r3, #7
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf28      	it	cs
 800428e:	2304      	movcs	r3, #4
 8004290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3304      	adds	r3, #4
 8004296:	2b06      	cmp	r3, #6
 8004298:	d902      	bls.n	80042a0 <NVIC_EncodePriority+0x30>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3b03      	subs	r3, #3
 800429e:	e000      	b.n	80042a2 <NVIC_EncodePriority+0x32>
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43d9      	mvns	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	4313      	orrs	r3, r2
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	@ 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ff4c 	bl	800417c <__NVIC_SetPriorityGrouping>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042fe:	f7ff ff61 	bl	80041c4 <__NVIC_GetPriorityGrouping>
 8004302:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	6978      	ldr	r0, [r7, #20]
 800430a:	f7ff ffb1 	bl	8004270 <NVIC_EncodePriority>
 800430e:	4602      	mov	r2, r0
 8004310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004314:	4611      	mov	r1, r2
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ff80 	bl	800421c <__NVIC_SetPriority>
}
 800431c:	bf00      	nop
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff54 	bl	80041e0 <__NVIC_EnableIRQ>
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800434c:	f7fe fbf4 	bl	8002b38 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e099      	b.n	8004490 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800437c:	e00f      	b.n	800439e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800437e:	f7fe fbdb 	bl	8002b38 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b05      	cmp	r3, #5
 800438a:	d908      	bls.n	800439e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2203      	movs	r2, #3
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e078      	b.n	8004490 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e8      	bne.n	800437e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4b38      	ldr	r3, [pc, #224]	@ (8004498 <HAL_DMA_Init+0x158>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d107      	bne.n	8004408 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	4313      	orrs	r3, r2
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	2b04      	cmp	r3, #4
 8004430:	d117      	bne.n	8004462 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fa6f 	bl	8004928 <DMA_CheckFifoParam>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800445e:	2301      	movs	r3, #1
 8004460:	e016      	b.n	8004490 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa26 	bl	80048bc <DMA_CalcBaseAndBitshift>
 8004470:	4603      	mov	r3, r0
 8004472:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004478:	223f      	movs	r2, #63	@ 0x3f
 800447a:	409a      	lsls	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	f010803f 	.word	0xf010803f

0800449c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_DMA_Start_IT+0x26>
 80044be:	2302      	movs	r3, #2
 80044c0:	e040      	b.n	8004544 <HAL_DMA_Start_IT+0xa8>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d12f      	bne.n	8004536 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f9b8 	bl	8004860 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	223f      	movs	r2, #63	@ 0x3f
 80044f6:	409a      	lsls	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0216 	orr.w	r2, r2, #22
 800450a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e005      	b.n	8004542 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004558:	4b8e      	ldr	r3, [pc, #568]	@ (8004794 <HAL_DMA_IRQHandler+0x248>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a8e      	ldr	r2, [pc, #568]	@ (8004798 <HAL_DMA_IRQHandler+0x24c>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004576:	2208      	movs	r2, #8
 8004578:	409a      	lsls	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01a      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a4:	2208      	movs	r2, #8
 80045a6:	409a      	lsls	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f043 0201 	orr.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045bc:	2201      	movs	r2, #1
 80045be:	409a      	lsls	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d012      	beq.n	80045ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045da:	2201      	movs	r2, #1
 80045dc:	409a      	lsls	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f2:	2204      	movs	r2, #4
 80045f4:	409a      	lsls	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d012      	beq.n	8004624 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	2204      	movs	r2, #4
 8004612:	409a      	lsls	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004628:	2210      	movs	r2, #16
 800462a:	409a      	lsls	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d043      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d03c      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	2210      	movs	r2, #16
 8004648:	409a      	lsls	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d018      	beq.n	800468e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d024      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
 800467a:	e01f      	b.n	80046bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
 800468c:	e016      	b.n	80046bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d107      	bne.n	80046ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0208 	bic.w	r2, r2, #8
 80046aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c0:	2220      	movs	r2, #32
 80046c2:	409a      	lsls	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 808f 	beq.w	80047ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8087 	beq.w	80047ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e2:	2220      	movs	r2, #32
 80046e4:	409a      	lsls	r2, r3
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d136      	bne.n	8004764 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0216 	bic.w	r2, r2, #22
 8004704:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004714:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_DMA_IRQHandler+0x1da>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0208 	bic.w	r2, r2, #8
 8004734:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473a:	223f      	movs	r2, #63	@ 0x3f
 800473c:	409a      	lsls	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004756:	2b00      	cmp	r3, #0
 8004758:	d07e      	beq.n	8004858 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
        }
        return;
 8004762:	e079      	b.n	8004858 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01d      	beq.n	80047ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10d      	bne.n	800479c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	2b00      	cmp	r3, #0
 8004786:	d031      	beq.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
 8004790:	e02c      	b.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
 8004792:	bf00      	nop
 8004794:	20000008 	.word	0x20000008
 8004798:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d023      	beq.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
 80047ac:	e01e      	b.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10f      	bne.n	80047dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0210 	bic.w	r2, r2, #16
 80047ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d032      	beq.n	800485a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d022      	beq.n	8004846 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2205      	movs	r2, #5
 8004804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	3301      	adds	r3, #1
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	429a      	cmp	r2, r3
 8004822:	d307      	bcc.n	8004834 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f2      	bne.n	8004818 <HAL_DMA_IRQHandler+0x2cc>
 8004832:	e000      	b.n	8004836 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004834:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
 8004856:	e000      	b.n	800485a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004858:	bf00      	nop
    }
  }
}
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800487c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b40      	cmp	r3, #64	@ 0x40
 800488c:	d108      	bne.n	80048a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800489e:	e007      	b.n	80048b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	3b10      	subs	r3, #16
 80048cc:	4a14      	ldr	r2, [pc, #80]	@ (8004920 <DMA_CalcBaseAndBitshift+0x64>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048d6:	4a13      	ldr	r2, [pc, #76]	@ (8004924 <DMA_CalcBaseAndBitshift+0x68>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d909      	bls.n	80048fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80048fc:	e007      	b.n	800490e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	aaaaaaab 	.word	0xaaaaaaab
 8004924:	08010654 	.word	0x08010654

08004928 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d11f      	bne.n	8004982 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d856      	bhi.n	80049f6 <DMA_CheckFifoParam+0xce>
 8004948:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <DMA_CheckFifoParam+0x28>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004961 	.word	0x08004961
 8004954:	08004973 	.word	0x08004973
 8004958:	08004961 	.word	0x08004961
 800495c:	080049f7 	.word	0x080049f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d046      	beq.n	80049fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004970:	e043      	b.n	80049fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800497a:	d140      	bne.n	80049fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004980:	e03d      	b.n	80049fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498a:	d121      	bne.n	80049d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d837      	bhi.n	8004a02 <DMA_CheckFifoParam+0xda>
 8004992:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <DMA_CheckFifoParam+0x70>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049af 	.word	0x080049af
 80049a0:	080049a9 	.word	0x080049a9
 80049a4:	080049c1 	.word	0x080049c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	e030      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d025      	beq.n	8004a06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049be:	e022      	b.n	8004a06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049c8:	d11f      	bne.n	8004a0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049ce:	e01c      	b.n	8004a0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d903      	bls.n	80049de <DMA_CheckFifoParam+0xb6>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d003      	beq.n	80049e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049dc:	e018      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
      break;
 80049e2:	e015      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00e      	beq.n	8004a0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	e00b      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      break;
 80049f6:	bf00      	nop
 80049f8:	e00a      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
      break;
 80049fa:	bf00      	nop
 80049fc:	e008      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
      break;
 80049fe:	bf00      	nop
 8004a00:	e006      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
      break;
 8004a02:	bf00      	nop
 8004a04:	e004      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
      break;
 8004a06:	bf00      	nop
 8004a08:	e002      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a0a:	bf00      	nop
 8004a0c:	e000      	b.n	8004a10 <DMA_CheckFifoParam+0xe8>
      break;
 8004a0e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop

08004a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	@ 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	e165      	b.n	8004d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	f040 8154 	bne.w	8004d02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d005      	beq.n	8004a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d130      	bne.n	8004ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4013      	ands	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 0201 	and.w	r2, r3, #1
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d017      	beq.n	8004b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	2203      	movs	r2, #3
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d123      	bne.n	8004b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	08da      	lsrs	r2, r3, #3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3208      	adds	r2, #8
 8004b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	220f      	movs	r2, #15
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	08da      	lsrs	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3208      	adds	r2, #8
 8004b5e:	69b9      	ldr	r1, [r7, #24]
 8004b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	2203      	movs	r2, #3
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0203 	and.w	r2, r3, #3
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80ae 	beq.w	8004d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4b5d      	ldr	r3, [pc, #372]	@ (8004d20 <HAL_GPIO_Init+0x300>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	4a5c      	ldr	r2, [pc, #368]	@ (8004d20 <HAL_GPIO_Init+0x300>)
 8004bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bb6:	4b5a      	ldr	r3, [pc, #360]	@ (8004d20 <HAL_GPIO_Init+0x300>)
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bc2:	4a58      	ldr	r2, [pc, #352]	@ (8004d24 <HAL_GPIO_Init+0x304>)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	3302      	adds	r3, #2
 8004bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	220f      	movs	r2, #15
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a4f      	ldr	r2, [pc, #316]	@ (8004d28 <HAL_GPIO_Init+0x308>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d025      	beq.n	8004c3a <HAL_GPIO_Init+0x21a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8004d2c <HAL_GPIO_Init+0x30c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01f      	beq.n	8004c36 <HAL_GPIO_Init+0x216>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a4d      	ldr	r2, [pc, #308]	@ (8004d30 <HAL_GPIO_Init+0x310>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d019      	beq.n	8004c32 <HAL_GPIO_Init+0x212>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a4c      	ldr	r2, [pc, #304]	@ (8004d34 <HAL_GPIO_Init+0x314>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_GPIO_Init+0x20e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a4b      	ldr	r2, [pc, #300]	@ (8004d38 <HAL_GPIO_Init+0x318>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00d      	beq.n	8004c2a <HAL_GPIO_Init+0x20a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a4a      	ldr	r2, [pc, #296]	@ (8004d3c <HAL_GPIO_Init+0x31c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <HAL_GPIO_Init+0x206>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a49      	ldr	r2, [pc, #292]	@ (8004d40 <HAL_GPIO_Init+0x320>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_GPIO_Init+0x202>
 8004c1e:	2306      	movs	r3, #6
 8004c20:	e00c      	b.n	8004c3c <HAL_GPIO_Init+0x21c>
 8004c22:	2307      	movs	r3, #7
 8004c24:	e00a      	b.n	8004c3c <HAL_GPIO_Init+0x21c>
 8004c26:	2305      	movs	r3, #5
 8004c28:	e008      	b.n	8004c3c <HAL_GPIO_Init+0x21c>
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	e006      	b.n	8004c3c <HAL_GPIO_Init+0x21c>
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e004      	b.n	8004c3c <HAL_GPIO_Init+0x21c>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e002      	b.n	8004c3c <HAL_GPIO_Init+0x21c>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_GPIO_Init+0x21c>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	f002 0203 	and.w	r2, r2, #3
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	4093      	lsls	r3, r2
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c4c:	4935      	ldr	r1, [pc, #212]	@ (8004d24 <HAL_GPIO_Init+0x304>)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	3302      	adds	r3, #2
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	43db      	mvns	r3, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4013      	ands	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c7e:	4a31      	ldr	r2, [pc, #196]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c84:	4b2f      	ldr	r3, [pc, #188]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ca8:	4a26      	ldr	r2, [pc, #152]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cae:	4b25      	ldr	r3, [pc, #148]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cfc:	4a11      	ldr	r2, [pc, #68]	@ (8004d44 <HAL_GPIO_Init+0x324>)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3301      	adds	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b0f      	cmp	r3, #15
 8004d0c:	f67f ae96 	bls.w	8004a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3724      	adds	r7, #36	@ 0x24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40013800 	.word	0x40013800
 8004d28:	40020000 	.word	0x40020000
 8004d2c:	40020400 	.word	0x40020400
 8004d30:	40020800 	.word	0x40020800
 8004d34:	40020c00 	.word	0x40020c00
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40021400 	.word	0x40021400
 8004d40:	40021800 	.word	0x40021800
 8004d44:	40013c00 	.word	0x40013c00

08004d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
 8004d54:	4613      	mov	r3, r2
 8004d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d58:	787b      	ldrb	r3, [r7, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d5e:	887a      	ldrh	r2, [r7, #2]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d64:	e003      	b.n	8004d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d66:	887b      	ldrh	r3, [r7, #2]
 8004d68:	041a      	lsls	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	619a      	str	r2, [r3, #24]
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b086      	sub	sp, #24
 8004d7e:	af02      	add	r7, sp, #8
 8004d80:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e108      	b.n	8004f9e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fd fdfc 	bl	80029a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2203      	movs	r2, #3
 8004db0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dba:	d102      	bne.n	8004dc2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f003 fe2f 	bl	8008a2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7c1a      	ldrb	r2, [r3, #16]
 8004dd4:	f88d 2000 	strb.w	r2, [sp]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ddc:	f003 fd0e 	bl	80087fc <USB_CoreInit>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e0d5      	b.n	8004f9e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2100      	movs	r1, #0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f003 fe27 	bl	8008a4c <USB_SetCurrentMode>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0c6      	b.n	8004f9e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	73fb      	strb	r3, [r7, #15]
 8004e14:	e04a      	b.n	8004eac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e16:	7bfa      	ldrb	r2, [r7, #15]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	3315      	adds	r3, #21
 8004e26:	2201      	movs	r2, #1
 8004e28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	3314      	adds	r3, #20
 8004e3a:	7bfa      	ldrb	r2, [r7, #15]
 8004e3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e3e:	7bfa      	ldrb	r2, [r7, #15]
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	b298      	uxth	r0, r3
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	332e      	adds	r3, #46	@ 0x2e
 8004e52:	4602      	mov	r2, r0
 8004e54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	3318      	adds	r3, #24
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e6a:	7bfa      	ldrb	r2, [r7, #15]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	331c      	adds	r3, #28
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e7e:	7bfa      	ldrb	r2, [r7, #15]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3320      	adds	r3, #32
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e92:	7bfa      	ldrb	r2, [r7, #15]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3324      	adds	r3, #36	@ 0x24
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	791b      	ldrb	r3, [r3, #4]
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3af      	bcc.n	8004e16 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	e044      	b.n	8004f46 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ebc:	7bfa      	ldrb	r2, [r7, #15]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ed2:	7bfa      	ldrb	r2, [r7, #15]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ee4:	7bfa      	ldrb	r2, [r7, #15]
 8004ee6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ee8:	7bfa      	ldrb	r2, [r7, #15]
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004efe:	7bfa      	ldrb	r2, [r7, #15]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f14:	7bfa      	ldrb	r2, [r7, #15]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	3301      	adds	r3, #1
 8004f44:	73fb      	strb	r3, [r7, #15]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	791b      	ldrb	r3, [r3, #4]
 8004f4a:	7bfa      	ldrb	r2, [r7, #15]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d3b5      	bcc.n	8004ebc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7c1a      	ldrb	r2, [r3, #16]
 8004f58:	f88d 2000 	strb.w	r2, [sp]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f60:	f003 fdc0 	bl	8008ae4 <USB_DevInit>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e013      	b.n	8004f9e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	7b1b      	ldrb	r3, [r3, #12]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 f96f 	bl	8006270 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f004 fdfd 	bl	8009b96 <USB_DevDisconnect>

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_PCD_Start+0x1c>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e022      	b.n	8005008 <HAL_PCD_Start+0x62>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d105      	bne.n	8004fea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f003 fd0a 	bl	8008a08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f004 fdab 	bl	8009b54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b08d      	sub	sp, #52	@ 0x34
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f004 fe69 	bl	8009cfe <USB_GetMode>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 84b9 	bne.w	80059a6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f004 fdcd 	bl	8009bd8 <USB_ReadInterrupts>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 84af 	beq.w	80059a4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f004 fdba 	bl	8009bd8 <USB_ReadInterrupts>
 8005064:	4603      	mov	r3, r0
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d107      	bne.n	800507e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f002 0202 	and.w	r2, r2, #2
 800507c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f004 fda8 	bl	8009bd8 <USB_ReadInterrupts>
 8005088:	4603      	mov	r3, r0
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b10      	cmp	r3, #16
 8005090:	d161      	bne.n	8005156 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699a      	ldr	r2, [r3, #24]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0210 	bic.w	r2, r2, #16
 80050a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f003 020f 	and.w	r2, r3, #15
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	3304      	adds	r3, #4
 80050c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	0c5b      	lsrs	r3, r3, #17
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d124      	bne.n	8005118 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d035      	beq.n	8005146 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	6a38      	ldr	r0, [r7, #32]
 80050ee:	f004 fbdf 	bl	80098b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050fe:	441a      	add	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	091b      	lsrs	r3, r3, #4
 800510c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005110:	441a      	add	r2, r3
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	615a      	str	r2, [r3, #20]
 8005116:	e016      	b.n	8005146 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	0c5b      	lsrs	r3, r3, #17
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	2b06      	cmp	r3, #6
 8005122:	d110      	bne.n	8005146 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800512a:	2208      	movs	r2, #8
 800512c:	4619      	mov	r1, r3
 800512e:	6a38      	ldr	r0, [r7, #32]
 8005130:	f004 fbbe 	bl	80098b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005140:	441a      	add	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0210 	orr.w	r2, r2, #16
 8005154:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f004 fd3c 	bl	8009bd8 <USB_ReadInterrupts>
 8005160:	4603      	mov	r3, r0
 8005162:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005166:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800516a:	f040 80a7 	bne.w	80052bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f004 fd41 	bl	8009bfe <USB_ReadDevAllOutEpInterrupt>
 800517c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800517e:	e099      	b.n	80052b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 808e 	beq.w	80052a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f004 fd65 	bl	8009c66 <USB_ReadDevOutEPInterrupt>
 800519c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00c      	beq.n	80051c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	2301      	movs	r3, #1
 80051b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fed1 	bl	8005f64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00c      	beq.n	80051e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d8:	461a      	mov	r2, r3
 80051da:	2308      	movs	r3, #8
 80051dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 ffa7 	bl	8006134 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2310      	movs	r3, #16
 8005200:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d030      	beq.n	800526e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005214:	2b80      	cmp	r3, #128	@ 0x80
 8005216:	d109      	bne.n	800522c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800522a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800522c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522e:	4613      	mov	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	3304      	adds	r3, #4
 8005240:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	78db      	ldrb	r3, [r3, #3]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d108      	bne.n	800525c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2200      	movs	r2, #0
 800524e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	b2db      	uxtb	r3, r3
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f007 fe24 	bl	800cea4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005268:	461a      	mov	r2, r3
 800526a:	2302      	movs	r3, #2
 800526c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005284:	461a      	mov	r2, r3
 8005286:	2320      	movs	r3, #32
 8005288:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d009      	beq.n	80052a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a0:	461a      	mov	r2, r3
 80052a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	3301      	adds	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f47f af62 	bne.w	8005180 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f004 fc89 	bl	8009bd8 <USB_ReadInterrupts>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052d0:	f040 80db 	bne.w	800548a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f004 fcaa 	bl	8009c32 <USB_ReadDevAllInEpInterrupt>
 80052de:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80052e4:	e0cd      	b.n	8005482 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80c2 	beq.w	8005476 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f004 fcd0 	bl	8009ca2 <USB_ReadDevInEPInterrupt>
 8005302:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d057      	beq.n	80053be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	2201      	movs	r2, #1
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	43db      	mvns	r3, r3
 8005328:	69f9      	ldr	r1, [r7, #28]
 800532a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800532e:	4013      	ands	r3, r2
 8005330:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533e:	461a      	mov	r2, r3
 8005340:	2301      	movs	r3, #1
 8005342:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	799b      	ldrb	r3, [r3, #6]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d132      	bne.n	80053b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	3320      	adds	r3, #32
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4403      	add	r3, r0
 800536c:	331c      	adds	r3, #28
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4419      	add	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4403      	add	r3, r0
 8005380:	3320      	adds	r3, #32
 8005382:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d113      	bne.n	80053b2 <HAL_PCD_IRQHandler+0x3a2>
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800538e:	4613      	mov	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3324      	adds	r3, #36	@ 0x24
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d108      	bne.n	80053b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053aa:	461a      	mov	r2, r3
 80053ac:	2101      	movs	r1, #1
 80053ae:	f004 fcd7 	bl	8009d60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f007 fcee 	bl	800cd9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d4:	461a      	mov	r2, r3
 80053d6:	2308      	movs	r3, #8
 80053d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	461a      	mov	r2, r3
 80053f2:	2310      	movs	r3, #16
 80053f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540c:	461a      	mov	r2, r3
 800540e:	2340      	movs	r3, #64	@ 0x40
 8005410:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d023      	beq.n	8005464 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800541c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800541e:	6a38      	ldr	r0, [r7, #32]
 8005420:	f003 fcbe 	bl	8008da0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005426:	4613      	mov	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	3310      	adds	r3, #16
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	3304      	adds	r3, #4
 8005436:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	78db      	ldrb	r3, [r3, #3]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d108      	bne.n	8005452 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	b2db      	uxtb	r3, r3
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f007 fd3b 	bl	800cec8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800545e:	461a      	mov	r2, r3
 8005460:	2302      	movs	r3, #2
 8005462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800546e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fcea 	bl	8005e4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	3301      	adds	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	f47f af2e 	bne.w	80052e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f004 fba2 	bl	8009bd8 <USB_ReadInterrupts>
 8005494:	4603      	mov	r3, r0
 8005496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800549a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800549e:	d122      	bne.n	80054e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d108      	bne.n	80054d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054c6:	2100      	movs	r1, #0
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fef5 	bl	80062b8 <HAL_PCDEx_LPM_Callback>
 80054ce:	e002      	b.n	80054d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f007 fcd9 	bl	800ce88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80054e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f004 fb74 	bl	8009bd8 <USB_ReadInterrupts>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054fa:	d112      	bne.n	8005522 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d102      	bne.n	8005512 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f007 fc95 	bl	800ce3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005520:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f004 fb56 	bl	8009bd8 <USB_ReadInterrupts>
 800552c:	4603      	mov	r3, r0
 800552e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005536:	d121      	bne.n	800557c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005546:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800554e:	2b00      	cmp	r3, #0
 8005550:	d111      	bne.n	8005576 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005560:	089b      	lsrs	r3, r3, #2
 8005562:	f003 020f 	and.w	r2, r3, #15
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800556c:	2101      	movs	r1, #1
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fea2 	bl	80062b8 <HAL_PCDEx_LPM_Callback>
 8005574:	e002      	b.n	800557c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f007 fc60 	bl	800ce3c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f004 fb29 	bl	8009bd8 <USB_ReadInterrupts>
 8005586:	4603      	mov	r3, r0
 8005588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800558c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005590:	f040 80b7 	bne.w	8005702 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2110      	movs	r1, #16
 80055ae:	4618      	mov	r0, r3
 80055b0:	f003 fbf6 	bl	8008da0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b8:	e046      	b.n	8005648 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80055ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c6:	461a      	mov	r2, r3
 80055c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fa:	461a      	mov	r2, r3
 80055fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005600:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800561c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005620:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800563c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005640:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	3301      	adds	r3, #1
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	791b      	ldrb	r3, [r3, #4]
 800564c:	461a      	mov	r2, r3
 800564e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005650:	4293      	cmp	r3, r2
 8005652:	d3b2      	bcc.n	80055ba <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005662:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005666:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	7bdb      	ldrb	r3, [r3, #15]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d016      	beq.n	800569e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005680:	f043 030b 	orr.w	r3, r3, #11
 8005684:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005696:	f043 030b 	orr.w	r3, r3, #11
 800569a:	6453      	str	r3, [r2, #68]	@ 0x44
 800569c:	e015      	b.n	80056ca <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80056b0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80056b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056c4:	f043 030b 	orr.w	r3, r3, #11
 80056c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056d8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80056dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056ec:	461a      	mov	r2, r3
 80056ee:	f004 fb37 	bl	8009d60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695a      	ldr	r2, [r3, #20]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f004 fa66 	bl	8009bd8 <USB_ReadInterrupts>
 800570c:	4603      	mov	r3, r0
 800570e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005716:	d123      	bne.n	8005760 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f004 fafc 	bl	8009d1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f003 fbb3 	bl	8008e92 <USB_GetDevSpeed>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681c      	ldr	r4, [r3, #0]
 8005738:	f000 feb0 	bl	800649c <HAL_RCC_GetHCLKFreq>
 800573c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005742:	461a      	mov	r2, r3
 8005744:	4620      	mov	r0, r4
 8005746:	f003 f8bd 	bl	80088c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f007 fb4d 	bl	800cdea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800575e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f004 fa37 	bl	8009bd8 <USB_ReadInterrupts>
 800576a:	4603      	mov	r3, r0
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d10a      	bne.n	800578a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f007 fb2a 	bl	800cdce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f002 0208 	and.w	r2, r2, #8
 8005788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f004 fa22 	bl	8009bd8 <USB_ReadInterrupts>
 8005794:	4603      	mov	r3, r0
 8005796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579a:	2b80      	cmp	r3, #128	@ 0x80
 800579c:	d123      	bne.n	80057e6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057aa:	2301      	movs	r3, #1
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ae:	e014      	b.n	80057da <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d105      	bne.n	80057d4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb0a 	bl	8005de8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	3301      	adds	r3, #1
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	791b      	ldrb	r3, [r3, #4]
 80057de:	461a      	mov	r2, r3
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d3e4      	bcc.n	80057b0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f004 f9f4 	bl	8009bd8 <USB_ReadInterrupts>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057fa:	d13c      	bne.n	8005876 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057fc:	2301      	movs	r3, #1
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005800:	e02b      	b.n	800585a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3318      	adds	r3, #24
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d115      	bne.n	8005854 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005828:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800582a:	2b00      	cmp	r3, #0
 800582c:	da12      	bge.n	8005854 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	3317      	adds	r3, #23
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800584a:	b2db      	uxtb	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 faca 	bl	8005de8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	3301      	adds	r3, #1
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	791b      	ldrb	r3, [r3, #4]
 800585e:	461a      	mov	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	4293      	cmp	r3, r2
 8005864:	d3cd      	bcc.n	8005802 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f004 f9ac 	bl	8009bd8 <USB_ReadInterrupts>
 8005880:	4603      	mov	r3, r0
 8005882:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800588a:	d156      	bne.n	800593a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800588c:	2301      	movs	r3, #1
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005890:	e045      	b.n	800591e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d12e      	bne.n	8005918 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da2b      	bge.n	8005918 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80058cc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d121      	bne.n	8005918 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d8:	4613      	mov	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005910:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005914:	6053      	str	r3, [r2, #4]
            break;
 8005916:	e008      	b.n	800592a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	791b      	ldrb	r3, [r3, #4]
 8005922:	461a      	mov	r2, r3
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	4293      	cmp	r3, r2
 8005928:	d3b3      	bcc.n	8005892 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695a      	ldr	r2, [r3, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f004 f94a 	bl	8009bd8 <USB_ReadInterrupts>
 8005944:	4603      	mov	r3, r0
 8005946:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594e:	d10a      	bne.n	8005966 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f007 facb 	bl	800ceec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f004 f934 	bl	8009bd8 <USB_ReadInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b04      	cmp	r3, #4
 8005978:	d115      	bne.n	80059a6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f007 fabb 	bl	800cf08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
 80059a2:	e000      	b.n	80059a6 <HAL_PCD_IRQHandler+0x996>
      return;
 80059a4:	bf00      	nop
    }
  }
}
 80059a6:	3734      	adds	r7, #52	@ 0x34
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}

080059ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_PCD_SetAddress+0x1a>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e012      	b.n	80059ec <HAL_PCD_SetAddress+0x40>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	78fa      	ldrb	r2, [r7, #3]
 80059d2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f004 f893 	bl	8009b08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	4608      	mov	r0, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	70fb      	strb	r3, [r7, #3]
 8005a06:	460b      	mov	r3, r1
 8005a08:	803b      	strh	r3, [r7, #0]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da0f      	bge.n	8005a3a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	f003 020f 	and.w	r2, r3, #15
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	3310      	adds	r3, #16
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3304      	adds	r3, #4
 8005a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	705a      	strb	r2, [r3, #1]
 8005a38:	e00f      	b.n	8005a5a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	4413      	add	r3, r2
 8005a50:	3304      	adds	r3, #4
 8005a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005a66:	883b      	ldrh	r3, [r7, #0]
 8005a68:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	78ba      	ldrb	r2, [r7, #2]
 8005a74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a88:	78bb      	ldrb	r3, [r7, #2]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d102      	bne.n	8005a94 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_PCD_EP_Open+0xae>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e00e      	b.n	8005ac0 <HAL_PCD_EP_Open+0xcc>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f003 fa13 	bl	8008edc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005abe:	7afb      	ldrb	r3, [r7, #11]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	da0f      	bge.n	8005afc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3310      	adds	r3, #16
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	3304      	adds	r3, #4
 8005af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	705a      	strb	r2, [r3, #1]
 8005afa:	e00f      	b.n	8005b1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	3304      	adds	r3, #4
 8005b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_PCD_EP_Close+0x6e>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e00e      	b.n	8005b54 <HAL_PCD_EP_Close+0x8c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f003 fa51 	bl	8008fec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b6c:	7afb      	ldrb	r3, [r7, #11]
 8005b6e:	f003 020f 	and.w	r2, r3, #15
 8005b72:	4613      	mov	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	3304      	adds	r3, #4
 8005b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b9e:	7afb      	ldrb	r3, [r7, #11]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	799b      	ldrb	r3, [r3, #6]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	799b      	ldrb	r3, [r3, #6]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	f003 faee 	bl	80091a4 <USB_EPStartXfer>

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	f003 020f 	and.w	r2, r3, #15
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005bf4:	681b      	ldr	r3, [r3, #0]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	3310      	adds	r3, #16
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	3304      	adds	r3, #4
 8005c28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	799b      	ldrb	r3, [r3, #6]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d102      	bne.n	8005c5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	799b      	ldrb	r3, [r3, #6]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	f003 fa9c 	bl	80091a4 <USB_EPStartXfer>

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	7912      	ldrb	r2, [r2, #4]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d901      	bls.n	8005c94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e04f      	b.n	8005d34 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	da0f      	bge.n	8005cbc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	f003 020f 	and.w	r2, r3, #15
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	3310      	adds	r3, #16
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	705a      	strb	r2, [r3, #1]
 8005cba:	e00d      	b.n	8005cd8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	3304      	adds	r3, #4
 8005cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_PCD_EP_SetStall+0x82>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e01d      	b.n	8005d34 <HAL_PCD_EP_SetStall+0xbe>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f003 fe2a 	bl	8009960 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7999      	ldrb	r1, [r3, #6]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d24:	461a      	mov	r2, r3
 8005d26:	f004 f81b 	bl	8009d60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	7912      	ldrb	r2, [r2, #4]
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e042      	b.n	8005de0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da0f      	bge.n	8005d82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	f003 020f 	and.w	r2, r3, #15
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	3310      	adds	r3, #16
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	3304      	adds	r3, #4
 8005d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	705a      	strb	r2, [r3, #1]
 8005d80:	e00f      	b.n	8005da2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	4613      	mov	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	4413      	add	r3, r2
 8005d98:	3304      	adds	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_PCD_EP_ClrStall+0x86>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e00e      	b.n	8005de0 <HAL_PCD_EP_ClrStall+0xa4>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f003 fe33 	bl	8009a3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	da0c      	bge.n	8005e16 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	f003 020f 	and.w	r2, r3, #15
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	3310      	adds	r3, #16
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	3304      	adds	r3, #4
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e00c      	b.n	8005e30 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68f9      	ldr	r1, [r7, #12]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f003 fc52 	bl	80096e0 <USB_EPStopXfer>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b08a      	sub	sp, #40	@ 0x28
 8005e4e:	af02      	add	r7, sp, #8
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	3310      	adds	r3, #16
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	3304      	adds	r3, #4
 8005e70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d901      	bls.n	8005e82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e06b      	b.n	8005f5a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d902      	bls.n	8005e9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	3303      	adds	r3, #3
 8005ea2:	089b      	lsrs	r3, r3, #2
 8005ea4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ea6:	e02a      	b.n	8005efe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d902      	bls.n	8005ec4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	3303      	adds	r3, #3
 8005ec8:	089b      	lsrs	r3, r3, #2
 8005eca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68d9      	ldr	r1, [r3, #12]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6978      	ldr	r0, [r7, #20]
 8005ee2:	f003 fca7 	bl	8009834 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	441a      	add	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	441a      	add	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d809      	bhi.n	8005f28 <PCD_WriteEmptyTxFifo+0xde>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d203      	bcs.n	8005f28 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1bf      	bne.n	8005ea8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d811      	bhi.n	8005f58 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	6939      	ldr	r1, [r7, #16]
 8005f50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f54:	4013      	ands	r3, r2
 8005f56:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	333c      	adds	r3, #60	@ 0x3c
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	799b      	ldrb	r3, [r3, #6]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d17b      	bne.n	8006092 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	4a61      	ldr	r2, [pc, #388]	@ (800612c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	f240 80b9 	bls.w	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80b3 	beq.w	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fcc:	6093      	str	r3, [r2, #8]
 8005fce:	e0a7      	b.n	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2320      	movs	r3, #32
 8005fea:	6093      	str	r3, [r2, #8]
 8005fec:	e098      	b.n	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 8093 	bne.w	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4a4b      	ldr	r2, [pc, #300]	@ (800612c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d90f      	bls.n	8006022 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006018:	461a      	mov	r2, r3
 800601a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800601e:	6093      	str	r3, [r2, #8]
 8006020:	e07e      	b.n	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	4413      	add	r3, r2
 8006034:	3304      	adds	r3, #4
 8006036:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1a      	ldr	r2, [r3, #32]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	0159      	lsls	r1, r3, #5
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	440b      	add	r3, r1
 8006044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d114      	bne.n	8006084 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800606c:	461a      	mov	r2, r3
 800606e:	2101      	movs	r1, #1
 8006070:	f003 fe76 	bl	8009d60 <USB_EP0_OutStart>
 8006074:	e006      	b.n	8006084 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	441a      	add	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f006 fe6a 	bl	800cd64 <HAL_PCD_DataOutStageCallback>
 8006090:	e046      	b.n	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	4a26      	ldr	r2, [pc, #152]	@ (8006130 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d124      	bne.n	80060e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b0:	461a      	mov	r2, r3
 80060b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060b6:	6093      	str	r3, [r2, #8]
 80060b8:	e032      	b.n	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d0:	461a      	mov	r2, r3
 80060d2:	2320      	movs	r3, #32
 80060d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f006 fe41 	bl	800cd64 <HAL_PCD_DataOutStageCallback>
 80060e2:	e01d      	b.n	8006120 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d114      	bne.n	8006114 <PCD_EP_OutXfrComplete_int+0x1b0>
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800610c:	461a      	mov	r2, r3
 800610e:	2100      	movs	r1, #0
 8006110:	f003 fe26 	bl	8009d60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f006 fe22 	bl	800cd64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	4f54300a 	.word	0x4f54300a
 8006130:	4f54310a 	.word	0x4f54310a

08006134 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	333c      	adds	r3, #60	@ 0x3c
 800614c:	3304      	adds	r3, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4a15      	ldr	r2, [pc, #84]	@ (80061bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d90e      	bls.n	8006188 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006180:	461a      	mov	r2, r3
 8006182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006186:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f006 fdd9 	bl	800cd40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a0a      	ldr	r2, [pc, #40]	@ (80061bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d90c      	bls.n	80061b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	799b      	ldrb	r3, [r3, #6]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d108      	bne.n	80061b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061a8:	461a      	mov	r2, r3
 80061aa:	2101      	movs	r1, #1
 80061ac:	f003 fdd8 	bl	8009d60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	4f54300a 	.word	0x4f54300a

080061c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
 80061cc:	4613      	mov	r3, r2
 80061ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d107      	bne.n	80061ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061de:	883b      	ldrh	r3, [r7, #0]
 80061e0:	0419      	lsls	r1, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ec:	e028      	b.n	8006240 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4413      	add	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061fc:	2300      	movs	r3, #0
 80061fe:	73fb      	strb	r3, [r7, #15]
 8006200:	e00d      	b.n	800621e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	3340      	adds	r3, #64	@ 0x40
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	0c1b      	lsrs	r3, r3, #16
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	4413      	add	r3, r2
 8006216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	3301      	adds	r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	7bfa      	ldrb	r2, [r7, #15]
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	3b01      	subs	r3, #1
 8006224:	429a      	cmp	r2, r3
 8006226:	d3ec      	bcc.n	8006202 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006228:	883b      	ldrh	r3, [r7, #0]
 800622a:	0418      	lsls	r0, r3, #16
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	3b01      	subs	r3, #1
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	4302      	orrs	r2, r0
 8006238:	3340      	adds	r3, #64	@ 0x40
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	460b      	mov	r3, r1
 8006258:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	887a      	ldrh	r2, [r7, #2]
 8006260:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062a2:	f043 0303 	orr.w	r3, r3, #3
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0cc      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062e4:	4b68      	ldr	r3, [pc, #416]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d90c      	bls.n	800630c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f2:	4b65      	ldr	r3, [pc, #404]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fa:	4b63      	ldr	r3, [pc, #396]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0b8      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d020      	beq.n	800635a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006324:	4b59      	ldr	r3, [pc, #356]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a58      	ldr	r2, [pc, #352]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800632e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800633c:	4b53      	ldr	r3, [pc, #332]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4a52      	ldr	r2, [pc, #328]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006348:	4b50      	ldr	r3, [pc, #320]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	494d      	ldr	r1, [pc, #308]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d044      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d107      	bne.n	800637e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636e:	4b47      	ldr	r3, [pc, #284]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d119      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e07f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d003      	beq.n	800638e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800638a:	2b03      	cmp	r3, #3
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638e:	4b3f      	ldr	r3, [pc, #252]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e06f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639e:	4b3b      	ldr	r3, [pc, #236]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e067      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ae:	4b37      	ldr	r3, [pc, #220]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4934      	ldr	r1, [pc, #208]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063c0:	f7fc fbba 	bl	8002b38 <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	e00a      	b.n	80063de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c8:	f7fc fbb6 	bl	8002b38 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063de:	4b2b      	ldr	r3, [pc, #172]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 020c 	and.w	r2, r3, #12
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1eb      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063f0:	4b25      	ldr	r3, [pc, #148]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d20c      	bcs.n	8006418 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b22      	ldr	r3, [pc, #136]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b20      	ldr	r3, [pc, #128]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e032      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006424:	4b19      	ldr	r3, [pc, #100]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4916      	ldr	r1, [pc, #88]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006442:	4b12      	ldr	r3, [pc, #72]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	490e      	ldr	r1, [pc, #56]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006456:	f000 fb9d 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 800645a:	4602      	mov	r2, r0
 800645c:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	490a      	ldr	r1, [pc, #40]	@ (8006490 <HAL_RCC_ClockConfig+0x1c0>)
 8006468:	5ccb      	ldrb	r3, [r1, r3]
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	4a09      	ldr	r2, [pc, #36]	@ (8006494 <HAL_RCC_ClockConfig+0x1c4>)
 8006470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006472:	4b09      	ldr	r3, [pc, #36]	@ (8006498 <HAL_RCC_ClockConfig+0x1c8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7fb febe 	bl	80021f8 <HAL_InitTick>

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40023c00 	.word	0x40023c00
 800648c:	40023800 	.word	0x40023800
 8006490:	0801063c 	.word	0x0801063c
 8006494:	20000008 	.word	0x20000008
 8006498:	2000000c 	.word	0x2000000c

0800649c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064a0:	4b03      	ldr	r3, [pc, #12]	@ (80064b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064a2:	681b      	ldr	r3, [r3, #0]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20000008 	.word	0x20000008

080064b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064b8:	f7ff fff0 	bl	800649c <HAL_RCC_GetHCLKFreq>
 80064bc:	4602      	mov	r2, r0
 80064be:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	0a9b      	lsrs	r3, r3, #10
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	4903      	ldr	r1, [pc, #12]	@ (80064d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ca:	5ccb      	ldrb	r3, [r1, r3]
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40023800 	.word	0x40023800
 80064d8:	0801064c 	.word	0x0801064c

080064dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	220f      	movs	r2, #15
 80064ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064ec:	4b12      	ldr	r3, [pc, #72]	@ (8006538 <HAL_RCC_GetClockConfig+0x5c>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0203 	and.w	r2, r3, #3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006538 <HAL_RCC_GetClockConfig+0x5c>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006504:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <HAL_RCC_GetClockConfig+0x5c>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006510:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <HAL_RCC_GetClockConfig+0x5c>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	08db      	lsrs	r3, r3, #3
 8006516:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800651e:	4b07      	ldr	r3, [pc, #28]	@ (800653c <HAL_RCC_GetClockConfig+0x60>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 020f 	and.w	r2, r3, #15
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	601a      	str	r2, [r3, #0]
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800
 800653c:	40023c00 	.word	0x40023c00

08006540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08c      	sub	sp, #48	@ 0x30
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d010      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006578:	4b6f      	ldr	r3, [pc, #444]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800657a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800657e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	496c      	ldr	r1, [pc, #432]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006596:	2301      	movs	r3, #1
 8006598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d010      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80065a6:	4b64      	ldr	r3, [pc, #400]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ac:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b4:	4960      	ldr	r1, [pc, #384]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80065c4:	2301      	movs	r3, #1
 80065c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d017      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065d4:	4b58      	ldr	r3, [pc, #352]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e2:	4955      	ldr	r1, [pc, #340]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065f2:	d101      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80065f4:	2301      	movs	r3, #1
 80065f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006600:	2301      	movs	r3, #1
 8006602:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d017      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006610:	4b49      	ldr	r3, [pc, #292]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006616:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661e:	4946      	ldr	r1, [pc, #280]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800662a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800662e:	d101      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006630:	2301      	movs	r3, #1
 8006632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800663c:	2301      	movs	r3, #1
 800663e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 808a 	beq.w	8006762 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	4b39      	ldr	r3, [pc, #228]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006656:	4a38      	ldr	r2, [pc, #224]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800665c:	6413      	str	r3, [r2, #64]	@ 0x40
 800665e:	4b36      	ldr	r3, [pc, #216]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006666:	60bb      	str	r3, [r7, #8]
 8006668:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800666a:	4b34      	ldr	r3, [pc, #208]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a33      	ldr	r2, [pc, #204]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006674:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006676:	f7fc fa5f 	bl	8002b38 <HAL_GetTick>
 800667a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800667e:	f7fc fa5b 	bl	8002b38 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e278      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006690:	4b2a      	ldr	r3, [pc, #168]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0f0      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800669c:	4b26      	ldr	r3, [pc, #152]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800669e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066a4:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d02f      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066b4:	6a3a      	ldr	r2, [r7, #32]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d028      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80066d0:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066d6:	4b18      	ldr	r3, [pc, #96]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d114      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80066e2:	f7fc fa29 	bl	8002b38 <HAL_GetTick>
 80066e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e8:	e00a      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ea:	f7fc fa25 	bl	8002b38 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d901      	bls.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e240      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006700:	4b0d      	ldr	r3, [pc, #52]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0ee      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006710:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006714:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006718:	d114      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800671a:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800672a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800672e:	4902      	ldr	r1, [pc, #8]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006730:	4313      	orrs	r3, r2
 8006732:	608b      	str	r3, [r1, #8]
 8006734:	e00c      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006736:	bf00      	nop
 8006738:	40023800 	.word	0x40023800
 800673c:	40007000 	.word	0x40007000
 8006740:	42470e40 	.word	0x42470e40
 8006744:	4b4a      	ldr	r3, [pc, #296]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a49      	ldr	r2, [pc, #292]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800674a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800674e:	6093      	str	r3, [r2, #8]
 8006750:	4b47      	ldr	r3, [pc, #284]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006752:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675c:	4944      	ldr	r1, [pc, #272]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800675e:	4313      	orrs	r3, r2
 8006760:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0310 	and.w	r3, r3, #16
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8006774:	4b3f      	ldr	r3, [pc, #252]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006776:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006784:	4b3a      	ldr	r3, [pc, #232]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800678a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006792:	4937      	ldr	r1, [pc, #220]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067a6:	4b32      	ldr	r3, [pc, #200]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067ac:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b4:	492e      	ldr	r1, [pc, #184]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d011      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067c8:	4b29      	ldr	r3, [pc, #164]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067ce:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	4926      	ldr	r1, [pc, #152]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067e6:	d101      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80067e8:	2301      	movs	r3, #1
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80067f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006806:	491a      	ldr	r1, [pc, #104]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006816:	2b00      	cmp	r3, #0
 8006818:	d011      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800681a:	4b15      	ldr	r3, [pc, #84]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800681c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006820:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006828:	4911      	ldr	r1, [pc, #68]	@ (8006870 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006838:	d101      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800683a:	2301      	movs	r3, #1
 800683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800683e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d005      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800684c:	f040 80ff 	bne.w	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006850:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006856:	f7fc f96f 	bl	8002b38 <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800685c:	e00e      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800685e:	f7fc f96b 	bl	8002b38 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d907      	bls.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e188      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006870:	40023800 	.word	0x40023800
 8006874:	424711e0 	.word	0x424711e0
 8006878:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800687c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1ea      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d028      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d124      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80068b0:	4b71      	ldr	r3, [pc, #452]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	3301      	adds	r3, #1
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c8:	0e1b      	lsrs	r3, r3, #24
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	431a      	orrs	r2, r3
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	3b01      	subs	r3, #1
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	431a      	orrs	r2, r3
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	061b      	lsls	r3, r3, #24
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	071b      	lsls	r3, r3, #28
 80068f2:	4961      	ldr	r1, [pc, #388]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690e:	d00a      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006918:	2b00      	cmp	r3, #0
 800691a:	d035      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006924:	d130      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006926:	4b54      	ldr	r3, [pc, #336]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	3301      	adds	r3, #1
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006938:	4b4f      	ldr	r3, [pc, #316]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800693a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800693e:	0f1b      	lsrs	r3, r3, #28
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	019b      	lsls	r3, r3, #6
 8006950:	431a      	orrs	r2, r3
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	3b01      	subs	r3, #1
 8006958:	041b      	lsls	r3, r3, #16
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	061b      	lsls	r3, r3, #24
 8006962:	431a      	orrs	r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	071b      	lsls	r3, r3, #28
 8006968:	4943      	ldr	r1, [pc, #268]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006970:	4b41      	ldr	r3, [pc, #260]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006976:	f023 021f 	bic.w	r2, r3, #31
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697e:	3b01      	subs	r3, #1
 8006980:	493d      	ldr	r1, [pc, #244]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006990:	2b00      	cmp	r3, #0
 8006992:	d029      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800699c:	d124      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800699e:	4b36      	ldr	r3, [pc, #216]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069a4:	0c1b      	lsrs	r3, r3, #16
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	3301      	adds	r3, #1
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069b0:	4b31      	ldr	r3, [pc, #196]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b6:	0f1b      	lsrs	r3, r3, #28
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	019b      	lsls	r3, r3, #6
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	085b      	lsrs	r3, r3, #1
 80069d0:	3b01      	subs	r3, #1
 80069d2:	041b      	lsls	r3, r3, #16
 80069d4:	431a      	orrs	r2, r3
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	061b      	lsls	r3, r3, #24
 80069da:	431a      	orrs	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	071b      	lsls	r3, r3, #28
 80069e0:	4925      	ldr	r1, [pc, #148]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d016      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	019b      	lsls	r3, r3, #6
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	3b01      	subs	r3, #1
 8006a08:	041b      	lsls	r3, r3, #16
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	061b      	lsls	r3, r3, #24
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	071b      	lsls	r3, r3, #28
 8006a1a:	4917      	ldr	r1, [pc, #92]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a22:	4b16      	ldr	r3, [pc, #88]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a28:	f7fc f886 	bl	8002b38 <HAL_GetTick>
 8006a2c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a30:	f7fc f882 	bl	8002b38 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e09f      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a42:	4b0d      	ldr	r3, [pc, #52]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	f040 8095 	bne.w	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a56:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a5c:	f7fc f86c 	bl	8002b38 <HAL_GetTick>
 8006a60:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a62:	e00f      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a64:	f7fc f868 	bl	8002b38 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d908      	bls.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e085      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a76:	bf00      	nop
 8006a78:	40023800 	.word	0x40023800
 8006a7c:	42470068 	.word	0x42470068
 8006a80:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a84:	4b41      	ldr	r3, [pc, #260]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a90:	d0e8      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d02b      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d127      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006aba:	4b34      	ldr	r3, [pc, #208]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac0:	0c1b      	lsrs	r3, r3, #16
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	019b      	lsls	r3, r3, #6
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	3b01      	subs	r3, #1
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	061b      	lsls	r3, r3, #24
 8006ae8:	4928      	ldr	r1, [pc, #160]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006af0:	4b26      	ldr	r3, [pc, #152]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006af6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afe:	3b01      	subs	r3, #1
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	4922      	ldr	r1, [pc, #136]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01d      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b1e:	d118      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b20:	4b1a      	ldr	r3, [pc, #104]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b26:	0e1b      	lsrs	r3, r3, #24
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	019b      	lsls	r3, r3, #6
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	3b01      	subs	r3, #1
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	061b      	lsls	r3, r3, #24
 8006b4a:	4910      	ldr	r1, [pc, #64]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b52:	4b0f      	ldr	r3, [pc, #60]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b58:	f7fb ffee 	bl	8002b38 <HAL_GetTick>
 8006b5c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b60:	f7fb ffea 	bl	8002b38 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e007      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b72:	4b06      	ldr	r3, [pc, #24]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b7e:	d1ef      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3730      	adds	r7, #48	@ 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	42470070 	.word	0x42470070

08006b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b98:	b0ae      	sub	sp, #184	@ 0xb8
 8006b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bba:	4bcb      	ldr	r3, [pc, #812]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
 8006bc2:	2b0c      	cmp	r3, #12
 8006bc4:	f200 8206 	bhi.w	8006fd4 <HAL_RCC_GetSysClockFreq+0x440>
 8006bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006c05 	.word	0x08006c05
 8006bd4:	08006fd5 	.word	0x08006fd5
 8006bd8:	08006fd5 	.word	0x08006fd5
 8006bdc:	08006fd5 	.word	0x08006fd5
 8006be0:	08006c0d 	.word	0x08006c0d
 8006be4:	08006fd5 	.word	0x08006fd5
 8006be8:	08006fd5 	.word	0x08006fd5
 8006bec:	08006fd5 	.word	0x08006fd5
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006fd5 	.word	0x08006fd5
 8006bf8:	08006fd5 	.word	0x08006fd5
 8006bfc:	08006fd5 	.word	0x08006fd5
 8006c00:	08006e05 	.word	0x08006e05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c04:	4bb9      	ldr	r3, [pc, #740]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x358>)
 8006c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c0a:	e1e7      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c0c:	4bb8      	ldr	r3, [pc, #736]	@ (8006ef0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c12:	e1e3      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c14:	4bb4      	ldr	r3, [pc, #720]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c20:	4bb1      	ldr	r3, [pc, #708]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d071      	beq.n	8006d10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c2c:	4bae      	ldr	r3, [pc, #696]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	099b      	lsrs	r3, r3, #6
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c38:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c52:	4622      	mov	r2, r4
 8006c54:	462b      	mov	r3, r5
 8006c56:	f04f 0000 	mov.w	r0, #0
 8006c5a:	f04f 0100 	mov.w	r1, #0
 8006c5e:	0159      	lsls	r1, r3, #5
 8006c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c64:	0150      	lsls	r0, r2, #5
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	1a51      	subs	r1, r2, r1
 8006c6e:	6439      	str	r1, [r7, #64]	@ 0x40
 8006c70:	4629      	mov	r1, r5
 8006c72:	eb63 0301 	sbc.w	r3, r3, r1
 8006c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006c84:	4649      	mov	r1, r9
 8006c86:	018b      	lsls	r3, r1, #6
 8006c88:	4641      	mov	r1, r8
 8006c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c8e:	4641      	mov	r1, r8
 8006c90:	018a      	lsls	r2, r1, #6
 8006c92:	4641      	mov	r1, r8
 8006c94:	1a51      	subs	r1, r2, r1
 8006c96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c98:	4649      	mov	r1, r9
 8006c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006cac:	4649      	mov	r1, r9
 8006cae:	00cb      	lsls	r3, r1, #3
 8006cb0:	4641      	mov	r1, r8
 8006cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb6:	4641      	mov	r1, r8
 8006cb8:	00ca      	lsls	r2, r1, #3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	4622      	mov	r2, r4
 8006cc2:	189b      	adds	r3, r3, r2
 8006cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	460a      	mov	r2, r1
 8006cca:	eb42 0303 	adc.w	r3, r2, r3
 8006cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cdc:	4629      	mov	r1, r5
 8006cde:	024b      	lsls	r3, r1, #9
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	024a      	lsls	r2, r1, #9
 8006cea:	4610      	mov	r0, r2
 8006cec:	4619      	mov	r1, r3
 8006cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006cfc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006d00:	f7f9 ff14 	bl	8000b2c <__aeabi_uldivmod>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4613      	mov	r3, r2
 8006d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d0e:	e067      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d10:	4b75      	ldr	r3, [pc, #468]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	099b      	lsrs	r3, r3, #6
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d1c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006d32:	4622      	mov	r2, r4
 8006d34:	462b      	mov	r3, r5
 8006d36:	f04f 0000 	mov.w	r0, #0
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	0159      	lsls	r1, r3, #5
 8006d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d44:	0150      	lsls	r0, r2, #5
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	1a51      	subs	r1, r2, r1
 8006d4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d50:	4629      	mov	r1, r5
 8006d52:	eb63 0301 	sbc.w	r3, r3, r1
 8006d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006d64:	4649      	mov	r1, r9
 8006d66:	018b      	lsls	r3, r1, #6
 8006d68:	4641      	mov	r1, r8
 8006d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d6e:	4641      	mov	r1, r8
 8006d70:	018a      	lsls	r2, r1, #6
 8006d72:	4641      	mov	r1, r8
 8006d74:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d78:	4649      	mov	r1, r9
 8006d7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d92:	4692      	mov	sl, r2
 8006d94:	469b      	mov	fp, r3
 8006d96:	4623      	mov	r3, r4
 8006d98:	eb1a 0303 	adds.w	r3, sl, r3
 8006d9c:	623b      	str	r3, [r7, #32]
 8006d9e:	462b      	mov	r3, r5
 8006da0:	eb4b 0303 	adc.w	r3, fp, r3
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006db2:	4629      	mov	r1, r5
 8006db4:	028b      	lsls	r3, r1, #10
 8006db6:	4621      	mov	r1, r4
 8006db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	028a      	lsls	r2, r1, #10
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dc8:	2200      	movs	r2, #0
 8006dca:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dcc:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006dd2:	f7f9 feab 	bl	8000b2c <__aeabi_uldivmod>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4613      	mov	r3, r2
 8006ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006de0:	4b41      	ldr	r3, [pc, #260]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	0c1b      	lsrs	r3, r3, #16
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	3301      	adds	r3, #1
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006e02:	e0eb      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e04:	4b38      	ldr	r3, [pc, #224]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e10:	4b35      	ldr	r3, [pc, #212]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d06b      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1c:	4b32      	ldr	r3, [pc, #200]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	099b      	lsrs	r3, r3, #6
 8006e22:	2200      	movs	r2, #0
 8006e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e30:	2300      	movs	r3, #0
 8006e32:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006e38:	4622      	mov	r2, r4
 8006e3a:	462b      	mov	r3, r5
 8006e3c:	f04f 0000 	mov.w	r0, #0
 8006e40:	f04f 0100 	mov.w	r1, #0
 8006e44:	0159      	lsls	r1, r3, #5
 8006e46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e4a:	0150      	lsls	r0, r2, #5
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4621      	mov	r1, r4
 8006e52:	1a51      	subs	r1, r2, r1
 8006e54:	61b9      	str	r1, [r7, #24]
 8006e56:	4629      	mov	r1, r5
 8006e58:	eb63 0301 	sbc.w	r3, r3, r1
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	f04f 0300 	mov.w	r3, #0
 8006e66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006e6a:	4659      	mov	r1, fp
 8006e6c:	018b      	lsls	r3, r1, #6
 8006e6e:	4651      	mov	r1, sl
 8006e70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e74:	4651      	mov	r1, sl
 8006e76:	018a      	lsls	r2, r1, #6
 8006e78:	4651      	mov	r1, sl
 8006e7a:	ebb2 0801 	subs.w	r8, r2, r1
 8006e7e:	4659      	mov	r1, fp
 8006e80:	eb63 0901 	sbc.w	r9, r3, r1
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e98:	4690      	mov	r8, r2
 8006e9a:	4699      	mov	r9, r3
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	eb18 0303 	adds.w	r3, r8, r3
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	462b      	mov	r3, r5
 8006ea6:	eb49 0303 	adc.w	r3, r9, r3
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006eb8:	4629      	mov	r1, r5
 8006eba:	024b      	lsls	r3, r1, #9
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	024a      	lsls	r2, r1, #9
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ece:	2200      	movs	r2, #0
 8006ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ed2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006ed4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ed8:	f7f9 fe28 	bl	8000b2c <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ee6:	e065      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x420>
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	00f42400 	.word	0x00f42400
 8006ef0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x458>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	099b      	lsrs	r3, r3, #6
 8006efa:	2200      	movs	r2, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	4611      	mov	r1, r2
 8006f00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f04:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f06:	2300      	movs	r3, #0
 8006f08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006f0e:	4642      	mov	r2, r8
 8006f10:	464b      	mov	r3, r9
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f04f 0100 	mov.w	r1, #0
 8006f1a:	0159      	lsls	r1, r3, #5
 8006f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f20:	0150      	lsls	r0, r2, #5
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4641      	mov	r1, r8
 8006f28:	1a51      	subs	r1, r2, r1
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006f40:	4659      	mov	r1, fp
 8006f42:	018b      	lsls	r3, r1, #6
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	018a      	lsls	r2, r1, #6
 8006f4e:	4651      	mov	r1, sl
 8006f50:	1a54      	subs	r4, r2, r1
 8006f52:	4659      	mov	r1, fp
 8006f54:	eb63 0501 	sbc.w	r5, r3, r1
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	00eb      	lsls	r3, r5, #3
 8006f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f66:	00e2      	lsls	r2, r4, #3
 8006f68:	4614      	mov	r4, r2
 8006f6a:	461d      	mov	r5, r3
 8006f6c:	4643      	mov	r3, r8
 8006f6e:	18e3      	adds	r3, r4, r3
 8006f70:	603b      	str	r3, [r7, #0]
 8006f72:	464b      	mov	r3, r9
 8006f74:	eb45 0303 	adc.w	r3, r5, r3
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f86:	4629      	mov	r1, r5
 8006f88:	028b      	lsls	r3, r1, #10
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f90:	4621      	mov	r1, r4
 8006f92:	028a      	lsls	r2, r1, #10
 8006f94:	4610      	mov	r0, r2
 8006f96:	4619      	mov	r1, r3
 8006f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fa0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006fa2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006fa6:	f7f9 fdc1 	bl	8000b2c <__aeabi_uldivmod>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4613      	mov	r3, r2
 8006fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x458>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	0f1b      	lsrs	r3, r3, #28
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006fd2:	e003      	b.n	8006fdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fd4:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006fda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	37b8      	adds	r7, #184	@ 0xb8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fea:	bf00      	nop
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	00f42400 	.word	0x00f42400

08006ff4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e28d      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8083 	beq.w	800711a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007014:	4b94      	ldr	r3, [pc, #592]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 030c 	and.w	r3, r3, #12
 800701c:	2b04      	cmp	r3, #4
 800701e:	d019      	beq.n	8007054 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007020:	4b91      	ldr	r3, [pc, #580]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 030c 	and.w	r3, r3, #12
        || \
 8007028:	2b08      	cmp	r3, #8
 800702a:	d106      	bne.n	800703a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800702c:	4b8e      	ldr	r3, [pc, #568]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007038:	d00c      	beq.n	8007054 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800703a:	4b8b      	ldr	r3, [pc, #556]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007042:	2b0c      	cmp	r3, #12
 8007044:	d112      	bne.n	800706c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007046:	4b88      	ldr	r3, [pc, #544]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800704e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007052:	d10b      	bne.n	800706c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007054:	4b84      	ldr	r3, [pc, #528]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d05b      	beq.n	8007118 <HAL_RCC_OscConfig+0x124>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d157      	bne.n	8007118 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e25a      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007074:	d106      	bne.n	8007084 <HAL_RCC_OscConfig+0x90>
 8007076:	4b7c      	ldr	r3, [pc, #496]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a7b      	ldr	r2, [pc, #492]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800707c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e01d      	b.n	80070c0 <HAL_RCC_OscConfig+0xcc>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800708c:	d10c      	bne.n	80070a8 <HAL_RCC_OscConfig+0xb4>
 800708e:	4b76      	ldr	r3, [pc, #472]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a75      	ldr	r2, [pc, #468]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	4b73      	ldr	r3, [pc, #460]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a72      	ldr	r2, [pc, #456]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80070a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	e00b      	b.n	80070c0 <HAL_RCC_OscConfig+0xcc>
 80070a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a6e      	ldr	r2, [pc, #440]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80070ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80070ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d013      	beq.n	80070f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fb fd36 	bl	8002b38 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d0:	f7fb fd32 	bl	8002b38 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	@ 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e21f      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070e2:	4b61      	ldr	r3, [pc, #388]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0f0      	beq.n	80070d0 <HAL_RCC_OscConfig+0xdc>
 80070ee:	e014      	b.n	800711a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f0:	f7fb fd22 	bl	8002b38 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f8:	f7fb fd1e 	bl	8002b38 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b64      	cmp	r3, #100	@ 0x64
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e20b      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800710a:	4b57      	ldr	r3, [pc, #348]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x104>
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d06f      	beq.n	8007206 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007126:	4b50      	ldr	r3, [pc, #320]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
 800712e:	2b00      	cmp	r3, #0
 8007130:	d017      	beq.n	8007162 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007132:	4b4d      	ldr	r3, [pc, #308]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 030c 	and.w	r3, r3, #12
        || \
 800713a:	2b08      	cmp	r3, #8
 800713c:	d105      	bne.n	800714a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800713e:	4b4a      	ldr	r3, [pc, #296]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800714a:	4b47      	ldr	r3, [pc, #284]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007152:	2b0c      	cmp	r3, #12
 8007154:	d11c      	bne.n	8007190 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007156:	4b44      	ldr	r3, [pc, #272]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d116      	bne.n	8007190 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007162:	4b41      	ldr	r3, [pc, #260]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <HAL_RCC_OscConfig+0x186>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d001      	beq.n	800717a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e1d3      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717a:	4b3b      	ldr	r3, [pc, #236]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	4937      	ldr	r1, [pc, #220]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800718a:	4313      	orrs	r3, r2
 800718c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800718e:	e03a      	b.n	8007206 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d020      	beq.n	80071da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007198:	4b34      	ldr	r3, [pc, #208]	@ (800726c <HAL_RCC_OscConfig+0x278>)
 800719a:	2201      	movs	r2, #1
 800719c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719e:	f7fb fccb 	bl	8002b38 <HAL_GetTick>
 80071a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071a4:	e008      	b.n	80071b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071a6:	f7fb fcc7 	bl	8002b38 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e1b4      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0f0      	beq.n	80071a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c4:	4b28      	ldr	r3, [pc, #160]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4925      	ldr	r1, [pc, #148]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	600b      	str	r3, [r1, #0]
 80071d8:	e015      	b.n	8007206 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071da:	4b24      	ldr	r3, [pc, #144]	@ (800726c <HAL_RCC_OscConfig+0x278>)
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e0:	f7fb fcaa 	bl	8002b38 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e8:	f7fb fca6 	bl	8002b38 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e193      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f0      	bne.n	80071e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d036      	beq.n	8007280 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d016      	beq.n	8007248 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800721a:	4b15      	ldr	r3, [pc, #84]	@ (8007270 <HAL_RCC_OscConfig+0x27c>)
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007220:	f7fb fc8a 	bl	8002b38 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007228:	f7fb fc86 	bl	8002b38 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e173      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800723a:	4b0b      	ldr	r3, [pc, #44]	@ (8007268 <HAL_RCC_OscConfig+0x274>)
 800723c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0x234>
 8007246:	e01b      	b.n	8007280 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007248:	4b09      	ldr	r3, [pc, #36]	@ (8007270 <HAL_RCC_OscConfig+0x27c>)
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724e:	f7fb fc73 	bl	8002b38 <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007254:	e00e      	b.n	8007274 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007256:	f7fb fc6f 	bl	8002b38 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d907      	bls.n	8007274 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e15c      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
 8007268:	40023800 	.word	0x40023800
 800726c:	42470000 	.word	0x42470000
 8007270:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007274:	4b8a      	ldr	r3, [pc, #552]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ea      	bne.n	8007256 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8097 	beq.w	80073bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800728e:	2300      	movs	r3, #0
 8007290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007292:	4b83      	ldr	r3, [pc, #524]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10f      	bne.n	80072be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	4b7f      	ldr	r3, [pc, #508]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	4a7e      	ldr	r2, [pc, #504]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 80072a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80072ae:	4b7c      	ldr	r3, [pc, #496]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ba:	2301      	movs	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072be:	4b79      	ldr	r3, [pc, #484]	@ (80074a4 <HAL_RCC_OscConfig+0x4b0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d118      	bne.n	80072fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072ca:	4b76      	ldr	r3, [pc, #472]	@ (80074a4 <HAL_RCC_OscConfig+0x4b0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a75      	ldr	r2, [pc, #468]	@ (80074a4 <HAL_RCC_OscConfig+0x4b0>)
 80072d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072d6:	f7fb fc2f 	bl	8002b38 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072de:	f7fb fc2b 	bl	8002b38 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e118      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072f0:	4b6c      	ldr	r3, [pc, #432]	@ (80074a4 <HAL_RCC_OscConfig+0x4b0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0f0      	beq.n	80072de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d106      	bne.n	8007312 <HAL_RCC_OscConfig+0x31e>
 8007304:	4b66      	ldr	r3, [pc, #408]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007308:	4a65      	ldr	r2, [pc, #404]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 800730a:	f043 0301 	orr.w	r3, r3, #1
 800730e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007310:	e01c      	b.n	800734c <HAL_RCC_OscConfig+0x358>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2b05      	cmp	r3, #5
 8007318:	d10c      	bne.n	8007334 <HAL_RCC_OscConfig+0x340>
 800731a:	4b61      	ldr	r3, [pc, #388]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 800731c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731e:	4a60      	ldr	r2, [pc, #384]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007320:	f043 0304 	orr.w	r3, r3, #4
 8007324:	6713      	str	r3, [r2, #112]	@ 0x70
 8007326:	4b5e      	ldr	r3, [pc, #376]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732a:	4a5d      	ldr	r2, [pc, #372]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 800732c:	f043 0301 	orr.w	r3, r3, #1
 8007330:	6713      	str	r3, [r2, #112]	@ 0x70
 8007332:	e00b      	b.n	800734c <HAL_RCC_OscConfig+0x358>
 8007334:	4b5a      	ldr	r3, [pc, #360]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007338:	4a59      	ldr	r2, [pc, #356]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 800733a:	f023 0301 	bic.w	r3, r3, #1
 800733e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007340:	4b57      	ldr	r3, [pc, #348]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007344:	4a56      	ldr	r2, [pc, #344]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007346:	f023 0304 	bic.w	r3, r3, #4
 800734a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d015      	beq.n	8007380 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007354:	f7fb fbf0 	bl	8002b38 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735a:	e00a      	b.n	8007372 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735c:	f7fb fbec 	bl	8002b38 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800736a:	4293      	cmp	r3, r2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e0d7      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007372:	4b4b      	ldr	r3, [pc, #300]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0ee      	beq.n	800735c <HAL_RCC_OscConfig+0x368>
 800737e:	e014      	b.n	80073aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007380:	f7fb fbda 	bl	8002b38 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007386:	e00a      	b.n	800739e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007388:	f7fb fbd6 	bl	8002b38 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007396:	4293      	cmp	r3, r2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e0c1      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800739e:	4b40      	ldr	r3, [pc, #256]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1ee      	bne.n	8007388 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d105      	bne.n	80073bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073b0:	4b3b      	ldr	r3, [pc, #236]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 80073b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b4:	4a3a      	ldr	r2, [pc, #232]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 80073b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80ad 	beq.w	8007520 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073c6:	4b36      	ldr	r3, [pc, #216]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 030c 	and.w	r3, r3, #12
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	d060      	beq.n	8007494 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d145      	bne.n	8007466 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073da:	4b33      	ldr	r3, [pc, #204]	@ (80074a8 <HAL_RCC_OscConfig+0x4b4>)
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e0:	f7fb fbaa 	bl	8002b38 <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073e6:	e008      	b.n	80073fa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e8:	f7fb fba6 	bl	8002b38 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e093      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073fa:	4b29      	ldr	r3, [pc, #164]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f0      	bne.n	80073e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69da      	ldr	r2, [r3, #28]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007414:	019b      	lsls	r3, r3, #6
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	3b01      	subs	r3, #1
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	061b      	lsls	r3, r3, #24
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	071b      	lsls	r3, r3, #28
 8007432:	491b      	ldr	r1, [pc, #108]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007434:	4313      	orrs	r3, r2
 8007436:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007438:	4b1b      	ldr	r3, [pc, #108]	@ (80074a8 <HAL_RCC_OscConfig+0x4b4>)
 800743a:	2201      	movs	r2, #1
 800743c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743e:	f7fb fb7b 	bl	8002b38 <HAL_GetTick>
 8007442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007446:	f7fb fb77 	bl	8002b38 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e064      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007458:	4b11      	ldr	r3, [pc, #68]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_RCC_OscConfig+0x452>
 8007464:	e05c      	b.n	8007520 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007466:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <HAL_RCC_OscConfig+0x4b4>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746c:	f7fb fb64 	bl	8002b38 <HAL_GetTick>
 8007470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007474:	f7fb fb60 	bl	8002b38 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e04d      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007486:	4b06      	ldr	r3, [pc, #24]	@ (80074a0 <HAL_RCC_OscConfig+0x4ac>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x480>
 8007492:	e045      	b.n	8007520 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d107      	bne.n	80074ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e040      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40007000 	.word	0x40007000
 80074a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074ac:	4b1f      	ldr	r3, [pc, #124]	@ (800752c <HAL_RCC_OscConfig+0x538>)
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d030      	beq.n	800751c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d129      	bne.n	800751c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d122      	bne.n	800751c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80074dc:	4013      	ands	r3, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d119      	bne.n	800751c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	085b      	lsrs	r3, r3, #1
 80074f4:	3b01      	subs	r3, #1
 80074f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d10f      	bne.n	800751c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007508:	429a      	cmp	r2, r3
 800750a:	d107      	bne.n	800751c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007518:	429a      	cmp	r2, r3
 800751a:	d001      	beq.n	8007520 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e000      	b.n	8007522 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40023800 	.word	0x40023800

08007530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e041      	b.n	80075c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f839 	bl	80075ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f000 fde0 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d001      	beq.n	80075fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e046      	b.n	800768a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a23      	ldr	r2, [pc, #140]	@ (8007698 <HAL_TIM_Base_Start+0xb4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d022      	beq.n	8007654 <HAL_TIM_Base_Start+0x70>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007616:	d01d      	beq.n	8007654 <HAL_TIM_Base_Start+0x70>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1f      	ldr	r2, [pc, #124]	@ (800769c <HAL_TIM_Base_Start+0xb8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d018      	beq.n	8007654 <HAL_TIM_Base_Start+0x70>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1e      	ldr	r2, [pc, #120]	@ (80076a0 <HAL_TIM_Base_Start+0xbc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <HAL_TIM_Base_Start+0x70>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1c      	ldr	r2, [pc, #112]	@ (80076a4 <HAL_TIM_Base_Start+0xc0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00e      	beq.n	8007654 <HAL_TIM_Base_Start+0x70>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1b      	ldr	r2, [pc, #108]	@ (80076a8 <HAL_TIM_Base_Start+0xc4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d009      	beq.n	8007654 <HAL_TIM_Base_Start+0x70>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a19      	ldr	r2, [pc, #100]	@ (80076ac <HAL_TIM_Base_Start+0xc8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_TIM_Base_Start+0x70>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <HAL_TIM_Base_Start+0xcc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d111      	bne.n	8007678 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b06      	cmp	r3, #6
 8007664:	d010      	beq.n	8007688 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0201 	orr.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007676:	e007      	b.n	8007688 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40010000 	.word	0x40010000
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40000c00 	.word	0x40000c00
 80076a8:	40010400 	.word	0x40010400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40001800 	.word	0x40001800

080076b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d001      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e04e      	b.n	800776a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a23      	ldr	r2, [pc, #140]	@ (8007778 <HAL_TIM_Base_Start_IT+0xc4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d022      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x80>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f6:	d01d      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x80>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1f      	ldr	r2, [pc, #124]	@ (800777c <HAL_TIM_Base_Start_IT+0xc8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d018      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x80>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1e      	ldr	r2, [pc, #120]	@ (8007780 <HAL_TIM_Base_Start_IT+0xcc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d013      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x80>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1c      	ldr	r2, [pc, #112]	@ (8007784 <HAL_TIM_Base_Start_IT+0xd0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00e      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x80>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1b      	ldr	r2, [pc, #108]	@ (8007788 <HAL_TIM_Base_Start_IT+0xd4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d009      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x80>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a19      	ldr	r2, [pc, #100]	@ (800778c <HAL_TIM_Base_Start_IT+0xd8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d004      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x80>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a18      	ldr	r2, [pc, #96]	@ (8007790 <HAL_TIM_Base_Start_IT+0xdc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d111      	bne.n	8007758 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b06      	cmp	r3, #6
 8007744:	d010      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007756:	e007      	b.n	8007768 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40010000 	.word	0x40010000
 800777c:	40000400 	.word	0x40000400
 8007780:	40000800 	.word	0x40000800
 8007784:	40000c00 	.word	0x40000c00
 8007788:	40010400 	.word	0x40010400
 800778c:	40014000 	.word	0x40014000
 8007790:	40001800 	.word	0x40001800

08007794 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e041      	b.n	800782a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fb f848 	bl	8002850 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f000 fcae 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e041      	b.n	80078c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d106      	bne.n	800785e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fa ffd7 	bl	800280c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f000 fc5f 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_TIM_PWM_Start+0x24>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	bf14      	ite	ne
 80078ec:	2301      	movne	r3, #1
 80078ee:	2300      	moveq	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	e022      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d109      	bne.n	800790e <HAL_TIM_PWM_Start+0x3e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	bf14      	ite	ne
 8007906:	2301      	movne	r3, #1
 8007908:	2300      	moveq	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e015      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d109      	bne.n	8007928 <HAL_TIM_PWM_Start+0x58>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	bf14      	ite	ne
 8007920:	2301      	movne	r3, #1
 8007922:	2300      	moveq	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e008      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	bf14      	ite	ne
 8007934:	2301      	movne	r3, #1
 8007936:	2300      	moveq	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e07c      	b.n	8007a3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_TIM_PWM_Start+0x82>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007950:	e013      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b04      	cmp	r3, #4
 8007956:	d104      	bne.n	8007962 <HAL_TIM_PWM_Start+0x92>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007960:	e00b      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b08      	cmp	r3, #8
 8007966:	d104      	bne.n	8007972 <HAL_TIM_PWM_Start+0xa2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007970:	e003      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2201      	movs	r2, #1
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fe32 	bl	80085ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a44 <HAL_TIM_PWM_Start+0x174>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d004      	beq.n	800799c <HAL_TIM_PWM_Start+0xcc>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a2c      	ldr	r2, [pc, #176]	@ (8007a48 <HAL_TIM_PWM_Start+0x178>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d101      	bne.n	80079a0 <HAL_TIM_PWM_Start+0xd0>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <HAL_TIM_PWM_Start+0xd2>
 80079a0:	2300      	movs	r3, #0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a22      	ldr	r2, [pc, #136]	@ (8007a44 <HAL_TIM_PWM_Start+0x174>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d022      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c8:	d01d      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1f      	ldr	r2, [pc, #124]	@ (8007a4c <HAL_TIM_PWM_Start+0x17c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d018      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a50 <HAL_TIM_PWM_Start+0x180>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a54 <HAL_TIM_PWM_Start+0x184>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00e      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a16      	ldr	r2, [pc, #88]	@ (8007a48 <HAL_TIM_PWM_Start+0x178>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d009      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a18      	ldr	r2, [pc, #96]	@ (8007a58 <HAL_TIM_PWM_Start+0x188>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d004      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a16      	ldr	r2, [pc, #88]	@ (8007a5c <HAL_TIM_PWM_Start+0x18c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d111      	bne.n	8007a2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b06      	cmp	r3, #6
 8007a16:	d010      	beq.n	8007a3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a28:	e007      	b.n	8007a3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0201 	orr.w	r2, r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40010400 	.word	0x40010400
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	40000c00 	.word	0x40000c00
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40001800 	.word	0x40001800

08007a60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e097      	b.n	8007ba4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7fa fe79 	bl	8002780 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007aa4:	f023 0307 	bic.w	r3, r3, #7
 8007aa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f000 fb3d 	bl	8008134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	4313      	orrs	r3, r2
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007b00:	f023 030c 	bic.w	r3, r3, #12
 8007b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	011a      	lsls	r2, r3, #4
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	031b      	lsls	r3, r3, #12
 8007b30:	4313      	orrs	r3, r2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007b3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007b46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	4313      	orrs	r3, r2
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d110      	bne.n	8007bfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d102      	bne.n	8007be8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007be2:	7b7b      	ldrb	r3, [r7, #13]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d001      	beq.n	8007bec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e069      	b.n	8007cc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bfc:	e031      	b.n	8007c62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d110      	bne.n	8007c26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d102      	bne.n	8007c10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c0a:	7b3b      	ldrb	r3, [r7, #12]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d001      	beq.n	8007c14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e055      	b.n	8007cc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c24:	e01d      	b.n	8007c62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d108      	bne.n	8007c3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d105      	bne.n	8007c3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d102      	bne.n	8007c3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c38:	7b3b      	ldrb	r3, [r7, #12]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d001      	beq.n	8007c42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e03e      	b.n	8007cc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_TIM_Encoder_Start+0xc4>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d008      	beq.n	8007c80 <HAL_TIM_Encoder_Start+0xd4>
 8007c6e:	e00f      	b.n	8007c90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2201      	movs	r2, #1
 8007c76:	2100      	movs	r1, #0
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fcb7 	bl	80085ec <TIM_CCxChannelCmd>
      break;
 8007c7e:	e016      	b.n	8007cae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2201      	movs	r2, #1
 8007c86:	2104      	movs	r1, #4
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fcaf 	bl	80085ec <TIM_CCxChannelCmd>
      break;
 8007c8e:	e00e      	b.n	8007cae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2201      	movs	r2, #1
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fca7 	bl	80085ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	2104      	movs	r1, #4
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fca0 	bl	80085ec <TIM_CCxChannelCmd>
      break;
 8007cac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f042 0201 	orr.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d020      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01b      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0202 	mvn.w	r2, #2
 8007cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9f0 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007d18:	e005      	b.n	8007d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f9e2 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9f3 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d020      	beq.n	8007d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01b      	beq.n	8007d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0204 	mvn.w	r2, #4
 8007d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f9ca 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007d64:	e005      	b.n	8007d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f9bc 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f9cd 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d020      	beq.n	8007dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01b      	beq.n	8007dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0208 	mvn.w	r2, #8
 8007d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9a4 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007db0:	e005      	b.n	8007dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f996 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f9a7 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f003 0310 	and.w	r3, r3, #16
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f003 0310 	and.w	r3, r3, #16
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01b      	beq.n	8007e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f06f 0210 	mvn.w	r2, #16
 8007de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2208      	movs	r2, #8
 8007de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f97e 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007dfc:	e005      	b.n	8007e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f970 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f981 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00c      	beq.n	8007e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d007      	beq.n	8007e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0201 	mvn.w	r2, #1
 8007e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fa f99e 	bl	8002170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00c      	beq.n	8007e58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fcc8 	bl	80087e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00c      	beq.n	8007e7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f952 	bl	8008120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00c      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0220 	mvn.w	r2, #32
 8007e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fc9a 	bl	80087d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e048      	b.n	8007f58 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b0c      	cmp	r3, #12
 8007ed2:	d839      	bhi.n	8007f48 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8007edc <HAL_TIM_OC_ConfigChannel+0x34>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007f11 	.word	0x08007f11
 8007ee0:	08007f49 	.word	0x08007f49
 8007ee4:	08007f49 	.word	0x08007f49
 8007ee8:	08007f49 	.word	0x08007f49
 8007eec:	08007f1f 	.word	0x08007f1f
 8007ef0:	08007f49 	.word	0x08007f49
 8007ef4:	08007f49 	.word	0x08007f49
 8007ef8:	08007f49 	.word	0x08007f49
 8007efc:	08007f2d 	.word	0x08007f2d
 8007f00:	08007f49 	.word	0x08007f49
 8007f04:	08007f49 	.word	0x08007f49
 8007f08:	08007f49 	.word	0x08007f49
 8007f0c:	08007f3b 	.word	0x08007f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f9b8 	bl	800828c <TIM_OC1_SetConfig>
      break;
 8007f1c:	e017      	b.n	8007f4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fa21 	bl	800836c <TIM_OC2_SetConfig>
      break;
 8007f2a:	e010      	b.n	8007f4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fa90 	bl	8008458 <TIM_OC3_SetConfig>
      break;
 8007f38:	e009      	b.n	8007f4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fafd 	bl	8008540 <TIM_OC4_SetConfig>
      break;
 8007f46:	e002      	b.n	8007f4e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e0ae      	b.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b0c      	cmp	r3, #12
 8007f8a:	f200 809f 	bhi.w	80080cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fc9 	.word	0x08007fc9
 8007f98:	080080cd 	.word	0x080080cd
 8007f9c:	080080cd 	.word	0x080080cd
 8007fa0:	080080cd 	.word	0x080080cd
 8007fa4:	08008009 	.word	0x08008009
 8007fa8:	080080cd 	.word	0x080080cd
 8007fac:	080080cd 	.word	0x080080cd
 8007fb0:	080080cd 	.word	0x080080cd
 8007fb4:	0800804b 	.word	0x0800804b
 8007fb8:	080080cd 	.word	0x080080cd
 8007fbc:	080080cd 	.word	0x080080cd
 8007fc0:	080080cd 	.word	0x080080cd
 8007fc4:	0800808b 	.word	0x0800808b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 f95c 	bl	800828c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699a      	ldr	r2, [r3, #24]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0208 	orr.w	r2, r2, #8
 8007fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0204 	bic.w	r2, r2, #4
 8007ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6999      	ldr	r1, [r3, #24]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	619a      	str	r2, [r3, #24]
      break;
 8008006:	e064      	b.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f9ac 	bl	800836c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6999      	ldr	r1, [r3, #24]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	021a      	lsls	r2, r3, #8
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	619a      	str	r2, [r3, #24]
      break;
 8008048:	e043      	b.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fa01 	bl	8008458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69da      	ldr	r2, [r3, #28]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0208 	orr.w	r2, r2, #8
 8008064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69da      	ldr	r2, [r3, #28]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0204 	bic.w	r2, r2, #4
 8008074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69d9      	ldr	r1, [r3, #28]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	61da      	str	r2, [r3, #28]
      break;
 8008088:	e023      	b.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68b9      	ldr	r1, [r7, #8]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fa55 	bl	8008540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69da      	ldr	r2, [r3, #28]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69da      	ldr	r2, [r3, #28]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69d9      	ldr	r1, [r3, #28]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	021a      	lsls	r2, r3, #8
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	61da      	str	r2, [r3, #28]
      break;
 80080ca:	e002      	b.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	75fb      	strb	r3, [r7, #23]
      break;
 80080d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a46      	ldr	r2, [pc, #280]	@ (8008260 <TIM_Base_SetConfig+0x12c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d013      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008152:	d00f      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a43      	ldr	r2, [pc, #268]	@ (8008264 <TIM_Base_SetConfig+0x130>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00b      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a42      	ldr	r2, [pc, #264]	@ (8008268 <TIM_Base_SetConfig+0x134>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d007      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a41      	ldr	r2, [pc, #260]	@ (800826c <TIM_Base_SetConfig+0x138>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d003      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a40      	ldr	r2, [pc, #256]	@ (8008270 <TIM_Base_SetConfig+0x13c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d108      	bne.n	8008186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a35      	ldr	r2, [pc, #212]	@ (8008260 <TIM_Base_SetConfig+0x12c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d02b      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008194:	d027      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a32      	ldr	r2, [pc, #200]	@ (8008264 <TIM_Base_SetConfig+0x130>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d023      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a31      	ldr	r2, [pc, #196]	@ (8008268 <TIM_Base_SetConfig+0x134>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d01f      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a30      	ldr	r2, [pc, #192]	@ (800826c <TIM_Base_SetConfig+0x138>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d01b      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008270 <TIM_Base_SetConfig+0x13c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d017      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a2e      	ldr	r2, [pc, #184]	@ (8008274 <TIM_Base_SetConfig+0x140>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d013      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008278 <TIM_Base_SetConfig+0x144>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00f      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2c      	ldr	r2, [pc, #176]	@ (800827c <TIM_Base_SetConfig+0x148>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00b      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008280 <TIM_Base_SetConfig+0x14c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d007      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008284 <TIM_Base_SetConfig+0x150>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d003      	beq.n	80081e6 <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a29      	ldr	r2, [pc, #164]	@ (8008288 <TIM_Base_SetConfig+0x154>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d108      	bne.n	80081f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a10      	ldr	r2, [pc, #64]	@ (8008260 <TIM_Base_SetConfig+0x12c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_Base_SetConfig+0xf8>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a12      	ldr	r2, [pc, #72]	@ (8008270 <TIM_Base_SetConfig+0x13c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d103      	bne.n	8008234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	691a      	ldr	r2, [r3, #16]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b01      	cmp	r3, #1
 8008244:	d105      	bne.n	8008252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	611a      	str	r2, [r3, #16]
  }
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	40010000 	.word	0x40010000
 8008264:	40000400 	.word	0x40000400
 8008268:	40000800 	.word	0x40000800
 800826c:	40000c00 	.word	0x40000c00
 8008270:	40010400 	.word	0x40010400
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400
 800827c:	40014800 	.word	0x40014800
 8008280:	40001800 	.word	0x40001800
 8008284:	40001c00 	.word	0x40001c00
 8008288:	40002000 	.word	0x40002000

0800828c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	f023 0201 	bic.w	r2, r3, #1
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0303 	bic.w	r3, r3, #3
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f023 0302 	bic.w	r3, r3, #2
 80082d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a20      	ldr	r2, [pc, #128]	@ (8008364 <TIM_OC1_SetConfig+0xd8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d003      	beq.n	80082f0 <TIM_OC1_SetConfig+0x64>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008368 <TIM_OC1_SetConfig+0xdc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d10c      	bne.n	800830a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f023 0308 	bic.w	r3, r3, #8
 80082f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f023 0304 	bic.w	r3, r3, #4
 8008308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a15      	ldr	r2, [pc, #84]	@ (8008364 <TIM_OC1_SetConfig+0xd8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d003      	beq.n	800831a <TIM_OC1_SetConfig+0x8e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a14      	ldr	r2, [pc, #80]	@ (8008368 <TIM_OC1_SetConfig+0xdc>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d111      	bne.n	800833e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4313      	orrs	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	621a      	str	r2, [r3, #32]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	40010000 	.word	0x40010000
 8008368:	40010400 	.word	0x40010400

0800836c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	f023 0210 	bic.w	r2, r3, #16
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f023 0320 	bic.w	r3, r3, #32
 80083b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a22      	ldr	r2, [pc, #136]	@ (8008450 <TIM_OC2_SetConfig+0xe4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <TIM_OC2_SetConfig+0x68>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a21      	ldr	r2, [pc, #132]	@ (8008454 <TIM_OC2_SetConfig+0xe8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d10d      	bne.n	80083f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a17      	ldr	r2, [pc, #92]	@ (8008450 <TIM_OC2_SetConfig+0xe4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d003      	beq.n	8008400 <TIM_OC2_SetConfig+0x94>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a16      	ldr	r2, [pc, #88]	@ (8008454 <TIM_OC2_SetConfig+0xe8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d113      	bne.n	8008428 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800840e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40010000 	.word	0x40010000
 8008454:	40010400 	.word	0x40010400

08008458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0303 	bic.w	r3, r3, #3
 800848e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	021b      	lsls	r3, r3, #8
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a21      	ldr	r2, [pc, #132]	@ (8008538 <TIM_OC3_SetConfig+0xe0>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d003      	beq.n	80084be <TIM_OC3_SetConfig+0x66>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a20      	ldr	r2, [pc, #128]	@ (800853c <TIM_OC3_SetConfig+0xe4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d10d      	bne.n	80084da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	021b      	lsls	r3, r3, #8
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a16      	ldr	r2, [pc, #88]	@ (8008538 <TIM_OC3_SetConfig+0xe0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d003      	beq.n	80084ea <TIM_OC3_SetConfig+0x92>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a15      	ldr	r2, [pc, #84]	@ (800853c <TIM_OC3_SetConfig+0xe4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d113      	bne.n	8008512 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4313      	orrs	r3, r2
 8008504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	4313      	orrs	r3, r2
 8008510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	621a      	str	r2, [r3, #32]
}
 800852c:	bf00      	nop
 800852e:	371c      	adds	r7, #28
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	40010000 	.word	0x40010000
 800853c:	40010400 	.word	0x40010400

08008540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800856e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800858a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	031b      	lsls	r3, r3, #12
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	4313      	orrs	r3, r2
 8008596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a12      	ldr	r2, [pc, #72]	@ (80085e4 <TIM_OC4_SetConfig+0xa4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d003      	beq.n	80085a8 <TIM_OC4_SetConfig+0x68>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a11      	ldr	r2, [pc, #68]	@ (80085e8 <TIM_OC4_SetConfig+0xa8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d109      	bne.n	80085bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	019b      	lsls	r3, r3, #6
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	621a      	str	r2, [r3, #32]
}
 80085d6:	bf00      	nop
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	40010000 	.word	0x40010000
 80085e8:	40010400 	.word	0x40010400

080085ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	2201      	movs	r2, #1
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1a      	ldr	r2, [r3, #32]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	43db      	mvns	r3, r3
 800860e:	401a      	ands	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a1a      	ldr	r2, [r3, #32]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 031f 	and.w	r3, r3, #31
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	fa01 f303 	lsl.w	r3, r1, r3
 8008624:	431a      	orrs	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800864c:	2302      	movs	r3, #2
 800864e:	e05a      	b.n	8008706 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	4313      	orrs	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a21      	ldr	r2, [pc, #132]	@ (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d022      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869c:	d01d      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008718 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d018      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1b      	ldr	r2, [pc, #108]	@ (800871c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d013      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a1a      	ldr	r2, [pc, #104]	@ (8008720 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d00e      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a18      	ldr	r2, [pc, #96]	@ (8008724 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d009      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a17      	ldr	r2, [pc, #92]	@ (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d004      	beq.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a15      	ldr	r2, [pc, #84]	@ (800872c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d10c      	bne.n	80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40010000 	.word	0x40010000
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40000c00 	.word	0x40000c00
 8008724:	40010400 	.word	0x40010400
 8008728:	40014000 	.word	0x40014000
 800872c:	40001800 	.word	0x40001800

08008730 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008748:	2302      	movs	r3, #2
 800874a:	e03d      	b.n	80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087fc:	b084      	sub	sp, #16
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	f107 001c 	add.w	r0, r7, #28
 800880a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800880e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008812:	2b01      	cmp	r3, #1
 8008814:	d123      	bne.n	800885e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800882a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800883e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008842:	2b01      	cmp	r3, #1
 8008844:	d105      	bne.n	8008852 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 fae2 	bl	8009e1c <USB_CoreReset>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]
 800885c:	e01b      	b.n	8008896 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fad6 	bl	8009e1c <USB_CoreReset>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008874:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008878:	2b00      	cmp	r3, #0
 800887a:	d106      	bne.n	800888a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008880:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	639a      	str	r2, [r3, #56]	@ 0x38
 8008888:	e005      	b.n	8008896 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008896:	7fbb      	ldrb	r3, [r7, #30]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d10b      	bne.n	80088b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f043 0206 	orr.w	r2, r3, #6
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f043 0220 	orr.w	r2, r3, #32
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088c0:	b004      	add	sp, #16
 80088c2:	4770      	bx	lr

080088c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d165      	bne.n	80089a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4a41      	ldr	r2, [pc, #260]	@ (80089e0 <USB_SetTurnaroundTime+0x11c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d906      	bls.n	80088ee <USB_SetTurnaroundTime+0x2a>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4a40      	ldr	r2, [pc, #256]	@ (80089e4 <USB_SetTurnaroundTime+0x120>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d202      	bcs.n	80088ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80088e8:	230f      	movs	r3, #15
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	e062      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	4a3c      	ldr	r2, [pc, #240]	@ (80089e4 <USB_SetTurnaroundTime+0x120>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d306      	bcc.n	8008904 <USB_SetTurnaroundTime+0x40>
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	4a3b      	ldr	r2, [pc, #236]	@ (80089e8 <USB_SetTurnaroundTime+0x124>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d202      	bcs.n	8008904 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80088fe:	230e      	movs	r3, #14
 8008900:	617b      	str	r3, [r7, #20]
 8008902:	e057      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4a38      	ldr	r2, [pc, #224]	@ (80089e8 <USB_SetTurnaroundTime+0x124>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d306      	bcc.n	800891a <USB_SetTurnaroundTime+0x56>
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	4a37      	ldr	r2, [pc, #220]	@ (80089ec <USB_SetTurnaroundTime+0x128>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d202      	bcs.n	800891a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008914:	230d      	movs	r3, #13
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	e04c      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	4a33      	ldr	r2, [pc, #204]	@ (80089ec <USB_SetTurnaroundTime+0x128>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d306      	bcc.n	8008930 <USB_SetTurnaroundTime+0x6c>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	4a32      	ldr	r2, [pc, #200]	@ (80089f0 <USB_SetTurnaroundTime+0x12c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d802      	bhi.n	8008930 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800892a:	230c      	movs	r3, #12
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	e041      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4a2f      	ldr	r2, [pc, #188]	@ (80089f0 <USB_SetTurnaroundTime+0x12c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d906      	bls.n	8008946 <USB_SetTurnaroundTime+0x82>
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4a2e      	ldr	r2, [pc, #184]	@ (80089f4 <USB_SetTurnaroundTime+0x130>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d802      	bhi.n	8008946 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008940:	230b      	movs	r3, #11
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	e036      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4a2a      	ldr	r2, [pc, #168]	@ (80089f4 <USB_SetTurnaroundTime+0x130>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d906      	bls.n	800895c <USB_SetTurnaroundTime+0x98>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4a29      	ldr	r2, [pc, #164]	@ (80089f8 <USB_SetTurnaroundTime+0x134>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d802      	bhi.n	800895c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008956:	230a      	movs	r3, #10
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	e02b      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4a26      	ldr	r2, [pc, #152]	@ (80089f8 <USB_SetTurnaroundTime+0x134>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d906      	bls.n	8008972 <USB_SetTurnaroundTime+0xae>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4a25      	ldr	r2, [pc, #148]	@ (80089fc <USB_SetTurnaroundTime+0x138>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d202      	bcs.n	8008972 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800896c:	2309      	movs	r3, #9
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	e020      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4a21      	ldr	r2, [pc, #132]	@ (80089fc <USB_SetTurnaroundTime+0x138>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d306      	bcc.n	8008988 <USB_SetTurnaroundTime+0xc4>
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4a20      	ldr	r2, [pc, #128]	@ (8008a00 <USB_SetTurnaroundTime+0x13c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d802      	bhi.n	8008988 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008982:	2308      	movs	r3, #8
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	e015      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4a1d      	ldr	r2, [pc, #116]	@ (8008a00 <USB_SetTurnaroundTime+0x13c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d906      	bls.n	800899e <USB_SetTurnaroundTime+0xda>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4a1c      	ldr	r2, [pc, #112]	@ (8008a04 <USB_SetTurnaroundTime+0x140>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d202      	bcs.n	800899e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008998:	2307      	movs	r3, #7
 800899a:	617b      	str	r3, [r7, #20]
 800899c:	e00a      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800899e:	2306      	movs	r3, #6
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	e007      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80089aa:	2309      	movs	r3, #9
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	e001      	b.n	80089b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80089b0:	2309      	movs	r3, #9
 80089b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	029b      	lsls	r3, r3, #10
 80089c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80089cc:	431a      	orrs	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	00d8acbf 	.word	0x00d8acbf
 80089e4:	00e4e1c0 	.word	0x00e4e1c0
 80089e8:	00f42400 	.word	0x00f42400
 80089ec:	01067380 	.word	0x01067380
 80089f0:	011a499f 	.word	0x011a499f
 80089f4:	01312cff 	.word	0x01312cff
 80089f8:	014ca43f 	.word	0x014ca43f
 80089fc:	016e3600 	.word	0x016e3600
 8008a00:	01a6ab1f 	.word	0x01a6ab1f
 8008a04:	01e84800 	.word	0x01e84800

08008a08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f043 0201 	orr.w	r2, r3, #1
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f023 0201 	bic.w	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d115      	bne.n	8008a9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a7a:	200a      	movs	r0, #10
 8008a7c:	f7fa f868 	bl	8002b50 <HAL_Delay>
      ms += 10U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	330a      	adds	r3, #10
 8008a84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 f939 	bl	8009cfe <USB_GetMode>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d01e      	beq.n	8008ad0 <USB_SetCurrentMode+0x84>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2bc7      	cmp	r3, #199	@ 0xc7
 8008a96:	d9f0      	bls.n	8008a7a <USB_SetCurrentMode+0x2e>
 8008a98:	e01a      	b.n	8008ad0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d115      	bne.n	8008acc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008aac:	200a      	movs	r0, #10
 8008aae:	f7fa f84f 	bl	8002b50 <HAL_Delay>
      ms += 10U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	330a      	adds	r3, #10
 8008ab6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 f920 	bl	8009cfe <USB_GetMode>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <USB_SetCurrentMode+0x84>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ac8:	d9f0      	bls.n	8008aac <USB_SetCurrentMode+0x60>
 8008aca:	e001      	b.n	8008ad0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e005      	b.n	8008adc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2bc8      	cmp	r3, #200	@ 0xc8
 8008ad4:	d101      	bne.n	8008ada <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e000      	b.n	8008adc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b086      	sub	sp, #24
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	e009      	b.n	8008b18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3340      	adds	r3, #64	@ 0x40
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	2200      	movs	r2, #0
 8008b10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	3301      	adds	r3, #1
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2b0e      	cmp	r3, #14
 8008b1c:	d9f2      	bls.n	8008b04 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11c      	bne.n	8008b60 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b34:	f043 0302 	orr.w	r3, r3, #2
 8008b38:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	e005      	b.n	8008b6c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b72:	461a      	mov	r2, r3
 8008b74:	2300      	movs	r3, #0
 8008b76:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d10d      	bne.n	8008b9c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f968 	bl	8008e60 <USB_SetDevSpeed>
 8008b90:	e008      	b.n	8008ba4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b92:	2101      	movs	r1, #1
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f963 	bl	8008e60 <USB_SetDevSpeed>
 8008b9a:	e003      	b.n	8008ba4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b9c:	2103      	movs	r1, #3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f95e 	bl	8008e60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ba4:	2110      	movs	r1, #16
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f8fa 	bl	8008da0 <USB_FlushTxFifo>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f924 	bl	8008e04 <USB_FlushRxFifo>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be4:	461a      	mov	r2, r3
 8008be6:	2300      	movs	r3, #0
 8008be8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bea:	2300      	movs	r3, #0
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	e043      	b.n	8008c78 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c06:	d118      	bne.n	8008c3a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10a      	bne.n	8008c24 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	e013      	b.n	8008c4c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c30:	461a      	mov	r2, r3
 8008c32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	e008      	b.n	8008c4c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c46:	461a      	mov	r2, r3
 8008c48:	2300      	movs	r3, #0
 8008c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008c70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3301      	adds	r3, #1
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d3b5      	bcc.n	8008bf0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	e043      	b.n	8008d12 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ca0:	d118      	bne.n	8008cd4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	e013      	b.n	8008ce6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	e008      	b.n	8008ce6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d04:	461a      	mov	r2, r3
 8008d06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d16:	461a      	mov	r2, r3
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d3b5      	bcc.n	8008c8a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008d3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d105      	bne.n	8008d54 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f043 0210 	orr.w	r2, r3, #16
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699a      	ldr	r2, [r3, #24]
 8008d58:	4b10      	ldr	r3, [pc, #64]	@ (8008d9c <USB_DevInit+0x2b8>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f043 0208 	orr.w	r2, r3, #8
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d107      	bne.n	8008d8c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d84:	f043 0304 	orr.w	r3, r3, #4
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d98:	b004      	add	sp, #16
 8008d9a:	4770      	bx	lr
 8008d9c:	803c3800 	.word	0x803c3800

08008da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3301      	adds	r3, #1
 8008db2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008dba:	d901      	bls.n	8008dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e01b      	b.n	8008df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	daf2      	bge.n	8008dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	019b      	lsls	r3, r3, #6
 8008dd0:	f043 0220 	orr.w	r2, r3, #32
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008de4:	d901      	bls.n	8008dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e006      	b.n	8008df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d0f0      	beq.n	8008dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3301      	adds	r3, #1
 8008e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e1c:	d901      	bls.n	8008e22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e018      	b.n	8008e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	daf2      	bge.n	8008e10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2210      	movs	r2, #16
 8008e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e40:	d901      	bls.n	8008e46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e006      	b.n	8008e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f003 0310 	and.w	r3, r3, #16
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d0f0      	beq.n	8008e34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	68f9      	ldr	r1, [r7, #12]
 8008e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e80:	4313      	orrs	r3, r2
 8008e82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b087      	sub	sp, #28
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 0306 	and.w	r3, r3, #6
 8008eaa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]
 8008eb6:	e00a      	b.n	8008ece <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d002      	beq.n	8008ec4 <USB_GetDevSpeed+0x32>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	d102      	bne.n	8008eca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	75fb      	strb	r3, [r7, #23]
 8008ec8:	e001      	b.n	8008ece <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008eca:	230f      	movs	r3, #15
 8008ecc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d13a      	bne.n	8008f6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008efe:	69da      	ldr	r2, [r3, #28]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f003 030f 	and.w	r3, r3, #15
 8008f08:	2101      	movs	r1, #1
 8008f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	68f9      	ldr	r1, [r7, #12]
 8008f12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f16:	4313      	orrs	r3, r2
 8008f18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d155      	bne.n	8008fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	791b      	ldrb	r3, [r3, #4]
 8008f4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	059b      	lsls	r3, r3, #22
 8008f52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f54:	4313      	orrs	r3, r2
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	0151      	lsls	r1, r2, #5
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	440a      	add	r2, r1
 8008f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	e036      	b.n	8008fdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f74:	69da      	ldr	r2, [r3, #28]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	2101      	movs	r1, #1
 8008f80:	fa01 f303 	lsl.w	r3, r1, r3
 8008f84:	041b      	lsls	r3, r3, #16
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d11a      	bne.n	8008fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	791b      	ldrb	r3, [r3, #4]
 8008fc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	0151      	lsls	r1, r2, #5
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	440a      	add	r2, r1
 8008fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
	...

08008fec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	785b      	ldrb	r3, [r3, #1]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d161      	bne.n	80090cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800901a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800901e:	d11f      	bne.n	8009060 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4413      	add	r3, r2
 8009028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	0151      	lsls	r1, r2, #5
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	440a      	add	r2, r1
 8009036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800903a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800903e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	0151      	lsls	r1, r2, #5
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	440a      	add	r2, r1
 8009056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800905a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800905e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	2101      	movs	r1, #1
 8009072:	fa01 f303 	lsl.w	r3, r1, r3
 8009076:	b29b      	uxth	r3, r3
 8009078:	43db      	mvns	r3, r3
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009080:	4013      	ands	r3, r2
 8009082:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800908a:	69da      	ldr	r2, [r3, #28]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	2101      	movs	r1, #1
 8009096:	fa01 f303 	lsl.w	r3, r1, r3
 800909a:	b29b      	uxth	r3, r3
 800909c:	43db      	mvns	r3, r3
 800909e:	68f9      	ldr	r1, [r7, #12]
 80090a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090a4:	4013      	ands	r3, r2
 80090a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	0159      	lsls	r1, r3, #5
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	440b      	add	r3, r1
 80090be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c2:	4619      	mov	r1, r3
 80090c4:	4b35      	ldr	r3, [pc, #212]	@ (800919c <USB_DeactivateEndpoint+0x1b0>)
 80090c6:	4013      	ands	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]
 80090ca:	e060      	b.n	800918e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e2:	d11f      	bne.n	8009124 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009102:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800911e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009122:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	2101      	movs	r1, #1
 8009136:	fa01 f303 	lsl.w	r3, r1, r3
 800913a:	041b      	lsls	r3, r3, #16
 800913c:	43db      	mvns	r3, r3
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009144:	4013      	ands	r3, r2
 8009146:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	f003 030f 	and.w	r3, r3, #15
 8009158:	2101      	movs	r1, #1
 800915a:	fa01 f303 	lsl.w	r3, r1, r3
 800915e:	041b      	lsls	r3, r3, #16
 8009160:	43db      	mvns	r3, r3
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009168:	4013      	ands	r3, r2
 800916a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	0159      	lsls	r1, r3, #5
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	440b      	add	r3, r1
 8009182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009186:	4619      	mov	r1, r3
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <USB_DeactivateEndpoint+0x1b4>)
 800918a:	4013      	ands	r3, r2
 800918c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	ec337800 	.word	0xec337800
 80091a0:	eff37800 	.word	0xeff37800

080091a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08a      	sub	sp, #40	@ 0x28
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	f040 817f 	bne.w	80094c4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d132      	bne.n	8009234 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	0151      	lsls	r1, r2, #5
 80091e0:	69fa      	ldr	r2, [r7, #28]
 80091e2:	440a      	add	r2, r1
 80091e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091e8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80091ec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80091f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	0151      	lsls	r1, r2, #5
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	440a      	add	r2, r1
 8009208:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800920c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800922c:	0cdb      	lsrs	r3, r3, #19
 800922e:	04db      	lsls	r3, r3, #19
 8009230:	6113      	str	r3, [r2, #16]
 8009232:	e097      	b.n	8009364 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	69ba      	ldr	r2, [r7, #24]
 8009244:	0151      	lsls	r1, r2, #5
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	440a      	add	r2, r1
 800924a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800924e:	0cdb      	lsrs	r3, r3, #19
 8009250:	04db      	lsls	r3, r3, #19
 8009252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	0151      	lsls	r1, r2, #5
 8009266:	69fa      	ldr	r2, [r7, #28]
 8009268:	440a      	add	r2, r1
 800926a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800926e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009272:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009276:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d11a      	bne.n	80092b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	429a      	cmp	r2, r3
 8009288:	d903      	bls.n	8009292 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	69ba      	ldr	r2, [r7, #24]
 80092a2:	0151      	lsls	r1, r2, #5
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	440a      	add	r2, r1
 80092a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092b0:	6113      	str	r3, [r2, #16]
 80092b2:	e044      	b.n	800933e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	691a      	ldr	r2, [r3, #16]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	1e5a      	subs	r2, r3, #1
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d6:	691a      	ldr	r2, [r3, #16]
 80092d8:	8afb      	ldrh	r3, [r7, #22]
 80092da:	04d9      	lsls	r1, r3, #19
 80092dc:	4ba4      	ldr	r3, [pc, #656]	@ (8009570 <USB_EPStartXfer+0x3cc>)
 80092de:	400b      	ands	r3, r1
 80092e0:	69b9      	ldr	r1, [r7, #24]
 80092e2:	0148      	lsls	r0, r1, #5
 80092e4:	69f9      	ldr	r1, [r7, #28]
 80092e6:	4401      	add	r1, r0
 80092e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80092ec:	4313      	orrs	r3, r2
 80092ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	791b      	ldrb	r3, [r3, #4]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d122      	bne.n	800933e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	0151      	lsls	r1, r2, #5
 800930a:	69fa      	ldr	r2, [r7, #28]
 800930c:	440a      	add	r2, r1
 800930e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009312:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009316:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	4413      	add	r3, r2
 8009320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	8afb      	ldrh	r3, [r7, #22]
 8009328:	075b      	lsls	r3, r3, #29
 800932a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800932e:	69b9      	ldr	r1, [r7, #24]
 8009330:	0148      	lsls	r0, r1, #5
 8009332:	69f9      	ldr	r1, [r7, #28]
 8009334:	4401      	add	r1, r0
 8009336:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800933a:	4313      	orrs	r3, r2
 800933c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009354:	69b9      	ldr	r1, [r7, #24]
 8009356:	0148      	lsls	r0, r1, #5
 8009358:	69f9      	ldr	r1, [r7, #28]
 800935a:	4401      	add	r1, r0
 800935c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009360:	4313      	orrs	r3, r2
 8009362:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009364:	79fb      	ldrb	r3, [r7, #7]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d14b      	bne.n	8009402 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d009      	beq.n	8009386 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800937e:	461a      	mov	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	791b      	ldrb	r3, [r3, #4]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d128      	bne.n	80093e0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939a:	2b00      	cmp	r3, #0
 800939c:	d110      	bne.n	80093c0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	0151      	lsls	r1, r2, #5
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	440a      	add	r2, r1
 80093b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093bc:	6013      	str	r3, [r2, #0]
 80093be:	e00f      	b.n	80093e0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	0151      	lsls	r1, r2, #5
 80093d2:	69fa      	ldr	r2, [r7, #28]
 80093d4:	440a      	add	r2, r1
 80093d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093de:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	0151      	lsls	r1, r2, #5
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	440a      	add	r2, r1
 80093f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	e166      	b.n	80096d0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800941c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009420:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	791b      	ldrb	r3, [r3, #4]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d015      	beq.n	8009456 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 814e 	beq.w	80096d0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800943a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	f003 030f 	and.w	r3, r3, #15
 8009444:	2101      	movs	r1, #1
 8009446:	fa01 f303 	lsl.w	r3, r1, r3
 800944a:	69f9      	ldr	r1, [r7, #28]
 800944c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009450:	4313      	orrs	r3, r2
 8009452:	634b      	str	r3, [r1, #52]	@ 0x34
 8009454:	e13c      	b.n	80096d0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009462:	2b00      	cmp	r3, #0
 8009464:	d110      	bne.n	8009488 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	69fa      	ldr	r2, [r7, #28]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009480:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	e00f      	b.n	80094a8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	0151      	lsls	r1, r2, #5
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	440a      	add	r2, r1
 800949e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	68d9      	ldr	r1, [r3, #12]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	b298      	uxth	r0, r3
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	4603      	mov	r3, r0
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 f9b9 	bl	8009834 <USB_WritePacket>
 80094c2:	e105      	b.n	80096d0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	69fa      	ldr	r2, [r7, #28]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094de:	0cdb      	lsrs	r3, r3, #19
 80094e0:	04db      	lsls	r3, r3, #19
 80094e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	0151      	lsls	r1, r2, #5
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	440a      	add	r2, r1
 80094fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009502:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009506:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d132      	bne.n	8009574 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800953c:	69b9      	ldr	r1, [r7, #24]
 800953e:	0148      	lsls	r0, r1, #5
 8009540:	69f9      	ldr	r1, [r7, #28]
 8009542:	4401      	add	r1, r0
 8009544:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009548:	4313      	orrs	r3, r2
 800954a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	0151      	lsls	r1, r2, #5
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	440a      	add	r2, r1
 8009562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009566:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800956a:	6113      	str	r3, [r2, #16]
 800956c:	e062      	b.n	8009634 <USB_EPStartXfer+0x490>
 800956e:	bf00      	nop
 8009570:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d123      	bne.n	80095c4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009588:	691a      	ldr	r2, [r3, #16]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009592:	69b9      	ldr	r1, [r7, #24]
 8009594:	0148      	lsls	r0, r1, #5
 8009596:	69f9      	ldr	r1, [r7, #28]
 8009598:	4401      	add	r1, r0
 800959a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800959e:	4313      	orrs	r3, r2
 80095a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	69fa      	ldr	r2, [r7, #28]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095c0:	6113      	str	r3, [r2, #16]
 80095c2:	e037      	b.n	8009634 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	691a      	ldr	r2, [r3, #16]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	4413      	add	r3, r2
 80095ce:	1e5a      	subs	r2, r3, #1
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	8afa      	ldrh	r2, [r7, #22]
 80095e0:	fb03 f202 	mul.w	r2, r3, r2
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f4:	691a      	ldr	r2, [r3, #16]
 80095f6:	8afb      	ldrh	r3, [r7, #22]
 80095f8:	04d9      	lsls	r1, r3, #19
 80095fa:	4b38      	ldr	r3, [pc, #224]	@ (80096dc <USB_EPStartXfer+0x538>)
 80095fc:	400b      	ands	r3, r1
 80095fe:	69b9      	ldr	r1, [r7, #24]
 8009600:	0148      	lsls	r0, r1, #5
 8009602:	69f9      	ldr	r1, [r7, #28]
 8009604:	4401      	add	r1, r0
 8009606:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800960a:	4313      	orrs	r3, r2
 800960c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009624:	69b9      	ldr	r1, [r7, #24]
 8009626:	0148      	lsls	r0, r1, #5
 8009628:	69f9      	ldr	r1, [r7, #28]
 800962a:	4401      	add	r1, r0
 800962c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009630:	4313      	orrs	r3, r2
 8009632:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d10d      	bne.n	8009656 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	68d9      	ldr	r1, [r3, #12]
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009652:	460a      	mov	r2, r1
 8009654:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	791b      	ldrb	r3, [r3, #4]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d128      	bne.n	80096b0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800966a:	2b00      	cmp	r3, #0
 800966c:	d110      	bne.n	8009690 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	0151      	lsls	r1, r2, #5
 8009680:	69fa      	ldr	r2, [r7, #28]
 8009682:	440a      	add	r2, r1
 8009684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009688:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	e00f      	b.n	80096b0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	0151      	lsls	r1, r2, #5
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	440a      	add	r2, r1
 80096a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	69fa      	ldr	r2, [r7, #28]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3720      	adds	r7, #32
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	1ff80000 	.word	0x1ff80000

080096e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	785b      	ldrb	r3, [r3, #1]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d14a      	bne.n	8009794 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009712:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009716:	f040 8086 	bne.w	8009826 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	7812      	ldrb	r2, [r2, #0]
 800972e:	0151      	lsls	r1, r2, #5
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	440a      	add	r2, r1
 8009734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009738:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800973c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	7812      	ldrb	r2, [r2, #0]
 8009752:	0151      	lsls	r1, r2, #5
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	440a      	add	r2, r1
 8009758:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800975c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009760:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3301      	adds	r3, #1
 8009766:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800976e:	4293      	cmp	r3, r2
 8009770:	d902      	bls.n	8009778 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	75fb      	strb	r3, [r7, #23]
          break;
 8009776:	e056      	b.n	8009826 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800978c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009790:	d0e7      	beq.n	8009762 <USB_EPStopXfer+0x82>
 8009792:	e048      	b.n	8009826 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097ac:	d13b      	bne.n	8009826 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	7812      	ldrb	r2, [r2, #0]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009802:	4293      	cmp	r3, r2
 8009804:	d902      	bls.n	800980c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	75fb      	strb	r3, [r7, #23]
          break;
 800980a:	e00c      	b.n	8009826 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	015a      	lsls	r2, r3, #5
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	4413      	add	r3, r2
 8009816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009824:	d0e7      	beq.n	80097f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009826:	7dfb      	ldrb	r3, [r7, #23]
}
 8009828:	4618      	mov	r0, r3
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009834:	b480      	push	{r7}
 8009836:	b089      	sub	sp, #36	@ 0x24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4611      	mov	r1, r2
 8009840:	461a      	mov	r2, r3
 8009842:	460b      	mov	r3, r1
 8009844:	71fb      	strb	r3, [r7, #7]
 8009846:	4613      	mov	r3, r2
 8009848:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009852:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009856:	2b00      	cmp	r3, #0
 8009858:	d123      	bne.n	80098a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800985a:	88bb      	ldrh	r3, [r7, #4]
 800985c:	3303      	adds	r3, #3
 800985e:	089b      	lsrs	r3, r3, #2
 8009860:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009862:	2300      	movs	r3, #0
 8009864:	61bb      	str	r3, [r7, #24]
 8009866:	e018      	b.n	800989a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	031a      	lsls	r2, r3, #12
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	4413      	add	r3, r2
 8009870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009874:	461a      	mov	r2, r3
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	3301      	adds	r3, #1
 8009880:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	3301      	adds	r3, #1
 8009886:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	3301      	adds	r3, #1
 800988c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	3301      	adds	r3, #1
 8009892:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	3301      	adds	r3, #1
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d3e2      	bcc.n	8009868 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3724      	adds	r7, #36	@ 0x24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b08b      	sub	sp, #44	@ 0x2c
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80098c6:	88fb      	ldrh	r3, [r7, #6]
 80098c8:	089b      	lsrs	r3, r3, #2
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80098ce:	88fb      	ldrh	r3, [r7, #6]
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80098d6:	2300      	movs	r3, #0
 80098d8:	623b      	str	r3, [r7, #32]
 80098da:	e014      	b.n	8009906 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80098e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ea:	3301      	adds	r3, #1
 80098ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f0:	3301      	adds	r3, #1
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f6:	3301      	adds	r3, #1
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fc:	3301      	adds	r3, #1
 80098fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	3301      	adds	r3, #1
 8009904:	623b      	str	r3, [r7, #32]
 8009906:	6a3a      	ldr	r2, [r7, #32]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	429a      	cmp	r2, r3
 800990c:	d3e6      	bcc.n	80098dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800990e:	8bfb      	ldrh	r3, [r7, #30]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01e      	beq.n	8009952 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800991e:	461a      	mov	r2, r3
 8009920:	f107 0310 	add.w	r3, r7, #16
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	fa22 f303 	lsr.w	r3, r2, r3
 8009934:	b2da      	uxtb	r2, r3
 8009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009938:	701a      	strb	r2, [r3, #0]
      i++;
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	3301      	adds	r3, #1
 800993e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	3301      	adds	r3, #1
 8009944:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009946:	8bfb      	ldrh	r3, [r7, #30]
 8009948:	3b01      	subs	r3, #1
 800994a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800994c:	8bfb      	ldrh	r3, [r7, #30]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1ea      	bne.n	8009928 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009954:	4618      	mov	r0, r3
 8009956:	372c      	adds	r7, #44	@ 0x2c
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d12c      	bne.n	80099d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	db12      	blt.n	80099b4 <USB_EPSetStall+0x54>
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00f      	beq.n	80099b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80099b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e02b      	b.n	8009a2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	db12      	blt.n	8009a0e <USB_EPSetStall+0xae>
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00f      	beq.n	8009a0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	0151      	lsls	r1, r2, #5
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	440a      	add	r2, r1
 8009a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d128      	bne.n	8009aaa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	0151      	lsls	r1, r2, #5
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	440a      	add	r2, r1
 8009a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	791b      	ldrb	r3, [r3, #4]
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d003      	beq.n	8009a88 <USB_EPClearStall+0x4c>
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	791b      	ldrb	r3, [r3, #4]
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d138      	bne.n	8009afa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	0151      	lsls	r1, r2, #5
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	440a      	add	r2, r1
 8009a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	e027      	b.n	8009afa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	0151      	lsls	r1, r2, #5
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	440a      	add	r2, r1
 8009ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ac4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ac8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	791b      	ldrb	r3, [r3, #4]
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d003      	beq.n	8009ada <USB_EPClearStall+0x9e>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	791b      	ldrb	r3, [r3, #4]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d10f      	bne.n	8009afa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	0151      	lsls	r1, r2, #5
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	440a      	add	r2, r1
 8009af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009af8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b26:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009b2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009b3c:	68f9      	ldr	r1, [r7, #12]
 8009b3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b42:	4313      	orrs	r3, r2
 8009b44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b82:	f023 0302 	bic.w	r3, r3, #2
 8009b86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b085      	sub	sp, #20
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bb0:	f023 0303 	bic.w	r3, r3, #3
 8009bb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bc4:	f043 0302 	orr.w	r3, r3, #2
 8009bc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	4013      	ands	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c1a:	69db      	ldr	r3, [r3, #28]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	4013      	ands	r3, r2
 8009c20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	0c1b      	lsrs	r3, r3, #16
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	4013      	ands	r3, r2
 8009c54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	b29b      	uxth	r3, r3
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b085      	sub	sp, #20
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4013      	ands	r3, r2
 8009c92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c94:	68bb      	ldr	r3, [r7, #8]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b087      	sub	sp, #28
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	460b      	mov	r3, r1
 8009cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009cc6:	78fb      	ldrb	r3, [r7, #3]
 8009cc8:	f003 030f 	and.w	r3, r3, #15
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd2:	01db      	lsls	r3, r3, #7
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009cdc:	78fb      	ldrb	r3, [r7, #3]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	4013      	ands	r3, r2
 8009cee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	371c      	adds	r7, #28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	f003 0301 	and.w	r3, r3, #1
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d34:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009d38:	f023 0307 	bic.w	r3, r3, #7
 8009d3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b087      	sub	sp, #28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	333c      	adds	r3, #60	@ 0x3c
 8009d76:	3304      	adds	r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	4a26      	ldr	r2, [pc, #152]	@ (8009e18 <USB_EP0_OutStart+0xb8>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d90a      	bls.n	8009d9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d94:	d101      	bne.n	8009d9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e037      	b.n	8009e0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da0:	461a      	mov	r2, r3
 8009da2:	2300      	movs	r3, #0
 8009da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009db4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dc8:	f043 0318 	orr.w	r3, r3, #24
 8009dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ddc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009de0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d10f      	bne.n	8009e08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dee:	461a      	mov	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009e06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	4f54300a 	.word	0x4f54300a

08009e1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e24:	2300      	movs	r3, #0
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e34:	d901      	bls.n	8009e3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e01b      	b.n	8009e72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	daf2      	bge.n	8009e28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	f043 0201 	orr.w	r2, r3, #1
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3301      	adds	r3, #1
 8009e56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e5e:	d901      	bls.n	8009e64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e006      	b.n	8009e72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d0f0      	beq.n	8009e52 <USB_CoreReset+0x36>

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
	...

08009e80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8009e84:	f001 f992 	bl	800b1ac <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4917      	ldr	r1, [pc, #92]	@ (8009ee8 <MX_USB_DEVICE_Init+0x68>)
 8009e8c:	4817      	ldr	r0, [pc, #92]	@ (8009eec <MX_USB_DEVICE_Init+0x6c>)
 8009e8e:	f001 fda7 	bl	800b9e0 <USBD_Init>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8009e98:	f7f8 f97c 	bl	8002194 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8009e9c:	4914      	ldr	r1, [pc, #80]	@ (8009ef0 <MX_USB_DEVICE_Init+0x70>)
 8009e9e:	4813      	ldr	r0, [pc, #76]	@ (8009eec <MX_USB_DEVICE_Init+0x6c>)
 8009ea0:	f001 fdca 	bl	800ba38 <USBD_RegisterClass>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8009eaa:	f7f8 f973 	bl	8002194 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8009eae:	4911      	ldr	r1, [pc, #68]	@ (8009ef4 <MX_USB_DEVICE_Init+0x74>)
 8009eb0:	480e      	ldr	r0, [pc, #56]	@ (8009eec <MX_USB_DEVICE_Init+0x6c>)
 8009eb2:	f000 fe55 	bl	800ab60 <USBD_CDC_ACM_RegisterInterface>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009ebc:	f7f8 f96a 	bl	8002194 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8009ec0:	490d      	ldr	r1, [pc, #52]	@ (8009ef8 <MX_USB_DEVICE_Init+0x78>)
 8009ec2:	480a      	ldr	r0, [pc, #40]	@ (8009eec <MX_USB_DEVICE_Init+0x6c>)
 8009ec4:	f001 fd3e 	bl	800b944 <USBD_CUSTOM_HID_RegisterInterface>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8009ece:	f7f8 f961 	bl	8002194 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8009ed2:	4806      	ldr	r0, [pc, #24]	@ (8009eec <MX_USB_DEVICE_Init+0x6c>)
 8009ed4:	f001 fdee 	bl	800bab4 <USBD_Start>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8009ede:	f7f8 f959 	bl	8002194 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ee2:	bf00      	nop
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20000028 	.word	0x20000028
 8009eec:	20000d64 	.word	0x20000d64
 8009ef0:	200001b0 	.word	0x200001b0
 8009ef4:	20000014 	.word	0x20000014
 8009ef8:	200000c0 	.word	0x200000c0

08009efc <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	01db      	lsls	r3, r3, #7
 8009f0a:	4a06      	ldr	r2, [pc, #24]	@ (8009f24 <CDC_Init+0x28>)
 8009f0c:	441a      	add	r2, r3
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	4905      	ldr	r1, [pc, #20]	@ (8009f28 <CDC_Init+0x2c>)
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fe5e 	bl	800abd4 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8009f18:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20001080 	.word	0x20001080
 8009f28:	20000d64 	.word	0x20000d64

08009f2c <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8009f36:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	603a      	str	r2, [r7, #0]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4603      	mov	r3, r0
 8009f50:	71fb      	strb	r3, [r7, #7]
 8009f52:	460b      	mov	r3, r1
 8009f54:	71bb      	strb	r3, [r7, #6]
 8009f56:	4613      	mov	r3, r2
 8009f58:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8009f5a:	79bb      	ldrb	r3, [r7, #6]
 8009f5c:	2b23      	cmp	r3, #35	@ 0x23
 8009f5e:	f200 80b6 	bhi.w	800a0ce <CDC_Control+0x18a>
 8009f62:	a201      	add	r2, pc, #4	@ (adr r2, 8009f68 <CDC_Control+0x24>)
 8009f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f68:	0800a0cf 	.word	0x0800a0cf
 8009f6c:	0800a0cf 	.word	0x0800a0cf
 8009f70:	0800a0cf 	.word	0x0800a0cf
 8009f74:	0800a0cf 	.word	0x0800a0cf
 8009f78:	0800a0cf 	.word	0x0800a0cf
 8009f7c:	0800a0cf 	.word	0x0800a0cf
 8009f80:	0800a0cf 	.word	0x0800a0cf
 8009f84:	0800a0cf 	.word	0x0800a0cf
 8009f88:	0800a0cf 	.word	0x0800a0cf
 8009f8c:	0800a0cf 	.word	0x0800a0cf
 8009f90:	0800a0cf 	.word	0x0800a0cf
 8009f94:	0800a0cf 	.word	0x0800a0cf
 8009f98:	0800a0cf 	.word	0x0800a0cf
 8009f9c:	0800a0cf 	.word	0x0800a0cf
 8009fa0:	0800a0cf 	.word	0x0800a0cf
 8009fa4:	0800a0cf 	.word	0x0800a0cf
 8009fa8:	0800a0cf 	.word	0x0800a0cf
 8009fac:	0800a0cf 	.word	0x0800a0cf
 8009fb0:	0800a0cf 	.word	0x0800a0cf
 8009fb4:	0800a0cf 	.word	0x0800a0cf
 8009fb8:	0800a0cf 	.word	0x0800a0cf
 8009fbc:	0800a0cf 	.word	0x0800a0cf
 8009fc0:	0800a0cf 	.word	0x0800a0cf
 8009fc4:	0800a0cf 	.word	0x0800a0cf
 8009fc8:	0800a0cf 	.word	0x0800a0cf
 8009fcc:	0800a0cf 	.word	0x0800a0cf
 8009fd0:	0800a0cf 	.word	0x0800a0cf
 8009fd4:	0800a0cf 	.word	0x0800a0cf
 8009fd8:	0800a0cf 	.word	0x0800a0cf
 8009fdc:	0800a0cf 	.word	0x0800a0cf
 8009fe0:	0800a0cf 	.word	0x0800a0cf
 8009fe4:	0800a0cf 	.word	0x0800a0cf
 8009fe8:	08009ff9 	.word	0x08009ff9
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a0cf 	.word	0x0800a0cf
 8009ff4:	0800a0cf 	.word	0x0800a0cf
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	3301      	adds	r3, #1
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	021b      	lsls	r3, r3, #8
 800a006:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	3302      	adds	r3, #2
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800a010:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	3303      	adds	r3, #3
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	061b      	lsls	r3, r3, #24
 800a01a:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	4611      	mov	r1, r2
 800a020:	4a2f      	ldr	r2, [pc, #188]	@ (800a0e0 <CDC_Control+0x19c>)
 800a022:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	7911      	ldrb	r1, [r2, #4]
 800a02c:	4a2c      	ldr	r2, [pc, #176]	@ (800a0e0 <CDC_Control+0x19c>)
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	4413      	add	r3, r2
 800a032:	460a      	mov	r2, r1
 800a034:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	7951      	ldrb	r1, [r2, #5]
 800a03c:	4a28      	ldr	r2, [pc, #160]	@ (800a0e0 <CDC_Control+0x19c>)
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	4413      	add	r3, r2
 800a042:	460a      	mov	r2, r1
 800a044:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	7991      	ldrb	r1, [r2, #6]
 800a04c:	4a24      	ldr	r2, [pc, #144]	@ (800a0e0 <CDC_Control+0x19c>)
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	4413      	add	r3, r2
 800a052:	460a      	mov	r2, r1
 800a054:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800a056:	e03b      	b.n	800a0d0 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	4a21      	ldr	r2, [pc, #132]	@ (800a0e0 <CDC_Control+0x19c>)
 800a05c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a060:	b2da      	uxtb	r2, r3
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	4a1d      	ldr	r2, [pc, #116]	@ (800a0e0 <CDC_Control+0x19c>)
 800a06a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a06e:	0a1a      	lsrs	r2, r3, #8
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	3301      	adds	r3, #1
 800a074:	b2d2      	uxtb	r2, r2
 800a076:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	4a19      	ldr	r2, [pc, #100]	@ (800a0e0 <CDC_Control+0x19c>)
 800a07c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a080:	0c1a      	lsrs	r2, r3, #16
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	3302      	adds	r3, #2
 800a086:	b2d2      	uxtb	r2, r2
 800a088:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	4a14      	ldr	r2, [pc, #80]	@ (800a0e0 <CDC_Control+0x19c>)
 800a08e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a092:	0e1a      	lsrs	r2, r3, #24
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	3303      	adds	r3, #3
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	3204      	adds	r2, #4
 800a0a2:	490f      	ldr	r1, [pc, #60]	@ (800a0e0 <CDC_Control+0x19c>)
 800a0a4:	00db      	lsls	r3, r3, #3
 800a0a6:	440b      	add	r3, r1
 800a0a8:	791b      	ldrb	r3, [r3, #4]
 800a0aa:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	3205      	adds	r2, #5
 800a0b2:	490b      	ldr	r1, [pc, #44]	@ (800a0e0 <CDC_Control+0x19c>)
 800a0b4:	00db      	lsls	r3, r3, #3
 800a0b6:	440b      	add	r3, r1
 800a0b8:	795b      	ldrb	r3, [r3, #5]
 800a0ba:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 800a0bc:	79fb      	ldrb	r3, [r7, #7]
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	3206      	adds	r2, #6
 800a0c2:	4907      	ldr	r1, [pc, #28]	@ (800a0e0 <CDC_Control+0x19c>)
 800a0c4:	00db      	lsls	r3, r3, #3
 800a0c6:	440b      	add	r3, r1
 800a0c8:	799b      	ldrb	r3, [r3, #6]
 800a0ca:	7013      	strb	r3, [r2, #0]
    break;
 800a0cc:	e000      	b.n	800a0d0 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0ce:	bf00      	nop
  }

  return (USBD_OK);
 800a0d0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	20001100 	.word	0x20001100

0800a0e4 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
	signalTelemetryTask(Buf, *Len);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	68b8      	ldr	r0, [r7, #8]
 800a0fa:	f7f7 fdcf 	bl	8001c9c <signalTelemetryTask>
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	b29a      	uxth	r2, r3
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 f825 	bl	800a158 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	4907      	ldr	r1, [pc, #28]	@ (800a130 <CDC_Receive+0x4c>)
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fd5d 	bl	800abd4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	4904      	ldr	r1, [pc, #16]	@ (800a130 <CDC_Receive+0x4c>)
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 fdb8 	bl	800ac94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a124:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000d64 	.word	0x20000d64

0800a134 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	607a      	str	r2, [r7, #4]
 800a13e:	461a      	mov	r2, r3
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
 800a144:	4613      	mov	r3, r2
 800a146:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
	...

0800a158 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	6039      	str	r1, [r7, #0]
 800a162:	71fb      	strb	r3, [r7, #7]
 800a164:	4613      	mov	r3, r2
 800a166:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a176:	fb02 f303 	mul.w	r3, r2, r3
 800a17a:	4a0e      	ldr	r2, [pc, #56]	@ (800a1b4 <CDC_Transmit+0x5c>)
 800a17c:	4413      	add	r3, r2
 800a17e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e00d      	b.n	800a1aa <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800a18e:	88bb      	ldrh	r3, [r7, #4]
 800a190:	79f8      	ldrb	r0, [r7, #7]
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	4908      	ldr	r1, [pc, #32]	@ (800a1b8 <CDC_Transmit+0x60>)
 800a196:	f000 fcf9 	bl	800ab8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	4906      	ldr	r1, [pc, #24]	@ (800a1b8 <CDC_Transmit+0x60>)
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 fd36 	bl	800ac10 <USBD_CDC_TransmitPacket>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20001320 	.word	0x20001320
 800a1b8:	20000d64 	.word	0x20000d64

0800a1bc <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	6039      	str	r1, [r7, #0]
 800a1c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2212      	movs	r2, #18
 800a1cc:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800a1ce:	4b03      	ldr	r3, [pc, #12]	@ (800a1dc <USBD_DeviceDescriptor+0x20>)
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	20000044 	.word	0x20000044

0800a1e0 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2204      	movs	r2, #4
 800a1f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1f2:	4b03      	ldr	r3, [pc, #12]	@ (800a200 <USBD_LangIDStrDescriptor+0x20>)
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	20000058 	.word	0x20000058

0800a204 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4603      	mov	r3, r0
 800a20c:	6039      	str	r1, [r7, #0]
 800a20e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d105      	bne.n	800a222 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	4907      	ldr	r1, [pc, #28]	@ (800a238 <USBD_ProductStrDescriptor+0x34>)
 800a21a:	4808      	ldr	r0, [pc, #32]	@ (800a23c <USBD_ProductStrDescriptor+0x38>)
 800a21c:	f002 fc89 	bl	800cb32 <USBD_GetString>
 800a220:	e004      	b.n	800a22c <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	4904      	ldr	r1, [pc, #16]	@ (800a238 <USBD_ProductStrDescriptor+0x34>)
 800a226:	4805      	ldr	r0, [pc, #20]	@ (800a23c <USBD_ProductStrDescriptor+0x38>)
 800a228:	f002 fc83 	bl	800cb32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a22c:	4b02      	ldr	r3, [pc, #8]	@ (800a238 <USBD_ProductStrDescriptor+0x34>)
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20001108 	.word	0x20001108
 800a23c:	080105c0 	.word	0x080105c0

0800a240 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	4904      	ldr	r1, [pc, #16]	@ (800a260 <USBD_ManufacturerStrDescriptor+0x20>)
 800a250:	4804      	ldr	r0, [pc, #16]	@ (800a264 <USBD_ManufacturerStrDescriptor+0x24>)
 800a252:	f002 fc6e 	bl	800cb32 <USBD_GetString>
  return USBD_StrDesc;
 800a256:	4b02      	ldr	r3, [pc, #8]	@ (800a260 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20001108 	.word	0x20001108
 800a264:	080105d8 	.word	0x080105d8

0800a268 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	6039      	str	r1, [r7, #0]
 800a272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	221a      	movs	r2, #26
 800a278:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a27a:	f000 f843 	bl	800a304 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a27e:	4b02      	ldr	r3, [pc, #8]	@ (800a288 <USBD_SerialStrDescriptor+0x20>)
}
 800a280:	4618      	mov	r0, r3
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	2000005c 	.word	0x2000005c

0800a28c <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	6039      	str	r1, [r7, #0]
 800a296:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d105      	bne.n	800a2aa <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	4907      	ldr	r1, [pc, #28]	@ (800a2c0 <USBD_ConfigStrDescriptor+0x34>)
 800a2a2:	4808      	ldr	r0, [pc, #32]	@ (800a2c4 <USBD_ConfigStrDescriptor+0x38>)
 800a2a4:	f002 fc45 	bl	800cb32 <USBD_GetString>
 800a2a8:	e004      	b.n	800a2b4 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	4904      	ldr	r1, [pc, #16]	@ (800a2c0 <USBD_ConfigStrDescriptor+0x34>)
 800a2ae:	4805      	ldr	r0, [pc, #20]	@ (800a2c4 <USBD_ConfigStrDescriptor+0x38>)
 800a2b0:	f002 fc3f 	bl	800cb32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2b4:	4b02      	ldr	r3, [pc, #8]	@ (800a2c0 <USBD_ConfigStrDescriptor+0x34>)
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	20001108 	.word	0x20001108
 800a2c4:	080105ec 	.word	0x080105ec

0800a2c8 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4907      	ldr	r1, [pc, #28]	@ (800a2fc <USBD_InterfaceStrDescriptor+0x34>)
 800a2de:	4808      	ldr	r0, [pc, #32]	@ (800a300 <USBD_InterfaceStrDescriptor+0x38>)
 800a2e0:	f002 fc27 	bl	800cb32 <USBD_GetString>
 800a2e4:	e004      	b.n	800a2f0 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	4904      	ldr	r1, [pc, #16]	@ (800a2fc <USBD_InterfaceStrDescriptor+0x34>)
 800a2ea:	4805      	ldr	r0, [pc, #20]	@ (800a300 <USBD_InterfaceStrDescriptor+0x38>)
 800a2ec:	f002 fc21 	bl	800cb32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f0:	4b02      	ldr	r3, [pc, #8]	@ (800a2fc <USBD_InterfaceStrDescriptor+0x34>)
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20001108 	.word	0x20001108
 800a300:	080105fc 	.word	0x080105fc

0800a304 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a30a:	4b0f      	ldr	r3, [pc, #60]	@ (800a348 <Get_SerialNum+0x44>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a310:	4b0e      	ldr	r3, [pc, #56]	@ (800a34c <Get_SerialNum+0x48>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a316:	4b0e      	ldr	r3, [pc, #56]	@ (800a350 <Get_SerialNum+0x4c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4413      	add	r3, r2
 800a322:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d009      	beq.n	800a33e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a32a:	2208      	movs	r2, #8
 800a32c:	4909      	ldr	r1, [pc, #36]	@ (800a354 <Get_SerialNum+0x50>)
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 f814 	bl	800a35c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a334:	2204      	movs	r2, #4
 800a336:	4908      	ldr	r1, [pc, #32]	@ (800a358 <Get_SerialNum+0x54>)
 800a338:	68b8      	ldr	r0, [r7, #8]
 800a33a:	f000 f80f 	bl	800a35c <IntToUnicode>
  }
}
 800a33e:	bf00      	nop
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	1fff7a10 	.word	0x1fff7a10
 800a34c:	1fff7a14 	.word	0x1fff7a14
 800a350:	1fff7a18 	.word	0x1fff7a18
 800a354:	2000005e 	.word	0x2000005e
 800a358:	2000006e 	.word	0x2000006e

0800a35c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a36e:	2300      	movs	r3, #0
 800a370:	75fb      	strb	r3, [r7, #23]
 800a372:	e027      	b.n	800a3c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	0f1b      	lsrs	r3, r3, #28
 800a378:	2b09      	cmp	r3, #9
 800a37a:	d80b      	bhi.n	800a394 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	0f1b      	lsrs	r3, r3, #28
 800a380:	b2da      	uxtb	r2, r3
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	4619      	mov	r1, r3
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	440b      	add	r3, r1
 800a38c:	3230      	adds	r2, #48	@ 0x30
 800a38e:	b2d2      	uxtb	r2, r2
 800a390:	701a      	strb	r2, [r3, #0]
 800a392:	e00a      	b.n	800a3aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	0f1b      	lsrs	r3, r3, #28
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
 800a39c:	005b      	lsls	r3, r3, #1
 800a39e:	4619      	mov	r1, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	440b      	add	r3, r1
 800a3a4:	3237      	adds	r2, #55	@ 0x37
 800a3a6:	b2d2      	uxtb	r2, r2
 800a3a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	011b      	lsls	r3, r3, #4
 800a3ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	75fb      	strb	r3, [r7, #23]
 800a3c4:	7dfa      	ldrb	r2, [r7, #23]
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d3d3      	bcc.n	800a374 <IntToUnicode+0x18>
  }
}
 800a3cc:	bf00      	nop
 800a3ce:	bf00      	nop
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3de:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a3ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	4603      	mov	r3, r0
 800a402:	460a      	mov	r2, r1
 800a404:	71fb      	strb	r3, [r7, #7]
 800a406:	4613      	mov	r3, r2
 800a408:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800a40a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <USBD_CUSTOM_HID_SendCustomReport>:
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t USBD_CUSTOM_HID_SendCustomReport(uint8_t *report, uint16_t len)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDevice, report, len);
 800a424:	887b      	ldrh	r3, [r7, #2]
 800a426:	461a      	mov	r2, r3
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	4804      	ldr	r0, [pc, #16]	@ (800a43c <USBD_CUSTOM_HID_SendCustomReport+0x24>)
 800a42c:	f001 f9c4 	bl	800b7b8 <USBD_CUSTOM_HID_SendReport>
 800a430:	4603      	mov	r3, r0
 800a432:	b25b      	sxtb	r3, r3
}
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20000d64 	.word	0x20000d64

0800a440 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
 800a454:	e0c6      	b.n	800a5e4 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a45c:	fb02 f303 	mul.w	r3, r2, r3
 800a460:	4a65      	ldr	r2, [pc, #404]	@ (800a5f8 <USBD_CDC_Init+0x1b8>)
 800a462:	4413      	add	r3, r2
 800a464:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	7c1b      	ldrb	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d13d      	bne.n	800a4ea <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	4a62      	ldr	r2, [pc, #392]	@ (800a5fc <USBD_CDC_Init+0x1bc>)
 800a472:	5cd1      	ldrb	r1, [r2, r3]
 800a474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a478:	2202      	movs	r2, #2
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f002 fdcb 	bl	800d016 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	4a5e      	ldr	r2, [pc, #376]	@ (800a5fc <USBD_CDC_Init+0x1bc>)
 800a484:	5cd3      	ldrb	r3, [r2, r3]
 800a486:	f003 020f 	and.w	r2, r3, #15
 800a48a:	6879      	ldr	r1, [r7, #4]
 800a48c:	4613      	mov	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	440b      	add	r3, r1
 800a496:	3324      	adds	r3, #36	@ 0x24
 800a498:	2201      	movs	r2, #1
 800a49a:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	4a58      	ldr	r2, [pc, #352]	@ (800a600 <USBD_CDC_Init+0x1c0>)
 800a4a0:	5cd1      	ldrb	r1, [r2, r3]
 800a4a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f002 fdb4 	bl	800d016 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	4a53      	ldr	r2, [pc, #332]	@ (800a600 <USBD_CDC_Init+0x1c0>)
 800a4b2:	5cd3      	ldrb	r3, [r2, r3]
 800a4b4:	f003 020f 	and.w	r2, r3, #15
 800a4b8:	6879      	ldr	r1, [r7, #4]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	440b      	add	r3, r1
 800a4c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	4a4d      	ldr	r2, [pc, #308]	@ (800a604 <USBD_CDC_Init+0x1c4>)
 800a4d0:	5cd3      	ldrb	r3, [r2, r3]
 800a4d2:	f003 020f 	and.w	r2, r3, #15
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	3326      	adds	r3, #38	@ 0x26
 800a4e4:	2210      	movs	r2, #16
 800a4e6:	801a      	strh	r2, [r3, #0]
 800a4e8:	e03a      	b.n	800a560 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	4a43      	ldr	r2, [pc, #268]	@ (800a5fc <USBD_CDC_Init+0x1bc>)
 800a4ee:	5cd1      	ldrb	r1, [r2, r3]
 800a4f0:	2340      	movs	r3, #64	@ 0x40
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f002 fd8e 	bl	800d016 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a5fc <USBD_CDC_Init+0x1bc>)
 800a4fe:	5cd3      	ldrb	r3, [r2, r3]
 800a500:	f003 020f 	and.w	r2, r3, #15
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	4613      	mov	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	440b      	add	r3, r1
 800a510:	3324      	adds	r3, #36	@ 0x24
 800a512:	2201      	movs	r2, #1
 800a514:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	4a39      	ldr	r2, [pc, #228]	@ (800a600 <USBD_CDC_Init+0x1c0>)
 800a51a:	5cd1      	ldrb	r1, [r2, r3]
 800a51c:	2340      	movs	r3, #64	@ 0x40
 800a51e:	2202      	movs	r2, #2
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f002 fd78 	bl	800d016 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	4a35      	ldr	r2, [pc, #212]	@ (800a600 <USBD_CDC_Init+0x1c0>)
 800a52a:	5cd3      	ldrb	r3, [r2, r3]
 800a52c:	f003 020f 	and.w	r2, r3, #15
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	4613      	mov	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	440b      	add	r3, r1
 800a53c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a540:	2201      	movs	r2, #1
 800a542:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	4a2f      	ldr	r2, [pc, #188]	@ (800a604 <USBD_CDC_Init+0x1c4>)
 800a548:	5cd3      	ldrb	r3, [r2, r3]
 800a54a:	f003 020f 	and.w	r2, r3, #15
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	440b      	add	r3, r1
 800a55a:	3326      	adds	r3, #38	@ 0x26
 800a55c:	2210      	movs	r2, #16
 800a55e:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	4a28      	ldr	r2, [pc, #160]	@ (800a604 <USBD_CDC_Init+0x1c4>)
 800a564:	5cd1      	ldrb	r1, [r2, r3]
 800a566:	2308      	movs	r3, #8
 800a568:	2203      	movs	r2, #3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f002 fd53 	bl	800d016 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
 800a572:	4a24      	ldr	r2, [pc, #144]	@ (800a604 <USBD_CDC_Init+0x1c4>)
 800a574:	5cd3      	ldrb	r3, [r2, r3]
 800a576:	f003 020f 	and.w	r2, r3, #15
 800a57a:	6879      	ldr	r1, [r7, #4]
 800a57c:	4613      	mov	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	3324      	adds	r3, #36	@ 0x24
 800a588:	2201      	movs	r2, #1
 800a58a:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	7bfa      	ldrb	r2, [r7, #15]
 800a596:	4610      	mov	r0, r2
 800a598:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	7c1b      	ldrb	r3, [r3, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10b      	bne.n	800a5ca <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	4a12      	ldr	r2, [pc, #72]	@ (800a600 <USBD_CDC_Init+0x1c0>)
 800a5b6:	5cd1      	ldrb	r1, [r2, r3]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a5be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f002 fe16 	bl	800d1f4 <USBD_LL_PrepareReceive>
 800a5c8:	e009      	b.n	800a5de <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
 800a5cc:	4a0c      	ldr	r2, [pc, #48]	@ (800a600 <USBD_CDC_Init+0x1c0>)
 800a5ce:	5cd1      	ldrb	r1, [r2, r3]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a5d6:	2340      	movs	r3, #64	@ 0x40
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f002 fe0b 	bl	800d1f4 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	73fb      	strb	r3, [r7, #15]
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f43f af35 	beq.w	800a456 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20001320 	.word	0x20001320
 800a5fc:	20001308 	.word	0x20001308
 800a600:	2000130c 	.word	0x2000130c
 800a604:	20001310 	.word	0x20001310

0800a608 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]
 800a618:	e057      	b.n	800a6ca <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	4a2f      	ldr	r2, [pc, #188]	@ (800a6dc <USBD_CDC_DeInit+0xd4>)
 800a61e:	5cd3      	ldrb	r3, [r2, r3]
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f002 fd1d 	bl	800d062 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	4a2c      	ldr	r2, [pc, #176]	@ (800a6dc <USBD_CDC_DeInit+0xd4>)
 800a62c:	5cd3      	ldrb	r3, [r2, r3]
 800a62e:	f003 020f 	and.w	r2, r3, #15
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	440b      	add	r3, r1
 800a63e:	3324      	adds	r3, #36	@ 0x24
 800a640:	2200      	movs	r2, #0
 800a642:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	4a26      	ldr	r2, [pc, #152]	@ (800a6e0 <USBD_CDC_DeInit+0xd8>)
 800a648:	5cd3      	ldrb	r3, [r2, r3]
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f002 fd08 	bl	800d062 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	4a22      	ldr	r2, [pc, #136]	@ (800a6e0 <USBD_CDC_DeInit+0xd8>)
 800a656:	5cd3      	ldrb	r3, [r2, r3]
 800a658:	f003 020f 	and.w	r2, r3, #15
 800a65c:	6879      	ldr	r1, [r7, #4]
 800a65e:	4613      	mov	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	440b      	add	r3, r1
 800a668:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a66c:	2200      	movs	r2, #0
 800a66e:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	4a1c      	ldr	r2, [pc, #112]	@ (800a6e4 <USBD_CDC_DeInit+0xdc>)
 800a674:	5cd3      	ldrb	r3, [r2, r3]
 800a676:	4619      	mov	r1, r3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f002 fcf2 	bl	800d062 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	4a18      	ldr	r2, [pc, #96]	@ (800a6e4 <USBD_CDC_DeInit+0xdc>)
 800a682:	5cd3      	ldrb	r3, [r2, r3]
 800a684:	f003 020f 	and.w	r2, r3, #15
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	440b      	add	r3, r1
 800a694:	3324      	adds	r3, #36	@ 0x24
 800a696:	2200      	movs	r2, #0
 800a698:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	4a11      	ldr	r2, [pc, #68]	@ (800a6e4 <USBD_CDC_DeInit+0xdc>)
 800a69e:	5cd3      	ldrb	r3, [r2, r3]
 800a6a0:	f003 020f 	and.w	r2, r3, #15
 800a6a4:	6879      	ldr	r1, [r7, #4]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3326      	adds	r3, #38	@ 0x26
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	7bfa      	ldrb	r2, [r7, #15]
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	73fb      	strb	r3, [r7, #15]
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0a4      	beq.n	800a61a <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20001308 	.word	0x20001308
 800a6e0:	2000130c 	.word	0x2000130c
 800a6e4:	20001310 	.word	0x20001310

0800a6e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a6e8:	b590      	push	{r4, r7, lr}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a706:	2300      	movs	r3, #0
 800a708:	757b      	strb	r3, [r7, #21]
 800a70a:	e015      	b.n	800a738 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	889b      	ldrh	r3, [r3, #4]
 800a710:	b2da      	uxtb	r2, r3
 800a712:	7d7b      	ldrb	r3, [r7, #21]
 800a714:	496d      	ldr	r1, [pc, #436]	@ (800a8cc <USBD_CDC_Setup+0x1e4>)
 800a716:	5ccb      	ldrb	r3, [r1, r3]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d007      	beq.n	800a72c <USBD_CDC_Setup+0x44>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	889b      	ldrh	r3, [r3, #4]
 800a720:	b2da      	uxtb	r2, r3
 800a722:	7d7b      	ldrb	r3, [r7, #21]
 800a724:	496a      	ldr	r1, [pc, #424]	@ (800a8d0 <USBD_CDC_Setup+0x1e8>)
 800a726:	5ccb      	ldrb	r3, [r1, r3]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d102      	bne.n	800a732 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 800a72c:	7d7b      	ldrb	r3, [r7, #21]
 800a72e:	75bb      	strb	r3, [r7, #22]
      break;
 800a730:	e005      	b.n	800a73e <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a732:	7d7b      	ldrb	r3, [r7, #21]
 800a734:	3301      	adds	r3, #1
 800a736:	757b      	strb	r3, [r7, #21]
 800a738:	7d7b      	ldrb	r3, [r7, #21]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d0e6      	beq.n	800a70c <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800a73e:	7dbb      	ldrb	r3, [r7, #22]
 800a740:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a744:	fb02 f303 	mul.w	r3, r2, r3
 800a748:	4a62      	ldr	r2, [pc, #392]	@ (800a8d4 <USBD_CDC_Setup+0x1ec>)
 800a74a:	4413      	add	r3, r2
 800a74c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a756:	2b00      	cmp	r3, #0
 800a758:	d04a      	beq.n	800a7f0 <USBD_CDC_Setup+0x108>
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	f040 80aa 	bne.w	800a8b4 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	88db      	ldrh	r3, [r3, #6]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d038      	beq.n	800a7da <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	b25b      	sxtb	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da1d      	bge.n	800a7ae <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a778:	689c      	ldr	r4, [r3, #8]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	7859      	ldrb	r1, [r3, #1]
 800a77e:	7dbb      	ldrb	r3, [r7, #22]
 800a780:	025b      	lsls	r3, r3, #9
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	441a      	add	r2, r3
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	88db      	ldrh	r3, [r3, #6]
 800a78a:	7db8      	ldrb	r0, [r7, #22]
 800a78c:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	88db      	ldrh	r3, [r3, #6]
 800a792:	2b07      	cmp	r3, #7
 800a794:	bf28      	it	cs
 800a796:	2307      	movcs	r3, #7
 800a798:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800a79a:	7dbb      	ldrb	r3, [r7, #22]
 800a79c:	025b      	lsls	r3, r3, #9
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	89fa      	ldrh	r2, [r7, #14]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f002 fa23 	bl	800cbf2 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800a7ac:	e089      	b.n	800a8c2 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	785a      	ldrb	r2, [r3, #1]
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	88db      	ldrh	r3, [r3, #6]
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800a7c4:	7dbb      	ldrb	r3, [r7, #22]
 800a7c6:	025b      	lsls	r3, r3, #9
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	18d1      	adds	r1, r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	88db      	ldrh	r3, [r3, #6]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f002 fa39 	bl	800cc4a <USBD_CtlPrepareRx>
    break;
 800a7d8:	e073      	b.n	800a8c2 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7e0:	689c      	ldr	r4, [r3, #8]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	7859      	ldrb	r1, [r3, #1]
 800a7e6:	7db8      	ldrb	r0, [r7, #22]
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	47a0      	blx	r4
    break;
 800a7ee:	e068      	b.n	800a8c2 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	785b      	ldrb	r3, [r3, #1]
 800a7f4:	2b0b      	cmp	r3, #11
 800a7f6:	d852      	bhi.n	800a89e <USBD_CDC_Setup+0x1b6>
 800a7f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a800 <USBD_CDC_Setup+0x118>)
 800a7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fe:	bf00      	nop
 800a800:	0800a831 	.word	0x0800a831
 800a804:	0800a8ad 	.word	0x0800a8ad
 800a808:	0800a89f 	.word	0x0800a89f
 800a80c:	0800a89f 	.word	0x0800a89f
 800a810:	0800a89f 	.word	0x0800a89f
 800a814:	0800a89f 	.word	0x0800a89f
 800a818:	0800a89f 	.word	0x0800a89f
 800a81c:	0800a89f 	.word	0x0800a89f
 800a820:	0800a89f 	.word	0x0800a89f
 800a824:	0800a89f 	.word	0x0800a89f
 800a828:	0800a85b 	.word	0x0800a85b
 800a82c:	0800a885 	.word	0x0800a885
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d107      	bne.n	800a84c <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a83c:	f107 030a 	add.w	r3, r7, #10
 800a840:	2202      	movs	r2, #2
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f002 f9d4 	bl	800cbf2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a84a:	e032      	b.n	800a8b2 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f002 f95e 	bl	800cb10 <USBD_CtlError>
        ret = USBD_FAIL;
 800a854:	2303      	movs	r3, #3
 800a856:	75fb      	strb	r3, [r7, #23]
      break;
 800a858:	e02b      	b.n	800a8b2 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b03      	cmp	r3, #3
 800a864:	d107      	bne.n	800a876 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a866:	f107 030d 	add.w	r3, r7, #13
 800a86a:	2201      	movs	r2, #1
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f002 f9bf 	bl	800cbf2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a874:	e01d      	b.n	800a8b2 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f002 f949 	bl	800cb10 <USBD_CtlError>
        ret = USBD_FAIL;
 800a87e:	2303      	movs	r3, #3
 800a880:	75fb      	strb	r3, [r7, #23]
      break;
 800a882:	e016      	b.n	800a8b2 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d00f      	beq.n	800a8b0 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f002 f93c 	bl	800cb10 <USBD_CtlError>
        ret = USBD_FAIL;
 800a898:	2303      	movs	r3, #3
 800a89a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a89c:	e008      	b.n	800a8b0 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f002 f935 	bl	800cb10 <USBD_CtlError>
      ret = USBD_FAIL;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a8aa:	e002      	b.n	800a8b2 <USBD_CDC_Setup+0x1ca>
      break;
 800a8ac:	bf00      	nop
 800a8ae:	e008      	b.n	800a8c2 <USBD_CDC_Setup+0x1da>
      break;
 800a8b0:	bf00      	nop
    }
    break;
 800a8b2:	e006      	b.n	800a8c2 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f002 f92a 	bl	800cb10 <USBD_CtlError>
    ret = USBD_FAIL;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	75fb      	strb	r3, [r7, #23]
    break;
 800a8c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	371c      	adds	r7, #28
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd90      	pop	{r4, r7, pc}
 800a8cc:	20001314 	.word	0x20001314
 800a8d0:	20001318 	.word	0x20001318
 800a8d4:	20001320 	.word	0x20001320

0800a8d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8d8:	b590      	push	{r4, r7, lr}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800a8ee:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	75bb      	strb	r3, [r7, #22]
 800a8f8:	e00d      	b.n	800a916 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800a8fa:	78fa      	ldrb	r2, [r7, #3]
 800a8fc:	7dbb      	ldrb	r3, [r7, #22]
 800a8fe:	4934      	ldr	r1, [pc, #208]	@ (800a9d0 <USBD_CDC_DataIn+0xf8>)
 800a900:	5ccb      	ldrb	r3, [r1, r3]
 800a902:	f003 030f 	and.w	r3, r3, #15
 800a906:	429a      	cmp	r2, r3
 800a908:	d102      	bne.n	800a910 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800a90a:	7dbb      	ldrb	r3, [r7, #22]
 800a90c:	75fb      	strb	r3, [r7, #23]
      break;
 800a90e:	e005      	b.n	800a91c <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a910:	7dbb      	ldrb	r3, [r7, #22]
 800a912:	3301      	adds	r3, #1
 800a914:	75bb      	strb	r3, [r7, #22]
 800a916:	7dbb      	ldrb	r3, [r7, #22]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0ee      	beq.n	800a8fa <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
 800a91e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a922:	fb02 f303 	mul.w	r3, r2, r3
 800a926:	4a2b      	ldr	r2, [pc, #172]	@ (800a9d4 <USBD_CDC_DataIn+0xfc>)
 800a928:	4413      	add	r3, r2
 800a92a:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a92c:	78fa      	ldrb	r2, [r7, #3]
 800a92e:	6879      	ldr	r1, [r7, #4]
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	440b      	add	r3, r1
 800a93a:	3318      	adds	r3, #24
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d029      	beq.n	800a996 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a942:	78fa      	ldrb	r2, [r7, #3]
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	4613      	mov	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	440b      	add	r3, r1
 800a950:	3318      	adds	r3, #24
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	78f9      	ldrb	r1, [r7, #3]
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	460b      	mov	r3, r1
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	440b      	add	r3, r1
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4403      	add	r3, r0
 800a962:	331c      	adds	r3, #28
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	fbb2 f1f3 	udiv	r1, r2, r3
 800a96a:	fb01 f303 	mul.w	r3, r1, r3
 800a96e:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a970:	2b00      	cmp	r3, #0
 800a972:	d110      	bne.n	800a996 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a974:	78fa      	ldrb	r2, [r7, #3]
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	4613      	mov	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4413      	add	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	440b      	add	r3, r1
 800a982:	3318      	adds	r3, #24
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a988:	78f9      	ldrb	r1, [r7, #3]
 800a98a:	2300      	movs	r3, #0
 800a98c:	2200      	movs	r2, #0
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f002 fc0f 	bl	800d1b2 <USBD_LL_Transmit>
 800a994:	e016      	b.n	800a9c4 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00c      	beq.n	800a9c4 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9b0:	691c      	ldr	r4, [r3, #16]
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	7df8      	ldrb	r0, [r7, #23]
 800a9c2:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	371c      	adds	r7, #28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd90      	pop	{r4, r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20001308 	.word	0x20001308
 800a9d4:	20001320 	.word	0x20001320

0800a9d8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73bb      	strb	r3, [r7, #14]
 800a9f0:	e00b      	b.n	800aa0a <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	4a17      	ldr	r2, [pc, #92]	@ (800aa54 <USBD_CDC_DataOut+0x7c>)
 800a9f6:	5cd3      	ldrb	r3, [r2, r3]
 800a9f8:	78fa      	ldrb	r2, [r7, #3]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d102      	bne.n	800aa04 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	73fb      	strb	r3, [r7, #15]
      break;
 800aa02:	e005      	b.n	800aa10 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	3301      	adds	r3, #1
 800aa08:	73bb      	strb	r3, [r7, #14]
 800aa0a:	7bbb      	ldrb	r3, [r7, #14]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0f0      	beq.n	800a9f2 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
 800aa12:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa16:	fb02 f303 	mul.w	r3, r2, r3
 800aa1a:	4a0f      	ldr	r2, [pc, #60]	@ (800aa58 <USBD_CDC_DataOut+0x80>)
 800aa1c:	4413      	add	r3, r2
 800aa1e:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f002 fc06 	bl	800d236 <USBD_LL_GetRxDataSize>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aa46:	7bf8      	ldrb	r0, [r7, #15]
 800aa48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	2000130c 	.word	0x2000130c
 800aa58:	20001320 	.word	0x20001320

0800aa5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa5c:	b590      	push	{r4, r7, lr}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800aa64:	2300      	movs	r3, #0
 800aa66:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73fb      	strb	r3, [r7, #15]
 800aa6c:	e02d      	b.n	800aaca <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa74:	fb02 f303 	mul.w	r3, r2, r3
 800aa78:	4a18      	ldr	r2, [pc, #96]	@ (800aadc <USBD_CDC_EP0_RxReady+0x80>)
 800aa7a:	4413      	add	r3, r2
 800aa7c:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e024      	b.n	800aad2 <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d018      	beq.n	800aac4 <USBD_CDC_EP0_RxReady+0x68>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800aa98:	2bff      	cmp	r3, #255	@ 0xff
 800aa9a:	d013      	beq.n	800aac4 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaa2:	689c      	ldr	r4, [r3, #8]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
 800aaac:	025b      	lsls	r3, r3, #9
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	441a      	add	r2, r3
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aab8:	7bf8      	ldrb	r0, [r7, #15]
 800aaba:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	22ff      	movs	r2, #255	@ 0xff
 800aac0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	3301      	adds	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0ce      	beq.n	800aa6e <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd90      	pop	{r4, r7, pc}
 800aada:	bf00      	nop
 800aadc:	20001320 	.word	0x20001320

0800aae0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	224b      	movs	r2, #75	@ 0x4b
 800aaec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800aaee:	4b03      	ldr	r3, [pc, #12]	@ (800aafc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20000164 	.word	0x20000164

0800ab00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	224b      	movs	r2, #75	@ 0x4b
 800ab0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ab0e:	4b03      	ldr	r3, [pc, #12]	@ (800ab1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	20000118 	.word	0x20000118

0800ab20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	224b      	movs	r2, #75	@ 0x4b
 800ab2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ab2e:	4b03      	ldr	r3, [pc, #12]	@ (800ab3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	20000164 	.word	0x20000164

0800ab40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	220a      	movs	r2, #10
 800ab4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab4e:	4b03      	ldr	r3, [pc, #12]	@ (800ab5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	200000d0 	.word	0x200000d0

0800ab60 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e004      	b.n	800ab7e <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
	...

0800ab8c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aba6:	fb02 f303 	mul.w	r3, r2, r3
 800abaa:	4a09      	ldr	r2, [pc, #36]	@ (800abd0 <USBD_CDC_SetTxBuffer+0x44>)
 800abac:	4413      	add	r3, r2
 800abae:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	20001320 	.word	0x20001320

0800abd4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800abec:	fb02 f303 	mul.w	r3, r2, r3
 800abf0:	4a06      	ldr	r2, [pc, #24]	@ (800ac0c <USBD_CDC_SetRxBuffer+0x38>)
 800abf2:	4413      	add	r3, r2
 800abf4:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	371c      	adds	r7, #28
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	20001320 	.word	0x20001320

0800ac10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac20:	2301      	movs	r3, #1
 800ac22:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ac2a:	fb02 f303 	mul.w	r3, r2, r3
 800ac2e:	4a17      	ldr	r2, [pc, #92]	@ (800ac8c <USBD_CDC_TransmitPacket+0x7c>)
 800ac30:	4413      	add	r3, r2
 800ac32:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d121      	bne.n	800ac82 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	4a11      	ldr	r2, [pc, #68]	@ (800ac90 <USBD_CDC_TransmitPacket+0x80>)
 800ac4a:	5cd3      	ldrb	r3, [r2, r3]
 800ac4c:	f003 020f 	and.w	r2, r3, #15
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ac56:	6838      	ldr	r0, [r7, #0]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4403      	add	r3, r0
 800ac62:	3318      	adds	r3, #24
 800ac64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800ac66:	79fb      	ldrb	r3, [r7, #7]
 800ac68:	4a09      	ldr	r2, [pc, #36]	@ (800ac90 <USBD_CDC_TransmitPacket+0x80>)
 800ac6a:	5cd1      	ldrb	r1, [r2, r3]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ac78:	6838      	ldr	r0, [r7, #0]
 800ac7a:	f002 fa9a 	bl	800d1b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	20001320 	.word	0x20001320
 800ac90:	20001308 	.word	0x20001308

0800ac94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	6039      	str	r1, [r7, #0]
 800ac9e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800acaa:	fb02 f303 	mul.w	r3, r2, r3
 800acae:	4a11      	ldr	r2, [pc, #68]	@ (800acf4 <USBD_CDC_ReceivePacket+0x60>)
 800acb0:	4413      	add	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	7c1b      	ldrb	r3, [r3, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10b      	bne.n	800acd4 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	4a0e      	ldr	r2, [pc, #56]	@ (800acf8 <USBD_CDC_ReceivePacket+0x64>)
 800acc0:	5cd1      	ldrb	r1, [r2, r3]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800accc:	6838      	ldr	r0, [r7, #0]
 800acce:	f002 fa91 	bl	800d1f4 <USBD_LL_PrepareReceive>
 800acd2:	e009      	b.n	800ace8 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800acd4:	79fb      	ldrb	r3, [r7, #7]
 800acd6:	4a08      	ldr	r2, [pc, #32]	@ (800acf8 <USBD_CDC_ReceivePacket+0x64>)
 800acd8:	5cd1      	ldrb	r1, [r2, r3]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ace0:	2340      	movs	r3, #64	@ 0x40
 800ace2:	6838      	ldr	r0, [r7, #0]
 800ace4:	f002 fa86 	bl	800d1f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20001320 	.word	0x20001320
 800acf8:	2000130c 	.word	0x2000130c

0800acfc <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	4608      	mov	r0, r1
 800ad06:	4611      	mov	r1, r2
 800ad08:	461a      	mov	r2, r3
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	70fb      	strb	r3, [r7, #3]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	70bb      	strb	r3, [r7, #2]
 800ad12:	4613      	mov	r3, r2
 800ad14:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3309      	adds	r3, #9
 800ad1a:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	73fb      	strb	r3, [r7, #15]
 800ad20:	e05b      	b.n	800adda <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3302      	adds	r3, #2
 800ad26:	78fa      	ldrb	r2, [r7, #3]
 800ad28:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	3310      	adds	r3, #16
 800ad2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ad32:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	330a      	adds	r3, #10
 800ad38:	78fa      	ldrb	r2, [r7, #3]
 800ad3a:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	331a      	adds	r3, #26
 800ad40:	78ba      	ldrb	r2, [r7, #2]
 800ad42:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3322      	adds	r3, #34	@ 0x22
 800ad48:	78fa      	ldrb	r2, [r7, #3]
 800ad4a:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3323      	adds	r3, #35	@ 0x23
 800ad50:	78ba      	ldrb	r2, [r7, #2]
 800ad52:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	3326      	adds	r3, #38	@ 0x26
 800ad58:	7e3a      	ldrb	r2, [r7, #24]
 800ad5a:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	332d      	adds	r3, #45	@ 0x2d
 800ad60:	78ba      	ldrb	r2, [r7, #2]
 800ad62:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3336      	adds	r3, #54	@ 0x36
 800ad68:	7f3a      	ldrb	r2, [r7, #28]
 800ad6a:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	333d      	adds	r3, #61	@ 0x3d
 800ad70:	787a      	ldrb	r2, [r7, #1]
 800ad72:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3342      	adds	r3, #66	@ 0x42
 800ad78:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	491c      	ldr	r1, [pc, #112]	@ (800adf0 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800ad7e:	787a      	ldrb	r2, [r7, #1]
 800ad80:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	491b      	ldr	r1, [pc, #108]	@ (800adf4 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800ad86:	7f3a      	ldrb	r2, [r7, #28]
 800ad88:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	491a      	ldr	r1, [pc, #104]	@ (800adf8 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800ad8e:	7e3a      	ldrb	r2, [r7, #24]
 800ad90:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	4919      	ldr	r1, [pc, #100]	@ (800adfc <USBD_Update_CDC_ACM_DESC+0x100>)
 800ad96:	78fa      	ldrb	r2, [r7, #3]
 800ad98:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	4918      	ldr	r1, [pc, #96]	@ (800ae00 <USBD_Update_CDC_ACM_DESC+0x104>)
 800ad9e:	78ba      	ldrb	r2, [r7, #2]
 800ada0:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	4917      	ldr	r1, [pc, #92]	@ (800ae04 <USBD_Update_CDC_ACM_DESC+0x108>)
 800ada6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800adaa:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800adac:	787b      	ldrb	r3, [r7, #1]
 800adae:	3302      	adds	r3, #2
 800adb0:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800adb2:	787b      	ldrb	r3, [r7, #1]
 800adb4:	3301      	adds	r3, #1
 800adb6:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800adb8:	7f3b      	ldrb	r3, [r7, #28]
 800adba:	3301      	adds	r3, #1
 800adbc:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800adbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adc2:	3301      	adds	r3, #1
 800adc4:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800adc8:	78fb      	ldrb	r3, [r7, #3]
 800adca:	3302      	adds	r3, #2
 800adcc:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	3301      	adds	r3, #1
 800add2:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	3301      	adds	r3, #1
 800add8:	73fb      	strb	r3, [r7, #15]
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d0a0      	beq.n	800ad22 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800ade0:	bf00      	nop
 800ade2:	bf00      	nop
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	20001308 	.word	0x20001308
 800adf4:	2000130c 	.word	0x2000130c
 800adf8:	20001310 	.word	0x20001310
 800adfc:	20001314 	.word	0x20001314
 800ae00:	20001318 	.word	0x20001318
 800ae04:	2000131c 	.word	0x2000131c

0800ae08 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800ae14:	4b08      	ldr	r3, [pc, #32]	@ (800ae38 <USBD_COMPOSITE_Init+0x30>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	78fa      	ldrb	r2, [r7, #3]
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800ae20:	4b06      	ldr	r3, [pc, #24]	@ (800ae3c <USBD_COMPOSITE_Init+0x34>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	78fa      	ldrb	r2, [r7, #3]
 800ae26:	4611      	mov	r1, r2
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	200000dc 	.word	0x200000dc
 800ae3c:	200001fc 	.word	0x200001fc

0800ae40 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800ae4c:	4b08      	ldr	r3, [pc, #32]	@ (800ae70 <USBD_COMPOSITE_DeInit+0x30>)
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	78fa      	ldrb	r2, [r7, #3]
 800ae52:	4611      	mov	r1, r2
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800ae58:	4b06      	ldr	r3, [pc, #24]	@ (800ae74 <USBD_COMPOSITE_DeInit+0x34>)
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	78fa      	ldrb	r2, [r7, #3]
 800ae5e:	4611      	mov	r1, r2
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	200000dc 	.word	0x200000dc
 800ae74:	200001fc 	.word	0x200001fc

0800ae78 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]
 800ae86:	e019      	b.n	800aebc <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	889b      	ldrh	r3, [r3, #4]
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	4915      	ldr	r1, [pc, #84]	@ (800aee8 <USBD_COMPOSITE_Setup+0x70>)
 800ae92:	5ccb      	ldrb	r3, [r1, r3]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d007      	beq.n	800aea8 <USBD_COMPOSITE_Setup+0x30>
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	889b      	ldrh	r3, [r3, #4]
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	4912      	ldr	r1, [pc, #72]	@ (800aeec <USBD_COMPOSITE_Setup+0x74>)
 800aea2:	5ccb      	ldrb	r3, [r1, r3]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d106      	bne.n	800aeb6 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800aea8:	4b11      	ldr	r3, [pc, #68]	@ (800aef0 <USBD_COMPOSITE_Setup+0x78>)
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	4798      	blx	r3
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	e014      	b.n	800aee0 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	73fb      	strb	r3, [r7, #15]
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0e2      	beq.n	800ae88 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	889b      	ldrh	r3, [r3, #4]
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	4b0a      	ldr	r3, [pc, #40]	@ (800aef4 <USBD_COMPOSITE_Setup+0x7c>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d106      	bne.n	800aede <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800aed0:	4b09      	ldr	r3, [pc, #36]	@ (800aef8 <USBD_COMPOSITE_Setup+0x80>)
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	4798      	blx	r3
 800aeda:	4603      	mov	r3, r0
 800aedc:	e000      	b.n	800aee0 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800aede:	2303      	movs	r3, #3
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20001314 	.word	0x20001314
 800aeec:	20001318 	.word	0x20001318
 800aef0:	200000dc 	.word	0x200000dc
 800aef4:	20001654 	.word	0x20001654
 800aef8:	200001fc 	.word	0x200001fc

0800aefc <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
 800af0c:	e01a      	b.n	800af44 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800af0e:	78fa      	ldrb	r2, [r7, #3]
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	4918      	ldr	r1, [pc, #96]	@ (800af74 <USBD_COMPOSITE_DataIn+0x78>)
 800af14:	5ccb      	ldrb	r3, [r1, r3]
 800af16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d007      	beq.n	800af2e <USBD_COMPOSITE_DataIn+0x32>
 800af1e:	78fa      	ldrb	r2, [r7, #3]
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	4915      	ldr	r1, [pc, #84]	@ (800af78 <USBD_COMPOSITE_DataIn+0x7c>)
 800af24:	5ccb      	ldrb	r3, [r1, r3]
 800af26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d107      	bne.n	800af3e <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800af2e:	4b13      	ldr	r3, [pc, #76]	@ (800af7c <USBD_COMPOSITE_DataIn+0x80>)
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	78fa      	ldrb	r2, [r7, #3]
 800af34:	4611      	mov	r1, r2
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
 800af3a:	4603      	mov	r3, r0
 800af3c:	e015      	b.n	800af6a <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	3301      	adds	r3, #1
 800af42:	73fb      	strb	r3, [r7, #15]
 800af44:	7bfb      	ldrb	r3, [r7, #15]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d0e1      	beq.n	800af0e <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800af4a:	78fa      	ldrb	r2, [r7, #3]
 800af4c:	4b0c      	ldr	r3, [pc, #48]	@ (800af80 <USBD_COMPOSITE_DataIn+0x84>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af54:	429a      	cmp	r2, r3
 800af56:	d107      	bne.n	800af68 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800af58:	4b0a      	ldr	r3, [pc, #40]	@ (800af84 <USBD_COMPOSITE_DataIn+0x88>)
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	78fa      	ldrb	r2, [r7, #3]
 800af5e:	4611      	mov	r1, r2
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	4798      	blx	r3
 800af64:	4603      	mov	r3, r0
 800af66:	e000      	b.n	800af6a <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800af68:	2303      	movs	r3, #3
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	20001308 	.word	0x20001308
 800af78:	20001310 	.word	0x20001310
 800af7c:	200000dc 	.word	0x200000dc
 800af80:	200001fa 	.word	0x200001fa
 800af84:	200001fc 	.word	0x200001fc

0800af88 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800af90:	4b06      	ldr	r3, [pc, #24]	@ (800afac <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800af98:	4b05      	ldr	r3, [pc, #20]	@ (800afb0 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	200000dc 	.word	0x200000dc
 800afb0:	200001fc 	.word	0x200001fc

0800afb4 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800afca:	b480      	push	{r7}
 800afcc:	b083      	sub	sp, #12
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]
 800b024:	e010      	b.n	800b048 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	4a12      	ldr	r2, [pc, #72]	@ (800b074 <USBD_COMPOSITE_DataOut+0x60>)
 800b02a:	5cd3      	ldrb	r3, [r2, r3]
 800b02c:	78fa      	ldrb	r2, [r7, #3]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d107      	bne.n	800b042 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800b032:	4b11      	ldr	r3, [pc, #68]	@ (800b078 <USBD_COMPOSITE_DataOut+0x64>)
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	78fa      	ldrb	r2, [r7, #3]
 800b038:	4611      	mov	r1, r2
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	4798      	blx	r3
 800b03e:	4603      	mov	r3, r0
 800b040:	e013      	b.n	800b06a <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	3301      	adds	r3, #1
 800b046:	73fb      	strb	r3, [r7, #15]
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0eb      	beq.n	800b026 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800b04e:	4b0b      	ldr	r3, [pc, #44]	@ (800b07c <USBD_COMPOSITE_DataOut+0x68>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	78fa      	ldrb	r2, [r7, #3]
 800b054:	429a      	cmp	r2, r3
 800b056:	d107      	bne.n	800b068 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800b058:	4b09      	ldr	r3, [pc, #36]	@ (800b080 <USBD_COMPOSITE_DataOut+0x6c>)
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	78fa      	ldrb	r2, [r7, #3]
 800b05e:	4611      	mov	r1, r2
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	4798      	blx	r3
 800b064:	4603      	mov	r3, r0
 800b066:	e000      	b.n	800b06a <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800b068:	2303      	movs	r3, #3
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	2000130c 	.word	0x2000130c
 800b078:	200000dc 	.word	0x200000dc
 800b07c:	200001fb 	.word	0x200001fb
 800b080:	200001fc 	.word	0x200001fc

0800b084 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	226b      	movs	r2, #107	@ 0x6b
 800b090:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800b092:	4b03      	ldr	r3, [pc, #12]	@ (800b0a0 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	200015a8 	.word	0x200015a8

0800b0a4 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	226b      	movs	r2, #107	@ 0x6b
 800b0b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800b0b2:	4b03      	ldr	r3, [pc, #12]	@ (800b0c0 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	2000153c 	.word	0x2000153c

0800b0c4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	226b      	movs	r2, #107	@ 0x6b
 800b0d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800b0d2:	4b03      	ldr	r3, [pc, #12]	@ (800b0e0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	200015a8 	.word	0x200015a8

0800b0e4 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	220a      	movs	r2, #10
 800b0f0:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800b0f2:	4b03      	ldr	r3, [pc, #12]	@ (800b100 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	200001f0 	.word	0x200001f0

0800b104 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08a      	sub	sp, #40	@ 0x28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	460b      	mov	r3, r1
 800b10e:	607a      	str	r2, [r7, #4]
 800b110:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800b112:	4b20      	ldr	r3, [pc, #128]	@ (800b194 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	7afa      	ldrb	r2, [r7, #11]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d836      	bhi.n	800b18a <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800b11c:	2300      	movs	r3, #0
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	f107 0318 	add.w	r3, r7, #24
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	605a      	str	r2, [r3, #4]
 800b12a:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b12c:	2300      	movs	r3, #0
 800b12e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b132:	e01a      	b.n	800b16a <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800b134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b138:	4a17      	ldr	r2, [pc, #92]	@ (800b198 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800b13a:	5cd3      	ldrb	r3, [r2, r3]
 800b13c:	7afa      	ldrb	r2, [r7, #11]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d10e      	bne.n	800b160 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800b142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b146:	f107 0014 	add.w	r0, r7, #20
 800b14a:	4a14      	ldr	r2, [pc, #80]	@ (800b19c <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800b14c:	2110      	movs	r1, #16
 800b14e:	f004 fd87 	bl	800fc60 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800b152:	f107 0314 	add.w	r3, r7, #20
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	4911      	ldr	r1, [pc, #68]	@ (800b1a0 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800b15a:	4618      	mov	r0, r3
 800b15c:	f001 fce9 	bl	800cb32 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b164:	3301      	adds	r3, #1
 800b166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b16a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0e0      	beq.n	800b134 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800b172:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a4 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	7afa      	ldrb	r2, [r7, #11]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d104      	bne.n	800b186 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	4908      	ldr	r1, [pc, #32]	@ (800b1a0 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800b180:	4809      	ldr	r0, [pc, #36]	@ (800b1a8 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800b182:	f001 fcd6 	bl	800cb32 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800b186:	4b06      	ldr	r3, [pc, #24]	@ (800b1a0 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800b188:	e000      	b.n	800b18c <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800b18a:	2300      	movs	r3, #0
  }
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3728      	adds	r7, #40	@ 0x28
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	200001ec 	.word	0x200001ec
 800b198:	2000131c 	.word	0x2000131c
 800b19c:	08010610 	.word	0x08010610
 800b1a0:	20001614 	.word	0x20001614
 800b1a4:	20001655 	.word	0x20001655
 800b1a8:	08010620 	.word	0x08010620

0800b1ac <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b089      	sub	sp, #36	@ 0x24
 800b1b0:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800b1ba:	2381      	movs	r3, #129	@ 0x81
 800b1bc:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800b1c6:	4b74      	ldr	r3, [pc, #464]	@ (800b398 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800b1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ca:	1d3a      	adds	r2, r7, #4
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4798      	blx	r3
 800b1d0:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800b1d2:	4b72      	ldr	r3, [pc, #456]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	7ab8      	ldrb	r0, [r7, #10]
 800b1d8:	7afa      	ldrb	r2, [r7, #11]
 800b1da:	7a79      	ldrb	r1, [r7, #9]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	4603      	mov	r3, r0
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f000 fbc5 	bl	800b970 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3309      	adds	r3, #9
 800b1ea:	88ba      	ldrh	r2, [r7, #4]
 800b1ec:	3a09      	subs	r2, #9
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	486b      	ldr	r0, [pc, #428]	@ (800b3a0 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800b1f2:	f004 fe03 	bl	800fdfc <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800b1f6:	4b68      	ldr	r3, [pc, #416]	@ (800b398 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800b1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fa:	1d3a      	adds	r2, r7, #4
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	4798      	blx	r3
 800b200:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800b202:	4b66      	ldr	r3, [pc, #408]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	7ab8      	ldrb	r0, [r7, #10]
 800b208:	7afa      	ldrb	r2, [r7, #11]
 800b20a:	7a79      	ldrb	r1, [r7, #9]
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	4603      	mov	r3, r0
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 fbad 	bl	800b970 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3309      	adds	r3, #9
 800b21a:	88ba      	ldrh	r2, [r7, #4]
 800b21c:	3a09      	subs	r2, #9
 800b21e:	4619      	mov	r1, r3
 800b220:	4860      	ldr	r0, [pc, #384]	@ (800b3a4 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800b222:	f004 fdeb 	bl	800fdfc <memcpy>

  in_ep_track += 1;
 800b226:	7afb      	ldrb	r3, [r7, #11]
 800b228:	3301      	adds	r3, #1
 800b22a:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800b22c:	7abb      	ldrb	r3, [r7, #10]
 800b22e:	3301      	adds	r3, #1
 800b230:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800b232:	7a7b      	ldrb	r3, [r7, #9]
 800b234:	3301      	adds	r3, #1
 800b236:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800b238:	4b58      	ldr	r3, [pc, #352]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	3301      	adds	r3, #1
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	4b56      	ldr	r3, [pc, #344]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b242:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800b244:	4b58      	ldr	r3, [pc, #352]	@ (800b3a8 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800b246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b248:	1d3a      	adds	r2, r7, #4
 800b24a:	4610      	mov	r0, r2
 800b24c:	4798      	blx	r3
 800b24e:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800b250:	7a7b      	ldrb	r3, [r7, #9]
 800b252:	3301      	adds	r3, #1
 800b254:	b2d8      	uxtb	r0, r3
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	3301      	adds	r3, #1
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	4a4f      	ldr	r2, [pc, #316]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b25e:	7812      	ldrb	r2, [r2, #0]
 800b260:	7afc      	ldrb	r4, [r7, #11]
 800b262:	7a79      	ldrb	r1, [r7, #9]
 800b264:	9202      	str	r2, [sp, #8]
 800b266:	7aba      	ldrb	r2, [r7, #10]
 800b268:	9201      	str	r2, [sp, #4]
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	4623      	mov	r3, r4
 800b26e:	4602      	mov	r2, r0
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7ff fd43 	bl	800acfc <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3309      	adds	r3, #9
 800b27a:	88ba      	ldrh	r2, [r7, #4]
 800b27c:	3a09      	subs	r2, #9
 800b27e:	4619      	mov	r1, r3
 800b280:	484a      	ldr	r0, [pc, #296]	@ (800b3ac <USBD_COMPOSITE_Mount_Class+0x200>)
 800b282:	f004 fdbb 	bl	800fdfc <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800b286:	4b48      	ldr	r3, [pc, #288]	@ (800b3a8 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800b288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28a:	1d3a      	adds	r2, r7, #4
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800b292:	7a7b      	ldrb	r3, [r7, #9]
 800b294:	3301      	adds	r3, #1
 800b296:	b2d8      	uxtb	r0, r3
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	3301      	adds	r3, #1
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	4a3f      	ldr	r2, [pc, #252]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b2a0:	7812      	ldrb	r2, [r2, #0]
 800b2a2:	7afc      	ldrb	r4, [r7, #11]
 800b2a4:	7a79      	ldrb	r1, [r7, #9]
 800b2a6:	9202      	str	r2, [sp, #8]
 800b2a8:	7aba      	ldrb	r2, [r7, #10]
 800b2aa:	9201      	str	r2, [sp, #4]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	4623      	mov	r3, r4
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7ff fd22 	bl	800acfc <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3309      	adds	r3, #9
 800b2bc:	88ba      	ldrh	r2, [r7, #4]
 800b2be:	3a09      	subs	r2, #9
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	483b      	ldr	r0, [pc, #236]	@ (800b3b0 <USBD_COMPOSITE_Mount_Class+0x204>)
 800b2c4:	f004 fd9a 	bl	800fdfc <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800b2ce:	7abb      	ldrb	r3, [r7, #10]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800b2d4:	7a7b      	ldrb	r3, [r7, #9]
 800b2d6:	3302      	adds	r3, #2
 800b2d8:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800b2da:	4b30      	ldr	r3, [pc, #192]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	4b2e      	ldr	r3, [pc, #184]	@ (800b39c <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b2e4:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800b2e6:	236b      	movs	r3, #107	@ 0x6b
 800b2e8:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800b2ea:	4b32      	ldr	r3, [pc, #200]	@ (800b3b4 <USBD_COMPOSITE_Mount_Class+0x208>)
 800b2ec:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2209      	movs	r2, #9
 800b2f2:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	3302      	adds	r3, #2
 800b300:	88fa      	ldrh	r2, [r7, #6]
 800b302:	b2d2      	uxtb	r2, r2
 800b304:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800b306:	88fb      	ldrh	r3, [r7, #6]
 800b308:	0a1b      	lsrs	r3, r3, #8
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	3303      	adds	r3, #3
 800b310:	b2d2      	uxtb	r2, r2
 800b312:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	3304      	adds	r3, #4
 800b318:	7a7a      	ldrb	r2, [r7, #9]
 800b31a:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3305      	adds	r3, #5
 800b320:	2201      	movs	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3306      	adds	r3, #6
 800b328:	2200      	movs	r2, #0
 800b32a:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3307      	adds	r3, #7
 800b330:	22c0      	movs	r2, #192	@ 0xc0
 800b332:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3308      	adds	r3, #8
 800b338:	2232      	movs	r2, #50	@ 0x32
 800b33a:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800b33c:	4b1e      	ldr	r3, [pc, #120]	@ (800b3b8 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800b33e:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2209      	movs	r2, #9
 800b344:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	2202      	movs	r2, #2
 800b34c:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3302      	adds	r3, #2
 800b352:	88fa      	ldrh	r2, [r7, #6]
 800b354:	b2d2      	uxtb	r2, r2
 800b356:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800b358:	88fb      	ldrh	r3, [r7, #6]
 800b35a:	0a1b      	lsrs	r3, r3, #8
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3303      	adds	r3, #3
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3304      	adds	r3, #4
 800b36a:	7a7a      	ldrb	r2, [r7, #9]
 800b36c:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3305      	adds	r3, #5
 800b372:	2201      	movs	r2, #1
 800b374:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3306      	adds	r3, #6
 800b37a:	2200      	movs	r2, #0
 800b37c:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3307      	adds	r3, #7
 800b382:	22c0      	movs	r2, #192	@ 0xc0
 800b384:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3308      	adds	r3, #8
 800b38a:	2232      	movs	r2, #50	@ 0x32
 800b38c:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800b38e:	bf00      	nop
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	bd90      	pop	{r4, r7, pc}
 800b396:	bf00      	nop
 800b398:	200001fc 	.word	0x200001fc
 800b39c:	200001ec 	.word	0x200001ec
 800b3a0:	20001545 	.word	0x20001545
 800b3a4:	200015b1 	.word	0x200015b1
 800b3a8:	200000dc 	.word	0x200000dc
 800b3ac:	20001565 	.word	0x20001565
 800b3b0:	200015d1 	.word	0x200015d1
 800b3b4:	200015a8 	.word	0x200015a8
 800b3b8:	2000153c 	.word	0x2000153c

0800b3bc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800b3c8:	4b43      	ldr	r3, [pc, #268]	@ (800b4d8 <USBD_CUSTOM_HID_Init+0x11c>)
 800b3ca:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d105      	bne.n	800b3de <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800b3da:	2302      	movs	r3, #2
 800b3dc:	e077      	b.n	800b4ce <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d11b      	bne.n	800b426 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b3ee:	4b3b      	ldr	r3, [pc, #236]	@ (800b4dc <USBD_CUSTOM_HID_Init+0x120>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	f003 020f 	and.w	r2, r3, #15
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	440b      	add	r3, r1
 800b402:	3326      	adds	r3, #38	@ 0x26
 800b404:	2205      	movs	r2, #5
 800b406:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b408:	4b35      	ldr	r3, [pc, #212]	@ (800b4e0 <USBD_CUSTOM_HID_Init+0x124>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	f003 020f 	and.w	r2, r3, #15
 800b410:	6879      	ldr	r1, [r7, #4]
 800b412:	4613      	mov	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	440b      	add	r3, r1
 800b41c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b420:	2205      	movs	r2, #5
 800b422:	801a      	strh	r2, [r3, #0]
 800b424:	e01a      	b.n	800b45c <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b426:	4b2d      	ldr	r3, [pc, #180]	@ (800b4dc <USBD_CUSTOM_HID_Init+0x120>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	f003 020f 	and.w	r2, r3, #15
 800b42e:	6879      	ldr	r1, [r7, #4]
 800b430:	4613      	mov	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	440b      	add	r3, r1
 800b43a:	3326      	adds	r3, #38	@ 0x26
 800b43c:	2205      	movs	r2, #5
 800b43e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b440:	4b27      	ldr	r3, [pc, #156]	@ (800b4e0 <USBD_CUSTOM_HID_Init+0x124>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	f003 020f 	and.w	r2, r3, #15
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	440b      	add	r3, r1
 800b454:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b458:	2205      	movs	r2, #5
 800b45a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800b45c:	4b1f      	ldr	r3, [pc, #124]	@ (800b4dc <USBD_CUSTOM_HID_Init+0x120>)
 800b45e:	7819      	ldrb	r1, [r3, #0]
 800b460:	2302      	movs	r3, #2
 800b462:	2203      	movs	r2, #3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 fdd6 	bl	800d016 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800b46a:	4b1c      	ldr	r3, [pc, #112]	@ (800b4dc <USBD_CUSTOM_HID_Init+0x120>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	f003 020f 	and.w	r2, r3, #15
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	440b      	add	r3, r1
 800b47e:	3324      	adds	r3, #36	@ 0x24
 800b480:	2201      	movs	r2, #1
 800b482:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800b484:	4b16      	ldr	r3, [pc, #88]	@ (800b4e0 <USBD_CUSTOM_HID_Init+0x124>)
 800b486:	7819      	ldrb	r1, [r3, #0]
 800b488:	2302      	movs	r3, #2
 800b48a:	2203      	movs	r2, #3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f001 fdc2 	bl	800d016 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800b492:	4b13      	ldr	r3, [pc, #76]	@ (800b4e0 <USBD_CUSTOM_HID_Init+0x124>)
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	f003 020f 	and.w	r2, r3, #15
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	4613      	mov	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	440b      	add	r3, r1
 800b4a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800b4be:	4b08      	ldr	r3, [pc, #32]	@ (800b4e0 <USBD_CUSTOM_HID_Init+0x124>)
 800b4c0:	7819      	ldrb	r1, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f001 fe94 	bl	800d1f4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20001658 	.word	0x20001658
 800b4dc:	200001fa 	.word	0x200001fa
 800b4e0:	200001fb 	.word	0x200001fb

0800b4e4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800b4f0:	4b2a      	ldr	r3, [pc, #168]	@ (800b59c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fdb3 	bl	800d062 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800b4fc:	4b27      	ldr	r3, [pc, #156]	@ (800b59c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	f003 020f 	and.w	r2, r3, #15
 800b504:	6879      	ldr	r1, [r7, #4]
 800b506:	4613      	mov	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	440b      	add	r3, r1
 800b510:	3324      	adds	r3, #36	@ 0x24
 800b512:	2200      	movs	r2, #0
 800b514:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800b516:	4b21      	ldr	r3, [pc, #132]	@ (800b59c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	f003 020f 	and.w	r2, r3, #15
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	3326      	adds	r3, #38	@ 0x26
 800b52c:	2200      	movs	r2, #0
 800b52e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800b530:	4b1b      	ldr	r3, [pc, #108]	@ (800b5a0 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 fd93 	bl	800d062 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800b53c:	4b18      	ldr	r3, [pc, #96]	@ (800b5a0 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	f003 020f 	and.w	r2, r3, #15
 800b544:	6879      	ldr	r1, [r7, #4]
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	440b      	add	r3, r1
 800b550:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b554:	2200      	movs	r2, #0
 800b556:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800b558:	4b11      	ldr	r3, [pc, #68]	@ (800b5a0 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	f003 020f 	and.w	r2, r3, #15
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	4613      	mov	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	440b      	add	r3, r1
 800b56c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b570:	2200      	movs	r2, #0
 800b572:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d008      	beq.n	800b590 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	200001fa 	.word	0x200001fa
 800b5a0:	200001fb 	.word	0x200001fb

0800b5a4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5b4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e0ed      	b.n	800b7ac <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d052      	beq.n	800b682 <USBD_CUSTOM_HID_Setup+0xde>
 800b5dc:	2b20      	cmp	r3, #32
 800b5de:	f040 80dd 	bne.w	800b79c <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	3b02      	subs	r3, #2
 800b5e8:	2b09      	cmp	r3, #9
 800b5ea:	d842      	bhi.n	800b672 <USBD_CUSTOM_HID_Setup+0xce>
 800b5ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f4 <USBD_CUSTOM_HID_Setup+0x50>)
 800b5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f2:	bf00      	nop
 800b5f4:	0800b64d 	.word	0x0800b64d
 800b5f8:	0800b62b 	.word	0x0800b62b
 800b5fc:	0800b673 	.word	0x0800b673
 800b600:	0800b673 	.word	0x0800b673
 800b604:	0800b673 	.word	0x0800b673
 800b608:	0800b673 	.word	0x0800b673
 800b60c:	0800b673 	.word	0x0800b673
 800b610:	0800b65d 	.word	0x0800b65d
 800b614:	0800b63b 	.word	0x0800b63b
 800b618:	0800b61d 	.word	0x0800b61d
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	885b      	ldrh	r3, [r3, #2]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	461a      	mov	r2, r3
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	605a      	str	r2, [r3, #4]
      break;
 800b628:	e02a      	b.n	800b680 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	3304      	adds	r3, #4
 800b62e:	2201      	movs	r2, #1
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f001 fadd 	bl	800cbf2 <USBD_CtlSendData>
      break;
 800b638:	e022      	b.n	800b680 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	885b      	ldrh	r3, [r3, #2]
 800b63e:	0a1b      	lsrs	r3, r3, #8
 800b640:	b29b      	uxth	r3, r3
 800b642:	b2db      	uxtb	r3, r3
 800b644:	461a      	mov	r2, r3
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	609a      	str	r2, [r3, #8]
      break;
 800b64a:	e019      	b.n	800b680 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	3308      	adds	r3, #8
 800b650:	2201      	movs	r2, #1
 800b652:	4619      	mov	r1, r3
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f001 facc 	bl	800cbf2 <USBD_CtlSendData>
      break;
 800b65a:	e011      	b.n	800b680 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	2201      	movs	r2, #1
 800b660:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800b662:	6939      	ldr	r1, [r7, #16]
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	88db      	ldrh	r3, [r3, #6]
 800b668:	461a      	mov	r2, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f001 faed 	bl	800cc4a <USBD_CtlPrepareRx>
      break;
 800b670:	e006      	b.n	800b680 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f001 fa4b 	bl	800cb10 <USBD_CtlError>
      ret = USBD_FAIL;
 800b67a:	2303      	movs	r3, #3
 800b67c:	75fb      	strb	r3, [r7, #23]
      break;
 800b67e:	bf00      	nop
    }
    break;
 800b680:	e093      	b.n	800b7aa <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	785b      	ldrb	r3, [r3, #1]
 800b686:	2b0b      	cmp	r3, #11
 800b688:	d87f      	bhi.n	800b78a <USBD_CUSTOM_HID_Setup+0x1e6>
 800b68a:	a201      	add	r2, pc, #4	@ (adr r2, 800b690 <USBD_CUSTOM_HID_Setup+0xec>)
 800b68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b690:	0800b6c1 	.word	0x0800b6c1
 800b694:	0800b799 	.word	0x0800b799
 800b698:	0800b78b 	.word	0x0800b78b
 800b69c:	0800b78b 	.word	0x0800b78b
 800b6a0:	0800b78b 	.word	0x0800b78b
 800b6a4:	0800b78b 	.word	0x0800b78b
 800b6a8:	0800b6eb 	.word	0x0800b6eb
 800b6ac:	0800b78b 	.word	0x0800b78b
 800b6b0:	0800b78b 	.word	0x0800b78b
 800b6b4:	0800b78b 	.word	0x0800b78b
 800b6b8:	0800b739 	.word	0x0800b739
 800b6bc:	0800b763 	.word	0x0800b763
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d107      	bne.n	800b6dc <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b6cc:	f107 030e 	add.w	r3, r7, #14
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f001 fa8c 	bl	800cbf2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b6da:	e05e      	b.n	800b79a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f001 fa16 	bl	800cb10 <USBD_CtlError>
        ret = USBD_FAIL;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b6e8:	e057      	b.n	800b79a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	885b      	ldrh	r3, [r3, #2]
 800b6ee:	0a1b      	lsrs	r3, r3, #8
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	2b22      	cmp	r3, #34	@ 0x22
 800b6f4:	d10b      	bne.n	800b70e <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	88db      	ldrh	r3, [r3, #6]
 800b6fa:	2b46      	cmp	r3, #70	@ 0x46
 800b6fc:	bf28      	it	cs
 800b6fe:	2346      	movcs	r3, #70	@ 0x46
 800b700:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	61bb      	str	r3, [r7, #24]
 800b70c:	e00d      	b.n	800b72a <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	885b      	ldrh	r3, [r3, #2]
 800b712:	0a1b      	lsrs	r3, r3, #8
 800b714:	b29b      	uxth	r3, r3
 800b716:	2b21      	cmp	r3, #33	@ 0x21
 800b718:	d107      	bne.n	800b72a <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800b71a:	4b26      	ldr	r3, [pc, #152]	@ (800b7b4 <USBD_CUSTOM_HID_Setup+0x210>)
 800b71c:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	88db      	ldrh	r3, [r3, #6]
 800b722:	2b09      	cmp	r3, #9
 800b724:	bf28      	it	cs
 800b726:	2309      	movcs	r3, #9
 800b728:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b72a:	8bfb      	ldrh	r3, [r7, #30]
 800b72c:	461a      	mov	r2, r3
 800b72e:	69b9      	ldr	r1, [r7, #24]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 fa5e 	bl	800cbf2 <USBD_CtlSendData>
      break;
 800b736:	e030      	b.n	800b79a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b03      	cmp	r3, #3
 800b742:	d107      	bne.n	800b754 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	330c      	adds	r3, #12
 800b748:	2201      	movs	r2, #1
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f001 fa50 	bl	800cbf2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b752:	e022      	b.n	800b79a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 f9da 	bl	800cb10 <USBD_CtlError>
        ret = USBD_FAIL;
 800b75c:	2303      	movs	r3, #3
 800b75e:	75fb      	strb	r3, [r7, #23]
      break;
 800b760:	e01b      	b.n	800b79a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d106      	bne.n	800b77c <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	885b      	ldrh	r3, [r3, #2]
 800b772:	b2db      	uxtb	r3, r3
 800b774:	461a      	mov	r2, r3
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b77a:	e00e      	b.n	800b79a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b77c:	6839      	ldr	r1, [r7, #0]
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f001 f9c6 	bl	800cb10 <USBD_CtlError>
        ret = USBD_FAIL;
 800b784:	2303      	movs	r3, #3
 800b786:	75fb      	strb	r3, [r7, #23]
      break;
 800b788:	e007      	b.n	800b79a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 f9bf 	bl	800cb10 <USBD_CtlError>
      ret = USBD_FAIL;
 800b792:	2303      	movs	r3, #3
 800b794:	75fb      	strb	r3, [r7, #23]
      break;
 800b796:	e000      	b.n	800b79a <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800b798:	bf00      	nop
    }
    break;
 800b79a:	e006      	b.n	800b7aa <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 f9b6 	bl	800cb10 <USBD_CtlError>
    ret = USBD_FAIL;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	75fb      	strb	r3, [r7, #23]
    break;
 800b7a8:	bf00      	nop
  }
  return (uint8_t)ret;
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3720      	adds	r7, #32
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	200002bc 	.word	0x200002bc

0800b7b8 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e01b      	b.n	800b80c <USBD_CUSTOM_HID_SendReport+0x54>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b7da:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d110      	bne.n	800b80a <USBD_CUSTOM_HID_SendReport+0x52>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	7d1b      	ldrb	r3, [r3, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <USBD_CUSTOM_HID_SendReport+0x4e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800b7f6:	4b07      	ldr	r3, [pc, #28]	@ (800b814 <USBD_CUSTOM_HID_SendReport+0x5c>)
 800b7f8:	7819      	ldrb	r1, [r3, #0]
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f001 fcd7 	bl	800d1b2 <USBD_LL_Transmit>
 800b804:	e001      	b.n	800b80a <USBD_CUSTOM_HID_SendReport+0x52>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800b806:	2301      	movs	r3, #1
 800b808:	e000      	b.n	800b80c <USBD_CUSTOM_HID_SendReport+0x54>
    }
  }
  return (uint8_t)USBD_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	200001fa 	.word	0x200001fa

0800b818 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2229      	movs	r2, #41	@ 0x29
 800b824:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800b826:	4b03      	ldr	r3, [pc, #12]	@ (800b834 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800b828:	4618      	mov	r0, r3
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	20000238 	.word	0x20000238

0800b838 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2229      	movs	r2, #41	@ 0x29
 800b844:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800b846:	4b03      	ldr	r3, [pc, #12]	@ (800b854 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	20000264 	.word	0x20000264

0800b858 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2229      	movs	r2, #41	@ 0x29
 800b864:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800b866:	4b03      	ldr	r3, [pc, #12]	@ (800b874 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b868:	4618      	mov	r0, r3
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	20000290 	.word	0x20000290

0800b878 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b88a:	2200      	movs	r2, #0
 800b88c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e00e      	b.n	800b8d4 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8bc:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	7810      	ldrb	r0, [r2, #0]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	7852      	ldrb	r2, [r2, #1]
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8ea:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e011      	b.n	800b91a <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d10c      	bne.n	800b918 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	7810      	ldrb	r0, [r2, #0]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	7852      	ldrb	r2, [r2, #1]
 800b90e:	4611      	mov	r1, r2
 800b910:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
	...

0800b924 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	220a      	movs	r2, #10
 800b930:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b932:	4b03      	ldr	r3, [pc, #12]	@ (800b940 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	200002c8 	.word	0x200002c8

0800b944 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b954:	2303      	movs	r3, #3
 800b956:	e004      	b.n	800b962 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
	...

0800b970 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	4608      	mov	r0, r1
 800b97a:	4611      	mov	r1, r2
 800b97c:	461a      	mov	r2, r3
 800b97e:	4603      	mov	r3, r0
 800b980:	70fb      	strb	r3, [r7, #3]
 800b982:	460b      	mov	r3, r1
 800b984:	70bb      	strb	r3, [r7, #2]
 800b986:	4613      	mov	r3, r2
 800b988:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	330b      	adds	r3, #11
 800b98e:	78fa      	ldrb	r2, [r7, #3]
 800b990:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3311      	adds	r3, #17
 800b996:	7c3a      	ldrb	r2, [r7, #16]
 800b998:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	331d      	adds	r3, #29
 800b99e:	78ba      	ldrb	r2, [r7, #2]
 800b9a0:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3324      	adds	r3, #36	@ 0x24
 800b9a6:	787a      	ldrb	r2, [r7, #1]
 800b9a8:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800b9aa:	4a09      	ldr	r2, [pc, #36]	@ (800b9d0 <USBD_Update_HID_Custom_DESC+0x60>)
 800b9ac:	78bb      	ldrb	r3, [r7, #2]
 800b9ae:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800b9b0:	4a08      	ldr	r2, [pc, #32]	@ (800b9d4 <USBD_Update_HID_Custom_DESC+0x64>)
 800b9b2:	787b      	ldrb	r3, [r7, #1]
 800b9b4:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800b9b6:	4a08      	ldr	r2, [pc, #32]	@ (800b9d8 <USBD_Update_HID_Custom_DESC+0x68>)
 800b9b8:	78fb      	ldrb	r3, [r7, #3]
 800b9ba:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800b9bc:	4a07      	ldr	r2, [pc, #28]	@ (800b9dc <USBD_Update_HID_Custom_DESC+0x6c>)
 800b9be:	7c3b      	ldrb	r3, [r7, #16]
 800b9c0:	7013      	strb	r3, [r2, #0]
}
 800b9c2:	bf00      	nop
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	200001fa 	.word	0x200001fa
 800b9d4:	200001fb 	.word	0x200001fb
 800b9d8:	20001654 	.word	0x20001654
 800b9dc:	20001655 	.word	0x20001655

0800b9e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e01b      	b.n	800ba30 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	79fa      	ldrb	r2, [r7, #7]
 800ba22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f001 fa7d 	bl	800cf24 <USBD_LL_Init>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3718      	adds	r7, #24
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e02d      	b.n	800baac <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	7c1b      	ldrb	r3, [r3, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d112      	bne.n	800ba86 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d01e      	beq.n	800baaa <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba74:	f107 020e 	add.w	r2, r7, #14
 800ba78:	4610      	mov	r0, r2
 800ba7a:	4798      	blx	r3
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800ba84:	e011      	b.n	800baaa <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00b      	beq.n	800baaa <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9a:	f107 020e 	add.w	r2, r7, #14
 800ba9e:	4610      	mov	r0, r2
 800baa0:	4798      	blx	r3
 800baa2:	4602      	mov	r2, r0
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 fa8f 	bl	800cfe0 <USBD_LL_Start>
 800bac2:	4603      	mov	r3, r0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	370c      	adds	r7, #12
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800baee:	2303      	movs	r3, #3
 800baf0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d009      	beq.n	800bb10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	78fa      	ldrb	r2, [r7, #3]
 800bb06:	4611      	mov	r1, r2
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	4798      	blx	r3
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	460b      	mov	r3, r1
 800bb24:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d007      	beq.n	800bb40 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	78fa      	ldrb	r2, [r7, #3]
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	4798      	blx	r3
  }

  return USBD_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b084      	sub	sp, #16
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 ff9d 	bl	800ca9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb70:	461a      	mov	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb7e:	f003 031f 	and.w	r3, r3, #31
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d01a      	beq.n	800bbbc <USBD_LL_SetupStage+0x72>
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d822      	bhi.n	800bbd0 <USBD_LL_SetupStage+0x86>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <USBD_LL_SetupStage+0x4a>
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d00a      	beq.n	800bba8 <USBD_LL_SetupStage+0x5e>
 800bb92:	e01d      	b.n	800bbd0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fa5d 	bl	800c05c <USBD_StdDevReq>
 800bba2:	4603      	mov	r3, r0
 800bba4:	73fb      	strb	r3, [r7, #15]
      break;
 800bba6:	e020      	b.n	800bbea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fac1 	bl	800c138 <USBD_StdItfReq>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbba:	e016      	b.n	800bbea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fb00 	bl	800c1ca <USBD_StdEPReq>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbce:	e00c      	b.n	800bbea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bbd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f001 fa5e 	bl	800d0a0 <USBD_LL_StallEP>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe8:	bf00      	nop
  }

  return ret;
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc02:	7afb      	ldrb	r3, [r7, #11]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d138      	bne.n	800bc7a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bc0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d14a      	bne.n	800bcb0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	689a      	ldr	r2, [r3, #8]
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d913      	bls.n	800bc4e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	689a      	ldr	r2, [r3, #8]
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	1ad2      	subs	r2, r2, r3
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	bf28      	it	cs
 800bc40:	4613      	movcs	r3, r2
 800bc42:	461a      	mov	r2, r3
 800bc44:	6879      	ldr	r1, [r7, #4]
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f001 f81c 	bl	800cc84 <USBD_CtlContinueRx>
 800bc4c:	e030      	b.n	800bcb0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d10b      	bne.n	800bc72 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d005      	beq.n	800bc72 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f001 f817 	bl	800cca6 <USBD_CtlSendStatus>
 800bc78:	e01a      	b.n	800bcb0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d114      	bne.n	800bcb0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00e      	beq.n	800bcb0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	7afa      	ldrb	r2, [r7, #11]
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	4798      	blx	r3
 800bca2:	4603      	mov	r3, r0
 800bca4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bca6:	7dfb      	ldrb	r3, [r7, #23]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
 800bcae:	e000      	b.n	800bcb2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b086      	sub	sp, #24
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	60f8      	str	r0, [r7, #12]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	607a      	str	r2, [r7, #4]
 800bcc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bcc8:	7afb      	ldrb	r3, [r7, #11]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d16b      	bne.n	800bda6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3314      	adds	r3, #20
 800bcd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	d156      	bne.n	800bd8c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	689a      	ldr	r2, [r3, #8]
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d914      	bls.n	800bd14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	689a      	ldr	r2, [r3, #8]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	1ad2      	subs	r2, r2, r3
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 ff91 	bl	800cc28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd06:	2300      	movs	r3, #0
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f001 fa71 	bl	800d1f4 <USBD_LL_PrepareReceive>
 800bd12:	e03b      	b.n	800bd8c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	68da      	ldr	r2, [r3, #12]
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d11c      	bne.n	800bd5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d316      	bcc.n	800bd5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	685a      	ldr	r2, [r3, #4]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d20f      	bcs.n	800bd5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f000 ff72 	bl	800cc28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2100      	movs	r1, #0
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f001 fa4e 	bl	800d1f4 <USBD_LL_PrepareReceive>
 800bd58:	e018      	b.n	800bd8c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d10b      	bne.n	800bd7e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d005      	beq.n	800bd7e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd7e:	2180      	movs	r1, #128	@ 0x80
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f001 f98d 	bl	800d0a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 ffa0 	bl	800cccc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d122      	bne.n	800bddc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f7ff fe98 	bl	800bacc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bda4:	e01a      	b.n	800bddc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d114      	bne.n	800bddc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00e      	beq.n	800bddc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	7afa      	ldrb	r2, [r7, #11]
 800bdc8:	4611      	mov	r1, r2
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	4798      	blx	r3
 800bdce:	4603      	mov	r3, r0
 800bdd0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bdd2:	7dfb      	ldrb	r3, [r7, #23]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	e000      	b.n	800bdde <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b082      	sub	sp, #8
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800be16:	2303      	movs	r3, #3
 800be18:	e02a      	b.n	800be70 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d009      	beq.n	800be3a <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	6852      	ldr	r2, [r2, #4]
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	4611      	mov	r1, r2
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be3a:	2340      	movs	r3, #64	@ 0x40
 800be3c:	2200      	movs	r2, #0
 800be3e:	2100      	movs	r1, #0
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f001 f8e8 	bl	800d016 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2201      	movs	r2, #1
 800be4a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2240      	movs	r2, #64	@ 0x40
 800be52:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be56:	2340      	movs	r3, #64	@ 0x40
 800be58:	2200      	movs	r2, #0
 800be5a:	2180      	movs	r1, #128	@ 0x80
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f001 f8da 	bl	800d016 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2201      	movs	r2, #1
 800be66:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2240      	movs	r2, #64	@ 0x40
 800be6c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	78fa      	ldrb	r2, [r7, #3]
 800be88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2204      	movs	r2, #4
 800beb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	2b04      	cmp	r3, #4
 800bed6:	d106      	bne.n	800bee6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bf06:	2303      	movs	r3, #3
 800bf08:	e012      	b.n	800bf30 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d10b      	bne.n	800bf2e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf1c:	69db      	ldr	r3, [r3, #28]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d005      	beq.n	800bf2e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	460b      	mov	r3, r1
 800bf42:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e014      	b.n	800bf7c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d10d      	bne.n	800bf7a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d007      	beq.n	800bf7a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	78fa      	ldrb	r2, [r7, #3]
 800bf74:	4611      	mov	r1, r2
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e014      	b.n	800bfc8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	d10d      	bne.n	800bfc6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d007      	beq.n	800bfc6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfbe:	78fa      	ldrb	r2, [r7, #3]
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	370c      	adds	r7, #12
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b082      	sub	sp, #8
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d009      	beq.n	800c014 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	6852      	ldr	r2, [r2, #4]
 800c00c:	b2d2      	uxtb	r2, r2
 800c00e:	4611      	mov	r1, r2
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	4798      	blx	r3
  }

  return USBD_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c01e:	b480      	push	{r7}
 800c020:	b087      	sub	sp, #28
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	3301      	adds	r3, #1
 800c034:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c03c:	8a3b      	ldrh	r3, [r7, #16]
 800c03e:	021b      	lsls	r3, r3, #8
 800c040:	b21a      	sxth	r2, r3
 800c042:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c046:	4313      	orrs	r3, r2
 800c048:	b21b      	sxth	r3, r3
 800c04a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c04c:	89fb      	ldrh	r3, [r7, #14]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	371c      	adds	r7, #28
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
	...

0800c05c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c072:	2b40      	cmp	r3, #64	@ 0x40
 800c074:	d005      	beq.n	800c082 <USBD_StdDevReq+0x26>
 800c076:	2b40      	cmp	r3, #64	@ 0x40
 800c078:	d853      	bhi.n	800c122 <USBD_StdDevReq+0xc6>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00b      	beq.n	800c096 <USBD_StdDevReq+0x3a>
 800c07e:	2b20      	cmp	r3, #32
 800c080:	d14f      	bne.n	800c122 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	4798      	blx	r3
 800c090:	4603      	mov	r3, r0
 800c092:	73fb      	strb	r3, [r7, #15]
      break;
 800c094:	e04a      	b.n	800c12c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	785b      	ldrb	r3, [r3, #1]
 800c09a:	2b09      	cmp	r3, #9
 800c09c:	d83b      	bhi.n	800c116 <USBD_StdDevReq+0xba>
 800c09e:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a4 <USBD_StdDevReq+0x48>)
 800c0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a4:	0800c0f9 	.word	0x0800c0f9
 800c0a8:	0800c10d 	.word	0x0800c10d
 800c0ac:	0800c117 	.word	0x0800c117
 800c0b0:	0800c103 	.word	0x0800c103
 800c0b4:	0800c117 	.word	0x0800c117
 800c0b8:	0800c0d7 	.word	0x0800c0d7
 800c0bc:	0800c0cd 	.word	0x0800c0cd
 800c0c0:	0800c117 	.word	0x0800c117
 800c0c4:	0800c0ef 	.word	0x0800c0ef
 800c0c8:	0800c0e1 	.word	0x0800c0e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f9de 	bl	800c490 <USBD_GetDescriptor>
          break;
 800c0d4:	e024      	b.n	800c120 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fb55 	bl	800c788 <USBD_SetAddress>
          break;
 800c0de:	e01f      	b.n	800c120 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fb94 	bl	800c810 <USBD_SetConfig>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]
          break;
 800c0ec:	e018      	b.n	800c120 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fc33 	bl	800c95c <USBD_GetConfig>
          break;
 800c0f6:	e013      	b.n	800c120 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fc64 	bl	800c9c8 <USBD_GetStatus>
          break;
 800c100:	e00e      	b.n	800c120 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fc93 	bl	800ca30 <USBD_SetFeature>
          break;
 800c10a:	e009      	b.n	800c120 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fca2 	bl	800ca58 <USBD_ClrFeature>
          break;
 800c114:	e004      	b.n	800c120 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fcf9 	bl	800cb10 <USBD_CtlError>
          break;
 800c11e:	bf00      	nop
      }
      break;
 800c120:	e004      	b.n	800c12c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fcf3 	bl	800cb10 <USBD_CtlError>
      break;
 800c12a:	bf00      	nop
  }

  return ret;
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop

0800c138 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c14e:	2b40      	cmp	r3, #64	@ 0x40
 800c150:	d005      	beq.n	800c15e <USBD_StdItfReq+0x26>
 800c152:	2b40      	cmp	r3, #64	@ 0x40
 800c154:	d82f      	bhi.n	800c1b6 <USBD_StdItfReq+0x7e>
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <USBD_StdItfReq+0x26>
 800c15a:	2b20      	cmp	r3, #32
 800c15c:	d12b      	bne.n	800c1b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c164:	b2db      	uxtb	r3, r3
 800c166:	3b01      	subs	r3, #1
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d81d      	bhi.n	800c1a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	889b      	ldrh	r3, [r3, #4]
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b0f      	cmp	r3, #15
 800c174:	d813      	bhi.n	800c19e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	4798      	blx	r3
 800c184:	4603      	mov	r3, r0
 800c186:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	88db      	ldrh	r3, [r3, #6]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d110      	bne.n	800c1b2 <USBD_StdItfReq+0x7a>
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10d      	bne.n	800c1b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fd85 	bl	800cca6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c19c:	e009      	b.n	800c1b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fcb5 	bl	800cb10 <USBD_CtlError>
          break;
 800c1a6:	e004      	b.n	800c1b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fcb0 	bl	800cb10 <USBD_CtlError>
          break;
 800c1b0:	e000      	b.n	800c1b4 <USBD_StdItfReq+0x7c>
          break;
 800c1b2:	bf00      	nop
      }
      break;
 800c1b4:	e004      	b.n	800c1c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fca9 	bl	800cb10 <USBD_CtlError>
      break;
 800c1be:	bf00      	nop
  }

  return ret;
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	889b      	ldrh	r3, [r3, #4]
 800c1dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1e6:	2b40      	cmp	r3, #64	@ 0x40
 800c1e8:	d007      	beq.n	800c1fa <USBD_StdEPReq+0x30>
 800c1ea:	2b40      	cmp	r3, #64	@ 0x40
 800c1ec:	f200 8145 	bhi.w	800c47a <USBD_StdEPReq+0x2b0>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00c      	beq.n	800c20e <USBD_StdEPReq+0x44>
 800c1f4:	2b20      	cmp	r3, #32
 800c1f6:	f040 8140 	bne.w	800c47a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	4798      	blx	r3
 800c208:	4603      	mov	r3, r0
 800c20a:	73fb      	strb	r3, [r7, #15]
      break;
 800c20c:	e13a      	b.n	800c484 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	785b      	ldrb	r3, [r3, #1]
 800c212:	2b03      	cmp	r3, #3
 800c214:	d007      	beq.n	800c226 <USBD_StdEPReq+0x5c>
 800c216:	2b03      	cmp	r3, #3
 800c218:	f300 8129 	bgt.w	800c46e <USBD_StdEPReq+0x2a4>
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d07f      	beq.n	800c320 <USBD_StdEPReq+0x156>
 800c220:	2b01      	cmp	r3, #1
 800c222:	d03c      	beq.n	800c29e <USBD_StdEPReq+0xd4>
 800c224:	e123      	b.n	800c46e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d002      	beq.n	800c238 <USBD_StdEPReq+0x6e>
 800c232:	2b03      	cmp	r3, #3
 800c234:	d016      	beq.n	800c264 <USBD_StdEPReq+0x9a>
 800c236:	e02c      	b.n	800c292 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00d      	beq.n	800c25a <USBD_StdEPReq+0x90>
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	2b80      	cmp	r3, #128	@ 0x80
 800c242:	d00a      	beq.n	800c25a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 ff29 	bl	800d0a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c24e:	2180      	movs	r1, #128	@ 0x80
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 ff25 	bl	800d0a0 <USBD_LL_StallEP>
 800c256:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c258:	e020      	b.n	800c29c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fc57 	bl	800cb10 <USBD_CtlError>
              break;
 800c262:	e01b      	b.n	800c29c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	885b      	ldrh	r3, [r3, #2]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10e      	bne.n	800c28a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00b      	beq.n	800c28a <USBD_StdEPReq+0xc0>
 800c272:	7bbb      	ldrb	r3, [r7, #14]
 800c274:	2b80      	cmp	r3, #128	@ 0x80
 800c276:	d008      	beq.n	800c28a <USBD_StdEPReq+0xc0>
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	88db      	ldrh	r3, [r3, #6]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d104      	bne.n	800c28a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c280:	7bbb      	ldrb	r3, [r7, #14]
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 ff0b 	bl	800d0a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fd0b 	bl	800cca6 <USBD_CtlSendStatus>

              break;
 800c290:	e004      	b.n	800c29c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fc3b 	bl	800cb10 <USBD_CtlError>
              break;
 800c29a:	bf00      	nop
          }
          break;
 800c29c:	e0ec      	b.n	800c478 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d002      	beq.n	800c2b0 <USBD_StdEPReq+0xe6>
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d016      	beq.n	800c2dc <USBD_StdEPReq+0x112>
 800c2ae:	e030      	b.n	800c312 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00d      	beq.n	800c2d2 <USBD_StdEPReq+0x108>
 800c2b6:	7bbb      	ldrb	r3, [r7, #14]
 800c2b8:	2b80      	cmp	r3, #128	@ 0x80
 800c2ba:	d00a      	beq.n	800c2d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2bc:	7bbb      	ldrb	r3, [r7, #14]
 800c2be:	4619      	mov	r1, r3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 feed 	bl	800d0a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2c6:	2180      	movs	r1, #128	@ 0x80
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fee9 	bl	800d0a0 <USBD_LL_StallEP>
 800c2ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2d0:	e025      	b.n	800c31e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fc1b 	bl	800cb10 <USBD_CtlError>
              break;
 800c2da:	e020      	b.n	800c31e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	885b      	ldrh	r3, [r3, #2]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d11b      	bne.n	800c31c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
 800c2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d004      	beq.n	800c2f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c2ee:	7bbb      	ldrb	r3, [r7, #14]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fef3 	bl	800d0de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fcd4 	bl	800cca6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	4798      	blx	r3
 800c30c:	4603      	mov	r3, r0
 800c30e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c310:	e004      	b.n	800c31c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fbfb 	bl	800cb10 <USBD_CtlError>
              break;
 800c31a:	e000      	b.n	800c31e <USBD_StdEPReq+0x154>
              break;
 800c31c:	bf00      	nop
          }
          break;
 800c31e:	e0ab      	b.n	800c478 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c326:	b2db      	uxtb	r3, r3
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d002      	beq.n	800c332 <USBD_StdEPReq+0x168>
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d032      	beq.n	800c396 <USBD_StdEPReq+0x1cc>
 800c330:	e097      	b.n	800c462 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c332:	7bbb      	ldrb	r3, [r7, #14]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d007      	beq.n	800c348 <USBD_StdEPReq+0x17e>
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	2b80      	cmp	r3, #128	@ 0x80
 800c33c:	d004      	beq.n	800c348 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fbe5 	bl	800cb10 <USBD_CtlError>
                break;
 800c346:	e091      	b.n	800c46c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	da0b      	bge.n	800c368 <USBD_StdEPReq+0x19e>
 800c350:	7bbb      	ldrb	r3, [r7, #14]
 800c352:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c356:	4613      	mov	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	3310      	adds	r3, #16
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	4413      	add	r3, r2
 800c364:	3304      	adds	r3, #4
 800c366:	e00b      	b.n	800c380 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c368:	7bbb      	ldrb	r3, [r7, #14]
 800c36a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c36e:	4613      	mov	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4413      	add	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	4413      	add	r3, r2
 800c37e:	3304      	adds	r3, #4
 800c380:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2202      	movs	r2, #2
 800c38c:	4619      	mov	r1, r3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fc2f 	bl	800cbf2 <USBD_CtlSendData>
              break;
 800c394:	e06a      	b.n	800c46c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	da11      	bge.n	800c3c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c39e:	7bbb      	ldrb	r3, [r7, #14]
 800c3a0:	f003 020f 	and.w	r2, r3, #15
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4413      	add	r3, r2
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	440b      	add	r3, r1
 800c3b0:	3324      	adds	r3, #36	@ 0x24
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d117      	bne.n	800c3e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fba8 	bl	800cb10 <USBD_CtlError>
                  break;
 800c3c0:	e054      	b.n	800c46c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	f003 020f 	and.w	r2, r3, #15
 800c3c8:	6879      	ldr	r1, [r7, #4]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	440b      	add	r3, r1
 800c3d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d104      	bne.n	800c3e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fb95 	bl	800cb10 <USBD_CtlError>
                  break;
 800c3e6:	e041      	b.n	800c46c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	da0b      	bge.n	800c408 <USBD_StdEPReq+0x23e>
 800c3f0:	7bbb      	ldrb	r3, [r7, #14]
 800c3f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	3310      	adds	r3, #16
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	4413      	add	r3, r2
 800c404:	3304      	adds	r3, #4
 800c406:	e00b      	b.n	800c420 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c408:	7bbb      	ldrb	r3, [r7, #14]
 800c40a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c40e:	4613      	mov	r3, r2
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4413      	add	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	4413      	add	r3, r2
 800c41e:	3304      	adds	r3, #4
 800c420:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c422:	7bbb      	ldrb	r3, [r7, #14]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <USBD_StdEPReq+0x264>
 800c428:	7bbb      	ldrb	r3, [r7, #14]
 800c42a:	2b80      	cmp	r3, #128	@ 0x80
 800c42c:	d103      	bne.n	800c436 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2200      	movs	r2, #0
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	e00e      	b.n	800c454 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c436:	7bbb      	ldrb	r3, [r7, #14]
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fe6e 	bl	800d11c <USBD_LL_IsStallEP>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d003      	beq.n	800c44e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2201      	movs	r2, #1
 800c44a:	601a      	str	r2, [r3, #0]
 800c44c:	e002      	b.n	800c454 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	2200      	movs	r2, #0
 800c452:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2202      	movs	r2, #2
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fbc9 	bl	800cbf2 <USBD_CtlSendData>
              break;
 800c460:	e004      	b.n	800c46c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fb53 	bl	800cb10 <USBD_CtlError>
              break;
 800c46a:	bf00      	nop
          }
          break;
 800c46c:	e004      	b.n	800c478 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fb4d 	bl	800cb10 <USBD_CtlError>
          break;
 800c476:	bf00      	nop
      }
      break;
 800c478:	e004      	b.n	800c484 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fb47 	bl	800cb10 <USBD_CtlError>
      break;
 800c482:	bf00      	nop
  }

  return ret;
 800c484:	7bfb      	ldrb	r3, [r7, #15]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
	...

0800c490 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c49a:	2300      	movs	r3, #0
 800c49c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	885b      	ldrh	r3, [r3, #2]
 800c4aa:	0a1b      	lsrs	r3, r3, #8
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	2b06      	cmp	r3, #6
 800c4b2:	f200 813b 	bhi.w	800c72c <USBD_GetDescriptor+0x29c>
 800c4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4bc <USBD_GetDescriptor+0x2c>)
 800c4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4bc:	0800c4d9 	.word	0x0800c4d9
 800c4c0:	0800c4f1 	.word	0x0800c4f1
 800c4c4:	0800c531 	.word	0x0800c531
 800c4c8:	0800c72d 	.word	0x0800c72d
 800c4cc:	0800c72d 	.word	0x0800c72d
 800c4d0:	0800c6cd 	.word	0x0800c6cd
 800c4d4:	0800c6f9 	.word	0x0800c6f9
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	7c12      	ldrb	r2, [r2, #16]
 800c4e4:	f107 0108 	add.w	r1, r7, #8
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	4798      	blx	r3
 800c4ec:	60f8      	str	r0, [r7, #12]
      break;
 800c4ee:	e125      	b.n	800c73c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	7c1b      	ldrb	r3, [r3, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10d      	bne.n	800c514 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c500:	f107 0208 	add.w	r2, r7, #8
 800c504:	4610      	mov	r0, r2
 800c506:	4798      	blx	r3
 800c508:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	3301      	adds	r3, #1
 800c50e:	2202      	movs	r2, #2
 800c510:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c512:	e113      	b.n	800c73c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51c:	f107 0208 	add.w	r2, r7, #8
 800c520:	4610      	mov	r0, r2
 800c522:	4798      	blx	r3
 800c524:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	3301      	adds	r3, #1
 800c52a:	2202      	movs	r2, #2
 800c52c:	701a      	strb	r2, [r3, #0]
      break;
 800c52e:	e105      	b.n	800c73c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	885b      	ldrh	r3, [r3, #2]
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b05      	cmp	r3, #5
 800c538:	f200 80ac 	bhi.w	800c694 <USBD_GetDescriptor+0x204>
 800c53c:	a201      	add	r2, pc, #4	@ (adr r2, 800c544 <USBD_GetDescriptor+0xb4>)
 800c53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c542:	bf00      	nop
 800c544:	0800c55d 	.word	0x0800c55d
 800c548:	0800c591 	.word	0x0800c591
 800c54c:	0800c5c5 	.word	0x0800c5c5
 800c550:	0800c5f9 	.word	0x0800c5f9
 800c554:	0800c62d 	.word	0x0800c62d
 800c558:	0800c661 	.word	0x0800c661
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00b      	beq.n	800c580 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	7c12      	ldrb	r2, [r2, #16]
 800c574:	f107 0108 	add.w	r1, r7, #8
 800c578:	4610      	mov	r0, r2
 800c57a:	4798      	blx	r3
 800c57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c57e:	e0a4      	b.n	800c6ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fac4 	bl	800cb10 <USBD_CtlError>
            err++;
 800c588:	7afb      	ldrb	r3, [r7, #11]
 800c58a:	3301      	adds	r3, #1
 800c58c:	72fb      	strb	r3, [r7, #11]
          break;
 800c58e:	e09c      	b.n	800c6ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00b      	beq.n	800c5b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	7c12      	ldrb	r2, [r2, #16]
 800c5a8:	f107 0108 	add.w	r1, r7, #8
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	4798      	blx	r3
 800c5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5b2:	e08a      	b.n	800c6ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 faaa 	bl	800cb10 <USBD_CtlError>
            err++;
 800c5bc:	7afb      	ldrb	r3, [r7, #11]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c5c2:	e082      	b.n	800c6ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00b      	beq.n	800c5e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	7c12      	ldrb	r2, [r2, #16]
 800c5dc:	f107 0108 	add.w	r1, r7, #8
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	4798      	blx	r3
 800c5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5e6:	e070      	b.n	800c6ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fa90 	bl	800cb10 <USBD_CtlError>
            err++;
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c5f6:	e068      	b.n	800c6ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00b      	beq.n	800c61c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	7c12      	ldrb	r2, [r2, #16]
 800c610:	f107 0108 	add.w	r1, r7, #8
 800c614:	4610      	mov	r0, r2
 800c616:	4798      	blx	r3
 800c618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c61a:	e056      	b.n	800c6ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fa76 	bl	800cb10 <USBD_CtlError>
            err++;
 800c624:	7afb      	ldrb	r3, [r7, #11]
 800c626:	3301      	adds	r3, #1
 800c628:	72fb      	strb	r3, [r7, #11]
          break;
 800c62a:	e04e      	b.n	800c6ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00b      	beq.n	800c650 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c63e:	695b      	ldr	r3, [r3, #20]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	7c12      	ldrb	r2, [r2, #16]
 800c644:	f107 0108 	add.w	r1, r7, #8
 800c648:	4610      	mov	r0, r2
 800c64a:	4798      	blx	r3
 800c64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c64e:	e03c      	b.n	800c6ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa5c 	bl	800cb10 <USBD_CtlError>
            err++;
 800c658:	7afb      	ldrb	r3, [r7, #11]
 800c65a:	3301      	adds	r3, #1
 800c65c:	72fb      	strb	r3, [r7, #11]
          break;
 800c65e:	e034      	b.n	800c6ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00b      	beq.n	800c684 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c672:	699b      	ldr	r3, [r3, #24]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	7c12      	ldrb	r2, [r2, #16]
 800c678:	f107 0108 	add.w	r1, r7, #8
 800c67c:	4610      	mov	r0, r2
 800c67e:	4798      	blx	r3
 800c680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c682:	e022      	b.n	800c6ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fa42 	bl	800cb10 <USBD_CtlError>
            err++;
 800c68c:	7afb      	ldrb	r3, [r7, #11]
 800c68e:	3301      	adds	r3, #1
 800c690:	72fb      	strb	r3, [r7, #11]
          break;
 800c692:	e01a      	b.n	800c6ca <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c69a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00c      	beq.n	800c6ba <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	8852      	ldrh	r2, [r2, #2]
 800c6ac:	b2d1      	uxtb	r1, r2
 800c6ae:	f107 0208 	add.w	r2, r7, #8
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	4798      	blx	r3
 800c6b6:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800c6b8:	e006      	b.n	800c6c8 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fa27 	bl	800cb10 <USBD_CtlError>
            err++;
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	72fb      	strb	r3, [r7, #11]
          break;
 800c6c8:	bf00      	nop
      }
      break;
 800c6ca:	e037      	b.n	800c73c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	7c1b      	ldrb	r3, [r3, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d109      	bne.n	800c6e8 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6dc:	f107 0208 	add.w	r2, r7, #8
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	4798      	blx	r3
 800c6e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6e6:	e029      	b.n	800c73c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 fa10 	bl	800cb10 <USBD_CtlError>
        err++;
 800c6f0:	7afb      	ldrb	r3, [r7, #11]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	72fb      	strb	r3, [r7, #11]
      break;
 800c6f6:	e021      	b.n	800c73c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	7c1b      	ldrb	r3, [r3, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10d      	bne.n	800c71c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c708:	f107 0208 	add.w	r2, r7, #8
 800c70c:	4610      	mov	r0, r2
 800c70e:	4798      	blx	r3
 800c710:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3301      	adds	r3, #1
 800c716:	2207      	movs	r2, #7
 800c718:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c71a:	e00f      	b.n	800c73c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f9f6 	bl	800cb10 <USBD_CtlError>
        err++;
 800c724:	7afb      	ldrb	r3, [r7, #11]
 800c726:	3301      	adds	r3, #1
 800c728:	72fb      	strb	r3, [r7, #11]
      break;
 800c72a:	e007      	b.n	800c73c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f9ee 	bl	800cb10 <USBD_CtlError>
      err++;
 800c734:	7afb      	ldrb	r3, [r7, #11]
 800c736:	3301      	adds	r3, #1
 800c738:	72fb      	strb	r3, [r7, #11]
      break;
 800c73a:	bf00      	nop
  }

  if (err != 0U)
 800c73c:	7afb      	ldrb	r3, [r7, #11]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d11e      	bne.n	800c780 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	88db      	ldrh	r3, [r3, #6]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d016      	beq.n	800c778 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800c74a:	893b      	ldrh	r3, [r7, #8]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00e      	beq.n	800c76e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	88da      	ldrh	r2, [r3, #6]
 800c754:	893b      	ldrh	r3, [r7, #8]
 800c756:	4293      	cmp	r3, r2
 800c758:	bf28      	it	cs
 800c75a:	4613      	movcs	r3, r2
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c760:	893b      	ldrh	r3, [r7, #8]
 800c762:	461a      	mov	r2, r3
 800c764:	68f9      	ldr	r1, [r7, #12]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fa43 	bl	800cbf2 <USBD_CtlSendData>
 800c76c:	e009      	b.n	800c782 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f9cd 	bl	800cb10 <USBD_CtlError>
 800c776:	e004      	b.n	800c782 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fa94 	bl	800cca6 <USBD_CtlSendStatus>
 800c77e:	e000      	b.n	800c782 <USBD_GetDescriptor+0x2f2>
    return;
 800c780:	bf00      	nop
  }
}
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	889b      	ldrh	r3, [r3, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d131      	bne.n	800c7fe <USBD_SetAddress+0x76>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	88db      	ldrh	r3, [r3, #6]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d12d      	bne.n	800c7fe <USBD_SetAddress+0x76>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	885b      	ldrh	r3, [r3, #2]
 800c7a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7a8:	d829      	bhi.n	800c7fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	885b      	ldrh	r3, [r3, #2]
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d104      	bne.n	800c7cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c7c2:	6839      	ldr	r1, [r7, #0]
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f9a3 	bl	800cb10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7ca:	e01d      	b.n	800c808 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	7bfa      	ldrb	r2, [r7, #15]
 800c7d0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fccb 	bl	800d174 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fa61 	bl	800cca6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d004      	beq.n	800c7f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f2:	e009      	b.n	800c808 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7fc:	e004      	b.n	800c808 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f985 	bl	800cb10 <USBD_CtlError>
  }
}
 800c806:	bf00      	nop
 800c808:	bf00      	nop
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	885b      	ldrh	r3, [r3, #2]
 800c822:	b2da      	uxtb	r2, r3
 800c824:	4b4c      	ldr	r3, [pc, #304]	@ (800c958 <USBD_SetConfig+0x148>)
 800c826:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c828:	4b4b      	ldr	r3, [pc, #300]	@ (800c958 <USBD_SetConfig+0x148>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d905      	bls.n	800c83c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f96c 	bl	800cb10 <USBD_CtlError>
    return USBD_FAIL;
 800c838:	2303      	movs	r3, #3
 800c83a:	e088      	b.n	800c94e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c842:	b2db      	uxtb	r3, r3
 800c844:	2b02      	cmp	r3, #2
 800c846:	d002      	beq.n	800c84e <USBD_SetConfig+0x3e>
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d025      	beq.n	800c898 <USBD_SetConfig+0x88>
 800c84c:	e071      	b.n	800c932 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c84e:	4b42      	ldr	r3, [pc, #264]	@ (800c958 <USBD_SetConfig+0x148>)
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d01c      	beq.n	800c890 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c856:	4b40      	ldr	r3, [pc, #256]	@ (800c958 <USBD_SetConfig+0x148>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	461a      	mov	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c860:	4b3d      	ldr	r3, [pc, #244]	@ (800c958 <USBD_SetConfig+0x148>)
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	4619      	mov	r1, r3
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f7ff f93b 	bl	800bae2 <USBD_SetClassConfig>
 800c86c:	4603      	mov	r3, r0
 800c86e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c870:	7bfb      	ldrb	r3, [r7, #15]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d004      	beq.n	800c880 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c876:	6839      	ldr	r1, [r7, #0]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 f949 	bl	800cb10 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c87e:	e065      	b.n	800c94c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fa10 	bl	800cca6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2203      	movs	r2, #3
 800c88a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c88e:	e05d      	b.n	800c94c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 fa08 	bl	800cca6 <USBD_CtlSendStatus>
      break;
 800c896:	e059      	b.n	800c94c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c898:	4b2f      	ldr	r3, [pc, #188]	@ (800c958 <USBD_SetConfig+0x148>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d112      	bne.n	800c8c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2202      	movs	r2, #2
 800c8a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c8a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c958 <USBD_SetConfig+0x148>)
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8b2:	4b29      	ldr	r3, [pc, #164]	@ (800c958 <USBD_SetConfig+0x148>)
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7ff f92e 	bl	800bb1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f9f1 	bl	800cca6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8c4:	e042      	b.n	800c94c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c8c6:	4b24      	ldr	r3, [pc, #144]	@ (800c958 <USBD_SetConfig+0x148>)
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d02a      	beq.n	800c92a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	4619      	mov	r1, r3
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f7ff f91c 	bl	800bb1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800c958 <USBD_SetConfig+0x148>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c958 <USBD_SetConfig+0x148>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7ff f8f5 	bl	800bae2 <USBD_SetClassConfig>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00f      	beq.n	800c922 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 f903 	bl	800cb10 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f7ff f901 	bl	800bb1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2202      	movs	r2, #2
 800c91c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c920:	e014      	b.n	800c94c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f9bf 	bl	800cca6 <USBD_CtlSendStatus>
      break;
 800c928:	e010      	b.n	800c94c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f9bb 	bl	800cca6 <USBD_CtlSendStatus>
      break;
 800c930:	e00c      	b.n	800c94c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f8eb 	bl	800cb10 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c93a:	4b07      	ldr	r3, [pc, #28]	@ (800c958 <USBD_SetConfig+0x148>)
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff f8ea 	bl	800bb1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c946:	2303      	movs	r3, #3
 800c948:	73fb      	strb	r3, [r7, #15]
      break;
 800c94a:	bf00      	nop
  }

  return ret;
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	20001670 	.word	0x20001670

0800c95c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	88db      	ldrh	r3, [r3, #6]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d004      	beq.n	800c978 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f8cd 	bl	800cb10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c976:	e023      	b.n	800c9c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b02      	cmp	r3, #2
 800c982:	dc02      	bgt.n	800c98a <USBD_GetConfig+0x2e>
 800c984:	2b00      	cmp	r3, #0
 800c986:	dc03      	bgt.n	800c990 <USBD_GetConfig+0x34>
 800c988:	e015      	b.n	800c9b6 <USBD_GetConfig+0x5a>
 800c98a:	2b03      	cmp	r3, #3
 800c98c:	d00b      	beq.n	800c9a6 <USBD_GetConfig+0x4a>
 800c98e:	e012      	b.n	800c9b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3308      	adds	r3, #8
 800c99a:	2201      	movs	r2, #1
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f927 	bl	800cbf2 <USBD_CtlSendData>
        break;
 800c9a4:	e00c      	b.n	800c9c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f91f 	bl	800cbf2 <USBD_CtlSendData>
        break;
 800c9b4:	e004      	b.n	800c9c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f8a9 	bl	800cb10 <USBD_CtlError>
        break;
 800c9be:	bf00      	nop
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d81e      	bhi.n	800ca1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	88db      	ldrh	r3, [r3, #6]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d004      	beq.n	800c9f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f890 	bl	800cb10 <USBD_CtlError>
        break;
 800c9f0:	e01a      	b.n	800ca28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d005      	beq.n	800ca0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	f043 0202 	orr.w	r2, r3, #2
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	330c      	adds	r3, #12
 800ca12:	2202      	movs	r2, #2
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f8eb 	bl	800cbf2 <USBD_CtlSendData>
      break;
 800ca1c:	e004      	b.n	800ca28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 f875 	bl	800cb10 <USBD_CtlError>
      break;
 800ca26:	bf00      	nop
  }
}
 800ca28:	bf00      	nop
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	885b      	ldrh	r3, [r3, #2]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d106      	bne.n	800ca50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 f92b 	bl	800cca6 <USBD_CtlSendStatus>
  }
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d80b      	bhi.n	800ca88 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	885b      	ldrh	r3, [r3, #2]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d10c      	bne.n	800ca92 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f910 	bl	800cca6 <USBD_CtlSendStatus>
      }
      break;
 800ca86:	e004      	b.n	800ca92 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f840 	bl	800cb10 <USBD_CtlError>
      break;
 800ca90:	e000      	b.n	800ca94 <USBD_ClrFeature+0x3c>
      break;
 800ca92:	bf00      	nop
  }
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	781a      	ldrb	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3301      	adds	r3, #1
 800cab6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	781a      	ldrb	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3301      	adds	r3, #1
 800cac4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7ff faa9 	bl	800c01e <SWAPBYTE>
 800cacc:	4603      	mov	r3, r0
 800cace:	461a      	mov	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	3301      	adds	r3, #1
 800cad8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3301      	adds	r3, #1
 800cade:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f7ff fa9c 	bl	800c01e <SWAPBYTE>
 800cae6:	4603      	mov	r3, r0
 800cae8:	461a      	mov	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3301      	adds	r3, #1
 800caf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	3301      	adds	r3, #1
 800caf8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cafa:	68f8      	ldr	r0, [r7, #12]
 800cafc:	f7ff fa8f 	bl	800c01e <SWAPBYTE>
 800cb00:	4603      	mov	r3, r0
 800cb02:	461a      	mov	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	80da      	strh	r2, [r3, #6]
}
 800cb08:	bf00      	nop
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb1a:	2180      	movs	r1, #128	@ 0x80
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fabf 	bl	800d0a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb22:	2100      	movs	r1, #0
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fabb 	bl	800d0a0 <USBD_LL_StallEP>
}
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b086      	sub	sp, #24
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d036      	beq.n	800cbb6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cb4c:	6938      	ldr	r0, [r7, #16]
 800cb4e:	f000 f836 	bl	800cbbe <USBD_GetLen>
 800cb52:	4603      	mov	r3, r0
 800cb54:	3301      	adds	r3, #1
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	68ba      	ldr	r2, [r7, #8]
 800cb64:	4413      	add	r3, r2
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	7812      	ldrb	r2, [r2, #0]
 800cb6a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb72:	7dfb      	ldrb	r3, [r7, #23]
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	4413      	add	r3, r2
 800cb78:	2203      	movs	r2, #3
 800cb7a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb82:	e013      	b.n	800cbac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb84:	7dfb      	ldrb	r3, [r7, #23]
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	4413      	add	r3, r2
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	7812      	ldrb	r2, [r2, #0]
 800cb8e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	3301      	adds	r3, #1
 800cb94:	613b      	str	r3, [r7, #16]
    idx++;
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb9c:	7dfb      	ldrb	r3, [r7, #23]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	4413      	add	r3, r2
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
    idx++;
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1e7      	bne.n	800cb84 <USBD_GetString+0x52>
 800cbb4:	e000      	b.n	800cbb8 <USBD_GetString+0x86>
    return;
 800cbb6:	bf00      	nop
  }
}
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cbbe:	b480      	push	{r7}
 800cbc0:	b085      	sub	sp, #20
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cbce:	e005      	b.n	800cbdc <USBD_GetLen+0x1e>
  {
    len++;
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1f5      	bne.n	800cbd0 <USBD_GetLen+0x12>
  }

  return len;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr

0800cbf2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	60f8      	str	r0, [r7, #12]
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2202      	movs	r2, #2
 800cc02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	2100      	movs	r1, #0
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f000 faca 	bl	800d1b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	2100      	movs	r1, #0
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f000 fab9 	bl	800d1b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b084      	sub	sp, #16
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	60f8      	str	r0, [r7, #12]
 800cc52:	60b9      	str	r1, [r7, #8]
 800cc54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2203      	movs	r2, #3
 800cc5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	68ba      	ldr	r2, [r7, #8]
 800cc72:	2100      	movs	r1, #0
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f000 fabd 	bl	800d1f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	2100      	movs	r1, #0
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f000 faac 	bl	800d1f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2204      	movs	r2, #4
 800ccb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	2200      	movs	r2, #0
 800ccba:	2100      	movs	r1, #0
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 fa78 	bl	800d1b2 <USBD_LL_Transmit>

  return USBD_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2205      	movs	r2, #5
 800ccd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccdc:	2300      	movs	r3, #0
 800ccde:	2200      	movs	r2, #0
 800cce0:	2100      	movs	r1, #0
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fa86 	bl	800d1f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	70fb      	strb	r3, [r7, #3]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800cd02:	883b      	ldrh	r3, [r7, #0]
 800cd04:	089b      	lsrs	r3, r3, #2
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7f9 fa57 	bl	80061c0 <HAL_PCDEx_SetTxFiFo>
 800cd12:	4603      	mov	r3, r0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800cd28:	887b      	ldrh	r3, [r7, #2]
 800cd2a:	089b      	lsrs	r3, r3, #2
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	4619      	mov	r1, r3
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7f9 fa8c 	bl	800624e <HAL_PCDEx_SetRxFiFo>
 800cd36:	4603      	mov	r3, r0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cd54:	4619      	mov	r1, r3
 800cd56:	4610      	mov	r0, r2
 800cd58:	f7fe fef7 	bl	800bb4a <USBD_LL_SetupStage>
}
 800cd5c:	bf00      	nop
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cd76:	78fa      	ldrb	r2, [r7, #3]
 800cd78:	6879      	ldr	r1, [r7, #4]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	00db      	lsls	r3, r3, #3
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	440b      	add	r3, r1
 800cd84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	78fb      	ldrb	r3, [r7, #3]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	f7fe ff31 	bl	800bbf4 <USBD_LL_DataOutStage>
}
 800cd92:	bf00      	nop
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b082      	sub	sp, #8
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cdac:	78fa      	ldrb	r2, [r7, #3]
 800cdae:	6879      	ldr	r1, [r7, #4]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	4413      	add	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	440b      	add	r3, r1
 800cdba:	3320      	adds	r3, #32
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	f7fe ff7a 	bl	800bcba <USBD_LL_DataInStage>
}
 800cdc6:	bf00      	nop
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff f889 	bl	800bef4 <USBD_LL_SOF>
}
 800cde2:	bf00      	nop
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	79db      	ldrb	r3, [r3, #7]
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d102      	bne.n	800ce04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800cdfe:	2301      	movs	r3, #1
 800ce00:	73fb      	strb	r3, [r7, #15]
 800ce02:	e008      	b.n	800ce16 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	79db      	ldrb	r3, [r3, #7]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d102      	bne.n	800ce12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
 800ce10:	e001      	b.n	800ce16 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800ce12:	f7f5 f9bf 	bl	8002194 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce1c:	7bfa      	ldrb	r2, [r7, #15]
 800ce1e:	4611      	mov	r1, r2
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff f829 	bl	800be78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe ffda 	bl	800bde6 <USBD_LL_Reset>
}
 800ce32:	bf00      	nop
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff f824 	bl	800be98 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	6812      	ldr	r2, [r2, #0]
 800ce5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce62:	f043 0301 	orr.w	r3, r3, #1
 800ce66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	7adb      	ldrb	r3, [r3, #11]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d005      	beq.n	800ce7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce70:	4b04      	ldr	r3, [pc, #16]	@ (800ce84 <HAL_PCD_SuspendCallback+0x48>)
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	4a03      	ldr	r2, [pc, #12]	@ (800ce84 <HAL_PCD_SuspendCallback+0x48>)
 800ce76:	f043 0306 	orr.w	r3, r3, #6
 800ce7a:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800ce7c:	bf00      	nop
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	e000ed00 	.word	0xe000ed00

0800ce88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff f814 	bl	800bec4 <USBD_LL_Resume>
}
 800ce9c:	bf00      	nop
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff f862 	bl	800bf84 <USBD_LL_IsoOUTIncomplete>
}
 800cec0:	bf00      	nop
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	460b      	mov	r3, r1
 800ced2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff f82a 	bl	800bf38 <USBD_LL_IsoINIncomplete>
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7ff f868 	bl	800bfd0 <USBD_LL_DevConnected>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff f865 	bl	800bfe6 <USBD_LL_DevDisconnected>
}
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800cf2c:	4b27      	ldr	r3, [pc, #156]	@ (800cfcc <USBD_LL_Init+0xa8>)
 800cf2e:	4a28      	ldr	r2, [pc, #160]	@ (800cfd0 <USBD_LL_Init+0xac>)
 800cf30:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d143      	bne.n	800cfc2 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800cf3a:	4b24      	ldr	r3, [pc, #144]	@ (800cfcc <USBD_LL_Init+0xa8>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800cf44:	4b21      	ldr	r3, [pc, #132]	@ (800cfcc <USBD_LL_Init+0xa8>)
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800cf4e:	4b1f      	ldr	r3, [pc, #124]	@ (800cfcc <USBD_LL_Init+0xa8>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff fee0 	bl	800cd1c <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800cf5c:	4b1b      	ldr	r3, [pc, #108]	@ (800cfcc <USBD_LL_Init+0xa8>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2240      	movs	r2, #64	@ 0x40
 800cf62:	2100      	movs	r1, #0
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff fec4 	bl	800ccf2 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800cf6a:	4b18      	ldr	r3, [pc, #96]	@ (800cfcc <USBD_LL_Init+0xa8>)
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	4b19      	ldr	r3, [pc, #100]	@ (800cfd4 <USBD_LL_Init+0xb0>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2240      	movs	r2, #64	@ 0x40
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	f7ff feb9 	bl	800ccf2 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]
 800cf84:	e01a      	b.n	800cfbc <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800cf86:	4b11      	ldr	r3, [pc, #68]	@ (800cfcc <USBD_LL_Init+0xa8>)
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	7bfb      	ldrb	r3, [r7, #15]
 800cf8c:	4a12      	ldr	r2, [pc, #72]	@ (800cfd8 <USBD_LL_Init+0xb4>)
 800cf8e:	5cd3      	ldrb	r3, [r2, r3]
 800cf90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	2280      	movs	r2, #128	@ 0x80
 800cf98:	4619      	mov	r1, r3
 800cf9a:	f7ff feaa 	bl	800ccf2 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cfcc <USBD_LL_Init+0xa8>)
 800cfa0:	6818      	ldr	r0, [r3, #0]
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	4a0d      	ldr	r2, [pc, #52]	@ (800cfdc <USBD_LL_Init+0xb8>)
 800cfa6:	5cd3      	ldrb	r3, [r2, r3]
 800cfa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2240      	movs	r2, #64	@ 0x40
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	f7ff fe9e 	bl	800ccf2 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	73fb      	strb	r3, [r7, #15]
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d0e1      	beq.n	800cf86 <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	20001674 	.word	0x20001674
 800cfd0:	2000087c 	.word	0x2000087c
 800cfd4:	200001fa 	.word	0x200001fa
 800cfd8:	20001308 	.word	0x20001308
 800cfdc:	20001310 	.word	0x20001310

0800cfe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7f7 ffd5 	bl	8004fa6 <HAL_PCD_Start>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	4618      	mov	r0, r3
 800d004:	f000 f92a 	bl	800d25c <USBD_Get_USB_Status>
 800d008:	4603      	mov	r3, r0
 800d00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	4608      	mov	r0, r1
 800d020:	4611      	mov	r1, r2
 800d022:	461a      	mov	r2, r3
 800d024:	4603      	mov	r3, r0
 800d026:	70fb      	strb	r3, [r7, #3]
 800d028:	460b      	mov	r3, r1
 800d02a:	70bb      	strb	r3, [r7, #2]
 800d02c:	4613      	mov	r3, r2
 800d02e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d030:	2300      	movs	r3, #0
 800d032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800d03e:	78bb      	ldrb	r3, [r7, #2]
 800d040:	883a      	ldrh	r2, [r7, #0]
 800d042:	78f9      	ldrb	r1, [r7, #3]
 800d044:	f7f8 fcd6 	bl	80059f4 <HAL_PCD_EP_Open>
 800d048:	4603      	mov	r3, r0
 800d04a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d04c:	7bfb      	ldrb	r3, [r7, #15]
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 f904 	bl	800d25c <USBD_Get_USB_Status>
 800d054:	4603      	mov	r3, r0
 800d056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d058:	7bbb      	ldrb	r3, [r7, #14]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b084      	sub	sp, #16
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	460b      	mov	r3, r1
 800d06c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d07c:	78fa      	ldrb	r2, [r7, #3]
 800d07e:	4611      	mov	r1, r2
 800d080:	4618      	mov	r0, r3
 800d082:	f7f8 fd21 	bl	8005ac8 <HAL_PCD_EP_Close>
 800d086:	4603      	mov	r3, r0
 800d088:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 f8e5 	bl	800d25c <USBD_Get_USB_Status>
 800d092:	4603      	mov	r3, r0
 800d094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d096:	7bbb      	ldrb	r3, [r7, #14]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d0ba:	78fa      	ldrb	r2, [r7, #3]
 800d0bc:	4611      	mov	r1, r2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f8 fdd9 	bl	8005c76 <HAL_PCD_EP_SetStall>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 f8c6 	bl	800d25c <USBD_Get_USB_Status>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d0f8:	78fa      	ldrb	r2, [r7, #3]
 800d0fa:	4611      	mov	r1, r2
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7f8 fe1d 	bl	8005d3c <HAL_PCD_EP_ClrStall>
 800d102:	4603      	mov	r3, r0
 800d104:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 f8a7 	bl	800d25c <USBD_Get_USB_Status>
 800d10e:	4603      	mov	r3, r0
 800d110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d112:	7bbb      	ldrb	r3, [r7, #14]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d12e:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800d130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d134:	2b00      	cmp	r3, #0
 800d136:	da0b      	bge.n	800d150 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d138:	78fb      	ldrb	r3, [r7, #3]
 800d13a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d13e:	68f9      	ldr	r1, [r7, #12]
 800d140:	4613      	mov	r3, r2
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	4413      	add	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	440b      	add	r3, r1
 800d14a:	3316      	adds	r3, #22
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	e00b      	b.n	800d168 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d150:	78fb      	ldrb	r3, [r7, #3]
 800d152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d156:	68f9      	ldr	r1, [r7, #12]
 800d158:	4613      	mov	r3, r2
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	4413      	add	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	440b      	add	r3, r1
 800d162:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d166:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d180:	2300      	movs	r3, #0
 800d182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d18e:	78fa      	ldrb	r2, [r7, #3]
 800d190:	4611      	mov	r1, r2
 800d192:	4618      	mov	r0, r3
 800d194:	f7f8 fc0a 	bl	80059ac <HAL_PCD_SetAddress>
 800d198:	4603      	mov	r3, r0
 800d19a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f000 f85c 	bl	800d25c <USBD_Get_USB_Status>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b086      	sub	sp, #24
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	60f8      	str	r0, [r7, #12]
 800d1ba:	607a      	str	r2, [r7, #4]
 800d1bc:	603b      	str	r3, [r7, #0]
 800d1be:	460b      	mov	r3, r1
 800d1c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800d1d0:	7af9      	ldrb	r1, [r7, #11]
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	f7f8 fd14 	bl	8005c02 <HAL_PCD_EP_Transmit>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d1de:	7dfb      	ldrb	r3, [r7, #23]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 f83b 	bl	800d25c <USBD_Get_USB_Status>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	607a      	str	r2, [r7, #4]
 800d1fe:	603b      	str	r3, [r7, #0]
 800d200:	460b      	mov	r3, r1
 800d202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d204:	2300      	movs	r3, #0
 800d206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800d212:	7af9      	ldrb	r1, [r7, #11]
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	f7f8 fca0 	bl	8005b5c <HAL_PCD_EP_Receive>
 800d21c:	4603      	mov	r3, r0
 800d21e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d220:	7dfb      	ldrb	r3, [r7, #23]
 800d222:	4618      	mov	r0, r3
 800d224:	f000 f81a 	bl	800d25c <USBD_Get_USB_Status>
 800d228:	4603      	mov	r3, r0
 800d22a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d22c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b082      	sub	sp, #8
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	460b      	mov	r3, r1
 800d240:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d248:	78fa      	ldrb	r2, [r7, #3]
 800d24a:	4611      	mov	r1, r2
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7f8 fcc0 	bl	8005bd2 <HAL_PCD_EP_GetRxCount>
 800d252:	4603      	mov	r3, r0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	4603      	mov	r3, r0
 800d264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d266:	2300      	movs	r3, #0
 800d268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d817      	bhi.n	800d2a0 <USBD_Get_USB_Status+0x44>
 800d270:	a201      	add	r2, pc, #4	@ (adr r2, 800d278 <USBD_Get_USB_Status+0x1c>)
 800d272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d276:	bf00      	nop
 800d278:	0800d289 	.word	0x0800d289
 800d27c:	0800d28f 	.word	0x0800d28f
 800d280:	0800d295 	.word	0x0800d295
 800d284:	0800d29b 	.word	0x0800d29b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]
    break;
 800d28c:	e00b      	b.n	800d2a6 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800d28e:	2303      	movs	r3, #3
 800d290:	73fb      	strb	r3, [r7, #15]
    break;
 800d292:	e008      	b.n	800d2a6 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800d294:	2301      	movs	r3, #1
 800d296:	73fb      	strb	r3, [r7, #15]
    break;
 800d298:	e005      	b.n	800d2a6 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800d29a:	2303      	movs	r3, #3
 800d29c:	73fb      	strb	r3, [r7, #15]
    break;
 800d29e:	e002      	b.n	800d2a6 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a4:	bf00      	nop
  }
  return usb_status;
 800d2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3714      	adds	r7, #20
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d2c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2c6:	2b84      	cmp	r3, #132	@ 0x84
 800d2c8:	d005      	beq.n	800d2d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d2ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	3303      	adds	r3, #3
 800d2d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3714      	adds	r7, #20
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2ea:	f3ef 8305 	mrs	r3, IPSR
 800d2ee:	607b      	str	r3, [r7, #4]
  return(result);
 800d2f0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bf14      	ite	ne
 800d2f6:	2301      	movne	r3, #1
 800d2f8:	2300      	moveq	r3, #0
 800d2fa:	b2db      	uxtb	r3, r3
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	370c      	adds	r7, #12
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d30c:	f001 f942 	bl	800e594 <vTaskStartScheduler>
  
  return osOK;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	bd80      	pop	{r7, pc}

0800d316 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d316:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d318:	b089      	sub	sp, #36	@ 0x24
 800d31a:	af04      	add	r7, sp, #16
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	695b      	ldr	r3, [r3, #20]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d020      	beq.n	800d36a <osThreadCreate+0x54>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d01c      	beq.n	800d36a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685c      	ldr	r4, [r3, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	691e      	ldr	r6, [r3, #16]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff ffb6 	bl	800d2b4 <makeFreeRtosPriority>
 800d348:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	695b      	ldr	r3, [r3, #20]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d352:	9202      	str	r2, [sp, #8]
 800d354:	9301      	str	r3, [sp, #4]
 800d356:	9100      	str	r1, [sp, #0]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	4632      	mov	r2, r6
 800d35c:	4629      	mov	r1, r5
 800d35e:	4620      	mov	r0, r4
 800d360:	f000 ff32 	bl	800e1c8 <xTaskCreateStatic>
 800d364:	4603      	mov	r3, r0
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	e01c      	b.n	800d3a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	685c      	ldr	r4, [r3, #4]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d376:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff ff98 	bl	800d2b4 <makeFreeRtosPriority>
 800d384:	4602      	mov	r2, r0
 800d386:	f107 030c 	add.w	r3, r7, #12
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	9200      	str	r2, [sp, #0]
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	4632      	mov	r2, r6
 800d392:	4629      	mov	r1, r5
 800d394:	4620      	mov	r0, r4
 800d396:	f000 ff77 	bl	800e288 <xTaskCreate>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d001      	beq.n	800d3a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e000      	b.n	800d3a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <osDelay+0x16>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	e000      	b.n	800d3c6 <osDelay+0x18>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f001 f8ae 	bl	800e528 <vTaskDelay>
  
  return osOK;
 800d3cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b086      	sub	sp, #24
 800d3da:	af02      	add	r7, sp, #8
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00f      	beq.n	800d408 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d10a      	bne.n	800d404 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	2203      	movs	r2, #3
 800d3f4:	9200      	str	r2, [sp, #0]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	f000 f9c0 	bl	800d780 <xQueueGenericCreateStatic>
 800d400:	4603      	mov	r3, r0
 800d402:	e016      	b.n	800d432 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d404:	2300      	movs	r3, #0
 800d406:	e014      	b.n	800d432 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d110      	bne.n	800d430 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d40e:	2203      	movs	r2, #3
 800d410:	2100      	movs	r1, #0
 800d412:	2001      	movs	r0, #1
 800d414:	f000 fa31 	bl	800d87a <xQueueGenericCreate>
 800d418:	60f8      	str	r0, [r7, #12]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d005      	beq.n	800d42c <osSemaphoreCreate+0x56>
 800d420:	2300      	movs	r3, #0
 800d422:	2200      	movs	r2, #0
 800d424:	2100      	movs	r1, #0
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 fa82 	bl	800d930 <xQueueGenericSend>
      return sema;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	e000      	b.n	800d432 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d430:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d446:	2300      	movs	r3, #0
 800d448:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d101      	bne.n	800d454 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d450:	2380      	movs	r3, #128	@ 0x80
 800d452:	e03a      	b.n	800d4ca <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d454:	2300      	movs	r3, #0
 800d456:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45e:	d103      	bne.n	800d468 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d460:	f04f 33ff 	mov.w	r3, #4294967295
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	e009      	b.n	800d47c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d006      	beq.n	800d47c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <osSemaphoreWait+0x40>
      ticks = 1;
 800d478:	2301      	movs	r3, #1
 800d47a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d47c:	f7ff ff32 	bl	800d2e4 <inHandlerMode>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d017      	beq.n	800d4b6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d486:	f107 0308 	add.w	r3, r7, #8
 800d48a:	461a      	mov	r2, r3
 800d48c:	2100      	movs	r1, #0
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fcf0 	bl	800de74 <xQueueReceiveFromISR>
 800d494:	4603      	mov	r3, r0
 800d496:	2b01      	cmp	r3, #1
 800d498:	d001      	beq.n	800d49e <osSemaphoreWait+0x62>
      return osErrorOS;
 800d49a:	23ff      	movs	r3, #255	@ 0xff
 800d49c:	e015      	b.n	800d4ca <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d011      	beq.n	800d4c8 <osSemaphoreWait+0x8c>
 800d4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d4 <osSemaphoreWait+0x98>)
 800d4a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4aa:	601a      	str	r2, [r3, #0]
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	f3bf 8f6f 	isb	sy
 800d4b4:	e008      	b.n	800d4c8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fbcb 	bl	800dc54 <xQueueSemaphoreTake>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d001      	beq.n	800d4c8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d4c4:	23ff      	movs	r3, #255	@ 0xff
 800d4c6:	e000      	b.n	800d4ca <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	e000ed04 	.word	0xe000ed04

0800d4d8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d4e8:	f7ff fefc 	bl	800d2e4 <inHandlerMode>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d016      	beq.n	800d520 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d4f2:	f107 0308 	add.w	r3, r7, #8
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fb1b 	bl	800db34 <xQueueGiveFromISR>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b01      	cmp	r3, #1
 800d502:	d001      	beq.n	800d508 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d504:	23ff      	movs	r3, #255	@ 0xff
 800d506:	e017      	b.n	800d538 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d013      	beq.n	800d536 <osSemaphoreRelease+0x5e>
 800d50e:	4b0c      	ldr	r3, [pc, #48]	@ (800d540 <osSemaphoreRelease+0x68>)
 800d510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	f3bf 8f6f 	isb	sy
 800d51e:	e00a      	b.n	800d536 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d520:	2300      	movs	r3, #0
 800d522:	2200      	movs	r2, #0
 800d524:	2100      	movs	r1, #0
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 fa02 	bl	800d930 <xQueueGenericSend>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d001      	beq.n	800d536 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d532:	23ff      	movs	r3, #255	@ 0xff
 800d534:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d536:	68fb      	ldr	r3, [r7, #12]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	e000ed04 	.word	0xe000ed04

0800d544 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f103 0208 	add.w	r2, r3, #8
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f04f 32ff 	mov.w	r2, #4294967295
 800d55c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f103 0208 	add.w	r2, r3, #8
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f103 0208 	add.w	r2, r3, #8
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d592:	bf00      	nop
 800d594:	370c      	adds	r7, #12
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	689a      	ldr	r2, [r3, #8]
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	1c5a      	adds	r2, r3, #1
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	601a      	str	r2, [r3, #0]
}
 800d5da:	bf00      	nop
 800d5dc:	3714      	adds	r7, #20
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5e6:	b480      	push	{r7}
 800d5e8:	b085      	sub	sp, #20
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5fc:	d103      	bne.n	800d606 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	e00c      	b.n	800d620 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3308      	adds	r3, #8
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	e002      	b.n	800d614 <vListInsert+0x2e>
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d2f6      	bcs.n	800d60e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	685a      	ldr	r2, [r3, #4]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	601a      	str	r2, [r3, #0]
}
 800d64c:	bf00      	nop
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	6892      	ldr	r2, [r2, #8]
 800d66e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	6852      	ldr	r2, [r2, #4]
 800d678:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	429a      	cmp	r2, r3
 800d682:	d103      	bne.n	800d68c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	689a      	ldr	r2, [r3, #8]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	1e5a      	subs	r2, r3, #1
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10b      	bne.n	800d6d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	e7fd      	b.n	800d6d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d6d8:	f001 fed6 	bl	800f488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e4:	68f9      	ldr	r1, [r7, #12]
 800d6e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6e8:	fb01 f303 	mul.w	r3, r1, r3
 800d6ec:	441a      	add	r2, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d708:	3b01      	subs	r3, #1
 800d70a:	68f9      	ldr	r1, [r7, #12]
 800d70c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d70e:	fb01 f303 	mul.w	r3, r1, r3
 800d712:	441a      	add	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	22ff      	movs	r2, #255	@ 0xff
 800d71c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	22ff      	movs	r2, #255	@ 0xff
 800d724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d114      	bne.n	800d758 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d01a      	beq.n	800d76c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	3310      	adds	r3, #16
 800d73a:	4618      	mov	r0, r3
 800d73c:	f001 f984 	bl	800ea48 <xTaskRemoveFromEventList>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d012      	beq.n	800d76c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d746:	4b0d      	ldr	r3, [pc, #52]	@ (800d77c <xQueueGenericReset+0xd0>)
 800d748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	e009      	b.n	800d76c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	3310      	adds	r3, #16
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fef1 	bl	800d544 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	3324      	adds	r3, #36	@ 0x24
 800d766:	4618      	mov	r0, r3
 800d768:	f7ff feec 	bl	800d544 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d76c:	f001 febe 	bl	800f4ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d770:	2301      	movs	r3, #1
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	e000ed04 	.word	0xe000ed04

0800d780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08e      	sub	sp, #56	@ 0x38
 800d784:	af02      	add	r7, sp, #8
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10b      	bne.n	800d7ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d7a6:	bf00      	nop
 800d7a8:	bf00      	nop
 800d7aa:	e7fd      	b.n	800d7a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10b      	bne.n	800d7ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d7c4:	bf00      	nop
 800d7c6:	bf00      	nop
 800d7c8:	e7fd      	b.n	800d7c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <xQueueGenericCreateStatic+0x56>
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <xQueueGenericCreateStatic+0x5a>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e000      	b.n	800d7dc <xQueueGenericCreateStatic+0x5c>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10b      	bne.n	800d7f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	623b      	str	r3, [r7, #32]
}
 800d7f2:	bf00      	nop
 800d7f4:	bf00      	nop
 800d7f6:	e7fd      	b.n	800d7f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d102      	bne.n	800d804 <xQueueGenericCreateStatic+0x84>
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <xQueueGenericCreateStatic+0x88>
 800d804:	2301      	movs	r3, #1
 800d806:	e000      	b.n	800d80a <xQueueGenericCreateStatic+0x8a>
 800d808:	2300      	movs	r3, #0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10b      	bne.n	800d826 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	61fb      	str	r3, [r7, #28]
}
 800d820:	bf00      	nop
 800d822:	bf00      	nop
 800d824:	e7fd      	b.n	800d822 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d826:	2348      	movs	r3, #72	@ 0x48
 800d828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	2b48      	cmp	r3, #72	@ 0x48
 800d82e:	d00b      	beq.n	800d848 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	61bb      	str	r3, [r7, #24]
}
 800d842:	bf00      	nop
 800d844:	bf00      	nop
 800d846:	e7fd      	b.n	800d844 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d848:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00d      	beq.n	800d870 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d856:	2201      	movs	r2, #1
 800d858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d85c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	4613      	mov	r3, r2
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	68b9      	ldr	r1, [r7, #8]
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f000 f840 	bl	800d8f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d872:	4618      	mov	r0, r3
 800d874:	3730      	adds	r7, #48	@ 0x30
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b08a      	sub	sp, #40	@ 0x28
 800d87e:	af02      	add	r7, sp, #8
 800d880:	60f8      	str	r0, [r7, #12]
 800d882:	60b9      	str	r1, [r7, #8]
 800d884:	4613      	mov	r3, r2
 800d886:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10b      	bne.n	800d8a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	613b      	str	r3, [r7, #16]
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	e7fd      	b.n	800d8a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	fb02 f303 	mul.w	r3, r2, r3
 800d8ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	3348      	adds	r3, #72	@ 0x48
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f001 ff09 	bl	800f6cc <pvPortMalloc>
 800d8ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d011      	beq.n	800d8e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	3348      	adds	r3, #72	@ 0x48
 800d8ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d8d4:	79fa      	ldrb	r2, [r7, #7]
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	697a      	ldr	r2, [r7, #20]
 800d8de:	68b9      	ldr	r1, [r7, #8]
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f000 f805 	bl	800d8f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d8e6:	69bb      	ldr	r3, [r7, #24]
	}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3720      	adds	r7, #32
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
 800d8fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d103      	bne.n	800d90c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	69ba      	ldr	r2, [r7, #24]
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	e002      	b.n	800d912 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d91e:	2101      	movs	r1, #1
 800d920:	69b8      	ldr	r0, [r7, #24]
 800d922:	f7ff fec3 	bl	800d6ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d926:	bf00      	nop
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
	...

0800d930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b08e      	sub	sp, #56	@ 0x38
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d93e:	2300      	movs	r3, #0
 800d940:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10b      	bne.n	800d964 <xQueueGenericSend+0x34>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d95e:	bf00      	nop
 800d960:	bf00      	nop
 800d962:	e7fd      	b.n	800d960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d103      	bne.n	800d972 <xQueueGenericSend+0x42>
 800d96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <xQueueGenericSend+0x46>
 800d972:	2301      	movs	r3, #1
 800d974:	e000      	b.n	800d978 <xQueueGenericSend+0x48>
 800d976:	2300      	movs	r3, #0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10b      	bne.n	800d994 <xQueueGenericSend+0x64>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d98e:	bf00      	nop
 800d990:	bf00      	nop
 800d992:	e7fd      	b.n	800d990 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	2b02      	cmp	r3, #2
 800d998:	d103      	bne.n	800d9a2 <xQueueGenericSend+0x72>
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d101      	bne.n	800d9a6 <xQueueGenericSend+0x76>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e000      	b.n	800d9a8 <xQueueGenericSend+0x78>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10b      	bne.n	800d9c4 <xQueueGenericSend+0x94>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	623b      	str	r3, [r7, #32]
}
 800d9be:	bf00      	nop
 800d9c0:	bf00      	nop
 800d9c2:	e7fd      	b.n	800d9c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9c4:	f001 fa06 	bl	800edd4 <xTaskGetSchedulerState>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d102      	bne.n	800d9d4 <xQueueGenericSend+0xa4>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <xQueueGenericSend+0xa8>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e000      	b.n	800d9da <xQueueGenericSend+0xaa>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10b      	bne.n	800d9f6 <xQueueGenericSend+0xc6>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	61fb      	str	r3, [r7, #28]
}
 800d9f0:	bf00      	nop
 800d9f2:	bf00      	nop
 800d9f4:	e7fd      	b.n	800d9f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9f6:	f001 fd47 	bl	800f488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da02:	429a      	cmp	r2, r3
 800da04:	d302      	bcc.n	800da0c <xQueueGenericSend+0xdc>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d129      	bne.n	800da60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	68b9      	ldr	r1, [r7, #8]
 800da10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da12:	f000 fac9 	bl	800dfa8 <prvCopyDataToQueue>
 800da16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d010      	beq.n	800da42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da22:	3324      	adds	r3, #36	@ 0x24
 800da24:	4618      	mov	r0, r3
 800da26:	f001 f80f 	bl	800ea48 <xTaskRemoveFromEventList>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d013      	beq.n	800da58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da30:	4b3f      	ldr	r3, [pc, #252]	@ (800db30 <xQueueGenericSend+0x200>)
 800da32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	e00a      	b.n	800da58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da44:	2b00      	cmp	r3, #0
 800da46:	d007      	beq.n	800da58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da48:	4b39      	ldr	r3, [pc, #228]	@ (800db30 <xQueueGenericSend+0x200>)
 800da4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da58:	f001 fd48 	bl	800f4ec <vPortExitCritical>
				return pdPASS;
 800da5c:	2301      	movs	r3, #1
 800da5e:	e063      	b.n	800db28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d103      	bne.n	800da6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da66:	f001 fd41 	bl	800f4ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da6a:	2300      	movs	r3, #0
 800da6c:	e05c      	b.n	800db28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da70:	2b00      	cmp	r3, #0
 800da72:	d106      	bne.n	800da82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da74:	f107 0314 	add.w	r3, r7, #20
 800da78:	4618      	mov	r0, r3
 800da7a:	f001 f849 	bl	800eb10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da7e:	2301      	movs	r3, #1
 800da80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da82:	f001 fd33 	bl	800f4ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da86:	f000 fdef 	bl	800e668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da8a:	f001 fcfd 	bl	800f488 <vPortEnterCritical>
 800da8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da94:	b25b      	sxtb	r3, r3
 800da96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9a:	d103      	bne.n	800daa4 <xQueueGenericSend+0x174>
 800da9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800daa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800daaa:	b25b      	sxtb	r3, r3
 800daac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab0:	d103      	bne.n	800daba <xQueueGenericSend+0x18a>
 800dab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800daba:	f001 fd17 	bl	800f4ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dabe:	1d3a      	adds	r2, r7, #4
 800dac0:	f107 0314 	add.w	r3, r7, #20
 800dac4:	4611      	mov	r1, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f001 f838 	bl	800eb3c <xTaskCheckForTimeOut>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d124      	bne.n	800db1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dad2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dad4:	f000 fb60 	bl	800e198 <prvIsQueueFull>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d018      	beq.n	800db10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae0:	3310      	adds	r3, #16
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	4611      	mov	r1, r2
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 ff88 	bl	800e9fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800daec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800daee:	f000 faeb 	bl	800e0c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800daf2:	f000 fdc7 	bl	800e684 <xTaskResumeAll>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f47f af7c 	bne.w	800d9f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800dafe:	4b0c      	ldr	r3, [pc, #48]	@ (800db30 <xQueueGenericSend+0x200>)
 800db00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	e772      	b.n	800d9f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db12:	f000 fad9 	bl	800e0c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db16:	f000 fdb5 	bl	800e684 <xTaskResumeAll>
 800db1a:	e76c      	b.n	800d9f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800db1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db1e:	f000 fad3 	bl	800e0c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db22:	f000 fdaf 	bl	800e684 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3738      	adds	r7, #56	@ 0x38
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	e000ed04 	.word	0xe000ed04

0800db34 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08e      	sub	sp, #56	@ 0x38
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800db42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10b      	bne.n	800db60 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800db48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	623b      	str	r3, [r7, #32]
}
 800db5a:	bf00      	nop
 800db5c:	bf00      	nop
 800db5e:	e7fd      	b.n	800db5c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00b      	beq.n	800db80 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800db68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	61fb      	str	r3, [r7, #28]
}
 800db7a:	bf00      	nop
 800db7c:	bf00      	nop
 800db7e:	e7fd      	b.n	800db7c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800db80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d103      	bne.n	800db90 <xQueueGiveFromISR+0x5c>
 800db88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <xQueueGiveFromISR+0x60>
 800db90:	2301      	movs	r3, #1
 800db92:	e000      	b.n	800db96 <xQueueGiveFromISR+0x62>
 800db94:	2300      	movs	r3, #0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10b      	bne.n	800dbb2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800db9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	61bb      	str	r3, [r7, #24]
}
 800dbac:	bf00      	nop
 800dbae:	bf00      	nop
 800dbb0:	e7fd      	b.n	800dbae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbb2:	f001 fd49 	bl	800f648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dbb6:	f3ef 8211 	mrs	r2, BASEPRI
 800dbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	617a      	str	r2, [r7, #20]
 800dbcc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dbce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbd6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d22b      	bcs.n	800dc3a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbee:	1c5a      	adds	r2, r3, #1
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dbf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbfc:	d112      	bne.n	800dc24 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d016      	beq.n	800dc34 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc08:	3324      	adds	r3, #36	@ 0x24
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 ff1c 	bl	800ea48 <xTaskRemoveFromEventList>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00e      	beq.n	800dc34 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00b      	beq.n	800dc34 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	601a      	str	r2, [r3, #0]
 800dc22:	e007      	b.n	800dc34 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc28:	3301      	adds	r3, #1
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	b25a      	sxtb	r2, r3
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dc34:	2301      	movs	r3, #1
 800dc36:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc38:	e001      	b.n	800dc3e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc40:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3738      	adds	r7, #56	@ 0x38
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08e      	sub	sp, #56	@ 0x38
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dc66:	2300      	movs	r3, #0
 800dc68:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10b      	bne.n	800dc88 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	623b      	str	r3, [r7, #32]
}
 800dc82:	bf00      	nop
 800dc84:	bf00      	nop
 800dc86:	e7fd      	b.n	800dc84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00b      	beq.n	800dca8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc94:	f383 8811 	msr	BASEPRI, r3
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	61fb      	str	r3, [r7, #28]
}
 800dca2:	bf00      	nop
 800dca4:	bf00      	nop
 800dca6:	e7fd      	b.n	800dca4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dca8:	f001 f894 	bl	800edd4 <xTaskGetSchedulerState>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d102      	bne.n	800dcb8 <xQueueSemaphoreTake+0x64>
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d101      	bne.n	800dcbc <xQueueSemaphoreTake+0x68>
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e000      	b.n	800dcbe <xQueueSemaphoreTake+0x6a>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10b      	bne.n	800dcda <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dcc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc6:	f383 8811 	msr	BASEPRI, r3
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	61bb      	str	r3, [r7, #24]
}
 800dcd4:	bf00      	nop
 800dcd6:	bf00      	nop
 800dcd8:	e7fd      	b.n	800dcd6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcda:	f001 fbd5 	bl	800f488 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d024      	beq.n	800dd34 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcec:	1e5a      	subs	r2, r3, #1
 800dcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d104      	bne.n	800dd04 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dcfa:	f001 fa17 	bl	800f12c <pvTaskIncrementMutexHeldCount>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00f      	beq.n	800dd2c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0e:	3310      	adds	r3, #16
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 fe99 	bl	800ea48 <xTaskRemoveFromEventList>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d007      	beq.n	800dd2c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd1c:	4b54      	ldr	r3, [pc, #336]	@ (800de70 <xQueueSemaphoreTake+0x21c>)
 800dd1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd2c:	f001 fbde 	bl	800f4ec <vPortExitCritical>
				return pdPASS;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e098      	b.n	800de66 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d112      	bne.n	800dd60 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00b      	beq.n	800dd58 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	617b      	str	r3, [r7, #20]
}
 800dd52:	bf00      	nop
 800dd54:	bf00      	nop
 800dd56:	e7fd      	b.n	800dd54 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dd58:	f001 fbc8 	bl	800f4ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	e082      	b.n	800de66 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd66:	f107 030c 	add.w	r3, r7, #12
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 fed0 	bl	800eb10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd70:	2301      	movs	r3, #1
 800dd72:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd74:	f001 fbba 	bl	800f4ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd78:	f000 fc76 	bl	800e668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd7c:	f001 fb84 	bl	800f488 <vPortEnterCritical>
 800dd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd86:	b25b      	sxtb	r3, r3
 800dd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8c:	d103      	bne.n	800dd96 <xQueueSemaphoreTake+0x142>
 800dd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd90:	2200      	movs	r2, #0
 800dd92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd9c:	b25b      	sxtb	r3, r3
 800dd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda2:	d103      	bne.n	800ddac <xQueueSemaphoreTake+0x158>
 800dda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ddac:	f001 fb9e 	bl	800f4ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddb0:	463a      	mov	r2, r7
 800ddb2:	f107 030c 	add.w	r3, r7, #12
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f000 febf 	bl	800eb3c <xTaskCheckForTimeOut>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d132      	bne.n	800de2a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddc6:	f000 f9d1 	bl	800e16c <prvIsQueueEmpty>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d026      	beq.n	800de1e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d109      	bne.n	800ddec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ddd8:	f001 fb56 	bl	800f488 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f001 f815 	bl	800ee10 <xTaskPriorityInherit>
 800dde6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dde8:	f001 fb80 	bl	800f4ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ddec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddee:	3324      	adds	r3, #36	@ 0x24
 800ddf0:	683a      	ldr	r2, [r7, #0]
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f000 fe01 	bl	800e9fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ddfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddfc:	f000 f964 	bl	800e0c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de00:	f000 fc40 	bl	800e684 <xTaskResumeAll>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	f47f af67 	bne.w	800dcda <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800de0c:	4b18      	ldr	r3, [pc, #96]	@ (800de70 <xQueueSemaphoreTake+0x21c>)
 800de0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	e75d      	b.n	800dcda <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800de1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de20:	f000 f952 	bl	800e0c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de24:	f000 fc2e 	bl	800e684 <xTaskResumeAll>
 800de28:	e757      	b.n	800dcda <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800de2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de2c:	f000 f94c 	bl	800e0c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de30:	f000 fc28 	bl	800e684 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de36:	f000 f999 	bl	800e16c <prvIsQueueEmpty>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f43f af4c 	beq.w	800dcda <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800de42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00d      	beq.n	800de64 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800de48:	f001 fb1e 	bl	800f488 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800de4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de4e:	f000 f893 	bl	800df78 <prvGetDisinheritPriorityAfterTimeout>
 800de52:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800de54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800de5a:	4618      	mov	r0, r3
 800de5c:	f001 f8d6 	bl	800f00c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800de60:	f001 fb44 	bl	800f4ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de66:	4618      	mov	r0, r3
 800de68:	3738      	adds	r7, #56	@ 0x38
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	e000ed04 	.word	0xe000ed04

0800de74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b08e      	sub	sp, #56	@ 0x38
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800de84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10b      	bne.n	800dea2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800de8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8e:	f383 8811 	msr	BASEPRI, r3
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	623b      	str	r3, [r7, #32]
}
 800de9c:	bf00      	nop
 800de9e:	bf00      	nop
 800dea0:	e7fd      	b.n	800de9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d103      	bne.n	800deb0 <xQueueReceiveFromISR+0x3c>
 800dea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deac:	2b00      	cmp	r3, #0
 800deae:	d101      	bne.n	800deb4 <xQueueReceiveFromISR+0x40>
 800deb0:	2301      	movs	r3, #1
 800deb2:	e000      	b.n	800deb6 <xQueueReceiveFromISR+0x42>
 800deb4:	2300      	movs	r3, #0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10b      	bne.n	800ded2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800deba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800debe:	f383 8811 	msr	BASEPRI, r3
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	f3bf 8f4f 	dsb	sy
 800deca:	61fb      	str	r3, [r7, #28]
}
 800decc:	bf00      	nop
 800dece:	bf00      	nop
 800ded0:	e7fd      	b.n	800dece <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ded2:	f001 fbb9 	bl	800f648 <vPortValidateInterruptPriority>
	__asm volatile
 800ded6:	f3ef 8211 	mrs	r2, BASEPRI
 800deda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	61ba      	str	r2, [r7, #24]
 800deec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800deee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800def0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800def2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800def6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800def8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800defa:	2b00      	cmp	r3, #0
 800defc:	d02f      	beq.n	800df5e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800defe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df08:	68b9      	ldr	r1, [r7, #8]
 800df0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df0c:	f000 f8b6 	bl	800e07c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df12:	1e5a      	subs	r2, r3, #1
 800df14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800df18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800df1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df20:	d112      	bne.n	800df48 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d016      	beq.n	800df58 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df2c:	3310      	adds	r3, #16
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 fd8a 	bl	800ea48 <xTaskRemoveFromEventList>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00e      	beq.n	800df58 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00b      	beq.n	800df58 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	e007      	b.n	800df58 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800df48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df4c:	3301      	adds	r3, #1
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	b25a      	sxtb	r2, r3
 800df52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800df58:	2301      	movs	r3, #1
 800df5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800df5c:	e001      	b.n	800df62 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800df5e:	2300      	movs	r3, #0
 800df60:	637b      	str	r3, [r7, #52]	@ 0x34
 800df62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	f383 8811 	msr	BASEPRI, r3
}
 800df6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800df70:	4618      	mov	r0, r3
 800df72:	3738      	adds	r7, #56	@ 0x38
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800df78:	b480      	push	{r7}
 800df7a:	b085      	sub	sp, #20
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f1c3 0307 	rsb	r3, r3, #7
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	e001      	b.n	800df9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800df96:	2300      	movs	r3, #0
 800df98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800df9a:	68fb      	ldr	r3, [r7, #12]
	}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10d      	bne.n	800dfe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d14d      	bne.n	800e06a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 ff92 	bl	800eefc <xTaskPriorityDisinherit>
 800dfd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	609a      	str	r2, [r3, #8]
 800dfe0:	e043      	b.n	800e06a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d119      	bne.n	800e01c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	6858      	ldr	r0, [r3, #4]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dff0:	461a      	mov	r2, r3
 800dff2:	68b9      	ldr	r1, [r7, #8]
 800dff4:	f001 ff02 	bl	800fdfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e000:	441a      	add	r2, r3
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	685a      	ldr	r2, [r3, #4]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d32b      	bcc.n	800e06a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	605a      	str	r2, [r3, #4]
 800e01a:	e026      	b.n	800e06a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	68d8      	ldr	r0, [r3, #12]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e024:	461a      	mov	r2, r3
 800e026:	68b9      	ldr	r1, [r7, #8]
 800e028:	f001 fee8 	bl	800fdfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	68da      	ldr	r2, [r3, #12]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e034:	425b      	negs	r3, r3
 800e036:	441a      	add	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	68da      	ldr	r2, [r3, #12]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	429a      	cmp	r2, r3
 800e046:	d207      	bcs.n	800e058 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	689a      	ldr	r2, [r3, #8]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e050:	425b      	negs	r3, r3
 800e052:	441a      	add	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b02      	cmp	r3, #2
 800e05c:	d105      	bne.n	800e06a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	3b01      	subs	r3, #1
 800e068:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	1c5a      	adds	r2, r3, #1
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e072:	697b      	ldr	r3, [r7, #20]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d018      	beq.n	800e0c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68da      	ldr	r2, [r3, #12]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e096:	441a      	add	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68da      	ldr	r2, [r3, #12]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d303      	bcc.n	800e0b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	68d9      	ldr	r1, [r3, #12]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	6838      	ldr	r0, [r7, #0]
 800e0bc:	f001 fe9e 	bl	800fdfc <memcpy>
	}
}
 800e0c0:	bf00      	nop
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e0d0:	f001 f9da 	bl	800f488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e0da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0dc:	e011      	b.n	800e102 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d012      	beq.n	800e10c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3324      	adds	r3, #36	@ 0x24
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fcac 	bl	800ea48 <xTaskRemoveFromEventList>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e0f6:	f000 fd85 	bl	800ec04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e0fa:	7bfb      	ldrb	r3, [r7, #15]
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e106:	2b00      	cmp	r3, #0
 800e108:	dce9      	bgt.n	800e0de <prvUnlockQueue+0x16>
 800e10a:	e000      	b.n	800e10e <prvUnlockQueue+0x46>
					break;
 800e10c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	22ff      	movs	r2, #255	@ 0xff
 800e112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e116:	f001 f9e9 	bl	800f4ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e11a:	f001 f9b5 	bl	800f488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e124:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e126:	e011      	b.n	800e14c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d012      	beq.n	800e156 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3310      	adds	r3, #16
 800e134:	4618      	mov	r0, r3
 800e136:	f000 fc87 	bl	800ea48 <xTaskRemoveFromEventList>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e140:	f000 fd60 	bl	800ec04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e144:	7bbb      	ldrb	r3, [r7, #14]
 800e146:	3b01      	subs	r3, #1
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e14c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e150:	2b00      	cmp	r3, #0
 800e152:	dce9      	bgt.n	800e128 <prvUnlockQueue+0x60>
 800e154:	e000      	b.n	800e158 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e156:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	22ff      	movs	r2, #255	@ 0xff
 800e15c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e160:	f001 f9c4 	bl	800f4ec <vPortExitCritical>
}
 800e164:	bf00      	nop
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e174:	f001 f988 	bl	800f488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d102      	bne.n	800e186 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e180:	2301      	movs	r3, #1
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	e001      	b.n	800e18a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e186:	2300      	movs	r3, #0
 800e188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e18a:	f001 f9af 	bl	800f4ec <vPortExitCritical>

	return xReturn;
 800e18e:	68fb      	ldr	r3, [r7, #12]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1a0:	f001 f972 	bl	800f488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d102      	bne.n	800e1b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	60fb      	str	r3, [r7, #12]
 800e1b4:	e001      	b.n	800e1ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1ba:	f001 f997 	bl	800f4ec <vPortExitCritical>

	return xReturn;
 800e1be:	68fb      	ldr	r3, [r7, #12]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08e      	sub	sp, #56	@ 0x38
 800e1cc:	af04      	add	r7, sp, #16
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
 800e1d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10b      	bne.n	800e1f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e0:	f383 8811 	msr	BASEPRI, r3
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	623b      	str	r3, [r7, #32]
}
 800e1ee:	bf00      	nop
 800e1f0:	bf00      	nop
 800e1f2:	e7fd      	b.n	800e1f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d10b      	bne.n	800e212 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	61fb      	str	r3, [r7, #28]
}
 800e20c:	bf00      	nop
 800e20e:	bf00      	nop
 800e210:	e7fd      	b.n	800e20e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e212:	23a0      	movs	r3, #160	@ 0xa0
 800e214:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	2ba0      	cmp	r3, #160	@ 0xa0
 800e21a:	d00b      	beq.n	800e234 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e220:	f383 8811 	msr	BASEPRI, r3
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	61bb      	str	r3, [r7, #24]
}
 800e22e:	bf00      	nop
 800e230:	bf00      	nop
 800e232:	e7fd      	b.n	800e230 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e234:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d01e      	beq.n	800e27a <xTaskCreateStatic+0xb2>
 800e23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d01b      	beq.n	800e27a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e244:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e24a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24e:	2202      	movs	r2, #2
 800e250:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e254:	2300      	movs	r3, #0
 800e256:	9303      	str	r3, [sp, #12]
 800e258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25a:	9302      	str	r3, [sp, #8]
 800e25c:	f107 0314 	add.w	r3, r7, #20
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	68b9      	ldr	r1, [r7, #8]
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f000 f851 	bl	800e314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e274:	f000 f8ee 	bl	800e454 <prvAddNewTaskToReadyList>
 800e278:	e001      	b.n	800e27e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e27e:	697b      	ldr	r3, [r7, #20]
	}
 800e280:	4618      	mov	r0, r3
 800e282:	3728      	adds	r7, #40	@ 0x28
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08c      	sub	sp, #48	@ 0x30
 800e28c:	af04      	add	r7, sp, #16
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	603b      	str	r3, [r7, #0]
 800e294:	4613      	mov	r3, r2
 800e296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e298:	88fb      	ldrh	r3, [r7, #6]
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4618      	mov	r0, r3
 800e29e:	f001 fa15 	bl	800f6cc <pvPortMalloc>
 800e2a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00e      	beq.n	800e2c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e2aa:	20a0      	movs	r0, #160	@ 0xa0
 800e2ac:	f001 fa0e 	bl	800f6cc <pvPortMalloc>
 800e2b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d003      	beq.n	800e2c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	697a      	ldr	r2, [r7, #20]
 800e2bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800e2be:	e005      	b.n	800e2cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e2c0:	6978      	ldr	r0, [r7, #20]
 800e2c2:	f001 fad1 	bl	800f868 <vPortFree>
 800e2c6:	e001      	b.n	800e2cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d017      	beq.n	800e302 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e2da:	88fa      	ldrh	r2, [r7, #6]
 800e2dc:	2300      	movs	r3, #0
 800e2de:	9303      	str	r3, [sp, #12]
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	9302      	str	r3, [sp, #8]
 800e2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e6:	9301      	str	r3, [sp, #4]
 800e2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ea:	9300      	str	r3, [sp, #0]
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	68b9      	ldr	r1, [r7, #8]
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f000 f80f 	bl	800e314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2f6:	69f8      	ldr	r0, [r7, #28]
 800e2f8:	f000 f8ac 	bl	800e454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	61bb      	str	r3, [r7, #24]
 800e300:	e002      	b.n	800e308 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e302:	f04f 33ff 	mov.w	r3, #4294967295
 800e306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e308:	69bb      	ldr	r3, [r7, #24]
	}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3720      	adds	r7, #32
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
	...

0800e314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b088      	sub	sp, #32
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
 800e320:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e32c:	3b01      	subs	r3, #1
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	f023 0307 	bic.w	r3, r3, #7
 800e33a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	f003 0307 	and.w	r3, r3, #7
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00b      	beq.n	800e35e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34a:	f383 8811 	msr	BASEPRI, r3
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f3bf 8f4f 	dsb	sy
 800e356:	617b      	str	r3, [r7, #20]
}
 800e358:	bf00      	nop
 800e35a:	bf00      	nop
 800e35c:	e7fd      	b.n	800e35a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d01f      	beq.n	800e3a4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e364:	2300      	movs	r3, #0
 800e366:	61fb      	str	r3, [r7, #28]
 800e368:	e012      	b.n	800e390 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	4413      	add	r3, r2
 800e370:	7819      	ldrb	r1, [r3, #0]
 800e372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	4413      	add	r3, r2
 800e378:	3334      	adds	r3, #52	@ 0x34
 800e37a:	460a      	mov	r2, r1
 800e37c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	4413      	add	r3, r2
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d006      	beq.n	800e398 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	3301      	adds	r3, #1
 800e38e:	61fb      	str	r3, [r7, #28]
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	2b0f      	cmp	r3, #15
 800e394:	d9e9      	bls.n	800e36a <prvInitialiseNewTask+0x56>
 800e396:	e000      	b.n	800e39a <prvInitialiseNewTask+0x86>
			{
				break;
 800e398:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e3a2:	e003      	b.n	800e3ac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ae:	2b06      	cmp	r3, #6
 800e3b0:	d901      	bls.n	800e3b6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e3b2:	2306      	movs	r3, #6
 800e3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3c0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7ff f8d9 	bl	800d584 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d4:	3318      	adds	r3, #24
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff f8d4 	bl	800d584 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e4:	f1c3 0207 	rsb	r2, r3, #7
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e404:	334c      	adds	r3, #76	@ 0x4c
 800e406:	224c      	movs	r2, #76	@ 0x4c
 800e408:	2100      	movs	r1, #0
 800e40a:	4618      	mov	r0, r3
 800e40c:	f001 fc5c 	bl	800fcc8 <memset>
 800e410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e412:	4a0d      	ldr	r2, [pc, #52]	@ (800e448 <prvInitialiseNewTask+0x134>)
 800e414:	651a      	str	r2, [r3, #80]	@ 0x50
 800e416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e418:	4a0c      	ldr	r2, [pc, #48]	@ (800e44c <prvInitialiseNewTask+0x138>)
 800e41a:	655a      	str	r2, [r3, #84]	@ 0x54
 800e41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41e:	4a0c      	ldr	r2, [pc, #48]	@ (800e450 <prvInitialiseNewTask+0x13c>)
 800e420:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e422:	683a      	ldr	r2, [r7, #0]
 800e424:	68f9      	ldr	r1, [r7, #12]
 800e426:	69b8      	ldr	r0, [r7, #24]
 800e428:	f000 fefa 	bl	800f220 <pxPortInitialiseStack>
 800e42c:	4602      	mov	r2, r0
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e43c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e43e:	bf00      	nop
 800e440:	3720      	adds	r7, #32
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	200053d4 	.word	0x200053d4
 800e44c:	2000543c 	.word	0x2000543c
 800e450:	200054a4 	.word	0x200054a4

0800e454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e45c:	f001 f814 	bl	800f488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e460:	4b2a      	ldr	r3, [pc, #168]	@ (800e50c <prvAddNewTaskToReadyList+0xb8>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	3301      	adds	r3, #1
 800e466:	4a29      	ldr	r2, [pc, #164]	@ (800e50c <prvAddNewTaskToReadyList+0xb8>)
 800e468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e46a:	4b29      	ldr	r3, [pc, #164]	@ (800e510 <prvAddNewTaskToReadyList+0xbc>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d109      	bne.n	800e486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e472:	4a27      	ldr	r2, [pc, #156]	@ (800e510 <prvAddNewTaskToReadyList+0xbc>)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e478:	4b24      	ldr	r3, [pc, #144]	@ (800e50c <prvAddNewTaskToReadyList+0xb8>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d110      	bne.n	800e4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e480:	f000 fbe4 	bl	800ec4c <prvInitialiseTaskLists>
 800e484:	e00d      	b.n	800e4a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e486:	4b23      	ldr	r3, [pc, #140]	@ (800e514 <prvAddNewTaskToReadyList+0xc0>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d109      	bne.n	800e4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e48e:	4b20      	ldr	r3, [pc, #128]	@ (800e510 <prvAddNewTaskToReadyList+0xbc>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e498:	429a      	cmp	r2, r3
 800e49a:	d802      	bhi.n	800e4a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e49c:	4a1c      	ldr	r2, [pc, #112]	@ (800e510 <prvAddNewTaskToReadyList+0xbc>)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e4a2:	4b1d      	ldr	r3, [pc, #116]	@ (800e518 <prvAddNewTaskToReadyList+0xc4>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e518 <prvAddNewTaskToReadyList+0xc4>)
 800e4aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	409a      	lsls	r2, r3
 800e4b4:	4b19      	ldr	r3, [pc, #100]	@ (800e51c <prvAddNewTaskToReadyList+0xc8>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	4a18      	ldr	r2, [pc, #96]	@ (800e51c <prvAddNewTaskToReadyList+0xc8>)
 800e4bc:	6013      	str	r3, [r2, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4a15      	ldr	r2, [pc, #84]	@ (800e520 <prvAddNewTaskToReadyList+0xcc>)
 800e4cc:	441a      	add	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	3304      	adds	r3, #4
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	f7ff f862 	bl	800d59e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e4da:	f001 f807 	bl	800f4ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e4de:	4b0d      	ldr	r3, [pc, #52]	@ (800e514 <prvAddNewTaskToReadyList+0xc0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00e      	beq.n	800e504 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800e510 <prvAddNewTaskToReadyList+0xbc>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d207      	bcs.n	800e504 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800e524 <prvAddNewTaskToReadyList+0xd0>)
 800e4f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4fa:	601a      	str	r2, [r3, #0]
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e504:	bf00      	nop
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	20001778 	.word	0x20001778
 800e510:	20001678 	.word	0x20001678
 800e514:	20001784 	.word	0x20001784
 800e518:	20001794 	.word	0x20001794
 800e51c:	20001780 	.word	0x20001780
 800e520:	2000167c 	.word	0x2000167c
 800e524:	e000ed04 	.word	0xe000ed04

0800e528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e530:	2300      	movs	r3, #0
 800e532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d018      	beq.n	800e56c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e53a:	4b14      	ldr	r3, [pc, #80]	@ (800e58c <vTaskDelay+0x64>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00b      	beq.n	800e55a <vTaskDelay+0x32>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	f3bf 8f6f 	isb	sy
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	60bb      	str	r3, [r7, #8]
}
 800e554:	bf00      	nop
 800e556:	bf00      	nop
 800e558:	e7fd      	b.n	800e556 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e55a:	f000 f885 	bl	800e668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e55e:	2100      	movs	r1, #0
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 fdf7 	bl	800f154 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e566:	f000 f88d 	bl	800e684 <xTaskResumeAll>
 800e56a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d107      	bne.n	800e582 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e572:	4b07      	ldr	r3, [pc, #28]	@ (800e590 <vTaskDelay+0x68>)
 800e574:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e578:	601a      	str	r2, [r3, #0]
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e582:	bf00      	nop
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	200017a0 	.word	0x200017a0
 800e590:	e000ed04 	.word	0xe000ed04

0800e594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b08a      	sub	sp, #40	@ 0x28
 800e598:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e5a2:	463a      	mov	r2, r7
 800e5a4:	1d39      	adds	r1, r7, #4
 800e5a6:	f107 0308 	add.w	r3, r7, #8
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7f2 fdd6 	bl	800115c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5b0:	6839      	ldr	r1, [r7, #0]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	68ba      	ldr	r2, [r7, #8]
 800e5b6:	9202      	str	r2, [sp, #8]
 800e5b8:	9301      	str	r3, [sp, #4]
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	2300      	movs	r3, #0
 800e5c0:	460a      	mov	r2, r1
 800e5c2:	4921      	ldr	r1, [pc, #132]	@ (800e648 <vTaskStartScheduler+0xb4>)
 800e5c4:	4821      	ldr	r0, [pc, #132]	@ (800e64c <vTaskStartScheduler+0xb8>)
 800e5c6:	f7ff fdff 	bl	800e1c8 <xTaskCreateStatic>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	4a20      	ldr	r2, [pc, #128]	@ (800e650 <vTaskStartScheduler+0xbc>)
 800e5ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5d0:	4b1f      	ldr	r3, [pc, #124]	@ (800e650 <vTaskStartScheduler+0xbc>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d002      	beq.n	800e5de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	617b      	str	r3, [r7, #20]
 800e5dc:	e001      	b.n	800e5e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d11b      	bne.n	800e620 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	613b      	str	r3, [r7, #16]
}
 800e5fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5fc:	4b15      	ldr	r3, [pc, #84]	@ (800e654 <vTaskStartScheduler+0xc0>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	334c      	adds	r3, #76	@ 0x4c
 800e602:	4a15      	ldr	r2, [pc, #84]	@ (800e658 <vTaskStartScheduler+0xc4>)
 800e604:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e606:	4b15      	ldr	r3, [pc, #84]	@ (800e65c <vTaskStartScheduler+0xc8>)
 800e608:	f04f 32ff 	mov.w	r2, #4294967295
 800e60c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e60e:	4b14      	ldr	r3, [pc, #80]	@ (800e660 <vTaskStartScheduler+0xcc>)
 800e610:	2201      	movs	r2, #1
 800e612:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e614:	4b13      	ldr	r3, [pc, #76]	@ (800e664 <vTaskStartScheduler+0xd0>)
 800e616:	2200      	movs	r2, #0
 800e618:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e61a:	f000 fe91 	bl	800f340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e61e:	e00f      	b.n	800e640 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e626:	d10b      	bne.n	800e640 <vTaskStartScheduler+0xac>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	60fb      	str	r3, [r7, #12]
}
 800e63a:	bf00      	nop
 800e63c:	bf00      	nop
 800e63e:	e7fd      	b.n	800e63c <vTaskStartScheduler+0xa8>
}
 800e640:	bf00      	nop
 800e642:	3718      	adds	r7, #24
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	08010634 	.word	0x08010634
 800e64c:	0800ec1d 	.word	0x0800ec1d
 800e650:	2000179c 	.word	0x2000179c
 800e654:	20001678 	.word	0x20001678
 800e658:	200002d8 	.word	0x200002d8
 800e65c:	20001798 	.word	0x20001798
 800e660:	20001784 	.word	0x20001784
 800e664:	2000177c 	.word	0x2000177c

0800e668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e668:	b480      	push	{r7}
 800e66a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e66c:	4b04      	ldr	r3, [pc, #16]	@ (800e680 <vTaskSuspendAll+0x18>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	3301      	adds	r3, #1
 800e672:	4a03      	ldr	r2, [pc, #12]	@ (800e680 <vTaskSuspendAll+0x18>)
 800e674:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e676:	bf00      	nop
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr
 800e680:	200017a0 	.word	0x200017a0

0800e684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e68a:	2300      	movs	r3, #0
 800e68c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e68e:	2300      	movs	r3, #0
 800e690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e692:	4b42      	ldr	r3, [pc, #264]	@ (800e79c <xTaskResumeAll+0x118>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10b      	bne.n	800e6b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800e69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	603b      	str	r3, [r7, #0]
}
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	e7fd      	b.n	800e6ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6b2:	f000 fee9 	bl	800f488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6b6:	4b39      	ldr	r3, [pc, #228]	@ (800e79c <xTaskResumeAll+0x118>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	4a37      	ldr	r2, [pc, #220]	@ (800e79c <xTaskResumeAll+0x118>)
 800e6be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c0:	4b36      	ldr	r3, [pc, #216]	@ (800e79c <xTaskResumeAll+0x118>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d161      	bne.n	800e78c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6c8:	4b35      	ldr	r3, [pc, #212]	@ (800e7a0 <xTaskResumeAll+0x11c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d05d      	beq.n	800e78c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6d0:	e02e      	b.n	800e730 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6d2:	4b34      	ldr	r3, [pc, #208]	@ (800e7a4 <xTaskResumeAll+0x120>)
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	3318      	adds	r3, #24
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fe ffba 	bl	800d658 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	3304      	adds	r3, #4
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fe ffb5 	bl	800d658 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	409a      	lsls	r2, r3
 800e6f6:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a8 <xTaskResumeAll+0x124>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	4a2a      	ldr	r2, [pc, #168]	@ (800e7a8 <xTaskResumeAll+0x124>)
 800e6fe:	6013      	str	r3, [r2, #0]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e704:	4613      	mov	r3, r2
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	4413      	add	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	4a27      	ldr	r2, [pc, #156]	@ (800e7ac <xTaskResumeAll+0x128>)
 800e70e:	441a      	add	r2, r3
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	3304      	adds	r3, #4
 800e714:	4619      	mov	r1, r3
 800e716:	4610      	mov	r0, r2
 800e718:	f7fe ff41 	bl	800d59e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e720:	4b23      	ldr	r3, [pc, #140]	@ (800e7b0 <xTaskResumeAll+0x12c>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e726:	429a      	cmp	r2, r3
 800e728:	d302      	bcc.n	800e730 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e72a:	4b22      	ldr	r3, [pc, #136]	@ (800e7b4 <xTaskResumeAll+0x130>)
 800e72c:	2201      	movs	r2, #1
 800e72e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e730:	4b1c      	ldr	r3, [pc, #112]	@ (800e7a4 <xTaskResumeAll+0x120>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1cc      	bne.n	800e6d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e73e:	f000 fb29 	bl	800ed94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e742:	4b1d      	ldr	r3, [pc, #116]	@ (800e7b8 <xTaskResumeAll+0x134>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d010      	beq.n	800e770 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e74e:	f000 f837 	bl	800e7c0 <xTaskIncrementTick>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d002      	beq.n	800e75e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e758:	4b16      	ldr	r3, [pc, #88]	@ (800e7b4 <xTaskResumeAll+0x130>)
 800e75a:	2201      	movs	r2, #1
 800e75c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	3b01      	subs	r3, #1
 800e762:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1f1      	bne.n	800e74e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e76a:	4b13      	ldr	r3, [pc, #76]	@ (800e7b8 <xTaskResumeAll+0x134>)
 800e76c:	2200      	movs	r2, #0
 800e76e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e770:	4b10      	ldr	r3, [pc, #64]	@ (800e7b4 <xTaskResumeAll+0x130>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d009      	beq.n	800e78c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e778:	2301      	movs	r3, #1
 800e77a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e77c:	4b0f      	ldr	r3, [pc, #60]	@ (800e7bc <xTaskResumeAll+0x138>)
 800e77e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e782:	601a      	str	r2, [r3, #0]
 800e784:	f3bf 8f4f 	dsb	sy
 800e788:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e78c:	f000 feae 	bl	800f4ec <vPortExitCritical>

	return xAlreadyYielded;
 800e790:	68bb      	ldr	r3, [r7, #8]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	200017a0 	.word	0x200017a0
 800e7a0:	20001778 	.word	0x20001778
 800e7a4:	20001738 	.word	0x20001738
 800e7a8:	20001780 	.word	0x20001780
 800e7ac:	2000167c 	.word	0x2000167c
 800e7b0:	20001678 	.word	0x20001678
 800e7b4:	2000178c 	.word	0x2000178c
 800e7b8:	20001788 	.word	0x20001788
 800e7bc:	e000ed04 	.word	0xe000ed04

0800e7c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b086      	sub	sp, #24
 800e7c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ca:	4b4f      	ldr	r3, [pc, #316]	@ (800e908 <xTaskIncrementTick+0x148>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f040 808f 	bne.w	800e8f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7d4:	4b4d      	ldr	r3, [pc, #308]	@ (800e90c <xTaskIncrementTick+0x14c>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e7dc:	4a4b      	ldr	r2, [pc, #300]	@ (800e90c <xTaskIncrementTick+0x14c>)
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d121      	bne.n	800e82c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e7e8:	4b49      	ldr	r3, [pc, #292]	@ (800e910 <xTaskIncrementTick+0x150>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00b      	beq.n	800e80a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	603b      	str	r3, [r7, #0]
}
 800e804:	bf00      	nop
 800e806:	bf00      	nop
 800e808:	e7fd      	b.n	800e806 <xTaskIncrementTick+0x46>
 800e80a:	4b41      	ldr	r3, [pc, #260]	@ (800e910 <xTaskIncrementTick+0x150>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	60fb      	str	r3, [r7, #12]
 800e810:	4b40      	ldr	r3, [pc, #256]	@ (800e914 <xTaskIncrementTick+0x154>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a3e      	ldr	r2, [pc, #248]	@ (800e910 <xTaskIncrementTick+0x150>)
 800e816:	6013      	str	r3, [r2, #0]
 800e818:	4a3e      	ldr	r2, [pc, #248]	@ (800e914 <xTaskIncrementTick+0x154>)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	4b3e      	ldr	r3, [pc, #248]	@ (800e918 <xTaskIncrementTick+0x158>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	3301      	adds	r3, #1
 800e824:	4a3c      	ldr	r2, [pc, #240]	@ (800e918 <xTaskIncrementTick+0x158>)
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	f000 fab4 	bl	800ed94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e82c:	4b3b      	ldr	r3, [pc, #236]	@ (800e91c <xTaskIncrementTick+0x15c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	429a      	cmp	r2, r3
 800e834:	d348      	bcc.n	800e8c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e836:	4b36      	ldr	r3, [pc, #216]	@ (800e910 <xTaskIncrementTick+0x150>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d104      	bne.n	800e84a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e840:	4b36      	ldr	r3, [pc, #216]	@ (800e91c <xTaskIncrementTick+0x15c>)
 800e842:	f04f 32ff 	mov.w	r2, #4294967295
 800e846:	601a      	str	r2, [r3, #0]
					break;
 800e848:	e03e      	b.n	800e8c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e84a:	4b31      	ldr	r3, [pc, #196]	@ (800e910 <xTaskIncrementTick+0x150>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e85a:	693a      	ldr	r2, [r7, #16]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d203      	bcs.n	800e86a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e862:	4a2e      	ldr	r2, [pc, #184]	@ (800e91c <xTaskIncrementTick+0x15c>)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e868:	e02e      	b.n	800e8c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	3304      	adds	r3, #4
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fe fef2 	bl	800d658 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d004      	beq.n	800e886 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	3318      	adds	r3, #24
 800e880:	4618      	mov	r0, r3
 800e882:	f7fe fee9 	bl	800d658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e88a:	2201      	movs	r2, #1
 800e88c:	409a      	lsls	r2, r3
 800e88e:	4b24      	ldr	r3, [pc, #144]	@ (800e920 <xTaskIncrementTick+0x160>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4313      	orrs	r3, r2
 800e894:	4a22      	ldr	r2, [pc, #136]	@ (800e920 <xTaskIncrementTick+0x160>)
 800e896:	6013      	str	r3, [r2, #0]
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e89c:	4613      	mov	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	4a1f      	ldr	r2, [pc, #124]	@ (800e924 <xTaskIncrementTick+0x164>)
 800e8a6:	441a      	add	r2, r3
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	4610      	mov	r0, r2
 800e8b0:	f7fe fe75 	bl	800d59e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8b8:	4b1b      	ldr	r3, [pc, #108]	@ (800e928 <xTaskIncrementTick+0x168>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d3b9      	bcc.n	800e836 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8c6:	e7b6      	b.n	800e836 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8c8:	4b17      	ldr	r3, [pc, #92]	@ (800e928 <xTaskIncrementTick+0x168>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ce:	4915      	ldr	r1, [pc, #84]	@ (800e924 <xTaskIncrementTick+0x164>)
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	4413      	add	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	440b      	add	r3, r1
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d901      	bls.n	800e8e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e8e4:	4b11      	ldr	r3, [pc, #68]	@ (800e92c <xTaskIncrementTick+0x16c>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d007      	beq.n	800e8fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	617b      	str	r3, [r7, #20]
 800e8f0:	e004      	b.n	800e8fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e8f2:	4b0f      	ldr	r3, [pc, #60]	@ (800e930 <xTaskIncrementTick+0x170>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	4a0d      	ldr	r2, [pc, #52]	@ (800e930 <xTaskIncrementTick+0x170>)
 800e8fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e8fc:	697b      	ldr	r3, [r7, #20]
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3718      	adds	r7, #24
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	200017a0 	.word	0x200017a0
 800e90c:	2000177c 	.word	0x2000177c
 800e910:	20001730 	.word	0x20001730
 800e914:	20001734 	.word	0x20001734
 800e918:	20001790 	.word	0x20001790
 800e91c:	20001798 	.word	0x20001798
 800e920:	20001780 	.word	0x20001780
 800e924:	2000167c 	.word	0x2000167c
 800e928:	20001678 	.word	0x20001678
 800e92c:	2000178c 	.word	0x2000178c
 800e930:	20001788 	.word	0x20001788

0800e934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e934:	b480      	push	{r7}
 800e936:	b087      	sub	sp, #28
 800e938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e93a:	4b2a      	ldr	r3, [pc, #168]	@ (800e9e4 <vTaskSwitchContext+0xb0>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d003      	beq.n	800e94a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e942:	4b29      	ldr	r3, [pc, #164]	@ (800e9e8 <vTaskSwitchContext+0xb4>)
 800e944:	2201      	movs	r2, #1
 800e946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e948:	e045      	b.n	800e9d6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e94a:	4b27      	ldr	r3, [pc, #156]	@ (800e9e8 <vTaskSwitchContext+0xb4>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e950:	4b26      	ldr	r3, [pc, #152]	@ (800e9ec <vTaskSwitchContext+0xb8>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	fab3 f383 	clz	r3, r3
 800e95c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e95e:	7afb      	ldrb	r3, [r7, #11]
 800e960:	f1c3 031f 	rsb	r3, r3, #31
 800e964:	617b      	str	r3, [r7, #20]
 800e966:	4922      	ldr	r1, [pc, #136]	@ (800e9f0 <vTaskSwitchContext+0xbc>)
 800e968:	697a      	ldr	r2, [r7, #20]
 800e96a:	4613      	mov	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	4413      	add	r3, r2
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	440b      	add	r3, r1
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10b      	bne.n	800e992 <vTaskSwitchContext+0x5e>
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	607b      	str	r3, [r7, #4]
}
 800e98c:	bf00      	nop
 800e98e:	bf00      	nop
 800e990:	e7fd      	b.n	800e98e <vTaskSwitchContext+0x5a>
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	4613      	mov	r3, r2
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	4413      	add	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4a14      	ldr	r2, [pc, #80]	@ (800e9f0 <vTaskSwitchContext+0xbc>)
 800e99e:	4413      	add	r3, r2
 800e9a0:	613b      	str	r3, [r7, #16]
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	685a      	ldr	r2, [r3, #4]
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	605a      	str	r2, [r3, #4]
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	3308      	adds	r3, #8
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d104      	bne.n	800e9c2 <vTaskSwitchContext+0x8e>
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	605a      	str	r2, [r3, #4]
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	4a0a      	ldr	r2, [pc, #40]	@ (800e9f4 <vTaskSwitchContext+0xc0>)
 800e9ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e9cc:	4b09      	ldr	r3, [pc, #36]	@ (800e9f4 <vTaskSwitchContext+0xc0>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	334c      	adds	r3, #76	@ 0x4c
 800e9d2:	4a09      	ldr	r2, [pc, #36]	@ (800e9f8 <vTaskSwitchContext+0xc4>)
 800e9d4:	6013      	str	r3, [r2, #0]
}
 800e9d6:	bf00      	nop
 800e9d8:	371c      	adds	r7, #28
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	200017a0 	.word	0x200017a0
 800e9e8:	2000178c 	.word	0x2000178c
 800e9ec:	20001780 	.word	0x20001780
 800e9f0:	2000167c 	.word	0x2000167c
 800e9f4:	20001678 	.word	0x20001678
 800e9f8:	200002d8 	.word	0x200002d8

0800e9fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10b      	bne.n	800ea24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ea0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	60fb      	str	r3, [r7, #12]
}
 800ea1e:	bf00      	nop
 800ea20:	bf00      	nop
 800ea22:	e7fd      	b.n	800ea20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea24:	4b07      	ldr	r3, [pc, #28]	@ (800ea44 <vTaskPlaceOnEventList+0x48>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	3318      	adds	r3, #24
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7fe fdda 	bl	800d5e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea32:	2101      	movs	r1, #1
 800ea34:	6838      	ldr	r0, [r7, #0]
 800ea36:	f000 fb8d 	bl	800f154 <prvAddCurrentTaskToDelayedList>
}
 800ea3a:	bf00      	nop
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20001678 	.word	0x20001678

0800ea48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d10b      	bne.n	800ea76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ea5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea62:	f383 8811 	msr	BASEPRI, r3
 800ea66:	f3bf 8f6f 	isb	sy
 800ea6a:	f3bf 8f4f 	dsb	sy
 800ea6e:	60fb      	str	r3, [r7, #12]
}
 800ea70:	bf00      	nop
 800ea72:	bf00      	nop
 800ea74:	e7fd      	b.n	800ea72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	3318      	adds	r3, #24
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7fe fdec 	bl	800d658 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea80:	4b1d      	ldr	r3, [pc, #116]	@ (800eaf8 <xTaskRemoveFromEventList+0xb0>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d11c      	bne.n	800eac2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fe fde3 	bl	800d658 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea96:	2201      	movs	r2, #1
 800ea98:	409a      	lsls	r2, r3
 800ea9a:	4b18      	ldr	r3, [pc, #96]	@ (800eafc <xTaskRemoveFromEventList+0xb4>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	4a16      	ldr	r2, [pc, #88]	@ (800eafc <xTaskRemoveFromEventList+0xb4>)
 800eaa2:	6013      	str	r3, [r2, #0]
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	009b      	lsls	r3, r3, #2
 800eaac:	4413      	add	r3, r2
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	4a13      	ldr	r2, [pc, #76]	@ (800eb00 <xTaskRemoveFromEventList+0xb8>)
 800eab2:	441a      	add	r2, r3
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	3304      	adds	r3, #4
 800eab8:	4619      	mov	r1, r3
 800eaba:	4610      	mov	r0, r2
 800eabc:	f7fe fd6f 	bl	800d59e <vListInsertEnd>
 800eac0:	e005      	b.n	800eace <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	3318      	adds	r3, #24
 800eac6:	4619      	mov	r1, r3
 800eac8:	480e      	ldr	r0, [pc, #56]	@ (800eb04 <xTaskRemoveFromEventList+0xbc>)
 800eaca:	f7fe fd68 	bl	800d59e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ead2:	4b0d      	ldr	r3, [pc, #52]	@ (800eb08 <xTaskRemoveFromEventList+0xc0>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead8:	429a      	cmp	r2, r3
 800eada:	d905      	bls.n	800eae8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eadc:	2301      	movs	r3, #1
 800eade:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eae0:	4b0a      	ldr	r3, [pc, #40]	@ (800eb0c <xTaskRemoveFromEventList+0xc4>)
 800eae2:	2201      	movs	r2, #1
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	e001      	b.n	800eaec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eae8:	2300      	movs	r3, #0
 800eaea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eaec:	697b      	ldr	r3, [r7, #20]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3718      	adds	r7, #24
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	200017a0 	.word	0x200017a0
 800eafc:	20001780 	.word	0x20001780
 800eb00:	2000167c 	.word	0x2000167c
 800eb04:	20001738 	.word	0x20001738
 800eb08:	20001678 	.word	0x20001678
 800eb0c:	2000178c 	.word	0x2000178c

0800eb10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb18:	4b06      	ldr	r3, [pc, #24]	@ (800eb34 <vTaskInternalSetTimeOutState+0x24>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb20:	4b05      	ldr	r3, [pc, #20]	@ (800eb38 <vTaskInternalSetTimeOutState+0x28>)
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	605a      	str	r2, [r3, #4]
}
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	20001790 	.word	0x20001790
 800eb38:	2000177c 	.word	0x2000177c

0800eb3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b088      	sub	sp, #32
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10b      	bne.n	800eb64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800eb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	613b      	str	r3, [r7, #16]
}
 800eb5e:	bf00      	nop
 800eb60:	bf00      	nop
 800eb62:	e7fd      	b.n	800eb60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d10b      	bne.n	800eb82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800eb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	60fb      	str	r3, [r7, #12]
}
 800eb7c:	bf00      	nop
 800eb7e:	bf00      	nop
 800eb80:	e7fd      	b.n	800eb7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eb82:	f000 fc81 	bl	800f488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb86:	4b1d      	ldr	r3, [pc, #116]	@ (800ebfc <xTaskCheckForTimeOut+0xc0>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb9e:	d102      	bne.n	800eba6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eba0:	2300      	movs	r3, #0
 800eba2:	61fb      	str	r3, [r7, #28]
 800eba4:	e023      	b.n	800ebee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	4b15      	ldr	r3, [pc, #84]	@ (800ec00 <xTaskCheckForTimeOut+0xc4>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d007      	beq.n	800ebc2 <xTaskCheckForTimeOut+0x86>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	69ba      	ldr	r2, [r7, #24]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d302      	bcc.n	800ebc2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	61fb      	str	r3, [r7, #28]
 800ebc0:	e015      	b.n	800ebee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d20b      	bcs.n	800ebe4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	1ad2      	subs	r2, r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7ff ff99 	bl	800eb10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	61fb      	str	r3, [r7, #28]
 800ebe2:	e004      	b.n	800ebee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ebea:	2301      	movs	r3, #1
 800ebec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ebee:	f000 fc7d 	bl	800f4ec <vPortExitCritical>

	return xReturn;
 800ebf2:	69fb      	ldr	r3, [r7, #28]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3720      	adds	r7, #32
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	2000177c 	.word	0x2000177c
 800ec00:	20001790 	.word	0x20001790

0800ec04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec04:	b480      	push	{r7}
 800ec06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec08:	4b03      	ldr	r3, [pc, #12]	@ (800ec18 <vTaskMissedYield+0x14>)
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	601a      	str	r2, [r3, #0]
}
 800ec0e:	bf00      	nop
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	2000178c 	.word	0x2000178c

0800ec1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec24:	f000 f852 	bl	800eccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec28:	4b06      	ldr	r3, [pc, #24]	@ (800ec44 <prvIdleTask+0x28>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d9f9      	bls.n	800ec24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ec30:	4b05      	ldr	r3, [pc, #20]	@ (800ec48 <prvIdleTask+0x2c>)
 800ec32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec36:	601a      	str	r2, [r3, #0]
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ec40:	e7f0      	b.n	800ec24 <prvIdleTask+0x8>
 800ec42:	bf00      	nop
 800ec44:	2000167c 	.word	0x2000167c
 800ec48:	e000ed04 	.word	0xe000ed04

0800ec4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec52:	2300      	movs	r3, #0
 800ec54:	607b      	str	r3, [r7, #4]
 800ec56:	e00c      	b.n	800ec72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4413      	add	r3, r2
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	4a12      	ldr	r2, [pc, #72]	@ (800ecac <prvInitialiseTaskLists+0x60>)
 800ec64:	4413      	add	r3, r2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fe fc6c 	bl	800d544 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	607b      	str	r3, [r7, #4]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b06      	cmp	r3, #6
 800ec76:	d9ef      	bls.n	800ec58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec78:	480d      	ldr	r0, [pc, #52]	@ (800ecb0 <prvInitialiseTaskLists+0x64>)
 800ec7a:	f7fe fc63 	bl	800d544 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec7e:	480d      	ldr	r0, [pc, #52]	@ (800ecb4 <prvInitialiseTaskLists+0x68>)
 800ec80:	f7fe fc60 	bl	800d544 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec84:	480c      	ldr	r0, [pc, #48]	@ (800ecb8 <prvInitialiseTaskLists+0x6c>)
 800ec86:	f7fe fc5d 	bl	800d544 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec8a:	480c      	ldr	r0, [pc, #48]	@ (800ecbc <prvInitialiseTaskLists+0x70>)
 800ec8c:	f7fe fc5a 	bl	800d544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec90:	480b      	ldr	r0, [pc, #44]	@ (800ecc0 <prvInitialiseTaskLists+0x74>)
 800ec92:	f7fe fc57 	bl	800d544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec96:	4b0b      	ldr	r3, [pc, #44]	@ (800ecc4 <prvInitialiseTaskLists+0x78>)
 800ec98:	4a05      	ldr	r2, [pc, #20]	@ (800ecb0 <prvInitialiseTaskLists+0x64>)
 800ec9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc8 <prvInitialiseTaskLists+0x7c>)
 800ec9e:	4a05      	ldr	r2, [pc, #20]	@ (800ecb4 <prvInitialiseTaskLists+0x68>)
 800eca0:	601a      	str	r2, [r3, #0]
}
 800eca2:	bf00      	nop
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	2000167c 	.word	0x2000167c
 800ecb0:	20001708 	.word	0x20001708
 800ecb4:	2000171c 	.word	0x2000171c
 800ecb8:	20001738 	.word	0x20001738
 800ecbc:	2000174c 	.word	0x2000174c
 800ecc0:	20001764 	.word	0x20001764
 800ecc4:	20001730 	.word	0x20001730
 800ecc8:	20001734 	.word	0x20001734

0800eccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecd2:	e019      	b.n	800ed08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ecd4:	f000 fbd8 	bl	800f488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecd8:	4b10      	ldr	r3, [pc, #64]	@ (800ed1c <prvCheckTasksWaitingTermination+0x50>)
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	3304      	adds	r3, #4
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe fcb7 	bl	800d658 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ecea:	4b0d      	ldr	r3, [pc, #52]	@ (800ed20 <prvCheckTasksWaitingTermination+0x54>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	4a0b      	ldr	r2, [pc, #44]	@ (800ed20 <prvCheckTasksWaitingTermination+0x54>)
 800ecf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ed24 <prvCheckTasksWaitingTermination+0x58>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	4a0a      	ldr	r2, [pc, #40]	@ (800ed24 <prvCheckTasksWaitingTermination+0x58>)
 800ecfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecfe:	f000 fbf5 	bl	800f4ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f810 	bl	800ed28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed08:	4b06      	ldr	r3, [pc, #24]	@ (800ed24 <prvCheckTasksWaitingTermination+0x58>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d1e1      	bne.n	800ecd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed10:	bf00      	nop
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	2000174c 	.word	0x2000174c
 800ed20:	20001778 	.word	0x20001778
 800ed24:	20001760 	.word	0x20001760

0800ed28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	334c      	adds	r3, #76	@ 0x4c
 800ed34:	4618      	mov	r0, r3
 800ed36:	f000 ffcf 	bl	800fcd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d108      	bne.n	800ed56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f000 fd8d 	bl	800f868 <vPortFree>
				vPortFree( pxTCB );
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fd8a 	bl	800f868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed54:	e019      	b.n	800ed8a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d103      	bne.n	800ed68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 fd81 	bl	800f868 <vPortFree>
	}
 800ed66:	e010      	b.n	800ed8a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d00b      	beq.n	800ed8a <prvDeleteTCB+0x62>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	60fb      	str	r3, [r7, #12]
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
 800ed88:	e7fd      	b.n	800ed86 <prvDeleteTCB+0x5e>
	}
 800ed8a:	bf00      	nop
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
	...

0800ed94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed9a:	4b0c      	ldr	r3, [pc, #48]	@ (800edcc <prvResetNextTaskUnblockTime+0x38>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d104      	bne.n	800edae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eda4:	4b0a      	ldr	r3, [pc, #40]	@ (800edd0 <prvResetNextTaskUnblockTime+0x3c>)
 800eda6:	f04f 32ff 	mov.w	r2, #4294967295
 800edaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800edac:	e008      	b.n	800edc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edae:	4b07      	ldr	r3, [pc, #28]	@ (800edcc <prvResetNextTaskUnblockTime+0x38>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	4a04      	ldr	r2, [pc, #16]	@ (800edd0 <prvResetNextTaskUnblockTime+0x3c>)
 800edbe:	6013      	str	r3, [r2, #0]
}
 800edc0:	bf00      	nop
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	20001730 	.word	0x20001730
 800edd0:	20001798 	.word	0x20001798

0800edd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800edda:	4b0b      	ldr	r3, [pc, #44]	@ (800ee08 <xTaskGetSchedulerState+0x34>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d102      	bne.n	800ede8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ede2:	2301      	movs	r3, #1
 800ede4:	607b      	str	r3, [r7, #4]
 800ede6:	e008      	b.n	800edfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ede8:	4b08      	ldr	r3, [pc, #32]	@ (800ee0c <xTaskGetSchedulerState+0x38>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d102      	bne.n	800edf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800edf0:	2302      	movs	r3, #2
 800edf2:	607b      	str	r3, [r7, #4]
 800edf4:	e001      	b.n	800edfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edf6:	2300      	movs	r3, #0
 800edf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edfa:	687b      	ldr	r3, [r7, #4]
	}
 800edfc:	4618      	mov	r0, r3
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr
 800ee08:	20001784 	.word	0x20001784
 800ee0c:	200017a0 	.word	0x200017a0

0800ee10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d05e      	beq.n	800eee4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee2a:	4b31      	ldr	r3, [pc, #196]	@ (800eef0 <xTaskPriorityInherit+0xe0>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d24e      	bcs.n	800eed2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	db06      	blt.n	800ee4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee3c:	4b2c      	ldr	r3, [pc, #176]	@ (800eef0 <xTaskPriorityInherit+0xe0>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee42:	f1c3 0207 	rsb	r2, r3, #7
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	6959      	ldr	r1, [r3, #20]
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee52:	4613      	mov	r3, r2
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	4413      	add	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4a26      	ldr	r2, [pc, #152]	@ (800eef4 <xTaskPriorityInherit+0xe4>)
 800ee5c:	4413      	add	r3, r2
 800ee5e:	4299      	cmp	r1, r3
 800ee60:	d12f      	bne.n	800eec2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	3304      	adds	r3, #4
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fe fbf6 	bl	800d658 <uxListRemove>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10a      	bne.n	800ee88 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee76:	2201      	movs	r2, #1
 800ee78:	fa02 f303 	lsl.w	r3, r2, r3
 800ee7c:	43da      	mvns	r2, r3
 800ee7e:	4b1e      	ldr	r3, [pc, #120]	@ (800eef8 <xTaskPriorityInherit+0xe8>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	4013      	ands	r3, r2
 800ee84:	4a1c      	ldr	r2, [pc, #112]	@ (800eef8 <xTaskPriorityInherit+0xe8>)
 800ee86:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee88:	4b19      	ldr	r3, [pc, #100]	@ (800eef0 <xTaskPriorityInherit+0xe0>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee96:	2201      	movs	r2, #1
 800ee98:	409a      	lsls	r2, r3
 800ee9a:	4b17      	ldr	r3, [pc, #92]	@ (800eef8 <xTaskPriorityInherit+0xe8>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	4a15      	ldr	r2, [pc, #84]	@ (800eef8 <xTaskPriorityInherit+0xe8>)
 800eea2:	6013      	str	r3, [r2, #0]
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eea8:	4613      	mov	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4a10      	ldr	r2, [pc, #64]	@ (800eef4 <xTaskPriorityInherit+0xe4>)
 800eeb2:	441a      	add	r2, r3
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	4619      	mov	r1, r3
 800eeba:	4610      	mov	r0, r2
 800eebc:	f7fe fb6f 	bl	800d59e <vListInsertEnd>
 800eec0:	e004      	b.n	800eecc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eec2:	4b0b      	ldr	r3, [pc, #44]	@ (800eef0 <xTaskPriorityInherit+0xe0>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eecc:	2301      	movs	r3, #1
 800eece:	60fb      	str	r3, [r7, #12]
 800eed0:	e008      	b.n	800eee4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eed6:	4b06      	ldr	r3, [pc, #24]	@ (800eef0 <xTaskPriorityInherit+0xe0>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eedc:	429a      	cmp	r2, r3
 800eede:	d201      	bcs.n	800eee4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eee0:	2301      	movs	r3, #1
 800eee2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eee4:	68fb      	ldr	r3, [r7, #12]
	}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	20001678 	.word	0x20001678
 800eef4:	2000167c 	.word	0x2000167c
 800eef8:	20001780 	.word	0x20001780

0800eefc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d070      	beq.n	800eff4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef12:	4b3b      	ldr	r3, [pc, #236]	@ (800f000 <xTaskPriorityDisinherit+0x104>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	693a      	ldr	r2, [r7, #16]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d00b      	beq.n	800ef34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ef1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef20:	f383 8811 	msr	BASEPRI, r3
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	60fb      	str	r3, [r7, #12]
}
 800ef2e:	bf00      	nop
 800ef30:	bf00      	nop
 800ef32:	e7fd      	b.n	800ef30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10b      	bne.n	800ef54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ef3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	60bb      	str	r3, [r7, #8]
}
 800ef4e:	bf00      	nop
 800ef50:	bf00      	nop
 800ef52:	e7fd      	b.n	800ef50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef58:	1e5a      	subs	r2, r3, #1
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d044      	beq.n	800eff4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d140      	bne.n	800eff4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	3304      	adds	r3, #4
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe fb6e 	bl	800d658 <uxListRemove>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d115      	bne.n	800efae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef86:	491f      	ldr	r1, [pc, #124]	@ (800f004 <xTaskPriorityDisinherit+0x108>)
 800ef88:	4613      	mov	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4413      	add	r3, r2
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	440b      	add	r3, r1
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10a      	bne.n	800efae <xTaskPriorityDisinherit+0xb2>
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	fa02 f303 	lsl.w	r3, r2, r3
 800efa2:	43da      	mvns	r2, r3
 800efa4:	4b18      	ldr	r3, [pc, #96]	@ (800f008 <xTaskPriorityDisinherit+0x10c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4013      	ands	r3, r2
 800efaa:	4a17      	ldr	r2, [pc, #92]	@ (800f008 <xTaskPriorityDisinherit+0x10c>)
 800efac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efba:	f1c3 0207 	rsb	r2, r3, #7
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efc6:	2201      	movs	r2, #1
 800efc8:	409a      	lsls	r2, r3
 800efca:	4b0f      	ldr	r3, [pc, #60]	@ (800f008 <xTaskPriorityDisinherit+0x10c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	4313      	orrs	r3, r2
 800efd0:	4a0d      	ldr	r2, [pc, #52]	@ (800f008 <xTaskPriorityDisinherit+0x10c>)
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd8:	4613      	mov	r3, r2
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	4a08      	ldr	r2, [pc, #32]	@ (800f004 <xTaskPriorityDisinherit+0x108>)
 800efe2:	441a      	add	r2, r3
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	3304      	adds	r3, #4
 800efe8:	4619      	mov	r1, r3
 800efea:	4610      	mov	r0, r2
 800efec:	f7fe fad7 	bl	800d59e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eff0:	2301      	movs	r3, #1
 800eff2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eff4:	697b      	ldr	r3, [r7, #20]
	}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	20001678 	.word	0x20001678
 800f004:	2000167c 	.word	0x2000167c
 800f008:	20001780 	.word	0x20001780

0800f00c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b088      	sub	sp, #32
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f01a:	2301      	movs	r3, #1
 800f01c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d079      	beq.n	800f118 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10b      	bne.n	800f044 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f030:	f383 8811 	msr	BASEPRI, r3
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	60fb      	str	r3, [r7, #12]
}
 800f03e:	bf00      	nop
 800f040:	bf00      	nop
 800f042:	e7fd      	b.n	800f040 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f048:	683a      	ldr	r2, [r7, #0]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d902      	bls.n	800f054 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	61fb      	str	r3, [r7, #28]
 800f052:	e002      	b.n	800f05a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f058:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f05e:	69fa      	ldr	r2, [r7, #28]
 800f060:	429a      	cmp	r2, r3
 800f062:	d059      	beq.n	800f118 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f068:	697a      	ldr	r2, [r7, #20]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d154      	bne.n	800f118 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f06e:	4b2c      	ldr	r3, [pc, #176]	@ (800f120 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	69ba      	ldr	r2, [r7, #24]
 800f074:	429a      	cmp	r2, r3
 800f076:	d10b      	bne.n	800f090 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f07c:	f383 8811 	msr	BASEPRI, r3
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	60bb      	str	r3, [r7, #8]
}
 800f08a:	bf00      	nop
 800f08c:	bf00      	nop
 800f08e:	e7fd      	b.n	800f08c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f094:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	69fa      	ldr	r2, [r7, #28]
 800f09a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	699b      	ldr	r3, [r3, #24]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	db04      	blt.n	800f0ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	f1c3 0207 	rsb	r2, r3, #7
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	6959      	ldr	r1, [r3, #20]
 800f0b2:	693a      	ldr	r2, [r7, #16]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4413      	add	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4a19      	ldr	r2, [pc, #100]	@ (800f124 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f0be:	4413      	add	r3, r2
 800f0c0:	4299      	cmp	r1, r3
 800f0c2:	d129      	bne.n	800f118 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	3304      	adds	r3, #4
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fe fac5 	bl	800d658 <uxListRemove>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10a      	bne.n	800f0ea <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0d8:	2201      	movs	r2, #1
 800f0da:	fa02 f303 	lsl.w	r3, r2, r3
 800f0de:	43da      	mvns	r2, r3
 800f0e0:	4b11      	ldr	r3, [pc, #68]	@ (800f128 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4013      	ands	r3, r2
 800f0e6:	4a10      	ldr	r2, [pc, #64]	@ (800f128 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f0e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	409a      	lsls	r2, r3
 800f0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f128 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	4a0b      	ldr	r2, [pc, #44]	@ (800f128 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f0fa:	6013      	str	r3, [r2, #0]
 800f0fc:	69bb      	ldr	r3, [r7, #24]
 800f0fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f100:	4613      	mov	r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	4413      	add	r3, r2
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	4a06      	ldr	r2, [pc, #24]	@ (800f124 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f10a:	441a      	add	r2, r3
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	3304      	adds	r3, #4
 800f110:	4619      	mov	r1, r3
 800f112:	4610      	mov	r0, r2
 800f114:	f7fe fa43 	bl	800d59e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f118:	bf00      	nop
 800f11a:	3720      	adds	r7, #32
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	20001678 	.word	0x20001678
 800f124:	2000167c 	.word	0x2000167c
 800f128:	20001780 	.word	0x20001780

0800f12c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f12c:	b480      	push	{r7}
 800f12e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f130:	4b07      	ldr	r3, [pc, #28]	@ (800f150 <pvTaskIncrementMutexHeldCount+0x24>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d004      	beq.n	800f142 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f138:	4b05      	ldr	r3, [pc, #20]	@ (800f150 <pvTaskIncrementMutexHeldCount+0x24>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f13e:	3201      	adds	r2, #1
 800f140:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f142:	4b03      	ldr	r3, [pc, #12]	@ (800f150 <pvTaskIncrementMutexHeldCount+0x24>)
 800f144:	681b      	ldr	r3, [r3, #0]
	}
 800f146:	4618      	mov	r0, r3
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	20001678 	.word	0x20001678

0800f154 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f15e:	4b29      	ldr	r3, [pc, #164]	@ (800f204 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f164:	4b28      	ldr	r3, [pc, #160]	@ (800f208 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	3304      	adds	r3, #4
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fe fa74 	bl	800d658 <uxListRemove>
 800f170:	4603      	mov	r3, r0
 800f172:	2b00      	cmp	r3, #0
 800f174:	d10b      	bne.n	800f18e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f176:	4b24      	ldr	r3, [pc, #144]	@ (800f208 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f17c:	2201      	movs	r2, #1
 800f17e:	fa02 f303 	lsl.w	r3, r2, r3
 800f182:	43da      	mvns	r2, r3
 800f184:	4b21      	ldr	r3, [pc, #132]	@ (800f20c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4013      	ands	r3, r2
 800f18a:	4a20      	ldr	r2, [pc, #128]	@ (800f20c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f18c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f194:	d10a      	bne.n	800f1ac <prvAddCurrentTaskToDelayedList+0x58>
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d007      	beq.n	800f1ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f19c:	4b1a      	ldr	r3, [pc, #104]	@ (800f208 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	3304      	adds	r3, #4
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	481a      	ldr	r0, [pc, #104]	@ (800f210 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f1a6:	f7fe f9fa 	bl	800d59e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1aa:	e026      	b.n	800f1fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1ac:	68fa      	ldr	r2, [r7, #12]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1b4:	4b14      	ldr	r3, [pc, #80]	@ (800f208 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d209      	bcs.n	800f1d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1c4:	4b13      	ldr	r3, [pc, #76]	@ (800f214 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	4b0f      	ldr	r3, [pc, #60]	@ (800f208 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	3304      	adds	r3, #4
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	4610      	mov	r0, r2
 800f1d2:	f7fe fa08 	bl	800d5e6 <vListInsert>
}
 800f1d6:	e010      	b.n	800f1fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1d8:	4b0f      	ldr	r3, [pc, #60]	@ (800f218 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f208 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	3304      	adds	r3, #4
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	f7fe f9fe 	bl	800d5e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800f21c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d202      	bcs.n	800f1fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f1f4:	4a09      	ldr	r2, [pc, #36]	@ (800f21c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	6013      	str	r3, [r2, #0]
}
 800f1fa:	bf00      	nop
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	2000177c 	.word	0x2000177c
 800f208:	20001678 	.word	0x20001678
 800f20c:	20001780 	.word	0x20001780
 800f210:	20001764 	.word	0x20001764
 800f214:	20001734 	.word	0x20001734
 800f218:	20001730 	.word	0x20001730
 800f21c:	20001798 	.word	0x20001798

0800f220 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f220:	b480      	push	{r7}
 800f222:	b085      	sub	sp, #20
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3b04      	subs	r3, #4
 800f230:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	3b04      	subs	r3, #4
 800f23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	f023 0201 	bic.w	r2, r3, #1
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	3b04      	subs	r3, #4
 800f24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f250:	4a0c      	ldr	r2, [pc, #48]	@ (800f284 <pxPortInitialiseStack+0x64>)
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	3b14      	subs	r3, #20
 800f25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	3b04      	subs	r3, #4
 800f266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f06f 0202 	mvn.w	r2, #2
 800f26e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	3b20      	subs	r3, #32
 800f274:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f276:	68fb      	ldr	r3, [r7, #12]
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3714      	adds	r7, #20
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr
 800f284:	0800f289 	.word	0x0800f289

0800f288 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f28e:	2300      	movs	r3, #0
 800f290:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f292:	4b13      	ldr	r3, [pc, #76]	@ (800f2e0 <prvTaskExitError+0x58>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	d00b      	beq.n	800f2b4 <prvTaskExitError+0x2c>
	__asm volatile
 800f29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	60fb      	str	r3, [r7, #12]
}
 800f2ae:	bf00      	nop
 800f2b0:	bf00      	nop
 800f2b2:	e7fd      	b.n	800f2b0 <prvTaskExitError+0x28>
	__asm volatile
 800f2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	60bb      	str	r3, [r7, #8]
}
 800f2c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f2c8:	bf00      	nop
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d0fc      	beq.n	800f2ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f2d0:	bf00      	nop
 800f2d2:	bf00      	nop
 800f2d4:	3714      	adds	r7, #20
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	200002d4 	.word	0x200002d4
	...

0800f2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f2f0:	4b07      	ldr	r3, [pc, #28]	@ (800f310 <pxCurrentTCBConst2>)
 800f2f2:	6819      	ldr	r1, [r3, #0]
 800f2f4:	6808      	ldr	r0, [r1, #0]
 800f2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2fa:	f380 8809 	msr	PSP, r0
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f04f 0000 	mov.w	r0, #0
 800f306:	f380 8811 	msr	BASEPRI, r0
 800f30a:	4770      	bx	lr
 800f30c:	f3af 8000 	nop.w

0800f310 <pxCurrentTCBConst2>:
 800f310:	20001678 	.word	0x20001678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f314:	bf00      	nop
 800f316:	bf00      	nop

0800f318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f318:	4808      	ldr	r0, [pc, #32]	@ (800f33c <prvPortStartFirstTask+0x24>)
 800f31a:	6800      	ldr	r0, [r0, #0]
 800f31c:	6800      	ldr	r0, [r0, #0]
 800f31e:	f380 8808 	msr	MSP, r0
 800f322:	f04f 0000 	mov.w	r0, #0
 800f326:	f380 8814 	msr	CONTROL, r0
 800f32a:	b662      	cpsie	i
 800f32c:	b661      	cpsie	f
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	df00      	svc	0
 800f338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f33a:	bf00      	nop
 800f33c:	e000ed08 	.word	0xe000ed08

0800f340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f346:	4b47      	ldr	r3, [pc, #284]	@ (800f464 <xPortStartScheduler+0x124>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a47      	ldr	r2, [pc, #284]	@ (800f468 <xPortStartScheduler+0x128>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d10b      	bne.n	800f368 <xPortStartScheduler+0x28>
	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	613b      	str	r3, [r7, #16]
}
 800f362:	bf00      	nop
 800f364:	bf00      	nop
 800f366:	e7fd      	b.n	800f364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f368:	4b3e      	ldr	r3, [pc, #248]	@ (800f464 <xPortStartScheduler+0x124>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a3f      	ldr	r2, [pc, #252]	@ (800f46c <xPortStartScheduler+0x12c>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d10b      	bne.n	800f38a <xPortStartScheduler+0x4a>
	__asm volatile
 800f372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f376:	f383 8811 	msr	BASEPRI, r3
 800f37a:	f3bf 8f6f 	isb	sy
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	60fb      	str	r3, [r7, #12]
}
 800f384:	bf00      	nop
 800f386:	bf00      	nop
 800f388:	e7fd      	b.n	800f386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f38a:	4b39      	ldr	r3, [pc, #228]	@ (800f470 <xPortStartScheduler+0x130>)
 800f38c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	b2db      	uxtb	r3, r3
 800f394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	22ff      	movs	r2, #255	@ 0xff
 800f39a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f3a4:	78fb      	ldrb	r3, [r7, #3]
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	4b31      	ldr	r3, [pc, #196]	@ (800f474 <xPortStartScheduler+0x134>)
 800f3b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f3b2:	4b31      	ldr	r3, [pc, #196]	@ (800f478 <xPortStartScheduler+0x138>)
 800f3b4:	2207      	movs	r2, #7
 800f3b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3b8:	e009      	b.n	800f3ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800f478 <xPortStartScheduler+0x138>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	4a2d      	ldr	r2, [pc, #180]	@ (800f478 <xPortStartScheduler+0x138>)
 800f3c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f3c4:	78fb      	ldrb	r3, [r7, #3]
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	005b      	lsls	r3, r3, #1
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3ce:	78fb      	ldrb	r3, [r7, #3]
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3d6:	2b80      	cmp	r3, #128	@ 0x80
 800f3d8:	d0ef      	beq.n	800f3ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f3da:	4b27      	ldr	r3, [pc, #156]	@ (800f478 <xPortStartScheduler+0x138>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f1c3 0307 	rsb	r3, r3, #7
 800f3e2:	2b04      	cmp	r3, #4
 800f3e4:	d00b      	beq.n	800f3fe <xPortStartScheduler+0xbe>
	__asm volatile
 800f3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ea:	f383 8811 	msr	BASEPRI, r3
 800f3ee:	f3bf 8f6f 	isb	sy
 800f3f2:	f3bf 8f4f 	dsb	sy
 800f3f6:	60bb      	str	r3, [r7, #8]
}
 800f3f8:	bf00      	nop
 800f3fa:	bf00      	nop
 800f3fc:	e7fd      	b.n	800f3fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800f478 <xPortStartScheduler+0x138>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	021b      	lsls	r3, r3, #8
 800f404:	4a1c      	ldr	r2, [pc, #112]	@ (800f478 <xPortStartScheduler+0x138>)
 800f406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f408:	4b1b      	ldr	r3, [pc, #108]	@ (800f478 <xPortStartScheduler+0x138>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f410:	4a19      	ldr	r2, [pc, #100]	@ (800f478 <xPortStartScheduler+0x138>)
 800f412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	b2da      	uxtb	r2, r3
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f41c:	4b17      	ldr	r3, [pc, #92]	@ (800f47c <xPortStartScheduler+0x13c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a16      	ldr	r2, [pc, #88]	@ (800f47c <xPortStartScheduler+0x13c>)
 800f422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f428:	4b14      	ldr	r3, [pc, #80]	@ (800f47c <xPortStartScheduler+0x13c>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4a13      	ldr	r2, [pc, #76]	@ (800f47c <xPortStartScheduler+0x13c>)
 800f42e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f434:	f000 f8da 	bl	800f5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f438:	4b11      	ldr	r3, [pc, #68]	@ (800f480 <xPortStartScheduler+0x140>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f43e:	f000 f8f9 	bl	800f634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f442:	4b10      	ldr	r3, [pc, #64]	@ (800f484 <xPortStartScheduler+0x144>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4a0f      	ldr	r2, [pc, #60]	@ (800f484 <xPortStartScheduler+0x144>)
 800f448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f44c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f44e:	f7ff ff63 	bl	800f318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f452:	f7ff fa6f 	bl	800e934 <vTaskSwitchContext>
	prvTaskExitError();
 800f456:	f7ff ff17 	bl	800f288 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f45a:	2300      	movs	r3, #0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3718      	adds	r7, #24
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	e000ed00 	.word	0xe000ed00
 800f468:	410fc271 	.word	0x410fc271
 800f46c:	410fc270 	.word	0x410fc270
 800f470:	e000e400 	.word	0xe000e400
 800f474:	200017a4 	.word	0x200017a4
 800f478:	200017a8 	.word	0x200017a8
 800f47c:	e000ed20 	.word	0xe000ed20
 800f480:	200002d4 	.word	0x200002d4
 800f484:	e000ef34 	.word	0xe000ef34

0800f488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	607b      	str	r3, [r7, #4]
}
 800f4a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f4a2:	4b10      	ldr	r3, [pc, #64]	@ (800f4e4 <vPortEnterCritical+0x5c>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	4a0e      	ldr	r2, [pc, #56]	@ (800f4e4 <vPortEnterCritical+0x5c>)
 800f4aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800f4e4 <vPortEnterCritical+0x5c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d110      	bne.n	800f4d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800f4e8 <vPortEnterCritical+0x60>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00b      	beq.n	800f4d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	603b      	str	r3, [r7, #0]
}
 800f4d0:	bf00      	nop
 800f4d2:	bf00      	nop
 800f4d4:	e7fd      	b.n	800f4d2 <vPortEnterCritical+0x4a>
	}
}
 800f4d6:	bf00      	nop
 800f4d8:	370c      	adds	r7, #12
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	200002d4 	.word	0x200002d4
 800f4e8:	e000ed04 	.word	0xe000ed04

0800f4ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f4f2:	4b12      	ldr	r3, [pc, #72]	@ (800f53c <vPortExitCritical+0x50>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d10b      	bne.n	800f512 <vPortExitCritical+0x26>
	__asm volatile
 800f4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	607b      	str	r3, [r7, #4]
}
 800f50c:	bf00      	nop
 800f50e:	bf00      	nop
 800f510:	e7fd      	b.n	800f50e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f512:	4b0a      	ldr	r3, [pc, #40]	@ (800f53c <vPortExitCritical+0x50>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	3b01      	subs	r3, #1
 800f518:	4a08      	ldr	r2, [pc, #32]	@ (800f53c <vPortExitCritical+0x50>)
 800f51a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f51c:	4b07      	ldr	r3, [pc, #28]	@ (800f53c <vPortExitCritical+0x50>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d105      	bne.n	800f530 <vPortExitCritical+0x44>
 800f524:	2300      	movs	r3, #0
 800f526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	f383 8811 	msr	BASEPRI, r3
}
 800f52e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f530:	bf00      	nop
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr
 800f53c:	200002d4 	.word	0x200002d4

0800f540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f540:	f3ef 8009 	mrs	r0, PSP
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	4b15      	ldr	r3, [pc, #84]	@ (800f5a0 <pxCurrentTCBConst>)
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	f01e 0f10 	tst.w	lr, #16
 800f550:	bf08      	it	eq
 800f552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55a:	6010      	str	r0, [r2, #0]
 800f55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f564:	f380 8811 	msr	BASEPRI, r0
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f7ff f9e0 	bl	800e934 <vTaskSwitchContext>
 800f574:	f04f 0000 	mov.w	r0, #0
 800f578:	f380 8811 	msr	BASEPRI, r0
 800f57c:	bc09      	pop	{r0, r3}
 800f57e:	6819      	ldr	r1, [r3, #0]
 800f580:	6808      	ldr	r0, [r1, #0]
 800f582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f586:	f01e 0f10 	tst.w	lr, #16
 800f58a:	bf08      	it	eq
 800f58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f590:	f380 8809 	msr	PSP, r0
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop
 800f59c:	f3af 8000 	nop.w

0800f5a0 <pxCurrentTCBConst>:
 800f5a0:	20001678 	.word	0x20001678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f5a4:	bf00      	nop
 800f5a6:	bf00      	nop

0800f5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800f5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	607b      	str	r3, [r7, #4]
}
 800f5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f5c2:	f7ff f8fd 	bl	800e7c0 <xTaskIncrementTick>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d003      	beq.n	800f5d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5cc:	4b06      	ldr	r3, [pc, #24]	@ (800f5e8 <SysTick_Handler+0x40>)
 800f5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5d2:	601a      	str	r2, [r3, #0]
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	f383 8811 	msr	BASEPRI, r3
}
 800f5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f5e0:	bf00      	nop
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	e000ed04 	.word	0xe000ed04

0800f5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f5f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f620 <vPortSetupTimerInterrupt+0x34>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f624 <vPortSetupTimerInterrupt+0x38>)
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f628 <vPortSetupTimerInterrupt+0x3c>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a0a      	ldr	r2, [pc, #40]	@ (800f62c <vPortSetupTimerInterrupt+0x40>)
 800f602:	fba2 2303 	umull	r2, r3, r2, r3
 800f606:	099b      	lsrs	r3, r3, #6
 800f608:	4a09      	ldr	r2, [pc, #36]	@ (800f630 <vPortSetupTimerInterrupt+0x44>)
 800f60a:	3b01      	subs	r3, #1
 800f60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f60e:	4b04      	ldr	r3, [pc, #16]	@ (800f620 <vPortSetupTimerInterrupt+0x34>)
 800f610:	2207      	movs	r2, #7
 800f612:	601a      	str	r2, [r3, #0]
}
 800f614:	bf00      	nop
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	e000e010 	.word	0xe000e010
 800f624:	e000e018 	.word	0xe000e018
 800f628:	20000008 	.word	0x20000008
 800f62c:	10624dd3 	.word	0x10624dd3
 800f630:	e000e014 	.word	0xe000e014

0800f634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f644 <vPortEnableVFP+0x10>
 800f638:	6801      	ldr	r1, [r0, #0]
 800f63a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f63e:	6001      	str	r1, [r0, #0]
 800f640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f642:	bf00      	nop
 800f644:	e000ed88 	.word	0xe000ed88

0800f648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f64e:	f3ef 8305 	mrs	r3, IPSR
 800f652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2b0f      	cmp	r3, #15
 800f658:	d915      	bls.n	800f686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f65a:	4a18      	ldr	r2, [pc, #96]	@ (800f6bc <vPortValidateInterruptPriority+0x74>)
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	4413      	add	r3, r2
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f664:	4b16      	ldr	r3, [pc, #88]	@ (800f6c0 <vPortValidateInterruptPriority+0x78>)
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	7afa      	ldrb	r2, [r7, #11]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d20b      	bcs.n	800f686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	607b      	str	r3, [r7, #4]
}
 800f680:	bf00      	nop
 800f682:	bf00      	nop
 800f684:	e7fd      	b.n	800f682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f686:	4b0f      	ldr	r3, [pc, #60]	@ (800f6c4 <vPortValidateInterruptPriority+0x7c>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f68e:	4b0e      	ldr	r3, [pc, #56]	@ (800f6c8 <vPortValidateInterruptPriority+0x80>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d90b      	bls.n	800f6ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f69a:	f383 8811 	msr	BASEPRI, r3
 800f69e:	f3bf 8f6f 	isb	sy
 800f6a2:	f3bf 8f4f 	dsb	sy
 800f6a6:	603b      	str	r3, [r7, #0]
}
 800f6a8:	bf00      	nop
 800f6aa:	bf00      	nop
 800f6ac:	e7fd      	b.n	800f6aa <vPortValidateInterruptPriority+0x62>
	}
 800f6ae:	bf00      	nop
 800f6b0:	3714      	adds	r7, #20
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	e000e3f0 	.word	0xe000e3f0
 800f6c0:	200017a4 	.word	0x200017a4
 800f6c4:	e000ed0c 	.word	0xe000ed0c
 800f6c8:	200017a8 	.word	0x200017a8

0800f6cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b08a      	sub	sp, #40	@ 0x28
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f6d8:	f7fe ffc6 	bl	800e668 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f6dc:	4b5c      	ldr	r3, [pc, #368]	@ (800f850 <pvPortMalloc+0x184>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d101      	bne.n	800f6e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f6e4:	f000 f924 	bl	800f930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f6e8:	4b5a      	ldr	r3, [pc, #360]	@ (800f854 <pvPortMalloc+0x188>)
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4013      	ands	r3, r2
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f040 8095 	bne.w	800f820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d01e      	beq.n	800f73a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f6fc:	2208      	movs	r2, #8
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4413      	add	r3, r2
 800f702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f003 0307 	and.w	r3, r3, #7
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d015      	beq.n	800f73a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f023 0307 	bic.w	r3, r3, #7
 800f714:	3308      	adds	r3, #8
 800f716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f003 0307 	and.w	r3, r3, #7
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00b      	beq.n	800f73a <pvPortMalloc+0x6e>
	__asm volatile
 800f722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f726:	f383 8811 	msr	BASEPRI, r3
 800f72a:	f3bf 8f6f 	isb	sy
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	617b      	str	r3, [r7, #20]
}
 800f734:	bf00      	nop
 800f736:	bf00      	nop
 800f738:	e7fd      	b.n	800f736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d06f      	beq.n	800f820 <pvPortMalloc+0x154>
 800f740:	4b45      	ldr	r3, [pc, #276]	@ (800f858 <pvPortMalloc+0x18c>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	429a      	cmp	r2, r3
 800f748:	d86a      	bhi.n	800f820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f74a:	4b44      	ldr	r3, [pc, #272]	@ (800f85c <pvPortMalloc+0x190>)
 800f74c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f74e:	4b43      	ldr	r3, [pc, #268]	@ (800f85c <pvPortMalloc+0x190>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f754:	e004      	b.n	800f760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	429a      	cmp	r2, r3
 800f768:	d903      	bls.n	800f772 <pvPortMalloc+0xa6>
 800f76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1f1      	bne.n	800f756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f772:	4b37      	ldr	r3, [pc, #220]	@ (800f850 <pvPortMalloc+0x184>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f778:	429a      	cmp	r2, r3
 800f77a:	d051      	beq.n	800f820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f77c:	6a3b      	ldr	r3, [r7, #32]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2208      	movs	r2, #8
 800f782:	4413      	add	r3, r2
 800f784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	6a3b      	ldr	r3, [r7, #32]
 800f78c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f790:	685a      	ldr	r2, [r3, #4]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	1ad2      	subs	r2, r2, r3
 800f796:	2308      	movs	r3, #8
 800f798:	005b      	lsls	r3, r3, #1
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d920      	bls.n	800f7e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f79e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	f003 0307 	and.w	r3, r3, #7
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00b      	beq.n	800f7c8 <pvPortMalloc+0xfc>
	__asm volatile
 800f7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	613b      	str	r3, [r7, #16]
}
 800f7c2:	bf00      	nop
 800f7c4:	bf00      	nop
 800f7c6:	e7fd      	b.n	800f7c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ca:	685a      	ldr	r2, [r3, #4]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	1ad2      	subs	r2, r2, r3
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f7da:	69b8      	ldr	r0, [r7, #24]
 800f7dc:	f000 f90a 	bl	800f9f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f7e0:	4b1d      	ldr	r3, [pc, #116]	@ (800f858 <pvPortMalloc+0x18c>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	4a1b      	ldr	r2, [pc, #108]	@ (800f858 <pvPortMalloc+0x18c>)
 800f7ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800f858 <pvPortMalloc+0x18c>)
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f860 <pvPortMalloc+0x194>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d203      	bcs.n	800f802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f7fa:	4b17      	ldr	r3, [pc, #92]	@ (800f858 <pvPortMalloc+0x18c>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a18      	ldr	r2, [pc, #96]	@ (800f860 <pvPortMalloc+0x194>)
 800f800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	4b13      	ldr	r3, [pc, #76]	@ (800f854 <pvPortMalloc+0x188>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	431a      	orrs	r2, r3
 800f80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f80e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f812:	2200      	movs	r2, #0
 800f814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f816:	4b13      	ldr	r3, [pc, #76]	@ (800f864 <pvPortMalloc+0x198>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	3301      	adds	r3, #1
 800f81c:	4a11      	ldr	r2, [pc, #68]	@ (800f864 <pvPortMalloc+0x198>)
 800f81e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f820:	f7fe ff30 	bl	800e684 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	f003 0307 	and.w	r3, r3, #7
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00b      	beq.n	800f846 <pvPortMalloc+0x17a>
	__asm volatile
 800f82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	60fb      	str	r3, [r7, #12]
}
 800f840:	bf00      	nop
 800f842:	bf00      	nop
 800f844:	e7fd      	b.n	800f842 <pvPortMalloc+0x176>
	return pvReturn;
 800f846:	69fb      	ldr	r3, [r7, #28]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3728      	adds	r7, #40	@ 0x28
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	200053b4 	.word	0x200053b4
 800f854:	200053c8 	.word	0x200053c8
 800f858:	200053b8 	.word	0x200053b8
 800f85c:	200053ac 	.word	0x200053ac
 800f860:	200053bc 	.word	0x200053bc
 800f864:	200053c0 	.word	0x200053c0

0800f868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d04f      	beq.n	800f91a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f87a:	2308      	movs	r3, #8
 800f87c:	425b      	negs	r3, r3
 800f87e:	697a      	ldr	r2, [r7, #20]
 800f880:	4413      	add	r3, r2
 800f882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	685a      	ldr	r2, [r3, #4]
 800f88c:	4b25      	ldr	r3, [pc, #148]	@ (800f924 <vPortFree+0xbc>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4013      	ands	r3, r2
 800f892:	2b00      	cmp	r3, #0
 800f894:	d10b      	bne.n	800f8ae <vPortFree+0x46>
	__asm volatile
 800f896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	60fb      	str	r3, [r7, #12]
}
 800f8a8:	bf00      	nop
 800f8aa:	bf00      	nop
 800f8ac:	e7fd      	b.n	800f8aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00b      	beq.n	800f8ce <vPortFree+0x66>
	__asm volatile
 800f8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ba:	f383 8811 	msr	BASEPRI, r3
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	60bb      	str	r3, [r7, #8]
}
 800f8c8:	bf00      	nop
 800f8ca:	bf00      	nop
 800f8cc:	e7fd      	b.n	800f8ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	685a      	ldr	r2, [r3, #4]
 800f8d2:	4b14      	ldr	r3, [pc, #80]	@ (800f924 <vPortFree+0xbc>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d01e      	beq.n	800f91a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d11a      	bne.n	800f91a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	685a      	ldr	r2, [r3, #4]
 800f8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f924 <vPortFree+0xbc>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	43db      	mvns	r3, r3
 800f8ee:	401a      	ands	r2, r3
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f8f4:	f7fe feb8 	bl	800e668 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f928 <vPortFree+0xc0>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4413      	add	r3, r2
 800f902:	4a09      	ldr	r2, [pc, #36]	@ (800f928 <vPortFree+0xc0>)
 800f904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f906:	6938      	ldr	r0, [r7, #16]
 800f908:	f000 f874 	bl	800f9f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f90c:	4b07      	ldr	r3, [pc, #28]	@ (800f92c <vPortFree+0xc4>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	3301      	adds	r3, #1
 800f912:	4a06      	ldr	r2, [pc, #24]	@ (800f92c <vPortFree+0xc4>)
 800f914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f916:	f7fe feb5 	bl	800e684 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f91a:	bf00      	nop
 800f91c:	3718      	adds	r7, #24
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	200053c8 	.word	0x200053c8
 800f928:	200053b8 	.word	0x200053b8
 800f92c:	200053c4 	.word	0x200053c4

0800f930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f930:	b480      	push	{r7}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f936:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f93a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f93c:	4b27      	ldr	r3, [pc, #156]	@ (800f9dc <prvHeapInit+0xac>)
 800f93e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f003 0307 	and.w	r3, r3, #7
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00c      	beq.n	800f964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	3307      	adds	r3, #7
 800f94e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f023 0307 	bic.w	r3, r3, #7
 800f956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	4a1f      	ldr	r2, [pc, #124]	@ (800f9dc <prvHeapInit+0xac>)
 800f960:	4413      	add	r3, r2
 800f962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f968:	4a1d      	ldr	r2, [pc, #116]	@ (800f9e0 <prvHeapInit+0xb0>)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f96e:	4b1c      	ldr	r3, [pc, #112]	@ (800f9e0 <prvHeapInit+0xb0>)
 800f970:	2200      	movs	r2, #0
 800f972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	68ba      	ldr	r2, [r7, #8]
 800f978:	4413      	add	r3, r2
 800f97a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f97c:	2208      	movs	r2, #8
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	1a9b      	subs	r3, r3, r2
 800f982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f023 0307 	bic.w	r3, r3, #7
 800f98a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	4a15      	ldr	r2, [pc, #84]	@ (800f9e4 <prvHeapInit+0xb4>)
 800f990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f992:	4b14      	ldr	r3, [pc, #80]	@ (800f9e4 <prvHeapInit+0xb4>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2200      	movs	r2, #0
 800f998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f99a:	4b12      	ldr	r3, [pc, #72]	@ (800f9e4 <prvHeapInit+0xb4>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	1ad2      	subs	r2, r2, r3
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f9b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e4 <prvHeapInit+0xb4>)
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	4a0a      	ldr	r2, [pc, #40]	@ (800f9e8 <prvHeapInit+0xb8>)
 800f9be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	4a09      	ldr	r2, [pc, #36]	@ (800f9ec <prvHeapInit+0xbc>)
 800f9c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f9c8:	4b09      	ldr	r3, [pc, #36]	@ (800f9f0 <prvHeapInit+0xc0>)
 800f9ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f9ce:	601a      	str	r2, [r3, #0]
}
 800f9d0:	bf00      	nop
 800f9d2:	3714      	adds	r7, #20
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr
 800f9dc:	200017ac 	.word	0x200017ac
 800f9e0:	200053ac 	.word	0x200053ac
 800f9e4:	200053b4 	.word	0x200053b4
 800f9e8:	200053bc 	.word	0x200053bc
 800f9ec:	200053b8 	.word	0x200053b8
 800f9f0:	200053c8 	.word	0x200053c8

0800f9f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f9fc:	4b28      	ldr	r3, [pc, #160]	@ (800faa0 <prvInsertBlockIntoFreeList+0xac>)
 800f9fe:	60fb      	str	r3, [r7, #12]
 800fa00:	e002      	b.n	800fa08 <prvInsertBlockIntoFreeList+0x14>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	60fb      	str	r3, [r7, #12]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d8f7      	bhi.n	800fa02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d108      	bne.n	800fa36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	685a      	ldr	r2, [r3, #4]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	441a      	add	r2, r3
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	441a      	add	r2, r3
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d118      	bne.n	800fa7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	4b15      	ldr	r3, [pc, #84]	@ (800faa4 <prvInsertBlockIntoFreeList+0xb0>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d00d      	beq.n	800fa72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	685a      	ldr	r2, [r3, #4]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	441a      	add	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	601a      	str	r2, [r3, #0]
 800fa70:	e008      	b.n	800fa84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fa72:	4b0c      	ldr	r3, [pc, #48]	@ (800faa4 <prvInsertBlockIntoFreeList+0xb0>)
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	601a      	str	r2, [r3, #0]
 800fa7a:	e003      	b.n	800fa84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa84:	68fa      	ldr	r2, [r7, #12]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d002      	beq.n	800fa92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa92:	bf00      	nop
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	200053ac 	.word	0x200053ac
 800faa4:	200053b4 	.word	0x200053b4

0800faa8 <sbrk_aligned>:
 800faa8:	b570      	push	{r4, r5, r6, lr}
 800faaa:	4e0f      	ldr	r6, [pc, #60]	@ (800fae8 <sbrk_aligned+0x40>)
 800faac:	460c      	mov	r4, r1
 800faae:	6831      	ldr	r1, [r6, #0]
 800fab0:	4605      	mov	r5, r0
 800fab2:	b911      	cbnz	r1, 800faba <sbrk_aligned+0x12>
 800fab4:	f000 f966 	bl	800fd84 <_sbrk_r>
 800fab8:	6030      	str	r0, [r6, #0]
 800faba:	4621      	mov	r1, r4
 800fabc:	4628      	mov	r0, r5
 800fabe:	f000 f961 	bl	800fd84 <_sbrk_r>
 800fac2:	1c43      	adds	r3, r0, #1
 800fac4:	d103      	bne.n	800face <sbrk_aligned+0x26>
 800fac6:	f04f 34ff 	mov.w	r4, #4294967295
 800faca:	4620      	mov	r0, r4
 800facc:	bd70      	pop	{r4, r5, r6, pc}
 800face:	1cc4      	adds	r4, r0, #3
 800fad0:	f024 0403 	bic.w	r4, r4, #3
 800fad4:	42a0      	cmp	r0, r4
 800fad6:	d0f8      	beq.n	800faca <sbrk_aligned+0x22>
 800fad8:	1a21      	subs	r1, r4, r0
 800fada:	4628      	mov	r0, r5
 800fadc:	f000 f952 	bl	800fd84 <_sbrk_r>
 800fae0:	3001      	adds	r0, #1
 800fae2:	d1f2      	bne.n	800faca <sbrk_aligned+0x22>
 800fae4:	e7ef      	b.n	800fac6 <sbrk_aligned+0x1e>
 800fae6:	bf00      	nop
 800fae8:	200053cc 	.word	0x200053cc

0800faec <_malloc_r>:
 800faec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faf0:	1ccd      	adds	r5, r1, #3
 800faf2:	f025 0503 	bic.w	r5, r5, #3
 800faf6:	3508      	adds	r5, #8
 800faf8:	2d0c      	cmp	r5, #12
 800fafa:	bf38      	it	cc
 800fafc:	250c      	movcc	r5, #12
 800fafe:	2d00      	cmp	r5, #0
 800fb00:	4606      	mov	r6, r0
 800fb02:	db01      	blt.n	800fb08 <_malloc_r+0x1c>
 800fb04:	42a9      	cmp	r1, r5
 800fb06:	d904      	bls.n	800fb12 <_malloc_r+0x26>
 800fb08:	230c      	movs	r3, #12
 800fb0a:	6033      	str	r3, [r6, #0]
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fbe8 <_malloc_r+0xfc>
 800fb16:	f000 f869 	bl	800fbec <__malloc_lock>
 800fb1a:	f8d8 3000 	ldr.w	r3, [r8]
 800fb1e:	461c      	mov	r4, r3
 800fb20:	bb44      	cbnz	r4, 800fb74 <_malloc_r+0x88>
 800fb22:	4629      	mov	r1, r5
 800fb24:	4630      	mov	r0, r6
 800fb26:	f7ff ffbf 	bl	800faa8 <sbrk_aligned>
 800fb2a:	1c43      	adds	r3, r0, #1
 800fb2c:	4604      	mov	r4, r0
 800fb2e:	d158      	bne.n	800fbe2 <_malloc_r+0xf6>
 800fb30:	f8d8 4000 	ldr.w	r4, [r8]
 800fb34:	4627      	mov	r7, r4
 800fb36:	2f00      	cmp	r7, #0
 800fb38:	d143      	bne.n	800fbc2 <_malloc_r+0xd6>
 800fb3a:	2c00      	cmp	r4, #0
 800fb3c:	d04b      	beq.n	800fbd6 <_malloc_r+0xea>
 800fb3e:	6823      	ldr	r3, [r4, #0]
 800fb40:	4639      	mov	r1, r7
 800fb42:	4630      	mov	r0, r6
 800fb44:	eb04 0903 	add.w	r9, r4, r3
 800fb48:	f000 f91c 	bl	800fd84 <_sbrk_r>
 800fb4c:	4581      	cmp	r9, r0
 800fb4e:	d142      	bne.n	800fbd6 <_malloc_r+0xea>
 800fb50:	6821      	ldr	r1, [r4, #0]
 800fb52:	1a6d      	subs	r5, r5, r1
 800fb54:	4629      	mov	r1, r5
 800fb56:	4630      	mov	r0, r6
 800fb58:	f7ff ffa6 	bl	800faa8 <sbrk_aligned>
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	d03a      	beq.n	800fbd6 <_malloc_r+0xea>
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	442b      	add	r3, r5
 800fb64:	6023      	str	r3, [r4, #0]
 800fb66:	f8d8 3000 	ldr.w	r3, [r8]
 800fb6a:	685a      	ldr	r2, [r3, #4]
 800fb6c:	bb62      	cbnz	r2, 800fbc8 <_malloc_r+0xdc>
 800fb6e:	f8c8 7000 	str.w	r7, [r8]
 800fb72:	e00f      	b.n	800fb94 <_malloc_r+0xa8>
 800fb74:	6822      	ldr	r2, [r4, #0]
 800fb76:	1b52      	subs	r2, r2, r5
 800fb78:	d420      	bmi.n	800fbbc <_malloc_r+0xd0>
 800fb7a:	2a0b      	cmp	r2, #11
 800fb7c:	d917      	bls.n	800fbae <_malloc_r+0xc2>
 800fb7e:	1961      	adds	r1, r4, r5
 800fb80:	42a3      	cmp	r3, r4
 800fb82:	6025      	str	r5, [r4, #0]
 800fb84:	bf18      	it	ne
 800fb86:	6059      	strne	r1, [r3, #4]
 800fb88:	6863      	ldr	r3, [r4, #4]
 800fb8a:	bf08      	it	eq
 800fb8c:	f8c8 1000 	streq.w	r1, [r8]
 800fb90:	5162      	str	r2, [r4, r5]
 800fb92:	604b      	str	r3, [r1, #4]
 800fb94:	4630      	mov	r0, r6
 800fb96:	f000 f82f 	bl	800fbf8 <__malloc_unlock>
 800fb9a:	f104 000b 	add.w	r0, r4, #11
 800fb9e:	1d23      	adds	r3, r4, #4
 800fba0:	f020 0007 	bic.w	r0, r0, #7
 800fba4:	1ac2      	subs	r2, r0, r3
 800fba6:	bf1c      	itt	ne
 800fba8:	1a1b      	subne	r3, r3, r0
 800fbaa:	50a3      	strne	r3, [r4, r2]
 800fbac:	e7af      	b.n	800fb0e <_malloc_r+0x22>
 800fbae:	6862      	ldr	r2, [r4, #4]
 800fbb0:	42a3      	cmp	r3, r4
 800fbb2:	bf0c      	ite	eq
 800fbb4:	f8c8 2000 	streq.w	r2, [r8]
 800fbb8:	605a      	strne	r2, [r3, #4]
 800fbba:	e7eb      	b.n	800fb94 <_malloc_r+0xa8>
 800fbbc:	4623      	mov	r3, r4
 800fbbe:	6864      	ldr	r4, [r4, #4]
 800fbc0:	e7ae      	b.n	800fb20 <_malloc_r+0x34>
 800fbc2:	463c      	mov	r4, r7
 800fbc4:	687f      	ldr	r7, [r7, #4]
 800fbc6:	e7b6      	b.n	800fb36 <_malloc_r+0x4a>
 800fbc8:	461a      	mov	r2, r3
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	42a3      	cmp	r3, r4
 800fbce:	d1fb      	bne.n	800fbc8 <_malloc_r+0xdc>
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	6053      	str	r3, [r2, #4]
 800fbd4:	e7de      	b.n	800fb94 <_malloc_r+0xa8>
 800fbd6:	230c      	movs	r3, #12
 800fbd8:	6033      	str	r3, [r6, #0]
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f000 f80c 	bl	800fbf8 <__malloc_unlock>
 800fbe0:	e794      	b.n	800fb0c <_malloc_r+0x20>
 800fbe2:	6005      	str	r5, [r0, #0]
 800fbe4:	e7d6      	b.n	800fb94 <_malloc_r+0xa8>
 800fbe6:	bf00      	nop
 800fbe8:	200053d0 	.word	0x200053d0

0800fbec <__malloc_lock>:
 800fbec:	4801      	ldr	r0, [pc, #4]	@ (800fbf4 <__malloc_lock+0x8>)
 800fbee:	f000 b903 	b.w	800fdf8 <__retarget_lock_acquire_recursive>
 800fbf2:	bf00      	nop
 800fbf4:	20005510 	.word	0x20005510

0800fbf8 <__malloc_unlock>:
 800fbf8:	4801      	ldr	r0, [pc, #4]	@ (800fc00 <__malloc_unlock+0x8>)
 800fbfa:	f000 b8fe 	b.w	800fdfa <__retarget_lock_release_recursive>
 800fbfe:	bf00      	nop
 800fc00:	20005510 	.word	0x20005510

0800fc04 <_realloc_r>:
 800fc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc08:	4680      	mov	r8, r0
 800fc0a:	4615      	mov	r5, r2
 800fc0c:	460c      	mov	r4, r1
 800fc0e:	b921      	cbnz	r1, 800fc1a <_realloc_r+0x16>
 800fc10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc14:	4611      	mov	r1, r2
 800fc16:	f7ff bf69 	b.w	800faec <_malloc_r>
 800fc1a:	b92a      	cbnz	r2, 800fc28 <_realloc_r+0x24>
 800fc1c:	f000 f8fc 	bl	800fe18 <_free_r>
 800fc20:	2400      	movs	r4, #0
 800fc22:	4620      	mov	r0, r4
 800fc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc28:	f000 f940 	bl	800feac <_malloc_usable_size_r>
 800fc2c:	4285      	cmp	r5, r0
 800fc2e:	4606      	mov	r6, r0
 800fc30:	d802      	bhi.n	800fc38 <_realloc_r+0x34>
 800fc32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fc36:	d8f4      	bhi.n	800fc22 <_realloc_r+0x1e>
 800fc38:	4629      	mov	r1, r5
 800fc3a:	4640      	mov	r0, r8
 800fc3c:	f7ff ff56 	bl	800faec <_malloc_r>
 800fc40:	4607      	mov	r7, r0
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d0ec      	beq.n	800fc20 <_realloc_r+0x1c>
 800fc46:	42b5      	cmp	r5, r6
 800fc48:	462a      	mov	r2, r5
 800fc4a:	4621      	mov	r1, r4
 800fc4c:	bf28      	it	cs
 800fc4e:	4632      	movcs	r2, r6
 800fc50:	f000 f8d4 	bl	800fdfc <memcpy>
 800fc54:	4621      	mov	r1, r4
 800fc56:	4640      	mov	r0, r8
 800fc58:	f000 f8de 	bl	800fe18 <_free_r>
 800fc5c:	463c      	mov	r4, r7
 800fc5e:	e7e0      	b.n	800fc22 <_realloc_r+0x1e>

0800fc60 <sniprintf>:
 800fc60:	b40c      	push	{r2, r3}
 800fc62:	b530      	push	{r4, r5, lr}
 800fc64:	4b17      	ldr	r3, [pc, #92]	@ (800fcc4 <sniprintf+0x64>)
 800fc66:	1e0c      	subs	r4, r1, #0
 800fc68:	681d      	ldr	r5, [r3, #0]
 800fc6a:	b09d      	sub	sp, #116	@ 0x74
 800fc6c:	da08      	bge.n	800fc80 <sniprintf+0x20>
 800fc6e:	238b      	movs	r3, #139	@ 0x8b
 800fc70:	602b      	str	r3, [r5, #0]
 800fc72:	f04f 30ff 	mov.w	r0, #4294967295
 800fc76:	b01d      	add	sp, #116	@ 0x74
 800fc78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc7c:	b002      	add	sp, #8
 800fc7e:	4770      	bx	lr
 800fc80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc84:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fc88:	bf14      	ite	ne
 800fc8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fc8e:	4623      	moveq	r3, r4
 800fc90:	9304      	str	r3, [sp, #16]
 800fc92:	9307      	str	r3, [sp, #28]
 800fc94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc98:	9002      	str	r0, [sp, #8]
 800fc9a:	9006      	str	r0, [sp, #24]
 800fc9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fca0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fca2:	ab21      	add	r3, sp, #132	@ 0x84
 800fca4:	a902      	add	r1, sp, #8
 800fca6:	4628      	mov	r0, r5
 800fca8:	9301      	str	r3, [sp, #4]
 800fcaa:	f000 f963 	bl	800ff74 <_svfiprintf_r>
 800fcae:	1c43      	adds	r3, r0, #1
 800fcb0:	bfbc      	itt	lt
 800fcb2:	238b      	movlt	r3, #139	@ 0x8b
 800fcb4:	602b      	strlt	r3, [r5, #0]
 800fcb6:	2c00      	cmp	r4, #0
 800fcb8:	d0dd      	beq.n	800fc76 <sniprintf+0x16>
 800fcba:	9b02      	ldr	r3, [sp, #8]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	701a      	strb	r2, [r3, #0]
 800fcc0:	e7d9      	b.n	800fc76 <sniprintf+0x16>
 800fcc2:	bf00      	nop
 800fcc4:	200002d8 	.word	0x200002d8

0800fcc8 <memset>:
 800fcc8:	4402      	add	r2, r0
 800fcca:	4603      	mov	r3, r0
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d100      	bne.n	800fcd2 <memset+0xa>
 800fcd0:	4770      	bx	lr
 800fcd2:	f803 1b01 	strb.w	r1, [r3], #1
 800fcd6:	e7f9      	b.n	800fccc <memset+0x4>

0800fcd8 <_reclaim_reent>:
 800fcd8:	4b29      	ldr	r3, [pc, #164]	@ (800fd80 <_reclaim_reent+0xa8>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4283      	cmp	r3, r0
 800fcde:	b570      	push	{r4, r5, r6, lr}
 800fce0:	4604      	mov	r4, r0
 800fce2:	d04b      	beq.n	800fd7c <_reclaim_reent+0xa4>
 800fce4:	69c3      	ldr	r3, [r0, #28]
 800fce6:	b1ab      	cbz	r3, 800fd14 <_reclaim_reent+0x3c>
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	b16b      	cbz	r3, 800fd08 <_reclaim_reent+0x30>
 800fcec:	2500      	movs	r5, #0
 800fcee:	69e3      	ldr	r3, [r4, #28]
 800fcf0:	68db      	ldr	r3, [r3, #12]
 800fcf2:	5959      	ldr	r1, [r3, r5]
 800fcf4:	2900      	cmp	r1, #0
 800fcf6:	d13b      	bne.n	800fd70 <_reclaim_reent+0x98>
 800fcf8:	3504      	adds	r5, #4
 800fcfa:	2d80      	cmp	r5, #128	@ 0x80
 800fcfc:	d1f7      	bne.n	800fcee <_reclaim_reent+0x16>
 800fcfe:	69e3      	ldr	r3, [r4, #28]
 800fd00:	4620      	mov	r0, r4
 800fd02:	68d9      	ldr	r1, [r3, #12]
 800fd04:	f000 f888 	bl	800fe18 <_free_r>
 800fd08:	69e3      	ldr	r3, [r4, #28]
 800fd0a:	6819      	ldr	r1, [r3, #0]
 800fd0c:	b111      	cbz	r1, 800fd14 <_reclaim_reent+0x3c>
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f000 f882 	bl	800fe18 <_free_r>
 800fd14:	6961      	ldr	r1, [r4, #20]
 800fd16:	b111      	cbz	r1, 800fd1e <_reclaim_reent+0x46>
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f000 f87d 	bl	800fe18 <_free_r>
 800fd1e:	69e1      	ldr	r1, [r4, #28]
 800fd20:	b111      	cbz	r1, 800fd28 <_reclaim_reent+0x50>
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 f878 	bl	800fe18 <_free_r>
 800fd28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fd2a:	b111      	cbz	r1, 800fd32 <_reclaim_reent+0x5a>
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f000 f873 	bl	800fe18 <_free_r>
 800fd32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd34:	b111      	cbz	r1, 800fd3c <_reclaim_reent+0x64>
 800fd36:	4620      	mov	r0, r4
 800fd38:	f000 f86e 	bl	800fe18 <_free_r>
 800fd3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fd3e:	b111      	cbz	r1, 800fd46 <_reclaim_reent+0x6e>
 800fd40:	4620      	mov	r0, r4
 800fd42:	f000 f869 	bl	800fe18 <_free_r>
 800fd46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fd48:	b111      	cbz	r1, 800fd50 <_reclaim_reent+0x78>
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f000 f864 	bl	800fe18 <_free_r>
 800fd50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fd52:	b111      	cbz	r1, 800fd5a <_reclaim_reent+0x82>
 800fd54:	4620      	mov	r0, r4
 800fd56:	f000 f85f 	bl	800fe18 <_free_r>
 800fd5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fd5c:	b111      	cbz	r1, 800fd64 <_reclaim_reent+0x8c>
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f000 f85a 	bl	800fe18 <_free_r>
 800fd64:	6a23      	ldr	r3, [r4, #32]
 800fd66:	b14b      	cbz	r3, 800fd7c <_reclaim_reent+0xa4>
 800fd68:	4620      	mov	r0, r4
 800fd6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd6e:	4718      	bx	r3
 800fd70:	680e      	ldr	r6, [r1, #0]
 800fd72:	4620      	mov	r0, r4
 800fd74:	f000 f850 	bl	800fe18 <_free_r>
 800fd78:	4631      	mov	r1, r6
 800fd7a:	e7bb      	b.n	800fcf4 <_reclaim_reent+0x1c>
 800fd7c:	bd70      	pop	{r4, r5, r6, pc}
 800fd7e:	bf00      	nop
 800fd80:	200002d8 	.word	0x200002d8

0800fd84 <_sbrk_r>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	4d06      	ldr	r5, [pc, #24]	@ (800fda0 <_sbrk_r+0x1c>)
 800fd88:	2300      	movs	r3, #0
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	4608      	mov	r0, r1
 800fd8e:	602b      	str	r3, [r5, #0]
 800fd90:	f7f2 fb74 	bl	800247c <_sbrk>
 800fd94:	1c43      	adds	r3, r0, #1
 800fd96:	d102      	bne.n	800fd9e <_sbrk_r+0x1a>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	b103      	cbz	r3, 800fd9e <_sbrk_r+0x1a>
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}
 800fda0:	2000550c 	.word	0x2000550c

0800fda4 <__errno>:
 800fda4:	4b01      	ldr	r3, [pc, #4]	@ (800fdac <__errno+0x8>)
 800fda6:	6818      	ldr	r0, [r3, #0]
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	200002d8 	.word	0x200002d8

0800fdb0 <__libc_init_array>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4d0d      	ldr	r5, [pc, #52]	@ (800fde8 <__libc_init_array+0x38>)
 800fdb4:	4c0d      	ldr	r4, [pc, #52]	@ (800fdec <__libc_init_array+0x3c>)
 800fdb6:	1b64      	subs	r4, r4, r5
 800fdb8:	10a4      	asrs	r4, r4, #2
 800fdba:	2600      	movs	r6, #0
 800fdbc:	42a6      	cmp	r6, r4
 800fdbe:	d109      	bne.n	800fdd4 <__libc_init_array+0x24>
 800fdc0:	4d0b      	ldr	r5, [pc, #44]	@ (800fdf0 <__libc_init_array+0x40>)
 800fdc2:	4c0c      	ldr	r4, [pc, #48]	@ (800fdf4 <__libc_init_array+0x44>)
 800fdc4:	f000 fb7a 	bl	80104bc <_init>
 800fdc8:	1b64      	subs	r4, r4, r5
 800fdca:	10a4      	asrs	r4, r4, #2
 800fdcc:	2600      	movs	r6, #0
 800fdce:	42a6      	cmp	r6, r4
 800fdd0:	d105      	bne.n	800fdde <__libc_init_array+0x2e>
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdd8:	4798      	blx	r3
 800fdda:	3601      	adds	r6, #1
 800fddc:	e7ee      	b.n	800fdbc <__libc_init_array+0xc>
 800fdde:	f855 3b04 	ldr.w	r3, [r5], #4
 800fde2:	4798      	blx	r3
 800fde4:	3601      	adds	r6, #1
 800fde6:	e7f2      	b.n	800fdce <__libc_init_array+0x1e>
 800fde8:	08010698 	.word	0x08010698
 800fdec:	08010698 	.word	0x08010698
 800fdf0:	08010698 	.word	0x08010698
 800fdf4:	0801069c 	.word	0x0801069c

0800fdf8 <__retarget_lock_acquire_recursive>:
 800fdf8:	4770      	bx	lr

0800fdfa <__retarget_lock_release_recursive>:
 800fdfa:	4770      	bx	lr

0800fdfc <memcpy>:
 800fdfc:	440a      	add	r2, r1
 800fdfe:	4291      	cmp	r1, r2
 800fe00:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe04:	d100      	bne.n	800fe08 <memcpy+0xc>
 800fe06:	4770      	bx	lr
 800fe08:	b510      	push	{r4, lr}
 800fe0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe12:	4291      	cmp	r1, r2
 800fe14:	d1f9      	bne.n	800fe0a <memcpy+0xe>
 800fe16:	bd10      	pop	{r4, pc}

0800fe18 <_free_r>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	2900      	cmp	r1, #0
 800fe1e:	d041      	beq.n	800fea4 <_free_r+0x8c>
 800fe20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe24:	1f0c      	subs	r4, r1, #4
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	bfb8      	it	lt
 800fe2a:	18e4      	addlt	r4, r4, r3
 800fe2c:	f7ff fede 	bl	800fbec <__malloc_lock>
 800fe30:	4a1d      	ldr	r2, [pc, #116]	@ (800fea8 <_free_r+0x90>)
 800fe32:	6813      	ldr	r3, [r2, #0]
 800fe34:	b933      	cbnz	r3, 800fe44 <_free_r+0x2c>
 800fe36:	6063      	str	r3, [r4, #4]
 800fe38:	6014      	str	r4, [r2, #0]
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe40:	f7ff beda 	b.w	800fbf8 <__malloc_unlock>
 800fe44:	42a3      	cmp	r3, r4
 800fe46:	d908      	bls.n	800fe5a <_free_r+0x42>
 800fe48:	6820      	ldr	r0, [r4, #0]
 800fe4a:	1821      	adds	r1, r4, r0
 800fe4c:	428b      	cmp	r3, r1
 800fe4e:	bf01      	itttt	eq
 800fe50:	6819      	ldreq	r1, [r3, #0]
 800fe52:	685b      	ldreq	r3, [r3, #4]
 800fe54:	1809      	addeq	r1, r1, r0
 800fe56:	6021      	streq	r1, [r4, #0]
 800fe58:	e7ed      	b.n	800fe36 <_free_r+0x1e>
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	b10b      	cbz	r3, 800fe64 <_free_r+0x4c>
 800fe60:	42a3      	cmp	r3, r4
 800fe62:	d9fa      	bls.n	800fe5a <_free_r+0x42>
 800fe64:	6811      	ldr	r1, [r2, #0]
 800fe66:	1850      	adds	r0, r2, r1
 800fe68:	42a0      	cmp	r0, r4
 800fe6a:	d10b      	bne.n	800fe84 <_free_r+0x6c>
 800fe6c:	6820      	ldr	r0, [r4, #0]
 800fe6e:	4401      	add	r1, r0
 800fe70:	1850      	adds	r0, r2, r1
 800fe72:	4283      	cmp	r3, r0
 800fe74:	6011      	str	r1, [r2, #0]
 800fe76:	d1e0      	bne.n	800fe3a <_free_r+0x22>
 800fe78:	6818      	ldr	r0, [r3, #0]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	6053      	str	r3, [r2, #4]
 800fe7e:	4408      	add	r0, r1
 800fe80:	6010      	str	r0, [r2, #0]
 800fe82:	e7da      	b.n	800fe3a <_free_r+0x22>
 800fe84:	d902      	bls.n	800fe8c <_free_r+0x74>
 800fe86:	230c      	movs	r3, #12
 800fe88:	602b      	str	r3, [r5, #0]
 800fe8a:	e7d6      	b.n	800fe3a <_free_r+0x22>
 800fe8c:	6820      	ldr	r0, [r4, #0]
 800fe8e:	1821      	adds	r1, r4, r0
 800fe90:	428b      	cmp	r3, r1
 800fe92:	bf04      	itt	eq
 800fe94:	6819      	ldreq	r1, [r3, #0]
 800fe96:	685b      	ldreq	r3, [r3, #4]
 800fe98:	6063      	str	r3, [r4, #4]
 800fe9a:	bf04      	itt	eq
 800fe9c:	1809      	addeq	r1, r1, r0
 800fe9e:	6021      	streq	r1, [r4, #0]
 800fea0:	6054      	str	r4, [r2, #4]
 800fea2:	e7ca      	b.n	800fe3a <_free_r+0x22>
 800fea4:	bd38      	pop	{r3, r4, r5, pc}
 800fea6:	bf00      	nop
 800fea8:	200053d0 	.word	0x200053d0

0800feac <_malloc_usable_size_r>:
 800feac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feb0:	1f18      	subs	r0, r3, #4
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	bfbc      	itt	lt
 800feb6:	580b      	ldrlt	r3, [r1, r0]
 800feb8:	18c0      	addlt	r0, r0, r3
 800feba:	4770      	bx	lr

0800febc <__ssputs_r>:
 800febc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fec0:	688e      	ldr	r6, [r1, #8]
 800fec2:	461f      	mov	r7, r3
 800fec4:	42be      	cmp	r6, r7
 800fec6:	680b      	ldr	r3, [r1, #0]
 800fec8:	4682      	mov	sl, r0
 800feca:	460c      	mov	r4, r1
 800fecc:	4690      	mov	r8, r2
 800fece:	d82d      	bhi.n	800ff2c <__ssputs_r+0x70>
 800fed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fed4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fed8:	d026      	beq.n	800ff28 <__ssputs_r+0x6c>
 800feda:	6965      	ldr	r5, [r4, #20]
 800fedc:	6909      	ldr	r1, [r1, #16]
 800fede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fee2:	eba3 0901 	sub.w	r9, r3, r1
 800fee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800feea:	1c7b      	adds	r3, r7, #1
 800feec:	444b      	add	r3, r9
 800feee:	106d      	asrs	r5, r5, #1
 800fef0:	429d      	cmp	r5, r3
 800fef2:	bf38      	it	cc
 800fef4:	461d      	movcc	r5, r3
 800fef6:	0553      	lsls	r3, r2, #21
 800fef8:	d527      	bpl.n	800ff4a <__ssputs_r+0x8e>
 800fefa:	4629      	mov	r1, r5
 800fefc:	f7ff fdf6 	bl	800faec <_malloc_r>
 800ff00:	4606      	mov	r6, r0
 800ff02:	b360      	cbz	r0, 800ff5e <__ssputs_r+0xa2>
 800ff04:	6921      	ldr	r1, [r4, #16]
 800ff06:	464a      	mov	r2, r9
 800ff08:	f7ff ff78 	bl	800fdfc <memcpy>
 800ff0c:	89a3      	ldrh	r3, [r4, #12]
 800ff0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ff12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff16:	81a3      	strh	r3, [r4, #12]
 800ff18:	6126      	str	r6, [r4, #16]
 800ff1a:	6165      	str	r5, [r4, #20]
 800ff1c:	444e      	add	r6, r9
 800ff1e:	eba5 0509 	sub.w	r5, r5, r9
 800ff22:	6026      	str	r6, [r4, #0]
 800ff24:	60a5      	str	r5, [r4, #8]
 800ff26:	463e      	mov	r6, r7
 800ff28:	42be      	cmp	r6, r7
 800ff2a:	d900      	bls.n	800ff2e <__ssputs_r+0x72>
 800ff2c:	463e      	mov	r6, r7
 800ff2e:	6820      	ldr	r0, [r4, #0]
 800ff30:	4632      	mov	r2, r6
 800ff32:	4641      	mov	r1, r8
 800ff34:	f000 faa8 	bl	8010488 <memmove>
 800ff38:	68a3      	ldr	r3, [r4, #8]
 800ff3a:	1b9b      	subs	r3, r3, r6
 800ff3c:	60a3      	str	r3, [r4, #8]
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	4433      	add	r3, r6
 800ff42:	6023      	str	r3, [r4, #0]
 800ff44:	2000      	movs	r0, #0
 800ff46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4a:	462a      	mov	r2, r5
 800ff4c:	f7ff fe5a 	bl	800fc04 <_realloc_r>
 800ff50:	4606      	mov	r6, r0
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d1e0      	bne.n	800ff18 <__ssputs_r+0x5c>
 800ff56:	6921      	ldr	r1, [r4, #16]
 800ff58:	4650      	mov	r0, sl
 800ff5a:	f7ff ff5d 	bl	800fe18 <_free_r>
 800ff5e:	230c      	movs	r3, #12
 800ff60:	f8ca 3000 	str.w	r3, [sl]
 800ff64:	89a3      	ldrh	r3, [r4, #12]
 800ff66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff6a:	81a3      	strh	r3, [r4, #12]
 800ff6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff70:	e7e9      	b.n	800ff46 <__ssputs_r+0x8a>
	...

0800ff74 <_svfiprintf_r>:
 800ff74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff78:	4698      	mov	r8, r3
 800ff7a:	898b      	ldrh	r3, [r1, #12]
 800ff7c:	061b      	lsls	r3, r3, #24
 800ff7e:	b09d      	sub	sp, #116	@ 0x74
 800ff80:	4607      	mov	r7, r0
 800ff82:	460d      	mov	r5, r1
 800ff84:	4614      	mov	r4, r2
 800ff86:	d510      	bpl.n	800ffaa <_svfiprintf_r+0x36>
 800ff88:	690b      	ldr	r3, [r1, #16]
 800ff8a:	b973      	cbnz	r3, 800ffaa <_svfiprintf_r+0x36>
 800ff8c:	2140      	movs	r1, #64	@ 0x40
 800ff8e:	f7ff fdad 	bl	800faec <_malloc_r>
 800ff92:	6028      	str	r0, [r5, #0]
 800ff94:	6128      	str	r0, [r5, #16]
 800ff96:	b930      	cbnz	r0, 800ffa6 <_svfiprintf_r+0x32>
 800ff98:	230c      	movs	r3, #12
 800ff9a:	603b      	str	r3, [r7, #0]
 800ff9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa0:	b01d      	add	sp, #116	@ 0x74
 800ffa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa6:	2340      	movs	r3, #64	@ 0x40
 800ffa8:	616b      	str	r3, [r5, #20]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffae:	2320      	movs	r3, #32
 800ffb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ffb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffb8:	2330      	movs	r3, #48	@ 0x30
 800ffba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010158 <_svfiprintf_r+0x1e4>
 800ffbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ffc2:	f04f 0901 	mov.w	r9, #1
 800ffc6:	4623      	mov	r3, r4
 800ffc8:	469a      	mov	sl, r3
 800ffca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffce:	b10a      	cbz	r2, 800ffd4 <_svfiprintf_r+0x60>
 800ffd0:	2a25      	cmp	r2, #37	@ 0x25
 800ffd2:	d1f9      	bne.n	800ffc8 <_svfiprintf_r+0x54>
 800ffd4:	ebba 0b04 	subs.w	fp, sl, r4
 800ffd8:	d00b      	beq.n	800fff2 <_svfiprintf_r+0x7e>
 800ffda:	465b      	mov	r3, fp
 800ffdc:	4622      	mov	r2, r4
 800ffde:	4629      	mov	r1, r5
 800ffe0:	4638      	mov	r0, r7
 800ffe2:	f7ff ff6b 	bl	800febc <__ssputs_r>
 800ffe6:	3001      	adds	r0, #1
 800ffe8:	f000 80a7 	beq.w	801013a <_svfiprintf_r+0x1c6>
 800ffec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffee:	445a      	add	r2, fp
 800fff0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fff2:	f89a 3000 	ldrb.w	r3, [sl]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f000 809f 	beq.w	801013a <_svfiprintf_r+0x1c6>
 800fffc:	2300      	movs	r3, #0
 800fffe:	f04f 32ff 	mov.w	r2, #4294967295
 8010002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010006:	f10a 0a01 	add.w	sl, sl, #1
 801000a:	9304      	str	r3, [sp, #16]
 801000c:	9307      	str	r3, [sp, #28]
 801000e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010012:	931a      	str	r3, [sp, #104]	@ 0x68
 8010014:	4654      	mov	r4, sl
 8010016:	2205      	movs	r2, #5
 8010018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801001c:	484e      	ldr	r0, [pc, #312]	@ (8010158 <_svfiprintf_r+0x1e4>)
 801001e:	f7f0 f8f7 	bl	8000210 <memchr>
 8010022:	9a04      	ldr	r2, [sp, #16]
 8010024:	b9d8      	cbnz	r0, 801005e <_svfiprintf_r+0xea>
 8010026:	06d0      	lsls	r0, r2, #27
 8010028:	bf44      	itt	mi
 801002a:	2320      	movmi	r3, #32
 801002c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010030:	0711      	lsls	r1, r2, #28
 8010032:	bf44      	itt	mi
 8010034:	232b      	movmi	r3, #43	@ 0x2b
 8010036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801003a:	f89a 3000 	ldrb.w	r3, [sl]
 801003e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010040:	d015      	beq.n	801006e <_svfiprintf_r+0xfa>
 8010042:	9a07      	ldr	r2, [sp, #28]
 8010044:	4654      	mov	r4, sl
 8010046:	2000      	movs	r0, #0
 8010048:	f04f 0c0a 	mov.w	ip, #10
 801004c:	4621      	mov	r1, r4
 801004e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010052:	3b30      	subs	r3, #48	@ 0x30
 8010054:	2b09      	cmp	r3, #9
 8010056:	d94b      	bls.n	80100f0 <_svfiprintf_r+0x17c>
 8010058:	b1b0      	cbz	r0, 8010088 <_svfiprintf_r+0x114>
 801005a:	9207      	str	r2, [sp, #28]
 801005c:	e014      	b.n	8010088 <_svfiprintf_r+0x114>
 801005e:	eba0 0308 	sub.w	r3, r0, r8
 8010062:	fa09 f303 	lsl.w	r3, r9, r3
 8010066:	4313      	orrs	r3, r2
 8010068:	9304      	str	r3, [sp, #16]
 801006a:	46a2      	mov	sl, r4
 801006c:	e7d2      	b.n	8010014 <_svfiprintf_r+0xa0>
 801006e:	9b03      	ldr	r3, [sp, #12]
 8010070:	1d19      	adds	r1, r3, #4
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	9103      	str	r1, [sp, #12]
 8010076:	2b00      	cmp	r3, #0
 8010078:	bfbb      	ittet	lt
 801007a:	425b      	neglt	r3, r3
 801007c:	f042 0202 	orrlt.w	r2, r2, #2
 8010080:	9307      	strge	r3, [sp, #28]
 8010082:	9307      	strlt	r3, [sp, #28]
 8010084:	bfb8      	it	lt
 8010086:	9204      	strlt	r2, [sp, #16]
 8010088:	7823      	ldrb	r3, [r4, #0]
 801008a:	2b2e      	cmp	r3, #46	@ 0x2e
 801008c:	d10a      	bne.n	80100a4 <_svfiprintf_r+0x130>
 801008e:	7863      	ldrb	r3, [r4, #1]
 8010090:	2b2a      	cmp	r3, #42	@ 0x2a
 8010092:	d132      	bne.n	80100fa <_svfiprintf_r+0x186>
 8010094:	9b03      	ldr	r3, [sp, #12]
 8010096:	1d1a      	adds	r2, r3, #4
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	9203      	str	r2, [sp, #12]
 801009c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100a0:	3402      	adds	r4, #2
 80100a2:	9305      	str	r3, [sp, #20]
 80100a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010168 <_svfiprintf_r+0x1f4>
 80100a8:	7821      	ldrb	r1, [r4, #0]
 80100aa:	2203      	movs	r2, #3
 80100ac:	4650      	mov	r0, sl
 80100ae:	f7f0 f8af 	bl	8000210 <memchr>
 80100b2:	b138      	cbz	r0, 80100c4 <_svfiprintf_r+0x150>
 80100b4:	9b04      	ldr	r3, [sp, #16]
 80100b6:	eba0 000a 	sub.w	r0, r0, sl
 80100ba:	2240      	movs	r2, #64	@ 0x40
 80100bc:	4082      	lsls	r2, r0
 80100be:	4313      	orrs	r3, r2
 80100c0:	3401      	adds	r4, #1
 80100c2:	9304      	str	r3, [sp, #16]
 80100c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100c8:	4824      	ldr	r0, [pc, #144]	@ (801015c <_svfiprintf_r+0x1e8>)
 80100ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100ce:	2206      	movs	r2, #6
 80100d0:	f7f0 f89e 	bl	8000210 <memchr>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d036      	beq.n	8010146 <_svfiprintf_r+0x1d2>
 80100d8:	4b21      	ldr	r3, [pc, #132]	@ (8010160 <_svfiprintf_r+0x1ec>)
 80100da:	bb1b      	cbnz	r3, 8010124 <_svfiprintf_r+0x1b0>
 80100dc:	9b03      	ldr	r3, [sp, #12]
 80100de:	3307      	adds	r3, #7
 80100e0:	f023 0307 	bic.w	r3, r3, #7
 80100e4:	3308      	adds	r3, #8
 80100e6:	9303      	str	r3, [sp, #12]
 80100e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ea:	4433      	add	r3, r6
 80100ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80100ee:	e76a      	b.n	800ffc6 <_svfiprintf_r+0x52>
 80100f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80100f4:	460c      	mov	r4, r1
 80100f6:	2001      	movs	r0, #1
 80100f8:	e7a8      	b.n	801004c <_svfiprintf_r+0xd8>
 80100fa:	2300      	movs	r3, #0
 80100fc:	3401      	adds	r4, #1
 80100fe:	9305      	str	r3, [sp, #20]
 8010100:	4619      	mov	r1, r3
 8010102:	f04f 0c0a 	mov.w	ip, #10
 8010106:	4620      	mov	r0, r4
 8010108:	f810 2b01 	ldrb.w	r2, [r0], #1
 801010c:	3a30      	subs	r2, #48	@ 0x30
 801010e:	2a09      	cmp	r2, #9
 8010110:	d903      	bls.n	801011a <_svfiprintf_r+0x1a6>
 8010112:	2b00      	cmp	r3, #0
 8010114:	d0c6      	beq.n	80100a4 <_svfiprintf_r+0x130>
 8010116:	9105      	str	r1, [sp, #20]
 8010118:	e7c4      	b.n	80100a4 <_svfiprintf_r+0x130>
 801011a:	fb0c 2101 	mla	r1, ip, r1, r2
 801011e:	4604      	mov	r4, r0
 8010120:	2301      	movs	r3, #1
 8010122:	e7f0      	b.n	8010106 <_svfiprintf_r+0x192>
 8010124:	ab03      	add	r3, sp, #12
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	462a      	mov	r2, r5
 801012a:	4b0e      	ldr	r3, [pc, #56]	@ (8010164 <_svfiprintf_r+0x1f0>)
 801012c:	a904      	add	r1, sp, #16
 801012e:	4638      	mov	r0, r7
 8010130:	f3af 8000 	nop.w
 8010134:	1c42      	adds	r2, r0, #1
 8010136:	4606      	mov	r6, r0
 8010138:	d1d6      	bne.n	80100e8 <_svfiprintf_r+0x174>
 801013a:	89ab      	ldrh	r3, [r5, #12]
 801013c:	065b      	lsls	r3, r3, #25
 801013e:	f53f af2d 	bmi.w	800ff9c <_svfiprintf_r+0x28>
 8010142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010144:	e72c      	b.n	800ffa0 <_svfiprintf_r+0x2c>
 8010146:	ab03      	add	r3, sp, #12
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	462a      	mov	r2, r5
 801014c:	4b05      	ldr	r3, [pc, #20]	@ (8010164 <_svfiprintf_r+0x1f0>)
 801014e:	a904      	add	r1, sp, #16
 8010150:	4638      	mov	r0, r7
 8010152:	f000 f879 	bl	8010248 <_printf_i>
 8010156:	e7ed      	b.n	8010134 <_svfiprintf_r+0x1c0>
 8010158:	0801065c 	.word	0x0801065c
 801015c:	08010666 	.word	0x08010666
 8010160:	00000000 	.word	0x00000000
 8010164:	0800febd 	.word	0x0800febd
 8010168:	08010662 	.word	0x08010662

0801016c <_printf_common>:
 801016c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010170:	4616      	mov	r6, r2
 8010172:	4698      	mov	r8, r3
 8010174:	688a      	ldr	r2, [r1, #8]
 8010176:	690b      	ldr	r3, [r1, #16]
 8010178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801017c:	4293      	cmp	r3, r2
 801017e:	bfb8      	it	lt
 8010180:	4613      	movlt	r3, r2
 8010182:	6033      	str	r3, [r6, #0]
 8010184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010188:	4607      	mov	r7, r0
 801018a:	460c      	mov	r4, r1
 801018c:	b10a      	cbz	r2, 8010192 <_printf_common+0x26>
 801018e:	3301      	adds	r3, #1
 8010190:	6033      	str	r3, [r6, #0]
 8010192:	6823      	ldr	r3, [r4, #0]
 8010194:	0699      	lsls	r1, r3, #26
 8010196:	bf42      	ittt	mi
 8010198:	6833      	ldrmi	r3, [r6, #0]
 801019a:	3302      	addmi	r3, #2
 801019c:	6033      	strmi	r3, [r6, #0]
 801019e:	6825      	ldr	r5, [r4, #0]
 80101a0:	f015 0506 	ands.w	r5, r5, #6
 80101a4:	d106      	bne.n	80101b4 <_printf_common+0x48>
 80101a6:	f104 0a19 	add.w	sl, r4, #25
 80101aa:	68e3      	ldr	r3, [r4, #12]
 80101ac:	6832      	ldr	r2, [r6, #0]
 80101ae:	1a9b      	subs	r3, r3, r2
 80101b0:	42ab      	cmp	r3, r5
 80101b2:	dc26      	bgt.n	8010202 <_printf_common+0x96>
 80101b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80101b8:	6822      	ldr	r2, [r4, #0]
 80101ba:	3b00      	subs	r3, #0
 80101bc:	bf18      	it	ne
 80101be:	2301      	movne	r3, #1
 80101c0:	0692      	lsls	r2, r2, #26
 80101c2:	d42b      	bmi.n	801021c <_printf_common+0xb0>
 80101c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80101c8:	4641      	mov	r1, r8
 80101ca:	4638      	mov	r0, r7
 80101cc:	47c8      	blx	r9
 80101ce:	3001      	adds	r0, #1
 80101d0:	d01e      	beq.n	8010210 <_printf_common+0xa4>
 80101d2:	6823      	ldr	r3, [r4, #0]
 80101d4:	6922      	ldr	r2, [r4, #16]
 80101d6:	f003 0306 	and.w	r3, r3, #6
 80101da:	2b04      	cmp	r3, #4
 80101dc:	bf02      	ittt	eq
 80101de:	68e5      	ldreq	r5, [r4, #12]
 80101e0:	6833      	ldreq	r3, [r6, #0]
 80101e2:	1aed      	subeq	r5, r5, r3
 80101e4:	68a3      	ldr	r3, [r4, #8]
 80101e6:	bf0c      	ite	eq
 80101e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101ec:	2500      	movne	r5, #0
 80101ee:	4293      	cmp	r3, r2
 80101f0:	bfc4      	itt	gt
 80101f2:	1a9b      	subgt	r3, r3, r2
 80101f4:	18ed      	addgt	r5, r5, r3
 80101f6:	2600      	movs	r6, #0
 80101f8:	341a      	adds	r4, #26
 80101fa:	42b5      	cmp	r5, r6
 80101fc:	d11a      	bne.n	8010234 <_printf_common+0xc8>
 80101fe:	2000      	movs	r0, #0
 8010200:	e008      	b.n	8010214 <_printf_common+0xa8>
 8010202:	2301      	movs	r3, #1
 8010204:	4652      	mov	r2, sl
 8010206:	4641      	mov	r1, r8
 8010208:	4638      	mov	r0, r7
 801020a:	47c8      	blx	r9
 801020c:	3001      	adds	r0, #1
 801020e:	d103      	bne.n	8010218 <_printf_common+0xac>
 8010210:	f04f 30ff 	mov.w	r0, #4294967295
 8010214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010218:	3501      	adds	r5, #1
 801021a:	e7c6      	b.n	80101aa <_printf_common+0x3e>
 801021c:	18e1      	adds	r1, r4, r3
 801021e:	1c5a      	adds	r2, r3, #1
 8010220:	2030      	movs	r0, #48	@ 0x30
 8010222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010226:	4422      	add	r2, r4
 8010228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801022c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010230:	3302      	adds	r3, #2
 8010232:	e7c7      	b.n	80101c4 <_printf_common+0x58>
 8010234:	2301      	movs	r3, #1
 8010236:	4622      	mov	r2, r4
 8010238:	4641      	mov	r1, r8
 801023a:	4638      	mov	r0, r7
 801023c:	47c8      	blx	r9
 801023e:	3001      	adds	r0, #1
 8010240:	d0e6      	beq.n	8010210 <_printf_common+0xa4>
 8010242:	3601      	adds	r6, #1
 8010244:	e7d9      	b.n	80101fa <_printf_common+0x8e>
	...

08010248 <_printf_i>:
 8010248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801024c:	7e0f      	ldrb	r7, [r1, #24]
 801024e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010250:	2f78      	cmp	r7, #120	@ 0x78
 8010252:	4691      	mov	r9, r2
 8010254:	4680      	mov	r8, r0
 8010256:	460c      	mov	r4, r1
 8010258:	469a      	mov	sl, r3
 801025a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801025e:	d807      	bhi.n	8010270 <_printf_i+0x28>
 8010260:	2f62      	cmp	r7, #98	@ 0x62
 8010262:	d80a      	bhi.n	801027a <_printf_i+0x32>
 8010264:	2f00      	cmp	r7, #0
 8010266:	f000 80d2 	beq.w	801040e <_printf_i+0x1c6>
 801026a:	2f58      	cmp	r7, #88	@ 0x58
 801026c:	f000 80b9 	beq.w	80103e2 <_printf_i+0x19a>
 8010270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010278:	e03a      	b.n	80102f0 <_printf_i+0xa8>
 801027a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801027e:	2b15      	cmp	r3, #21
 8010280:	d8f6      	bhi.n	8010270 <_printf_i+0x28>
 8010282:	a101      	add	r1, pc, #4	@ (adr r1, 8010288 <_printf_i+0x40>)
 8010284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010288:	080102e1 	.word	0x080102e1
 801028c:	080102f5 	.word	0x080102f5
 8010290:	08010271 	.word	0x08010271
 8010294:	08010271 	.word	0x08010271
 8010298:	08010271 	.word	0x08010271
 801029c:	08010271 	.word	0x08010271
 80102a0:	080102f5 	.word	0x080102f5
 80102a4:	08010271 	.word	0x08010271
 80102a8:	08010271 	.word	0x08010271
 80102ac:	08010271 	.word	0x08010271
 80102b0:	08010271 	.word	0x08010271
 80102b4:	080103f5 	.word	0x080103f5
 80102b8:	0801031f 	.word	0x0801031f
 80102bc:	080103af 	.word	0x080103af
 80102c0:	08010271 	.word	0x08010271
 80102c4:	08010271 	.word	0x08010271
 80102c8:	08010417 	.word	0x08010417
 80102cc:	08010271 	.word	0x08010271
 80102d0:	0801031f 	.word	0x0801031f
 80102d4:	08010271 	.word	0x08010271
 80102d8:	08010271 	.word	0x08010271
 80102dc:	080103b7 	.word	0x080103b7
 80102e0:	6833      	ldr	r3, [r6, #0]
 80102e2:	1d1a      	adds	r2, r3, #4
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	6032      	str	r2, [r6, #0]
 80102e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80102f0:	2301      	movs	r3, #1
 80102f2:	e09d      	b.n	8010430 <_printf_i+0x1e8>
 80102f4:	6833      	ldr	r3, [r6, #0]
 80102f6:	6820      	ldr	r0, [r4, #0]
 80102f8:	1d19      	adds	r1, r3, #4
 80102fa:	6031      	str	r1, [r6, #0]
 80102fc:	0606      	lsls	r6, r0, #24
 80102fe:	d501      	bpl.n	8010304 <_printf_i+0xbc>
 8010300:	681d      	ldr	r5, [r3, #0]
 8010302:	e003      	b.n	801030c <_printf_i+0xc4>
 8010304:	0645      	lsls	r5, r0, #25
 8010306:	d5fb      	bpl.n	8010300 <_printf_i+0xb8>
 8010308:	f9b3 5000 	ldrsh.w	r5, [r3]
 801030c:	2d00      	cmp	r5, #0
 801030e:	da03      	bge.n	8010318 <_printf_i+0xd0>
 8010310:	232d      	movs	r3, #45	@ 0x2d
 8010312:	426d      	negs	r5, r5
 8010314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010318:	4859      	ldr	r0, [pc, #356]	@ (8010480 <_printf_i+0x238>)
 801031a:	230a      	movs	r3, #10
 801031c:	e011      	b.n	8010342 <_printf_i+0xfa>
 801031e:	6821      	ldr	r1, [r4, #0]
 8010320:	6833      	ldr	r3, [r6, #0]
 8010322:	0608      	lsls	r0, r1, #24
 8010324:	f853 5b04 	ldr.w	r5, [r3], #4
 8010328:	d402      	bmi.n	8010330 <_printf_i+0xe8>
 801032a:	0649      	lsls	r1, r1, #25
 801032c:	bf48      	it	mi
 801032e:	b2ad      	uxthmi	r5, r5
 8010330:	2f6f      	cmp	r7, #111	@ 0x6f
 8010332:	4853      	ldr	r0, [pc, #332]	@ (8010480 <_printf_i+0x238>)
 8010334:	6033      	str	r3, [r6, #0]
 8010336:	bf14      	ite	ne
 8010338:	230a      	movne	r3, #10
 801033a:	2308      	moveq	r3, #8
 801033c:	2100      	movs	r1, #0
 801033e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010342:	6866      	ldr	r6, [r4, #4]
 8010344:	60a6      	str	r6, [r4, #8]
 8010346:	2e00      	cmp	r6, #0
 8010348:	bfa2      	ittt	ge
 801034a:	6821      	ldrge	r1, [r4, #0]
 801034c:	f021 0104 	bicge.w	r1, r1, #4
 8010350:	6021      	strge	r1, [r4, #0]
 8010352:	b90d      	cbnz	r5, 8010358 <_printf_i+0x110>
 8010354:	2e00      	cmp	r6, #0
 8010356:	d04b      	beq.n	80103f0 <_printf_i+0x1a8>
 8010358:	4616      	mov	r6, r2
 801035a:	fbb5 f1f3 	udiv	r1, r5, r3
 801035e:	fb03 5711 	mls	r7, r3, r1, r5
 8010362:	5dc7      	ldrb	r7, [r0, r7]
 8010364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010368:	462f      	mov	r7, r5
 801036a:	42bb      	cmp	r3, r7
 801036c:	460d      	mov	r5, r1
 801036e:	d9f4      	bls.n	801035a <_printf_i+0x112>
 8010370:	2b08      	cmp	r3, #8
 8010372:	d10b      	bne.n	801038c <_printf_i+0x144>
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	07df      	lsls	r7, r3, #31
 8010378:	d508      	bpl.n	801038c <_printf_i+0x144>
 801037a:	6923      	ldr	r3, [r4, #16]
 801037c:	6861      	ldr	r1, [r4, #4]
 801037e:	4299      	cmp	r1, r3
 8010380:	bfde      	ittt	le
 8010382:	2330      	movle	r3, #48	@ 0x30
 8010384:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010388:	f106 36ff 	addle.w	r6, r6, #4294967295
 801038c:	1b92      	subs	r2, r2, r6
 801038e:	6122      	str	r2, [r4, #16]
 8010390:	f8cd a000 	str.w	sl, [sp]
 8010394:	464b      	mov	r3, r9
 8010396:	aa03      	add	r2, sp, #12
 8010398:	4621      	mov	r1, r4
 801039a:	4640      	mov	r0, r8
 801039c:	f7ff fee6 	bl	801016c <_printf_common>
 80103a0:	3001      	adds	r0, #1
 80103a2:	d14a      	bne.n	801043a <_printf_i+0x1f2>
 80103a4:	f04f 30ff 	mov.w	r0, #4294967295
 80103a8:	b004      	add	sp, #16
 80103aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	f043 0320 	orr.w	r3, r3, #32
 80103b4:	6023      	str	r3, [r4, #0]
 80103b6:	4833      	ldr	r0, [pc, #204]	@ (8010484 <_printf_i+0x23c>)
 80103b8:	2778      	movs	r7, #120	@ 0x78
 80103ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80103be:	6823      	ldr	r3, [r4, #0]
 80103c0:	6831      	ldr	r1, [r6, #0]
 80103c2:	061f      	lsls	r7, r3, #24
 80103c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80103c8:	d402      	bmi.n	80103d0 <_printf_i+0x188>
 80103ca:	065f      	lsls	r7, r3, #25
 80103cc:	bf48      	it	mi
 80103ce:	b2ad      	uxthmi	r5, r5
 80103d0:	6031      	str	r1, [r6, #0]
 80103d2:	07d9      	lsls	r1, r3, #31
 80103d4:	bf44      	itt	mi
 80103d6:	f043 0320 	orrmi.w	r3, r3, #32
 80103da:	6023      	strmi	r3, [r4, #0]
 80103dc:	b11d      	cbz	r5, 80103e6 <_printf_i+0x19e>
 80103de:	2310      	movs	r3, #16
 80103e0:	e7ac      	b.n	801033c <_printf_i+0xf4>
 80103e2:	4827      	ldr	r0, [pc, #156]	@ (8010480 <_printf_i+0x238>)
 80103e4:	e7e9      	b.n	80103ba <_printf_i+0x172>
 80103e6:	6823      	ldr	r3, [r4, #0]
 80103e8:	f023 0320 	bic.w	r3, r3, #32
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	e7f6      	b.n	80103de <_printf_i+0x196>
 80103f0:	4616      	mov	r6, r2
 80103f2:	e7bd      	b.n	8010370 <_printf_i+0x128>
 80103f4:	6833      	ldr	r3, [r6, #0]
 80103f6:	6825      	ldr	r5, [r4, #0]
 80103f8:	6961      	ldr	r1, [r4, #20]
 80103fa:	1d18      	adds	r0, r3, #4
 80103fc:	6030      	str	r0, [r6, #0]
 80103fe:	062e      	lsls	r6, r5, #24
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	d501      	bpl.n	8010408 <_printf_i+0x1c0>
 8010404:	6019      	str	r1, [r3, #0]
 8010406:	e002      	b.n	801040e <_printf_i+0x1c6>
 8010408:	0668      	lsls	r0, r5, #25
 801040a:	d5fb      	bpl.n	8010404 <_printf_i+0x1bc>
 801040c:	8019      	strh	r1, [r3, #0]
 801040e:	2300      	movs	r3, #0
 8010410:	6123      	str	r3, [r4, #16]
 8010412:	4616      	mov	r6, r2
 8010414:	e7bc      	b.n	8010390 <_printf_i+0x148>
 8010416:	6833      	ldr	r3, [r6, #0]
 8010418:	1d1a      	adds	r2, r3, #4
 801041a:	6032      	str	r2, [r6, #0]
 801041c:	681e      	ldr	r6, [r3, #0]
 801041e:	6862      	ldr	r2, [r4, #4]
 8010420:	2100      	movs	r1, #0
 8010422:	4630      	mov	r0, r6
 8010424:	f7ef fef4 	bl	8000210 <memchr>
 8010428:	b108      	cbz	r0, 801042e <_printf_i+0x1e6>
 801042a:	1b80      	subs	r0, r0, r6
 801042c:	6060      	str	r0, [r4, #4]
 801042e:	6863      	ldr	r3, [r4, #4]
 8010430:	6123      	str	r3, [r4, #16]
 8010432:	2300      	movs	r3, #0
 8010434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010438:	e7aa      	b.n	8010390 <_printf_i+0x148>
 801043a:	6923      	ldr	r3, [r4, #16]
 801043c:	4632      	mov	r2, r6
 801043e:	4649      	mov	r1, r9
 8010440:	4640      	mov	r0, r8
 8010442:	47d0      	blx	sl
 8010444:	3001      	adds	r0, #1
 8010446:	d0ad      	beq.n	80103a4 <_printf_i+0x15c>
 8010448:	6823      	ldr	r3, [r4, #0]
 801044a:	079b      	lsls	r3, r3, #30
 801044c:	d413      	bmi.n	8010476 <_printf_i+0x22e>
 801044e:	68e0      	ldr	r0, [r4, #12]
 8010450:	9b03      	ldr	r3, [sp, #12]
 8010452:	4298      	cmp	r0, r3
 8010454:	bfb8      	it	lt
 8010456:	4618      	movlt	r0, r3
 8010458:	e7a6      	b.n	80103a8 <_printf_i+0x160>
 801045a:	2301      	movs	r3, #1
 801045c:	4632      	mov	r2, r6
 801045e:	4649      	mov	r1, r9
 8010460:	4640      	mov	r0, r8
 8010462:	47d0      	blx	sl
 8010464:	3001      	adds	r0, #1
 8010466:	d09d      	beq.n	80103a4 <_printf_i+0x15c>
 8010468:	3501      	adds	r5, #1
 801046a:	68e3      	ldr	r3, [r4, #12]
 801046c:	9903      	ldr	r1, [sp, #12]
 801046e:	1a5b      	subs	r3, r3, r1
 8010470:	42ab      	cmp	r3, r5
 8010472:	dcf2      	bgt.n	801045a <_printf_i+0x212>
 8010474:	e7eb      	b.n	801044e <_printf_i+0x206>
 8010476:	2500      	movs	r5, #0
 8010478:	f104 0619 	add.w	r6, r4, #25
 801047c:	e7f5      	b.n	801046a <_printf_i+0x222>
 801047e:	bf00      	nop
 8010480:	0801066d 	.word	0x0801066d
 8010484:	0801067e 	.word	0x0801067e

08010488 <memmove>:
 8010488:	4288      	cmp	r0, r1
 801048a:	b510      	push	{r4, lr}
 801048c:	eb01 0402 	add.w	r4, r1, r2
 8010490:	d902      	bls.n	8010498 <memmove+0x10>
 8010492:	4284      	cmp	r4, r0
 8010494:	4623      	mov	r3, r4
 8010496:	d807      	bhi.n	80104a8 <memmove+0x20>
 8010498:	1e43      	subs	r3, r0, #1
 801049a:	42a1      	cmp	r1, r4
 801049c:	d008      	beq.n	80104b0 <memmove+0x28>
 801049e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104a6:	e7f8      	b.n	801049a <memmove+0x12>
 80104a8:	4402      	add	r2, r0
 80104aa:	4601      	mov	r1, r0
 80104ac:	428a      	cmp	r2, r1
 80104ae:	d100      	bne.n	80104b2 <memmove+0x2a>
 80104b0:	bd10      	pop	{r4, pc}
 80104b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104ba:	e7f7      	b.n	80104ac <memmove+0x24>

080104bc <_init>:
 80104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104be:	bf00      	nop
 80104c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c2:	bc08      	pop	{r3}
 80104c4:	469e      	mov	lr, r3
 80104c6:	4770      	bx	lr

080104c8 <_fini>:
 80104c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ca:	bf00      	nop
 80104cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ce:	bc08      	pop	{r3}
 80104d0:	469e      	mov	lr, r3
 80104d2:	4770      	bx	lr
